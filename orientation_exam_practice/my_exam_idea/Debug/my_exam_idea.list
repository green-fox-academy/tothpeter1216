
my_exam_idea.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007758  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  08007928  08007928  00017928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007aac  08007aac  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007aac  08007aac  00017aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ab4  08007ab4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ab4  08007ab4  00017ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ab8  08007ab8  00017ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007abc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003fc0  20000070  08007b2c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004030  08007b2c  00024030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018086  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000035f7  00000000  00000000  00038126  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001478  00000000  00000000  0003b720  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012e0  00000000  00000000  0003cb98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002831a  00000000  00000000  0003de78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011794  00000000  00000000  00066192  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f3a49  00000000  00000000  00077926  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016b36f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bf4  00000000  00000000  0016b3ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007910 	.word	0x08007910

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08007910 	.word	0x08007910

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b4:	2003      	movs	r0, #3
 80005b6:	f000 f8d6 	bl	8000766 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ba:	2000      	movs	r0, #0
 80005bc:	f006 f8ac 	bl	8006718 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80005c0:	f005 ffd2 	bl	8006568 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80005c4:	2300      	movs	r3, #0
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	bd80      	pop	{r7, pc}
	...

080005cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005d0:	4b06      	ldr	r3, [pc, #24]	; (80005ec <HAL_IncTick+0x20>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	461a      	mov	r2, r3
 80005d6:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <HAL_IncTick+0x24>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4413      	add	r3, r2
 80005dc:	4a04      	ldr	r2, [pc, #16]	; (80005f0 <HAL_IncTick+0x24>)
 80005de:	6013      	str	r3, [r2, #0]
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	20000000 	.word	0x20000000
 80005f0:	20003df4 	.word	0x20003df4

080005f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  return uwTick;
 80005f8:	4b03      	ldr	r3, [pc, #12]	; (8000608 <HAL_GetTick+0x14>)
 80005fa:	681b      	ldr	r3, [r3, #0]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	20003df4 	.word	0x20003df4

0800060c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	f003 0307 	and.w	r3, r3, #7
 800061a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800061c:	4b0b      	ldr	r3, [pc, #44]	; (800064c <__NVIC_SetPriorityGrouping+0x40>)
 800061e:	68db      	ldr	r3, [r3, #12]
 8000620:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000622:	68ba      	ldr	r2, [r7, #8]
 8000624:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000628:	4013      	ands	r3, r2
 800062a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <__NVIC_SetPriorityGrouping+0x44>)
 8000636:	4313      	orrs	r3, r2
 8000638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800063a:	4a04      	ldr	r2, [pc, #16]	; (800064c <__NVIC_SetPriorityGrouping+0x40>)
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	60d3      	str	r3, [r2, #12]
}
 8000640:	bf00      	nop
 8000642:	3714      	adds	r7, #20
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr
 800064c:	e000ed00 	.word	0xe000ed00
 8000650:	05fa0000 	.word	0x05fa0000

08000654 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000658:	4b04      	ldr	r3, [pc, #16]	; (800066c <__NVIC_GetPriorityGrouping+0x18>)
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	0a1b      	lsrs	r3, r3, #8
 800065e:	f003 0307 	and.w	r3, r3, #7
}
 8000662:	4618      	mov	r0, r3
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	e000ed00 	.word	0xe000ed00

08000670 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800067a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067e:	2b00      	cmp	r3, #0
 8000680:	db0b      	blt.n	800069a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	f003 021f 	and.w	r2, r3, #31
 8000688:	4907      	ldr	r1, [pc, #28]	; (80006a8 <__NVIC_EnableIRQ+0x38>)
 800068a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068e:	095b      	lsrs	r3, r3, #5
 8000690:	2001      	movs	r0, #1
 8000692:	fa00 f202 	lsl.w	r2, r0, r2
 8000696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800069a:	bf00      	nop
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	e000e100 	.word	0xe000e100

080006ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	6039      	str	r1, [r7, #0]
 80006b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	db0a      	blt.n	80006d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	b2da      	uxtb	r2, r3
 80006c4:	490c      	ldr	r1, [pc, #48]	; (80006f8 <__NVIC_SetPriority+0x4c>)
 80006c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ca:	0112      	lsls	r2, r2, #4
 80006cc:	b2d2      	uxtb	r2, r2
 80006ce:	440b      	add	r3, r1
 80006d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006d4:	e00a      	b.n	80006ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	b2da      	uxtb	r2, r3
 80006da:	4908      	ldr	r1, [pc, #32]	; (80006fc <__NVIC_SetPriority+0x50>)
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	f003 030f 	and.w	r3, r3, #15
 80006e2:	3b04      	subs	r3, #4
 80006e4:	0112      	lsls	r2, r2, #4
 80006e6:	b2d2      	uxtb	r2, r2
 80006e8:	440b      	add	r3, r1
 80006ea:	761a      	strb	r2, [r3, #24]
}
 80006ec:	bf00      	nop
 80006ee:	370c      	adds	r7, #12
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	e000e100 	.word	0xe000e100
 80006fc:	e000ed00 	.word	0xe000ed00

08000700 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000700:	b480      	push	{r7}
 8000702:	b089      	sub	sp, #36	; 0x24
 8000704:	af00      	add	r7, sp, #0
 8000706:	60f8      	str	r0, [r7, #12]
 8000708:	60b9      	str	r1, [r7, #8]
 800070a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	f003 0307 	and.w	r3, r3, #7
 8000712:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000714:	69fb      	ldr	r3, [r7, #28]
 8000716:	f1c3 0307 	rsb	r3, r3, #7
 800071a:	2b04      	cmp	r3, #4
 800071c:	bf28      	it	cs
 800071e:	2304      	movcs	r3, #4
 8000720:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	3304      	adds	r3, #4
 8000726:	2b06      	cmp	r3, #6
 8000728:	d902      	bls.n	8000730 <NVIC_EncodePriority+0x30>
 800072a:	69fb      	ldr	r3, [r7, #28]
 800072c:	3b03      	subs	r3, #3
 800072e:	e000      	b.n	8000732 <NVIC_EncodePriority+0x32>
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000734:	f04f 32ff 	mov.w	r2, #4294967295
 8000738:	69bb      	ldr	r3, [r7, #24]
 800073a:	fa02 f303 	lsl.w	r3, r2, r3
 800073e:	43da      	mvns	r2, r3
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	401a      	ands	r2, r3
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000748:	f04f 31ff 	mov.w	r1, #4294967295
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	fa01 f303 	lsl.w	r3, r1, r3
 8000752:	43d9      	mvns	r1, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000758:	4313      	orrs	r3, r2
         );
}
 800075a:	4618      	mov	r0, r3
 800075c:	3724      	adds	r7, #36	; 0x24
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr

08000766 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	b082      	sub	sp, #8
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f7ff ff4c 	bl	800060c <__NVIC_SetPriorityGrouping>
}
 8000774:	bf00      	nop
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}

0800077c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	60b9      	str	r1, [r7, #8]
 8000786:	607a      	str	r2, [r7, #4]
 8000788:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800078e:	f7ff ff61 	bl	8000654 <__NVIC_GetPriorityGrouping>
 8000792:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000794:	687a      	ldr	r2, [r7, #4]
 8000796:	68b9      	ldr	r1, [r7, #8]
 8000798:	6978      	ldr	r0, [r7, #20]
 800079a:	f7ff ffb1 	bl	8000700 <NVIC_EncodePriority>
 800079e:	4602      	mov	r2, r0
 80007a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007a4:	4611      	mov	r1, r2
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff ff80 	bl	80006ac <__NVIC_SetPriority>
}
 80007ac:	bf00      	nop
 80007ae:	3718      	adds	r7, #24
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff ff54 	bl	8000670 <__NVIC_EnableIRQ>
}
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	2b02      	cmp	r3, #2
 80007e2:	d004      	beq.n	80007ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2280      	movs	r2, #128	; 0x80
 80007e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80007ea:	2301      	movs	r3, #1
 80007ec:	e00c      	b.n	8000808 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2205      	movs	r2, #5
 80007f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f022 0201 	bic.w	r2, r2, #1
 8000804:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000806:	2300      	movs	r3, #0
}
 8000808:	4618      	mov	r0, r3
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000814:	b480      	push	{r7}
 8000816:	b089      	sub	sp, #36	; 0x24
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800081e:	2300      	movs	r3, #0
 8000820:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]
 8000832:	e175      	b.n	8000b20 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000834:	2201      	movs	r2, #1
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	fa02 f303 	lsl.w	r3, r2, r3
 800083c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	697a      	ldr	r2, [r7, #20]
 8000844:	4013      	ands	r3, r2
 8000846:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000848:	693a      	ldr	r2, [r7, #16]
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	429a      	cmp	r2, r3
 800084e:	f040 8164 	bne.w	8000b1a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	2b02      	cmp	r3, #2
 8000858:	d003      	beq.n	8000862 <HAL_GPIO_Init+0x4e>
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	2b12      	cmp	r3, #18
 8000860:	d123      	bne.n	80008aa <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000862:	69fb      	ldr	r3, [r7, #28]
 8000864:	08da      	lsrs	r2, r3, #3
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	3208      	adds	r2, #8
 800086a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800086e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000870:	69fb      	ldr	r3, [r7, #28]
 8000872:	f003 0307 	and.w	r3, r3, #7
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	220f      	movs	r2, #15
 800087a:	fa02 f303 	lsl.w	r3, r2, r3
 800087e:	43db      	mvns	r3, r3
 8000880:	69ba      	ldr	r2, [r7, #24]
 8000882:	4013      	ands	r3, r2
 8000884:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	691a      	ldr	r2, [r3, #16]
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	f003 0307 	and.w	r3, r3, #7
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	fa02 f303 	lsl.w	r3, r2, r3
 8000896:	69ba      	ldr	r2, [r7, #24]
 8000898:	4313      	orrs	r3, r2
 800089a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800089c:	69fb      	ldr	r3, [r7, #28]
 800089e:	08da      	lsrs	r2, r3, #3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	3208      	adds	r2, #8
 80008a4:	69b9      	ldr	r1, [r7, #24]
 80008a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	2203      	movs	r2, #3
 80008b6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ba:	43db      	mvns	r3, r3
 80008bc:	69ba      	ldr	r2, [r7, #24]
 80008be:	4013      	ands	r3, r2
 80008c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	f003 0203 	and.w	r2, r3, #3
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	005b      	lsls	r3, r3, #1
 80008ce:	fa02 f303 	lsl.w	r3, r2, r3
 80008d2:	69ba      	ldr	r2, [r7, #24]
 80008d4:	4313      	orrs	r3, r2
 80008d6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	69ba      	ldr	r2, [r7, #24]
 80008dc:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d00b      	beq.n	80008fe <HAL_GPIO_Init+0xea>
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	2b02      	cmp	r3, #2
 80008ec:	d007      	beq.n	80008fe <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008f2:	2b11      	cmp	r3, #17
 80008f4:	d003      	beq.n	80008fe <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	2b12      	cmp	r3, #18
 80008fc:	d130      	bne.n	8000960 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	689b      	ldr	r3, [r3, #8]
 8000902:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000904:	69fb      	ldr	r3, [r7, #28]
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	2203      	movs	r2, #3
 800090a:	fa02 f303 	lsl.w	r3, r2, r3
 800090e:	43db      	mvns	r3, r3
 8000910:	69ba      	ldr	r2, [r7, #24]
 8000912:	4013      	ands	r3, r2
 8000914:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	68da      	ldr	r2, [r3, #12]
 800091a:	69fb      	ldr	r3, [r7, #28]
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	fa02 f303 	lsl.w	r3, r2, r3
 8000922:	69ba      	ldr	r2, [r7, #24]
 8000924:	4313      	orrs	r3, r2
 8000926:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	69ba      	ldr	r2, [r7, #24]
 800092c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000934:	2201      	movs	r2, #1
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	fa02 f303 	lsl.w	r3, r2, r3
 800093c:	43db      	mvns	r3, r3
 800093e:	69ba      	ldr	r2, [r7, #24]
 8000940:	4013      	ands	r3, r2
 8000942:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	091b      	lsrs	r3, r3, #4
 800094a:	f003 0201 	and.w	r2, r3, #1
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	fa02 f303 	lsl.w	r3, r2, r3
 8000954:	69ba      	ldr	r2, [r7, #24]
 8000956:	4313      	orrs	r3, r2
 8000958:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	69ba      	ldr	r2, [r7, #24]
 800095e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	68db      	ldr	r3, [r3, #12]
 8000964:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	2203      	movs	r2, #3
 800096c:	fa02 f303 	lsl.w	r3, r2, r3
 8000970:	43db      	mvns	r3, r3
 8000972:	69ba      	ldr	r2, [r7, #24]
 8000974:	4013      	ands	r3, r2
 8000976:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	689a      	ldr	r2, [r3, #8]
 800097c:	69fb      	ldr	r3, [r7, #28]
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	fa02 f303 	lsl.w	r3, r2, r3
 8000984:	69ba      	ldr	r2, [r7, #24]
 8000986:	4313      	orrs	r3, r2
 8000988:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	69ba      	ldr	r2, [r7, #24]
 800098e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000998:	2b00      	cmp	r3, #0
 800099a:	f000 80be 	beq.w	8000b1a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099e:	4b65      	ldr	r3, [pc, #404]	; (8000b34 <HAL_GPIO_Init+0x320>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	4a64      	ldr	r2, [pc, #400]	; (8000b34 <HAL_GPIO_Init+0x320>)
 80009a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a8:	6453      	str	r3, [r2, #68]	; 0x44
 80009aa:	4b62      	ldr	r3, [pc, #392]	; (8000b34 <HAL_GPIO_Init+0x320>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80009b6:	4a60      	ldr	r2, [pc, #384]	; (8000b38 <HAL_GPIO_Init+0x324>)
 80009b8:	69fb      	ldr	r3, [r7, #28]
 80009ba:	089b      	lsrs	r3, r3, #2
 80009bc:	3302      	adds	r3, #2
 80009be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80009c4:	69fb      	ldr	r3, [r7, #28]
 80009c6:	f003 0303 	and.w	r3, r3, #3
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	220f      	movs	r2, #15
 80009ce:	fa02 f303 	lsl.w	r3, r2, r3
 80009d2:	43db      	mvns	r3, r3
 80009d4:	69ba      	ldr	r2, [r7, #24]
 80009d6:	4013      	ands	r3, r2
 80009d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a57      	ldr	r2, [pc, #348]	; (8000b3c <HAL_GPIO_Init+0x328>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d037      	beq.n	8000a52 <HAL_GPIO_Init+0x23e>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a56      	ldr	r2, [pc, #344]	; (8000b40 <HAL_GPIO_Init+0x32c>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d031      	beq.n	8000a4e <HAL_GPIO_Init+0x23a>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a55      	ldr	r2, [pc, #340]	; (8000b44 <HAL_GPIO_Init+0x330>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d02b      	beq.n	8000a4a <HAL_GPIO_Init+0x236>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a54      	ldr	r2, [pc, #336]	; (8000b48 <HAL_GPIO_Init+0x334>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d025      	beq.n	8000a46 <HAL_GPIO_Init+0x232>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a53      	ldr	r2, [pc, #332]	; (8000b4c <HAL_GPIO_Init+0x338>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d01f      	beq.n	8000a42 <HAL_GPIO_Init+0x22e>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a52      	ldr	r2, [pc, #328]	; (8000b50 <HAL_GPIO_Init+0x33c>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d019      	beq.n	8000a3e <HAL_GPIO_Init+0x22a>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a51      	ldr	r2, [pc, #324]	; (8000b54 <HAL_GPIO_Init+0x340>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d013      	beq.n	8000a3a <HAL_GPIO_Init+0x226>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a50      	ldr	r2, [pc, #320]	; (8000b58 <HAL_GPIO_Init+0x344>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d00d      	beq.n	8000a36 <HAL_GPIO_Init+0x222>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a4f      	ldr	r2, [pc, #316]	; (8000b5c <HAL_GPIO_Init+0x348>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d007      	beq.n	8000a32 <HAL_GPIO_Init+0x21e>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4a4e      	ldr	r2, [pc, #312]	; (8000b60 <HAL_GPIO_Init+0x34c>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d101      	bne.n	8000a2e <HAL_GPIO_Init+0x21a>
 8000a2a:	2309      	movs	r3, #9
 8000a2c:	e012      	b.n	8000a54 <HAL_GPIO_Init+0x240>
 8000a2e:	230a      	movs	r3, #10
 8000a30:	e010      	b.n	8000a54 <HAL_GPIO_Init+0x240>
 8000a32:	2308      	movs	r3, #8
 8000a34:	e00e      	b.n	8000a54 <HAL_GPIO_Init+0x240>
 8000a36:	2307      	movs	r3, #7
 8000a38:	e00c      	b.n	8000a54 <HAL_GPIO_Init+0x240>
 8000a3a:	2306      	movs	r3, #6
 8000a3c:	e00a      	b.n	8000a54 <HAL_GPIO_Init+0x240>
 8000a3e:	2305      	movs	r3, #5
 8000a40:	e008      	b.n	8000a54 <HAL_GPIO_Init+0x240>
 8000a42:	2304      	movs	r3, #4
 8000a44:	e006      	b.n	8000a54 <HAL_GPIO_Init+0x240>
 8000a46:	2303      	movs	r3, #3
 8000a48:	e004      	b.n	8000a54 <HAL_GPIO_Init+0x240>
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	e002      	b.n	8000a54 <HAL_GPIO_Init+0x240>
 8000a4e:	2301      	movs	r3, #1
 8000a50:	e000      	b.n	8000a54 <HAL_GPIO_Init+0x240>
 8000a52:	2300      	movs	r3, #0
 8000a54:	69fa      	ldr	r2, [r7, #28]
 8000a56:	f002 0203 	and.w	r2, r2, #3
 8000a5a:	0092      	lsls	r2, r2, #2
 8000a5c:	4093      	lsls	r3, r2
 8000a5e:	69ba      	ldr	r2, [r7, #24]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000a64:	4934      	ldr	r1, [pc, #208]	; (8000b38 <HAL_GPIO_Init+0x324>)
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	089b      	lsrs	r3, r3, #2
 8000a6a:	3302      	adds	r3, #2
 8000a6c:	69ba      	ldr	r2, [r7, #24]
 8000a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a72:	4b3c      	ldr	r3, [pc, #240]	; (8000b64 <HAL_GPIO_Init+0x350>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	43db      	mvns	r3, r3
 8000a7c:	69ba      	ldr	r2, [r7, #24]
 8000a7e:	4013      	ands	r3, r2
 8000a80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d003      	beq.n	8000a96 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000a8e:	69ba      	ldr	r2, [r7, #24]
 8000a90:	693b      	ldr	r3, [r7, #16]
 8000a92:	4313      	orrs	r3, r2
 8000a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a96:	4a33      	ldr	r2, [pc, #204]	; (8000b64 <HAL_GPIO_Init+0x350>)
 8000a98:	69bb      	ldr	r3, [r7, #24]
 8000a9a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a9c:	4b31      	ldr	r3, [pc, #196]	; (8000b64 <HAL_GPIO_Init+0x350>)
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	43db      	mvns	r3, r3
 8000aa6:	69ba      	ldr	r2, [r7, #24]
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d003      	beq.n	8000ac0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000ab8:	69ba      	ldr	r2, [r7, #24]
 8000aba:	693b      	ldr	r3, [r7, #16]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ac0:	4a28      	ldr	r2, [pc, #160]	; (8000b64 <HAL_GPIO_Init+0x350>)
 8000ac2:	69bb      	ldr	r3, [r7, #24]
 8000ac4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ac6:	4b27      	ldr	r3, [pc, #156]	; (8000b64 <HAL_GPIO_Init+0x350>)
 8000ac8:	689b      	ldr	r3, [r3, #8]
 8000aca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000acc:	693b      	ldr	r3, [r7, #16]
 8000ace:	43db      	mvns	r3, r3
 8000ad0:	69ba      	ldr	r2, [r7, #24]
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d003      	beq.n	8000aea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000ae2:	69ba      	ldr	r2, [r7, #24]
 8000ae4:	693b      	ldr	r3, [r7, #16]
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000aea:	4a1e      	ldr	r2, [pc, #120]	; (8000b64 <HAL_GPIO_Init+0x350>)
 8000aec:	69bb      	ldr	r3, [r7, #24]
 8000aee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000af0:	4b1c      	ldr	r3, [pc, #112]	; (8000b64 <HAL_GPIO_Init+0x350>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	43db      	mvns	r3, r3
 8000afa:	69ba      	ldr	r2, [r7, #24]
 8000afc:	4013      	ands	r3, r2
 8000afe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d003      	beq.n	8000b14 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000b0c:	69ba      	ldr	r2, [r7, #24]
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b14:	4a13      	ldr	r2, [pc, #76]	; (8000b64 <HAL_GPIO_Init+0x350>)
 8000b16:	69bb      	ldr	r3, [r7, #24]
 8000b18:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	61fb      	str	r3, [r7, #28]
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	2b0f      	cmp	r3, #15
 8000b24:	f67f ae86 	bls.w	8000834 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000b28:	bf00      	nop
 8000b2a:	3724      	adds	r7, #36	; 0x24
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40013800 	.word	0x40013800
 8000b3c:	40020000 	.word	0x40020000
 8000b40:	40020400 	.word	0x40020400
 8000b44:	40020800 	.word	0x40020800
 8000b48:	40020c00 	.word	0x40020c00
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	40021400 	.word	0x40021400
 8000b54:	40021800 	.word	0x40021800
 8000b58:	40021c00 	.word	0x40021c00
 8000b5c:	40022000 	.word	0x40022000
 8000b60:	40022400 	.word	0x40022400
 8000b64:	40013c00 	.word	0x40013c00

08000b68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	460b      	mov	r3, r1
 8000b72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	691a      	ldr	r2, [r3, #16]
 8000b78:	887b      	ldrh	r3, [r7, #2]
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d002      	beq.n	8000b86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000b80:	2301      	movs	r3, #1
 8000b82:	73fb      	strb	r3, [r7, #15]
 8000b84:	e001      	b.n	8000b8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000b86:	2300      	movs	r3, #0
 8000b88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3714      	adds	r7, #20
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000ba2:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ba4:	695a      	ldr	r2, [r3, #20]
 8000ba6:	88fb      	ldrh	r3, [r7, #6]
 8000ba8:	4013      	ands	r3, r2
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d006      	beq.n	8000bbc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000bae:	4a05      	ldr	r2, [pc, #20]	; (8000bc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000bb0:	88fb      	ldrh	r3, [r7, #6]
 8000bb2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000bb4:	88fb      	ldrh	r3, [r7, #6]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f005 fb6e 	bl	8006298 <HAL_GPIO_EXTI_Callback>
  }
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40013c00 	.word	0x40013c00

08000bc8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd2:	4b23      	ldr	r3, [pc, #140]	; (8000c60 <HAL_PWREx_EnableOverDrive+0x98>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	4a22      	ldr	r2, [pc, #136]	; (8000c60 <HAL_PWREx_EnableOverDrive+0x98>)
 8000bd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bde:	4b20      	ldr	r3, [pc, #128]	; (8000c60 <HAL_PWREx_EnableOverDrive+0x98>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be6:	603b      	str	r3, [r7, #0]
 8000be8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000bea:	4b1e      	ldr	r3, [pc, #120]	; (8000c64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a1d      	ldr	r2, [pc, #116]	; (8000c64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bf4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bf6:	f7ff fcfd 	bl	80005f4 <HAL_GetTick>
 8000bfa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000bfc:	e009      	b.n	8000c12 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000bfe:	f7ff fcf9 	bl	80005f4 <HAL_GetTick>
 8000c02:	4602      	mov	r2, r0
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	1ad3      	subs	r3, r2, r3
 8000c08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c0c:	d901      	bls.n	8000c12 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8000c0e:	2303      	movs	r3, #3
 8000c10:	e022      	b.n	8000c58 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000c12:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c1e:	d1ee      	bne.n	8000bfe <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000c20:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a0f      	ldr	r2, [pc, #60]	; (8000c64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000c26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c2a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c2c:	f7ff fce2 	bl	80005f4 <HAL_GetTick>
 8000c30:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000c32:	e009      	b.n	8000c48 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000c34:	f7ff fcde 	bl	80005f4 <HAL_GetTick>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c42:	d901      	bls.n	8000c48 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8000c44:	2303      	movs	r3, #3
 8000c46:	e007      	b.n	8000c58 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000c54:	d1ee      	bne.n	8000c34 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8000c56:	2300      	movs	r3, #0
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40007000 	.word	0x40007000

08000c68 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8000c70:	2300      	movs	r3, #0
 8000c72:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d101      	bne.n	8000c7e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e25c      	b.n	8001138 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	f000 8087 	beq.w	8000d9a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c8c:	4b96      	ldr	r3, [pc, #600]	; (8000ee8 <HAL_RCC_OscConfig+0x280>)
 8000c8e:	689b      	ldr	r3, [r3, #8]
 8000c90:	f003 030c 	and.w	r3, r3, #12
 8000c94:	2b04      	cmp	r3, #4
 8000c96:	d00c      	beq.n	8000cb2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c98:	4b93      	ldr	r3, [pc, #588]	; (8000ee8 <HAL_RCC_OscConfig+0x280>)
 8000c9a:	689b      	ldr	r3, [r3, #8]
 8000c9c:	f003 030c 	and.w	r3, r3, #12
 8000ca0:	2b08      	cmp	r3, #8
 8000ca2:	d112      	bne.n	8000cca <HAL_RCC_OscConfig+0x62>
 8000ca4:	4b90      	ldr	r3, [pc, #576]	; (8000ee8 <HAL_RCC_OscConfig+0x280>)
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000cb0:	d10b      	bne.n	8000cca <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cb2:	4b8d      	ldr	r3, [pc, #564]	; (8000ee8 <HAL_RCC_OscConfig+0x280>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d06c      	beq.n	8000d98 <HAL_RCC_OscConfig+0x130>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d168      	bne.n	8000d98 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e236      	b.n	8001138 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cd2:	d106      	bne.n	8000ce2 <HAL_RCC_OscConfig+0x7a>
 8000cd4:	4b84      	ldr	r3, [pc, #528]	; (8000ee8 <HAL_RCC_OscConfig+0x280>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a83      	ldr	r2, [pc, #524]	; (8000ee8 <HAL_RCC_OscConfig+0x280>)
 8000cda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cde:	6013      	str	r3, [r2, #0]
 8000ce0:	e02e      	b.n	8000d40 <HAL_RCC_OscConfig+0xd8>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d10c      	bne.n	8000d04 <HAL_RCC_OscConfig+0x9c>
 8000cea:	4b7f      	ldr	r3, [pc, #508]	; (8000ee8 <HAL_RCC_OscConfig+0x280>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a7e      	ldr	r2, [pc, #504]	; (8000ee8 <HAL_RCC_OscConfig+0x280>)
 8000cf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cf4:	6013      	str	r3, [r2, #0]
 8000cf6:	4b7c      	ldr	r3, [pc, #496]	; (8000ee8 <HAL_RCC_OscConfig+0x280>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a7b      	ldr	r2, [pc, #492]	; (8000ee8 <HAL_RCC_OscConfig+0x280>)
 8000cfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d00:	6013      	str	r3, [r2, #0]
 8000d02:	e01d      	b.n	8000d40 <HAL_RCC_OscConfig+0xd8>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d0c:	d10c      	bne.n	8000d28 <HAL_RCC_OscConfig+0xc0>
 8000d0e:	4b76      	ldr	r3, [pc, #472]	; (8000ee8 <HAL_RCC_OscConfig+0x280>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a75      	ldr	r2, [pc, #468]	; (8000ee8 <HAL_RCC_OscConfig+0x280>)
 8000d14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d18:	6013      	str	r3, [r2, #0]
 8000d1a:	4b73      	ldr	r3, [pc, #460]	; (8000ee8 <HAL_RCC_OscConfig+0x280>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a72      	ldr	r2, [pc, #456]	; (8000ee8 <HAL_RCC_OscConfig+0x280>)
 8000d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d24:	6013      	str	r3, [r2, #0]
 8000d26:	e00b      	b.n	8000d40 <HAL_RCC_OscConfig+0xd8>
 8000d28:	4b6f      	ldr	r3, [pc, #444]	; (8000ee8 <HAL_RCC_OscConfig+0x280>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a6e      	ldr	r2, [pc, #440]	; (8000ee8 <HAL_RCC_OscConfig+0x280>)
 8000d2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d32:	6013      	str	r3, [r2, #0]
 8000d34:	4b6c      	ldr	r3, [pc, #432]	; (8000ee8 <HAL_RCC_OscConfig+0x280>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a6b      	ldr	r2, [pc, #428]	; (8000ee8 <HAL_RCC_OscConfig+0x280>)
 8000d3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d013      	beq.n	8000d70 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d48:	f7ff fc54 	bl	80005f4 <HAL_GetTick>
 8000d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d4e:	e008      	b.n	8000d62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d50:	f7ff fc50 	bl	80005f4 <HAL_GetTick>
 8000d54:	4602      	mov	r2, r0
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	2b64      	cmp	r3, #100	; 0x64
 8000d5c:	d901      	bls.n	8000d62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	e1ea      	b.n	8001138 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d62:	4b61      	ldr	r3, [pc, #388]	; (8000ee8 <HAL_RCC_OscConfig+0x280>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d0f0      	beq.n	8000d50 <HAL_RCC_OscConfig+0xe8>
 8000d6e:	e014      	b.n	8000d9a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d70:	f7ff fc40 	bl	80005f4 <HAL_GetTick>
 8000d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d76:	e008      	b.n	8000d8a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d78:	f7ff fc3c 	bl	80005f4 <HAL_GetTick>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	2b64      	cmp	r3, #100	; 0x64
 8000d84:	d901      	bls.n	8000d8a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000d86:	2303      	movs	r3, #3
 8000d88:	e1d6      	b.n	8001138 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d8a:	4b57      	ldr	r3, [pc, #348]	; (8000ee8 <HAL_RCC_OscConfig+0x280>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d1f0      	bne.n	8000d78 <HAL_RCC_OscConfig+0x110>
 8000d96:	e000      	b.n	8000d9a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f003 0302 	and.w	r3, r3, #2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d069      	beq.n	8000e7a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000da6:	4b50      	ldr	r3, [pc, #320]	; (8000ee8 <HAL_RCC_OscConfig+0x280>)
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	f003 030c 	and.w	r3, r3, #12
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d00b      	beq.n	8000dca <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000db2:	4b4d      	ldr	r3, [pc, #308]	; (8000ee8 <HAL_RCC_OscConfig+0x280>)
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	f003 030c 	and.w	r3, r3, #12
 8000dba:	2b08      	cmp	r3, #8
 8000dbc:	d11c      	bne.n	8000df8 <HAL_RCC_OscConfig+0x190>
 8000dbe:	4b4a      	ldr	r3, [pc, #296]	; (8000ee8 <HAL_RCC_OscConfig+0x280>)
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d116      	bne.n	8000df8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dca:	4b47      	ldr	r3, [pc, #284]	; (8000ee8 <HAL_RCC_OscConfig+0x280>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f003 0302 	and.w	r3, r3, #2
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d005      	beq.n	8000de2 <HAL_RCC_OscConfig+0x17a>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	68db      	ldr	r3, [r3, #12]
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d001      	beq.n	8000de2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e1aa      	b.n	8001138 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000de2:	4b41      	ldr	r3, [pc, #260]	; (8000ee8 <HAL_RCC_OscConfig+0x280>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	691b      	ldr	r3, [r3, #16]
 8000dee:	00db      	lsls	r3, r3, #3
 8000df0:	493d      	ldr	r1, [pc, #244]	; (8000ee8 <HAL_RCC_OscConfig+0x280>)
 8000df2:	4313      	orrs	r3, r2
 8000df4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000df6:	e040      	b.n	8000e7a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d023      	beq.n	8000e48 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e00:	4b39      	ldr	r3, [pc, #228]	; (8000ee8 <HAL_RCC_OscConfig+0x280>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a38      	ldr	r2, [pc, #224]	; (8000ee8 <HAL_RCC_OscConfig+0x280>)
 8000e06:	f043 0301 	orr.w	r3, r3, #1
 8000e0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e0c:	f7ff fbf2 	bl	80005f4 <HAL_GetTick>
 8000e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e12:	e008      	b.n	8000e26 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e14:	f7ff fbee 	bl	80005f4 <HAL_GetTick>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	d901      	bls.n	8000e26 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8000e22:	2303      	movs	r3, #3
 8000e24:	e188      	b.n	8001138 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e26:	4b30      	ldr	r3, [pc, #192]	; (8000ee8 <HAL_RCC_OscConfig+0x280>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f003 0302 	and.w	r3, r3, #2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d0f0      	beq.n	8000e14 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e32:	4b2d      	ldr	r3, [pc, #180]	; (8000ee8 <HAL_RCC_OscConfig+0x280>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	691b      	ldr	r3, [r3, #16]
 8000e3e:	00db      	lsls	r3, r3, #3
 8000e40:	4929      	ldr	r1, [pc, #164]	; (8000ee8 <HAL_RCC_OscConfig+0x280>)
 8000e42:	4313      	orrs	r3, r2
 8000e44:	600b      	str	r3, [r1, #0]
 8000e46:	e018      	b.n	8000e7a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e48:	4b27      	ldr	r3, [pc, #156]	; (8000ee8 <HAL_RCC_OscConfig+0x280>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a26      	ldr	r2, [pc, #152]	; (8000ee8 <HAL_RCC_OscConfig+0x280>)
 8000e4e:	f023 0301 	bic.w	r3, r3, #1
 8000e52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e54:	f7ff fbce 	bl	80005f4 <HAL_GetTick>
 8000e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e5a:	e008      	b.n	8000e6e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e5c:	f7ff fbca 	bl	80005f4 <HAL_GetTick>
 8000e60:	4602      	mov	r2, r0
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d901      	bls.n	8000e6e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	e164      	b.n	8001138 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e6e:	4b1e      	ldr	r3, [pc, #120]	; (8000ee8 <HAL_RCC_OscConfig+0x280>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f003 0302 	and.w	r3, r3, #2
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d1f0      	bne.n	8000e5c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f003 0308 	and.w	r3, r3, #8
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d038      	beq.n	8000ef8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	695b      	ldr	r3, [r3, #20]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d019      	beq.n	8000ec2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e8e:	4b16      	ldr	r3, [pc, #88]	; (8000ee8 <HAL_RCC_OscConfig+0x280>)
 8000e90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e92:	4a15      	ldr	r2, [pc, #84]	; (8000ee8 <HAL_RCC_OscConfig+0x280>)
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e9a:	f7ff fbab 	bl	80005f4 <HAL_GetTick>
 8000e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ea0:	e008      	b.n	8000eb4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ea2:	f7ff fba7 	bl	80005f4 <HAL_GetTick>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	1ad3      	subs	r3, r2, r3
 8000eac:	2b02      	cmp	r3, #2
 8000eae:	d901      	bls.n	8000eb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	e141      	b.n	8001138 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <HAL_RCC_OscConfig+0x280>)
 8000eb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000eb8:	f003 0302 	and.w	r3, r3, #2
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d0f0      	beq.n	8000ea2 <HAL_RCC_OscConfig+0x23a>
 8000ec0:	e01a      	b.n	8000ef8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ec2:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <HAL_RCC_OscConfig+0x280>)
 8000ec4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ec6:	4a08      	ldr	r2, [pc, #32]	; (8000ee8 <HAL_RCC_OscConfig+0x280>)
 8000ec8:	f023 0301 	bic.w	r3, r3, #1
 8000ecc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ece:	f7ff fb91 	bl	80005f4 <HAL_GetTick>
 8000ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ed4:	e00a      	b.n	8000eec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ed6:	f7ff fb8d 	bl	80005f4 <HAL_GetTick>
 8000eda:	4602      	mov	r2, r0
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d903      	bls.n	8000eec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	e127      	b.n	8001138 <HAL_RCC_OscConfig+0x4d0>
 8000ee8:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eec:	4b94      	ldr	r3, [pc, #592]	; (8001140 <HAL_RCC_OscConfig+0x4d8>)
 8000eee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ef0:	f003 0302 	and.w	r3, r3, #2
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d1ee      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f003 0304 	and.w	r3, r3, #4
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	f000 80a4 	beq.w	800104e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f06:	4b8e      	ldr	r3, [pc, #568]	; (8001140 <HAL_RCC_OscConfig+0x4d8>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d10d      	bne.n	8000f2e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f12:	4b8b      	ldr	r3, [pc, #556]	; (8001140 <HAL_RCC_OscConfig+0x4d8>)
 8000f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f16:	4a8a      	ldr	r2, [pc, #552]	; (8001140 <HAL_RCC_OscConfig+0x4d8>)
 8000f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f1e:	4b88      	ldr	r3, [pc, #544]	; (8001140 <HAL_RCC_OscConfig+0x4d8>)
 8000f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f2e:	4b85      	ldr	r3, [pc, #532]	; (8001144 <HAL_RCC_OscConfig+0x4dc>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d118      	bne.n	8000f6c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8000f3a:	4b82      	ldr	r3, [pc, #520]	; (8001144 <HAL_RCC_OscConfig+0x4dc>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a81      	ldr	r2, [pc, #516]	; (8001144 <HAL_RCC_OscConfig+0x4dc>)
 8000f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f46:	f7ff fb55 	bl	80005f4 <HAL_GetTick>
 8000f4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f4c:	e008      	b.n	8000f60 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000f4e:	f7ff fb51 	bl	80005f4 <HAL_GetTick>
 8000f52:	4602      	mov	r2, r0
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	2b64      	cmp	r3, #100	; 0x64
 8000f5a:	d901      	bls.n	8000f60 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	e0eb      	b.n	8001138 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f60:	4b78      	ldr	r3, [pc, #480]	; (8001144 <HAL_RCC_OscConfig+0x4dc>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d0f0      	beq.n	8000f4e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d106      	bne.n	8000f82 <HAL_RCC_OscConfig+0x31a>
 8000f74:	4b72      	ldr	r3, [pc, #456]	; (8001140 <HAL_RCC_OscConfig+0x4d8>)
 8000f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f78:	4a71      	ldr	r2, [pc, #452]	; (8001140 <HAL_RCC_OscConfig+0x4d8>)
 8000f7a:	f043 0301 	orr.w	r3, r3, #1
 8000f7e:	6713      	str	r3, [r2, #112]	; 0x70
 8000f80:	e02d      	b.n	8000fde <HAL_RCC_OscConfig+0x376>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d10c      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x33c>
 8000f8a:	4b6d      	ldr	r3, [pc, #436]	; (8001140 <HAL_RCC_OscConfig+0x4d8>)
 8000f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f8e:	4a6c      	ldr	r2, [pc, #432]	; (8001140 <HAL_RCC_OscConfig+0x4d8>)
 8000f90:	f023 0301 	bic.w	r3, r3, #1
 8000f94:	6713      	str	r3, [r2, #112]	; 0x70
 8000f96:	4b6a      	ldr	r3, [pc, #424]	; (8001140 <HAL_RCC_OscConfig+0x4d8>)
 8000f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f9a:	4a69      	ldr	r2, [pc, #420]	; (8001140 <HAL_RCC_OscConfig+0x4d8>)
 8000f9c:	f023 0304 	bic.w	r3, r3, #4
 8000fa0:	6713      	str	r3, [r2, #112]	; 0x70
 8000fa2:	e01c      	b.n	8000fde <HAL_RCC_OscConfig+0x376>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	2b05      	cmp	r3, #5
 8000faa:	d10c      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x35e>
 8000fac:	4b64      	ldr	r3, [pc, #400]	; (8001140 <HAL_RCC_OscConfig+0x4d8>)
 8000fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fb0:	4a63      	ldr	r2, [pc, #396]	; (8001140 <HAL_RCC_OscConfig+0x4d8>)
 8000fb2:	f043 0304 	orr.w	r3, r3, #4
 8000fb6:	6713      	str	r3, [r2, #112]	; 0x70
 8000fb8:	4b61      	ldr	r3, [pc, #388]	; (8001140 <HAL_RCC_OscConfig+0x4d8>)
 8000fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fbc:	4a60      	ldr	r2, [pc, #384]	; (8001140 <HAL_RCC_OscConfig+0x4d8>)
 8000fbe:	f043 0301 	orr.w	r3, r3, #1
 8000fc2:	6713      	str	r3, [r2, #112]	; 0x70
 8000fc4:	e00b      	b.n	8000fde <HAL_RCC_OscConfig+0x376>
 8000fc6:	4b5e      	ldr	r3, [pc, #376]	; (8001140 <HAL_RCC_OscConfig+0x4d8>)
 8000fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fca:	4a5d      	ldr	r2, [pc, #372]	; (8001140 <HAL_RCC_OscConfig+0x4d8>)
 8000fcc:	f023 0301 	bic.w	r3, r3, #1
 8000fd0:	6713      	str	r3, [r2, #112]	; 0x70
 8000fd2:	4b5b      	ldr	r3, [pc, #364]	; (8001140 <HAL_RCC_OscConfig+0x4d8>)
 8000fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fd6:	4a5a      	ldr	r2, [pc, #360]	; (8001140 <HAL_RCC_OscConfig+0x4d8>)
 8000fd8:	f023 0304 	bic.w	r3, r3, #4
 8000fdc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d015      	beq.n	8001012 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fe6:	f7ff fb05 	bl	80005f4 <HAL_GetTick>
 8000fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fec:	e00a      	b.n	8001004 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fee:	f7ff fb01 	bl	80005f4 <HAL_GetTick>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d901      	bls.n	8001004 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001000:	2303      	movs	r3, #3
 8001002:	e099      	b.n	8001138 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001004:	4b4e      	ldr	r3, [pc, #312]	; (8001140 <HAL_RCC_OscConfig+0x4d8>)
 8001006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001008:	f003 0302 	and.w	r3, r3, #2
 800100c:	2b00      	cmp	r3, #0
 800100e:	d0ee      	beq.n	8000fee <HAL_RCC_OscConfig+0x386>
 8001010:	e014      	b.n	800103c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001012:	f7ff faef 	bl	80005f4 <HAL_GetTick>
 8001016:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001018:	e00a      	b.n	8001030 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800101a:	f7ff faeb 	bl	80005f4 <HAL_GetTick>
 800101e:	4602      	mov	r2, r0
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	f241 3288 	movw	r2, #5000	; 0x1388
 8001028:	4293      	cmp	r3, r2
 800102a:	d901      	bls.n	8001030 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800102c:	2303      	movs	r3, #3
 800102e:	e083      	b.n	8001138 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001030:	4b43      	ldr	r3, [pc, #268]	; (8001140 <HAL_RCC_OscConfig+0x4d8>)
 8001032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001034:	f003 0302 	and.w	r3, r3, #2
 8001038:	2b00      	cmp	r3, #0
 800103a:	d1ee      	bne.n	800101a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800103c:	7dfb      	ldrb	r3, [r7, #23]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d105      	bne.n	800104e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001042:	4b3f      	ldr	r3, [pc, #252]	; (8001140 <HAL_RCC_OscConfig+0x4d8>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	4a3e      	ldr	r2, [pc, #248]	; (8001140 <HAL_RCC_OscConfig+0x4d8>)
 8001048:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800104c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	699b      	ldr	r3, [r3, #24]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d06f      	beq.n	8001136 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001056:	4b3a      	ldr	r3, [pc, #232]	; (8001140 <HAL_RCC_OscConfig+0x4d8>)
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	f003 030c 	and.w	r3, r3, #12
 800105e:	2b08      	cmp	r3, #8
 8001060:	d067      	beq.n	8001132 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	699b      	ldr	r3, [r3, #24]
 8001066:	2b02      	cmp	r3, #2
 8001068:	d149      	bne.n	80010fe <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800106a:	4b35      	ldr	r3, [pc, #212]	; (8001140 <HAL_RCC_OscConfig+0x4d8>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a34      	ldr	r2, [pc, #208]	; (8001140 <HAL_RCC_OscConfig+0x4d8>)
 8001070:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001074:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001076:	f7ff fabd 	bl	80005f4 <HAL_GetTick>
 800107a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800107c:	e008      	b.n	8001090 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800107e:	f7ff fab9 	bl	80005f4 <HAL_GetTick>
 8001082:	4602      	mov	r2, r0
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	2b02      	cmp	r3, #2
 800108a:	d901      	bls.n	8001090 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800108c:	2303      	movs	r3, #3
 800108e:	e053      	b.n	8001138 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001090:	4b2b      	ldr	r3, [pc, #172]	; (8001140 <HAL_RCC_OscConfig+0x4d8>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d1f0      	bne.n	800107e <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	69da      	ldr	r2, [r3, #28]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6a1b      	ldr	r3, [r3, #32]
 80010a4:	431a      	orrs	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010aa:	019b      	lsls	r3, r3, #6
 80010ac:	431a      	orrs	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b2:	085b      	lsrs	r3, r3, #1
 80010b4:	3b01      	subs	r3, #1
 80010b6:	041b      	lsls	r3, r3, #16
 80010b8:	431a      	orrs	r2, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010be:	061b      	lsls	r3, r3, #24
 80010c0:	4313      	orrs	r3, r2
 80010c2:	4a1f      	ldr	r2, [pc, #124]	; (8001140 <HAL_RCC_OscConfig+0x4d8>)
 80010c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80010c8:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010ca:	4b1d      	ldr	r3, [pc, #116]	; (8001140 <HAL_RCC_OscConfig+0x4d8>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a1c      	ldr	r2, [pc, #112]	; (8001140 <HAL_RCC_OscConfig+0x4d8>)
 80010d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010d6:	f7ff fa8d 	bl	80005f4 <HAL_GetTick>
 80010da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010dc:	e008      	b.n	80010f0 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010de:	f7ff fa89 	bl	80005f4 <HAL_GetTick>
 80010e2:	4602      	mov	r2, r0
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d901      	bls.n	80010f0 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 80010ec:	2303      	movs	r3, #3
 80010ee:	e023      	b.n	8001138 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010f0:	4b13      	ldr	r3, [pc, #76]	; (8001140 <HAL_RCC_OscConfig+0x4d8>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d0f0      	beq.n	80010de <HAL_RCC_OscConfig+0x476>
 80010fc:	e01b      	b.n	8001136 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010fe:	4b10      	ldr	r3, [pc, #64]	; (8001140 <HAL_RCC_OscConfig+0x4d8>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a0f      	ldr	r2, [pc, #60]	; (8001140 <HAL_RCC_OscConfig+0x4d8>)
 8001104:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001108:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800110a:	f7ff fa73 	bl	80005f4 <HAL_GetTick>
 800110e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001110:	e008      	b.n	8001124 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001112:	f7ff fa6f 	bl	80005f4 <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	2b02      	cmp	r3, #2
 800111e:	d901      	bls.n	8001124 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	e009      	b.n	8001138 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <HAL_RCC_OscConfig+0x4d8>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d1f0      	bne.n	8001112 <HAL_RCC_OscConfig+0x4aa>
 8001130:	e001      	b.n	8001136 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e000      	b.n	8001138 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8001136:	2300      	movs	r3, #0
}
 8001138:	4618      	mov	r0, r3
 800113a:	3718      	adds	r7, #24
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40023800 	.word	0x40023800
 8001144:	40007000 	.word	0x40007000

08001148 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d101      	bne.n	8001160 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	e0ce      	b.n	80012fe <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001160:	4b69      	ldr	r3, [pc, #420]	; (8001308 <HAL_RCC_ClockConfig+0x1c0>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 030f 	and.w	r3, r3, #15
 8001168:	683a      	ldr	r2, [r7, #0]
 800116a:	429a      	cmp	r2, r3
 800116c:	d910      	bls.n	8001190 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800116e:	4b66      	ldr	r3, [pc, #408]	; (8001308 <HAL_RCC_ClockConfig+0x1c0>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f023 020f 	bic.w	r2, r3, #15
 8001176:	4964      	ldr	r1, [pc, #400]	; (8001308 <HAL_RCC_ClockConfig+0x1c0>)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	4313      	orrs	r3, r2
 800117c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800117e:	4b62      	ldr	r3, [pc, #392]	; (8001308 <HAL_RCC_ClockConfig+0x1c0>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 030f 	and.w	r3, r3, #15
 8001186:	683a      	ldr	r2, [r7, #0]
 8001188:	429a      	cmp	r2, r3
 800118a:	d001      	beq.n	8001190 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	e0b6      	b.n	80012fe <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 0302 	and.w	r3, r3, #2
 8001198:	2b00      	cmp	r3, #0
 800119a:	d020      	beq.n	80011de <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 0304 	and.w	r3, r3, #4
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d005      	beq.n	80011b4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011a8:	4b58      	ldr	r3, [pc, #352]	; (800130c <HAL_RCC_ClockConfig+0x1c4>)
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	4a57      	ldr	r2, [pc, #348]	; (800130c <HAL_RCC_ClockConfig+0x1c4>)
 80011ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80011b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 0308 	and.w	r3, r3, #8
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d005      	beq.n	80011cc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011c0:	4b52      	ldr	r3, [pc, #328]	; (800130c <HAL_RCC_ClockConfig+0x1c4>)
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	4a51      	ldr	r2, [pc, #324]	; (800130c <HAL_RCC_ClockConfig+0x1c4>)
 80011c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80011ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011cc:	4b4f      	ldr	r3, [pc, #316]	; (800130c <HAL_RCC_ClockConfig+0x1c4>)
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	494c      	ldr	r1, [pc, #304]	; (800130c <HAL_RCC_ClockConfig+0x1c4>)
 80011da:	4313      	orrs	r3, r2
 80011dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d040      	beq.n	800126c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d107      	bne.n	8001202 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011f2:	4b46      	ldr	r3, [pc, #280]	; (800130c <HAL_RCC_ClockConfig+0x1c4>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d115      	bne.n	800122a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e07d      	b.n	80012fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	2b02      	cmp	r3, #2
 8001208:	d107      	bne.n	800121a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800120a:	4b40      	ldr	r3, [pc, #256]	; (800130c <HAL_RCC_ClockConfig+0x1c4>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d109      	bne.n	800122a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e071      	b.n	80012fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800121a:	4b3c      	ldr	r3, [pc, #240]	; (800130c <HAL_RCC_ClockConfig+0x1c4>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	2b00      	cmp	r3, #0
 8001224:	d101      	bne.n	800122a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e069      	b.n	80012fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800122a:	4b38      	ldr	r3, [pc, #224]	; (800130c <HAL_RCC_ClockConfig+0x1c4>)
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f023 0203 	bic.w	r2, r3, #3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	4935      	ldr	r1, [pc, #212]	; (800130c <HAL_RCC_ClockConfig+0x1c4>)
 8001238:	4313      	orrs	r3, r2
 800123a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800123c:	f7ff f9da 	bl	80005f4 <HAL_GetTick>
 8001240:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001242:	e00a      	b.n	800125a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001244:	f7ff f9d6 	bl	80005f4 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001252:	4293      	cmp	r3, r2
 8001254:	d901      	bls.n	800125a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e051      	b.n	80012fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800125a:	4b2c      	ldr	r3, [pc, #176]	; (800130c <HAL_RCC_ClockConfig+0x1c4>)
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f003 020c 	and.w	r2, r3, #12
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	429a      	cmp	r2, r3
 800126a:	d1eb      	bne.n	8001244 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800126c:	4b26      	ldr	r3, [pc, #152]	; (8001308 <HAL_RCC_ClockConfig+0x1c0>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 030f 	and.w	r3, r3, #15
 8001274:	683a      	ldr	r2, [r7, #0]
 8001276:	429a      	cmp	r2, r3
 8001278:	d210      	bcs.n	800129c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800127a:	4b23      	ldr	r3, [pc, #140]	; (8001308 <HAL_RCC_ClockConfig+0x1c0>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f023 020f 	bic.w	r2, r3, #15
 8001282:	4921      	ldr	r1, [pc, #132]	; (8001308 <HAL_RCC_ClockConfig+0x1c0>)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	4313      	orrs	r3, r2
 8001288:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800128a:	4b1f      	ldr	r3, [pc, #124]	; (8001308 <HAL_RCC_ClockConfig+0x1c0>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 030f 	and.w	r3, r3, #15
 8001292:	683a      	ldr	r2, [r7, #0]
 8001294:	429a      	cmp	r2, r3
 8001296:	d001      	beq.n	800129c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	e030      	b.n	80012fe <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d008      	beq.n	80012ba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012a8:	4b18      	ldr	r3, [pc, #96]	; (800130c <HAL_RCC_ClockConfig+0x1c4>)
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	4915      	ldr	r1, [pc, #84]	; (800130c <HAL_RCC_ClockConfig+0x1c4>)
 80012b6:	4313      	orrs	r3, r2
 80012b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0308 	and.w	r3, r3, #8
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d009      	beq.n	80012da <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012c6:	4b11      	ldr	r3, [pc, #68]	; (800130c <HAL_RCC_ClockConfig+0x1c4>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	691b      	ldr	r3, [r3, #16]
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	490d      	ldr	r1, [pc, #52]	; (800130c <HAL_RCC_ClockConfig+0x1c4>)
 80012d6:	4313      	orrs	r3, r2
 80012d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012da:	f000 f81d 	bl	8001318 <HAL_RCC_GetSysClockFreq>
 80012de:	4601      	mov	r1, r0
 80012e0:	4b0a      	ldr	r3, [pc, #40]	; (800130c <HAL_RCC_ClockConfig+0x1c4>)
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	091b      	lsrs	r3, r3, #4
 80012e6:	f003 030f 	and.w	r3, r3, #15
 80012ea:	4a09      	ldr	r2, [pc, #36]	; (8001310 <HAL_RCC_ClockConfig+0x1c8>)
 80012ec:	5cd3      	ldrb	r3, [r2, r3]
 80012ee:	fa21 f303 	lsr.w	r3, r1, r3
 80012f2:	4a08      	ldr	r2, [pc, #32]	; (8001314 <HAL_RCC_ClockConfig+0x1cc>)
 80012f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80012f6:	2000      	movs	r0, #0
 80012f8:	f005 fa0e 	bl	8006718 <HAL_InitTick>

  return HAL_OK;
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40023c00 	.word	0x40023c00
 800130c:	40023800 	.word	0x40023800
 8001310:	080079fc 	.word	0x080079fc
 8001314:	20000008 	.word	0x20000008

08001318 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	607b      	str	r3, [r7, #4]
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	2300      	movs	r3, #0
 8001328:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800132e:	4b50      	ldr	r3, [pc, #320]	; (8001470 <HAL_RCC_GetSysClockFreq+0x158>)
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f003 030c 	and.w	r3, r3, #12
 8001336:	2b04      	cmp	r3, #4
 8001338:	d007      	beq.n	800134a <HAL_RCC_GetSysClockFreq+0x32>
 800133a:	2b08      	cmp	r3, #8
 800133c:	d008      	beq.n	8001350 <HAL_RCC_GetSysClockFreq+0x38>
 800133e:	2b00      	cmp	r3, #0
 8001340:	f040 808d 	bne.w	800145e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001344:	4b4b      	ldr	r3, [pc, #300]	; (8001474 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001346:	60bb      	str	r3, [r7, #8]
       break;
 8001348:	e08c      	b.n	8001464 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800134a:	4b4b      	ldr	r3, [pc, #300]	; (8001478 <HAL_RCC_GetSysClockFreq+0x160>)
 800134c:	60bb      	str	r3, [r7, #8]
      break;
 800134e:	e089      	b.n	8001464 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001350:	4b47      	ldr	r3, [pc, #284]	; (8001470 <HAL_RCC_GetSysClockFreq+0x158>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001358:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800135a:	4b45      	ldr	r3, [pc, #276]	; (8001470 <HAL_RCC_GetSysClockFreq+0x158>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d023      	beq.n	80013ae <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001366:	4b42      	ldr	r3, [pc, #264]	; (8001470 <HAL_RCC_GetSysClockFreq+0x158>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	099b      	lsrs	r3, r3, #6
 800136c:	f04f 0400 	mov.w	r4, #0
 8001370:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001374:	f04f 0200 	mov.w	r2, #0
 8001378:	ea03 0501 	and.w	r5, r3, r1
 800137c:	ea04 0602 	and.w	r6, r4, r2
 8001380:	4a3d      	ldr	r2, [pc, #244]	; (8001478 <HAL_RCC_GetSysClockFreq+0x160>)
 8001382:	fb02 f106 	mul.w	r1, r2, r6
 8001386:	2200      	movs	r2, #0
 8001388:	fb02 f205 	mul.w	r2, r2, r5
 800138c:	440a      	add	r2, r1
 800138e:	493a      	ldr	r1, [pc, #232]	; (8001478 <HAL_RCC_GetSysClockFreq+0x160>)
 8001390:	fba5 0101 	umull	r0, r1, r5, r1
 8001394:	1853      	adds	r3, r2, r1
 8001396:	4619      	mov	r1, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f04f 0400 	mov.w	r4, #0
 800139e:	461a      	mov	r2, r3
 80013a0:	4623      	mov	r3, r4
 80013a2:	f7fe ff85 	bl	80002b0 <__aeabi_uldivmod>
 80013a6:	4603      	mov	r3, r0
 80013a8:	460c      	mov	r4, r1
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	e049      	b.n	8001442 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013ae:	4b30      	ldr	r3, [pc, #192]	; (8001470 <HAL_RCC_GetSysClockFreq+0x158>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	099b      	lsrs	r3, r3, #6
 80013b4:	f04f 0400 	mov.w	r4, #0
 80013b8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80013bc:	f04f 0200 	mov.w	r2, #0
 80013c0:	ea03 0501 	and.w	r5, r3, r1
 80013c4:	ea04 0602 	and.w	r6, r4, r2
 80013c8:	4629      	mov	r1, r5
 80013ca:	4632      	mov	r2, r6
 80013cc:	f04f 0300 	mov.w	r3, #0
 80013d0:	f04f 0400 	mov.w	r4, #0
 80013d4:	0154      	lsls	r4, r2, #5
 80013d6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80013da:	014b      	lsls	r3, r1, #5
 80013dc:	4619      	mov	r1, r3
 80013de:	4622      	mov	r2, r4
 80013e0:	1b49      	subs	r1, r1, r5
 80013e2:	eb62 0206 	sbc.w	r2, r2, r6
 80013e6:	f04f 0300 	mov.w	r3, #0
 80013ea:	f04f 0400 	mov.w	r4, #0
 80013ee:	0194      	lsls	r4, r2, #6
 80013f0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80013f4:	018b      	lsls	r3, r1, #6
 80013f6:	1a5b      	subs	r3, r3, r1
 80013f8:	eb64 0402 	sbc.w	r4, r4, r2
 80013fc:	f04f 0100 	mov.w	r1, #0
 8001400:	f04f 0200 	mov.w	r2, #0
 8001404:	00e2      	lsls	r2, r4, #3
 8001406:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800140a:	00d9      	lsls	r1, r3, #3
 800140c:	460b      	mov	r3, r1
 800140e:	4614      	mov	r4, r2
 8001410:	195b      	adds	r3, r3, r5
 8001412:	eb44 0406 	adc.w	r4, r4, r6
 8001416:	f04f 0100 	mov.w	r1, #0
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	02a2      	lsls	r2, r4, #10
 8001420:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001424:	0299      	lsls	r1, r3, #10
 8001426:	460b      	mov	r3, r1
 8001428:	4614      	mov	r4, r2
 800142a:	4618      	mov	r0, r3
 800142c:	4621      	mov	r1, r4
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f04f 0400 	mov.w	r4, #0
 8001434:	461a      	mov	r2, r3
 8001436:	4623      	mov	r3, r4
 8001438:	f7fe ff3a 	bl	80002b0 <__aeabi_uldivmod>
 800143c:	4603      	mov	r3, r0
 800143e:	460c      	mov	r4, r1
 8001440:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8001442:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <HAL_RCC_GetSysClockFreq+0x158>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	0c1b      	lsrs	r3, r3, #16
 8001448:	f003 0303 	and.w	r3, r3, #3
 800144c:	3301      	adds	r3, #1
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	fbb2 f3f3 	udiv	r3, r2, r3
 800145a:	60bb      	str	r3, [r7, #8]
      break;
 800145c:	e002      	b.n	8001464 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800145e:	4b05      	ldr	r3, [pc, #20]	; (8001474 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001460:	60bb      	str	r3, [r7, #8]
      break;
 8001462:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001464:	68bb      	ldr	r3, [r7, #8]
}
 8001466:	4618      	mov	r0, r3
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800146e:	bf00      	nop
 8001470:	40023800 	.word	0x40023800
 8001474:	00f42400 	.word	0x00f42400
 8001478:	017d7840 	.word	0x017d7840

0800147c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001480:	4b03      	ldr	r3, [pc, #12]	; (8001490 <HAL_RCC_GetHCLKFreq+0x14>)
 8001482:	681b      	ldr	r3, [r3, #0]
}
 8001484:	4618      	mov	r0, r3
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	20000008 	.word	0x20000008

08001494 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001498:	f7ff fff0 	bl	800147c <HAL_RCC_GetHCLKFreq>
 800149c:	4601      	mov	r1, r0
 800149e:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	0a9b      	lsrs	r3, r3, #10
 80014a4:	f003 0307 	and.w	r3, r3, #7
 80014a8:	4a03      	ldr	r2, [pc, #12]	; (80014b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80014aa:	5cd3      	ldrb	r3, [r2, r3]
 80014ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40023800 	.word	0x40023800
 80014b8:	08007a0c 	.word	0x08007a0c

080014bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80014c0:	f7ff ffdc 	bl	800147c <HAL_RCC_GetHCLKFreq>
 80014c4:	4601      	mov	r1, r0
 80014c6:	4b05      	ldr	r3, [pc, #20]	; (80014dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	0b5b      	lsrs	r3, r3, #13
 80014cc:	f003 0307 	and.w	r3, r3, #7
 80014d0:	4a03      	ldr	r2, [pc, #12]	; (80014e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80014d2:	5cd3      	ldrb	r3, [r2, r3]
 80014d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80014d8:	4618      	mov	r0, r3
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40023800 	.word	0x40023800
 80014e0:	08007a0c 	.word	0x08007a0c

080014e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	220f      	movs	r2, #15
 80014f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80014f4:	4b12      	ldr	r3, [pc, #72]	; (8001540 <HAL_RCC_GetClockConfig+0x5c>)
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f003 0203 	and.w	r2, r3, #3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001500:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <HAL_RCC_GetClockConfig+0x5c>)
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800150c:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <HAL_RCC_GetClockConfig+0x5c>)
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001518:	4b09      	ldr	r3, [pc, #36]	; (8001540 <HAL_RCC_GetClockConfig+0x5c>)
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	08db      	lsrs	r3, r3, #3
 800151e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001526:	4b07      	ldr	r3, [pc, #28]	; (8001544 <HAL_RCC_GetClockConfig+0x60>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 020f 	and.w	r2, r3, #15
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	601a      	str	r2, [r3, #0]
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	40023800 	.word	0x40023800
 8001544:	40023c00 	.word	0x40023c00

08001548 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b088      	sub	sp, #32
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001558:	2300      	movs	r3, #0
 800155a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0301 	and.w	r3, r3, #1
 800156c:	2b00      	cmp	r3, #0
 800156e:	d012      	beq.n	8001596 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001570:	4b69      	ldr	r3, [pc, #420]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	4a68      	ldr	r2, [pc, #416]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001576:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800157a:	6093      	str	r3, [r2, #8]
 800157c:	4b66      	ldr	r3, [pc, #408]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800157e:	689a      	ldr	r2, [r3, #8]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001584:	4964      	ldr	r1, [pc, #400]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001586:	4313      	orrs	r3, r2
 8001588:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800158e:	2b00      	cmp	r3, #0
 8001590:	d101      	bne.n	8001596 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001592:	2301      	movs	r3, #1
 8001594:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d017      	beq.n	80015d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80015a2:	4b5d      	ldr	r3, [pc, #372]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80015a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015b0:	4959      	ldr	r1, [pc, #356]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80015c0:	d101      	bne.n	80015c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80015c2:	2301      	movs	r3, #1
 80015c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d101      	bne.n	80015d2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80015ce:	2301      	movs	r3, #1
 80015d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d017      	beq.n	800160e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80015de:	4b4e      	ldr	r3, [pc, #312]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80015e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ec:	494a      	ldr	r1, [pc, #296]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80015ee:	4313      	orrs	r3, r2
 80015f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015fc:	d101      	bne.n	8001602 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80015fe:	2301      	movs	r3, #1
 8001600:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	2b00      	cmp	r3, #0
 8001608:	d101      	bne.n	800160e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800160a:	2301      	movs	r3, #1
 800160c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800161a:	2301      	movs	r3, #1
 800161c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0320 	and.w	r3, r3, #32
 8001626:	2b00      	cmp	r3, #0
 8001628:	f000 808b 	beq.w	8001742 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800162c:	4b3a      	ldr	r3, [pc, #232]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800162e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001630:	4a39      	ldr	r2, [pc, #228]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001636:	6413      	str	r3, [r2, #64]	; 0x40
 8001638:	4b37      	ldr	r3, [pc, #220]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800163a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001640:	60bb      	str	r3, [r7, #8]
 8001642:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001644:	4b35      	ldr	r3, [pc, #212]	; (800171c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a34      	ldr	r2, [pc, #208]	; (800171c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800164a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800164e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001650:	f7fe ffd0 	bl	80005f4 <HAL_GetTick>
 8001654:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001656:	e008      	b.n	800166a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001658:	f7fe ffcc 	bl	80005f4 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b64      	cmp	r3, #100	; 0x64
 8001664:	d901      	bls.n	800166a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e355      	b.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800166a:	4b2c      	ldr	r3, [pc, #176]	; (800171c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001672:	2b00      	cmp	r3, #0
 8001674:	d0f0      	beq.n	8001658 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001676:	4b28      	ldr	r3, [pc, #160]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800167a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800167e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d035      	beq.n	80016f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	429a      	cmp	r2, r3
 8001692:	d02e      	beq.n	80016f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001694:	4b20      	ldr	r3, [pc, #128]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001698:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800169c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800169e:	4b1e      	ldr	r3, [pc, #120]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80016a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a2:	4a1d      	ldr	r2, [pc, #116]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80016a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016a8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80016aa:	4b1b      	ldr	r3, [pc, #108]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80016ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ae:	4a1a      	ldr	r2, [pc, #104]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80016b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016b4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80016b6:	4a18      	ldr	r2, [pc, #96]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80016bc:	4b16      	ldr	r3, [pc, #88]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80016be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d114      	bne.n	80016f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c8:	f7fe ff94 	bl	80005f4 <HAL_GetTick>
 80016cc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ce:	e00a      	b.n	80016e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016d0:	f7fe ff90 	bl	80005f4 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	f241 3288 	movw	r2, #5000	; 0x1388
 80016de:	4293      	cmp	r3, r2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e317      	b.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e6:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80016e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0ee      	beq.n	80016d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80016fe:	d111      	bne.n	8001724 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001700:	4b05      	ldr	r3, [pc, #20]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800170c:	4b04      	ldr	r3, [pc, #16]	; (8001720 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800170e:	400b      	ands	r3, r1
 8001710:	4901      	ldr	r1, [pc, #4]	; (8001718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001712:	4313      	orrs	r3, r2
 8001714:	608b      	str	r3, [r1, #8]
 8001716:	e00b      	b.n	8001730 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001718:	40023800 	.word	0x40023800
 800171c:	40007000 	.word	0x40007000
 8001720:	0ffffcff 	.word	0x0ffffcff
 8001724:	4bb0      	ldr	r3, [pc, #704]	; (80019e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	4aaf      	ldr	r2, [pc, #700]	; (80019e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800172a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800172e:	6093      	str	r3, [r2, #8]
 8001730:	4bad      	ldr	r3, [pc, #692]	; (80019e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001732:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001738:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800173c:	49aa      	ldr	r1, [pc, #680]	; (80019e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800173e:	4313      	orrs	r3, r2
 8001740:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0310 	and.w	r3, r3, #16
 800174a:	2b00      	cmp	r3, #0
 800174c:	d010      	beq.n	8001770 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800174e:	4ba6      	ldr	r3, [pc, #664]	; (80019e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001750:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001754:	4aa4      	ldr	r2, [pc, #656]	; (80019e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001756:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800175a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800175e:	4ba2      	ldr	r3, [pc, #648]	; (80019e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001760:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001768:	499f      	ldr	r1, [pc, #636]	; (80019e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800176a:	4313      	orrs	r3, r2
 800176c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d00a      	beq.n	8001792 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800177c:	4b9a      	ldr	r3, [pc, #616]	; (80019e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800177e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001782:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800178a:	4997      	ldr	r1, [pc, #604]	; (80019e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800178c:	4313      	orrs	r3, r2
 800178e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d00a      	beq.n	80017b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800179e:	4b92      	ldr	r3, [pc, #584]	; (80019e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80017a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80017ac:	498e      	ldr	r1, [pc, #568]	; (80019e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d00a      	beq.n	80017d6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80017c0:	4b89      	ldr	r3, [pc, #548]	; (80019e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80017c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017ce:	4986      	ldr	r1, [pc, #536]	; (80019e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80017d0:	4313      	orrs	r3, r2
 80017d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d00a      	beq.n	80017f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80017e2:	4b81      	ldr	r3, [pc, #516]	; (80019e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80017e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f0:	497d      	ldr	r1, [pc, #500]	; (80019e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80017f2:	4313      	orrs	r3, r2
 80017f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001800:	2b00      	cmp	r3, #0
 8001802:	d00a      	beq.n	800181a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001804:	4b78      	ldr	r3, [pc, #480]	; (80019e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800180a:	f023 0203 	bic.w	r2, r3, #3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001812:	4975      	ldr	r1, [pc, #468]	; (80019e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001814:	4313      	orrs	r3, r2
 8001816:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001822:	2b00      	cmp	r3, #0
 8001824:	d00a      	beq.n	800183c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001826:	4b70      	ldr	r3, [pc, #448]	; (80019e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800182c:	f023 020c 	bic.w	r2, r3, #12
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001834:	496c      	ldr	r1, [pc, #432]	; (80019e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001836:	4313      	orrs	r3, r2
 8001838:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001844:	2b00      	cmp	r3, #0
 8001846:	d00a      	beq.n	800185e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001848:	4b67      	ldr	r3, [pc, #412]	; (80019e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800184a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800184e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001856:	4964      	ldr	r1, [pc, #400]	; (80019e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001858:	4313      	orrs	r3, r2
 800185a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001866:	2b00      	cmp	r3, #0
 8001868:	d00a      	beq.n	8001880 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800186a:	4b5f      	ldr	r3, [pc, #380]	; (80019e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800186c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001870:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001878:	495b      	ldr	r1, [pc, #364]	; (80019e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800187a:	4313      	orrs	r3, r2
 800187c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001888:	2b00      	cmp	r3, #0
 800188a:	d00a      	beq.n	80018a2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800188c:	4b56      	ldr	r3, [pc, #344]	; (80019e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800188e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001892:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800189a:	4953      	ldr	r1, [pc, #332]	; (80019e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800189c:	4313      	orrs	r3, r2
 800189e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d00a      	beq.n	80018c4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80018ae:	4b4e      	ldr	r3, [pc, #312]	; (80019e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80018b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018b4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018bc:	494a      	ldr	r1, [pc, #296]	; (80019e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80018be:	4313      	orrs	r3, r2
 80018c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d00a      	beq.n	80018e6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80018d0:	4b45      	ldr	r3, [pc, #276]	; (80019e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80018d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018d6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018de:	4942      	ldr	r1, [pc, #264]	; (80019e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80018e0:	4313      	orrs	r3, r2
 80018e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d00a      	beq.n	8001908 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80018f2:	4b3d      	ldr	r3, [pc, #244]	; (80019e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80018f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001900:	4939      	ldr	r1, [pc, #228]	; (80019e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001902:	4313      	orrs	r3, r2
 8001904:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d00a      	beq.n	800192a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001914:	4b34      	ldr	r3, [pc, #208]	; (80019e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800191a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001922:	4931      	ldr	r1, [pc, #196]	; (80019e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001924:	4313      	orrs	r3, r2
 8001926:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d011      	beq.n	800195a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001936:	4b2c      	ldr	r3, [pc, #176]	; (80019e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800193c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001944:	4928      	ldr	r1, [pc, #160]	; (80019e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001946:	4313      	orrs	r3, r2
 8001948:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001950:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001954:	d101      	bne.n	800195a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001956:	2301      	movs	r3, #1
 8001958:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0308 	and.w	r3, r3, #8
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001966:	2301      	movs	r3, #1
 8001968:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00a      	beq.n	800198c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001976:	4b1c      	ldr	r3, [pc, #112]	; (80019e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800197c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001984:	4918      	ldr	r1, [pc, #96]	; (80019e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001986:	4313      	orrs	r3, r2
 8001988:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d00b      	beq.n	80019b0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001998:	4b13      	ldr	r3, [pc, #76]	; (80019e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800199a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800199e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019a8:	490f      	ldr	r1, [pc, #60]	; (80019e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d005      	beq.n	80019c2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80019be:	f040 80d8 	bne.w	8001b72 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80019c2:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a08      	ldr	r2, [pc, #32]	; (80019e8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80019c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80019cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019ce:	f7fe fe11 	bl	80005f4 <HAL_GetTick>
 80019d2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80019d4:	e00a      	b.n	80019ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80019d6:	f7fe fe0d 	bl	80005f4 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b64      	cmp	r3, #100	; 0x64
 80019e2:	d903      	bls.n	80019ec <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e196      	b.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80019e8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80019ec:	4b6c      	ldr	r3, [pc, #432]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1ee      	bne.n	80019d6 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d021      	beq.n	8001a48 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d11d      	bne.n	8001a48 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001a0c:	4b64      	ldr	r3, [pc, #400]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001a0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a12:	0c1b      	lsrs	r3, r3, #16
 8001a14:	f003 0303 	and.w	r3, r3, #3
 8001a18:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001a1a:	4b61      	ldr	r3, [pc, #388]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001a1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a20:	0e1b      	lsrs	r3, r3, #24
 8001a22:	f003 030f 	and.w	r3, r3, #15
 8001a26:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	019a      	lsls	r2, r3, #6
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	041b      	lsls	r3, r3, #16
 8001a32:	431a      	orrs	r2, r3
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	061b      	lsls	r3, r3, #24
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	071b      	lsls	r3, r3, #28
 8001a40:	4957      	ldr	r1, [pc, #348]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d004      	beq.n	8001a5e <HAL_RCCEx_PeriphCLKConfig+0x516>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a5c:	d00a      	beq.n	8001a74 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d02e      	beq.n	8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a72:	d129      	bne.n	8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001a74:	4b4a      	ldr	r3, [pc, #296]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001a76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a7a:	0c1b      	lsrs	r3, r3, #16
 8001a7c:	f003 0303 	and.w	r3, r3, #3
 8001a80:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001a82:	4b47      	ldr	r3, [pc, #284]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a88:	0f1b      	lsrs	r3, r3, #28
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	019a      	lsls	r2, r3, #6
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	041b      	lsls	r3, r3, #16
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	061b      	lsls	r3, r3, #24
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	071b      	lsls	r3, r3, #28
 8001aa8:	493d      	ldr	r1, [pc, #244]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001ab0:	4b3b      	ldr	r3, [pc, #236]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001ab2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ab6:	f023 021f 	bic.w	r2, r3, #31
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	4937      	ldr	r1, [pc, #220]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d01d      	beq.n	8001b10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001ad4:	4b32      	ldr	r3, [pc, #200]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001ad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ada:	0e1b      	lsrs	r3, r3, #24
 8001adc:	f003 030f 	and.w	r3, r3, #15
 8001ae0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001ae2:	4b2f      	ldr	r3, [pc, #188]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001ae4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ae8:	0f1b      	lsrs	r3, r3, #28
 8001aea:	f003 0307 	and.w	r3, r3, #7
 8001aee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	019a      	lsls	r2, r3, #6
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	691b      	ldr	r3, [r3, #16]
 8001afa:	041b      	lsls	r3, r3, #16
 8001afc:	431a      	orrs	r2, r3
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	061b      	lsls	r3, r3, #24
 8001b02:	431a      	orrs	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	071b      	lsls	r3, r3, #28
 8001b08:	4925      	ldr	r1, [pc, #148]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d011      	beq.n	8001b40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	019a      	lsls	r2, r3, #6
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	041b      	lsls	r3, r3, #16
 8001b28:	431a      	orrs	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	061b      	lsls	r3, r3, #24
 8001b30:	431a      	orrs	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	071b      	lsls	r3, r3, #28
 8001b38:	4919      	ldr	r1, [pc, #100]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001b40:	4b17      	ldr	r3, [pc, #92]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a16      	ldr	r2, [pc, #88]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001b46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b4c:	f7fe fd52 	bl	80005f4 <HAL_GetTick>
 8001b50:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001b52:	e008      	b.n	8001b66 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001b54:	f7fe fd4e 	bl	80005f4 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b64      	cmp	r3, #100	; 0x64
 8001b60:	d901      	bls.n	8001b66 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e0d7      	b.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001b66:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d0f0      	beq.n	8001b54 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	f040 80cd 	bne.w	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001b7a:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a08      	ldr	r2, [pc, #32]	; (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001b80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b86:	f7fe fd35 	bl	80005f4 <HAL_GetTick>
 8001b8a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001b8c:	e00a      	b.n	8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001b8e:	f7fe fd31 	bl	80005f4 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b64      	cmp	r3, #100	; 0x64
 8001b9a:	d903      	bls.n	8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e0ba      	b.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8001ba0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001ba4:	4b5e      	ldr	r3, [pc, #376]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001bac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bb0:	d0ed      	beq.n	8001b8e <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d003      	beq.n	8001bc6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d009      	beq.n	8001bda <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d02e      	beq.n	8001c30 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d12a      	bne.n	8001c30 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001bda:	4b51      	ldr	r3, [pc, #324]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001be0:	0c1b      	lsrs	r3, r3, #16
 8001be2:	f003 0303 	and.w	r3, r3, #3
 8001be6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001be8:	4b4d      	ldr	r3, [pc, #308]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bee:	0f1b      	lsrs	r3, r3, #28
 8001bf0:	f003 0307 	and.w	r3, r3, #7
 8001bf4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	019a      	lsls	r2, r3, #6
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	041b      	lsls	r3, r3, #16
 8001c00:	431a      	orrs	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	061b      	lsls	r3, r3, #24
 8001c08:	431a      	orrs	r2, r3
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	071b      	lsls	r3, r3, #28
 8001c0e:	4944      	ldr	r1, [pc, #272]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001c10:	4313      	orrs	r3, r2
 8001c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001c16:	4b42      	ldr	r3, [pc, #264]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c1c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c24:	3b01      	subs	r3, #1
 8001c26:	021b      	lsls	r3, r3, #8
 8001c28:	493d      	ldr	r1, [pc, #244]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d022      	beq.n	8001c82 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001c44:	d11d      	bne.n	8001c82 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001c46:	4b36      	ldr	r3, [pc, #216]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c4c:	0e1b      	lsrs	r3, r3, #24
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001c54:	4b32      	ldr	r3, [pc, #200]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c5a:	0f1b      	lsrs	r3, r3, #28
 8001c5c:	f003 0307 	and.w	r3, r3, #7
 8001c60:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	019a      	lsls	r2, r3, #6
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a1b      	ldr	r3, [r3, #32]
 8001c6c:	041b      	lsls	r3, r3, #16
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	061b      	lsls	r3, r3, #24
 8001c74:	431a      	orrs	r2, r3
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	071b      	lsls	r3, r3, #28
 8001c7a:	4929      	ldr	r1, [pc, #164]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0308 	and.w	r3, r3, #8
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d028      	beq.n	8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001c8e:	4b24      	ldr	r3, [pc, #144]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c94:	0e1b      	lsrs	r3, r3, #24
 8001c96:	f003 030f 	and.w	r3, r3, #15
 8001c9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001c9c:	4b20      	ldr	r3, [pc, #128]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ca2:	0c1b      	lsrs	r3, r3, #16
 8001ca4:	f003 0303 	and.w	r3, r3, #3
 8001ca8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	019a      	lsls	r2, r3, #6
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	041b      	lsls	r3, r3, #16
 8001cb4:	431a      	orrs	r2, r3
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	061b      	lsls	r3, r3, #24
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	69db      	ldr	r3, [r3, #28]
 8001cc0:	071b      	lsls	r3, r3, #28
 8001cc2:	4917      	ldr	r1, [pc, #92]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001cca:	4b15      	ldr	r3, [pc, #84]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001ccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cd0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd8:	4911      	ldr	r1, [pc, #68]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001ce0:	4b0f      	ldr	r3, [pc, #60]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a0e      	ldr	r2, [pc, #56]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001ce6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cec:	f7fe fc82 	bl	80005f4 <HAL_GetTick>
 8001cf0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001cf4:	f7fe fc7e 	bl	80005f4 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b64      	cmp	r3, #100	; 0x64
 8001d00:	d901      	bls.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e007      	b.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001d06:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d12:	d1ef      	bne.n	8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3720      	adds	r7, #32
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40023800 	.word	0x40023800

08001d24 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e01c      	b.n	8001d70 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	795b      	ldrb	r3, [r3, #5]
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d105      	bne.n	8001d4c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f004 fc36 	bl	80065b8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2202      	movs	r2, #2
 8001d50:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f042 0204 	orr.w	r2, r2, #4
 8001d60:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2201      	movs	r2, #1
 8001d66:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001d82:	2300      	movs	r3, #0
 8001d84:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	791b      	ldrb	r3, [r3, #4]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d101      	bne.n	8001d92 <HAL_RNG_GenerateRandomNumber+0x1a>
 8001d8e:	2302      	movs	r3, #2
 8001d90:	e03d      	b.n	8001e0e <HAL_RNG_GenerateRandomNumber+0x96>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2201      	movs	r2, #1
 8001d96:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	795b      	ldrb	r3, [r3, #5]
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d12c      	bne.n	8001dfc <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2202      	movs	r2, #2
 8001da6:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001da8:	f7fe fc24 	bl	80005f4 <HAL_GetTick>
 8001dac:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8001dae:	e011      	b.n	8001dd4 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8001db0:	f7fe fc20 	bl	80005f4 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d90a      	bls.n	8001dd4 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2202      	movs	r2, #2
 8001dc8:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e01c      	b.n	8001e0e <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d1e6      	bne.n	8001db0 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68da      	ldr	r2, [r3, #12]
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	715a      	strb	r2, [r3, #5]
 8001dfa:	e004      	b.n	8001e06 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2204      	movs	r2, #4
 8001e00:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	711a      	strb	r2, [r3, #4]

  return status;
 8001e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b082      	sub	sp, #8
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
  if(HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	330c      	adds	r3, #12
 8001e22:	4619      	mov	r1, r3
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f7ff ffa7 	bl	8001d78 <HAL_RNG_GenerateRandomNumber>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d102      	bne.n	8001e36 <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	e000      	b.n	8001e38 <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 8001e36:	2300      	movs	r3, #0
  }
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e01d      	b.n	8001e8e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d106      	bne.n	8001e6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f004 fbc6 	bl	80065f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2202      	movs	r2, #2
 8001e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3304      	adds	r3, #4
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4610      	mov	r0, r2
 8001e80:	f000 fa36 	bl	80022f0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
	...

08001e98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68da      	ldr	r2, [r3, #12]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f042 0201 	orr.w	r2, r2, #1
 8001eae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	689a      	ldr	r2, [r3, #8]
 8001eb6:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <HAL_TIM_Base_Start_IT+0x50>)
 8001eb8:	4013      	ands	r3, r2
 8001eba:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2b06      	cmp	r3, #6
 8001ec0:	d00b      	beq.n	8001eda <HAL_TIM_Base_Start_IT+0x42>
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ec8:	d007      	beq.n	8001eda <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f042 0201 	orr.w	r2, r2, #1
 8001ed8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3714      	adds	r7, #20
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	00010007 	.word	0x00010007

08001eec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d122      	bne.n	8001f48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d11b      	bne.n	8001f48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f06f 0202 	mvn.w	r2, #2
 8001f18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	f003 0303 	and.w	r3, r3, #3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 f9c0 	bl	80022b4 <HAL_TIM_IC_CaptureCallback>
 8001f34:	e005      	b.n	8001f42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f9b2 	bl	80022a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f000 f9c3 	bl	80022c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	f003 0304 	and.w	r3, r3, #4
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	d122      	bne.n	8001f9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	f003 0304 	and.w	r3, r3, #4
 8001f60:	2b04      	cmp	r3, #4
 8001f62:	d11b      	bne.n	8001f9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f06f 0204 	mvn.w	r2, #4
 8001f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2202      	movs	r2, #2
 8001f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f996 	bl	80022b4 <HAL_TIM_IC_CaptureCallback>
 8001f88:	e005      	b.n	8001f96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f988 	bl	80022a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 f999 	bl	80022c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	f003 0308 	and.w	r3, r3, #8
 8001fa6:	2b08      	cmp	r3, #8
 8001fa8:	d122      	bne.n	8001ff0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	f003 0308 	and.w	r3, r3, #8
 8001fb4:	2b08      	cmp	r3, #8
 8001fb6:	d11b      	bne.n	8001ff0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f06f 0208 	mvn.w	r2, #8
 8001fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2204      	movs	r2, #4
 8001fc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	69db      	ldr	r3, [r3, #28]
 8001fce:	f003 0303 	and.w	r3, r3, #3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 f96c 	bl	80022b4 <HAL_TIM_IC_CaptureCallback>
 8001fdc:	e005      	b.n	8001fea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 f95e 	bl	80022a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 f96f 	bl	80022c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	f003 0310 	and.w	r3, r3, #16
 8001ffa:	2b10      	cmp	r3, #16
 8001ffc:	d122      	bne.n	8002044 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	f003 0310 	and.w	r3, r3, #16
 8002008:	2b10      	cmp	r3, #16
 800200a:	d11b      	bne.n	8002044 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f06f 0210 	mvn.w	r2, #16
 8002014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2208      	movs	r2, #8
 800201a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002026:	2b00      	cmp	r3, #0
 8002028:	d003      	beq.n	8002032 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 f942 	bl	80022b4 <HAL_TIM_IC_CaptureCallback>
 8002030:	e005      	b.n	800203e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 f934 	bl	80022a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 f945 	bl	80022c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b01      	cmp	r3, #1
 8002050:	d10e      	bne.n	8002070 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	2b01      	cmp	r3, #1
 800205e:	d107      	bne.n	8002070 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f06f 0201 	mvn.w	r2, #1
 8002068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f004 fa56 	bl	800651c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800207a:	2b80      	cmp	r3, #128	; 0x80
 800207c:	d10e      	bne.n	800209c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002088:	2b80      	cmp	r3, #128	; 0x80
 800208a:	d107      	bne.n	800209c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 faca 	bl	8002630 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020aa:	d10e      	bne.n	80020ca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020b6:	2b80      	cmp	r3, #128	; 0x80
 80020b8:	d107      	bne.n	80020ca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80020c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 fabd 	bl	8002644 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d4:	2b40      	cmp	r3, #64	; 0x40
 80020d6:	d10e      	bne.n	80020f6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020e2:	2b40      	cmp	r3, #64	; 0x40
 80020e4:	d107      	bne.n	80020f6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 f8f3 	bl	80022dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	f003 0320 	and.w	r3, r3, #32
 8002100:	2b20      	cmp	r3, #32
 8002102:	d10e      	bne.n	8002122 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	f003 0320 	and.w	r3, r3, #32
 800210e:	2b20      	cmp	r3, #32
 8002110:	d107      	bne.n	8002122 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f06f 0220 	mvn.w	r2, #32
 800211a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f000 fa7d 	bl	800261c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002122:	bf00      	nop
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
	...

0800212c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800213c:	2b01      	cmp	r3, #1
 800213e:	d101      	bne.n	8002144 <HAL_TIM_ConfigClockSource+0x18>
 8002140:	2302      	movs	r3, #2
 8002142:	e0a6      	b.n	8002292 <HAL_TIM_ConfigClockSource+0x166>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2202      	movs	r2, #2
 8002150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800215c:	68fa      	ldr	r2, [r7, #12]
 800215e:	4b4f      	ldr	r3, [pc, #316]	; (800229c <HAL_TIM_ConfigClockSource+0x170>)
 8002160:	4013      	ands	r3, r2
 8002162:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800216a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2b40      	cmp	r3, #64	; 0x40
 800217a:	d067      	beq.n	800224c <HAL_TIM_ConfigClockSource+0x120>
 800217c:	2b40      	cmp	r3, #64	; 0x40
 800217e:	d80b      	bhi.n	8002198 <HAL_TIM_ConfigClockSource+0x6c>
 8002180:	2b10      	cmp	r3, #16
 8002182:	d073      	beq.n	800226c <HAL_TIM_ConfigClockSource+0x140>
 8002184:	2b10      	cmp	r3, #16
 8002186:	d802      	bhi.n	800218e <HAL_TIM_ConfigClockSource+0x62>
 8002188:	2b00      	cmp	r3, #0
 800218a:	d06f      	beq.n	800226c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800218c:	e078      	b.n	8002280 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800218e:	2b20      	cmp	r3, #32
 8002190:	d06c      	beq.n	800226c <HAL_TIM_ConfigClockSource+0x140>
 8002192:	2b30      	cmp	r3, #48	; 0x30
 8002194:	d06a      	beq.n	800226c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002196:	e073      	b.n	8002280 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002198:	2b70      	cmp	r3, #112	; 0x70
 800219a:	d00d      	beq.n	80021b8 <HAL_TIM_ConfigClockSource+0x8c>
 800219c:	2b70      	cmp	r3, #112	; 0x70
 800219e:	d804      	bhi.n	80021aa <HAL_TIM_ConfigClockSource+0x7e>
 80021a0:	2b50      	cmp	r3, #80	; 0x50
 80021a2:	d033      	beq.n	800220c <HAL_TIM_ConfigClockSource+0xe0>
 80021a4:	2b60      	cmp	r3, #96	; 0x60
 80021a6:	d041      	beq.n	800222c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80021a8:	e06a      	b.n	8002280 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80021aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021ae:	d066      	beq.n	800227e <HAL_TIM_ConfigClockSource+0x152>
 80021b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021b4:	d017      	beq.n	80021e6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80021b6:	e063      	b.n	8002280 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6818      	ldr	r0, [r3, #0]
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	6899      	ldr	r1, [r3, #8]
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685a      	ldr	r2, [r3, #4]
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	f000 f9ac 	bl	8002524 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80021da:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	609a      	str	r2, [r3, #8]
      break;
 80021e4:	e04c      	b.n	8002280 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6818      	ldr	r0, [r3, #0]
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	6899      	ldr	r1, [r3, #8]
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685a      	ldr	r2, [r3, #4]
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	f000 f995 	bl	8002524 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002208:	609a      	str	r2, [r3, #8]
      break;
 800220a:	e039      	b.n	8002280 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6818      	ldr	r0, [r3, #0]
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	6859      	ldr	r1, [r3, #4]
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	461a      	mov	r2, r3
 800221a:	f000 f909 	bl	8002430 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2150      	movs	r1, #80	; 0x50
 8002224:	4618      	mov	r0, r3
 8002226:	f000 f962 	bl	80024ee <TIM_ITRx_SetConfig>
      break;
 800222a:	e029      	b.n	8002280 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6818      	ldr	r0, [r3, #0]
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	6859      	ldr	r1, [r3, #4]
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	461a      	mov	r2, r3
 800223a:	f000 f928 	bl	800248e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2160      	movs	r1, #96	; 0x60
 8002244:	4618      	mov	r0, r3
 8002246:	f000 f952 	bl	80024ee <TIM_ITRx_SetConfig>
      break;
 800224a:	e019      	b.n	8002280 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6818      	ldr	r0, [r3, #0]
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	6859      	ldr	r1, [r3, #4]
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	461a      	mov	r2, r3
 800225a:	f000 f8e9 	bl	8002430 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2140      	movs	r1, #64	; 0x40
 8002264:	4618      	mov	r0, r3
 8002266:	f000 f942 	bl	80024ee <TIM_ITRx_SetConfig>
      break;
 800226a:	e009      	b.n	8002280 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4619      	mov	r1, r3
 8002276:	4610      	mov	r0, r2
 8002278:	f000 f939 	bl	80024ee <TIM_ITRx_SetConfig>
      break;
 800227c:	e000      	b.n	8002280 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800227e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	fffeff88 	.word	0xfffeff88

080022a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a40      	ldr	r2, [pc, #256]	; (8002404 <TIM_Base_SetConfig+0x114>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d013      	beq.n	8002330 <TIM_Base_SetConfig+0x40>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800230e:	d00f      	beq.n	8002330 <TIM_Base_SetConfig+0x40>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a3d      	ldr	r2, [pc, #244]	; (8002408 <TIM_Base_SetConfig+0x118>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d00b      	beq.n	8002330 <TIM_Base_SetConfig+0x40>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a3c      	ldr	r2, [pc, #240]	; (800240c <TIM_Base_SetConfig+0x11c>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d007      	beq.n	8002330 <TIM_Base_SetConfig+0x40>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a3b      	ldr	r2, [pc, #236]	; (8002410 <TIM_Base_SetConfig+0x120>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d003      	beq.n	8002330 <TIM_Base_SetConfig+0x40>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a3a      	ldr	r2, [pc, #232]	; (8002414 <TIM_Base_SetConfig+0x124>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d108      	bne.n	8002342 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002336:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	4313      	orrs	r3, r2
 8002340:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a2f      	ldr	r2, [pc, #188]	; (8002404 <TIM_Base_SetConfig+0x114>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d02b      	beq.n	80023a2 <TIM_Base_SetConfig+0xb2>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002350:	d027      	beq.n	80023a2 <TIM_Base_SetConfig+0xb2>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a2c      	ldr	r2, [pc, #176]	; (8002408 <TIM_Base_SetConfig+0x118>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d023      	beq.n	80023a2 <TIM_Base_SetConfig+0xb2>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a2b      	ldr	r2, [pc, #172]	; (800240c <TIM_Base_SetConfig+0x11c>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d01f      	beq.n	80023a2 <TIM_Base_SetConfig+0xb2>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a2a      	ldr	r2, [pc, #168]	; (8002410 <TIM_Base_SetConfig+0x120>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d01b      	beq.n	80023a2 <TIM_Base_SetConfig+0xb2>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a29      	ldr	r2, [pc, #164]	; (8002414 <TIM_Base_SetConfig+0x124>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d017      	beq.n	80023a2 <TIM_Base_SetConfig+0xb2>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a28      	ldr	r2, [pc, #160]	; (8002418 <TIM_Base_SetConfig+0x128>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d013      	beq.n	80023a2 <TIM_Base_SetConfig+0xb2>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a27      	ldr	r2, [pc, #156]	; (800241c <TIM_Base_SetConfig+0x12c>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d00f      	beq.n	80023a2 <TIM_Base_SetConfig+0xb2>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a26      	ldr	r2, [pc, #152]	; (8002420 <TIM_Base_SetConfig+0x130>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d00b      	beq.n	80023a2 <TIM_Base_SetConfig+0xb2>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a25      	ldr	r2, [pc, #148]	; (8002424 <TIM_Base_SetConfig+0x134>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d007      	beq.n	80023a2 <TIM_Base_SetConfig+0xb2>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a24      	ldr	r2, [pc, #144]	; (8002428 <TIM_Base_SetConfig+0x138>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d003      	beq.n	80023a2 <TIM_Base_SetConfig+0xb2>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a23      	ldr	r2, [pc, #140]	; (800242c <TIM_Base_SetConfig+0x13c>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d108      	bne.n	80023b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	4313      	orrs	r3, r2
 80023c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	68fa      	ldr	r2, [r7, #12]
 80023c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	689a      	ldr	r2, [r3, #8]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a0a      	ldr	r2, [pc, #40]	; (8002404 <TIM_Base_SetConfig+0x114>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d003      	beq.n	80023e8 <TIM_Base_SetConfig+0xf8>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a0c      	ldr	r2, [pc, #48]	; (8002414 <TIM_Base_SetConfig+0x124>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d103      	bne.n	80023f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	691a      	ldr	r2, [r3, #16]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	615a      	str	r2, [r3, #20]
}
 80023f6:	bf00      	nop
 80023f8:	3714      	adds	r7, #20
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	40010000 	.word	0x40010000
 8002408:	40000400 	.word	0x40000400
 800240c:	40000800 	.word	0x40000800
 8002410:	40000c00 	.word	0x40000c00
 8002414:	40010400 	.word	0x40010400
 8002418:	40014000 	.word	0x40014000
 800241c:	40014400 	.word	0x40014400
 8002420:	40014800 	.word	0x40014800
 8002424:	40001800 	.word	0x40001800
 8002428:	40001c00 	.word	0x40001c00
 800242c:	40002000 	.word	0x40002000

08002430 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002430:	b480      	push	{r7}
 8002432:	b087      	sub	sp, #28
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	f023 0201 	bic.w	r2, r3, #1
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800245a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	011b      	lsls	r3, r3, #4
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	4313      	orrs	r3, r2
 8002464:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	f023 030a 	bic.w	r3, r3, #10
 800246c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	4313      	orrs	r3, r2
 8002474:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	621a      	str	r2, [r3, #32]
}
 8002482:	bf00      	nop
 8002484:	371c      	adds	r7, #28
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr

0800248e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800248e:	b480      	push	{r7}
 8002490:	b087      	sub	sp, #28
 8002492:	af00      	add	r7, sp, #0
 8002494:	60f8      	str	r0, [r7, #12]
 8002496:	60b9      	str	r1, [r7, #8]
 8002498:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	f023 0210 	bic.w	r2, r3, #16
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80024b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	031b      	lsls	r3, r3, #12
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80024ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	011b      	lsls	r3, r3, #4
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	697a      	ldr	r2, [r7, #20]
 80024da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	621a      	str	r2, [r3, #32]
}
 80024e2:	bf00      	nop
 80024e4:	371c      	adds	r7, #28
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b085      	sub	sp, #20
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
 80024f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002504:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	4313      	orrs	r3, r2
 800250c:	f043 0307 	orr.w	r3, r3, #7
 8002510:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	609a      	str	r2, [r3, #8]
}
 8002518:	bf00      	nop
 800251a:	3714      	adds	r7, #20
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002524:	b480      	push	{r7}
 8002526:	b087      	sub	sp, #28
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
 8002530:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800253e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	021a      	lsls	r2, r3, #8
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	431a      	orrs	r2, r3
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	4313      	orrs	r3, r2
 800254c:	697a      	ldr	r2, [r7, #20]
 800254e:	4313      	orrs	r3, r2
 8002550:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	609a      	str	r2, [r3, #8]
}
 8002558:	bf00      	nop
 800255a:	371c      	adds	r7, #28
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002574:	2b01      	cmp	r3, #1
 8002576:	d101      	bne.n	800257c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002578:	2302      	movs	r3, #2
 800257a:	e045      	b.n	8002608 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2202      	movs	r2, #2
 8002588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a1c      	ldr	r2, [pc, #112]	; (8002614 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d004      	beq.n	80025b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a1b      	ldr	r2, [pc, #108]	; (8002618 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d108      	bne.n	80025c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80025b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	4313      	orrs	r3, r2
 80025c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025da:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	68ba      	ldr	r2, [r7, #8]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68ba      	ldr	r2, [r7, #8]
 80025f4:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2201      	movs	r2, #1
 80025fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3714      	adds	r7, #20
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	40010000 	.word	0x40010000
 8002618:	40010400 	.word	0x40010400

0800261c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e040      	b.n	80026ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800266e:	2b00      	cmp	r3, #0
 8002670:	d106      	bne.n	8002680 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f003 ffe2 	bl	8006644 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2224      	movs	r2, #36	; 0x24
 8002684:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 0201 	bic.w	r2, r2, #1
 8002694:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 faec 	bl	8002c74 <UART_SetConfig>
 800269c:	4603      	mov	r3, r0
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d101      	bne.n	80026a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e022      	b.n	80026ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d002      	beq.n	80026b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 fd84 	bl	80031bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	685a      	ldr	r2, [r3, #4]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689a      	ldr	r2, [r3, #8]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026d2:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f042 0201 	orr.w	r2, r2, #1
 80026e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f000 fe0b 	bl	8003300 <UART_CheckIdleState>
 80026ea:	4603      	mov	r3, r0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b08a      	sub	sp, #40	; 0x28
 80026f8:	af02      	add	r7, sp, #8
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	603b      	str	r3, [r7, #0]
 8002700:	4613      	mov	r3, r2
 8002702:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002708:	2b20      	cmp	r3, #32
 800270a:	d17f      	bne.n	800280c <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d002      	beq.n	8002718 <HAL_UART_Transmit+0x24>
 8002712:	88fb      	ldrh	r3, [r7, #6]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d101      	bne.n	800271c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e078      	b.n	800280e <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002722:	2b01      	cmp	r3, #1
 8002724:	d101      	bne.n	800272a <HAL_UART_Transmit+0x36>
 8002726:	2302      	movs	r3, #2
 8002728:	e071      	b.n	800280e <HAL_UART_Transmit+0x11a>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2221      	movs	r2, #33	; 0x21
 800273c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800273e:	f7fd ff59 	bl	80005f4 <HAL_GetTick>
 8002742:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	88fa      	ldrh	r2, [r7, #6]
 8002748:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	88fa      	ldrh	r2, [r7, #6]
 8002750:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800275c:	d108      	bne.n	8002770 <HAL_UART_Transmit+0x7c>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d104      	bne.n	8002770 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8002766:	2300      	movs	r3, #0
 8002768:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	61bb      	str	r3, [r7, #24]
 800276e:	e003      	b.n	8002778 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002774:	2300      	movs	r3, #0
 8002776:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002778:	e02c      	b.n	80027d4 <HAL_UART_Transmit+0xe0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	2200      	movs	r2, #0
 8002782:	2180      	movs	r1, #128	; 0x80
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f000 fdea 	bl	800335e <UART_WaitOnFlagUntilTimeout>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <HAL_UART_Transmit+0xa0>
      {
        return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e03c      	b.n	800280e <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10b      	bne.n	80027b2 <HAL_UART_Transmit+0xbe>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	881b      	ldrh	r3, [r3, #0]
 800279e:	461a      	mov	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027a8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	3302      	adds	r3, #2
 80027ae:	61bb      	str	r3, [r7, #24]
 80027b0:	e007      	b.n	80027c2 <HAL_UART_Transmit+0xce>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	781a      	ldrb	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	3301      	adds	r3, #1
 80027c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	3b01      	subs	r3, #1
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80027da:	b29b      	uxth	r3, r3
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1cc      	bne.n	800277a <HAL_UART_Transmit+0x86>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	9300      	str	r3, [sp, #0]
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	2200      	movs	r2, #0
 80027e8:	2140      	movs	r1, #64	; 0x40
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f000 fdb7 	bl	800335e <UART_WaitOnFlagUntilTimeout>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <HAL_UART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e009      	b.n	800280e <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2220      	movs	r2, #32
 80027fe:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8002808:	2300      	movs	r3, #0
 800280a:	e000      	b.n	800280e <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800280c:	2302      	movs	r3, #2
  }
}
 800280e:	4618      	mov	r0, r3
 8002810:	3720      	adds	r7, #32
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
	...

08002818 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	4613      	mov	r3, r2
 8002824:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800282a:	2b20      	cmp	r3, #32
 800282c:	d144      	bne.n	80028b8 <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d002      	beq.n	800283a <HAL_UART_Transmit_IT+0x22>
 8002834:	88fb      	ldrh	r3, [r7, #6]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e03d      	b.n	80028ba <HAL_UART_Transmit_IT+0xa2>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002844:	2b01      	cmp	r3, #1
 8002846:	d101      	bne.n	800284c <HAL_UART_Transmit_IT+0x34>
 8002848:	2302      	movs	r3, #2
 800284a:	e036      	b.n	80028ba <HAL_UART_Transmit_IT+0xa2>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	68ba      	ldr	r2, [r7, #8]
 8002858:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	88fa      	ldrh	r2, [r7, #6]
 800285e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	88fa      	ldrh	r2, [r7, #6]
 8002866:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2200      	movs	r2, #0
 8002874:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2221      	movs	r2, #33	; 0x21
 800287a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002884:	d107      	bne.n	8002896 <HAL_UART_Transmit_IT+0x7e>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d103      	bne.n	8002896 <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	4a0d      	ldr	r2, [pc, #52]	; (80028c8 <HAL_UART_Transmit_IT+0xb0>)
 8002892:	665a      	str	r2, [r3, #100]	; 0x64
 8002894:	e002      	b.n	800289c <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	4a0c      	ldr	r2, [pc, #48]	; (80028cc <HAL_UART_Transmit_IT+0xb4>)
 800289a:	665a      	str	r2, [r3, #100]	; 0x64
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028b2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80028b4:	2300      	movs	r3, #0
 80028b6:	e000      	b.n	80028ba <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 80028b8:	2302      	movs	r3, #2
  }
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3714      	adds	r7, #20
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	080034cd 	.word	0x080034cd
 80028cc:	0800345b 	.word	0x0800345b

080028d0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	4613      	mov	r3, r2
 80028dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028e2:	2b20      	cmp	r3, #32
 80028e4:	f040 808a 	bne.w	80029fc <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d002      	beq.n	80028f4 <HAL_UART_Receive_IT+0x24>
 80028ee:	88fb      	ldrh	r3, [r7, #6]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e082      	b.n	80029fe <HAL_UART_Receive_IT+0x12e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d101      	bne.n	8002906 <HAL_UART_Receive_IT+0x36>
 8002902:	2302      	movs	r3, #2
 8002904:	e07b      	b.n	80029fe <HAL_UART_Receive_IT+0x12e>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	68ba      	ldr	r2, [r7, #8]
 8002912:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	88fa      	ldrh	r2, [r7, #6]
 8002918:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	88fa      	ldrh	r2, [r7, #6]
 8002920:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002932:	d10e      	bne.n	8002952 <HAL_UART_Receive_IT+0x82>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d105      	bne.n	8002948 <HAL_UART_Receive_IT+0x78>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002942:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002946:	e02d      	b.n	80029a4 <HAL_UART_Receive_IT+0xd4>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	22ff      	movs	r2, #255	; 0xff
 800294c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002950:	e028      	b.n	80029a4 <HAL_UART_Receive_IT+0xd4>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10d      	bne.n	8002976 <HAL_UART_Receive_IT+0xa6>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d104      	bne.n	800296c <HAL_UART_Receive_IT+0x9c>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	22ff      	movs	r2, #255	; 0xff
 8002966:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800296a:	e01b      	b.n	80029a4 <HAL_UART_Receive_IT+0xd4>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	227f      	movs	r2, #127	; 0x7f
 8002970:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002974:	e016      	b.n	80029a4 <HAL_UART_Receive_IT+0xd4>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800297e:	d10d      	bne.n	800299c <HAL_UART_Receive_IT+0xcc>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d104      	bne.n	8002992 <HAL_UART_Receive_IT+0xc2>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	227f      	movs	r2, #127	; 0x7f
 800298c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002990:	e008      	b.n	80029a4 <HAL_UART_Receive_IT+0xd4>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	223f      	movs	r2, #63	; 0x3f
 8002996:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800299a:	e003      	b.n	80029a4 <HAL_UART_Receive_IT+0xd4>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2222      	movs	r2, #34	; 0x22
 80029ae:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	689a      	ldr	r2, [r3, #8]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f042 0201 	orr.w	r2, r2, #1
 80029be:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029c8:	d107      	bne.n	80029da <HAL_UART_Receive_IT+0x10a>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d103      	bne.n	80029da <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	4a0d      	ldr	r2, [pc, #52]	; (8002a0c <HAL_UART_Receive_IT+0x13c>)
 80029d6:	661a      	str	r2, [r3, #96]	; 0x60
 80029d8:	e002      	b.n	80029e0 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	4a0c      	ldr	r2, [pc, #48]	; (8002a10 <HAL_UART_Receive_IT+0x140>)
 80029de:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80029f6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80029f8:	2300      	movs	r3, #0
 80029fa:	e000      	b.n	80029fe <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 80029fc:	2302      	movs	r3, #2
  }
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3714      	adds	r7, #20
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	08003621 	.word	0x08003621
 8002a10:	0800357b 	.word	0x0800357b

08002a14 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b088      	sub	sp, #32
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	f003 030f 	and.w	r3, r3, #15
 8002a3a:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d113      	bne.n	8002a6a <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	f003 0320 	and.w	r3, r3, #32
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00e      	beq.n	8002a6a <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	f003 0320 	and.w	r3, r3, #32
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d009      	beq.n	8002a6a <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 80eb 	beq.w	8002c36 <HAL_UART_IRQHandler+0x222>
      {
        huart->RxISR(huart);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	4798      	blx	r3
      }
      return;
 8002a68:	e0e5      	b.n	8002c36 <HAL_UART_IRQHandler+0x222>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f000 80c0 	beq.w	8002bf2 <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d105      	bne.n	8002a88 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f000 80b5 	beq.w	8002bf2 <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00e      	beq.n	8002ab0 <HAL_UART_IRQHandler+0x9c>
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d009      	beq.n	8002ab0 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002aa8:	f043 0201 	orr.w	r2, r3, #1
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00e      	beq.n	8002ad8 <HAL_UART_IRQHandler+0xc4>
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d009      	beq.n	8002ad8 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2202      	movs	r2, #2
 8002aca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ad0:	f043 0204 	orr.w	r2, r3, #4
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	f003 0304 	and.w	r3, r3, #4
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00e      	beq.n	8002b00 <HAL_UART_IRQHandler+0xec>
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	f003 0301 	and.w	r3, r3, #1
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d009      	beq.n	8002b00 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2204      	movs	r2, #4
 8002af2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002af8:	f043 0202 	orr.w	r2, r3, #2
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	f003 0308 	and.w	r3, r3, #8
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d013      	beq.n	8002b32 <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	f003 0320 	and.w	r3, r3, #32
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d104      	bne.n	8002b1e <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d009      	beq.n	8002b32 <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2208      	movs	r2, #8
 8002b24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b2a:	f043 0208 	orr.w	r2, r3, #8
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d07f      	beq.n	8002c3a <HAL_UART_IRQHandler+0x226>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	f003 0320 	and.w	r3, r3, #32
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00c      	beq.n	8002b5e <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	f003 0320 	and.w	r3, r3, #32
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d007      	beq.n	8002b5e <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d003      	beq.n	8002b5e <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b62:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b6e:	2b40      	cmp	r3, #64	; 0x40
 8002b70:	d004      	beq.n	8002b7c <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d031      	beq.n	8002be0 <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 fc36 	bl	80033ee <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b8c:	2b40      	cmp	r3, #64	; 0x40
 8002b8e:	d123      	bne.n	8002bd8 <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689a      	ldr	r2, [r3, #8]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b9e:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d013      	beq.n	8002bd0 <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bac:	4a26      	ldr	r2, [pc, #152]	; (8002c48 <HAL_UART_IRQHandler+0x234>)
 8002bae:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7fd fe0b 	bl	80007d0 <HAL_DMA_Abort_IT>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d016      	beq.n	8002bee <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002bca:	4610      	mov	r0, r2
 8002bcc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bce:	e00e      	b.n	8002bee <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 f845 	bl	8002c60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd6:	e00a      	b.n	8002bee <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f000 f841 	bl	8002c60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bde:	e006      	b.n	8002bee <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 f83d 	bl	8002c60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8002bec:	e025      	b.n	8002c3a <HAL_UART_IRQHandler+0x226>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bee:	bf00      	nop
    return;
 8002bf0:	e023      	b.n	8002c3a <HAL_UART_IRQHandler+0x226>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00d      	beq.n	8002c18 <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d008      	beq.n	8002c18 <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d017      	beq.n	8002c3e <HAL_UART_IRQHandler+0x22a>
    {
      huart->TxISR(huart);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	4798      	blx	r3
    }
    return;
 8002c16:	e012      	b.n	8002c3e <HAL_UART_IRQHandler+0x22a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00e      	beq.n	8002c40 <HAL_UART_IRQHandler+0x22c>
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d009      	beq.n	8002c40 <HAL_UART_IRQHandler+0x22c>
  {
    UART_EndTransmit_IT(huart);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 fc8b 	bl	8003548 <UART_EndTransmit_IT>
    return;
 8002c32:	bf00      	nop
 8002c34:	e004      	b.n	8002c40 <HAL_UART_IRQHandler+0x22c>
      return;
 8002c36:	bf00      	nop
 8002c38:	e002      	b.n	8002c40 <HAL_UART_IRQHandler+0x22c>
    return;
 8002c3a:	bf00      	nop
 8002c3c:	e000      	b.n	8002c40 <HAL_UART_IRQHandler+0x22c>
    return;
 8002c3e:	bf00      	nop
  }

}
 8002c40:	3720      	adds	r7, #32
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	0800342f 	.word	0x0800342f

08002c4c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b088      	sub	sp, #32
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c80:	2300      	movs	r3, #0
 8002c82:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	431a      	orrs	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	431a      	orrs	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	69db      	ldr	r3, [r3, #28]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	4bb1      	ldr	r3, [pc, #708]	; (8002f68 <UART_SetConfig+0x2f4>)
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	6812      	ldr	r2, [r2, #0]
 8002caa:	6939      	ldr	r1, [r7, #16]
 8002cac:	430b      	orrs	r3, r1
 8002cae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	68da      	ldr	r2, [r3, #12]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	693a      	ldr	r2, [r7, #16]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a9f      	ldr	r2, [pc, #636]	; (8002f6c <UART_SetConfig+0x2f8>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d121      	bne.n	8002d38 <UART_SetConfig+0xc4>
 8002cf4:	4b9e      	ldr	r3, [pc, #632]	; (8002f70 <UART_SetConfig+0x2fc>)
 8002cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cfa:	f003 0303 	and.w	r3, r3, #3
 8002cfe:	2b03      	cmp	r3, #3
 8002d00:	d816      	bhi.n	8002d30 <UART_SetConfig+0xbc>
 8002d02:	a201      	add	r2, pc, #4	; (adr r2, 8002d08 <UART_SetConfig+0x94>)
 8002d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d08:	08002d19 	.word	0x08002d19
 8002d0c:	08002d25 	.word	0x08002d25
 8002d10:	08002d1f 	.word	0x08002d1f
 8002d14:	08002d2b 	.word	0x08002d2b
 8002d18:	2301      	movs	r3, #1
 8002d1a:	77fb      	strb	r3, [r7, #31]
 8002d1c:	e151      	b.n	8002fc2 <UART_SetConfig+0x34e>
 8002d1e:	2302      	movs	r3, #2
 8002d20:	77fb      	strb	r3, [r7, #31]
 8002d22:	e14e      	b.n	8002fc2 <UART_SetConfig+0x34e>
 8002d24:	2304      	movs	r3, #4
 8002d26:	77fb      	strb	r3, [r7, #31]
 8002d28:	e14b      	b.n	8002fc2 <UART_SetConfig+0x34e>
 8002d2a:	2308      	movs	r3, #8
 8002d2c:	77fb      	strb	r3, [r7, #31]
 8002d2e:	e148      	b.n	8002fc2 <UART_SetConfig+0x34e>
 8002d30:	2310      	movs	r3, #16
 8002d32:	77fb      	strb	r3, [r7, #31]
 8002d34:	bf00      	nop
 8002d36:	e144      	b.n	8002fc2 <UART_SetConfig+0x34e>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a8d      	ldr	r2, [pc, #564]	; (8002f74 <UART_SetConfig+0x300>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d134      	bne.n	8002dac <UART_SetConfig+0x138>
 8002d42:	4b8b      	ldr	r3, [pc, #556]	; (8002f70 <UART_SetConfig+0x2fc>)
 8002d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d48:	f003 030c 	and.w	r3, r3, #12
 8002d4c:	2b0c      	cmp	r3, #12
 8002d4e:	d829      	bhi.n	8002da4 <UART_SetConfig+0x130>
 8002d50:	a201      	add	r2, pc, #4	; (adr r2, 8002d58 <UART_SetConfig+0xe4>)
 8002d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d56:	bf00      	nop
 8002d58:	08002d8d 	.word	0x08002d8d
 8002d5c:	08002da5 	.word	0x08002da5
 8002d60:	08002da5 	.word	0x08002da5
 8002d64:	08002da5 	.word	0x08002da5
 8002d68:	08002d99 	.word	0x08002d99
 8002d6c:	08002da5 	.word	0x08002da5
 8002d70:	08002da5 	.word	0x08002da5
 8002d74:	08002da5 	.word	0x08002da5
 8002d78:	08002d93 	.word	0x08002d93
 8002d7c:	08002da5 	.word	0x08002da5
 8002d80:	08002da5 	.word	0x08002da5
 8002d84:	08002da5 	.word	0x08002da5
 8002d88:	08002d9f 	.word	0x08002d9f
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	77fb      	strb	r3, [r7, #31]
 8002d90:	e117      	b.n	8002fc2 <UART_SetConfig+0x34e>
 8002d92:	2302      	movs	r3, #2
 8002d94:	77fb      	strb	r3, [r7, #31]
 8002d96:	e114      	b.n	8002fc2 <UART_SetConfig+0x34e>
 8002d98:	2304      	movs	r3, #4
 8002d9a:	77fb      	strb	r3, [r7, #31]
 8002d9c:	e111      	b.n	8002fc2 <UART_SetConfig+0x34e>
 8002d9e:	2308      	movs	r3, #8
 8002da0:	77fb      	strb	r3, [r7, #31]
 8002da2:	e10e      	b.n	8002fc2 <UART_SetConfig+0x34e>
 8002da4:	2310      	movs	r3, #16
 8002da6:	77fb      	strb	r3, [r7, #31]
 8002da8:	bf00      	nop
 8002daa:	e10a      	b.n	8002fc2 <UART_SetConfig+0x34e>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a71      	ldr	r2, [pc, #452]	; (8002f78 <UART_SetConfig+0x304>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d120      	bne.n	8002df8 <UART_SetConfig+0x184>
 8002db6:	4b6e      	ldr	r3, [pc, #440]	; (8002f70 <UART_SetConfig+0x2fc>)
 8002db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dbc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002dc0:	2b10      	cmp	r3, #16
 8002dc2:	d00f      	beq.n	8002de4 <UART_SetConfig+0x170>
 8002dc4:	2b10      	cmp	r3, #16
 8002dc6:	d802      	bhi.n	8002dce <UART_SetConfig+0x15a>
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d005      	beq.n	8002dd8 <UART_SetConfig+0x164>
 8002dcc:	e010      	b.n	8002df0 <UART_SetConfig+0x17c>
 8002dce:	2b20      	cmp	r3, #32
 8002dd0:	d005      	beq.n	8002dde <UART_SetConfig+0x16a>
 8002dd2:	2b30      	cmp	r3, #48	; 0x30
 8002dd4:	d009      	beq.n	8002dea <UART_SetConfig+0x176>
 8002dd6:	e00b      	b.n	8002df0 <UART_SetConfig+0x17c>
 8002dd8:	2300      	movs	r3, #0
 8002dda:	77fb      	strb	r3, [r7, #31]
 8002ddc:	e0f1      	b.n	8002fc2 <UART_SetConfig+0x34e>
 8002dde:	2302      	movs	r3, #2
 8002de0:	77fb      	strb	r3, [r7, #31]
 8002de2:	e0ee      	b.n	8002fc2 <UART_SetConfig+0x34e>
 8002de4:	2304      	movs	r3, #4
 8002de6:	77fb      	strb	r3, [r7, #31]
 8002de8:	e0eb      	b.n	8002fc2 <UART_SetConfig+0x34e>
 8002dea:	2308      	movs	r3, #8
 8002dec:	77fb      	strb	r3, [r7, #31]
 8002dee:	e0e8      	b.n	8002fc2 <UART_SetConfig+0x34e>
 8002df0:	2310      	movs	r3, #16
 8002df2:	77fb      	strb	r3, [r7, #31]
 8002df4:	bf00      	nop
 8002df6:	e0e4      	b.n	8002fc2 <UART_SetConfig+0x34e>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a5f      	ldr	r2, [pc, #380]	; (8002f7c <UART_SetConfig+0x308>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d120      	bne.n	8002e44 <UART_SetConfig+0x1d0>
 8002e02:	4b5b      	ldr	r3, [pc, #364]	; (8002f70 <UART_SetConfig+0x2fc>)
 8002e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e08:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002e0c:	2b40      	cmp	r3, #64	; 0x40
 8002e0e:	d00f      	beq.n	8002e30 <UART_SetConfig+0x1bc>
 8002e10:	2b40      	cmp	r3, #64	; 0x40
 8002e12:	d802      	bhi.n	8002e1a <UART_SetConfig+0x1a6>
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d005      	beq.n	8002e24 <UART_SetConfig+0x1b0>
 8002e18:	e010      	b.n	8002e3c <UART_SetConfig+0x1c8>
 8002e1a:	2b80      	cmp	r3, #128	; 0x80
 8002e1c:	d005      	beq.n	8002e2a <UART_SetConfig+0x1b6>
 8002e1e:	2bc0      	cmp	r3, #192	; 0xc0
 8002e20:	d009      	beq.n	8002e36 <UART_SetConfig+0x1c2>
 8002e22:	e00b      	b.n	8002e3c <UART_SetConfig+0x1c8>
 8002e24:	2300      	movs	r3, #0
 8002e26:	77fb      	strb	r3, [r7, #31]
 8002e28:	e0cb      	b.n	8002fc2 <UART_SetConfig+0x34e>
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	77fb      	strb	r3, [r7, #31]
 8002e2e:	e0c8      	b.n	8002fc2 <UART_SetConfig+0x34e>
 8002e30:	2304      	movs	r3, #4
 8002e32:	77fb      	strb	r3, [r7, #31]
 8002e34:	e0c5      	b.n	8002fc2 <UART_SetConfig+0x34e>
 8002e36:	2308      	movs	r3, #8
 8002e38:	77fb      	strb	r3, [r7, #31]
 8002e3a:	e0c2      	b.n	8002fc2 <UART_SetConfig+0x34e>
 8002e3c:	2310      	movs	r3, #16
 8002e3e:	77fb      	strb	r3, [r7, #31]
 8002e40:	bf00      	nop
 8002e42:	e0be      	b.n	8002fc2 <UART_SetConfig+0x34e>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a4d      	ldr	r2, [pc, #308]	; (8002f80 <UART_SetConfig+0x30c>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d124      	bne.n	8002e98 <UART_SetConfig+0x224>
 8002e4e:	4b48      	ldr	r3, [pc, #288]	; (8002f70 <UART_SetConfig+0x2fc>)
 8002e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e5c:	d012      	beq.n	8002e84 <UART_SetConfig+0x210>
 8002e5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e62:	d802      	bhi.n	8002e6a <UART_SetConfig+0x1f6>
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d007      	beq.n	8002e78 <UART_SetConfig+0x204>
 8002e68:	e012      	b.n	8002e90 <UART_SetConfig+0x21c>
 8002e6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e6e:	d006      	beq.n	8002e7e <UART_SetConfig+0x20a>
 8002e70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e74:	d009      	beq.n	8002e8a <UART_SetConfig+0x216>
 8002e76:	e00b      	b.n	8002e90 <UART_SetConfig+0x21c>
 8002e78:	2300      	movs	r3, #0
 8002e7a:	77fb      	strb	r3, [r7, #31]
 8002e7c:	e0a1      	b.n	8002fc2 <UART_SetConfig+0x34e>
 8002e7e:	2302      	movs	r3, #2
 8002e80:	77fb      	strb	r3, [r7, #31]
 8002e82:	e09e      	b.n	8002fc2 <UART_SetConfig+0x34e>
 8002e84:	2304      	movs	r3, #4
 8002e86:	77fb      	strb	r3, [r7, #31]
 8002e88:	e09b      	b.n	8002fc2 <UART_SetConfig+0x34e>
 8002e8a:	2308      	movs	r3, #8
 8002e8c:	77fb      	strb	r3, [r7, #31]
 8002e8e:	e098      	b.n	8002fc2 <UART_SetConfig+0x34e>
 8002e90:	2310      	movs	r3, #16
 8002e92:	77fb      	strb	r3, [r7, #31]
 8002e94:	bf00      	nop
 8002e96:	e094      	b.n	8002fc2 <UART_SetConfig+0x34e>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a39      	ldr	r2, [pc, #228]	; (8002f84 <UART_SetConfig+0x310>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d124      	bne.n	8002eec <UART_SetConfig+0x278>
 8002ea2:	4b33      	ldr	r3, [pc, #204]	; (8002f70 <UART_SetConfig+0x2fc>)
 8002ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002eac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eb0:	d012      	beq.n	8002ed8 <UART_SetConfig+0x264>
 8002eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eb6:	d802      	bhi.n	8002ebe <UART_SetConfig+0x24a>
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d007      	beq.n	8002ecc <UART_SetConfig+0x258>
 8002ebc:	e012      	b.n	8002ee4 <UART_SetConfig+0x270>
 8002ebe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ec2:	d006      	beq.n	8002ed2 <UART_SetConfig+0x25e>
 8002ec4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ec8:	d009      	beq.n	8002ede <UART_SetConfig+0x26a>
 8002eca:	e00b      	b.n	8002ee4 <UART_SetConfig+0x270>
 8002ecc:	2301      	movs	r3, #1
 8002ece:	77fb      	strb	r3, [r7, #31]
 8002ed0:	e077      	b.n	8002fc2 <UART_SetConfig+0x34e>
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	77fb      	strb	r3, [r7, #31]
 8002ed6:	e074      	b.n	8002fc2 <UART_SetConfig+0x34e>
 8002ed8:	2304      	movs	r3, #4
 8002eda:	77fb      	strb	r3, [r7, #31]
 8002edc:	e071      	b.n	8002fc2 <UART_SetConfig+0x34e>
 8002ede:	2308      	movs	r3, #8
 8002ee0:	77fb      	strb	r3, [r7, #31]
 8002ee2:	e06e      	b.n	8002fc2 <UART_SetConfig+0x34e>
 8002ee4:	2310      	movs	r3, #16
 8002ee6:	77fb      	strb	r3, [r7, #31]
 8002ee8:	bf00      	nop
 8002eea:	e06a      	b.n	8002fc2 <UART_SetConfig+0x34e>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a25      	ldr	r2, [pc, #148]	; (8002f88 <UART_SetConfig+0x314>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d124      	bne.n	8002f40 <UART_SetConfig+0x2cc>
 8002ef6:	4b1e      	ldr	r3, [pc, #120]	; (8002f70 <UART_SetConfig+0x2fc>)
 8002ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002efc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002f00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f04:	d012      	beq.n	8002f2c <UART_SetConfig+0x2b8>
 8002f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f0a:	d802      	bhi.n	8002f12 <UART_SetConfig+0x29e>
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d007      	beq.n	8002f20 <UART_SetConfig+0x2ac>
 8002f10:	e012      	b.n	8002f38 <UART_SetConfig+0x2c4>
 8002f12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f16:	d006      	beq.n	8002f26 <UART_SetConfig+0x2b2>
 8002f18:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002f1c:	d009      	beq.n	8002f32 <UART_SetConfig+0x2be>
 8002f1e:	e00b      	b.n	8002f38 <UART_SetConfig+0x2c4>
 8002f20:	2300      	movs	r3, #0
 8002f22:	77fb      	strb	r3, [r7, #31]
 8002f24:	e04d      	b.n	8002fc2 <UART_SetConfig+0x34e>
 8002f26:	2302      	movs	r3, #2
 8002f28:	77fb      	strb	r3, [r7, #31]
 8002f2a:	e04a      	b.n	8002fc2 <UART_SetConfig+0x34e>
 8002f2c:	2304      	movs	r3, #4
 8002f2e:	77fb      	strb	r3, [r7, #31]
 8002f30:	e047      	b.n	8002fc2 <UART_SetConfig+0x34e>
 8002f32:	2308      	movs	r3, #8
 8002f34:	77fb      	strb	r3, [r7, #31]
 8002f36:	e044      	b.n	8002fc2 <UART_SetConfig+0x34e>
 8002f38:	2310      	movs	r3, #16
 8002f3a:	77fb      	strb	r3, [r7, #31]
 8002f3c:	bf00      	nop
 8002f3e:	e040      	b.n	8002fc2 <UART_SetConfig+0x34e>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a11      	ldr	r2, [pc, #68]	; (8002f8c <UART_SetConfig+0x318>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d139      	bne.n	8002fbe <UART_SetConfig+0x34a>
 8002f4a:	4b09      	ldr	r3, [pc, #36]	; (8002f70 <UART_SetConfig+0x2fc>)
 8002f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002f54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f58:	d027      	beq.n	8002faa <UART_SetConfig+0x336>
 8002f5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f5e:	d817      	bhi.n	8002f90 <UART_SetConfig+0x31c>
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d01c      	beq.n	8002f9e <UART_SetConfig+0x32a>
 8002f64:	e027      	b.n	8002fb6 <UART_SetConfig+0x342>
 8002f66:	bf00      	nop
 8002f68:	efff69f3 	.word	0xefff69f3
 8002f6c:	40011000 	.word	0x40011000
 8002f70:	40023800 	.word	0x40023800
 8002f74:	40004400 	.word	0x40004400
 8002f78:	40004800 	.word	0x40004800
 8002f7c:	40004c00 	.word	0x40004c00
 8002f80:	40005000 	.word	0x40005000
 8002f84:	40011400 	.word	0x40011400
 8002f88:	40007800 	.word	0x40007800
 8002f8c:	40007c00 	.word	0x40007c00
 8002f90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f94:	d006      	beq.n	8002fa4 <UART_SetConfig+0x330>
 8002f96:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002f9a:	d009      	beq.n	8002fb0 <UART_SetConfig+0x33c>
 8002f9c:	e00b      	b.n	8002fb6 <UART_SetConfig+0x342>
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	77fb      	strb	r3, [r7, #31]
 8002fa2:	e00e      	b.n	8002fc2 <UART_SetConfig+0x34e>
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	77fb      	strb	r3, [r7, #31]
 8002fa8:	e00b      	b.n	8002fc2 <UART_SetConfig+0x34e>
 8002faa:	2304      	movs	r3, #4
 8002fac:	77fb      	strb	r3, [r7, #31]
 8002fae:	e008      	b.n	8002fc2 <UART_SetConfig+0x34e>
 8002fb0:	2308      	movs	r3, #8
 8002fb2:	77fb      	strb	r3, [r7, #31]
 8002fb4:	e005      	b.n	8002fc2 <UART_SetConfig+0x34e>
 8002fb6:	2310      	movs	r3, #16
 8002fb8:	77fb      	strb	r3, [r7, #31]
 8002fba:	bf00      	nop
 8002fbc:	e001      	b.n	8002fc2 <UART_SetConfig+0x34e>
 8002fbe:	2310      	movs	r3, #16
 8002fc0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fca:	d17c      	bne.n	80030c6 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8002fcc:	7ffb      	ldrb	r3, [r7, #31]
 8002fce:	2b08      	cmp	r3, #8
 8002fd0:	d859      	bhi.n	8003086 <UART_SetConfig+0x412>
 8002fd2:	a201      	add	r2, pc, #4	; (adr r2, 8002fd8 <UART_SetConfig+0x364>)
 8002fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd8:	08002ffd 	.word	0x08002ffd
 8002fdc:	0800301b 	.word	0x0800301b
 8002fe0:	08003039 	.word	0x08003039
 8002fe4:	08003087 	.word	0x08003087
 8002fe8:	08003051 	.word	0x08003051
 8002fec:	08003087 	.word	0x08003087
 8002ff0:	08003087 	.word	0x08003087
 8002ff4:	08003087 	.word	0x08003087
 8002ff8:	0800306f 	.word	0x0800306f
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002ffc:	f7fe fa4a 	bl	8001494 <HAL_RCC_GetPCLK1Freq>
 8003000:	4603      	mov	r3, r0
 8003002:	005a      	lsls	r2, r3, #1
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	085b      	lsrs	r3, r3, #1
 800300a:	441a      	add	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	fbb2 f3f3 	udiv	r3, r2, r3
 8003014:	b29b      	uxth	r3, r3
 8003016:	61bb      	str	r3, [r7, #24]
        break;
 8003018:	e038      	b.n	800308c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800301a:	f7fe fa4f 	bl	80014bc <HAL_RCC_GetPCLK2Freq>
 800301e:	4603      	mov	r3, r0
 8003020:	005a      	lsls	r2, r3, #1
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	085b      	lsrs	r3, r3, #1
 8003028:	441a      	add	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003032:	b29b      	uxth	r3, r3
 8003034:	61bb      	str	r3, [r7, #24]
        break;
 8003036:	e029      	b.n	800308c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	085a      	lsrs	r2, r3, #1
 800303e:	4b5d      	ldr	r3, [pc, #372]	; (80031b4 <UART_SetConfig+0x540>)
 8003040:	4413      	add	r3, r2
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	6852      	ldr	r2, [r2, #4]
 8003046:	fbb3 f3f2 	udiv	r3, r3, r2
 800304a:	b29b      	uxth	r3, r3
 800304c:	61bb      	str	r3, [r7, #24]
        break;
 800304e:	e01d      	b.n	800308c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003050:	f7fe f962 	bl	8001318 <HAL_RCC_GetSysClockFreq>
 8003054:	4603      	mov	r3, r0
 8003056:	005a      	lsls	r2, r3, #1
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	085b      	lsrs	r3, r3, #1
 800305e:	441a      	add	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	fbb2 f3f3 	udiv	r3, r2, r3
 8003068:	b29b      	uxth	r3, r3
 800306a:	61bb      	str	r3, [r7, #24]
        break;
 800306c:	e00e      	b.n	800308c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	085b      	lsrs	r3, r3, #1
 8003074:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003080:	b29b      	uxth	r3, r3
 8003082:	61bb      	str	r3, [r7, #24]
        break;
 8003084:	e002      	b.n	800308c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	75fb      	strb	r3, [r7, #23]
        break;
 800308a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	2b0f      	cmp	r3, #15
 8003090:	d916      	bls.n	80030c0 <UART_SetConfig+0x44c>
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003098:	d212      	bcs.n	80030c0 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	b29b      	uxth	r3, r3
 800309e:	f023 030f 	bic.w	r3, r3, #15
 80030a2:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	085b      	lsrs	r3, r3, #1
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	f003 0307 	and.w	r3, r3, #7
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	89fb      	ldrh	r3, [r7, #14]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	89fa      	ldrh	r2, [r7, #14]
 80030bc:	60da      	str	r2, [r3, #12]
 80030be:	e06e      	b.n	800319e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	75fb      	strb	r3, [r7, #23]
 80030c4:	e06b      	b.n	800319e <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 80030c6:	7ffb      	ldrb	r3, [r7, #31]
 80030c8:	2b08      	cmp	r3, #8
 80030ca:	d857      	bhi.n	800317c <UART_SetConfig+0x508>
 80030cc:	a201      	add	r2, pc, #4	; (adr r2, 80030d4 <UART_SetConfig+0x460>)
 80030ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d2:	bf00      	nop
 80030d4:	080030f9 	.word	0x080030f9
 80030d8:	08003115 	.word	0x08003115
 80030dc:	08003131 	.word	0x08003131
 80030e0:	0800317d 	.word	0x0800317d
 80030e4:	08003149 	.word	0x08003149
 80030e8:	0800317d 	.word	0x0800317d
 80030ec:	0800317d 	.word	0x0800317d
 80030f0:	0800317d 	.word	0x0800317d
 80030f4:	08003165 	.word	0x08003165
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80030f8:	f7fe f9cc 	bl	8001494 <HAL_RCC_GetPCLK1Freq>
 80030fc:	4602      	mov	r2, r0
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	085b      	lsrs	r3, r3, #1
 8003104:	441a      	add	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	fbb2 f3f3 	udiv	r3, r2, r3
 800310e:	b29b      	uxth	r3, r3
 8003110:	61bb      	str	r3, [r7, #24]
        break;
 8003112:	e036      	b.n	8003182 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003114:	f7fe f9d2 	bl	80014bc <HAL_RCC_GetPCLK2Freq>
 8003118:	4602      	mov	r2, r0
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	085b      	lsrs	r3, r3, #1
 8003120:	441a      	add	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	fbb2 f3f3 	udiv	r3, r2, r3
 800312a:	b29b      	uxth	r3, r3
 800312c:	61bb      	str	r3, [r7, #24]
        break;
 800312e:	e028      	b.n	8003182 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	085a      	lsrs	r2, r3, #1
 8003136:	4b20      	ldr	r3, [pc, #128]	; (80031b8 <UART_SetConfig+0x544>)
 8003138:	4413      	add	r3, r2
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	6852      	ldr	r2, [r2, #4]
 800313e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003142:	b29b      	uxth	r3, r3
 8003144:	61bb      	str	r3, [r7, #24]
        break;
 8003146:	e01c      	b.n	8003182 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003148:	f7fe f8e6 	bl	8001318 <HAL_RCC_GetSysClockFreq>
 800314c:	4602      	mov	r2, r0
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	085b      	lsrs	r3, r3, #1
 8003154:	441a      	add	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	fbb2 f3f3 	udiv	r3, r2, r3
 800315e:	b29b      	uxth	r3, r3
 8003160:	61bb      	str	r3, [r7, #24]
        break;
 8003162:	e00e      	b.n	8003182 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	085b      	lsrs	r3, r3, #1
 800316a:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	fbb2 f3f3 	udiv	r3, r2, r3
 8003176:	b29b      	uxth	r3, r3
 8003178:	61bb      	str	r3, [r7, #24]
        break;
 800317a:	e002      	b.n	8003182 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	75fb      	strb	r3, [r7, #23]
        break;
 8003180:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	2b0f      	cmp	r3, #15
 8003186:	d908      	bls.n	800319a <UART_SetConfig+0x526>
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800318e:	d204      	bcs.n	800319a <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	60da      	str	r2, [r3, #12]
 8003198:	e001      	b.n	800319e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80031aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3720      	adds	r7, #32
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	01e84800 	.word	0x01e84800
 80031b8:	00f42400 	.word	0x00f42400

080031bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00a      	beq.n	80031e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00a      	beq.n	8003208 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	430a      	orrs	r2, r1
 8003206:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00a      	beq.n	800322a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	430a      	orrs	r2, r1
 8003228:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322e:	f003 0308 	and.w	r3, r3, #8
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00a      	beq.n	800324c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	430a      	orrs	r2, r1
 800324a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003250:	f003 0310 	and.w	r3, r3, #16
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00a      	beq.n	800326e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003272:	f003 0320 	and.w	r3, r3, #32
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00a      	beq.n	8003290 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003298:	2b00      	cmp	r3, #0
 800329a:	d01a      	beq.n	80032d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032ba:	d10a      	bne.n	80032d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00a      	beq.n	80032f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	605a      	str	r2, [r3, #4]
  }
}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af02      	add	r7, sp, #8
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800330e:	f7fd f971 	bl	80005f4 <HAL_GetTick>
 8003312:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0308 	and.w	r3, r3, #8
 800331e:	2b08      	cmp	r3, #8
 8003320:	d10e      	bne.n	8003340 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003322:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003326:	9300      	str	r3, [sp, #0]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2200      	movs	r2, #0
 800332c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 f814 	bl	800335e <UART_WaitOnFlagUntilTimeout>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e00a      	b.n	8003356 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2220      	movs	r2, #32
 8003344:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2220      	movs	r2, #32
 800334a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b084      	sub	sp, #16
 8003362:	af00      	add	r7, sp, #0
 8003364:	60f8      	str	r0, [r7, #12]
 8003366:	60b9      	str	r1, [r7, #8]
 8003368:	603b      	str	r3, [r7, #0]
 800336a:	4613      	mov	r3, r2
 800336c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800336e:	e02a      	b.n	80033c6 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003376:	d026      	beq.n	80033c6 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003378:	f7fd f93c 	bl	80005f4 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	429a      	cmp	r2, r3
 8003386:	d302      	bcc.n	800338e <UART_WaitOnFlagUntilTimeout+0x30>
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d11b      	bne.n	80033c6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800339c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 0201 	bic.w	r2, r2, #1
 80033ac:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2220      	movs	r2, #32
 80033b2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2220      	movs	r2, #32
 80033b8:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e00f      	b.n	80033e6 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	69da      	ldr	r2, [r3, #28]
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	4013      	ands	r3, r2
 80033d0:	68ba      	ldr	r2, [r7, #8]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	bf0c      	ite	eq
 80033d6:	2301      	moveq	r3, #1
 80033d8:	2300      	movne	r3, #0
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	461a      	mov	r2, r3
 80033de:	79fb      	ldrb	r3, [r7, #7]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d0c5      	beq.n	8003370 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033ee:	b480      	push	{r7}
 80033f0:	b083      	sub	sp, #12
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003404:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 0201 	bic.w	r2, r2, #1
 8003414:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2220      	movs	r2, #32
 800341a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	661a      	str	r2, [r3, #96]	; 0x60
}
 8003422:	bf00      	nop
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr

0800342e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b084      	sub	sp, #16
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	f7ff fc07 	bl	8002c60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003452:	bf00      	nop
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003466:	2b21      	cmp	r3, #33	; 0x21
 8003468:	d12a      	bne.n	80034c0 <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003470:	b29b      	uxth	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d110      	bne.n	8003498 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003484:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003494:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003496:	e013      	b.n	80034c0 <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800349c:	781a      	ldrb	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034a8:	1c5a      	adds	r2, r3, #1
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	3b01      	subs	r3, #1
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034d8:	2b21      	cmp	r3, #33	; 0x21
 80034da:	d12f      	bne.n	800353c <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d110      	bne.n	800350a <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034f6:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003506:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003508:	e018      	b.n	800353c <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800350e:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	881b      	ldrh	r3, [r3, #0]
 8003514:	461a      	mov	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800351e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003524:	1c9a      	adds	r2, r3, #2
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003530:	b29b      	uxth	r3, r3
 8003532:	3b01      	subs	r3, #1
 8003534:	b29a      	uxth	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800353c:	bf00      	nop
 800353e:	3714      	adds	r7, #20
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800355e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2220      	movs	r2, #32
 8003564:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f7ff fb6d 	bl	8002c4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003572:	bf00      	nop
 8003574:	3708      	adds	r7, #8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b084      	sub	sp, #16
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003588:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800358e:	2b22      	cmp	r3, #34	; 0x22
 8003590:	d13a      	bne.n	8003608 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003598:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800359a:	89bb      	ldrh	r3, [r7, #12]
 800359c:	b2d9      	uxtb	r1, r3
 800359e:	89fb      	ldrh	r3, [r7, #14]
 80035a0:	b2da      	uxtb	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a6:	400a      	ands	r2, r1
 80035a8:	b2d2      	uxtb	r2, r2
 80035aa:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b0:	1c5a      	adds	r2, r3, #1
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80035bc:	b29b      	uxth	r3, r3
 80035be:	3b01      	subs	r3, #1
 80035c0:	b29a      	uxth	r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d121      	bne.n	8003618 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80035e2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	689a      	ldr	r2, [r3, #8]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f022 0201 	bic.w	r2, r2, #1
 80035f2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2220      	movs	r2, #32
 80035f8:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f002 fe83 	bl	800630c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003606:	e007      	b.n	8003618 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	699a      	ldr	r2, [r3, #24]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f042 0208 	orr.w	r2, r2, #8
 8003616:	619a      	str	r2, [r3, #24]
}
 8003618:	bf00      	nop
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800362e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003634:	2b22      	cmp	r3, #34	; 0x22
 8003636:	d13a      	bne.n	80036ae <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363e:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003644:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8003646:	89ba      	ldrh	r2, [r7, #12]
 8003648:	89fb      	ldrh	r3, [r7, #14]
 800364a:	4013      	ands	r3, r2
 800364c:	b29a      	uxth	r2, r3
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003656:	1c9a      	adds	r2, r3, #2
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003662:	b29b      	uxth	r3, r3
 8003664:	3b01      	subs	r3, #1
 8003666:	b29a      	uxth	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003674:	b29b      	uxth	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d121      	bne.n	80036be <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003688:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	689a      	ldr	r2, [r3, #8]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 0201 	bic.w	r2, r2, #1
 8003698:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2220      	movs	r2, #32
 800369e:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f002 fe30 	bl	800630c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80036ac:	e007      	b.n	80036be <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	699a      	ldr	r2, [r3, #24]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f042 0208 	orr.w	r2, r2, #8
 80036bc:	619a      	str	r2, [r3, #24]
}
 80036be:	bf00      	nop
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b085      	sub	sp, #20
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	4603      	mov	r3, r0
 80036ce:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80036d0:	2300      	movs	r3, #0
 80036d2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80036d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036d8:	2b84      	cmp	r3, #132	; 0x84
 80036da:	d005      	beq.n	80036e8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80036dc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	4413      	add	r3, r2
 80036e4:	3303      	adds	r3, #3
 80036e6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80036e8:	68fb      	ldr	r3, [r7, #12]
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3714      	adds	r7, #20
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr

080036f6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80036f6:	b480      	push	{r7}
 80036f8:	b083      	sub	sp, #12
 80036fa:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036fc:	f3ef 8305 	mrs	r3, IPSR
 8003700:	607b      	str	r3, [r7, #4]
  return(result);
 8003702:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003704:	2b00      	cmp	r3, #0
 8003706:	bf14      	ite	ne
 8003708:	2301      	movne	r3, #1
 800370a:	2300      	moveq	r3, #0
 800370c:	b2db      	uxtb	r3, r3
}
 800370e:	4618      	mov	r0, r3
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr

0800371a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800371a:	b580      	push	{r7, lr}
 800371c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800371e:	f001 fcd3 	bl	80050c8 <vTaskStartScheduler>
  
  return osOK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	bd80      	pop	{r7, pc}

08003728 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800372a:	b087      	sub	sp, #28
 800372c:	af02      	add	r7, sp, #8
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685c      	ldr	r4, [r3, #4]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800373e:	b29e      	uxth	r6, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003746:	4618      	mov	r0, r3
 8003748:	f7ff ffbd 	bl	80036c6 <makeFreeRtosPriority>
 800374c:	4602      	mov	r2, r0
 800374e:	f107 030c 	add.w	r3, r7, #12
 8003752:	9301      	str	r3, [sp, #4]
 8003754:	9200      	str	r2, [sp, #0]
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	4632      	mov	r2, r6
 800375a:	4629      	mov	r1, r5
 800375c:	4620      	mov	r0, r4
 800375e:	f001 fac2 	bl	8004ce6 <xTaskCreate>
 8003762:	4603      	mov	r3, r0
 8003764:	2b01      	cmp	r3, #1
 8003766:	d001      	beq.n	800376c <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8003768:	2300      	movs	r3, #0
 800376a:	e000      	b.n	800376e <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800376c:	68fb      	ldr	r3, [r7, #12]
}
 800376e:	4618      	mov	r0, r3
 8003770:	3714      	adds	r7, #20
 8003772:	46bd      	mov	sp, r7
 8003774:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003776 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b082      	sub	sp, #8
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f001 fbdc 	bl	8004f3c <vTaskDelete>
  return osOK;
 8003784:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8003786:	4618      	mov	r0, r3
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b084      	sub	sp, #16
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <osDelay+0x16>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	e000      	b.n	80037a6 <osDelay+0x18>
 80037a4:	2301      	movs	r3, #1
 80037a6:	4618      	mov	r0, r3
 80037a8:	f001 fc58 	bl	800505c <vTaskDelay>
  
  return osOK;
 80037ac:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b082      	sub	sp, #8
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 80037be:	2001      	movs	r0, #1
 80037c0:	f000 fe2a 	bl	8004418 <xQueueCreateMutex>
 80037c4:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
	...

080037d0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80037da:	2300      	movs	r3, #0
 80037dc:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d101      	bne.n	80037e8 <osMutexWait+0x18>
    return osErrorParameter;
 80037e4:	2380      	movs	r3, #128	; 0x80
 80037e6:	e03a      	b.n	800385e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80037e8:	2300      	movs	r3, #0
 80037ea:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f2:	d103      	bne.n	80037fc <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80037f4:	f04f 33ff 	mov.w	r3, #4294967295
 80037f8:	60fb      	str	r3, [r7, #12]
 80037fa:	e009      	b.n	8003810 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d006      	beq.n	8003810 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d101      	bne.n	8003810 <osMutexWait+0x40>
      ticks = 1;
 800380c:	2301      	movs	r3, #1
 800380e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8003810:	f7ff ff71 	bl	80036f6 <inHandlerMode>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d017      	beq.n	800384a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800381a:	f107 0308 	add.w	r3, r7, #8
 800381e:	461a      	mov	r2, r3
 8003820:	2100      	movs	r1, #0
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f001 f8b4 	bl	8004990 <xQueueReceiveFromISR>
 8003828:	4603      	mov	r3, r0
 800382a:	2b01      	cmp	r3, #1
 800382c:	d001      	beq.n	8003832 <osMutexWait+0x62>
      return osErrorOS;
 800382e:	23ff      	movs	r3, #255	; 0xff
 8003830:	e015      	b.n	800385e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d011      	beq.n	800385c <osMutexWait+0x8c>
 8003838:	4b0b      	ldr	r3, [pc, #44]	; (8003868 <osMutexWait+0x98>)
 800383a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800383e:	601a      	str	r2, [r3, #0]
 8003840:	f3bf 8f4f 	dsb	sy
 8003844:	f3bf 8f6f 	isb	sy
 8003848:	e008      	b.n	800385c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800384a:	68f9      	ldr	r1, [r7, #12]
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 ff8f 	bl	8004770 <xQueueSemaphoreTake>
 8003852:	4603      	mov	r3, r0
 8003854:	2b01      	cmp	r3, #1
 8003856:	d001      	beq.n	800385c <osMutexWait+0x8c>
    return osErrorOS;
 8003858:	23ff      	movs	r3, #255	; 0xff
 800385a:	e000      	b.n	800385e <osMutexWait+0x8e>
  }
  
  return osOK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	e000ed04 	.word	0xe000ed04

0800386c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003874:	2300      	movs	r3, #0
 8003876:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8003878:	2300      	movs	r3, #0
 800387a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800387c:	f7ff ff3b 	bl	80036f6 <inHandlerMode>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d016      	beq.n	80038b4 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8003886:	f107 0308 	add.w	r3, r7, #8
 800388a:	4619      	mov	r1, r3
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f000 fedd 	bl	800464c <xQueueGiveFromISR>
 8003892:	4603      	mov	r3, r0
 8003894:	2b01      	cmp	r3, #1
 8003896:	d001      	beq.n	800389c <osMutexRelease+0x30>
      return osErrorOS;
 8003898:	23ff      	movs	r3, #255	; 0xff
 800389a:	e017      	b.n	80038cc <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d013      	beq.n	80038ca <osMutexRelease+0x5e>
 80038a2:	4b0c      	ldr	r3, [pc, #48]	; (80038d4 <osMutexRelease+0x68>)
 80038a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038a8:	601a      	str	r2, [r3, #0]
 80038aa:	f3bf 8f4f 	dsb	sy
 80038ae:	f3bf 8f6f 	isb	sy
 80038b2:	e00a      	b.n	80038ca <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80038b4:	2300      	movs	r3, #0
 80038b6:	2200      	movs	r2, #0
 80038b8:	2100      	movs	r1, #0
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 fdc4 	bl	8004448 <xQueueGenericSend>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d001      	beq.n	80038ca <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80038c6:	23ff      	movs	r3, #255	; 0xff
 80038c8:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80038ca:	68fb      	ldr	r3, [r7, #12]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	e000ed04 	.word	0xe000ed04

080038d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b08a      	sub	sp, #40	; 0x28
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80038e0:	2300      	movs	r3, #0
 80038e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80038e4:	f001 fc3a 	bl	800515c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80038e8:	4b5a      	ldr	r3, [pc, #360]	; (8003a54 <pvPortMalloc+0x17c>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d101      	bne.n	80038f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80038f0:	f000 f916 	bl	8003b20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80038f4:	4b58      	ldr	r3, [pc, #352]	; (8003a58 <pvPortMalloc+0x180>)
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4013      	ands	r3, r2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f040 8090 	bne.w	8003a22 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d01e      	beq.n	8003946 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003908:	2208      	movs	r2, #8
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4413      	add	r3, r2
 800390e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f003 0307 	and.w	r3, r3, #7
 8003916:	2b00      	cmp	r3, #0
 8003918:	d015      	beq.n	8003946 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f023 0307 	bic.w	r3, r3, #7
 8003920:	3308      	adds	r3, #8
 8003922:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f003 0307 	and.w	r3, r3, #7
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00b      	beq.n	8003946 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800392e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003932:	b672      	cpsid	i
 8003934:	f383 8811 	msr	BASEPRI, r3
 8003938:	f3bf 8f6f 	isb	sy
 800393c:	f3bf 8f4f 	dsb	sy
 8003940:	b662      	cpsie	i
 8003942:	617b      	str	r3, [r7, #20]
 8003944:	e7fe      	b.n	8003944 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d06a      	beq.n	8003a22 <pvPortMalloc+0x14a>
 800394c:	4b43      	ldr	r3, [pc, #268]	; (8003a5c <pvPortMalloc+0x184>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	429a      	cmp	r2, r3
 8003954:	d865      	bhi.n	8003a22 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003956:	4b42      	ldr	r3, [pc, #264]	; (8003a60 <pvPortMalloc+0x188>)
 8003958:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800395a:	4b41      	ldr	r3, [pc, #260]	; (8003a60 <pvPortMalloc+0x188>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003960:	e004      	b.n	800396c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003964:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	429a      	cmp	r2, r3
 8003974:	d903      	bls.n	800397e <pvPortMalloc+0xa6>
 8003976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1f1      	bne.n	8003962 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800397e:	4b35      	ldr	r3, [pc, #212]	; (8003a54 <pvPortMalloc+0x17c>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003984:	429a      	cmp	r2, r3
 8003986:	d04c      	beq.n	8003a22 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003988:	6a3b      	ldr	r3, [r7, #32]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2208      	movs	r2, #8
 800398e:	4413      	add	r3, r2
 8003990:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	6a3b      	ldr	r3, [r7, #32]
 8003998:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800399a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	1ad2      	subs	r2, r2, r3
 80039a2:	2308      	movs	r3, #8
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d920      	bls.n	80039ec <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80039aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4413      	add	r3, r2
 80039b0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	f003 0307 	and.w	r3, r3, #7
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00b      	beq.n	80039d4 <pvPortMalloc+0xfc>
 80039bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c0:	b672      	cpsid	i
 80039c2:	f383 8811 	msr	BASEPRI, r3
 80039c6:	f3bf 8f6f 	isb	sy
 80039ca:	f3bf 8f4f 	dsb	sy
 80039ce:	b662      	cpsie	i
 80039d0:	613b      	str	r3, [r7, #16]
 80039d2:	e7fe      	b.n	80039d2 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80039d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	1ad2      	subs	r2, r2, r3
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80039e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80039e6:	69b8      	ldr	r0, [r7, #24]
 80039e8:	f000 f8fc 	bl	8003be4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80039ec:	4b1b      	ldr	r3, [pc, #108]	; (8003a5c <pvPortMalloc+0x184>)
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	4a19      	ldr	r2, [pc, #100]	; (8003a5c <pvPortMalloc+0x184>)
 80039f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80039fa:	4b18      	ldr	r3, [pc, #96]	; (8003a5c <pvPortMalloc+0x184>)
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	4b19      	ldr	r3, [pc, #100]	; (8003a64 <pvPortMalloc+0x18c>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d203      	bcs.n	8003a0e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003a06:	4b15      	ldr	r3, [pc, #84]	; (8003a5c <pvPortMalloc+0x184>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a16      	ldr	r2, [pc, #88]	; (8003a64 <pvPortMalloc+0x18c>)
 8003a0c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	4b11      	ldr	r3, [pc, #68]	; (8003a58 <pvPortMalloc+0x180>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	431a      	orrs	r2, r3
 8003a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1e:	2200      	movs	r2, #0
 8003a20:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003a22:	f001 fba9 	bl	8005178 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	f003 0307 	and.w	r3, r3, #7
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00b      	beq.n	8003a48 <pvPortMalloc+0x170>
 8003a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a34:	b672      	cpsid	i
 8003a36:	f383 8811 	msr	BASEPRI, r3
 8003a3a:	f3bf 8f6f 	isb	sy
 8003a3e:	f3bf 8f4f 	dsb	sy
 8003a42:	b662      	cpsie	i
 8003a44:	60fb      	str	r3, [r7, #12]
 8003a46:	e7fe      	b.n	8003a46 <pvPortMalloc+0x16e>
	return pvReturn;
 8003a48:	69fb      	ldr	r3, [r7, #28]
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3728      	adds	r7, #40	; 0x28
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	20003c94 	.word	0x20003c94
 8003a58:	20003ca0 	.word	0x20003ca0
 8003a5c:	20003c98 	.word	0x20003c98
 8003a60:	20003c8c 	.word	0x20003c8c
 8003a64:	20003c9c 	.word	0x20003c9c

08003a68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d04a      	beq.n	8003b10 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003a7a:	2308      	movs	r3, #8
 8003a7c:	425b      	negs	r3, r3
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	4413      	add	r3, r2
 8003a82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	685a      	ldr	r2, [r3, #4]
 8003a8c:	4b22      	ldr	r3, [pc, #136]	; (8003b18 <vPortFree+0xb0>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4013      	ands	r3, r2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10b      	bne.n	8003aae <vPortFree+0x46>
 8003a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a9a:	b672      	cpsid	i
 8003a9c:	f383 8811 	msr	BASEPRI, r3
 8003aa0:	f3bf 8f6f 	isb	sy
 8003aa4:	f3bf 8f4f 	dsb	sy
 8003aa8:	b662      	cpsie	i
 8003aaa:	60fb      	str	r3, [r7, #12]
 8003aac:	e7fe      	b.n	8003aac <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00b      	beq.n	8003ace <vPortFree+0x66>
 8003ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aba:	b672      	cpsid	i
 8003abc:	f383 8811 	msr	BASEPRI, r3
 8003ac0:	f3bf 8f6f 	isb	sy
 8003ac4:	f3bf 8f4f 	dsb	sy
 8003ac8:	b662      	cpsie	i
 8003aca:	60bb      	str	r3, [r7, #8]
 8003acc:	e7fe      	b.n	8003acc <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	685a      	ldr	r2, [r3, #4]
 8003ad2:	4b11      	ldr	r3, [pc, #68]	; (8003b18 <vPortFree+0xb0>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d019      	beq.n	8003b10 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d115      	bne.n	8003b10 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	685a      	ldr	r2, [r3, #4]
 8003ae8:	4b0b      	ldr	r3, [pc, #44]	; (8003b18 <vPortFree+0xb0>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	43db      	mvns	r3, r3
 8003aee:	401a      	ands	r2, r3
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003af4:	f001 fb32 	bl	800515c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	4b07      	ldr	r3, [pc, #28]	; (8003b1c <vPortFree+0xb4>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4413      	add	r3, r2
 8003b02:	4a06      	ldr	r2, [pc, #24]	; (8003b1c <vPortFree+0xb4>)
 8003b04:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003b06:	6938      	ldr	r0, [r7, #16]
 8003b08:	f000 f86c 	bl	8003be4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003b0c:	f001 fb34 	bl	8005178 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003b10:	bf00      	nop
 8003b12:	3718      	adds	r7, #24
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	20003ca0 	.word	0x20003ca0
 8003b1c:	20003c98 	.word	0x20003c98

08003b20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003b26:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003b2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003b2c:	4b27      	ldr	r3, [pc, #156]	; (8003bcc <prvHeapInit+0xac>)
 8003b2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f003 0307 	and.w	r3, r3, #7
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00c      	beq.n	8003b54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	3307      	adds	r3, #7
 8003b3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f023 0307 	bic.w	r3, r3, #7
 8003b46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003b48:	68ba      	ldr	r2, [r7, #8]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	4a1f      	ldr	r2, [pc, #124]	; (8003bcc <prvHeapInit+0xac>)
 8003b50:	4413      	add	r3, r2
 8003b52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003b58:	4a1d      	ldr	r2, [pc, #116]	; (8003bd0 <prvHeapInit+0xb0>)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003b5e:	4b1c      	ldr	r3, [pc, #112]	; (8003bd0 <prvHeapInit+0xb0>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	4413      	add	r3, r2
 8003b6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003b6c:	2208      	movs	r2, #8
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	1a9b      	subs	r3, r3, r2
 8003b72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f023 0307 	bic.w	r3, r3, #7
 8003b7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	4a15      	ldr	r2, [pc, #84]	; (8003bd4 <prvHeapInit+0xb4>)
 8003b80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003b82:	4b14      	ldr	r3, [pc, #80]	; (8003bd4 <prvHeapInit+0xb4>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2200      	movs	r2, #0
 8003b88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003b8a:	4b12      	ldr	r3, [pc, #72]	; (8003bd4 <prvHeapInit+0xb4>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	1ad2      	subs	r2, r2, r3
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003ba0:	4b0c      	ldr	r3, [pc, #48]	; (8003bd4 <prvHeapInit+0xb4>)
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	4a0a      	ldr	r2, [pc, #40]	; (8003bd8 <prvHeapInit+0xb8>)
 8003bae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	4a09      	ldr	r2, [pc, #36]	; (8003bdc <prvHeapInit+0xbc>)
 8003bb6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003bb8:	4b09      	ldr	r3, [pc, #36]	; (8003be0 <prvHeapInit+0xc0>)
 8003bba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003bbe:	601a      	str	r2, [r3, #0]
}
 8003bc0:	bf00      	nop
 8003bc2:	3714      	adds	r7, #20
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr
 8003bcc:	2000008c 	.word	0x2000008c
 8003bd0:	20003c8c 	.word	0x20003c8c
 8003bd4:	20003c94 	.word	0x20003c94
 8003bd8:	20003c9c 	.word	0x20003c9c
 8003bdc:	20003c98 	.word	0x20003c98
 8003be0:	20003ca0 	.word	0x20003ca0

08003be4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003bec:	4b28      	ldr	r3, [pc, #160]	; (8003c90 <prvInsertBlockIntoFreeList+0xac>)
 8003bee:	60fb      	str	r3, [r7, #12]
 8003bf0:	e002      	b.n	8003bf8 <prvInsertBlockIntoFreeList+0x14>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	60fb      	str	r3, [r7, #12]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d8f7      	bhi.n	8003bf2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	68ba      	ldr	r2, [r7, #8]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d108      	bne.n	8003c26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	441a      	add	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	68ba      	ldr	r2, [r7, #8]
 8003c30:	441a      	add	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d118      	bne.n	8003c6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	4b15      	ldr	r3, [pc, #84]	; (8003c94 <prvInsertBlockIntoFreeList+0xb0>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d00d      	beq.n	8003c62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685a      	ldr	r2, [r3, #4]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	441a      	add	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	e008      	b.n	8003c74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003c62:	4b0c      	ldr	r3, [pc, #48]	; (8003c94 <prvInsertBlockIntoFreeList+0xb0>)
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	601a      	str	r2, [r3, #0]
 8003c6a:	e003      	b.n	8003c74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d002      	beq.n	8003c82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c82:	bf00      	nop
 8003c84:	3714      	adds	r7, #20
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	20003c8c 	.word	0x20003c8c
 8003c94:	20003c94 	.word	0x20003c94

08003c98 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f103 0208 	add.w	r2, r3, #8
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f04f 32ff 	mov.w	r2, #4294967295
 8003cb0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f103 0208 	add.w	r2, r3, #8
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f103 0208 	add.w	r2, r3, #8
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003ce6:	bf00      	nop
 8003ce8:	370c      	adds	r7, #12
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b085      	sub	sp, #20
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
 8003cfa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	689a      	ldr	r2, [r3, #8]
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	683a      	ldr	r2, [r7, #0]
 8003d16:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	683a      	ldr	r2, [r7, #0]
 8003d1c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	1c5a      	adds	r2, r3, #1
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	601a      	str	r2, [r3, #0]
}
 8003d2e:	bf00      	nop
 8003d30:	3714      	adds	r7, #20
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b085      	sub	sp, #20
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
 8003d42:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d50:	d103      	bne.n	8003d5a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	60fb      	str	r3, [r7, #12]
 8003d58:	e00c      	b.n	8003d74 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	3308      	adds	r3, #8
 8003d5e:	60fb      	str	r3, [r7, #12]
 8003d60:	e002      	b.n	8003d68 <vListInsert+0x2e>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	60fb      	str	r3, [r7, #12]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68ba      	ldr	r2, [r7, #8]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d2f6      	bcs.n	8003d62 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	685a      	ldr	r2, [r3, #4]
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	683a      	ldr	r2, [r7, #0]
 8003d82:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	683a      	ldr	r2, [r7, #0]
 8003d8e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	1c5a      	adds	r2, r3, #1
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	601a      	str	r2, [r3, #0]
}
 8003da0:	bf00      	nop
 8003da2:	3714      	adds	r7, #20
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	6892      	ldr	r2, [r2, #8]
 8003dc2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	6852      	ldr	r2, [r2, #4]
 8003dcc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d103      	bne.n	8003de0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689a      	ldr	r2, [r3, #8]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	1e5a      	subs	r2, r3, #1
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3714      	adds	r7, #20
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003e00:	b480      	push	{r7}
 8003e02:	b085      	sub	sp, #20
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	3b04      	subs	r3, #4
 8003e10:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	3b04      	subs	r3, #4
 8003e1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	f023 0201 	bic.w	r2, r3, #1
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	3b04      	subs	r3, #4
 8003e2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003e30:	4a0c      	ldr	r2, [pc, #48]	; (8003e64 <pxPortInitialiseStack+0x64>)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	3b14      	subs	r3, #20
 8003e3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	3b04      	subs	r3, #4
 8003e46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f06f 0202 	mvn.w	r2, #2
 8003e4e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	3b20      	subs	r3, #32
 8003e54:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003e56:	68fb      	ldr	r3, [r7, #12]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3714      	adds	r7, #20
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr
 8003e64:	08003e69 	.word	0x08003e69

08003e68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003e72:	4b13      	ldr	r3, [pc, #76]	; (8003ec0 <prvTaskExitError+0x58>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e7a:	d00b      	beq.n	8003e94 <prvTaskExitError+0x2c>
 8003e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e80:	b672      	cpsid	i
 8003e82:	f383 8811 	msr	BASEPRI, r3
 8003e86:	f3bf 8f6f 	isb	sy
 8003e8a:	f3bf 8f4f 	dsb	sy
 8003e8e:	b662      	cpsie	i
 8003e90:	60fb      	str	r3, [r7, #12]
 8003e92:	e7fe      	b.n	8003e92 <prvTaskExitError+0x2a>
 8003e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e98:	b672      	cpsid	i
 8003e9a:	f383 8811 	msr	BASEPRI, r3
 8003e9e:	f3bf 8f6f 	isb	sy
 8003ea2:	f3bf 8f4f 	dsb	sy
 8003ea6:	b662      	cpsie	i
 8003ea8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003eaa:	bf00      	nop
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d0fc      	beq.n	8003eac <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003eb2:	bf00      	nop
 8003eb4:	3714      	adds	r7, #20
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	20000004 	.word	0x20000004
	...

08003ed0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003ed0:	4b07      	ldr	r3, [pc, #28]	; (8003ef0 <pxCurrentTCBConst2>)
 8003ed2:	6819      	ldr	r1, [r3, #0]
 8003ed4:	6808      	ldr	r0, [r1, #0]
 8003ed6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eda:	f380 8809 	msr	PSP, r0
 8003ede:	f3bf 8f6f 	isb	sy
 8003ee2:	f04f 0000 	mov.w	r0, #0
 8003ee6:	f380 8811 	msr	BASEPRI, r0
 8003eea:	4770      	bx	lr
 8003eec:	f3af 8000 	nop.w

08003ef0 <pxCurrentTCBConst2>:
 8003ef0:	20003cac 	.word	0x20003cac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003ef4:	bf00      	nop
 8003ef6:	bf00      	nop

08003ef8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003ef8:	4808      	ldr	r0, [pc, #32]	; (8003f1c <prvPortStartFirstTask+0x24>)
 8003efa:	6800      	ldr	r0, [r0, #0]
 8003efc:	6800      	ldr	r0, [r0, #0]
 8003efe:	f380 8808 	msr	MSP, r0
 8003f02:	f04f 0000 	mov.w	r0, #0
 8003f06:	f380 8814 	msr	CONTROL, r0
 8003f0a:	b662      	cpsie	i
 8003f0c:	b661      	cpsie	f
 8003f0e:	f3bf 8f4f 	dsb	sy
 8003f12:	f3bf 8f6f 	isb	sy
 8003f16:	df00      	svc	0
 8003f18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003f1a:	bf00      	nop
 8003f1c:	e000ed08 	.word	0xe000ed08

08003f20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003f26:	4b36      	ldr	r3, [pc, #216]	; (8004000 <xPortStartScheduler+0xe0>)
 8003f28:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	22ff      	movs	r2, #255	; 0xff
 8003f36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003f40:	78fb      	ldrb	r3, [r7, #3]
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003f48:	b2da      	uxtb	r2, r3
 8003f4a:	4b2e      	ldr	r3, [pc, #184]	; (8004004 <xPortStartScheduler+0xe4>)
 8003f4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003f4e:	4b2e      	ldr	r3, [pc, #184]	; (8004008 <xPortStartScheduler+0xe8>)
 8003f50:	2207      	movs	r2, #7
 8003f52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f54:	e009      	b.n	8003f6a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003f56:	4b2c      	ldr	r3, [pc, #176]	; (8004008 <xPortStartScheduler+0xe8>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	4a2a      	ldr	r2, [pc, #168]	; (8004008 <xPortStartScheduler+0xe8>)
 8003f5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003f60:	78fb      	ldrb	r3, [r7, #3]
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f6a:	78fb      	ldrb	r3, [r7, #3]
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f72:	2b80      	cmp	r3, #128	; 0x80
 8003f74:	d0ef      	beq.n	8003f56 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003f76:	4b24      	ldr	r3, [pc, #144]	; (8004008 <xPortStartScheduler+0xe8>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f1c3 0307 	rsb	r3, r3, #7
 8003f7e:	2b04      	cmp	r3, #4
 8003f80:	d00b      	beq.n	8003f9a <xPortStartScheduler+0x7a>
 8003f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f86:	b672      	cpsid	i
 8003f88:	f383 8811 	msr	BASEPRI, r3
 8003f8c:	f3bf 8f6f 	isb	sy
 8003f90:	f3bf 8f4f 	dsb	sy
 8003f94:	b662      	cpsie	i
 8003f96:	60bb      	str	r3, [r7, #8]
 8003f98:	e7fe      	b.n	8003f98 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003f9a:	4b1b      	ldr	r3, [pc, #108]	; (8004008 <xPortStartScheduler+0xe8>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	021b      	lsls	r3, r3, #8
 8003fa0:	4a19      	ldr	r2, [pc, #100]	; (8004008 <xPortStartScheduler+0xe8>)
 8003fa2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003fa4:	4b18      	ldr	r3, [pc, #96]	; (8004008 <xPortStartScheduler+0xe8>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003fac:	4a16      	ldr	r2, [pc, #88]	; (8004008 <xPortStartScheduler+0xe8>)
 8003fae:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	b2da      	uxtb	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003fb8:	4b14      	ldr	r3, [pc, #80]	; (800400c <xPortStartScheduler+0xec>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a13      	ldr	r2, [pc, #76]	; (800400c <xPortStartScheduler+0xec>)
 8003fbe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003fc2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003fc4:	4b11      	ldr	r3, [pc, #68]	; (800400c <xPortStartScheduler+0xec>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a10      	ldr	r2, [pc, #64]	; (800400c <xPortStartScheduler+0xec>)
 8003fca:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003fce:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003fd0:	f000 f8d4 	bl	800417c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003fd4:	4b0e      	ldr	r3, [pc, #56]	; (8004010 <xPortStartScheduler+0xf0>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003fda:	f000 f8f3 	bl	80041c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003fde:	4b0d      	ldr	r3, [pc, #52]	; (8004014 <xPortStartScheduler+0xf4>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a0c      	ldr	r2, [pc, #48]	; (8004014 <xPortStartScheduler+0xf4>)
 8003fe4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003fe8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003fea:	f7ff ff85 	bl	8003ef8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003fee:	f001 fa1f 	bl	8005430 <vTaskSwitchContext>
	prvTaskExitError();
 8003ff2:	f7ff ff39 	bl	8003e68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	e000e400 	.word	0xe000e400
 8004004:	20003ca4 	.word	0x20003ca4
 8004008:	20003ca8 	.word	0x20003ca8
 800400c:	e000ed20 	.word	0xe000ed20
 8004010:	20000004 	.word	0x20000004
 8004014:	e000ef34 	.word	0xe000ef34

08004018 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004022:	b672      	cpsid	i
 8004024:	f383 8811 	msr	BASEPRI, r3
 8004028:	f3bf 8f6f 	isb	sy
 800402c:	f3bf 8f4f 	dsb	sy
 8004030:	b662      	cpsie	i
 8004032:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004034:	4b0f      	ldr	r3, [pc, #60]	; (8004074 <vPortEnterCritical+0x5c>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	3301      	adds	r3, #1
 800403a:	4a0e      	ldr	r2, [pc, #56]	; (8004074 <vPortEnterCritical+0x5c>)
 800403c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800403e:	4b0d      	ldr	r3, [pc, #52]	; (8004074 <vPortEnterCritical+0x5c>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2b01      	cmp	r3, #1
 8004044:	d110      	bne.n	8004068 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004046:	4b0c      	ldr	r3, [pc, #48]	; (8004078 <vPortEnterCritical+0x60>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	b2db      	uxtb	r3, r3
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00b      	beq.n	8004068 <vPortEnterCritical+0x50>
 8004050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004054:	b672      	cpsid	i
 8004056:	f383 8811 	msr	BASEPRI, r3
 800405a:	f3bf 8f6f 	isb	sy
 800405e:	f3bf 8f4f 	dsb	sy
 8004062:	b662      	cpsie	i
 8004064:	603b      	str	r3, [r7, #0]
 8004066:	e7fe      	b.n	8004066 <vPortEnterCritical+0x4e>
	}
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr
 8004074:	20000004 	.word	0x20000004
 8004078:	e000ed04 	.word	0xe000ed04

0800407c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004082:	4b12      	ldr	r3, [pc, #72]	; (80040cc <vPortExitCritical+0x50>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10b      	bne.n	80040a2 <vPortExitCritical+0x26>
 800408a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408e:	b672      	cpsid	i
 8004090:	f383 8811 	msr	BASEPRI, r3
 8004094:	f3bf 8f6f 	isb	sy
 8004098:	f3bf 8f4f 	dsb	sy
 800409c:	b662      	cpsie	i
 800409e:	607b      	str	r3, [r7, #4]
 80040a0:	e7fe      	b.n	80040a0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 80040a2:	4b0a      	ldr	r3, [pc, #40]	; (80040cc <vPortExitCritical+0x50>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	3b01      	subs	r3, #1
 80040a8:	4a08      	ldr	r2, [pc, #32]	; (80040cc <vPortExitCritical+0x50>)
 80040aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80040ac:	4b07      	ldr	r3, [pc, #28]	; (80040cc <vPortExitCritical+0x50>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d104      	bne.n	80040be <vPortExitCritical+0x42>
 80040b4:	2300      	movs	r3, #0
 80040b6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80040be:	bf00      	nop
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	20000004 	.word	0x20000004

080040d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80040d0:	f3ef 8009 	mrs	r0, PSP
 80040d4:	f3bf 8f6f 	isb	sy
 80040d8:	4b15      	ldr	r3, [pc, #84]	; (8004130 <pxCurrentTCBConst>)
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	f01e 0f10 	tst.w	lr, #16
 80040e0:	bf08      	it	eq
 80040e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80040e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040ea:	6010      	str	r0, [r2, #0]
 80040ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80040f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80040f4:	b672      	cpsid	i
 80040f6:	f380 8811 	msr	BASEPRI, r0
 80040fa:	f3bf 8f4f 	dsb	sy
 80040fe:	f3bf 8f6f 	isb	sy
 8004102:	b662      	cpsie	i
 8004104:	f001 f994 	bl	8005430 <vTaskSwitchContext>
 8004108:	f04f 0000 	mov.w	r0, #0
 800410c:	f380 8811 	msr	BASEPRI, r0
 8004110:	bc09      	pop	{r0, r3}
 8004112:	6819      	ldr	r1, [r3, #0]
 8004114:	6808      	ldr	r0, [r1, #0]
 8004116:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800411a:	f01e 0f10 	tst.w	lr, #16
 800411e:	bf08      	it	eq
 8004120:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004124:	f380 8809 	msr	PSP, r0
 8004128:	f3bf 8f6f 	isb	sy
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop

08004130 <pxCurrentTCBConst>:
 8004130:	20003cac 	.word	0x20003cac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004134:	bf00      	nop
 8004136:	bf00      	nop

08004138 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
	__asm volatile
 800413e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004142:	b672      	cpsid	i
 8004144:	f383 8811 	msr	BASEPRI, r3
 8004148:	f3bf 8f6f 	isb	sy
 800414c:	f3bf 8f4f 	dsb	sy
 8004150:	b662      	cpsie	i
 8004152:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004154:	f001 f8ae 	bl	80052b4 <xTaskIncrementTick>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d003      	beq.n	8004166 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800415e:	4b06      	ldr	r3, [pc, #24]	; (8004178 <SysTick_Handler+0x40>)
 8004160:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004164:	601a      	str	r2, [r3, #0]
 8004166:	2300      	movs	r3, #0
 8004168:	603b      	str	r3, [r7, #0]
	__asm volatile
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004170:	bf00      	nop
 8004172:	3708      	adds	r7, #8
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	e000ed04 	.word	0xe000ed04

0800417c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800417c:	b480      	push	{r7}
 800417e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004180:	4b0b      	ldr	r3, [pc, #44]	; (80041b0 <vPortSetupTimerInterrupt+0x34>)
 8004182:	2200      	movs	r2, #0
 8004184:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004186:	4b0b      	ldr	r3, [pc, #44]	; (80041b4 <vPortSetupTimerInterrupt+0x38>)
 8004188:	2200      	movs	r2, #0
 800418a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800418c:	4b0a      	ldr	r3, [pc, #40]	; (80041b8 <vPortSetupTimerInterrupt+0x3c>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a0a      	ldr	r2, [pc, #40]	; (80041bc <vPortSetupTimerInterrupt+0x40>)
 8004192:	fba2 2303 	umull	r2, r3, r2, r3
 8004196:	099b      	lsrs	r3, r3, #6
 8004198:	4a09      	ldr	r2, [pc, #36]	; (80041c0 <vPortSetupTimerInterrupt+0x44>)
 800419a:	3b01      	subs	r3, #1
 800419c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800419e:	4b04      	ldr	r3, [pc, #16]	; (80041b0 <vPortSetupTimerInterrupt+0x34>)
 80041a0:	2207      	movs	r2, #7
 80041a2:	601a      	str	r2, [r3, #0]
}
 80041a4:	bf00      	nop
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	e000e010 	.word	0xe000e010
 80041b4:	e000e018 	.word	0xe000e018
 80041b8:	20000008 	.word	0x20000008
 80041bc:	10624dd3 	.word	0x10624dd3
 80041c0:	e000e014 	.word	0xe000e014

080041c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80041c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80041d4 <vPortEnableVFP+0x10>
 80041c8:	6801      	ldr	r1, [r0, #0]
 80041ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80041ce:	6001      	str	r1, [r0, #0]
 80041d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80041d2:	bf00      	nop
 80041d4:	e000ed88 	.word	0xe000ed88

080041d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80041de:	f3ef 8305 	mrs	r3, IPSR
 80041e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2b0f      	cmp	r3, #15
 80041e8:	d915      	bls.n	8004216 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80041ea:	4a18      	ldr	r2, [pc, #96]	; (800424c <vPortValidateInterruptPriority+0x74>)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	4413      	add	r3, r2
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80041f4:	4b16      	ldr	r3, [pc, #88]	; (8004250 <vPortValidateInterruptPriority+0x78>)
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	7afa      	ldrb	r2, [r7, #11]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d20b      	bcs.n	8004216 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80041fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004202:	b672      	cpsid	i
 8004204:	f383 8811 	msr	BASEPRI, r3
 8004208:	f3bf 8f6f 	isb	sy
 800420c:	f3bf 8f4f 	dsb	sy
 8004210:	b662      	cpsie	i
 8004212:	607b      	str	r3, [r7, #4]
 8004214:	e7fe      	b.n	8004214 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004216:	4b0f      	ldr	r3, [pc, #60]	; (8004254 <vPortValidateInterruptPriority+0x7c>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800421e:	4b0e      	ldr	r3, [pc, #56]	; (8004258 <vPortValidateInterruptPriority+0x80>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	429a      	cmp	r2, r3
 8004224:	d90b      	bls.n	800423e <vPortValidateInterruptPriority+0x66>
 8004226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422a:	b672      	cpsid	i
 800422c:	f383 8811 	msr	BASEPRI, r3
 8004230:	f3bf 8f6f 	isb	sy
 8004234:	f3bf 8f4f 	dsb	sy
 8004238:	b662      	cpsie	i
 800423a:	603b      	str	r3, [r7, #0]
 800423c:	e7fe      	b.n	800423c <vPortValidateInterruptPriority+0x64>
	}
 800423e:	bf00      	nop
 8004240:	3714      	adds	r7, #20
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	e000e3f0 	.word	0xe000e3f0
 8004250:	20003ca4 	.word	0x20003ca4
 8004254:	e000ed0c 	.word	0xe000ed0c
 8004258:	20003ca8 	.word	0x20003ca8

0800425c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d10b      	bne.n	8004288 <xQueueGenericReset+0x2c>
 8004270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004274:	b672      	cpsid	i
 8004276:	f383 8811 	msr	BASEPRI, r3
 800427a:	f3bf 8f6f 	isb	sy
 800427e:	f3bf 8f4f 	dsb	sy
 8004282:	b662      	cpsie	i
 8004284:	60bb      	str	r3, [r7, #8]
 8004286:	e7fe      	b.n	8004286 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8004288:	f7ff fec6 	bl	8004018 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004294:	68f9      	ldr	r1, [r7, #12]
 8004296:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004298:	fb01 f303 	mul.w	r3, r1, r3
 800429c:	441a      	add	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b8:	3b01      	subs	r3, #1
 80042ba:	68f9      	ldr	r1, [r7, #12]
 80042bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80042be:	fb01 f303 	mul.w	r3, r1, r3
 80042c2:	441a      	add	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	22ff      	movs	r2, #255	; 0xff
 80042cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	22ff      	movs	r2, #255	; 0xff
 80042d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d114      	bne.n	8004308 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d01a      	beq.n	800431c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	3310      	adds	r3, #16
 80042ea:	4618      	mov	r0, r3
 80042ec:	f001 f922 	bl	8005534 <xTaskRemoveFromEventList>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d012      	beq.n	800431c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80042f6:	4b0d      	ldr	r3, [pc, #52]	; (800432c <xQueueGenericReset+0xd0>)
 80042f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042fc:	601a      	str	r2, [r3, #0]
 80042fe:	f3bf 8f4f 	dsb	sy
 8004302:	f3bf 8f6f 	isb	sy
 8004306:	e009      	b.n	800431c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	3310      	adds	r3, #16
 800430c:	4618      	mov	r0, r3
 800430e:	f7ff fcc3 	bl	8003c98 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	3324      	adds	r3, #36	; 0x24
 8004316:	4618      	mov	r0, r3
 8004318:	f7ff fcbe 	bl	8003c98 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800431c:	f7ff feae 	bl	800407c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004320:	2301      	movs	r3, #1
}
 8004322:	4618      	mov	r0, r3
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	e000ed04 	.word	0xe000ed04

08004330 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004330:	b580      	push	{r7, lr}
 8004332:	b08a      	sub	sp, #40	; 0x28
 8004334:	af02      	add	r7, sp, #8
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	4613      	mov	r3, r2
 800433c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d10b      	bne.n	800435c <xQueueGenericCreate+0x2c>
 8004344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004348:	b672      	cpsid	i
 800434a:	f383 8811 	msr	BASEPRI, r3
 800434e:	f3bf 8f6f 	isb	sy
 8004352:	f3bf 8f4f 	dsb	sy
 8004356:	b662      	cpsie	i
 8004358:	613b      	str	r3, [r7, #16]
 800435a:	e7fe      	b.n	800435a <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d102      	bne.n	8004368 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004362:	2300      	movs	r3, #0
 8004364:	61fb      	str	r3, [r7, #28]
 8004366:	e004      	b.n	8004372 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	68ba      	ldr	r2, [r7, #8]
 800436c:	fb02 f303 	mul.w	r3, r2, r3
 8004370:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	3348      	adds	r3, #72	; 0x48
 8004376:	4618      	mov	r0, r3
 8004378:	f7ff faae 	bl	80038d8 <pvPortMalloc>
 800437c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00b      	beq.n	800439c <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	3348      	adds	r3, #72	; 0x48
 8004388:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800438a:	79fa      	ldrb	r2, [r7, #7]
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	9300      	str	r3, [sp, #0]
 8004390:	4613      	mov	r3, r2
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	68b9      	ldr	r1, [r7, #8]
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f000 f805 	bl	80043a6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800439c:	69bb      	ldr	r3, [r7, #24]
	}
 800439e:	4618      	mov	r0, r3
 80043a0:	3720      	adds	r7, #32
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b084      	sub	sp, #16
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	60f8      	str	r0, [r7, #12]
 80043ae:	60b9      	str	r1, [r7, #8]
 80043b0:	607a      	str	r2, [r7, #4]
 80043b2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d103      	bne.n	80043c2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	69ba      	ldr	r2, [r7, #24]
 80043be:	601a      	str	r2, [r3, #0]
 80043c0:	e002      	b.n	80043c8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	68ba      	ldr	r2, [r7, #8]
 80043d2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80043d4:	2101      	movs	r1, #1
 80043d6:	69b8      	ldr	r0, [r7, #24]
 80043d8:	f7ff ff40 	bl	800425c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80043dc:	bf00      	nop
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00e      	beq.n	8004410 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004404:	2300      	movs	r3, #0
 8004406:	2200      	movs	r2, #0
 8004408:	2100      	movs	r1, #0
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 f81c 	bl	8004448 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004410:	bf00      	nop
 8004412:	3708      	adds	r7, #8
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af00      	add	r7, sp, #0
 800441e:	4603      	mov	r3, r0
 8004420:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004422:	2301      	movs	r3, #1
 8004424:	617b      	str	r3, [r7, #20]
 8004426:	2300      	movs	r3, #0
 8004428:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800442a:	79fb      	ldrb	r3, [r7, #7]
 800442c:	461a      	mov	r2, r3
 800442e:	6939      	ldr	r1, [r7, #16]
 8004430:	6978      	ldr	r0, [r7, #20]
 8004432:	f7ff ff7d 	bl	8004330 <xQueueGenericCreate>
 8004436:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f7ff ffd3 	bl	80043e4 <prvInitialiseMutex>

		return pxNewQueue;
 800443e:	68fb      	ldr	r3, [r7, #12]
	}
 8004440:	4618      	mov	r0, r3
 8004442:	3718      	adds	r7, #24
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b08e      	sub	sp, #56	; 0x38
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
 8004454:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004456:	2300      	movs	r3, #0
 8004458:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800445e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004460:	2b00      	cmp	r3, #0
 8004462:	d10b      	bne.n	800447c <xQueueGenericSend+0x34>
 8004464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004468:	b672      	cpsid	i
 800446a:	f383 8811 	msr	BASEPRI, r3
 800446e:	f3bf 8f6f 	isb	sy
 8004472:	f3bf 8f4f 	dsb	sy
 8004476:	b662      	cpsie	i
 8004478:	62bb      	str	r3, [r7, #40]	; 0x28
 800447a:	e7fe      	b.n	800447a <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d103      	bne.n	800448a <xQueueGenericSend+0x42>
 8004482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <xQueueGenericSend+0x46>
 800448a:	2301      	movs	r3, #1
 800448c:	e000      	b.n	8004490 <xQueueGenericSend+0x48>
 800448e:	2300      	movs	r3, #0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d10b      	bne.n	80044ac <xQueueGenericSend+0x64>
 8004494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004498:	b672      	cpsid	i
 800449a:	f383 8811 	msr	BASEPRI, r3
 800449e:	f3bf 8f6f 	isb	sy
 80044a2:	f3bf 8f4f 	dsb	sy
 80044a6:	b662      	cpsie	i
 80044a8:	627b      	str	r3, [r7, #36]	; 0x24
 80044aa:	e7fe      	b.n	80044aa <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d103      	bne.n	80044ba <xQueueGenericSend+0x72>
 80044b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d101      	bne.n	80044be <xQueueGenericSend+0x76>
 80044ba:	2301      	movs	r3, #1
 80044bc:	e000      	b.n	80044c0 <xQueueGenericSend+0x78>
 80044be:	2300      	movs	r3, #0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d10b      	bne.n	80044dc <xQueueGenericSend+0x94>
 80044c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c8:	b672      	cpsid	i
 80044ca:	f383 8811 	msr	BASEPRI, r3
 80044ce:	f3bf 8f6f 	isb	sy
 80044d2:	f3bf 8f4f 	dsb	sy
 80044d6:	b662      	cpsie	i
 80044d8:	623b      	str	r3, [r7, #32]
 80044da:	e7fe      	b.n	80044da <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044dc:	f001 f9ce 	bl	800587c <xTaskGetSchedulerState>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d102      	bne.n	80044ec <xQueueGenericSend+0xa4>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d101      	bne.n	80044f0 <xQueueGenericSend+0xa8>
 80044ec:	2301      	movs	r3, #1
 80044ee:	e000      	b.n	80044f2 <xQueueGenericSend+0xaa>
 80044f0:	2300      	movs	r3, #0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d10b      	bne.n	800450e <xQueueGenericSend+0xc6>
 80044f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044fa:	b672      	cpsid	i
 80044fc:	f383 8811 	msr	BASEPRI, r3
 8004500:	f3bf 8f6f 	isb	sy
 8004504:	f3bf 8f4f 	dsb	sy
 8004508:	b662      	cpsie	i
 800450a:	61fb      	str	r3, [r7, #28]
 800450c:	e7fe      	b.n	800450c <xQueueGenericSend+0xc4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800450e:	f7ff fd83 	bl	8004018 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004514:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800451a:	429a      	cmp	r2, r3
 800451c:	d302      	bcc.n	8004524 <xQueueGenericSend+0xdc>
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	2b02      	cmp	r3, #2
 8004522:	d129      	bne.n	8004578 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004524:	683a      	ldr	r2, [r7, #0]
 8004526:	68b9      	ldr	r1, [r7, #8]
 8004528:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800452a:	f000 facc 	bl	8004ac6 <prvCopyDataToQueue>
 800452e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004534:	2b00      	cmp	r3, #0
 8004536:	d010      	beq.n	800455a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453a:	3324      	adds	r3, #36	; 0x24
 800453c:	4618      	mov	r0, r3
 800453e:	f000 fff9 	bl	8005534 <xTaskRemoveFromEventList>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d013      	beq.n	8004570 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004548:	4b3f      	ldr	r3, [pc, #252]	; (8004648 <xQueueGenericSend+0x200>)
 800454a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800454e:	601a      	str	r2, [r3, #0]
 8004550:	f3bf 8f4f 	dsb	sy
 8004554:	f3bf 8f6f 	isb	sy
 8004558:	e00a      	b.n	8004570 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800455a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800455c:	2b00      	cmp	r3, #0
 800455e:	d007      	beq.n	8004570 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004560:	4b39      	ldr	r3, [pc, #228]	; (8004648 <xQueueGenericSend+0x200>)
 8004562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004566:	601a      	str	r2, [r3, #0]
 8004568:	f3bf 8f4f 	dsb	sy
 800456c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004570:	f7ff fd84 	bl	800407c <vPortExitCritical>
				return pdPASS;
 8004574:	2301      	movs	r3, #1
 8004576:	e063      	b.n	8004640 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d103      	bne.n	8004586 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800457e:	f7ff fd7d 	bl	800407c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004582:	2300      	movs	r3, #0
 8004584:	e05c      	b.n	8004640 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004588:	2b00      	cmp	r3, #0
 800458a:	d106      	bne.n	800459a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800458c:	f107 0314 	add.w	r3, r7, #20
 8004590:	4618      	mov	r0, r3
 8004592:	f001 f833 	bl	80055fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004596:	2301      	movs	r3, #1
 8004598:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800459a:	f7ff fd6f 	bl	800407c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800459e:	f000 fddd 	bl	800515c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80045a2:	f7ff fd39 	bl	8004018 <vPortEnterCritical>
 80045a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045ac:	b25b      	sxtb	r3, r3
 80045ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b2:	d103      	bne.n	80045bc <xQueueGenericSend+0x174>
 80045b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045c2:	b25b      	sxtb	r3, r3
 80045c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c8:	d103      	bne.n	80045d2 <xQueueGenericSend+0x18a>
 80045ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045d2:	f7ff fd53 	bl	800407c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80045d6:	1d3a      	adds	r2, r7, #4
 80045d8:	f107 0314 	add.w	r3, r7, #20
 80045dc:	4611      	mov	r1, r2
 80045de:	4618      	mov	r0, r3
 80045e0:	f001 f822 	bl	8005628 <xTaskCheckForTimeOut>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d124      	bne.n	8004634 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80045ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045ec:	f000 fb63 	bl	8004cb6 <prvIsQueueFull>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d018      	beq.n	8004628 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80045f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f8:	3310      	adds	r3, #16
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	4611      	mov	r1, r2
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 ff72 	bl	80054e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004604:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004606:	f000 faee 	bl	8004be6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800460a:	f000 fdb5 	bl	8005178 <xTaskResumeAll>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	f47f af7c 	bne.w	800450e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004616:	4b0c      	ldr	r3, [pc, #48]	; (8004648 <xQueueGenericSend+0x200>)
 8004618:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800461c:	601a      	str	r2, [r3, #0]
 800461e:	f3bf 8f4f 	dsb	sy
 8004622:	f3bf 8f6f 	isb	sy
 8004626:	e772      	b.n	800450e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004628:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800462a:	f000 fadc 	bl	8004be6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800462e:	f000 fda3 	bl	8005178 <xTaskResumeAll>
 8004632:	e76c      	b.n	800450e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004634:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004636:	f000 fad6 	bl	8004be6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800463a:	f000 fd9d 	bl	8005178 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800463e:	2300      	movs	r3, #0
		}
	}
}
 8004640:	4618      	mov	r0, r3
 8004642:	3738      	adds	r7, #56	; 0x38
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	e000ed04 	.word	0xe000ed04

0800464c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b08e      	sub	sp, #56	; 0x38
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800465a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465c:	2b00      	cmp	r3, #0
 800465e:	d10b      	bne.n	8004678 <xQueueGiveFromISR+0x2c>
 8004660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004664:	b672      	cpsid	i
 8004666:	f383 8811 	msr	BASEPRI, r3
 800466a:	f3bf 8f6f 	isb	sy
 800466e:	f3bf 8f4f 	dsb	sy
 8004672:	b662      	cpsie	i
 8004674:	623b      	str	r3, [r7, #32]
 8004676:	e7fe      	b.n	8004676 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800467a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00b      	beq.n	8004698 <xQueueGiveFromISR+0x4c>
 8004680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004684:	b672      	cpsid	i
 8004686:	f383 8811 	msr	BASEPRI, r3
 800468a:	f3bf 8f6f 	isb	sy
 800468e:	f3bf 8f4f 	dsb	sy
 8004692:	b662      	cpsie	i
 8004694:	61fb      	str	r3, [r7, #28]
 8004696:	e7fe      	b.n	8004696 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8004698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d103      	bne.n	80046a8 <xQueueGiveFromISR+0x5c>
 80046a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d101      	bne.n	80046ac <xQueueGiveFromISR+0x60>
 80046a8:	2301      	movs	r3, #1
 80046aa:	e000      	b.n	80046ae <xQueueGiveFromISR+0x62>
 80046ac:	2300      	movs	r3, #0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10b      	bne.n	80046ca <xQueueGiveFromISR+0x7e>
 80046b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b6:	b672      	cpsid	i
 80046b8:	f383 8811 	msr	BASEPRI, r3
 80046bc:	f3bf 8f6f 	isb	sy
 80046c0:	f3bf 8f4f 	dsb	sy
 80046c4:	b662      	cpsie	i
 80046c6:	61bb      	str	r3, [r7, #24]
 80046c8:	e7fe      	b.n	80046c8 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80046ca:	f7ff fd85 	bl	80041d8 <vPortValidateInterruptPriority>
	__asm volatile
 80046ce:	f3ef 8211 	mrs	r2, BASEPRI
 80046d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d6:	b672      	cpsid	i
 80046d8:	f383 8811 	msr	BASEPRI, r3
 80046dc:	f3bf 8f6f 	isb	sy
 80046e0:	f3bf 8f4f 	dsb	sy
 80046e4:	b662      	cpsie	i
 80046e6:	617a      	str	r2, [r7, #20]
 80046e8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80046ea:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80046ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80046f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d22b      	bcs.n	8004756 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80046fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004700:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004704:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800470a:	1c5a      	adds	r2, r3, #1
 800470c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800470e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004710:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004718:	d112      	bne.n	8004740 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800471a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800471c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471e:	2b00      	cmp	r3, #0
 8004720:	d016      	beq.n	8004750 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004724:	3324      	adds	r3, #36	; 0x24
 8004726:	4618      	mov	r0, r3
 8004728:	f000 ff04 	bl	8005534 <xTaskRemoveFromEventList>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00e      	beq.n	8004750 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00b      	beq.n	8004750 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	2201      	movs	r2, #1
 800473c:	601a      	str	r2, [r3, #0]
 800473e:	e007      	b.n	8004750 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004740:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004744:	3301      	adds	r3, #1
 8004746:	b2db      	uxtb	r3, r3
 8004748:	b25a      	sxtb	r2, r3
 800474a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004750:	2301      	movs	r3, #1
 8004752:	637b      	str	r3, [r7, #52]	; 0x34
 8004754:	e001      	b.n	800475a <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004756:	2300      	movs	r3, #0
 8004758:	637b      	str	r3, [r7, #52]	; 0x34
 800475a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800475c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004766:	4618      	mov	r0, r3
 8004768:	3738      	adds	r7, #56	; 0x38
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
	...

08004770 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b08e      	sub	sp, #56	; 0x38
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800477a:	2300      	movs	r3, #0
 800477c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004782:	2300      	movs	r3, #0
 8004784:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10b      	bne.n	80047a4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800478c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004790:	b672      	cpsid	i
 8004792:	f383 8811 	msr	BASEPRI, r3
 8004796:	f3bf 8f6f 	isb	sy
 800479a:	f3bf 8f4f 	dsb	sy
 800479e:	b662      	cpsie	i
 80047a0:	623b      	str	r3, [r7, #32]
 80047a2:	e7fe      	b.n	80047a2 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80047a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00b      	beq.n	80047c4 <xQueueSemaphoreTake+0x54>
 80047ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b0:	b672      	cpsid	i
 80047b2:	f383 8811 	msr	BASEPRI, r3
 80047b6:	f3bf 8f6f 	isb	sy
 80047ba:	f3bf 8f4f 	dsb	sy
 80047be:	b662      	cpsie	i
 80047c0:	61fb      	str	r3, [r7, #28]
 80047c2:	e7fe      	b.n	80047c2 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80047c4:	f001 f85a 	bl	800587c <xTaskGetSchedulerState>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d102      	bne.n	80047d4 <xQueueSemaphoreTake+0x64>
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d101      	bne.n	80047d8 <xQueueSemaphoreTake+0x68>
 80047d4:	2301      	movs	r3, #1
 80047d6:	e000      	b.n	80047da <xQueueSemaphoreTake+0x6a>
 80047d8:	2300      	movs	r3, #0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d10b      	bne.n	80047f6 <xQueueSemaphoreTake+0x86>
 80047de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e2:	b672      	cpsid	i
 80047e4:	f383 8811 	msr	BASEPRI, r3
 80047e8:	f3bf 8f6f 	isb	sy
 80047ec:	f3bf 8f4f 	dsb	sy
 80047f0:	b662      	cpsie	i
 80047f2:	61bb      	str	r3, [r7, #24]
 80047f4:	e7fe      	b.n	80047f4 <xQueueSemaphoreTake+0x84>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80047f6:	f7ff fc0f 	bl	8004018 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80047fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fe:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004802:	2b00      	cmp	r3, #0
 8004804:	d024      	beq.n	8004850 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004808:	1e5a      	subs	r2, r3, #1
 800480a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800480c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800480e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d104      	bne.n	8004820 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004816:	f001 f9ff 	bl	8005c18 <pvTaskIncrementMutexHeldCount>
 800481a:	4602      	mov	r2, r0
 800481c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800481e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00f      	beq.n	8004848 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800482a:	3310      	adds	r3, #16
 800482c:	4618      	mov	r0, r3
 800482e:	f000 fe81 	bl	8005534 <xTaskRemoveFromEventList>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d007      	beq.n	8004848 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004838:	4b54      	ldr	r3, [pc, #336]	; (800498c <xQueueSemaphoreTake+0x21c>)
 800483a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800483e:	601a      	str	r2, [r3, #0]
 8004840:	f3bf 8f4f 	dsb	sy
 8004844:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004848:	f7ff fc18 	bl	800407c <vPortExitCritical>
				return pdPASS;
 800484c:	2301      	movs	r3, #1
 800484e:	e098      	b.n	8004982 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d112      	bne.n	800487c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00b      	beq.n	8004874 <xQueueSemaphoreTake+0x104>
 800485c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004860:	b672      	cpsid	i
 8004862:	f383 8811 	msr	BASEPRI, r3
 8004866:	f3bf 8f6f 	isb	sy
 800486a:	f3bf 8f4f 	dsb	sy
 800486e:	b662      	cpsie	i
 8004870:	617b      	str	r3, [r7, #20]
 8004872:	e7fe      	b.n	8004872 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004874:	f7ff fc02 	bl	800407c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004878:	2300      	movs	r3, #0
 800487a:	e082      	b.n	8004982 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800487c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800487e:	2b00      	cmp	r3, #0
 8004880:	d106      	bne.n	8004890 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004882:	f107 030c 	add.w	r3, r7, #12
 8004886:	4618      	mov	r0, r3
 8004888:	f000 feb8 	bl	80055fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800488c:	2301      	movs	r3, #1
 800488e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004890:	f7ff fbf4 	bl	800407c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004894:	f000 fc62 	bl	800515c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004898:	f7ff fbbe 	bl	8004018 <vPortEnterCritical>
 800489c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80048a2:	b25b      	sxtb	r3, r3
 80048a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a8:	d103      	bne.n	80048b2 <xQueueSemaphoreTake+0x142>
 80048aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048b8:	b25b      	sxtb	r3, r3
 80048ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048be:	d103      	bne.n	80048c8 <xQueueSemaphoreTake+0x158>
 80048c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048c8:	f7ff fbd8 	bl	800407c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80048cc:	463a      	mov	r2, r7
 80048ce:	f107 030c 	add.w	r3, r7, #12
 80048d2:	4611      	mov	r1, r2
 80048d4:	4618      	mov	r0, r3
 80048d6:	f000 fea7 	bl	8005628 <xTaskCheckForTimeOut>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d132      	bne.n	8004946 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80048e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80048e2:	f000 f9d2 	bl	8004c8a <prvIsQueueEmpty>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d026      	beq.n	800493a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80048ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d109      	bne.n	8004908 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80048f4:	f7ff fb90 	bl	8004018 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80048f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	4618      	mov	r0, r3
 80048fe:	f000 ffdb 	bl	80058b8 <xTaskPriorityInherit>
 8004902:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004904:	f7ff fbba 	bl	800407c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800490a:	3324      	adds	r3, #36	; 0x24
 800490c:	683a      	ldr	r2, [r7, #0]
 800490e:	4611      	mov	r1, r2
 8004910:	4618      	mov	r0, r3
 8004912:	f000 fde9 	bl	80054e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004916:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004918:	f000 f965 	bl	8004be6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800491c:	f000 fc2c 	bl	8005178 <xTaskResumeAll>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	f47f af67 	bne.w	80047f6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004928:	4b18      	ldr	r3, [pc, #96]	; (800498c <xQueueSemaphoreTake+0x21c>)
 800492a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800492e:	601a      	str	r2, [r3, #0]
 8004930:	f3bf 8f4f 	dsb	sy
 8004934:	f3bf 8f6f 	isb	sy
 8004938:	e75d      	b.n	80047f6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800493a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800493c:	f000 f953 	bl	8004be6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004940:	f000 fc1a 	bl	8005178 <xTaskResumeAll>
 8004944:	e757      	b.n	80047f6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004946:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004948:	f000 f94d 	bl	8004be6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800494c:	f000 fc14 	bl	8005178 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004950:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004952:	f000 f99a 	bl	8004c8a <prvIsQueueEmpty>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	f43f af4c 	beq.w	80047f6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800495e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004960:	2b00      	cmp	r3, #0
 8004962:	d00d      	beq.n	8004980 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8004964:	f7ff fb58 	bl	8004018 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004968:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800496a:	f000 f894 	bl	8004a96 <prvGetDisinheritPriorityAfterTimeout>
 800496e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8004970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004976:	4618      	mov	r0, r3
 8004978:	f001 f8ac 	bl	8005ad4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800497c:	f7ff fb7e 	bl	800407c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004980:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004982:	4618      	mov	r0, r3
 8004984:	3738      	adds	r7, #56	; 0x38
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	e000ed04 	.word	0xe000ed04

08004990 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b08e      	sub	sp, #56	; 0x38
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80049a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10b      	bne.n	80049be <xQueueReceiveFromISR+0x2e>
 80049a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049aa:	b672      	cpsid	i
 80049ac:	f383 8811 	msr	BASEPRI, r3
 80049b0:	f3bf 8f6f 	isb	sy
 80049b4:	f3bf 8f4f 	dsb	sy
 80049b8:	b662      	cpsie	i
 80049ba:	623b      	str	r3, [r7, #32]
 80049bc:	e7fe      	b.n	80049bc <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d103      	bne.n	80049cc <xQueueReceiveFromISR+0x3c>
 80049c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d101      	bne.n	80049d0 <xQueueReceiveFromISR+0x40>
 80049cc:	2301      	movs	r3, #1
 80049ce:	e000      	b.n	80049d2 <xQueueReceiveFromISR+0x42>
 80049d0:	2300      	movs	r3, #0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d10b      	bne.n	80049ee <xQueueReceiveFromISR+0x5e>
 80049d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049da:	b672      	cpsid	i
 80049dc:	f383 8811 	msr	BASEPRI, r3
 80049e0:	f3bf 8f6f 	isb	sy
 80049e4:	f3bf 8f4f 	dsb	sy
 80049e8:	b662      	cpsie	i
 80049ea:	61fb      	str	r3, [r7, #28]
 80049ec:	e7fe      	b.n	80049ec <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80049ee:	f7ff fbf3 	bl	80041d8 <vPortValidateInterruptPriority>
	__asm volatile
 80049f2:	f3ef 8211 	mrs	r2, BASEPRI
 80049f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fa:	b672      	cpsid	i
 80049fc:	f383 8811 	msr	BASEPRI, r3
 8004a00:	f3bf 8f6f 	isb	sy
 8004a04:	f3bf 8f4f 	dsb	sy
 8004a08:	b662      	cpsie	i
 8004a0a:	61ba      	str	r2, [r7, #24]
 8004a0c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004a0e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004a10:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a16:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d02f      	beq.n	8004a7e <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004a28:	68b9      	ldr	r1, [r7, #8]
 8004a2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a2c:	f000 f8b5 	bl	8004b9a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a32:	1e5a      	subs	r2, r3, #1
 8004a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a36:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004a38:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a40:	d112      	bne.n	8004a68 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d016      	beq.n	8004a78 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a4c:	3310      	adds	r3, #16
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 fd70 	bl	8005534 <xTaskRemoveFromEventList>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00e      	beq.n	8004a78 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00b      	beq.n	8004a78 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	601a      	str	r2, [r3, #0]
 8004a66:	e007      	b.n	8004a78 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004a68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	b25a      	sxtb	r2, r3
 8004a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	637b      	str	r3, [r7, #52]	; 0x34
 8004a7c:	e001      	b.n	8004a82 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	637b      	str	r3, [r7, #52]	; 0x34
 8004a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a84:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3738      	adds	r7, #56	; 0x38
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}

08004a96 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004a96:	b480      	push	{r7}
 8004a98:	b085      	sub	sp, #20
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d006      	beq.n	8004ab4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f1c3 0307 	rsb	r3, r3, #7
 8004ab0:	60fb      	str	r3, [r7, #12]
 8004ab2:	e001      	b.n	8004ab8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
	}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3714      	adds	r7, #20
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr

08004ac6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	b086      	sub	sp, #24
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	60f8      	str	r0, [r7, #12]
 8004ace:	60b9      	str	r1, [r7, #8]
 8004ad0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ada:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10d      	bne.n	8004b00 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d14d      	bne.n	8004b88 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	4618      	mov	r0, r3
 8004af2:	f000 ff67 	bl	80059c4 <xTaskPriorityDisinherit>
 8004af6:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	605a      	str	r2, [r3, #4]
 8004afe:	e043      	b.n	8004b88 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d119      	bne.n	8004b3a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6898      	ldr	r0, [r3, #8]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0e:	461a      	mov	r2, r3
 8004b10:	68b9      	ldr	r1, [r7, #8]
 8004b12:	f001 ffbb 	bl	8006a8c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	689a      	ldr	r2, [r3, #8]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1e:	441a      	add	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	689a      	ldr	r2, [r3, #8]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d32b      	bcc.n	8004b88 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	609a      	str	r2, [r3, #8]
 8004b38:	e026      	b.n	8004b88 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	68d8      	ldr	r0, [r3, #12]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b42:	461a      	mov	r2, r3
 8004b44:	68b9      	ldr	r1, [r7, #8]
 8004b46:	f001 ffa1 	bl	8006a8c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	68da      	ldr	r2, [r3, #12]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b52:	425b      	negs	r3, r3
 8004b54:	441a      	add	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	68da      	ldr	r2, [r3, #12]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d207      	bcs.n	8004b76 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	685a      	ldr	r2, [r3, #4]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6e:	425b      	negs	r3, r3
 8004b70:	441a      	add	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d105      	bne.n	8004b88 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d002      	beq.n	8004b88 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	3b01      	subs	r3, #1
 8004b86:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	1c5a      	adds	r2, r3, #1
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004b90:	697b      	ldr	r3, [r7, #20]
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3718      	adds	r7, #24
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b082      	sub	sp, #8
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
 8004ba2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d018      	beq.n	8004bde <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	68da      	ldr	r2, [r3, #12]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb4:	441a      	add	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	68da      	ldr	r2, [r3, #12]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d303      	bcc.n	8004bce <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	68d9      	ldr	r1, [r3, #12]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	6838      	ldr	r0, [r7, #0]
 8004bda:	f001 ff57 	bl	8006a8c <memcpy>
	}
}
 8004bde:	bf00      	nop
 8004be0:	3708      	adds	r7, #8
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b084      	sub	sp, #16
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004bee:	f7ff fa13 	bl	8004018 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bf8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004bfa:	e011      	b.n	8004c20 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d012      	beq.n	8004c2a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	3324      	adds	r3, #36	; 0x24
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f000 fc93 	bl	8005534 <xTaskRemoveFromEventList>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d001      	beq.n	8004c18 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004c14:	f000 fd6c 	bl	80056f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004c18:	7bfb      	ldrb	r3, [r7, #15]
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	dce9      	bgt.n	8004bfc <prvUnlockQueue+0x16>
 8004c28:	e000      	b.n	8004c2c <prvUnlockQueue+0x46>
					break;
 8004c2a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	22ff      	movs	r2, #255	; 0xff
 8004c30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004c34:	f7ff fa22 	bl	800407c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004c38:	f7ff f9ee 	bl	8004018 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c42:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c44:	e011      	b.n	8004c6a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d012      	beq.n	8004c74 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	3310      	adds	r3, #16
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 fc6e 	bl	8005534 <xTaskRemoveFromEventList>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d001      	beq.n	8004c62 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004c5e:	f000 fd47 	bl	80056f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004c62:	7bbb      	ldrb	r3, [r7, #14]
 8004c64:	3b01      	subs	r3, #1
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	dce9      	bgt.n	8004c46 <prvUnlockQueue+0x60>
 8004c72:	e000      	b.n	8004c76 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004c74:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	22ff      	movs	r2, #255	; 0xff
 8004c7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004c7e:	f7ff f9fd 	bl	800407c <vPortExitCritical>
}
 8004c82:	bf00      	nop
 8004c84:	3710      	adds	r7, #16
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b084      	sub	sp, #16
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c92:	f7ff f9c1 	bl	8004018 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d102      	bne.n	8004ca4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	60fb      	str	r3, [r7, #12]
 8004ca2:	e001      	b.n	8004ca8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ca8:	f7ff f9e8 	bl	800407c <vPortExitCritical>

	return xReturn;
 8004cac:	68fb      	ldr	r3, [r7, #12]
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3710      	adds	r7, #16
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}

08004cb6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b084      	sub	sp, #16
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004cbe:	f7ff f9ab 	bl	8004018 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d102      	bne.n	8004cd4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	60fb      	str	r3, [r7, #12]
 8004cd2:	e001      	b.n	8004cd8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004cd8:	f7ff f9d0 	bl	800407c <vPortExitCritical>

	return xReturn;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b08c      	sub	sp, #48	; 0x30
 8004cea:	af04      	add	r7, sp, #16
 8004cec:	60f8      	str	r0, [r7, #12]
 8004cee:	60b9      	str	r1, [r7, #8]
 8004cf0:	603b      	str	r3, [r7, #0]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cf6:	88fb      	ldrh	r3, [r7, #6]
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7fe fdec 	bl	80038d8 <pvPortMalloc>
 8004d00:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00e      	beq.n	8004d26 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004d08:	2054      	movs	r0, #84	; 0x54
 8004d0a:	f7fe fde5 	bl	80038d8 <pvPortMalloc>
 8004d0e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d003      	beq.n	8004d1e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	697a      	ldr	r2, [r7, #20]
 8004d1a:	631a      	str	r2, [r3, #48]	; 0x30
 8004d1c:	e005      	b.n	8004d2a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004d1e:	6978      	ldr	r0, [r7, #20]
 8004d20:	f7fe fea2 	bl	8003a68 <vPortFree>
 8004d24:	e001      	b.n	8004d2a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004d26:	2300      	movs	r3, #0
 8004d28:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d013      	beq.n	8004d58 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004d30:	88fa      	ldrh	r2, [r7, #6]
 8004d32:	2300      	movs	r3, #0
 8004d34:	9303      	str	r3, [sp, #12]
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	9302      	str	r3, [sp, #8]
 8004d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d3c:	9301      	str	r3, [sp, #4]
 8004d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d40:	9300      	str	r3, [sp, #0]
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	68b9      	ldr	r1, [r7, #8]
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	f000 f80e 	bl	8004d68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d4c:	69f8      	ldr	r0, [r7, #28]
 8004d4e:	f000 f88b 	bl	8004e68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004d52:	2301      	movs	r3, #1
 8004d54:	61bb      	str	r3, [r7, #24]
 8004d56:	e002      	b.n	8004d5e <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004d58:	f04f 33ff 	mov.w	r3, #4294967295
 8004d5c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004d5e:	69bb      	ldr	r3, [r7, #24]
	}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3720      	adds	r7, #32
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b088      	sub	sp, #32
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
 8004d74:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d7a:	6879      	ldr	r1, [r7, #4]
 8004d7c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004d80:	440b      	add	r3, r1
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	4413      	add	r3, r2
 8004d86:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	f023 0307 	bic.w	r3, r3, #7
 8004d8e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	f003 0307 	and.w	r3, r3, #7
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00b      	beq.n	8004db2 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8004d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9e:	b672      	cpsid	i
 8004da0:	f383 8811 	msr	BASEPRI, r3
 8004da4:	f3bf 8f6f 	isb	sy
 8004da8:	f3bf 8f4f 	dsb	sy
 8004dac:	b662      	cpsie	i
 8004dae:	617b      	str	r3, [r7, #20]
 8004db0:	e7fe      	b.n	8004db0 <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004db2:	2300      	movs	r3, #0
 8004db4:	61fb      	str	r3, [r7, #28]
 8004db6:	e012      	b.n	8004dde <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004db8:	68ba      	ldr	r2, [r7, #8]
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	7819      	ldrb	r1, [r3, #0]
 8004dc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	3334      	adds	r3, #52	; 0x34
 8004dc8:	460a      	mov	r2, r1
 8004dca:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004dcc:	68ba      	ldr	r2, [r7, #8]
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d006      	beq.n	8004de6 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	3301      	adds	r3, #1
 8004ddc:	61fb      	str	r3, [r7, #28]
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	2b0f      	cmp	r3, #15
 8004de2:	d9e9      	bls.n	8004db8 <prvInitialiseNewTask+0x50>
 8004de4:	e000      	b.n	8004de8 <prvInitialiseNewTask+0x80>
		{
			break;
 8004de6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df2:	2b06      	cmp	r3, #6
 8004df4:	d901      	bls.n	8004dfa <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004df6:	2306      	movs	r3, #6
 8004df8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dfe:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e04:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e08:	2200      	movs	r2, #0
 8004e0a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0e:	3304      	adds	r3, #4
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7fe ff61 	bl	8003cd8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e18:	3318      	adds	r3, #24
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7fe ff5c 	bl	8003cd8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e24:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e28:	f1c3 0207 	rsb	r2, r3, #7
 8004e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e34:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e38:	2200      	movs	r2, #0
 8004e3a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004e44:	683a      	ldr	r2, [r7, #0]
 8004e46:	68f9      	ldr	r1, [r7, #12]
 8004e48:	69b8      	ldr	r0, [r7, #24]
 8004e4a:	f7fe ffd9 	bl	8003e00 <pxPortInitialiseStack>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e52:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d002      	beq.n	8004e60 <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e5e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e60:	bf00      	nop
 8004e62:	3720      	adds	r7, #32
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004e70:	f7ff f8d2 	bl	8004018 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004e74:	4b2a      	ldr	r3, [pc, #168]	; (8004f20 <prvAddNewTaskToReadyList+0xb8>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	3301      	adds	r3, #1
 8004e7a:	4a29      	ldr	r2, [pc, #164]	; (8004f20 <prvAddNewTaskToReadyList+0xb8>)
 8004e7c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004e7e:	4b29      	ldr	r3, [pc, #164]	; (8004f24 <prvAddNewTaskToReadyList+0xbc>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d109      	bne.n	8004e9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004e86:	4a27      	ldr	r2, [pc, #156]	; (8004f24 <prvAddNewTaskToReadyList+0xbc>)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004e8c:	4b24      	ldr	r3, [pc, #144]	; (8004f20 <prvAddNewTaskToReadyList+0xb8>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d110      	bne.n	8004eb6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004e94:	f000 fc50 	bl	8005738 <prvInitialiseTaskLists>
 8004e98:	e00d      	b.n	8004eb6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004e9a:	4b23      	ldr	r3, [pc, #140]	; (8004f28 <prvAddNewTaskToReadyList+0xc0>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d109      	bne.n	8004eb6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004ea2:	4b20      	ldr	r3, [pc, #128]	; (8004f24 <prvAddNewTaskToReadyList+0xbc>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d802      	bhi.n	8004eb6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004eb0:	4a1c      	ldr	r2, [pc, #112]	; (8004f24 <prvAddNewTaskToReadyList+0xbc>)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004eb6:	4b1d      	ldr	r3, [pc, #116]	; (8004f2c <prvAddNewTaskToReadyList+0xc4>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	3301      	adds	r3, #1
 8004ebc:	4a1b      	ldr	r2, [pc, #108]	; (8004f2c <prvAddNewTaskToReadyList+0xc4>)
 8004ebe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	409a      	lsls	r2, r3
 8004ec8:	4b19      	ldr	r3, [pc, #100]	; (8004f30 <prvAddNewTaskToReadyList+0xc8>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	4a18      	ldr	r2, [pc, #96]	; (8004f30 <prvAddNewTaskToReadyList+0xc8>)
 8004ed0:	6013      	str	r3, [r2, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	4413      	add	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4a15      	ldr	r2, [pc, #84]	; (8004f34 <prvAddNewTaskToReadyList+0xcc>)
 8004ee0:	441a      	add	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	3304      	adds	r3, #4
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	4610      	mov	r0, r2
 8004eea:	f7fe ff02 	bl	8003cf2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004eee:	f7ff f8c5 	bl	800407c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004ef2:	4b0d      	ldr	r3, [pc, #52]	; (8004f28 <prvAddNewTaskToReadyList+0xc0>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00e      	beq.n	8004f18 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004efa:	4b0a      	ldr	r3, [pc, #40]	; (8004f24 <prvAddNewTaskToReadyList+0xbc>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d207      	bcs.n	8004f18 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004f08:	4b0b      	ldr	r3, [pc, #44]	; (8004f38 <prvAddNewTaskToReadyList+0xd0>)
 8004f0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f0e:	601a      	str	r2, [r3, #0]
 8004f10:	f3bf 8f4f 	dsb	sy
 8004f14:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f18:	bf00      	nop
 8004f1a:	3708      	adds	r7, #8
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	20003dac 	.word	0x20003dac
 8004f24:	20003cac 	.word	0x20003cac
 8004f28:	20003db8 	.word	0x20003db8
 8004f2c:	20003dc8 	.word	0x20003dc8
 8004f30:	20003db4 	.word	0x20003db4
 8004f34:	20003cb0 	.word	0x20003cb0
 8004f38:	e000ed04 	.word	0xe000ed04

08004f3c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8004f44:	f7ff f868 	bl	8004018 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d102      	bne.n	8004f54 <vTaskDelete+0x18>
 8004f4e:	4b39      	ldr	r3, [pc, #228]	; (8005034 <vTaskDelete+0xf8>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	e000      	b.n	8004f56 <vTaskDelete+0x1a>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	3304      	adds	r3, #4
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f7fe ff25 	bl	8003dac <uxListRemove>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d115      	bne.n	8004f94 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f6c:	4932      	ldr	r1, [pc, #200]	; (8005038 <vTaskDelete+0xfc>)
 8004f6e:	4613      	mov	r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	4413      	add	r3, r2
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	440b      	add	r3, r1
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10a      	bne.n	8004f94 <vTaskDelete+0x58>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f82:	2201      	movs	r2, #1
 8004f84:	fa02 f303 	lsl.w	r3, r2, r3
 8004f88:	43da      	mvns	r2, r3
 8004f8a:	4b2c      	ldr	r3, [pc, #176]	; (800503c <vTaskDelete+0x100>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4013      	ands	r3, r2
 8004f90:	4a2a      	ldr	r2, [pc, #168]	; (800503c <vTaskDelete+0x100>)
 8004f92:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d004      	beq.n	8004fa6 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	3318      	adds	r3, #24
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7fe ff03 	bl	8003dac <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8004fa6:	4b26      	ldr	r3, [pc, #152]	; (8005040 <vTaskDelete+0x104>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	3301      	adds	r3, #1
 8004fac:	4a24      	ldr	r2, [pc, #144]	; (8005040 <vTaskDelete+0x104>)
 8004fae:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8004fb0:	4b20      	ldr	r3, [pc, #128]	; (8005034 <vTaskDelete+0xf8>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d10b      	bne.n	8004fd2 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	3304      	adds	r3, #4
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	4820      	ldr	r0, [pc, #128]	; (8005044 <vTaskDelete+0x108>)
 8004fc2:	f7fe fe96 	bl	8003cf2 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8004fc6:	4b20      	ldr	r3, [pc, #128]	; (8005048 <vTaskDelete+0x10c>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	3301      	adds	r3, #1
 8004fcc:	4a1e      	ldr	r2, [pc, #120]	; (8005048 <vTaskDelete+0x10c>)
 8004fce:	6013      	str	r3, [r2, #0]
 8004fd0:	e009      	b.n	8004fe6 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8004fd2:	4b1e      	ldr	r3, [pc, #120]	; (800504c <vTaskDelete+0x110>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	4a1c      	ldr	r2, [pc, #112]	; (800504c <vTaskDelete+0x110>)
 8004fda:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	f000 fc17 	bl	8005810 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8004fe2:	f000 fc25 	bl	8005830 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8004fe6:	f7ff f849 	bl	800407c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8004fea:	4b19      	ldr	r3, [pc, #100]	; (8005050 <vTaskDelete+0x114>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d01c      	beq.n	800502c <vTaskDelete+0xf0>
		{
			if( pxTCB == pxCurrentTCB )
 8004ff2:	4b10      	ldr	r3, [pc, #64]	; (8005034 <vTaskDelete+0xf8>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d117      	bne.n	800502c <vTaskDelete+0xf0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8004ffc:	4b15      	ldr	r3, [pc, #84]	; (8005054 <vTaskDelete+0x118>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d00b      	beq.n	800501c <vTaskDelete+0xe0>
 8005004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005008:	b672      	cpsid	i
 800500a:	f383 8811 	msr	BASEPRI, r3
 800500e:	f3bf 8f6f 	isb	sy
 8005012:	f3bf 8f4f 	dsb	sy
 8005016:	b662      	cpsie	i
 8005018:	60bb      	str	r3, [r7, #8]
 800501a:	e7fe      	b.n	800501a <vTaskDelete+0xde>
				portYIELD_WITHIN_API();
 800501c:	4b0e      	ldr	r3, [pc, #56]	; (8005058 <vTaskDelete+0x11c>)
 800501e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005022:	601a      	str	r2, [r3, #0]
 8005024:	f3bf 8f4f 	dsb	sy
 8005028:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800502c:	bf00      	nop
 800502e:	3710      	adds	r7, #16
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	20003cac 	.word	0x20003cac
 8005038:	20003cb0 	.word	0x20003cb0
 800503c:	20003db4 	.word	0x20003db4
 8005040:	20003dc8 	.word	0x20003dc8
 8005044:	20003d80 	.word	0x20003d80
 8005048:	20003d94 	.word	0x20003d94
 800504c:	20003dac 	.word	0x20003dac
 8005050:	20003db8 	.word	0x20003db8
 8005054:	20003dd4 	.word	0x20003dd4
 8005058:	e000ed04 	.word	0xe000ed04

0800505c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800505c:	b580      	push	{r7, lr}
 800505e:	b084      	sub	sp, #16
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005064:	2300      	movs	r3, #0
 8005066:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d018      	beq.n	80050a0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800506e:	4b14      	ldr	r3, [pc, #80]	; (80050c0 <vTaskDelay+0x64>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00b      	beq.n	800508e <vTaskDelay+0x32>
 8005076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507a:	b672      	cpsid	i
 800507c:	f383 8811 	msr	BASEPRI, r3
 8005080:	f3bf 8f6f 	isb	sy
 8005084:	f3bf 8f4f 	dsb	sy
 8005088:	b662      	cpsie	i
 800508a:	60bb      	str	r3, [r7, #8]
 800508c:	e7fe      	b.n	800508c <vTaskDelay+0x30>
			vTaskSuspendAll();
 800508e:	f000 f865 	bl	800515c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005092:	2100      	movs	r1, #0
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 fdd3 	bl	8005c40 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800509a:	f000 f86d 	bl	8005178 <xTaskResumeAll>
 800509e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d107      	bne.n	80050b6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80050a6:	4b07      	ldr	r3, [pc, #28]	; (80050c4 <vTaskDelay+0x68>)
 80050a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050ac:	601a      	str	r2, [r3, #0]
 80050ae:	f3bf 8f4f 	dsb	sy
 80050b2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80050b6:	bf00      	nop
 80050b8:	3710      	adds	r7, #16
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	20003dd4 	.word	0x20003dd4
 80050c4:	e000ed04 	.word	0xe000ed04

080050c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b086      	sub	sp, #24
 80050cc:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80050ce:	4b1d      	ldr	r3, [pc, #116]	; (8005144 <vTaskStartScheduler+0x7c>)
 80050d0:	9301      	str	r3, [sp, #4]
 80050d2:	2300      	movs	r3, #0
 80050d4:	9300      	str	r3, [sp, #0]
 80050d6:	2300      	movs	r3, #0
 80050d8:	2280      	movs	r2, #128	; 0x80
 80050da:	491b      	ldr	r1, [pc, #108]	; (8005148 <vTaskStartScheduler+0x80>)
 80050dc:	481b      	ldr	r0, [pc, #108]	; (800514c <vTaskStartScheduler+0x84>)
 80050de:	f7ff fe02 	bl	8004ce6 <xTaskCreate>
 80050e2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d117      	bne.n	800511a <vTaskStartScheduler+0x52>
 80050ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ee:	b672      	cpsid	i
 80050f0:	f383 8811 	msr	BASEPRI, r3
 80050f4:	f3bf 8f6f 	isb	sy
 80050f8:	f3bf 8f4f 	dsb	sy
 80050fc:	b662      	cpsie	i
 80050fe:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005100:	4b13      	ldr	r3, [pc, #76]	; (8005150 <vTaskStartScheduler+0x88>)
 8005102:	f04f 32ff 	mov.w	r2, #4294967295
 8005106:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005108:	4b12      	ldr	r3, [pc, #72]	; (8005154 <vTaskStartScheduler+0x8c>)
 800510a:	2201      	movs	r2, #1
 800510c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800510e:	4b12      	ldr	r3, [pc, #72]	; (8005158 <vTaskStartScheduler+0x90>)
 8005110:	2200      	movs	r2, #0
 8005112:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005114:	f7fe ff04 	bl	8003f20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005118:	e00f      	b.n	800513a <vTaskStartScheduler+0x72>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005120:	d10b      	bne.n	800513a <vTaskStartScheduler+0x72>
 8005122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005126:	b672      	cpsid	i
 8005128:	f383 8811 	msr	BASEPRI, r3
 800512c:	f3bf 8f6f 	isb	sy
 8005130:	f3bf 8f4f 	dsb	sy
 8005134:	b662      	cpsie	i
 8005136:	607b      	str	r3, [r7, #4]
 8005138:	e7fe      	b.n	8005138 <vTaskStartScheduler+0x70>
}
 800513a:	bf00      	nop
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	20003dd0 	.word	0x20003dd0
 8005148:	08007928 	.word	0x08007928
 800514c:	08005709 	.word	0x08005709
 8005150:	20003dcc 	.word	0x20003dcc
 8005154:	20003db8 	.word	0x20003db8
 8005158:	20003db0 	.word	0x20003db0

0800515c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800515c:	b480      	push	{r7}
 800515e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005160:	4b04      	ldr	r3, [pc, #16]	; (8005174 <vTaskSuspendAll+0x18>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	3301      	adds	r3, #1
 8005166:	4a03      	ldr	r2, [pc, #12]	; (8005174 <vTaskSuspendAll+0x18>)
 8005168:	6013      	str	r3, [r2, #0]
}
 800516a:	bf00      	nop
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr
 8005174:	20003dd4 	.word	0x20003dd4

08005178 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800517e:	2300      	movs	r3, #0
 8005180:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005182:	2300      	movs	r3, #0
 8005184:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005186:	4b42      	ldr	r3, [pc, #264]	; (8005290 <xTaskResumeAll+0x118>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d10b      	bne.n	80051a6 <xTaskResumeAll+0x2e>
 800518e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005192:	b672      	cpsid	i
 8005194:	f383 8811 	msr	BASEPRI, r3
 8005198:	f3bf 8f6f 	isb	sy
 800519c:	f3bf 8f4f 	dsb	sy
 80051a0:	b662      	cpsie	i
 80051a2:	603b      	str	r3, [r7, #0]
 80051a4:	e7fe      	b.n	80051a4 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80051a6:	f7fe ff37 	bl	8004018 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80051aa:	4b39      	ldr	r3, [pc, #228]	; (8005290 <xTaskResumeAll+0x118>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	3b01      	subs	r3, #1
 80051b0:	4a37      	ldr	r2, [pc, #220]	; (8005290 <xTaskResumeAll+0x118>)
 80051b2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051b4:	4b36      	ldr	r3, [pc, #216]	; (8005290 <xTaskResumeAll+0x118>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d161      	bne.n	8005280 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80051bc:	4b35      	ldr	r3, [pc, #212]	; (8005294 <xTaskResumeAll+0x11c>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d05d      	beq.n	8005280 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80051c4:	e02e      	b.n	8005224 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80051c6:	4b34      	ldr	r3, [pc, #208]	; (8005298 <xTaskResumeAll+0x120>)
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	3318      	adds	r3, #24
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7fe fdea 	bl	8003dac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	3304      	adds	r3, #4
 80051dc:	4618      	mov	r0, r3
 80051de:	f7fe fde5 	bl	8003dac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e6:	2201      	movs	r2, #1
 80051e8:	409a      	lsls	r2, r3
 80051ea:	4b2c      	ldr	r3, [pc, #176]	; (800529c <xTaskResumeAll+0x124>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	4a2a      	ldr	r2, [pc, #168]	; (800529c <xTaskResumeAll+0x124>)
 80051f2:	6013      	str	r3, [r2, #0]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051f8:	4613      	mov	r3, r2
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	4413      	add	r3, r2
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	4a27      	ldr	r2, [pc, #156]	; (80052a0 <xTaskResumeAll+0x128>)
 8005202:	441a      	add	r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	3304      	adds	r3, #4
 8005208:	4619      	mov	r1, r3
 800520a:	4610      	mov	r0, r2
 800520c:	f7fe fd71 	bl	8003cf2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005214:	4b23      	ldr	r3, [pc, #140]	; (80052a4 <xTaskResumeAll+0x12c>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521a:	429a      	cmp	r2, r3
 800521c:	d302      	bcc.n	8005224 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800521e:	4b22      	ldr	r3, [pc, #136]	; (80052a8 <xTaskResumeAll+0x130>)
 8005220:	2201      	movs	r2, #1
 8005222:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005224:	4b1c      	ldr	r3, [pc, #112]	; (8005298 <xTaskResumeAll+0x120>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1cc      	bne.n	80051c6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d001      	beq.n	8005236 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005232:	f000 fafd 	bl	8005830 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005236:	4b1d      	ldr	r3, [pc, #116]	; (80052ac <xTaskResumeAll+0x134>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d010      	beq.n	8005264 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005242:	f000 f837 	bl	80052b4 <xTaskIncrementTick>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d002      	beq.n	8005252 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800524c:	4b16      	ldr	r3, [pc, #88]	; (80052a8 <xTaskResumeAll+0x130>)
 800524e:	2201      	movs	r2, #1
 8005250:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	3b01      	subs	r3, #1
 8005256:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1f1      	bne.n	8005242 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800525e:	4b13      	ldr	r3, [pc, #76]	; (80052ac <xTaskResumeAll+0x134>)
 8005260:	2200      	movs	r2, #0
 8005262:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005264:	4b10      	ldr	r3, [pc, #64]	; (80052a8 <xTaskResumeAll+0x130>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d009      	beq.n	8005280 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800526c:	2301      	movs	r3, #1
 800526e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005270:	4b0f      	ldr	r3, [pc, #60]	; (80052b0 <xTaskResumeAll+0x138>)
 8005272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005276:	601a      	str	r2, [r3, #0]
 8005278:	f3bf 8f4f 	dsb	sy
 800527c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005280:	f7fe fefc 	bl	800407c <vPortExitCritical>

	return xAlreadyYielded;
 8005284:	68bb      	ldr	r3, [r7, #8]
}
 8005286:	4618      	mov	r0, r3
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	20003dd4 	.word	0x20003dd4
 8005294:	20003dac 	.word	0x20003dac
 8005298:	20003d6c 	.word	0x20003d6c
 800529c:	20003db4 	.word	0x20003db4
 80052a0:	20003cb0 	.word	0x20003cb0
 80052a4:	20003cac 	.word	0x20003cac
 80052a8:	20003dc0 	.word	0x20003dc0
 80052ac:	20003dbc 	.word	0x20003dbc
 80052b0:	e000ed04 	.word	0xe000ed04

080052b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b086      	sub	sp, #24
 80052b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80052ba:	2300      	movs	r3, #0
 80052bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052be:	4b51      	ldr	r3, [pc, #324]	; (8005404 <xTaskIncrementTick+0x150>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	f040 808e 	bne.w	80053e4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80052c8:	4b4f      	ldr	r3, [pc, #316]	; (8005408 <xTaskIncrementTick+0x154>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	3301      	adds	r3, #1
 80052ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80052d0:	4a4d      	ldr	r2, [pc, #308]	; (8005408 <xTaskIncrementTick+0x154>)
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d121      	bne.n	8005320 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80052dc:	4b4b      	ldr	r3, [pc, #300]	; (800540c <xTaskIncrementTick+0x158>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00b      	beq.n	80052fe <xTaskIncrementTick+0x4a>
 80052e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ea:	b672      	cpsid	i
 80052ec:	f383 8811 	msr	BASEPRI, r3
 80052f0:	f3bf 8f6f 	isb	sy
 80052f4:	f3bf 8f4f 	dsb	sy
 80052f8:	b662      	cpsie	i
 80052fa:	603b      	str	r3, [r7, #0]
 80052fc:	e7fe      	b.n	80052fc <xTaskIncrementTick+0x48>
 80052fe:	4b43      	ldr	r3, [pc, #268]	; (800540c <xTaskIncrementTick+0x158>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	60fb      	str	r3, [r7, #12]
 8005304:	4b42      	ldr	r3, [pc, #264]	; (8005410 <xTaskIncrementTick+0x15c>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a40      	ldr	r2, [pc, #256]	; (800540c <xTaskIncrementTick+0x158>)
 800530a:	6013      	str	r3, [r2, #0]
 800530c:	4a40      	ldr	r2, [pc, #256]	; (8005410 <xTaskIncrementTick+0x15c>)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6013      	str	r3, [r2, #0]
 8005312:	4b40      	ldr	r3, [pc, #256]	; (8005414 <xTaskIncrementTick+0x160>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	3301      	adds	r3, #1
 8005318:	4a3e      	ldr	r2, [pc, #248]	; (8005414 <xTaskIncrementTick+0x160>)
 800531a:	6013      	str	r3, [r2, #0]
 800531c:	f000 fa88 	bl	8005830 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005320:	4b3d      	ldr	r3, [pc, #244]	; (8005418 <xTaskIncrementTick+0x164>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	693a      	ldr	r2, [r7, #16]
 8005326:	429a      	cmp	r2, r3
 8005328:	d34d      	bcc.n	80053c6 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800532a:	4b38      	ldr	r3, [pc, #224]	; (800540c <xTaskIncrementTick+0x158>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d101      	bne.n	8005338 <xTaskIncrementTick+0x84>
 8005334:	2301      	movs	r3, #1
 8005336:	e000      	b.n	800533a <xTaskIncrementTick+0x86>
 8005338:	2300      	movs	r3, #0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d004      	beq.n	8005348 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800533e:	4b36      	ldr	r3, [pc, #216]	; (8005418 <xTaskIncrementTick+0x164>)
 8005340:	f04f 32ff 	mov.w	r2, #4294967295
 8005344:	601a      	str	r2, [r3, #0]
					break;
 8005346:	e03e      	b.n	80053c6 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005348:	4b30      	ldr	r3, [pc, #192]	; (800540c <xTaskIncrementTick+0x158>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	429a      	cmp	r2, r3
 800535e:	d203      	bcs.n	8005368 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005360:	4a2d      	ldr	r2, [pc, #180]	; (8005418 <xTaskIncrementTick+0x164>)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6013      	str	r3, [r2, #0]
						break;
 8005366:	e02e      	b.n	80053c6 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	3304      	adds	r3, #4
 800536c:	4618      	mov	r0, r3
 800536e:	f7fe fd1d 	bl	8003dac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005376:	2b00      	cmp	r3, #0
 8005378:	d004      	beq.n	8005384 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	3318      	adds	r3, #24
 800537e:	4618      	mov	r0, r3
 8005380:	f7fe fd14 	bl	8003dac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005388:	2201      	movs	r2, #1
 800538a:	409a      	lsls	r2, r3
 800538c:	4b23      	ldr	r3, [pc, #140]	; (800541c <xTaskIncrementTick+0x168>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4313      	orrs	r3, r2
 8005392:	4a22      	ldr	r2, [pc, #136]	; (800541c <xTaskIncrementTick+0x168>)
 8005394:	6013      	str	r3, [r2, #0]
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800539a:	4613      	mov	r3, r2
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	4413      	add	r3, r2
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	4a1f      	ldr	r2, [pc, #124]	; (8005420 <xTaskIncrementTick+0x16c>)
 80053a4:	441a      	add	r2, r3
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	3304      	adds	r3, #4
 80053aa:	4619      	mov	r1, r3
 80053ac:	4610      	mov	r0, r2
 80053ae:	f7fe fca0 	bl	8003cf2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053b6:	4b1b      	ldr	r3, [pc, #108]	; (8005424 <xTaskIncrementTick+0x170>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053bc:	429a      	cmp	r2, r3
 80053be:	d3b4      	bcc.n	800532a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80053c0:	2301      	movs	r3, #1
 80053c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053c4:	e7b1      	b.n	800532a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80053c6:	4b17      	ldr	r3, [pc, #92]	; (8005424 <xTaskIncrementTick+0x170>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053cc:	4914      	ldr	r1, [pc, #80]	; (8005420 <xTaskIncrementTick+0x16c>)
 80053ce:	4613      	mov	r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	4413      	add	r3, r2
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	440b      	add	r3, r1
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d907      	bls.n	80053ee <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80053de:	2301      	movs	r3, #1
 80053e0:	617b      	str	r3, [r7, #20]
 80053e2:	e004      	b.n	80053ee <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80053e4:	4b10      	ldr	r3, [pc, #64]	; (8005428 <xTaskIncrementTick+0x174>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	3301      	adds	r3, #1
 80053ea:	4a0f      	ldr	r2, [pc, #60]	; (8005428 <xTaskIncrementTick+0x174>)
 80053ec:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80053ee:	4b0f      	ldr	r3, [pc, #60]	; (800542c <xTaskIncrementTick+0x178>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d001      	beq.n	80053fa <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80053f6:	2301      	movs	r3, #1
 80053f8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80053fa:	697b      	ldr	r3, [r7, #20]
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3718      	adds	r7, #24
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	20003dd4 	.word	0x20003dd4
 8005408:	20003db0 	.word	0x20003db0
 800540c:	20003d64 	.word	0x20003d64
 8005410:	20003d68 	.word	0x20003d68
 8005414:	20003dc4 	.word	0x20003dc4
 8005418:	20003dcc 	.word	0x20003dcc
 800541c:	20003db4 	.word	0x20003db4
 8005420:	20003cb0 	.word	0x20003cb0
 8005424:	20003cac 	.word	0x20003cac
 8005428:	20003dbc 	.word	0x20003dbc
 800542c:	20003dc0 	.word	0x20003dc0

08005430 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005430:	b480      	push	{r7}
 8005432:	b087      	sub	sp, #28
 8005434:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005436:	4b27      	ldr	r3, [pc, #156]	; (80054d4 <vTaskSwitchContext+0xa4>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d003      	beq.n	8005446 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800543e:	4b26      	ldr	r3, [pc, #152]	; (80054d8 <vTaskSwitchContext+0xa8>)
 8005440:	2201      	movs	r2, #1
 8005442:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005444:	e040      	b.n	80054c8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005446:	4b24      	ldr	r3, [pc, #144]	; (80054d8 <vTaskSwitchContext+0xa8>)
 8005448:	2200      	movs	r2, #0
 800544a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800544c:	4b23      	ldr	r3, [pc, #140]	; (80054dc <vTaskSwitchContext+0xac>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	fab3 f383 	clz	r3, r3
 8005458:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800545a:	7afb      	ldrb	r3, [r7, #11]
 800545c:	f1c3 031f 	rsb	r3, r3, #31
 8005460:	617b      	str	r3, [r7, #20]
 8005462:	491f      	ldr	r1, [pc, #124]	; (80054e0 <vTaskSwitchContext+0xb0>)
 8005464:	697a      	ldr	r2, [r7, #20]
 8005466:	4613      	mov	r3, r2
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	4413      	add	r3, r2
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	440b      	add	r3, r1
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d10b      	bne.n	800548e <vTaskSwitchContext+0x5e>
	__asm volatile
 8005476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547a:	b672      	cpsid	i
 800547c:	f383 8811 	msr	BASEPRI, r3
 8005480:	f3bf 8f6f 	isb	sy
 8005484:	f3bf 8f4f 	dsb	sy
 8005488:	b662      	cpsie	i
 800548a:	607b      	str	r3, [r7, #4]
 800548c:	e7fe      	b.n	800548c <vTaskSwitchContext+0x5c>
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	4613      	mov	r3, r2
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	4413      	add	r3, r2
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	4a11      	ldr	r2, [pc, #68]	; (80054e0 <vTaskSwitchContext+0xb0>)
 800549a:	4413      	add	r3, r2
 800549c:	613b      	str	r3, [r7, #16]
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	685a      	ldr	r2, [r3, #4]
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	605a      	str	r2, [r3, #4]
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	685a      	ldr	r2, [r3, #4]
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	3308      	adds	r3, #8
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d104      	bne.n	80054be <vTaskSwitchContext+0x8e>
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	685a      	ldr	r2, [r3, #4]
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	605a      	str	r2, [r3, #4]
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	4a07      	ldr	r2, [pc, #28]	; (80054e4 <vTaskSwitchContext+0xb4>)
 80054c6:	6013      	str	r3, [r2, #0]
}
 80054c8:	bf00      	nop
 80054ca:	371c      	adds	r7, #28
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr
 80054d4:	20003dd4 	.word	0x20003dd4
 80054d8:	20003dc0 	.word	0x20003dc0
 80054dc:	20003db4 	.word	0x20003db4
 80054e0:	20003cb0 	.word	0x20003cb0
 80054e4:	20003cac 	.word	0x20003cac

080054e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d10b      	bne.n	8005510 <vTaskPlaceOnEventList+0x28>
 80054f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fc:	b672      	cpsid	i
 80054fe:	f383 8811 	msr	BASEPRI, r3
 8005502:	f3bf 8f6f 	isb	sy
 8005506:	f3bf 8f4f 	dsb	sy
 800550a:	b662      	cpsie	i
 800550c:	60fb      	str	r3, [r7, #12]
 800550e:	e7fe      	b.n	800550e <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005510:	4b07      	ldr	r3, [pc, #28]	; (8005530 <vTaskPlaceOnEventList+0x48>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	3318      	adds	r3, #24
 8005516:	4619      	mov	r1, r3
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f7fe fc0e 	bl	8003d3a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800551e:	2101      	movs	r1, #1
 8005520:	6838      	ldr	r0, [r7, #0]
 8005522:	f000 fb8d 	bl	8005c40 <prvAddCurrentTaskToDelayedList>
}
 8005526:	bf00      	nop
 8005528:	3710      	adds	r7, #16
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	20003cac 	.word	0x20003cac

08005534 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d10b      	bne.n	8005562 <xTaskRemoveFromEventList+0x2e>
 800554a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800554e:	b672      	cpsid	i
 8005550:	f383 8811 	msr	BASEPRI, r3
 8005554:	f3bf 8f6f 	isb	sy
 8005558:	f3bf 8f4f 	dsb	sy
 800555c:	b662      	cpsie	i
 800555e:	60fb      	str	r3, [r7, #12]
 8005560:	e7fe      	b.n	8005560 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	3318      	adds	r3, #24
 8005566:	4618      	mov	r0, r3
 8005568:	f7fe fc20 	bl	8003dac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800556c:	4b1d      	ldr	r3, [pc, #116]	; (80055e4 <xTaskRemoveFromEventList+0xb0>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d11c      	bne.n	80055ae <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	3304      	adds	r3, #4
 8005578:	4618      	mov	r0, r3
 800557a:	f7fe fc17 	bl	8003dac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005582:	2201      	movs	r2, #1
 8005584:	409a      	lsls	r2, r3
 8005586:	4b18      	ldr	r3, [pc, #96]	; (80055e8 <xTaskRemoveFromEventList+0xb4>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4313      	orrs	r3, r2
 800558c:	4a16      	ldr	r2, [pc, #88]	; (80055e8 <xTaskRemoveFromEventList+0xb4>)
 800558e:	6013      	str	r3, [r2, #0]
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005594:	4613      	mov	r3, r2
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	4413      	add	r3, r2
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	4a13      	ldr	r2, [pc, #76]	; (80055ec <xTaskRemoveFromEventList+0xb8>)
 800559e:	441a      	add	r2, r3
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	3304      	adds	r3, #4
 80055a4:	4619      	mov	r1, r3
 80055a6:	4610      	mov	r0, r2
 80055a8:	f7fe fba3 	bl	8003cf2 <vListInsertEnd>
 80055ac:	e005      	b.n	80055ba <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	3318      	adds	r3, #24
 80055b2:	4619      	mov	r1, r3
 80055b4:	480e      	ldr	r0, [pc, #56]	; (80055f0 <xTaskRemoveFromEventList+0xbc>)
 80055b6:	f7fe fb9c 	bl	8003cf2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055be:	4b0d      	ldr	r3, [pc, #52]	; (80055f4 <xTaskRemoveFromEventList+0xc0>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d905      	bls.n	80055d4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80055c8:	2301      	movs	r3, #1
 80055ca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80055cc:	4b0a      	ldr	r3, [pc, #40]	; (80055f8 <xTaskRemoveFromEventList+0xc4>)
 80055ce:	2201      	movs	r2, #1
 80055d0:	601a      	str	r2, [r3, #0]
 80055d2:	e001      	b.n	80055d8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80055d4:	2300      	movs	r3, #0
 80055d6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80055d8:	697b      	ldr	r3, [r7, #20]
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3718      	adds	r7, #24
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	20003dd4 	.word	0x20003dd4
 80055e8:	20003db4 	.word	0x20003db4
 80055ec:	20003cb0 	.word	0x20003cb0
 80055f0:	20003d6c 	.word	0x20003d6c
 80055f4:	20003cac 	.word	0x20003cac
 80055f8:	20003dc0 	.word	0x20003dc0

080055fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005604:	4b06      	ldr	r3, [pc, #24]	; (8005620 <vTaskInternalSetTimeOutState+0x24>)
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800560c:	4b05      	ldr	r3, [pc, #20]	; (8005624 <vTaskInternalSetTimeOutState+0x28>)
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	605a      	str	r2, [r3, #4]
}
 8005614:	bf00      	nop
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr
 8005620:	20003dc4 	.word	0x20003dc4
 8005624:	20003db0 	.word	0x20003db0

08005628 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b088      	sub	sp, #32
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d10b      	bne.n	8005650 <xTaskCheckForTimeOut+0x28>
 8005638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800563c:	b672      	cpsid	i
 800563e:	f383 8811 	msr	BASEPRI, r3
 8005642:	f3bf 8f6f 	isb	sy
 8005646:	f3bf 8f4f 	dsb	sy
 800564a:	b662      	cpsie	i
 800564c:	613b      	str	r3, [r7, #16]
 800564e:	e7fe      	b.n	800564e <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d10b      	bne.n	800566e <xTaskCheckForTimeOut+0x46>
 8005656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800565a:	b672      	cpsid	i
 800565c:	f383 8811 	msr	BASEPRI, r3
 8005660:	f3bf 8f6f 	isb	sy
 8005664:	f3bf 8f4f 	dsb	sy
 8005668:	b662      	cpsie	i
 800566a:	60fb      	str	r3, [r7, #12]
 800566c:	e7fe      	b.n	800566c <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800566e:	f7fe fcd3 	bl	8004018 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005672:	4b1d      	ldr	r3, [pc, #116]	; (80056e8 <xTaskCheckForTimeOut+0xc0>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	69ba      	ldr	r2, [r7, #24]
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800568a:	d102      	bne.n	8005692 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800568c:	2300      	movs	r3, #0
 800568e:	61fb      	str	r3, [r7, #28]
 8005690:	e023      	b.n	80056da <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	4b15      	ldr	r3, [pc, #84]	; (80056ec <xTaskCheckForTimeOut+0xc4>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	429a      	cmp	r2, r3
 800569c:	d007      	beq.n	80056ae <xTaskCheckForTimeOut+0x86>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	69ba      	ldr	r2, [r7, #24]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d302      	bcc.n	80056ae <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80056a8:	2301      	movs	r3, #1
 80056aa:	61fb      	str	r3, [r7, #28]
 80056ac:	e015      	b.n	80056da <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d20b      	bcs.n	80056d0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	1ad2      	subs	r2, r2, r3
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f7ff ff99 	bl	80055fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80056ca:	2300      	movs	r3, #0
 80056cc:	61fb      	str	r3, [r7, #28]
 80056ce:	e004      	b.n	80056da <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	2200      	movs	r2, #0
 80056d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80056d6:	2301      	movs	r3, #1
 80056d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80056da:	f7fe fccf 	bl	800407c <vPortExitCritical>

	return xReturn;
 80056de:	69fb      	ldr	r3, [r7, #28]
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3720      	adds	r7, #32
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	20003db0 	.word	0x20003db0
 80056ec:	20003dc4 	.word	0x20003dc4

080056f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80056f0:	b480      	push	{r7}
 80056f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80056f4:	4b03      	ldr	r3, [pc, #12]	; (8005704 <vTaskMissedYield+0x14>)
 80056f6:	2201      	movs	r2, #1
 80056f8:	601a      	str	r2, [r3, #0]
}
 80056fa:	bf00      	nop
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr
 8005704:	20003dc0 	.word	0x20003dc0

08005708 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005710:	f000 f852 	bl	80057b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005714:	4b06      	ldr	r3, [pc, #24]	; (8005730 <prvIdleTask+0x28>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d9f9      	bls.n	8005710 <prvIdleTask+0x8>
			{
				taskYIELD();
 800571c:	4b05      	ldr	r3, [pc, #20]	; (8005734 <prvIdleTask+0x2c>)
 800571e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005722:	601a      	str	r2, [r3, #0]
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800572c:	e7f0      	b.n	8005710 <prvIdleTask+0x8>
 800572e:	bf00      	nop
 8005730:	20003cb0 	.word	0x20003cb0
 8005734:	e000ed04 	.word	0xe000ed04

08005738 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800573e:	2300      	movs	r3, #0
 8005740:	607b      	str	r3, [r7, #4]
 8005742:	e00c      	b.n	800575e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	4613      	mov	r3, r2
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	4413      	add	r3, r2
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	4a12      	ldr	r2, [pc, #72]	; (8005798 <prvInitialiseTaskLists+0x60>)
 8005750:	4413      	add	r3, r2
 8005752:	4618      	mov	r0, r3
 8005754:	f7fe faa0 	bl	8003c98 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	3301      	adds	r3, #1
 800575c:	607b      	str	r3, [r7, #4]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2b06      	cmp	r3, #6
 8005762:	d9ef      	bls.n	8005744 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005764:	480d      	ldr	r0, [pc, #52]	; (800579c <prvInitialiseTaskLists+0x64>)
 8005766:	f7fe fa97 	bl	8003c98 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800576a:	480d      	ldr	r0, [pc, #52]	; (80057a0 <prvInitialiseTaskLists+0x68>)
 800576c:	f7fe fa94 	bl	8003c98 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005770:	480c      	ldr	r0, [pc, #48]	; (80057a4 <prvInitialiseTaskLists+0x6c>)
 8005772:	f7fe fa91 	bl	8003c98 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005776:	480c      	ldr	r0, [pc, #48]	; (80057a8 <prvInitialiseTaskLists+0x70>)
 8005778:	f7fe fa8e 	bl	8003c98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800577c:	480b      	ldr	r0, [pc, #44]	; (80057ac <prvInitialiseTaskLists+0x74>)
 800577e:	f7fe fa8b 	bl	8003c98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005782:	4b0b      	ldr	r3, [pc, #44]	; (80057b0 <prvInitialiseTaskLists+0x78>)
 8005784:	4a05      	ldr	r2, [pc, #20]	; (800579c <prvInitialiseTaskLists+0x64>)
 8005786:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005788:	4b0a      	ldr	r3, [pc, #40]	; (80057b4 <prvInitialiseTaskLists+0x7c>)
 800578a:	4a05      	ldr	r2, [pc, #20]	; (80057a0 <prvInitialiseTaskLists+0x68>)
 800578c:	601a      	str	r2, [r3, #0]
}
 800578e:	bf00      	nop
 8005790:	3708      	adds	r7, #8
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	20003cb0 	.word	0x20003cb0
 800579c:	20003d3c 	.word	0x20003d3c
 80057a0:	20003d50 	.word	0x20003d50
 80057a4:	20003d6c 	.word	0x20003d6c
 80057a8:	20003d80 	.word	0x20003d80
 80057ac:	20003d98 	.word	0x20003d98
 80057b0:	20003d64 	.word	0x20003d64
 80057b4:	20003d68 	.word	0x20003d68

080057b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80057be:	e019      	b.n	80057f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80057c0:	f7fe fc2a 	bl	8004018 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80057c4:	4b0f      	ldr	r3, [pc, #60]	; (8005804 <prvCheckTasksWaitingTermination+0x4c>)
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	3304      	adds	r3, #4
 80057d0:	4618      	mov	r0, r3
 80057d2:	f7fe faeb 	bl	8003dac <uxListRemove>
				--uxCurrentNumberOfTasks;
 80057d6:	4b0c      	ldr	r3, [pc, #48]	; (8005808 <prvCheckTasksWaitingTermination+0x50>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	3b01      	subs	r3, #1
 80057dc:	4a0a      	ldr	r2, [pc, #40]	; (8005808 <prvCheckTasksWaitingTermination+0x50>)
 80057de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80057e0:	4b0a      	ldr	r3, [pc, #40]	; (800580c <prvCheckTasksWaitingTermination+0x54>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	3b01      	subs	r3, #1
 80057e6:	4a09      	ldr	r2, [pc, #36]	; (800580c <prvCheckTasksWaitingTermination+0x54>)
 80057e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80057ea:	f7fe fc47 	bl	800407c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f80e 	bl	8005810 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80057f4:	4b05      	ldr	r3, [pc, #20]	; (800580c <prvCheckTasksWaitingTermination+0x54>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d1e1      	bne.n	80057c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80057fc:	bf00      	nop
 80057fe:	3708      	adds	r7, #8
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	20003d80 	.word	0x20003d80
 8005808:	20003dac 	.word	0x20003dac
 800580c:	20003d94 	.word	0x20003d94

08005810 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800581c:	4618      	mov	r0, r3
 800581e:	f7fe f923 	bl	8003a68 <vPortFree>
			vPortFree( pxTCB );
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f7fe f920 	bl	8003a68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005828:	bf00      	nop
 800582a:	3708      	adds	r7, #8
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005836:	4b0f      	ldr	r3, [pc, #60]	; (8005874 <prvResetNextTaskUnblockTime+0x44>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d101      	bne.n	8005844 <prvResetNextTaskUnblockTime+0x14>
 8005840:	2301      	movs	r3, #1
 8005842:	e000      	b.n	8005846 <prvResetNextTaskUnblockTime+0x16>
 8005844:	2300      	movs	r3, #0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d004      	beq.n	8005854 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800584a:	4b0b      	ldr	r3, [pc, #44]	; (8005878 <prvResetNextTaskUnblockTime+0x48>)
 800584c:	f04f 32ff 	mov.w	r2, #4294967295
 8005850:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005852:	e008      	b.n	8005866 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005854:	4b07      	ldr	r3, [pc, #28]	; (8005874 <prvResetNextTaskUnblockTime+0x44>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	4a05      	ldr	r2, [pc, #20]	; (8005878 <prvResetNextTaskUnblockTime+0x48>)
 8005864:	6013      	str	r3, [r2, #0]
}
 8005866:	bf00      	nop
 8005868:	370c      	adds	r7, #12
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	20003d64 	.word	0x20003d64
 8005878:	20003dcc 	.word	0x20003dcc

0800587c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005882:	4b0b      	ldr	r3, [pc, #44]	; (80058b0 <xTaskGetSchedulerState+0x34>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d102      	bne.n	8005890 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800588a:	2301      	movs	r3, #1
 800588c:	607b      	str	r3, [r7, #4]
 800588e:	e008      	b.n	80058a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005890:	4b08      	ldr	r3, [pc, #32]	; (80058b4 <xTaskGetSchedulerState+0x38>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d102      	bne.n	800589e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005898:	2302      	movs	r3, #2
 800589a:	607b      	str	r3, [r7, #4]
 800589c:	e001      	b.n	80058a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800589e:	2300      	movs	r3, #0
 80058a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80058a2:	687b      	ldr	r3, [r7, #4]
	}
 80058a4:	4618      	mov	r0, r3
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr
 80058b0:	20003db8 	.word	0x20003db8
 80058b4:	20003dd4 	.word	0x20003dd4

080058b8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80058c4:	2300      	movs	r3, #0
 80058c6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d06e      	beq.n	80059ac <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058d2:	4b39      	ldr	r3, [pc, #228]	; (80059b8 <xTaskPriorityInherit+0x100>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d8:	429a      	cmp	r2, r3
 80058da:	d25e      	bcs.n	800599a <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	699b      	ldr	r3, [r3, #24]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	db06      	blt.n	80058f2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058e4:	4b34      	ldr	r3, [pc, #208]	; (80059b8 <xTaskPriorityInherit+0x100>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ea:	f1c3 0207 	rsb	r2, r3, #7
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	6959      	ldr	r1, [r3, #20]
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058fa:	4613      	mov	r3, r2
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	4413      	add	r3, r2
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	4a2e      	ldr	r2, [pc, #184]	; (80059bc <xTaskPriorityInherit+0x104>)
 8005904:	4413      	add	r3, r2
 8005906:	4299      	cmp	r1, r3
 8005908:	d101      	bne.n	800590e <xTaskPriorityInherit+0x56>
 800590a:	2301      	movs	r3, #1
 800590c:	e000      	b.n	8005910 <xTaskPriorityInherit+0x58>
 800590e:	2300      	movs	r3, #0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d03a      	beq.n	800598a <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	3304      	adds	r3, #4
 8005918:	4618      	mov	r0, r3
 800591a:	f7fe fa47 	bl	8003dac <uxListRemove>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d115      	bne.n	8005950 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005928:	4924      	ldr	r1, [pc, #144]	; (80059bc <xTaskPriorityInherit+0x104>)
 800592a:	4613      	mov	r3, r2
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	4413      	add	r3, r2
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	440b      	add	r3, r1
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d10a      	bne.n	8005950 <xTaskPriorityInherit+0x98>
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593e:	2201      	movs	r2, #1
 8005940:	fa02 f303 	lsl.w	r3, r2, r3
 8005944:	43da      	mvns	r2, r3
 8005946:	4b1e      	ldr	r3, [pc, #120]	; (80059c0 <xTaskPriorityInherit+0x108>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4013      	ands	r3, r2
 800594c:	4a1c      	ldr	r2, [pc, #112]	; (80059c0 <xTaskPriorityInherit+0x108>)
 800594e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005950:	4b19      	ldr	r3, [pc, #100]	; (80059b8 <xTaskPriorityInherit+0x100>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595e:	2201      	movs	r2, #1
 8005960:	409a      	lsls	r2, r3
 8005962:	4b17      	ldr	r3, [pc, #92]	; (80059c0 <xTaskPriorityInherit+0x108>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4313      	orrs	r3, r2
 8005968:	4a15      	ldr	r2, [pc, #84]	; (80059c0 <xTaskPriorityInherit+0x108>)
 800596a:	6013      	str	r3, [r2, #0]
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005970:	4613      	mov	r3, r2
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	4413      	add	r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4a10      	ldr	r2, [pc, #64]	; (80059bc <xTaskPriorityInherit+0x104>)
 800597a:	441a      	add	r2, r3
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	3304      	adds	r3, #4
 8005980:	4619      	mov	r1, r3
 8005982:	4610      	mov	r0, r2
 8005984:	f7fe f9b5 	bl	8003cf2 <vListInsertEnd>
 8005988:	e004      	b.n	8005994 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800598a:	4b0b      	ldr	r3, [pc, #44]	; (80059b8 <xTaskPriorityInherit+0x100>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005994:	2301      	movs	r3, #1
 8005996:	60fb      	str	r3, [r7, #12]
 8005998:	e008      	b.n	80059ac <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800599e:	4b06      	ldr	r3, [pc, #24]	; (80059b8 <xTaskPriorityInherit+0x100>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d201      	bcs.n	80059ac <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80059a8:	2301      	movs	r3, #1
 80059aa:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80059ac:	68fb      	ldr	r3, [r7, #12]
	}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3710      	adds	r7, #16
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	20003cac 	.word	0x20003cac
 80059bc:	20003cb0 	.word	0x20003cb0
 80059c0:	20003db4 	.word	0x20003db4

080059c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b086      	sub	sp, #24
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80059d0:	2300      	movs	r3, #0
 80059d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d070      	beq.n	8005abc <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80059da:	4b3b      	ldr	r3, [pc, #236]	; (8005ac8 <xTaskPriorityDisinherit+0x104>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	693a      	ldr	r2, [r7, #16]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d00b      	beq.n	80059fc <xTaskPriorityDisinherit+0x38>
 80059e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e8:	b672      	cpsid	i
 80059ea:	f383 8811 	msr	BASEPRI, r3
 80059ee:	f3bf 8f6f 	isb	sy
 80059f2:	f3bf 8f4f 	dsb	sy
 80059f6:	b662      	cpsie	i
 80059f8:	60fb      	str	r3, [r7, #12]
 80059fa:	e7fe      	b.n	80059fa <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d10b      	bne.n	8005a1c <xTaskPriorityDisinherit+0x58>
 8005a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a08:	b672      	cpsid	i
 8005a0a:	f383 8811 	msr	BASEPRI, r3
 8005a0e:	f3bf 8f6f 	isb	sy
 8005a12:	f3bf 8f4f 	dsb	sy
 8005a16:	b662      	cpsie	i
 8005a18:	60bb      	str	r3, [r7, #8]
 8005a1a:	e7fe      	b.n	8005a1a <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a20:	1e5a      	subs	r2, r3, #1
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d044      	beq.n	8005abc <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d140      	bne.n	8005abc <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	3304      	adds	r3, #4
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f7fe f9b4 	bl	8003dac <uxListRemove>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d115      	bne.n	8005a76 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a4e:	491f      	ldr	r1, [pc, #124]	; (8005acc <xTaskPriorityDisinherit+0x108>)
 8005a50:	4613      	mov	r3, r2
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	4413      	add	r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	440b      	add	r3, r1
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d10a      	bne.n	8005a76 <xTaskPriorityDisinherit+0xb2>
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a64:	2201      	movs	r2, #1
 8005a66:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6a:	43da      	mvns	r2, r3
 8005a6c:	4b18      	ldr	r3, [pc, #96]	; (8005ad0 <xTaskPriorityDisinherit+0x10c>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4013      	ands	r3, r2
 8005a72:	4a17      	ldr	r2, [pc, #92]	; (8005ad0 <xTaskPriorityDisinherit+0x10c>)
 8005a74:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a82:	f1c3 0207 	rsb	r2, r3, #7
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8e:	2201      	movs	r2, #1
 8005a90:	409a      	lsls	r2, r3
 8005a92:	4b0f      	ldr	r3, [pc, #60]	; (8005ad0 <xTaskPriorityDisinherit+0x10c>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	4a0d      	ldr	r2, [pc, #52]	; (8005ad0 <xTaskPriorityDisinherit+0x10c>)
 8005a9a:	6013      	str	r3, [r2, #0]
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	4413      	add	r3, r2
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	4a08      	ldr	r2, [pc, #32]	; (8005acc <xTaskPriorityDisinherit+0x108>)
 8005aaa:	441a      	add	r2, r3
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	3304      	adds	r3, #4
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	4610      	mov	r0, r2
 8005ab4:	f7fe f91d 	bl	8003cf2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005abc:	697b      	ldr	r3, [r7, #20]
	}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3718      	adds	r7, #24
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	20003cac 	.word	0x20003cac
 8005acc:	20003cb0 	.word	0x20003cb0
 8005ad0:	20003db4 	.word	0x20003db4

08005ad4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b088      	sub	sp, #32
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	f000 808a 	beq.w	8005c02 <vTaskPriorityDisinheritAfterTimeout+0x12e>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d10b      	bne.n	8005b0e <vTaskPriorityDisinheritAfterTimeout+0x3a>
 8005af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005afa:	b672      	cpsid	i
 8005afc:	f383 8811 	msr	BASEPRI, r3
 8005b00:	f3bf 8f6f 	isb	sy
 8005b04:	f3bf 8f4f 	dsb	sy
 8005b08:	b662      	cpsie	i
 8005b0a:	60fb      	str	r3, [r7, #12]
 8005b0c:	e7fe      	b.n	8005b0c <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b12:	683a      	ldr	r2, [r7, #0]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d902      	bls.n	8005b1e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	61fb      	str	r3, [r7, #28]
 8005b1c:	e002      	b.n	8005b24 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b22:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b28:	69fa      	ldr	r2, [r7, #28]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d069      	beq.n	8005c02 <vTaskPriorityDisinheritAfterTimeout+0x12e>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d164      	bne.n	8005c02 <vTaskPriorityDisinheritAfterTimeout+0x12e>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005b38:	4b34      	ldr	r3, [pc, #208]	; (8005c0c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	69ba      	ldr	r2, [r7, #24]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d10b      	bne.n	8005b5a <vTaskPriorityDisinheritAfterTimeout+0x86>
 8005b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b46:	b672      	cpsid	i
 8005b48:	f383 8811 	msr	BASEPRI, r3
 8005b4c:	f3bf 8f6f 	isb	sy
 8005b50:	f3bf 8f4f 	dsb	sy
 8005b54:	b662      	cpsie	i
 8005b56:	60bb      	str	r3, [r7, #8]
 8005b58:	e7fe      	b.n	8005b58 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	69fa      	ldr	r2, [r7, #28]
 8005b64:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	db04      	blt.n	8005b78 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	f1c3 0207 	rsb	r2, r3, #7
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	6959      	ldr	r1, [r3, #20]
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	4613      	mov	r3, r2
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	4413      	add	r3, r2
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	4a22      	ldr	r2, [pc, #136]	; (8005c10 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8005b88:	4413      	add	r3, r2
 8005b8a:	4299      	cmp	r1, r3
 8005b8c:	d101      	bne.n	8005b92 <vTaskPriorityDisinheritAfterTimeout+0xbe>
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e000      	b.n	8005b94 <vTaskPriorityDisinheritAfterTimeout+0xc0>
 8005b92:	2300      	movs	r3, #0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d034      	beq.n	8005c02 <vTaskPriorityDisinheritAfterTimeout+0x12e>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	3304      	adds	r3, #4
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f7fe f905 	bl	8003dac <uxListRemove>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d115      	bne.n	8005bd4 <vTaskPriorityDisinheritAfterTimeout+0x100>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bac:	4918      	ldr	r1, [pc, #96]	; (8005c10 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8005bae:	4613      	mov	r3, r2
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	4413      	add	r3, r2
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	440b      	add	r3, r1
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d10a      	bne.n	8005bd4 <vTaskPriorityDisinheritAfterTimeout+0x100>
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc8:	43da      	mvns	r2, r3
 8005bca:	4b12      	ldr	r3, [pc, #72]	; (8005c14 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4013      	ands	r3, r2
 8005bd0:	4a10      	ldr	r2, [pc, #64]	; (8005c14 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8005bd2:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd8:	2201      	movs	r2, #1
 8005bda:	409a      	lsls	r2, r3
 8005bdc:	4b0d      	ldr	r3, [pc, #52]	; (8005c14 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	4a0c      	ldr	r2, [pc, #48]	; (8005c14 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8005be4:	6013      	str	r3, [r2, #0]
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bea:	4613      	mov	r3, r2
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	4413      	add	r3, r2
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	4a07      	ldr	r2, [pc, #28]	; (8005c10 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8005bf4:	441a      	add	r2, r3
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	3304      	adds	r3, #4
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	4610      	mov	r0, r2
 8005bfe:	f7fe f878 	bl	8003cf2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c02:	bf00      	nop
 8005c04:	3720      	adds	r7, #32
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	20003cac 	.word	0x20003cac
 8005c10:	20003cb0 	.word	0x20003cb0
 8005c14:	20003db4 	.word	0x20003db4

08005c18 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8005c18:	b480      	push	{r7}
 8005c1a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005c1c:	4b07      	ldr	r3, [pc, #28]	; (8005c3c <pvTaskIncrementMutexHeldCount+0x24>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d004      	beq.n	8005c2e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005c24:	4b05      	ldr	r3, [pc, #20]	; (8005c3c <pvTaskIncrementMutexHeldCount+0x24>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c2a:	3201      	adds	r2, #1
 8005c2c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8005c2e:	4b03      	ldr	r3, [pc, #12]	; (8005c3c <pvTaskIncrementMutexHeldCount+0x24>)
 8005c30:	681b      	ldr	r3, [r3, #0]
	}
 8005c32:	4618      	mov	r0, r3
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr
 8005c3c:	20003cac 	.word	0x20003cac

08005c40 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005c4a:	4b29      	ldr	r3, [pc, #164]	; (8005cf0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c50:	4b28      	ldr	r3, [pc, #160]	; (8005cf4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	3304      	adds	r3, #4
 8005c56:	4618      	mov	r0, r3
 8005c58:	f7fe f8a8 	bl	8003dac <uxListRemove>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d10b      	bne.n	8005c7a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005c62:	4b24      	ldr	r3, [pc, #144]	; (8005cf4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c68:	2201      	movs	r2, #1
 8005c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c6e:	43da      	mvns	r2, r3
 8005c70:	4b21      	ldr	r3, [pc, #132]	; (8005cf8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4013      	ands	r3, r2
 8005c76:	4a20      	ldr	r2, [pc, #128]	; (8005cf8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005c78:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c80:	d10a      	bne.n	8005c98 <prvAddCurrentTaskToDelayedList+0x58>
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d007      	beq.n	8005c98 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c88:	4b1a      	ldr	r3, [pc, #104]	; (8005cf4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	3304      	adds	r3, #4
 8005c8e:	4619      	mov	r1, r3
 8005c90:	481a      	ldr	r0, [pc, #104]	; (8005cfc <prvAddCurrentTaskToDelayedList+0xbc>)
 8005c92:	f7fe f82e 	bl	8003cf2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005c96:	e026      	b.n	8005ce6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005ca0:	4b14      	ldr	r3, [pc, #80]	; (8005cf4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68ba      	ldr	r2, [r7, #8]
 8005ca6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005ca8:	68ba      	ldr	r2, [r7, #8]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d209      	bcs.n	8005cc4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cb0:	4b13      	ldr	r3, [pc, #76]	; (8005d00 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	4b0f      	ldr	r3, [pc, #60]	; (8005cf4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	3304      	adds	r3, #4
 8005cba:	4619      	mov	r1, r3
 8005cbc:	4610      	mov	r0, r2
 8005cbe:	f7fe f83c 	bl	8003d3a <vListInsert>
}
 8005cc2:	e010      	b.n	8005ce6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cc4:	4b0f      	ldr	r3, [pc, #60]	; (8005d04 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	4b0a      	ldr	r3, [pc, #40]	; (8005cf4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	3304      	adds	r3, #4
 8005cce:	4619      	mov	r1, r3
 8005cd0:	4610      	mov	r0, r2
 8005cd2:	f7fe f832 	bl	8003d3a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005cd6:	4b0c      	ldr	r3, [pc, #48]	; (8005d08 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68ba      	ldr	r2, [r7, #8]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d202      	bcs.n	8005ce6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005ce0:	4a09      	ldr	r2, [pc, #36]	; (8005d08 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	6013      	str	r3, [r2, #0]
}
 8005ce6:	bf00      	nop
 8005ce8:	3710      	adds	r7, #16
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	20003db0 	.word	0x20003db0
 8005cf4:	20003cac 	.word	0x20003cac
 8005cf8:	20003db4 	.word	0x20003db4
 8005cfc:	20003d98 	.word	0x20003d98
 8005d00:	20003d68 	.word	0x20003d68
 8005d04:	20003d64 	.word	0x20003d64
 8005d08:	20003dcc 	.word	0x20003dcc

08005d0c <init>:
#include "linked_list.h"
#include <stdio.h>
#include <stdlib.h>

void init(node_t **head)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
    *head = NULL;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	601a      	str	r2, [r3, #0]
}
 8005d1a:	bf00      	nop
 8005d1c:	370c      	adds	r7, #12
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr

08005d26 <push_back>:

void push_back(node_t **head, int new_data)
{
 8005d26:	b580      	push	{r7, lr}
 8005d28:	b084      	sub	sp, #16
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
 8005d2e:	6039      	str	r1, [r7, #0]

    node_t *new_node = (node_t *) pvPortMalloc(sizeof(node_t));
 8005d30:	2008      	movs	r0, #8
 8005d32:	f7fd fdd1 	bl	80038d8 <pvPortMalloc>
 8005d36:	4603      	mov	r3, r0
 8005d38:	60bb      	str	r3, [r7, #8]
    new_node->data = new_data;
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	683a      	ldr	r2, [r7, #0]
 8005d3e:	601a      	str	r2, [r3, #0]
    new_node->next = NULL;
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	2200      	movs	r2, #0
 8005d44:	605a      	str	r2, [r3, #4]

    if (*head == NULL) {
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d103      	bne.n	8005d56 <push_back+0x30>
        *head = new_node;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	68ba      	ldr	r2, [r7, #8]
 8005d52:	601a      	str	r2, [r3, #0]
        return;
 8005d54:	e00d      	b.n	8005d72 <push_back+0x4c>
    }

    node_t *ptr = *head;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	60fb      	str	r3, [r7, #12]
    while (ptr->next != NULL) {
 8005d5c:	e002      	b.n	8005d64 <push_back+0x3e>
        ptr = ptr->next;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	60fb      	str	r3, [r7, #12]
    while (ptr->next != NULL) {
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d1f8      	bne.n	8005d5e <push_back+0x38>
    }
    ptr->next = new_node;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	68ba      	ldr	r2, [r7, #8]
 8005d70:	605a      	str	r2, [r3, #4]


}
 8005d72:	3710      	adds	r7, #16
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <print>:
{
    return head == NULL;
}

void print(node_t *head)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b082      	sub	sp, #8
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
    while (head != NULL) {
 8005d80:	e008      	b.n	8005d94 <print+0x1c>
        printf(" %d \n", head->data);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4619      	mov	r1, r3
 8005d88:	4807      	ldr	r0, [pc, #28]	; (8005da8 <print+0x30>)
 8005d8a:	f000 fe93 	bl	8006ab4 <iprintf>
        head = head->next;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	607b      	str	r3, [r7, #4]
    while (head != NULL) {
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d1f3      	bne.n	8005d82 <print+0xa>
    }
    printf("\n");
 8005d9a:	200a      	movs	r0, #10
 8005d9c:	f000 fea2 	bl	8006ae4 <putchar>

}
 8005da0:	bf00      	nop
 8005da2:	3708      	adds	r7, #8
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	08007930 	.word	0x08007930

08005dac <pop_back>:
    ptr->next = new_node;

}


int pop_back(node_t** head){
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
    node_t* ptr = *head;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	60fb      	str	r3, [r7, #12]
    int deleted;
    if(ptr->next == NULL){
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d10a      	bne.n	8005dd8 <pop_back+0x2c>
       // printf("Last element");
        //ptr == NULL;
        deleted = ptr->data;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	60bb      	str	r3, [r7, #8]
        //vPortFree((void*)head);
        *head = NULL;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	601a      	str	r2, [r3, #0]
        return deleted;
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	e013      	b.n	8005dfa <pop_back+0x4e>
    }
    while (ptr->next->next != NULL){
        ptr = ptr->next;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	60fb      	str	r3, [r7, #12]
    while (ptr->next->next != NULL){
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d1f7      	bne.n	8005dd2 <pop_back+0x26>
    }
    deleted = ptr->data;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	60bb      	str	r3, [r7, #8]
    vPortFree(ptr->next);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	4618      	mov	r0, r3
 8005dee:	f7fd fe3b 	bl	8003a68 <vPortFree>
    ptr->next = NULL;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2200      	movs	r2, #0
 8005df6:	605a      	str	r2, [r3, #4]
    return deleted;
 8005df8:	68bb      	ldr	r3, [r7, #8]
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3710      	adds	r7, #16
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
	...

08005e04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005e04:	b5b0      	push	{r4, r5, r7, lr}
 8005e06:	b0a0      	sub	sp, #128	; 0x80
 8005e08:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005e0a:	f7fa fbd1 	bl	80005b0 <HAL_Init>

  /* USER CODE BEGIN Init */
  init(&head);
 8005e0e:	4841      	ldr	r0, [pc, #260]	; (8005f14 <main+0x110>)
 8005e10:	f7ff ff7c 	bl	8005d0c <init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005e14:	f000 f89e 	bl	8005f54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005e18:	f000 f9c6 	bl	80061a8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8005e1c:	f000 f994 	bl	8006148 <MX_USART1_UART_Init>
  MX_RNG_Init();
 8005e20:	f000 f92e 	bl	8006080 <MX_RNG_Init>
  MX_TIM5_Init();
 8005e24:	f000 f940 	bl	80060a8 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart1, &character, 1);
 8005e28:	2201      	movs	r2, #1
 8005e2a:	493b      	ldr	r1, [pc, #236]	; (8005f18 <main+0x114>)
 8005e2c:	483b      	ldr	r0, [pc, #236]	; (8005f1c <main+0x118>)
 8005e2e:	f7fc fd4f 	bl	80028d0 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of LinkedListMutex */
  osMutexDef(LinkedListMutex);
 8005e32:	2300      	movs	r3, #0
 8005e34:	67fb      	str	r3, [r7, #124]	; 0x7c
  LinkedListMutexHandle = osMutexCreate(osMutex(LinkedListMutex));
 8005e36:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f7fd fcbb 	bl	80037b6 <osMutexCreate>
 8005e40:	4602      	mov	r2, r0
 8005e42:	4b37      	ldr	r3, [pc, #220]	; (8005f20 <main+0x11c>)
 8005e44:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8005e46:	4b37      	ldr	r3, [pc, #220]	; (8005f24 <main+0x120>)
 8005e48:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8005e4c:	461d      	mov	r5, r3
 8005e4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e52:	682b      	ldr	r3, [r5, #0]
 8005e54:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8005e56:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005e5a:	2100      	movs	r1, #0
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f7fd fc63 	bl	8003728 <osThreadCreate>
 8005e62:	4602      	mov	r2, r0
 8005e64:	4b30      	ldr	r3, [pc, #192]	; (8005f28 <main+0x124>)
 8005e66:	601a      	str	r2, [r3, #0]

  /* definition and creation of Printer */
  osThreadDef(Printer, StartPrinter, osPriorityNormal, 0, 512);
 8005e68:	4b30      	ldr	r3, [pc, #192]	; (8005f2c <main+0x128>)
 8005e6a:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8005e6e:	461d      	mov	r5, r3
 8005e70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e74:	682b      	ldr	r3, [r5, #0]
 8005e76:	6023      	str	r3, [r4, #0]
  PrinterHandle = osThreadCreate(osThread(Printer), NULL);
 8005e78:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005e7c:	2100      	movs	r1, #0
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f7fd fc52 	bl	8003728 <osThreadCreate>
 8005e84:	4602      	mov	r2, r0
 8005e86:	4b2a      	ldr	r3, [pc, #168]	; (8005f30 <main+0x12c>)
 8005e88:	601a      	str	r2, [r3, #0]

  /* definition and creation of PushBack */
  osThreadDef(PushBack, StartPushBack, osPriorityNormal, 0, 512);
 8005e8a:	4b2a      	ldr	r3, [pc, #168]	; (8005f34 <main+0x130>)
 8005e8c:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8005e90:	461d      	mov	r5, r3
 8005e92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e96:	682b      	ldr	r3, [r5, #0]
 8005e98:	6023      	str	r3, [r4, #0]
  PushBackHandle = osThreadCreate(osThread(PushBack), NULL);
 8005e9a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005e9e:	2100      	movs	r1, #0
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7fd fc41 	bl	8003728 <osThreadCreate>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	4b23      	ldr	r3, [pc, #140]	; (8005f38 <main+0x134>)
 8005eaa:	601a      	str	r2, [r3, #0]

  /* definition and creation of Commander */
  osThreadDef(Commander, StartCommander, osPriorityNormal, 0, 512);
 8005eac:	4b23      	ldr	r3, [pc, #140]	; (8005f3c <main+0x138>)
 8005eae:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8005eb2:	461d      	mov	r5, r3
 8005eb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005eb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005eb8:	682b      	ldr	r3, [r5, #0]
 8005eba:	6023      	str	r3, [r4, #0]
  CommanderHandle = osThreadCreate(osThread(Commander), NULL);
 8005ebc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005ec0:	2100      	movs	r1, #0
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7fd fc30 	bl	8003728 <osThreadCreate>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	4b1d      	ldr	r3, [pc, #116]	; (8005f40 <main+0x13c>)
 8005ecc:	601a      	str	r2, [r3, #0]

  /* definition and creation of TimerStarter */
  osThreadDef(TimerStarter, StartTimerStarter, osPriorityNormal, 0, 512);
 8005ece:	4b1d      	ldr	r3, [pc, #116]	; (8005f44 <main+0x140>)
 8005ed0:	f107 0418 	add.w	r4, r7, #24
 8005ed4:	461d      	mov	r5, r3
 8005ed6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ed8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005eda:	682b      	ldr	r3, [r5, #0]
 8005edc:	6023      	str	r3, [r4, #0]
  TimerStarterHandle = osThreadCreate(osThread(TimerStarter), NULL);
 8005ede:	f107 0318 	add.w	r3, r7, #24
 8005ee2:	2100      	movs	r1, #0
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f7fd fc1f 	bl	8003728 <osThreadCreate>
 8005eea:	4602      	mov	r2, r0
 8005eec:	4b16      	ldr	r3, [pc, #88]	; (8005f48 <main+0x144>)
 8005eee:	601a      	str	r2, [r3, #0]

  /* definition and creation of PopBack */
  osThreadDef(PopBack, StartPopBack, osPriorityNormal, 0, 512);
 8005ef0:	4b16      	ldr	r3, [pc, #88]	; (8005f4c <main+0x148>)
 8005ef2:	1d3c      	adds	r4, r7, #4
 8005ef4:	461d      	mov	r5, r3
 8005ef6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ef8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005efa:	682b      	ldr	r3, [r5, #0]
 8005efc:	6023      	str	r3, [r4, #0]
  PopBackHandle = osThreadCreate(osThread(PopBack), NULL);
 8005efe:	1d3b      	adds	r3, r7, #4
 8005f00:	2100      	movs	r1, #0
 8005f02:	4618      	mov	r0, r3
 8005f04:	f7fd fc10 	bl	8003728 <osThreadCreate>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	4b11      	ldr	r3, [pc, #68]	; (8005f50 <main+0x14c>)
 8005f0c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8005f0e:	f7fd fc04 	bl	800371a <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005f12:	e7fe      	b.n	8005f12 <main+0x10e>
 8005f14:	20003f54 	.word	0x20003f54
 8005f18:	20003e00 	.word	0x20003e00
 8005f1c:	20003f58 	.word	0x20003f58
 8005f20:	20003e08 	.word	0x20003e08
 8005f24:	08007944 	.word	0x08007944
 8005f28:	20003dfc 	.word	0x20003dfc
 8005f2c:	08007960 	.word	0x08007960
 8005f30:	20003df8 	.word	0x20003df8
 8005f34:	08007980 	.word	0x08007980
 8005f38:	20003fe8 	.word	0x20003fe8
 8005f3c:	080079a0 	.word	0x080079a0
 8005f40:	20003e50 	.word	0x20003e50
 8005f44:	080079c4 	.word	0x080079c4
 8005f48:	20003e0c 	.word	0x20003e0c
 8005f4c:	080079e0 	.word	0x080079e0
 8005f50:	20003e04 	.word	0x20003e04

08005f54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b0b4      	sub	sp, #208	; 0xd0
 8005f58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005f5a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005f5e:	2230      	movs	r2, #48	; 0x30
 8005f60:	2100      	movs	r1, #0
 8005f62:	4618      	mov	r0, r3
 8005f64:	f000 fd9d 	bl	8006aa2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005f68:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	601a      	str	r2, [r3, #0]
 8005f70:	605a      	str	r2, [r3, #4]
 8005f72:	609a      	str	r2, [r3, #8]
 8005f74:	60da      	str	r2, [r3, #12]
 8005f76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005f78:	f107 0308 	add.w	r3, r7, #8
 8005f7c:	2284      	movs	r2, #132	; 0x84
 8005f7e:	2100      	movs	r1, #0
 8005f80:	4618      	mov	r0, r3
 8005f82:	f000 fd8e 	bl	8006aa2 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005f86:	4b3b      	ldr	r3, [pc, #236]	; (8006074 <SystemClock_Config+0x120>)
 8005f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8a:	4a3a      	ldr	r2, [pc, #232]	; (8006074 <SystemClock_Config+0x120>)
 8005f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f90:	6413      	str	r3, [r2, #64]	; 0x40
 8005f92:	4b38      	ldr	r3, [pc, #224]	; (8006074 <SystemClock_Config+0x120>)
 8005f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f9a:	607b      	str	r3, [r7, #4]
 8005f9c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8005f9e:	4b36      	ldr	r3, [pc, #216]	; (8006078 <SystemClock_Config+0x124>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005fa6:	4a34      	ldr	r2, [pc, #208]	; (8006078 <SystemClock_Config+0x124>)
 8005fa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005fac:	6013      	str	r3, [r2, #0]
 8005fae:	4b32      	ldr	r3, [pc, #200]	; (8006078 <SystemClock_Config+0x124>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005fb6:	603b      	str	r3, [r7, #0]
 8005fb8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005fba:	2302      	movs	r3, #2
 8005fbc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005fc6:	2310      	movs	r3, #16
 8005fc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005fcc:	2302      	movs	r3, #2
 8005fce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005fd8:	2308      	movs	r3, #8
 8005fda:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 50;
 8005fde:	2332      	movs	r3, #50	; 0x32
 8005fe0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8005fea:	2303      	movs	r3, #3
 8005fec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005ff0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f7fa fe37 	bl	8000c68 <HAL_RCC_OscConfig>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d001      	beq.n	8006004 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8006000:	f000 faaa 	bl	8006558 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8006004:	f7fa fde0 	bl	8000bc8 <HAL_PWREx_EnableOverDrive>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d001      	beq.n	8006012 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800600e:	f000 faa3 	bl	8006558 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006012:	230f      	movs	r3, #15
 8006014:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006018:	2302      	movs	r3, #2
 800601a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800601e:	2300      	movs	r3, #0
 8006020:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006024:	2300      	movs	r3, #0
 8006026:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800602a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800602e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8006032:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006036:	2101      	movs	r1, #1
 8006038:	4618      	mov	r0, r3
 800603a:	f7fb f885 	bl	8001148 <HAL_RCC_ClockConfig>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d001      	beq.n	8006048 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8006044:	f000 fa88 	bl	8006558 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_CLK48;
 8006048:	4b0c      	ldr	r3, [pc, #48]	; (800607c <SystemClock_Config+0x128>)
 800604a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800604c:	2300      	movs	r3, #0
 800604e:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8006050:	2300      	movs	r3, #0
 8006052:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006056:	f107 0308 	add.w	r3, r7, #8
 800605a:	4618      	mov	r0, r3
 800605c:	f7fb fa74 	bl	8001548 <HAL_RCCEx_PeriphCLKConfig>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d001      	beq.n	800606a <SystemClock_Config+0x116>
  {
    Error_Handler();
 8006066:	f000 fa77 	bl	8006558 <Error_Handler>
  }
}
 800606a:	bf00      	nop
 800606c:	37d0      	adds	r7, #208	; 0xd0
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	40023800 	.word	0x40023800
 8006078:	40007000 	.word	0x40007000
 800607c:	00200040 	.word	0x00200040

08006080 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8006084:	4b06      	ldr	r3, [pc, #24]	; (80060a0 <MX_RNG_Init+0x20>)
 8006086:	4a07      	ldr	r2, [pc, #28]	; (80060a4 <MX_RNG_Init+0x24>)
 8006088:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800608a:	4805      	ldr	r0, [pc, #20]	; (80060a0 <MX_RNG_Init+0x20>)
 800608c:	f7fb fe4a 	bl	8001d24 <HAL_RNG_Init>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d001      	beq.n	800609a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8006096:	f000 fa5f 	bl	8006558 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800609a:	bf00      	nop
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	20003fd8 	.word	0x20003fd8
 80060a4:	50060800 	.word	0x50060800

080060a8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b088      	sub	sp, #32
 80060ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80060ae:	f107 0310 	add.w	r3, r7, #16
 80060b2:	2200      	movs	r2, #0
 80060b4:	601a      	str	r2, [r3, #0]
 80060b6:	605a      	str	r2, [r3, #4]
 80060b8:	609a      	str	r2, [r3, #8]
 80060ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80060bc:	1d3b      	adds	r3, r7, #4
 80060be:	2200      	movs	r2, #0
 80060c0:	601a      	str	r2, [r3, #0]
 80060c2:	605a      	str	r2, [r3, #4]
 80060c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80060c6:	4b1e      	ldr	r3, [pc, #120]	; (8006140 <MX_TIM5_Init+0x98>)
 80060c8:	4a1e      	ldr	r2, [pc, #120]	; (8006144 <MX_TIM5_Init+0x9c>)
 80060ca:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 50000-1;
 80060cc:	4b1c      	ldr	r3, [pc, #112]	; (8006140 <MX_TIM5_Init+0x98>)
 80060ce:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80060d2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80060d4:	4b1a      	ldr	r3, [pc, #104]	; (8006140 <MX_TIM5_Init+0x98>)
 80060d6:	2200      	movs	r2, #0
 80060d8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 80060da:	4b19      	ldr	r3, [pc, #100]	; (8006140 <MX_TIM5_Init+0x98>)
 80060dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80060e0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80060e2:	4b17      	ldr	r3, [pc, #92]	; (8006140 <MX_TIM5_Init+0x98>)
 80060e4:	2200      	movs	r2, #0
 80060e6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80060e8:	4b15      	ldr	r3, [pc, #84]	; (8006140 <MX_TIM5_Init+0x98>)
 80060ea:	2200      	movs	r2, #0
 80060ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80060ee:	4814      	ldr	r0, [pc, #80]	; (8006140 <MX_TIM5_Init+0x98>)
 80060f0:	f7fb fea6 	bl	8001e40 <HAL_TIM_Base_Init>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d001      	beq.n	80060fe <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 80060fa:	f000 fa2d 	bl	8006558 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80060fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006102:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8006104:	f107 0310 	add.w	r3, r7, #16
 8006108:	4619      	mov	r1, r3
 800610a:	480d      	ldr	r0, [pc, #52]	; (8006140 <MX_TIM5_Init+0x98>)
 800610c:	f7fc f80e 	bl	800212c <HAL_TIM_ConfigClockSource>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d001      	beq.n	800611a <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8006116:	f000 fa1f 	bl	8006558 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800611a:	2300      	movs	r3, #0
 800611c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800611e:	2300      	movs	r3, #0
 8006120:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8006122:	1d3b      	adds	r3, r7, #4
 8006124:	4619      	mov	r1, r3
 8006126:	4806      	ldr	r0, [pc, #24]	; (8006140 <MX_TIM5_Init+0x98>)
 8006128:	f7fc fa1c 	bl	8002564 <HAL_TIMEx_MasterConfigSynchronization>
 800612c:	4603      	mov	r3, r0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d001      	beq.n	8006136 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8006132:	f000 fa11 	bl	8006558 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8006136:	bf00      	nop
 8006138:	3720      	adds	r7, #32
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	20003e10 	.word	0x20003e10
 8006144:	40000c00 	.word	0x40000c00

08006148 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800614c:	4b14      	ldr	r3, [pc, #80]	; (80061a0 <MX_USART1_UART_Init+0x58>)
 800614e:	4a15      	ldr	r2, [pc, #84]	; (80061a4 <MX_USART1_UART_Init+0x5c>)
 8006150:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006152:	4b13      	ldr	r3, [pc, #76]	; (80061a0 <MX_USART1_UART_Init+0x58>)
 8006154:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006158:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800615a:	4b11      	ldr	r3, [pc, #68]	; (80061a0 <MX_USART1_UART_Init+0x58>)
 800615c:	2200      	movs	r2, #0
 800615e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006160:	4b0f      	ldr	r3, [pc, #60]	; (80061a0 <MX_USART1_UART_Init+0x58>)
 8006162:	2200      	movs	r2, #0
 8006164:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006166:	4b0e      	ldr	r3, [pc, #56]	; (80061a0 <MX_USART1_UART_Init+0x58>)
 8006168:	2200      	movs	r2, #0
 800616a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800616c:	4b0c      	ldr	r3, [pc, #48]	; (80061a0 <MX_USART1_UART_Init+0x58>)
 800616e:	220c      	movs	r2, #12
 8006170:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006172:	4b0b      	ldr	r3, [pc, #44]	; (80061a0 <MX_USART1_UART_Init+0x58>)
 8006174:	2200      	movs	r2, #0
 8006176:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006178:	4b09      	ldr	r3, [pc, #36]	; (80061a0 <MX_USART1_UART_Init+0x58>)
 800617a:	2200      	movs	r2, #0
 800617c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800617e:	4b08      	ldr	r3, [pc, #32]	; (80061a0 <MX_USART1_UART_Init+0x58>)
 8006180:	2200      	movs	r2, #0
 8006182:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006184:	4b06      	ldr	r3, [pc, #24]	; (80061a0 <MX_USART1_UART_Init+0x58>)
 8006186:	2200      	movs	r2, #0
 8006188:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800618a:	4805      	ldr	r0, [pc, #20]	; (80061a0 <MX_USART1_UART_Init+0x58>)
 800618c:	f7fc fa64 	bl	8002658 <HAL_UART_Init>
 8006190:	4603      	mov	r3, r0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d001      	beq.n	800619a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8006196:	f000 f9df 	bl	8006558 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800619a:	bf00      	nop
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	20003f58 	.word	0x20003f58
 80061a4:	40011000 	.word	0x40011000

080061a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b08a      	sub	sp, #40	; 0x28
 80061ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061ae:	f107 0314 	add.w	r3, r7, #20
 80061b2:	2200      	movs	r2, #0
 80061b4:	601a      	str	r2, [r3, #0]
 80061b6:	605a      	str	r2, [r3, #4]
 80061b8:	609a      	str	r2, [r3, #8]
 80061ba:	60da      	str	r2, [r3, #12]
 80061bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80061be:	4b2a      	ldr	r3, [pc, #168]	; (8006268 <MX_GPIO_Init+0xc0>)
 80061c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c2:	4a29      	ldr	r2, [pc, #164]	; (8006268 <MX_GPIO_Init+0xc0>)
 80061c4:	f043 0301 	orr.w	r3, r3, #1
 80061c8:	6313      	str	r3, [r2, #48]	; 0x30
 80061ca:	4b27      	ldr	r3, [pc, #156]	; (8006268 <MX_GPIO_Init+0xc0>)
 80061cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ce:	f003 0301 	and.w	r3, r3, #1
 80061d2:	613b      	str	r3, [r7, #16]
 80061d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80061d6:	4b24      	ldr	r3, [pc, #144]	; (8006268 <MX_GPIO_Init+0xc0>)
 80061d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061da:	4a23      	ldr	r2, [pc, #140]	; (8006268 <MX_GPIO_Init+0xc0>)
 80061dc:	f043 0302 	orr.w	r3, r3, #2
 80061e0:	6313      	str	r3, [r2, #48]	; 0x30
 80061e2:	4b21      	ldr	r3, [pc, #132]	; (8006268 <MX_GPIO_Init+0xc0>)
 80061e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e6:	f003 0302 	and.w	r3, r3, #2
 80061ea:	60fb      	str	r3, [r7, #12]
 80061ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80061ee:	4b1e      	ldr	r3, [pc, #120]	; (8006268 <MX_GPIO_Init+0xc0>)
 80061f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f2:	4a1d      	ldr	r2, [pc, #116]	; (8006268 <MX_GPIO_Init+0xc0>)
 80061f4:	f043 0304 	orr.w	r3, r3, #4
 80061f8:	6313      	str	r3, [r2, #48]	; 0x30
 80061fa:	4b1b      	ldr	r3, [pc, #108]	; (8006268 <MX_GPIO_Init+0xc0>)
 80061fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061fe:	f003 0304 	and.w	r3, r3, #4
 8006202:	60bb      	str	r3, [r7, #8]
 8006204:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8006206:	4b18      	ldr	r3, [pc, #96]	; (8006268 <MX_GPIO_Init+0xc0>)
 8006208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800620a:	4a17      	ldr	r2, [pc, #92]	; (8006268 <MX_GPIO_Init+0xc0>)
 800620c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006210:	6313      	str	r3, [r2, #48]	; 0x30
 8006212:	4b15      	ldr	r3, [pc, #84]	; (8006268 <MX_GPIO_Init+0xc0>)
 8006214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800621a:	607b      	str	r3, [r7, #4]
 800621c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800621e:	4b12      	ldr	r3, [pc, #72]	; (8006268 <MX_GPIO_Init+0xc0>)
 8006220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006222:	4a11      	ldr	r2, [pc, #68]	; (8006268 <MX_GPIO_Init+0xc0>)
 8006224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006228:	6313      	str	r3, [r2, #48]	; 0x30
 800622a:	4b0f      	ldr	r3, [pc, #60]	; (8006268 <MX_GPIO_Init+0xc0>)
 800622c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800622e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006232:	603b      	str	r3, [r7, #0]
 8006234:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : BUTTON_BLUE_Pin */
  GPIO_InitStruct.Pin = BUTTON_BLUE_Pin;
 8006236:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800623a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800623c:	4b0b      	ldr	r3, [pc, #44]	; (800626c <MX_GPIO_Init+0xc4>)
 800623e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006240:	2302      	movs	r3, #2
 8006242:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_BLUE_GPIO_Port, &GPIO_InitStruct);
 8006244:	f107 0314 	add.w	r3, r7, #20
 8006248:	4619      	mov	r1, r3
 800624a:	4809      	ldr	r0, [pc, #36]	; (8006270 <MX_GPIO_Init+0xc8>)
 800624c:	f7fa fae2 	bl	8000814 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8006250:	2200      	movs	r2, #0
 8006252:	2105      	movs	r1, #5
 8006254:	2028      	movs	r0, #40	; 0x28
 8006256:	f7fa fa91 	bl	800077c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800625a:	2028      	movs	r0, #40	; 0x28
 800625c:	f7fa faaa 	bl	80007b4 <HAL_NVIC_EnableIRQ>

}
 8006260:	bf00      	nop
 8006262:	3728      	adds	r7, #40	; 0x28
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}
 8006268:	40023800 	.word	0x40023800
 800626c:	10310000 	.word	0x10310000
 8006270:	40022000 	.word	0x40022000

08006274 <__io_putchar>:

/* USER CODE BEGIN 4 */

int __io_putchar(int ch)
	{
 8006274:	b580      	push	{r7, lr}
 8006276:	b082      	sub	sp, #8
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
	    HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 800627c:	1d39      	adds	r1, r7, #4
 800627e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006282:	2201      	movs	r2, #1
 8006284:	4803      	ldr	r0, [pc, #12]	; (8006294 <__io_putchar+0x20>)
 8006286:	f7fc fa35 	bl	80026f4 <HAL_UART_Transmit>
	    return ch;
 800628a:	687b      	ldr	r3, [r7, #4]
	}
 800628c:	4618      	mov	r0, r3
 800628e:	3708      	adds	r7, #8
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}
 8006294:	20003f58 	.word	0x20003f58

08006298 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
 800629e:	4603      	mov	r3, r0
 80062a0:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == BUTTON_BLUE_Pin) {
 80062a2:	88fb      	ldrh	r3, [r7, #6]
 80062a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062a8:	d126      	bne.n	80062f8 <HAL_GPIO_EXTI_Callback+0x60>
		if (HAL_GetTick() - 300 < prev_start_time) {
 80062aa:	f7fa f9a3 	bl	80005f4 <HAL_GetTick>
 80062ae:	4603      	mov	r3, r0
 80062b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062b4:	4a12      	ldr	r2, [pc, #72]	; (8006300 <HAL_GPIO_EXTI_Callback+0x68>)
 80062b6:	6812      	ldr	r2, [r2, #0]
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d31c      	bcc.n	80062f6 <HAL_GPIO_EXTI_Callback+0x5e>
			return;
		}
		prev_start_time = HAL_GetTick();
 80062bc:	f7fa f99a 	bl	80005f4 <HAL_GetTick>
 80062c0:	4603      	mov	r3, r0
 80062c2:	461a      	mov	r2, r3
 80062c4:	4b0e      	ldr	r3, [pc, #56]	; (8006300 <HAL_GPIO_EXTI_Callback+0x68>)
 80062c6:	601a      	str	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BUTTON_BLUE_GPIO_Port, BUTTON_BLUE_Pin) == 1) {
 80062c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80062cc:	480d      	ldr	r0, [pc, #52]	; (8006304 <HAL_GPIO_EXTI_Callback+0x6c>)
 80062ce:	f7fa fc4b 	bl	8000b68 <HAL_GPIO_ReadPin>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d102      	bne.n	80062de <HAL_GPIO_EXTI_Callback+0x46>
			//printf("push\n");
			prog_state = 1;
 80062d8:	4b0b      	ldr	r3, [pc, #44]	; (8006308 <HAL_GPIO_EXTI_Callback+0x70>)
 80062da:	2201      	movs	r2, #1
 80062dc:	601a      	str	r2, [r3, #0]

		}
		if (HAL_GPIO_ReadPin(BUTTON_BLUE_GPIO_Port, BUTTON_BLUE_Pin) == 0) {
 80062de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80062e2:	4808      	ldr	r0, [pc, #32]	; (8006304 <HAL_GPIO_EXTI_Callback+0x6c>)
 80062e4:	f7fa fc40 	bl	8000b68 <HAL_GPIO_ReadPin>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d104      	bne.n	80062f8 <HAL_GPIO_EXTI_Callback+0x60>
			//printf("release\n");
			prog_state = 0;
 80062ee:	4b06      	ldr	r3, [pc, #24]	; (8006308 <HAL_GPIO_EXTI_Callback+0x70>)
 80062f0:	2200      	movs	r2, #0
 80062f2:	601a      	str	r2, [r3, #0]
 80062f4:	e000      	b.n	80062f8 <HAL_GPIO_EXTI_Callback+0x60>
			return;
 80062f6:	bf00      	nop
		}
	}

}
 80062f8:	3708      	adds	r7, #8
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	20003ddc 	.word	0x20003ddc
 8006304:	40022000 	.word	0x40022000
 8006308:	20003dd8 	.word	0x20003dd8

0800630c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
if(huart->Instance == USART1){
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a24      	ldr	r2, [pc, #144]	; (80063ac <HAL_UART_RxCpltCallback+0xa0>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d141      	bne.n	80063a2 <HAL_UART_RxCpltCallback+0x96>

	  //HAL_UART_Receive_IT(&huart1, &character, 1);
	  text[time_counter] = character;
 800631e:	4b24      	ldr	r3, [pc, #144]	; (80063b0 <HAL_UART_RxCpltCallback+0xa4>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a24      	ldr	r2, [pc, #144]	; (80063b4 <HAL_UART_RxCpltCallback+0xa8>)
 8006324:	7811      	ldrb	r1, [r2, #0]
 8006326:	4a24      	ldr	r2, [pc, #144]	; (80063b8 <HAL_UART_RxCpltCallback+0xac>)
 8006328:	54d1      	strb	r1, [r2, r3]
	  text[time_counter + 1] = '\r';
 800632a:	4b21      	ldr	r3, [pc, #132]	; (80063b0 <HAL_UART_RxCpltCallback+0xa4>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	3301      	adds	r3, #1
 8006330:	4a21      	ldr	r2, [pc, #132]	; (80063b8 <HAL_UART_RxCpltCallback+0xac>)
 8006332:	210d      	movs	r1, #13
 8006334:	54d1      	strb	r1, [r2, r3]
	  text[time_counter + 2] = '\0';
 8006336:	4b1e      	ldr	r3, [pc, #120]	; (80063b0 <HAL_UART_RxCpltCallback+0xa4>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	3302      	adds	r3, #2
 800633c:	4a1e      	ldr	r2, [pc, #120]	; (80063b8 <HAL_UART_RxCpltCallback+0xac>)
 800633e:	2100      	movs	r1, #0
 8006340:	54d1      	strb	r1, [r2, r3]
	  HAL_UART_Receive_IT(&huart1, &character, 1);
 8006342:	2201      	movs	r2, #1
 8006344:	491b      	ldr	r1, [pc, #108]	; (80063b4 <HAL_UART_RxCpltCallback+0xa8>)
 8006346:	481d      	ldr	r0, [pc, #116]	; (80063bc <HAL_UART_RxCpltCallback+0xb0>)
 8006348:	f7fc fac2 	bl	80028d0 <HAL_UART_Receive_IT>
	  time_counter++;
 800634c:	4b18      	ldr	r3, [pc, #96]	; (80063b0 <HAL_UART_RxCpltCallback+0xa4>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	3301      	adds	r3, #1
 8006352:	4a17      	ldr	r2, [pc, #92]	; (80063b0 <HAL_UART_RxCpltCallback+0xa4>)
 8006354:	6013      	str	r3, [r2, #0]
	  if(character == '\n'){
 8006356:	4b17      	ldr	r3, [pc, #92]	; (80063b4 <HAL_UART_RxCpltCallback+0xa8>)
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	2b0a      	cmp	r3, #10
 800635c:	d121      	bne.n	80063a2 <HAL_UART_RxCpltCallback+0x96>
		  if (text[0] == 'O' && text[1] == 'N') {
 800635e:	4b16      	ldr	r3, [pc, #88]	; (80063b8 <HAL_UART_RxCpltCallback+0xac>)
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	2b4f      	cmp	r3, #79	; 0x4f
 8006364:	d106      	bne.n	8006374 <HAL_UART_RxCpltCallback+0x68>
 8006366:	4b14      	ldr	r3, [pc, #80]	; (80063b8 <HAL_UART_RxCpltCallback+0xac>)
 8006368:	785b      	ldrb	r3, [r3, #1]
 800636a:	2b4e      	cmp	r3, #78	; 0x4e
 800636c:	d102      	bne.n	8006374 <HAL_UART_RxCpltCallback+0x68>
			print_state = 1;
 800636e:	4b14      	ldr	r3, [pc, #80]	; (80063c0 <HAL_UART_RxCpltCallback+0xb4>)
 8006370:	2201      	movs	r2, #1
 8006372:	601a      	str	r2, [r3, #0]
		}
		  if (text[0] == 'O' && text[1] == 'F' && text[2] == 'F') {
 8006374:	4b10      	ldr	r3, [pc, #64]	; (80063b8 <HAL_UART_RxCpltCallback+0xac>)
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	2b4f      	cmp	r3, #79	; 0x4f
 800637a:	d10a      	bne.n	8006392 <HAL_UART_RxCpltCallback+0x86>
 800637c:	4b0e      	ldr	r3, [pc, #56]	; (80063b8 <HAL_UART_RxCpltCallback+0xac>)
 800637e:	785b      	ldrb	r3, [r3, #1]
 8006380:	2b46      	cmp	r3, #70	; 0x46
 8006382:	d106      	bne.n	8006392 <HAL_UART_RxCpltCallback+0x86>
 8006384:	4b0c      	ldr	r3, [pc, #48]	; (80063b8 <HAL_UART_RxCpltCallback+0xac>)
 8006386:	789b      	ldrb	r3, [r3, #2]
 8006388:	2b46      	cmp	r3, #70	; 0x46
 800638a:	d102      	bne.n	8006392 <HAL_UART_RxCpltCallback+0x86>
		  			print_state = 0;
 800638c:	4b0c      	ldr	r3, [pc, #48]	; (80063c0 <HAL_UART_RxCpltCallback+0xb4>)
 800638e:	2200      	movs	r2, #0
 8006390:	601a      	str	r2, [r3, #0]
		  		}

		  HAL_UART_Transmit_IT(&huart1, (uint16_t*) text, 100);
 8006392:	2264      	movs	r2, #100	; 0x64
 8006394:	4908      	ldr	r1, [pc, #32]	; (80063b8 <HAL_UART_RxCpltCallback+0xac>)
 8006396:	4809      	ldr	r0, [pc, #36]	; (80063bc <HAL_UART_RxCpltCallback+0xb0>)
 8006398:	f7fc fa3e 	bl	8002818 <HAL_UART_Transmit_IT>
		  time_counter = 0;
 800639c:	4b04      	ldr	r3, [pc, #16]	; (80063b0 <HAL_UART_RxCpltCallback+0xa4>)
 800639e:	2200      	movs	r2, #0
 80063a0:	601a      	str	r2, [r3, #0]

		}

	}

	}
 80063a2:	bf00      	nop
 80063a4:	3708      	adds	r7, #8
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	40011000 	.word	0x40011000
 80063b0:	20003de0 	.word	0x20003de0
 80063b4:	20003e00 	.word	0x20003e00
 80063b8:	20003e54 	.word	0x20003e54
 80063bc:	20003f58 	.word	0x20003f58
 80063c0:	20003de4 	.word	0x20003de4

080063c4 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80063cc:	2001      	movs	r0, #1
 80063ce:	f7fd f9de 	bl	800378e <osDelay>
 80063d2:	e7fb      	b.n	80063cc <StartDefaultTask+0x8>

080063d4 <StartPrinter>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPrinter */
void StartPrinter(void const * argument)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPrinter */
  /* Infinite loop */
  for(;;)
  {

	  switch (print_state) {
 80063dc:	4b0e      	ldr	r3, [pc, #56]	; (8006418 <StartPrinter+0x44>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d017      	beq.n	8006414 <StartPrinter+0x40>
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d1f9      	bne.n	80063dc <StartPrinter+0x8>
		case 0:

			break;
		case 1:
			osMutexWait(LinkedListMutexHandle, osWaitForever);
 80063e8:	4b0c      	ldr	r3, [pc, #48]	; (800641c <StartPrinter+0x48>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f04f 31ff 	mov.w	r1, #4294967295
 80063f0:	4618      	mov	r0, r3
 80063f2:	f7fd f9ed 	bl	80037d0 <osMutexWait>
	  print(head);
 80063f6:	4b0a      	ldr	r3, [pc, #40]	; (8006420 <StartPrinter+0x4c>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7ff fcbc 	bl	8005d78 <print>

	  osMutexRelease(LinkedListMutexHandle);
 8006400:	4b06      	ldr	r3, [pc, #24]	; (800641c <StartPrinter+0x48>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4618      	mov	r0, r3
 8006406:	f7fd fa31 	bl	800386c <osMutexRelease>

    osDelay(1000);
 800640a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800640e:	f7fd f9be 	bl	800378e <osDelay>
			break;
 8006412:	e000      	b.n	8006416 <StartPrinter+0x42>
			break;
 8006414:	bf00      	nop
	  switch (print_state) {
 8006416:	e7e1      	b.n	80063dc <StartPrinter+0x8>
 8006418:	20003de4 	.word	0x20003de4
 800641c:	20003e08 	.word	0x20003e08
 8006420:	20003f54 	.word	0x20003f54

08006424 <StartPushBack>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPushBack */
void StartPushBack(void const * argument)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPushBack */
  /* Infinite loop */
  for(;;)
  {

	  int random_number = HAL_RNG_GetRandomNumber(&hrng);
 800642c:	4814      	ldr	r0, [pc, #80]	; (8006480 <StartPushBack+0x5c>)
 800642e:	f7fb fcf2 	bl	8001e16 <HAL_RNG_GetRandomNumber>
 8006432:	4603      	mov	r3, r0
 8006434:	60fb      	str	r3, [r7, #12]
	  osMutexWait(LinkedListMutexHandle, osWaitForever);
 8006436:	4b13      	ldr	r3, [pc, #76]	; (8006484 <StartPushBack+0x60>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f04f 31ff 	mov.w	r1, #4294967295
 800643e:	4618      	mov	r0, r3
 8006440:	f7fd f9c6 	bl	80037d0 <osMutexWait>
	  push_back(&head, abs(random_number) % 100 + 1);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800644a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800644e:	4b0e      	ldr	r3, [pc, #56]	; (8006488 <StartPushBack+0x64>)
 8006450:	fb83 1302 	smull	r1, r3, r3, r2
 8006454:	1159      	asrs	r1, r3, #5
 8006456:	17d3      	asrs	r3, r2, #31
 8006458:	1acb      	subs	r3, r1, r3
 800645a:	2164      	movs	r1, #100	; 0x64
 800645c:	fb01 f303 	mul.w	r3, r1, r3
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	3301      	adds	r3, #1
 8006464:	4619      	mov	r1, r3
 8006466:	4809      	ldr	r0, [pc, #36]	; (800648c <StartPushBack+0x68>)
 8006468:	f7ff fc5d 	bl	8005d26 <push_back>
	  osMutexRelease(LinkedListMutexHandle);
 800646c:	4b05      	ldr	r3, [pc, #20]	; (8006484 <StartPushBack+0x60>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4618      	mov	r0, r3
 8006472:	f7fd f9fb 	bl	800386c <osMutexRelease>

    osDelay(2000);
 8006476:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800647a:	f7fd f988 	bl	800378e <osDelay>
  {
 800647e:	e7d5      	b.n	800642c <StartPushBack+0x8>
 8006480:	20003fd8 	.word	0x20003fd8
 8006484:	20003e08 	.word	0x20003e08
 8006488:	51eb851f 	.word	0x51eb851f
 800648c:	20003f54 	.word	0x20003f54

08006490 <StartCommander>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCommander */
void StartCommander(void const * argument)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]





    osDelay(1);
 8006498:	2001      	movs	r0, #1
 800649a:	f7fd f978 	bl	800378e <osDelay>
 800649e:	e7fb      	b.n	8006498 <StartCommander+0x8>

080064a0 <StartTimerStarter>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTimerStarter */
void StartTimerStarter(void const * argument)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTimerStarter */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(10);
 80064a8:	200a      	movs	r0, #10
 80064aa:	f7fd f970 	bl	800378e <osDelay>
	  HAL_TIM_Base_Start_IT(&htim5);
 80064ae:	4804      	ldr	r0, [pc, #16]	; (80064c0 <StartTimerStarter+0x20>)
 80064b0:	f7fb fcf2 	bl	8001e98 <HAL_TIM_Base_Start_IT>



    osThreadTerminate(TimerStarterHandle);
 80064b4:	4b03      	ldr	r3, [pc, #12]	; (80064c4 <StartTimerStarter+0x24>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4618      	mov	r0, r3
 80064ba:	f7fd f95c 	bl	8003776 <osThreadTerminate>
	  osDelay(10);
 80064be:	e7f3      	b.n	80064a8 <StartTimerStarter+0x8>
 80064c0:	20003e10 	.word	0x20003e10
 80064c4:	20003e0c 	.word	0x20003e0c

080064c8 <StartPopBack>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPopBack */
void StartPopBack(void const * argument)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPopBack */
  /* Infinite loop */
  for(;;)
  {

	  switch (prog_state) {
 80064d0:	4b0f      	ldr	r3, [pc, #60]	; (8006510 <StartPopBack+0x48>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d015      	beq.n	8006504 <StartPopBack+0x3c>
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d114      	bne.n	8006506 <StartPopBack+0x3e>
		case 0:

			break;
		case 1:
			osMutexWait(LinkedListMutexHandle, osWaitForever);
 80064dc:	4b0d      	ldr	r3, [pc, #52]	; (8006514 <StartPopBack+0x4c>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f04f 31ff 	mov.w	r1, #4294967295
 80064e4:	4618      	mov	r0, r3
 80064e6:	f7fd f973 	bl	80037d0 <osMutexWait>
			pop_back(&head);
 80064ea:	480b      	ldr	r0, [pc, #44]	; (8006518 <StartPopBack+0x50>)
 80064ec:	f7ff fc5e 	bl	8005dac <pop_back>
			osDelay(500);
 80064f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80064f4:	f7fd f94b 	bl	800378e <osDelay>
			osMutexRelease(LinkedListMutexHandle);
 80064f8:	4b06      	ldr	r3, [pc, #24]	; (8006514 <StartPopBack+0x4c>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4618      	mov	r0, r3
 80064fe:	f7fd f9b5 	bl	800386c <osMutexRelease>
			break;
 8006502:	e000      	b.n	8006506 <StartPopBack+0x3e>
			break;
 8006504:	bf00      	nop
	}



    osDelay(1);
 8006506:	2001      	movs	r0, #1
 8006508:	f7fd f941 	bl	800378e <osDelay>
	  switch (prog_state) {
 800650c:	e7e0      	b.n	80064d0 <StartPopBack+0x8>
 800650e:	bf00      	nop
 8006510:	20003dd8 	.word	0x20003dd8
 8006514:	20003e08 	.word	0x20003e08
 8006518:	20003f54 	.word	0x20003f54

0800651c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM5) {
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a08      	ldr	r2, [pc, #32]	; (800654c <HAL_TIM_PeriodElapsedCallback+0x30>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d102      	bne.n	8006534 <HAL_TIM_PeriodElapsedCallback+0x18>
	    printf("timer");
 800652e:	4808      	ldr	r0, [pc, #32]	; (8006550 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8006530:	f000 fac0 	bl	8006ab4 <iprintf>
	  }

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a06      	ldr	r2, [pc, #24]	; (8006554 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d101      	bne.n	8006542 <HAL_TIM_PeriodElapsedCallback+0x26>
    HAL_IncTick();
 800653e:	f7fa f845 	bl	80005cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8006542:	bf00      	nop
 8006544:	3708      	adds	r7, #8
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	40000c00 	.word	0x40000c00
 8006550:	080079f4 	.word	0x080079f4
 8006554:	40002000 	.word	0x40002000

08006558 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006558:	b480      	push	{r7}
 800655a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800655c:	bf00      	nop
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr
	...

08006568 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b082      	sub	sp, #8
 800656c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800656e:	4b11      	ldr	r3, [pc, #68]	; (80065b4 <HAL_MspInit+0x4c>)
 8006570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006572:	4a10      	ldr	r2, [pc, #64]	; (80065b4 <HAL_MspInit+0x4c>)
 8006574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006578:	6413      	str	r3, [r2, #64]	; 0x40
 800657a:	4b0e      	ldr	r3, [pc, #56]	; (80065b4 <HAL_MspInit+0x4c>)
 800657c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006582:	607b      	str	r3, [r7, #4]
 8006584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006586:	4b0b      	ldr	r3, [pc, #44]	; (80065b4 <HAL_MspInit+0x4c>)
 8006588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800658a:	4a0a      	ldr	r2, [pc, #40]	; (80065b4 <HAL_MspInit+0x4c>)
 800658c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006590:	6453      	str	r3, [r2, #68]	; 0x44
 8006592:	4b08      	ldr	r3, [pc, #32]	; (80065b4 <HAL_MspInit+0x4c>)
 8006594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006596:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800659a:	603b      	str	r3, [r7, #0]
 800659c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800659e:	2200      	movs	r2, #0
 80065a0:	210f      	movs	r1, #15
 80065a2:	f06f 0001 	mvn.w	r0, #1
 80065a6:	f7fa f8e9 	bl	800077c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80065aa:	bf00      	nop
 80065ac:	3708      	adds	r7, #8
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop
 80065b4:	40023800 	.word	0x40023800

080065b8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b085      	sub	sp, #20
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a0a      	ldr	r2, [pc, #40]	; (80065f0 <HAL_RNG_MspInit+0x38>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d10b      	bne.n	80065e2 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80065ca:	4b0a      	ldr	r3, [pc, #40]	; (80065f4 <HAL_RNG_MspInit+0x3c>)
 80065cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ce:	4a09      	ldr	r2, [pc, #36]	; (80065f4 <HAL_RNG_MspInit+0x3c>)
 80065d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065d4:	6353      	str	r3, [r2, #52]	; 0x34
 80065d6:	4b07      	ldr	r3, [pc, #28]	; (80065f4 <HAL_RNG_MspInit+0x3c>)
 80065d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065de:	60fb      	str	r3, [r7, #12]
 80065e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80065e2:	bf00      	nop
 80065e4:	3714      	adds	r7, #20
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr
 80065ee:	bf00      	nop
 80065f0:	50060800 	.word	0x50060800
 80065f4:	40023800 	.word	0x40023800

080065f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a0d      	ldr	r2, [pc, #52]	; (800663c <HAL_TIM_Base_MspInit+0x44>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d113      	bne.n	8006632 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800660a:	4b0d      	ldr	r3, [pc, #52]	; (8006640 <HAL_TIM_Base_MspInit+0x48>)
 800660c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660e:	4a0c      	ldr	r2, [pc, #48]	; (8006640 <HAL_TIM_Base_MspInit+0x48>)
 8006610:	f043 0308 	orr.w	r3, r3, #8
 8006614:	6413      	str	r3, [r2, #64]	; 0x40
 8006616:	4b0a      	ldr	r3, [pc, #40]	; (8006640 <HAL_TIM_Base_MspInit+0x48>)
 8006618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661a:	f003 0308 	and.w	r3, r3, #8
 800661e:	60fb      	str	r3, [r7, #12]
 8006620:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8006622:	2200      	movs	r2, #0
 8006624:	2105      	movs	r1, #5
 8006626:	2032      	movs	r0, #50	; 0x32
 8006628:	f7fa f8a8 	bl	800077c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800662c:	2032      	movs	r0, #50	; 0x32
 800662e:	f7fa f8c1 	bl	80007b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8006632:	bf00      	nop
 8006634:	3710      	adds	r7, #16
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	40000c00 	.word	0x40000c00
 8006640:	40023800 	.word	0x40023800

08006644 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b08a      	sub	sp, #40	; 0x28
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800664c:	f107 0314 	add.w	r3, r7, #20
 8006650:	2200      	movs	r2, #0
 8006652:	601a      	str	r2, [r3, #0]
 8006654:	605a      	str	r2, [r3, #4]
 8006656:	609a      	str	r2, [r3, #8]
 8006658:	60da      	str	r2, [r3, #12]
 800665a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a29      	ldr	r2, [pc, #164]	; (8006708 <HAL_UART_MspInit+0xc4>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d14c      	bne.n	8006700 <HAL_UART_MspInit+0xbc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006666:	4b29      	ldr	r3, [pc, #164]	; (800670c <HAL_UART_MspInit+0xc8>)
 8006668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800666a:	4a28      	ldr	r2, [pc, #160]	; (800670c <HAL_UART_MspInit+0xc8>)
 800666c:	f043 0310 	orr.w	r3, r3, #16
 8006670:	6453      	str	r3, [r2, #68]	; 0x44
 8006672:	4b26      	ldr	r3, [pc, #152]	; (800670c <HAL_UART_MspInit+0xc8>)
 8006674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006676:	f003 0310 	and.w	r3, r3, #16
 800667a:	613b      	str	r3, [r7, #16]
 800667c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800667e:	4b23      	ldr	r3, [pc, #140]	; (800670c <HAL_UART_MspInit+0xc8>)
 8006680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006682:	4a22      	ldr	r2, [pc, #136]	; (800670c <HAL_UART_MspInit+0xc8>)
 8006684:	f043 0302 	orr.w	r3, r3, #2
 8006688:	6313      	str	r3, [r2, #48]	; 0x30
 800668a:	4b20      	ldr	r3, [pc, #128]	; (800670c <HAL_UART_MspInit+0xc8>)
 800668c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800668e:	f003 0302 	and.w	r3, r3, #2
 8006692:	60fb      	str	r3, [r7, #12]
 8006694:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006696:	4b1d      	ldr	r3, [pc, #116]	; (800670c <HAL_UART_MspInit+0xc8>)
 8006698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800669a:	4a1c      	ldr	r2, [pc, #112]	; (800670c <HAL_UART_MspInit+0xc8>)
 800669c:	f043 0301 	orr.w	r3, r3, #1
 80066a0:	6313      	str	r3, [r2, #48]	; 0x30
 80066a2:	4b1a      	ldr	r3, [pc, #104]	; (800670c <HAL_UART_MspInit+0xc8>)
 80066a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a6:	f003 0301 	and.w	r3, r3, #1
 80066aa:	60bb      	str	r3, [r7, #8]
 80066ac:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80066ae:	2380      	movs	r3, #128	; 0x80
 80066b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066b2:	2302      	movs	r3, #2
 80066b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066b6:	2300      	movs	r3, #0
 80066b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066ba:	2303      	movs	r3, #3
 80066bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80066be:	2307      	movs	r3, #7
 80066c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80066c2:	f107 0314 	add.w	r3, r7, #20
 80066c6:	4619      	mov	r1, r3
 80066c8:	4811      	ldr	r0, [pc, #68]	; (8006710 <HAL_UART_MspInit+0xcc>)
 80066ca:	f7fa f8a3 	bl	8000814 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80066ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066d4:	2302      	movs	r3, #2
 80066d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066d8:	2300      	movs	r3, #0
 80066da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066dc:	2303      	movs	r3, #3
 80066de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80066e0:	2307      	movs	r3, #7
 80066e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066e4:	f107 0314 	add.w	r3, r7, #20
 80066e8:	4619      	mov	r1, r3
 80066ea:	480a      	ldr	r0, [pc, #40]	; (8006714 <HAL_UART_MspInit+0xd0>)
 80066ec:	f7fa f892 	bl	8000814 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80066f0:	2200      	movs	r2, #0
 80066f2:	2105      	movs	r1, #5
 80066f4:	2025      	movs	r0, #37	; 0x25
 80066f6:	f7fa f841 	bl	800077c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80066fa:	2025      	movs	r0, #37	; 0x25
 80066fc:	f7fa f85a 	bl	80007b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006700:	bf00      	nop
 8006702:	3728      	adds	r7, #40	; 0x28
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}
 8006708:	40011000 	.word	0x40011000
 800670c:	40023800 	.word	0x40023800
 8006710:	40020400 	.word	0x40020400
 8006714:	40020000 	.word	0x40020000

08006718 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b08c      	sub	sp, #48	; 0x30
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8006720:	2300      	movs	r3, #0
 8006722:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8006724:	2300      	movs	r3, #0
 8006726:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0); 
 8006728:	2200      	movs	r2, #0
 800672a:	6879      	ldr	r1, [r7, #4]
 800672c:	202d      	movs	r0, #45	; 0x2d
 800672e:	f7fa f825 	bl	800077c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn); 
 8006732:	202d      	movs	r0, #45	; 0x2d
 8006734:	f7fa f83e 	bl	80007b4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8006738:	4b1e      	ldr	r3, [pc, #120]	; (80067b4 <HAL_InitTick+0x9c>)
 800673a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673c:	4a1d      	ldr	r2, [pc, #116]	; (80067b4 <HAL_InitTick+0x9c>)
 800673e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006742:	6413      	str	r3, [r2, #64]	; 0x40
 8006744:	4b1b      	ldr	r3, [pc, #108]	; (80067b4 <HAL_InitTick+0x9c>)
 8006746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800674c:	60fb      	str	r3, [r7, #12]
 800674e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006750:	f107 0210 	add.w	r2, r7, #16
 8006754:	f107 0314 	add.w	r3, r7, #20
 8006758:	4611      	mov	r1, r2
 800675a:	4618      	mov	r0, r3
 800675c:	f7fa fec2 	bl	80014e4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM14 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8006760:	f7fa fe98 	bl	8001494 <HAL_RCC_GetPCLK1Freq>
 8006764:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8006766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006768:	4a13      	ldr	r2, [pc, #76]	; (80067b8 <HAL_InitTick+0xa0>)
 800676a:	fba2 2303 	umull	r2, r3, r2, r3
 800676e:	0c9b      	lsrs	r3, r3, #18
 8006770:	3b01      	subs	r3, #1
 8006772:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8006774:	4b11      	ldr	r3, [pc, #68]	; (80067bc <HAL_InitTick+0xa4>)
 8006776:	4a12      	ldr	r2, [pc, #72]	; (80067c0 <HAL_InitTick+0xa8>)
 8006778:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000 / 1000) - 1;
 800677a:	4b10      	ldr	r3, [pc, #64]	; (80067bc <HAL_InitTick+0xa4>)
 800677c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006780:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8006782:	4a0e      	ldr	r2, [pc, #56]	; (80067bc <HAL_InitTick+0xa4>)
 8006784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006786:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8006788:	4b0c      	ldr	r3, [pc, #48]	; (80067bc <HAL_InitTick+0xa4>)
 800678a:	2200      	movs	r2, #0
 800678c:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800678e:	4b0b      	ldr	r3, [pc, #44]	; (80067bc <HAL_InitTick+0xa4>)
 8006790:	2200      	movs	r2, #0
 8006792:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8006794:	4809      	ldr	r0, [pc, #36]	; (80067bc <HAL_InitTick+0xa4>)
 8006796:	f7fb fb53 	bl	8001e40 <HAL_TIM_Base_Init>
 800679a:	4603      	mov	r3, r0
 800679c:	2b00      	cmp	r3, #0
 800679e:	d104      	bne.n	80067aa <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 80067a0:	4806      	ldr	r0, [pc, #24]	; (80067bc <HAL_InitTick+0xa4>)
 80067a2:	f7fb fb79 	bl	8001e98 <HAL_TIM_Base_Start_IT>
 80067a6:	4603      	mov	r3, r0
 80067a8:	e000      	b.n	80067ac <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3730      	adds	r7, #48	; 0x30
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	40023800 	.word	0x40023800
 80067b8:	431bde83 	.word	0x431bde83
 80067bc:	20003fec 	.word	0x20003fec
 80067c0:	40002000 	.word	0x40002000

080067c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80067c4:	b480      	push	{r7}
 80067c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80067c8:	bf00      	nop
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr

080067d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80067d2:	b480      	push	{r7}
 80067d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80067d6:	e7fe      	b.n	80067d6 <HardFault_Handler+0x4>

080067d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80067d8:	b480      	push	{r7}
 80067da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80067dc:	e7fe      	b.n	80067dc <MemManage_Handler+0x4>

080067de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80067de:	b480      	push	{r7}
 80067e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80067e2:	e7fe      	b.n	80067e2 <BusFault_Handler+0x4>

080067e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80067e4:	b480      	push	{r7}
 80067e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80067e8:	e7fe      	b.n	80067e8 <UsageFault_Handler+0x4>

080067ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80067ea:	b480      	push	{r7}
 80067ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80067ee:	bf00      	nop
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80067fc:	4802      	ldr	r0, [pc, #8]	; (8006808 <USART1_IRQHandler+0x10>)
 80067fe:	f7fc f909 	bl	8002a14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006802:	bf00      	nop
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	20003f58 	.word	0x20003f58

0800680c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8006810:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006814:	f7fa f9c0 	bl	8000b98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006818:	bf00      	nop
 800681a:	bd80      	pop	{r7, pc}

0800681c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8006820:	4802      	ldr	r0, [pc, #8]	; (800682c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8006822:	f7fb fb63 	bl	8001eec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8006826:	bf00      	nop
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	20003fec 	.word	0x20003fec

08006830 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8006834:	4802      	ldr	r0, [pc, #8]	; (8006840 <TIM5_IRQHandler+0x10>)
 8006836:	f7fb fb59 	bl	8001eec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800683a:	bf00      	nop
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	20003e10 	.word	0x20003e10

08006844 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b086      	sub	sp, #24
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006850:	2300      	movs	r3, #0
 8006852:	617b      	str	r3, [r7, #20]
 8006854:	e00a      	b.n	800686c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006856:	f3af 8000 	nop.w
 800685a:	4601      	mov	r1, r0
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	1c5a      	adds	r2, r3, #1
 8006860:	60ba      	str	r2, [r7, #8]
 8006862:	b2ca      	uxtb	r2, r1
 8006864:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	3301      	adds	r3, #1
 800686a:	617b      	str	r3, [r7, #20]
 800686c:	697a      	ldr	r2, [r7, #20]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	429a      	cmp	r2, r3
 8006872:	dbf0      	blt.n	8006856 <_read+0x12>
	}

return len;
 8006874:	687b      	ldr	r3, [r7, #4]
}
 8006876:	4618      	mov	r0, r3
 8006878:	3718      	adds	r7, #24
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}

0800687e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800687e:	b580      	push	{r7, lr}
 8006880:	b086      	sub	sp, #24
 8006882:	af00      	add	r7, sp, #0
 8006884:	60f8      	str	r0, [r7, #12]
 8006886:	60b9      	str	r1, [r7, #8]
 8006888:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800688a:	2300      	movs	r3, #0
 800688c:	617b      	str	r3, [r7, #20]
 800688e:	e009      	b.n	80068a4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	1c5a      	adds	r2, r3, #1
 8006894:	60ba      	str	r2, [r7, #8]
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	4618      	mov	r0, r3
 800689a:	f7ff fceb 	bl	8006274 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	3301      	adds	r3, #1
 80068a2:	617b      	str	r3, [r7, #20]
 80068a4:	697a      	ldr	r2, [r7, #20]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	dbf1      	blt.n	8006890 <_write+0x12>
	}
	return len;
 80068ac:	687b      	ldr	r3, [r7, #4]
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3718      	adds	r7, #24
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <_close>:

int _close(int file)
{
 80068b6:	b480      	push	{r7}
 80068b8:	b083      	sub	sp, #12
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
	return -1;
 80068be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	370c      	adds	r7, #12
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr

080068ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80068ce:	b480      	push	{r7}
 80068d0:	b083      	sub	sp, #12
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
 80068d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80068de:	605a      	str	r2, [r3, #4]
	return 0;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	370c      	adds	r7, #12
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr

080068ee <_isatty>:

int _isatty(int file)
{
 80068ee:	b480      	push	{r7}
 80068f0:	b083      	sub	sp, #12
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
	return 1;
 80068f6:	2301      	movs	r3, #1
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006904:	b480      	push	{r7}
 8006906:	b085      	sub	sp, #20
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
	return 0;
 8006910:	2300      	movs	r3, #0
}
 8006912:	4618      	mov	r0, r3
 8006914:	3714      	adds	r7, #20
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr
	...

08006920 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006928:	4b11      	ldr	r3, [pc, #68]	; (8006970 <_sbrk+0x50>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d102      	bne.n	8006936 <_sbrk+0x16>
		heap_end = &end;
 8006930:	4b0f      	ldr	r3, [pc, #60]	; (8006970 <_sbrk+0x50>)
 8006932:	4a10      	ldr	r2, [pc, #64]	; (8006974 <_sbrk+0x54>)
 8006934:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8006936:	4b0e      	ldr	r3, [pc, #56]	; (8006970 <_sbrk+0x50>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800693c:	4b0c      	ldr	r3, [pc, #48]	; (8006970 <_sbrk+0x50>)
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4413      	add	r3, r2
 8006944:	466a      	mov	r2, sp
 8006946:	4293      	cmp	r3, r2
 8006948:	d907      	bls.n	800695a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800694a:	f000 f875 	bl	8006a38 <__errno>
 800694e:	4602      	mov	r2, r0
 8006950:	230c      	movs	r3, #12
 8006952:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8006954:	f04f 33ff 	mov.w	r3, #4294967295
 8006958:	e006      	b.n	8006968 <_sbrk+0x48>
	}

	heap_end += incr;
 800695a:	4b05      	ldr	r3, [pc, #20]	; (8006970 <_sbrk+0x50>)
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4413      	add	r3, r2
 8006962:	4a03      	ldr	r2, [pc, #12]	; (8006970 <_sbrk+0x50>)
 8006964:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8006966:	68fb      	ldr	r3, [r7, #12]
}
 8006968:	4618      	mov	r0, r3
 800696a:	3710      	adds	r7, #16
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}
 8006970:	20003de8 	.word	0x20003de8
 8006974:	20004030 	.word	0x20004030

08006978 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006978:	b480      	push	{r7}
 800697a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800697c:	4b15      	ldr	r3, [pc, #84]	; (80069d4 <SystemInit+0x5c>)
 800697e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006982:	4a14      	ldr	r2, [pc, #80]	; (80069d4 <SystemInit+0x5c>)
 8006984:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006988:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800698c:	4b12      	ldr	r3, [pc, #72]	; (80069d8 <SystemInit+0x60>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a11      	ldr	r2, [pc, #68]	; (80069d8 <SystemInit+0x60>)
 8006992:	f043 0301 	orr.w	r3, r3, #1
 8006996:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006998:	4b0f      	ldr	r3, [pc, #60]	; (80069d8 <SystemInit+0x60>)
 800699a:	2200      	movs	r2, #0
 800699c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800699e:	4b0e      	ldr	r3, [pc, #56]	; (80069d8 <SystemInit+0x60>)
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	490d      	ldr	r1, [pc, #52]	; (80069d8 <SystemInit+0x60>)
 80069a4:	4b0d      	ldr	r3, [pc, #52]	; (80069dc <SystemInit+0x64>)
 80069a6:	4013      	ands	r3, r2
 80069a8:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80069aa:	4b0b      	ldr	r3, [pc, #44]	; (80069d8 <SystemInit+0x60>)
 80069ac:	4a0c      	ldr	r2, [pc, #48]	; (80069e0 <SystemInit+0x68>)
 80069ae:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80069b0:	4b09      	ldr	r3, [pc, #36]	; (80069d8 <SystemInit+0x60>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a08      	ldr	r2, [pc, #32]	; (80069d8 <SystemInit+0x60>)
 80069b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069ba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80069bc:	4b06      	ldr	r3, [pc, #24]	; (80069d8 <SystemInit+0x60>)
 80069be:	2200      	movs	r2, #0
 80069c0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80069c2:	4b04      	ldr	r3, [pc, #16]	; (80069d4 <SystemInit+0x5c>)
 80069c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80069c8:	609a      	str	r2, [r3, #8]
#endif
}
 80069ca:	bf00      	nop
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr
 80069d4:	e000ed00 	.word	0xe000ed00
 80069d8:	40023800 	.word	0x40023800
 80069dc:	fef6ffff 	.word	0xfef6ffff
 80069e0:	24003010 	.word	0x24003010

080069e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80069e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006a1c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80069e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80069ea:	e003      	b.n	80069f4 <LoopCopyDataInit>

080069ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80069ec:	4b0c      	ldr	r3, [pc, #48]	; (8006a20 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80069ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80069f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80069f2:	3104      	adds	r1, #4

080069f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80069f4:	480b      	ldr	r0, [pc, #44]	; (8006a24 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80069f6:	4b0c      	ldr	r3, [pc, #48]	; (8006a28 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80069f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80069fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80069fc:	d3f6      	bcc.n	80069ec <CopyDataInit>
  ldr  r2, =_sbss
 80069fe:	4a0b      	ldr	r2, [pc, #44]	; (8006a2c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006a00:	e002      	b.n	8006a08 <LoopFillZerobss>

08006a02 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006a02:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006a04:	f842 3b04 	str.w	r3, [r2], #4

08006a08 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006a08:	4b09      	ldr	r3, [pc, #36]	; (8006a30 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006a0a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006a0c:	d3f9      	bcc.n	8006a02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006a0e:	f7ff ffb3 	bl	8006978 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006a12:	f000 f817 	bl	8006a44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006a16:	f7ff f9f5 	bl	8005e04 <main>
  bx  lr    
 8006a1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006a1c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8006a20:	08007abc 	.word	0x08007abc
  ldr  r0, =_sdata
 8006a24:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006a28:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8006a2c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8006a30:	20004030 	.word	0x20004030

08006a34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006a34:	e7fe      	b.n	8006a34 <ADC_IRQHandler>
	...

08006a38 <__errno>:
 8006a38:	4b01      	ldr	r3, [pc, #4]	; (8006a40 <__errno+0x8>)
 8006a3a:	6818      	ldr	r0, [r3, #0]
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop
 8006a40:	2000000c 	.word	0x2000000c

08006a44 <__libc_init_array>:
 8006a44:	b570      	push	{r4, r5, r6, lr}
 8006a46:	4e0d      	ldr	r6, [pc, #52]	; (8006a7c <__libc_init_array+0x38>)
 8006a48:	4c0d      	ldr	r4, [pc, #52]	; (8006a80 <__libc_init_array+0x3c>)
 8006a4a:	1ba4      	subs	r4, r4, r6
 8006a4c:	10a4      	asrs	r4, r4, #2
 8006a4e:	2500      	movs	r5, #0
 8006a50:	42a5      	cmp	r5, r4
 8006a52:	d109      	bne.n	8006a68 <__libc_init_array+0x24>
 8006a54:	4e0b      	ldr	r6, [pc, #44]	; (8006a84 <__libc_init_array+0x40>)
 8006a56:	4c0c      	ldr	r4, [pc, #48]	; (8006a88 <__libc_init_array+0x44>)
 8006a58:	f000 ff5a 	bl	8007910 <_init>
 8006a5c:	1ba4      	subs	r4, r4, r6
 8006a5e:	10a4      	asrs	r4, r4, #2
 8006a60:	2500      	movs	r5, #0
 8006a62:	42a5      	cmp	r5, r4
 8006a64:	d105      	bne.n	8006a72 <__libc_init_array+0x2e>
 8006a66:	bd70      	pop	{r4, r5, r6, pc}
 8006a68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a6c:	4798      	blx	r3
 8006a6e:	3501      	adds	r5, #1
 8006a70:	e7ee      	b.n	8006a50 <__libc_init_array+0xc>
 8006a72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006a76:	4798      	blx	r3
 8006a78:	3501      	adds	r5, #1
 8006a7a:	e7f2      	b.n	8006a62 <__libc_init_array+0x1e>
 8006a7c:	08007ab4 	.word	0x08007ab4
 8006a80:	08007ab4 	.word	0x08007ab4
 8006a84:	08007ab4 	.word	0x08007ab4
 8006a88:	08007ab8 	.word	0x08007ab8

08006a8c <memcpy>:
 8006a8c:	b510      	push	{r4, lr}
 8006a8e:	1e43      	subs	r3, r0, #1
 8006a90:	440a      	add	r2, r1
 8006a92:	4291      	cmp	r1, r2
 8006a94:	d100      	bne.n	8006a98 <memcpy+0xc>
 8006a96:	bd10      	pop	{r4, pc}
 8006a98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006aa0:	e7f7      	b.n	8006a92 <memcpy+0x6>

08006aa2 <memset>:
 8006aa2:	4402      	add	r2, r0
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d100      	bne.n	8006aac <memset+0xa>
 8006aaa:	4770      	bx	lr
 8006aac:	f803 1b01 	strb.w	r1, [r3], #1
 8006ab0:	e7f9      	b.n	8006aa6 <memset+0x4>
	...

08006ab4 <iprintf>:
 8006ab4:	b40f      	push	{r0, r1, r2, r3}
 8006ab6:	4b0a      	ldr	r3, [pc, #40]	; (8006ae0 <iprintf+0x2c>)
 8006ab8:	b513      	push	{r0, r1, r4, lr}
 8006aba:	681c      	ldr	r4, [r3, #0]
 8006abc:	b124      	cbz	r4, 8006ac8 <iprintf+0x14>
 8006abe:	69a3      	ldr	r3, [r4, #24]
 8006ac0:	b913      	cbnz	r3, 8006ac8 <iprintf+0x14>
 8006ac2:	4620      	mov	r0, r4
 8006ac4:	f000 f862 	bl	8006b8c <__sinit>
 8006ac8:	ab05      	add	r3, sp, #20
 8006aca:	9a04      	ldr	r2, [sp, #16]
 8006acc:	68a1      	ldr	r1, [r4, #8]
 8006ace:	9301      	str	r3, [sp, #4]
 8006ad0:	4620      	mov	r0, r4
 8006ad2:	f000 f969 	bl	8006da8 <_vfiprintf_r>
 8006ad6:	b002      	add	sp, #8
 8006ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006adc:	b004      	add	sp, #16
 8006ade:	4770      	bx	lr
 8006ae0:	2000000c 	.word	0x2000000c

08006ae4 <putchar>:
 8006ae4:	b538      	push	{r3, r4, r5, lr}
 8006ae6:	4b08      	ldr	r3, [pc, #32]	; (8006b08 <putchar+0x24>)
 8006ae8:	681c      	ldr	r4, [r3, #0]
 8006aea:	4605      	mov	r5, r0
 8006aec:	b124      	cbz	r4, 8006af8 <putchar+0x14>
 8006aee:	69a3      	ldr	r3, [r4, #24]
 8006af0:	b913      	cbnz	r3, 8006af8 <putchar+0x14>
 8006af2:	4620      	mov	r0, r4
 8006af4:	f000 f84a 	bl	8006b8c <__sinit>
 8006af8:	68a2      	ldr	r2, [r4, #8]
 8006afa:	4629      	mov	r1, r5
 8006afc:	4620      	mov	r0, r4
 8006afe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b02:	f000 bbef 	b.w	80072e4 <_putc_r>
 8006b06:	bf00      	nop
 8006b08:	2000000c 	.word	0x2000000c

08006b0c <std>:
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	b510      	push	{r4, lr}
 8006b10:	4604      	mov	r4, r0
 8006b12:	e9c0 3300 	strd	r3, r3, [r0]
 8006b16:	6083      	str	r3, [r0, #8]
 8006b18:	8181      	strh	r1, [r0, #12]
 8006b1a:	6643      	str	r3, [r0, #100]	; 0x64
 8006b1c:	81c2      	strh	r2, [r0, #14]
 8006b1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b22:	6183      	str	r3, [r0, #24]
 8006b24:	4619      	mov	r1, r3
 8006b26:	2208      	movs	r2, #8
 8006b28:	305c      	adds	r0, #92	; 0x5c
 8006b2a:	f7ff ffba 	bl	8006aa2 <memset>
 8006b2e:	4b05      	ldr	r3, [pc, #20]	; (8006b44 <std+0x38>)
 8006b30:	6263      	str	r3, [r4, #36]	; 0x24
 8006b32:	4b05      	ldr	r3, [pc, #20]	; (8006b48 <std+0x3c>)
 8006b34:	62a3      	str	r3, [r4, #40]	; 0x28
 8006b36:	4b05      	ldr	r3, [pc, #20]	; (8006b4c <std+0x40>)
 8006b38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b3a:	4b05      	ldr	r3, [pc, #20]	; (8006b50 <std+0x44>)
 8006b3c:	6224      	str	r4, [r4, #32]
 8006b3e:	6323      	str	r3, [r4, #48]	; 0x30
 8006b40:	bd10      	pop	{r4, pc}
 8006b42:	bf00      	nop
 8006b44:	08007371 	.word	0x08007371
 8006b48:	08007393 	.word	0x08007393
 8006b4c:	080073cb 	.word	0x080073cb
 8006b50:	080073ef 	.word	0x080073ef

08006b54 <_cleanup_r>:
 8006b54:	4901      	ldr	r1, [pc, #4]	; (8006b5c <_cleanup_r+0x8>)
 8006b56:	f000 b885 	b.w	8006c64 <_fwalk_reent>
 8006b5a:	bf00      	nop
 8006b5c:	080076c9 	.word	0x080076c9

08006b60 <__sfmoreglue>:
 8006b60:	b570      	push	{r4, r5, r6, lr}
 8006b62:	1e4a      	subs	r2, r1, #1
 8006b64:	2568      	movs	r5, #104	; 0x68
 8006b66:	4355      	muls	r5, r2
 8006b68:	460e      	mov	r6, r1
 8006b6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006b6e:	f000 f897 	bl	8006ca0 <_malloc_r>
 8006b72:	4604      	mov	r4, r0
 8006b74:	b140      	cbz	r0, 8006b88 <__sfmoreglue+0x28>
 8006b76:	2100      	movs	r1, #0
 8006b78:	e9c0 1600 	strd	r1, r6, [r0]
 8006b7c:	300c      	adds	r0, #12
 8006b7e:	60a0      	str	r0, [r4, #8]
 8006b80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006b84:	f7ff ff8d 	bl	8006aa2 <memset>
 8006b88:	4620      	mov	r0, r4
 8006b8a:	bd70      	pop	{r4, r5, r6, pc}

08006b8c <__sinit>:
 8006b8c:	6983      	ldr	r3, [r0, #24]
 8006b8e:	b510      	push	{r4, lr}
 8006b90:	4604      	mov	r4, r0
 8006b92:	bb33      	cbnz	r3, 8006be2 <__sinit+0x56>
 8006b94:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006b98:	6503      	str	r3, [r0, #80]	; 0x50
 8006b9a:	4b12      	ldr	r3, [pc, #72]	; (8006be4 <__sinit+0x58>)
 8006b9c:	4a12      	ldr	r2, [pc, #72]	; (8006be8 <__sinit+0x5c>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	6282      	str	r2, [r0, #40]	; 0x28
 8006ba2:	4298      	cmp	r0, r3
 8006ba4:	bf04      	itt	eq
 8006ba6:	2301      	moveq	r3, #1
 8006ba8:	6183      	streq	r3, [r0, #24]
 8006baa:	f000 f81f 	bl	8006bec <__sfp>
 8006bae:	6060      	str	r0, [r4, #4]
 8006bb0:	4620      	mov	r0, r4
 8006bb2:	f000 f81b 	bl	8006bec <__sfp>
 8006bb6:	60a0      	str	r0, [r4, #8]
 8006bb8:	4620      	mov	r0, r4
 8006bba:	f000 f817 	bl	8006bec <__sfp>
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	60e0      	str	r0, [r4, #12]
 8006bc2:	2104      	movs	r1, #4
 8006bc4:	6860      	ldr	r0, [r4, #4]
 8006bc6:	f7ff ffa1 	bl	8006b0c <std>
 8006bca:	2201      	movs	r2, #1
 8006bcc:	2109      	movs	r1, #9
 8006bce:	68a0      	ldr	r0, [r4, #8]
 8006bd0:	f7ff ff9c 	bl	8006b0c <std>
 8006bd4:	2202      	movs	r2, #2
 8006bd6:	2112      	movs	r1, #18
 8006bd8:	68e0      	ldr	r0, [r4, #12]
 8006bda:	f7ff ff97 	bl	8006b0c <std>
 8006bde:	2301      	movs	r3, #1
 8006be0:	61a3      	str	r3, [r4, #24]
 8006be2:	bd10      	pop	{r4, pc}
 8006be4:	08007a14 	.word	0x08007a14
 8006be8:	08006b55 	.word	0x08006b55

08006bec <__sfp>:
 8006bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bee:	4b1b      	ldr	r3, [pc, #108]	; (8006c5c <__sfp+0x70>)
 8006bf0:	681e      	ldr	r6, [r3, #0]
 8006bf2:	69b3      	ldr	r3, [r6, #24]
 8006bf4:	4607      	mov	r7, r0
 8006bf6:	b913      	cbnz	r3, 8006bfe <__sfp+0x12>
 8006bf8:	4630      	mov	r0, r6
 8006bfa:	f7ff ffc7 	bl	8006b8c <__sinit>
 8006bfe:	3648      	adds	r6, #72	; 0x48
 8006c00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006c04:	3b01      	subs	r3, #1
 8006c06:	d503      	bpl.n	8006c10 <__sfp+0x24>
 8006c08:	6833      	ldr	r3, [r6, #0]
 8006c0a:	b133      	cbz	r3, 8006c1a <__sfp+0x2e>
 8006c0c:	6836      	ldr	r6, [r6, #0]
 8006c0e:	e7f7      	b.n	8006c00 <__sfp+0x14>
 8006c10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006c14:	b16d      	cbz	r5, 8006c32 <__sfp+0x46>
 8006c16:	3468      	adds	r4, #104	; 0x68
 8006c18:	e7f4      	b.n	8006c04 <__sfp+0x18>
 8006c1a:	2104      	movs	r1, #4
 8006c1c:	4638      	mov	r0, r7
 8006c1e:	f7ff ff9f 	bl	8006b60 <__sfmoreglue>
 8006c22:	6030      	str	r0, [r6, #0]
 8006c24:	2800      	cmp	r0, #0
 8006c26:	d1f1      	bne.n	8006c0c <__sfp+0x20>
 8006c28:	230c      	movs	r3, #12
 8006c2a:	603b      	str	r3, [r7, #0]
 8006c2c:	4604      	mov	r4, r0
 8006c2e:	4620      	mov	r0, r4
 8006c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c32:	4b0b      	ldr	r3, [pc, #44]	; (8006c60 <__sfp+0x74>)
 8006c34:	6665      	str	r5, [r4, #100]	; 0x64
 8006c36:	e9c4 5500 	strd	r5, r5, [r4]
 8006c3a:	60a5      	str	r5, [r4, #8]
 8006c3c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006c40:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006c44:	2208      	movs	r2, #8
 8006c46:	4629      	mov	r1, r5
 8006c48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006c4c:	f7ff ff29 	bl	8006aa2 <memset>
 8006c50:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006c54:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006c58:	e7e9      	b.n	8006c2e <__sfp+0x42>
 8006c5a:	bf00      	nop
 8006c5c:	08007a14 	.word	0x08007a14
 8006c60:	ffff0001 	.word	0xffff0001

08006c64 <_fwalk_reent>:
 8006c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c68:	4680      	mov	r8, r0
 8006c6a:	4689      	mov	r9, r1
 8006c6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006c70:	2600      	movs	r6, #0
 8006c72:	b914      	cbnz	r4, 8006c7a <_fwalk_reent+0x16>
 8006c74:	4630      	mov	r0, r6
 8006c76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c7a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006c7e:	3f01      	subs	r7, #1
 8006c80:	d501      	bpl.n	8006c86 <_fwalk_reent+0x22>
 8006c82:	6824      	ldr	r4, [r4, #0]
 8006c84:	e7f5      	b.n	8006c72 <_fwalk_reent+0xe>
 8006c86:	89ab      	ldrh	r3, [r5, #12]
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d907      	bls.n	8006c9c <_fwalk_reent+0x38>
 8006c8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c90:	3301      	adds	r3, #1
 8006c92:	d003      	beq.n	8006c9c <_fwalk_reent+0x38>
 8006c94:	4629      	mov	r1, r5
 8006c96:	4640      	mov	r0, r8
 8006c98:	47c8      	blx	r9
 8006c9a:	4306      	orrs	r6, r0
 8006c9c:	3568      	adds	r5, #104	; 0x68
 8006c9e:	e7ee      	b.n	8006c7e <_fwalk_reent+0x1a>

08006ca0 <_malloc_r>:
 8006ca0:	b570      	push	{r4, r5, r6, lr}
 8006ca2:	1ccd      	adds	r5, r1, #3
 8006ca4:	f025 0503 	bic.w	r5, r5, #3
 8006ca8:	3508      	adds	r5, #8
 8006caa:	2d0c      	cmp	r5, #12
 8006cac:	bf38      	it	cc
 8006cae:	250c      	movcc	r5, #12
 8006cb0:	2d00      	cmp	r5, #0
 8006cb2:	4606      	mov	r6, r0
 8006cb4:	db01      	blt.n	8006cba <_malloc_r+0x1a>
 8006cb6:	42a9      	cmp	r1, r5
 8006cb8:	d903      	bls.n	8006cc2 <_malloc_r+0x22>
 8006cba:	230c      	movs	r3, #12
 8006cbc:	6033      	str	r3, [r6, #0]
 8006cbe:	2000      	movs	r0, #0
 8006cc0:	bd70      	pop	{r4, r5, r6, pc}
 8006cc2:	f000 fda1 	bl	8007808 <__malloc_lock>
 8006cc6:	4a21      	ldr	r2, [pc, #132]	; (8006d4c <_malloc_r+0xac>)
 8006cc8:	6814      	ldr	r4, [r2, #0]
 8006cca:	4621      	mov	r1, r4
 8006ccc:	b991      	cbnz	r1, 8006cf4 <_malloc_r+0x54>
 8006cce:	4c20      	ldr	r4, [pc, #128]	; (8006d50 <_malloc_r+0xb0>)
 8006cd0:	6823      	ldr	r3, [r4, #0]
 8006cd2:	b91b      	cbnz	r3, 8006cdc <_malloc_r+0x3c>
 8006cd4:	4630      	mov	r0, r6
 8006cd6:	f000 fb3b 	bl	8007350 <_sbrk_r>
 8006cda:	6020      	str	r0, [r4, #0]
 8006cdc:	4629      	mov	r1, r5
 8006cde:	4630      	mov	r0, r6
 8006ce0:	f000 fb36 	bl	8007350 <_sbrk_r>
 8006ce4:	1c43      	adds	r3, r0, #1
 8006ce6:	d124      	bne.n	8006d32 <_malloc_r+0x92>
 8006ce8:	230c      	movs	r3, #12
 8006cea:	6033      	str	r3, [r6, #0]
 8006cec:	4630      	mov	r0, r6
 8006cee:	f000 fd8c 	bl	800780a <__malloc_unlock>
 8006cf2:	e7e4      	b.n	8006cbe <_malloc_r+0x1e>
 8006cf4:	680b      	ldr	r3, [r1, #0]
 8006cf6:	1b5b      	subs	r3, r3, r5
 8006cf8:	d418      	bmi.n	8006d2c <_malloc_r+0x8c>
 8006cfa:	2b0b      	cmp	r3, #11
 8006cfc:	d90f      	bls.n	8006d1e <_malloc_r+0x7e>
 8006cfe:	600b      	str	r3, [r1, #0]
 8006d00:	50cd      	str	r5, [r1, r3]
 8006d02:	18cc      	adds	r4, r1, r3
 8006d04:	4630      	mov	r0, r6
 8006d06:	f000 fd80 	bl	800780a <__malloc_unlock>
 8006d0a:	f104 000b 	add.w	r0, r4, #11
 8006d0e:	1d23      	adds	r3, r4, #4
 8006d10:	f020 0007 	bic.w	r0, r0, #7
 8006d14:	1ac3      	subs	r3, r0, r3
 8006d16:	d0d3      	beq.n	8006cc0 <_malloc_r+0x20>
 8006d18:	425a      	negs	r2, r3
 8006d1a:	50e2      	str	r2, [r4, r3]
 8006d1c:	e7d0      	b.n	8006cc0 <_malloc_r+0x20>
 8006d1e:	428c      	cmp	r4, r1
 8006d20:	684b      	ldr	r3, [r1, #4]
 8006d22:	bf16      	itet	ne
 8006d24:	6063      	strne	r3, [r4, #4]
 8006d26:	6013      	streq	r3, [r2, #0]
 8006d28:	460c      	movne	r4, r1
 8006d2a:	e7eb      	b.n	8006d04 <_malloc_r+0x64>
 8006d2c:	460c      	mov	r4, r1
 8006d2e:	6849      	ldr	r1, [r1, #4]
 8006d30:	e7cc      	b.n	8006ccc <_malloc_r+0x2c>
 8006d32:	1cc4      	adds	r4, r0, #3
 8006d34:	f024 0403 	bic.w	r4, r4, #3
 8006d38:	42a0      	cmp	r0, r4
 8006d3a:	d005      	beq.n	8006d48 <_malloc_r+0xa8>
 8006d3c:	1a21      	subs	r1, r4, r0
 8006d3e:	4630      	mov	r0, r6
 8006d40:	f000 fb06 	bl	8007350 <_sbrk_r>
 8006d44:	3001      	adds	r0, #1
 8006d46:	d0cf      	beq.n	8006ce8 <_malloc_r+0x48>
 8006d48:	6025      	str	r5, [r4, #0]
 8006d4a:	e7db      	b.n	8006d04 <_malloc_r+0x64>
 8006d4c:	20003dec 	.word	0x20003dec
 8006d50:	20003df0 	.word	0x20003df0

08006d54 <__sfputc_r>:
 8006d54:	6893      	ldr	r3, [r2, #8]
 8006d56:	3b01      	subs	r3, #1
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	b410      	push	{r4}
 8006d5c:	6093      	str	r3, [r2, #8]
 8006d5e:	da08      	bge.n	8006d72 <__sfputc_r+0x1e>
 8006d60:	6994      	ldr	r4, [r2, #24]
 8006d62:	42a3      	cmp	r3, r4
 8006d64:	db01      	blt.n	8006d6a <__sfputc_r+0x16>
 8006d66:	290a      	cmp	r1, #10
 8006d68:	d103      	bne.n	8006d72 <__sfputc_r+0x1e>
 8006d6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d6e:	f000 bb43 	b.w	80073f8 <__swbuf_r>
 8006d72:	6813      	ldr	r3, [r2, #0]
 8006d74:	1c58      	adds	r0, r3, #1
 8006d76:	6010      	str	r0, [r2, #0]
 8006d78:	7019      	strb	r1, [r3, #0]
 8006d7a:	4608      	mov	r0, r1
 8006d7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d80:	4770      	bx	lr

08006d82 <__sfputs_r>:
 8006d82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d84:	4606      	mov	r6, r0
 8006d86:	460f      	mov	r7, r1
 8006d88:	4614      	mov	r4, r2
 8006d8a:	18d5      	adds	r5, r2, r3
 8006d8c:	42ac      	cmp	r4, r5
 8006d8e:	d101      	bne.n	8006d94 <__sfputs_r+0x12>
 8006d90:	2000      	movs	r0, #0
 8006d92:	e007      	b.n	8006da4 <__sfputs_r+0x22>
 8006d94:	463a      	mov	r2, r7
 8006d96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d9a:	4630      	mov	r0, r6
 8006d9c:	f7ff ffda 	bl	8006d54 <__sfputc_r>
 8006da0:	1c43      	adds	r3, r0, #1
 8006da2:	d1f3      	bne.n	8006d8c <__sfputs_r+0xa>
 8006da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006da8 <_vfiprintf_r>:
 8006da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dac:	460c      	mov	r4, r1
 8006dae:	b09d      	sub	sp, #116	; 0x74
 8006db0:	4617      	mov	r7, r2
 8006db2:	461d      	mov	r5, r3
 8006db4:	4606      	mov	r6, r0
 8006db6:	b118      	cbz	r0, 8006dc0 <_vfiprintf_r+0x18>
 8006db8:	6983      	ldr	r3, [r0, #24]
 8006dba:	b90b      	cbnz	r3, 8006dc0 <_vfiprintf_r+0x18>
 8006dbc:	f7ff fee6 	bl	8006b8c <__sinit>
 8006dc0:	4b7c      	ldr	r3, [pc, #496]	; (8006fb4 <_vfiprintf_r+0x20c>)
 8006dc2:	429c      	cmp	r4, r3
 8006dc4:	d158      	bne.n	8006e78 <_vfiprintf_r+0xd0>
 8006dc6:	6874      	ldr	r4, [r6, #4]
 8006dc8:	89a3      	ldrh	r3, [r4, #12]
 8006dca:	0718      	lsls	r0, r3, #28
 8006dcc:	d55e      	bpl.n	8006e8c <_vfiprintf_r+0xe4>
 8006dce:	6923      	ldr	r3, [r4, #16]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d05b      	beq.n	8006e8c <_vfiprintf_r+0xe4>
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	9309      	str	r3, [sp, #36]	; 0x24
 8006dd8:	2320      	movs	r3, #32
 8006dda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006dde:	2330      	movs	r3, #48	; 0x30
 8006de0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006de4:	9503      	str	r5, [sp, #12]
 8006de6:	f04f 0b01 	mov.w	fp, #1
 8006dea:	46b8      	mov	r8, r7
 8006dec:	4645      	mov	r5, r8
 8006dee:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006df2:	b10b      	cbz	r3, 8006df8 <_vfiprintf_r+0x50>
 8006df4:	2b25      	cmp	r3, #37	; 0x25
 8006df6:	d154      	bne.n	8006ea2 <_vfiprintf_r+0xfa>
 8006df8:	ebb8 0a07 	subs.w	sl, r8, r7
 8006dfc:	d00b      	beq.n	8006e16 <_vfiprintf_r+0x6e>
 8006dfe:	4653      	mov	r3, sl
 8006e00:	463a      	mov	r2, r7
 8006e02:	4621      	mov	r1, r4
 8006e04:	4630      	mov	r0, r6
 8006e06:	f7ff ffbc 	bl	8006d82 <__sfputs_r>
 8006e0a:	3001      	adds	r0, #1
 8006e0c:	f000 80c2 	beq.w	8006f94 <_vfiprintf_r+0x1ec>
 8006e10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e12:	4453      	add	r3, sl
 8006e14:	9309      	str	r3, [sp, #36]	; 0x24
 8006e16:	f898 3000 	ldrb.w	r3, [r8]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	f000 80ba 	beq.w	8006f94 <_vfiprintf_r+0x1ec>
 8006e20:	2300      	movs	r3, #0
 8006e22:	f04f 32ff 	mov.w	r2, #4294967295
 8006e26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e2a:	9304      	str	r3, [sp, #16]
 8006e2c:	9307      	str	r3, [sp, #28]
 8006e2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e32:	931a      	str	r3, [sp, #104]	; 0x68
 8006e34:	46a8      	mov	r8, r5
 8006e36:	2205      	movs	r2, #5
 8006e38:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006e3c:	485e      	ldr	r0, [pc, #376]	; (8006fb8 <_vfiprintf_r+0x210>)
 8006e3e:	f7f9 f9e7 	bl	8000210 <memchr>
 8006e42:	9b04      	ldr	r3, [sp, #16]
 8006e44:	bb78      	cbnz	r0, 8006ea6 <_vfiprintf_r+0xfe>
 8006e46:	06d9      	lsls	r1, r3, #27
 8006e48:	bf44      	itt	mi
 8006e4a:	2220      	movmi	r2, #32
 8006e4c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006e50:	071a      	lsls	r2, r3, #28
 8006e52:	bf44      	itt	mi
 8006e54:	222b      	movmi	r2, #43	; 0x2b
 8006e56:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006e5a:	782a      	ldrb	r2, [r5, #0]
 8006e5c:	2a2a      	cmp	r2, #42	; 0x2a
 8006e5e:	d02a      	beq.n	8006eb6 <_vfiprintf_r+0x10e>
 8006e60:	9a07      	ldr	r2, [sp, #28]
 8006e62:	46a8      	mov	r8, r5
 8006e64:	2000      	movs	r0, #0
 8006e66:	250a      	movs	r5, #10
 8006e68:	4641      	mov	r1, r8
 8006e6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e6e:	3b30      	subs	r3, #48	; 0x30
 8006e70:	2b09      	cmp	r3, #9
 8006e72:	d969      	bls.n	8006f48 <_vfiprintf_r+0x1a0>
 8006e74:	b360      	cbz	r0, 8006ed0 <_vfiprintf_r+0x128>
 8006e76:	e024      	b.n	8006ec2 <_vfiprintf_r+0x11a>
 8006e78:	4b50      	ldr	r3, [pc, #320]	; (8006fbc <_vfiprintf_r+0x214>)
 8006e7a:	429c      	cmp	r4, r3
 8006e7c:	d101      	bne.n	8006e82 <_vfiprintf_r+0xda>
 8006e7e:	68b4      	ldr	r4, [r6, #8]
 8006e80:	e7a2      	b.n	8006dc8 <_vfiprintf_r+0x20>
 8006e82:	4b4f      	ldr	r3, [pc, #316]	; (8006fc0 <_vfiprintf_r+0x218>)
 8006e84:	429c      	cmp	r4, r3
 8006e86:	bf08      	it	eq
 8006e88:	68f4      	ldreq	r4, [r6, #12]
 8006e8a:	e79d      	b.n	8006dc8 <_vfiprintf_r+0x20>
 8006e8c:	4621      	mov	r1, r4
 8006e8e:	4630      	mov	r0, r6
 8006e90:	f000 fb16 	bl	80074c0 <__swsetup_r>
 8006e94:	2800      	cmp	r0, #0
 8006e96:	d09d      	beq.n	8006dd4 <_vfiprintf_r+0x2c>
 8006e98:	f04f 30ff 	mov.w	r0, #4294967295
 8006e9c:	b01d      	add	sp, #116	; 0x74
 8006e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ea2:	46a8      	mov	r8, r5
 8006ea4:	e7a2      	b.n	8006dec <_vfiprintf_r+0x44>
 8006ea6:	4a44      	ldr	r2, [pc, #272]	; (8006fb8 <_vfiprintf_r+0x210>)
 8006ea8:	1a80      	subs	r0, r0, r2
 8006eaa:	fa0b f000 	lsl.w	r0, fp, r0
 8006eae:	4318      	orrs	r0, r3
 8006eb0:	9004      	str	r0, [sp, #16]
 8006eb2:	4645      	mov	r5, r8
 8006eb4:	e7be      	b.n	8006e34 <_vfiprintf_r+0x8c>
 8006eb6:	9a03      	ldr	r2, [sp, #12]
 8006eb8:	1d11      	adds	r1, r2, #4
 8006eba:	6812      	ldr	r2, [r2, #0]
 8006ebc:	9103      	str	r1, [sp, #12]
 8006ebe:	2a00      	cmp	r2, #0
 8006ec0:	db01      	blt.n	8006ec6 <_vfiprintf_r+0x11e>
 8006ec2:	9207      	str	r2, [sp, #28]
 8006ec4:	e004      	b.n	8006ed0 <_vfiprintf_r+0x128>
 8006ec6:	4252      	negs	r2, r2
 8006ec8:	f043 0302 	orr.w	r3, r3, #2
 8006ecc:	9207      	str	r2, [sp, #28]
 8006ece:	9304      	str	r3, [sp, #16]
 8006ed0:	f898 3000 	ldrb.w	r3, [r8]
 8006ed4:	2b2e      	cmp	r3, #46	; 0x2e
 8006ed6:	d10e      	bne.n	8006ef6 <_vfiprintf_r+0x14e>
 8006ed8:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006edc:	2b2a      	cmp	r3, #42	; 0x2a
 8006ede:	d138      	bne.n	8006f52 <_vfiprintf_r+0x1aa>
 8006ee0:	9b03      	ldr	r3, [sp, #12]
 8006ee2:	1d1a      	adds	r2, r3, #4
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	9203      	str	r2, [sp, #12]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	bfb8      	it	lt
 8006eec:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ef0:	f108 0802 	add.w	r8, r8, #2
 8006ef4:	9305      	str	r3, [sp, #20]
 8006ef6:	4d33      	ldr	r5, [pc, #204]	; (8006fc4 <_vfiprintf_r+0x21c>)
 8006ef8:	f898 1000 	ldrb.w	r1, [r8]
 8006efc:	2203      	movs	r2, #3
 8006efe:	4628      	mov	r0, r5
 8006f00:	f7f9 f986 	bl	8000210 <memchr>
 8006f04:	b140      	cbz	r0, 8006f18 <_vfiprintf_r+0x170>
 8006f06:	2340      	movs	r3, #64	; 0x40
 8006f08:	1b40      	subs	r0, r0, r5
 8006f0a:	fa03 f000 	lsl.w	r0, r3, r0
 8006f0e:	9b04      	ldr	r3, [sp, #16]
 8006f10:	4303      	orrs	r3, r0
 8006f12:	f108 0801 	add.w	r8, r8, #1
 8006f16:	9304      	str	r3, [sp, #16]
 8006f18:	f898 1000 	ldrb.w	r1, [r8]
 8006f1c:	482a      	ldr	r0, [pc, #168]	; (8006fc8 <_vfiprintf_r+0x220>)
 8006f1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f22:	2206      	movs	r2, #6
 8006f24:	f108 0701 	add.w	r7, r8, #1
 8006f28:	f7f9 f972 	bl	8000210 <memchr>
 8006f2c:	2800      	cmp	r0, #0
 8006f2e:	d037      	beq.n	8006fa0 <_vfiprintf_r+0x1f8>
 8006f30:	4b26      	ldr	r3, [pc, #152]	; (8006fcc <_vfiprintf_r+0x224>)
 8006f32:	bb1b      	cbnz	r3, 8006f7c <_vfiprintf_r+0x1d4>
 8006f34:	9b03      	ldr	r3, [sp, #12]
 8006f36:	3307      	adds	r3, #7
 8006f38:	f023 0307 	bic.w	r3, r3, #7
 8006f3c:	3308      	adds	r3, #8
 8006f3e:	9303      	str	r3, [sp, #12]
 8006f40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f42:	444b      	add	r3, r9
 8006f44:	9309      	str	r3, [sp, #36]	; 0x24
 8006f46:	e750      	b.n	8006dea <_vfiprintf_r+0x42>
 8006f48:	fb05 3202 	mla	r2, r5, r2, r3
 8006f4c:	2001      	movs	r0, #1
 8006f4e:	4688      	mov	r8, r1
 8006f50:	e78a      	b.n	8006e68 <_vfiprintf_r+0xc0>
 8006f52:	2300      	movs	r3, #0
 8006f54:	f108 0801 	add.w	r8, r8, #1
 8006f58:	9305      	str	r3, [sp, #20]
 8006f5a:	4619      	mov	r1, r3
 8006f5c:	250a      	movs	r5, #10
 8006f5e:	4640      	mov	r0, r8
 8006f60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f64:	3a30      	subs	r2, #48	; 0x30
 8006f66:	2a09      	cmp	r2, #9
 8006f68:	d903      	bls.n	8006f72 <_vfiprintf_r+0x1ca>
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d0c3      	beq.n	8006ef6 <_vfiprintf_r+0x14e>
 8006f6e:	9105      	str	r1, [sp, #20]
 8006f70:	e7c1      	b.n	8006ef6 <_vfiprintf_r+0x14e>
 8006f72:	fb05 2101 	mla	r1, r5, r1, r2
 8006f76:	2301      	movs	r3, #1
 8006f78:	4680      	mov	r8, r0
 8006f7a:	e7f0      	b.n	8006f5e <_vfiprintf_r+0x1b6>
 8006f7c:	ab03      	add	r3, sp, #12
 8006f7e:	9300      	str	r3, [sp, #0]
 8006f80:	4622      	mov	r2, r4
 8006f82:	4b13      	ldr	r3, [pc, #76]	; (8006fd0 <_vfiprintf_r+0x228>)
 8006f84:	a904      	add	r1, sp, #16
 8006f86:	4630      	mov	r0, r6
 8006f88:	f3af 8000 	nop.w
 8006f8c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006f90:	4681      	mov	r9, r0
 8006f92:	d1d5      	bne.n	8006f40 <_vfiprintf_r+0x198>
 8006f94:	89a3      	ldrh	r3, [r4, #12]
 8006f96:	065b      	lsls	r3, r3, #25
 8006f98:	f53f af7e 	bmi.w	8006e98 <_vfiprintf_r+0xf0>
 8006f9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f9e:	e77d      	b.n	8006e9c <_vfiprintf_r+0xf4>
 8006fa0:	ab03      	add	r3, sp, #12
 8006fa2:	9300      	str	r3, [sp, #0]
 8006fa4:	4622      	mov	r2, r4
 8006fa6:	4b0a      	ldr	r3, [pc, #40]	; (8006fd0 <_vfiprintf_r+0x228>)
 8006fa8:	a904      	add	r1, sp, #16
 8006faa:	4630      	mov	r0, r6
 8006fac:	f000 f888 	bl	80070c0 <_printf_i>
 8006fb0:	e7ec      	b.n	8006f8c <_vfiprintf_r+0x1e4>
 8006fb2:	bf00      	nop
 8006fb4:	08007a38 	.word	0x08007a38
 8006fb8:	08007a78 	.word	0x08007a78
 8006fbc:	08007a58 	.word	0x08007a58
 8006fc0:	08007a18 	.word	0x08007a18
 8006fc4:	08007a7e 	.word	0x08007a7e
 8006fc8:	08007a82 	.word	0x08007a82
 8006fcc:	00000000 	.word	0x00000000
 8006fd0:	08006d83 	.word	0x08006d83

08006fd4 <_printf_common>:
 8006fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fd8:	4691      	mov	r9, r2
 8006fda:	461f      	mov	r7, r3
 8006fdc:	688a      	ldr	r2, [r1, #8]
 8006fde:	690b      	ldr	r3, [r1, #16]
 8006fe0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	bfb8      	it	lt
 8006fe8:	4613      	movlt	r3, r2
 8006fea:	f8c9 3000 	str.w	r3, [r9]
 8006fee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ff2:	4606      	mov	r6, r0
 8006ff4:	460c      	mov	r4, r1
 8006ff6:	b112      	cbz	r2, 8006ffe <_printf_common+0x2a>
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	f8c9 3000 	str.w	r3, [r9]
 8006ffe:	6823      	ldr	r3, [r4, #0]
 8007000:	0699      	lsls	r1, r3, #26
 8007002:	bf42      	ittt	mi
 8007004:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007008:	3302      	addmi	r3, #2
 800700a:	f8c9 3000 	strmi.w	r3, [r9]
 800700e:	6825      	ldr	r5, [r4, #0]
 8007010:	f015 0506 	ands.w	r5, r5, #6
 8007014:	d107      	bne.n	8007026 <_printf_common+0x52>
 8007016:	f104 0a19 	add.w	sl, r4, #25
 800701a:	68e3      	ldr	r3, [r4, #12]
 800701c:	f8d9 2000 	ldr.w	r2, [r9]
 8007020:	1a9b      	subs	r3, r3, r2
 8007022:	42ab      	cmp	r3, r5
 8007024:	dc28      	bgt.n	8007078 <_printf_common+0xa4>
 8007026:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800702a:	6822      	ldr	r2, [r4, #0]
 800702c:	3300      	adds	r3, #0
 800702e:	bf18      	it	ne
 8007030:	2301      	movne	r3, #1
 8007032:	0692      	lsls	r2, r2, #26
 8007034:	d42d      	bmi.n	8007092 <_printf_common+0xbe>
 8007036:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800703a:	4639      	mov	r1, r7
 800703c:	4630      	mov	r0, r6
 800703e:	47c0      	blx	r8
 8007040:	3001      	adds	r0, #1
 8007042:	d020      	beq.n	8007086 <_printf_common+0xb2>
 8007044:	6823      	ldr	r3, [r4, #0]
 8007046:	68e5      	ldr	r5, [r4, #12]
 8007048:	f8d9 2000 	ldr.w	r2, [r9]
 800704c:	f003 0306 	and.w	r3, r3, #6
 8007050:	2b04      	cmp	r3, #4
 8007052:	bf08      	it	eq
 8007054:	1aad      	subeq	r5, r5, r2
 8007056:	68a3      	ldr	r3, [r4, #8]
 8007058:	6922      	ldr	r2, [r4, #16]
 800705a:	bf0c      	ite	eq
 800705c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007060:	2500      	movne	r5, #0
 8007062:	4293      	cmp	r3, r2
 8007064:	bfc4      	itt	gt
 8007066:	1a9b      	subgt	r3, r3, r2
 8007068:	18ed      	addgt	r5, r5, r3
 800706a:	f04f 0900 	mov.w	r9, #0
 800706e:	341a      	adds	r4, #26
 8007070:	454d      	cmp	r5, r9
 8007072:	d11a      	bne.n	80070aa <_printf_common+0xd6>
 8007074:	2000      	movs	r0, #0
 8007076:	e008      	b.n	800708a <_printf_common+0xb6>
 8007078:	2301      	movs	r3, #1
 800707a:	4652      	mov	r2, sl
 800707c:	4639      	mov	r1, r7
 800707e:	4630      	mov	r0, r6
 8007080:	47c0      	blx	r8
 8007082:	3001      	adds	r0, #1
 8007084:	d103      	bne.n	800708e <_printf_common+0xba>
 8007086:	f04f 30ff 	mov.w	r0, #4294967295
 800708a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800708e:	3501      	adds	r5, #1
 8007090:	e7c3      	b.n	800701a <_printf_common+0x46>
 8007092:	18e1      	adds	r1, r4, r3
 8007094:	1c5a      	adds	r2, r3, #1
 8007096:	2030      	movs	r0, #48	; 0x30
 8007098:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800709c:	4422      	add	r2, r4
 800709e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80070a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80070a6:	3302      	adds	r3, #2
 80070a8:	e7c5      	b.n	8007036 <_printf_common+0x62>
 80070aa:	2301      	movs	r3, #1
 80070ac:	4622      	mov	r2, r4
 80070ae:	4639      	mov	r1, r7
 80070b0:	4630      	mov	r0, r6
 80070b2:	47c0      	blx	r8
 80070b4:	3001      	adds	r0, #1
 80070b6:	d0e6      	beq.n	8007086 <_printf_common+0xb2>
 80070b8:	f109 0901 	add.w	r9, r9, #1
 80070bc:	e7d8      	b.n	8007070 <_printf_common+0x9c>
	...

080070c0 <_printf_i>:
 80070c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80070c4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80070c8:	460c      	mov	r4, r1
 80070ca:	7e09      	ldrb	r1, [r1, #24]
 80070cc:	b085      	sub	sp, #20
 80070ce:	296e      	cmp	r1, #110	; 0x6e
 80070d0:	4617      	mov	r7, r2
 80070d2:	4606      	mov	r6, r0
 80070d4:	4698      	mov	r8, r3
 80070d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80070d8:	f000 80b3 	beq.w	8007242 <_printf_i+0x182>
 80070dc:	d822      	bhi.n	8007124 <_printf_i+0x64>
 80070de:	2963      	cmp	r1, #99	; 0x63
 80070e0:	d036      	beq.n	8007150 <_printf_i+0x90>
 80070e2:	d80a      	bhi.n	80070fa <_printf_i+0x3a>
 80070e4:	2900      	cmp	r1, #0
 80070e6:	f000 80b9 	beq.w	800725c <_printf_i+0x19c>
 80070ea:	2958      	cmp	r1, #88	; 0x58
 80070ec:	f000 8083 	beq.w	80071f6 <_printf_i+0x136>
 80070f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070f4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80070f8:	e032      	b.n	8007160 <_printf_i+0xa0>
 80070fa:	2964      	cmp	r1, #100	; 0x64
 80070fc:	d001      	beq.n	8007102 <_printf_i+0x42>
 80070fe:	2969      	cmp	r1, #105	; 0x69
 8007100:	d1f6      	bne.n	80070f0 <_printf_i+0x30>
 8007102:	6820      	ldr	r0, [r4, #0]
 8007104:	6813      	ldr	r3, [r2, #0]
 8007106:	0605      	lsls	r5, r0, #24
 8007108:	f103 0104 	add.w	r1, r3, #4
 800710c:	d52a      	bpl.n	8007164 <_printf_i+0xa4>
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	6011      	str	r1, [r2, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	da03      	bge.n	800711e <_printf_i+0x5e>
 8007116:	222d      	movs	r2, #45	; 0x2d
 8007118:	425b      	negs	r3, r3
 800711a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800711e:	486f      	ldr	r0, [pc, #444]	; (80072dc <_printf_i+0x21c>)
 8007120:	220a      	movs	r2, #10
 8007122:	e039      	b.n	8007198 <_printf_i+0xd8>
 8007124:	2973      	cmp	r1, #115	; 0x73
 8007126:	f000 809d 	beq.w	8007264 <_printf_i+0x1a4>
 800712a:	d808      	bhi.n	800713e <_printf_i+0x7e>
 800712c:	296f      	cmp	r1, #111	; 0x6f
 800712e:	d020      	beq.n	8007172 <_printf_i+0xb2>
 8007130:	2970      	cmp	r1, #112	; 0x70
 8007132:	d1dd      	bne.n	80070f0 <_printf_i+0x30>
 8007134:	6823      	ldr	r3, [r4, #0]
 8007136:	f043 0320 	orr.w	r3, r3, #32
 800713a:	6023      	str	r3, [r4, #0]
 800713c:	e003      	b.n	8007146 <_printf_i+0x86>
 800713e:	2975      	cmp	r1, #117	; 0x75
 8007140:	d017      	beq.n	8007172 <_printf_i+0xb2>
 8007142:	2978      	cmp	r1, #120	; 0x78
 8007144:	d1d4      	bne.n	80070f0 <_printf_i+0x30>
 8007146:	2378      	movs	r3, #120	; 0x78
 8007148:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800714c:	4864      	ldr	r0, [pc, #400]	; (80072e0 <_printf_i+0x220>)
 800714e:	e055      	b.n	80071fc <_printf_i+0x13c>
 8007150:	6813      	ldr	r3, [r2, #0]
 8007152:	1d19      	adds	r1, r3, #4
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	6011      	str	r1, [r2, #0]
 8007158:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800715c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007160:	2301      	movs	r3, #1
 8007162:	e08c      	b.n	800727e <_printf_i+0x1be>
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	6011      	str	r1, [r2, #0]
 8007168:	f010 0f40 	tst.w	r0, #64	; 0x40
 800716c:	bf18      	it	ne
 800716e:	b21b      	sxthne	r3, r3
 8007170:	e7cf      	b.n	8007112 <_printf_i+0x52>
 8007172:	6813      	ldr	r3, [r2, #0]
 8007174:	6825      	ldr	r5, [r4, #0]
 8007176:	1d18      	adds	r0, r3, #4
 8007178:	6010      	str	r0, [r2, #0]
 800717a:	0628      	lsls	r0, r5, #24
 800717c:	d501      	bpl.n	8007182 <_printf_i+0xc2>
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	e002      	b.n	8007188 <_printf_i+0xc8>
 8007182:	0668      	lsls	r0, r5, #25
 8007184:	d5fb      	bpl.n	800717e <_printf_i+0xbe>
 8007186:	881b      	ldrh	r3, [r3, #0]
 8007188:	4854      	ldr	r0, [pc, #336]	; (80072dc <_printf_i+0x21c>)
 800718a:	296f      	cmp	r1, #111	; 0x6f
 800718c:	bf14      	ite	ne
 800718e:	220a      	movne	r2, #10
 8007190:	2208      	moveq	r2, #8
 8007192:	2100      	movs	r1, #0
 8007194:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007198:	6865      	ldr	r5, [r4, #4]
 800719a:	60a5      	str	r5, [r4, #8]
 800719c:	2d00      	cmp	r5, #0
 800719e:	f2c0 8095 	blt.w	80072cc <_printf_i+0x20c>
 80071a2:	6821      	ldr	r1, [r4, #0]
 80071a4:	f021 0104 	bic.w	r1, r1, #4
 80071a8:	6021      	str	r1, [r4, #0]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d13d      	bne.n	800722a <_printf_i+0x16a>
 80071ae:	2d00      	cmp	r5, #0
 80071b0:	f040 808e 	bne.w	80072d0 <_printf_i+0x210>
 80071b4:	4665      	mov	r5, ip
 80071b6:	2a08      	cmp	r2, #8
 80071b8:	d10b      	bne.n	80071d2 <_printf_i+0x112>
 80071ba:	6823      	ldr	r3, [r4, #0]
 80071bc:	07db      	lsls	r3, r3, #31
 80071be:	d508      	bpl.n	80071d2 <_printf_i+0x112>
 80071c0:	6923      	ldr	r3, [r4, #16]
 80071c2:	6862      	ldr	r2, [r4, #4]
 80071c4:	429a      	cmp	r2, r3
 80071c6:	bfde      	ittt	le
 80071c8:	2330      	movle	r3, #48	; 0x30
 80071ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 80071ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 80071d2:	ebac 0305 	sub.w	r3, ip, r5
 80071d6:	6123      	str	r3, [r4, #16]
 80071d8:	f8cd 8000 	str.w	r8, [sp]
 80071dc:	463b      	mov	r3, r7
 80071de:	aa03      	add	r2, sp, #12
 80071e0:	4621      	mov	r1, r4
 80071e2:	4630      	mov	r0, r6
 80071e4:	f7ff fef6 	bl	8006fd4 <_printf_common>
 80071e8:	3001      	adds	r0, #1
 80071ea:	d14d      	bne.n	8007288 <_printf_i+0x1c8>
 80071ec:	f04f 30ff 	mov.w	r0, #4294967295
 80071f0:	b005      	add	sp, #20
 80071f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80071f6:	4839      	ldr	r0, [pc, #228]	; (80072dc <_printf_i+0x21c>)
 80071f8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80071fc:	6813      	ldr	r3, [r2, #0]
 80071fe:	6821      	ldr	r1, [r4, #0]
 8007200:	1d1d      	adds	r5, r3, #4
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	6015      	str	r5, [r2, #0]
 8007206:	060a      	lsls	r2, r1, #24
 8007208:	d50b      	bpl.n	8007222 <_printf_i+0x162>
 800720a:	07ca      	lsls	r2, r1, #31
 800720c:	bf44      	itt	mi
 800720e:	f041 0120 	orrmi.w	r1, r1, #32
 8007212:	6021      	strmi	r1, [r4, #0]
 8007214:	b91b      	cbnz	r3, 800721e <_printf_i+0x15e>
 8007216:	6822      	ldr	r2, [r4, #0]
 8007218:	f022 0220 	bic.w	r2, r2, #32
 800721c:	6022      	str	r2, [r4, #0]
 800721e:	2210      	movs	r2, #16
 8007220:	e7b7      	b.n	8007192 <_printf_i+0xd2>
 8007222:	064d      	lsls	r5, r1, #25
 8007224:	bf48      	it	mi
 8007226:	b29b      	uxthmi	r3, r3
 8007228:	e7ef      	b.n	800720a <_printf_i+0x14a>
 800722a:	4665      	mov	r5, ip
 800722c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007230:	fb02 3311 	mls	r3, r2, r1, r3
 8007234:	5cc3      	ldrb	r3, [r0, r3]
 8007236:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800723a:	460b      	mov	r3, r1
 800723c:	2900      	cmp	r1, #0
 800723e:	d1f5      	bne.n	800722c <_printf_i+0x16c>
 8007240:	e7b9      	b.n	80071b6 <_printf_i+0xf6>
 8007242:	6813      	ldr	r3, [r2, #0]
 8007244:	6825      	ldr	r5, [r4, #0]
 8007246:	6961      	ldr	r1, [r4, #20]
 8007248:	1d18      	adds	r0, r3, #4
 800724a:	6010      	str	r0, [r2, #0]
 800724c:	0628      	lsls	r0, r5, #24
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	d501      	bpl.n	8007256 <_printf_i+0x196>
 8007252:	6019      	str	r1, [r3, #0]
 8007254:	e002      	b.n	800725c <_printf_i+0x19c>
 8007256:	066a      	lsls	r2, r5, #25
 8007258:	d5fb      	bpl.n	8007252 <_printf_i+0x192>
 800725a:	8019      	strh	r1, [r3, #0]
 800725c:	2300      	movs	r3, #0
 800725e:	6123      	str	r3, [r4, #16]
 8007260:	4665      	mov	r5, ip
 8007262:	e7b9      	b.n	80071d8 <_printf_i+0x118>
 8007264:	6813      	ldr	r3, [r2, #0]
 8007266:	1d19      	adds	r1, r3, #4
 8007268:	6011      	str	r1, [r2, #0]
 800726a:	681d      	ldr	r5, [r3, #0]
 800726c:	6862      	ldr	r2, [r4, #4]
 800726e:	2100      	movs	r1, #0
 8007270:	4628      	mov	r0, r5
 8007272:	f7f8 ffcd 	bl	8000210 <memchr>
 8007276:	b108      	cbz	r0, 800727c <_printf_i+0x1bc>
 8007278:	1b40      	subs	r0, r0, r5
 800727a:	6060      	str	r0, [r4, #4]
 800727c:	6863      	ldr	r3, [r4, #4]
 800727e:	6123      	str	r3, [r4, #16]
 8007280:	2300      	movs	r3, #0
 8007282:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007286:	e7a7      	b.n	80071d8 <_printf_i+0x118>
 8007288:	6923      	ldr	r3, [r4, #16]
 800728a:	462a      	mov	r2, r5
 800728c:	4639      	mov	r1, r7
 800728e:	4630      	mov	r0, r6
 8007290:	47c0      	blx	r8
 8007292:	3001      	adds	r0, #1
 8007294:	d0aa      	beq.n	80071ec <_printf_i+0x12c>
 8007296:	6823      	ldr	r3, [r4, #0]
 8007298:	079b      	lsls	r3, r3, #30
 800729a:	d413      	bmi.n	80072c4 <_printf_i+0x204>
 800729c:	68e0      	ldr	r0, [r4, #12]
 800729e:	9b03      	ldr	r3, [sp, #12]
 80072a0:	4298      	cmp	r0, r3
 80072a2:	bfb8      	it	lt
 80072a4:	4618      	movlt	r0, r3
 80072a6:	e7a3      	b.n	80071f0 <_printf_i+0x130>
 80072a8:	2301      	movs	r3, #1
 80072aa:	464a      	mov	r2, r9
 80072ac:	4639      	mov	r1, r7
 80072ae:	4630      	mov	r0, r6
 80072b0:	47c0      	blx	r8
 80072b2:	3001      	adds	r0, #1
 80072b4:	d09a      	beq.n	80071ec <_printf_i+0x12c>
 80072b6:	3501      	adds	r5, #1
 80072b8:	68e3      	ldr	r3, [r4, #12]
 80072ba:	9a03      	ldr	r2, [sp, #12]
 80072bc:	1a9b      	subs	r3, r3, r2
 80072be:	42ab      	cmp	r3, r5
 80072c0:	dcf2      	bgt.n	80072a8 <_printf_i+0x1e8>
 80072c2:	e7eb      	b.n	800729c <_printf_i+0x1dc>
 80072c4:	2500      	movs	r5, #0
 80072c6:	f104 0919 	add.w	r9, r4, #25
 80072ca:	e7f5      	b.n	80072b8 <_printf_i+0x1f8>
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d1ac      	bne.n	800722a <_printf_i+0x16a>
 80072d0:	7803      	ldrb	r3, [r0, #0]
 80072d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80072d6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072da:	e76c      	b.n	80071b6 <_printf_i+0xf6>
 80072dc:	08007a89 	.word	0x08007a89
 80072e0:	08007a9a 	.word	0x08007a9a

080072e4 <_putc_r>:
 80072e4:	b570      	push	{r4, r5, r6, lr}
 80072e6:	460d      	mov	r5, r1
 80072e8:	4614      	mov	r4, r2
 80072ea:	4606      	mov	r6, r0
 80072ec:	b118      	cbz	r0, 80072f6 <_putc_r+0x12>
 80072ee:	6983      	ldr	r3, [r0, #24]
 80072f0:	b90b      	cbnz	r3, 80072f6 <_putc_r+0x12>
 80072f2:	f7ff fc4b 	bl	8006b8c <__sinit>
 80072f6:	4b13      	ldr	r3, [pc, #76]	; (8007344 <_putc_r+0x60>)
 80072f8:	429c      	cmp	r4, r3
 80072fa:	d112      	bne.n	8007322 <_putc_r+0x3e>
 80072fc:	6874      	ldr	r4, [r6, #4]
 80072fe:	68a3      	ldr	r3, [r4, #8]
 8007300:	3b01      	subs	r3, #1
 8007302:	2b00      	cmp	r3, #0
 8007304:	60a3      	str	r3, [r4, #8]
 8007306:	da16      	bge.n	8007336 <_putc_r+0x52>
 8007308:	69a2      	ldr	r2, [r4, #24]
 800730a:	4293      	cmp	r3, r2
 800730c:	db02      	blt.n	8007314 <_putc_r+0x30>
 800730e:	b2eb      	uxtb	r3, r5
 8007310:	2b0a      	cmp	r3, #10
 8007312:	d110      	bne.n	8007336 <_putc_r+0x52>
 8007314:	4622      	mov	r2, r4
 8007316:	4629      	mov	r1, r5
 8007318:	4630      	mov	r0, r6
 800731a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800731e:	f000 b86b 	b.w	80073f8 <__swbuf_r>
 8007322:	4b09      	ldr	r3, [pc, #36]	; (8007348 <_putc_r+0x64>)
 8007324:	429c      	cmp	r4, r3
 8007326:	d101      	bne.n	800732c <_putc_r+0x48>
 8007328:	68b4      	ldr	r4, [r6, #8]
 800732a:	e7e8      	b.n	80072fe <_putc_r+0x1a>
 800732c:	4b07      	ldr	r3, [pc, #28]	; (800734c <_putc_r+0x68>)
 800732e:	429c      	cmp	r4, r3
 8007330:	bf08      	it	eq
 8007332:	68f4      	ldreq	r4, [r6, #12]
 8007334:	e7e3      	b.n	80072fe <_putc_r+0x1a>
 8007336:	6823      	ldr	r3, [r4, #0]
 8007338:	1c5a      	adds	r2, r3, #1
 800733a:	6022      	str	r2, [r4, #0]
 800733c:	701d      	strb	r5, [r3, #0]
 800733e:	b2e8      	uxtb	r0, r5
 8007340:	bd70      	pop	{r4, r5, r6, pc}
 8007342:	bf00      	nop
 8007344:	08007a38 	.word	0x08007a38
 8007348:	08007a58 	.word	0x08007a58
 800734c:	08007a18 	.word	0x08007a18

08007350 <_sbrk_r>:
 8007350:	b538      	push	{r3, r4, r5, lr}
 8007352:	4c06      	ldr	r4, [pc, #24]	; (800736c <_sbrk_r+0x1c>)
 8007354:	2300      	movs	r3, #0
 8007356:	4605      	mov	r5, r0
 8007358:	4608      	mov	r0, r1
 800735a:	6023      	str	r3, [r4, #0]
 800735c:	f7ff fae0 	bl	8006920 <_sbrk>
 8007360:	1c43      	adds	r3, r0, #1
 8007362:	d102      	bne.n	800736a <_sbrk_r+0x1a>
 8007364:	6823      	ldr	r3, [r4, #0]
 8007366:	b103      	cbz	r3, 800736a <_sbrk_r+0x1a>
 8007368:	602b      	str	r3, [r5, #0]
 800736a:	bd38      	pop	{r3, r4, r5, pc}
 800736c:	2000402c 	.word	0x2000402c

08007370 <__sread>:
 8007370:	b510      	push	{r4, lr}
 8007372:	460c      	mov	r4, r1
 8007374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007378:	f000 fa96 	bl	80078a8 <_read_r>
 800737c:	2800      	cmp	r0, #0
 800737e:	bfab      	itete	ge
 8007380:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007382:	89a3      	ldrhlt	r3, [r4, #12]
 8007384:	181b      	addge	r3, r3, r0
 8007386:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800738a:	bfac      	ite	ge
 800738c:	6563      	strge	r3, [r4, #84]	; 0x54
 800738e:	81a3      	strhlt	r3, [r4, #12]
 8007390:	bd10      	pop	{r4, pc}

08007392 <__swrite>:
 8007392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007396:	461f      	mov	r7, r3
 8007398:	898b      	ldrh	r3, [r1, #12]
 800739a:	05db      	lsls	r3, r3, #23
 800739c:	4605      	mov	r5, r0
 800739e:	460c      	mov	r4, r1
 80073a0:	4616      	mov	r6, r2
 80073a2:	d505      	bpl.n	80073b0 <__swrite+0x1e>
 80073a4:	2302      	movs	r3, #2
 80073a6:	2200      	movs	r2, #0
 80073a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073ac:	f000 f9b6 	bl	800771c <_lseek_r>
 80073b0:	89a3      	ldrh	r3, [r4, #12]
 80073b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073ba:	81a3      	strh	r3, [r4, #12]
 80073bc:	4632      	mov	r2, r6
 80073be:	463b      	mov	r3, r7
 80073c0:	4628      	mov	r0, r5
 80073c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073c6:	f000 b869 	b.w	800749c <_write_r>

080073ca <__sseek>:
 80073ca:	b510      	push	{r4, lr}
 80073cc:	460c      	mov	r4, r1
 80073ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073d2:	f000 f9a3 	bl	800771c <_lseek_r>
 80073d6:	1c43      	adds	r3, r0, #1
 80073d8:	89a3      	ldrh	r3, [r4, #12]
 80073da:	bf15      	itete	ne
 80073dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80073de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80073e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80073e6:	81a3      	strheq	r3, [r4, #12]
 80073e8:	bf18      	it	ne
 80073ea:	81a3      	strhne	r3, [r4, #12]
 80073ec:	bd10      	pop	{r4, pc}

080073ee <__sclose>:
 80073ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073f2:	f000 b8d3 	b.w	800759c <_close_r>
	...

080073f8 <__swbuf_r>:
 80073f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073fa:	460e      	mov	r6, r1
 80073fc:	4614      	mov	r4, r2
 80073fe:	4605      	mov	r5, r0
 8007400:	b118      	cbz	r0, 800740a <__swbuf_r+0x12>
 8007402:	6983      	ldr	r3, [r0, #24]
 8007404:	b90b      	cbnz	r3, 800740a <__swbuf_r+0x12>
 8007406:	f7ff fbc1 	bl	8006b8c <__sinit>
 800740a:	4b21      	ldr	r3, [pc, #132]	; (8007490 <__swbuf_r+0x98>)
 800740c:	429c      	cmp	r4, r3
 800740e:	d12a      	bne.n	8007466 <__swbuf_r+0x6e>
 8007410:	686c      	ldr	r4, [r5, #4]
 8007412:	69a3      	ldr	r3, [r4, #24]
 8007414:	60a3      	str	r3, [r4, #8]
 8007416:	89a3      	ldrh	r3, [r4, #12]
 8007418:	071a      	lsls	r2, r3, #28
 800741a:	d52e      	bpl.n	800747a <__swbuf_r+0x82>
 800741c:	6923      	ldr	r3, [r4, #16]
 800741e:	b363      	cbz	r3, 800747a <__swbuf_r+0x82>
 8007420:	6923      	ldr	r3, [r4, #16]
 8007422:	6820      	ldr	r0, [r4, #0]
 8007424:	1ac0      	subs	r0, r0, r3
 8007426:	6963      	ldr	r3, [r4, #20]
 8007428:	b2f6      	uxtb	r6, r6
 800742a:	4283      	cmp	r3, r0
 800742c:	4637      	mov	r7, r6
 800742e:	dc04      	bgt.n	800743a <__swbuf_r+0x42>
 8007430:	4621      	mov	r1, r4
 8007432:	4628      	mov	r0, r5
 8007434:	f000 f948 	bl	80076c8 <_fflush_r>
 8007438:	bb28      	cbnz	r0, 8007486 <__swbuf_r+0x8e>
 800743a:	68a3      	ldr	r3, [r4, #8]
 800743c:	3b01      	subs	r3, #1
 800743e:	60a3      	str	r3, [r4, #8]
 8007440:	6823      	ldr	r3, [r4, #0]
 8007442:	1c5a      	adds	r2, r3, #1
 8007444:	6022      	str	r2, [r4, #0]
 8007446:	701e      	strb	r6, [r3, #0]
 8007448:	6963      	ldr	r3, [r4, #20]
 800744a:	3001      	adds	r0, #1
 800744c:	4283      	cmp	r3, r0
 800744e:	d004      	beq.n	800745a <__swbuf_r+0x62>
 8007450:	89a3      	ldrh	r3, [r4, #12]
 8007452:	07db      	lsls	r3, r3, #31
 8007454:	d519      	bpl.n	800748a <__swbuf_r+0x92>
 8007456:	2e0a      	cmp	r6, #10
 8007458:	d117      	bne.n	800748a <__swbuf_r+0x92>
 800745a:	4621      	mov	r1, r4
 800745c:	4628      	mov	r0, r5
 800745e:	f000 f933 	bl	80076c8 <_fflush_r>
 8007462:	b190      	cbz	r0, 800748a <__swbuf_r+0x92>
 8007464:	e00f      	b.n	8007486 <__swbuf_r+0x8e>
 8007466:	4b0b      	ldr	r3, [pc, #44]	; (8007494 <__swbuf_r+0x9c>)
 8007468:	429c      	cmp	r4, r3
 800746a:	d101      	bne.n	8007470 <__swbuf_r+0x78>
 800746c:	68ac      	ldr	r4, [r5, #8]
 800746e:	e7d0      	b.n	8007412 <__swbuf_r+0x1a>
 8007470:	4b09      	ldr	r3, [pc, #36]	; (8007498 <__swbuf_r+0xa0>)
 8007472:	429c      	cmp	r4, r3
 8007474:	bf08      	it	eq
 8007476:	68ec      	ldreq	r4, [r5, #12]
 8007478:	e7cb      	b.n	8007412 <__swbuf_r+0x1a>
 800747a:	4621      	mov	r1, r4
 800747c:	4628      	mov	r0, r5
 800747e:	f000 f81f 	bl	80074c0 <__swsetup_r>
 8007482:	2800      	cmp	r0, #0
 8007484:	d0cc      	beq.n	8007420 <__swbuf_r+0x28>
 8007486:	f04f 37ff 	mov.w	r7, #4294967295
 800748a:	4638      	mov	r0, r7
 800748c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800748e:	bf00      	nop
 8007490:	08007a38 	.word	0x08007a38
 8007494:	08007a58 	.word	0x08007a58
 8007498:	08007a18 	.word	0x08007a18

0800749c <_write_r>:
 800749c:	b538      	push	{r3, r4, r5, lr}
 800749e:	4c07      	ldr	r4, [pc, #28]	; (80074bc <_write_r+0x20>)
 80074a0:	4605      	mov	r5, r0
 80074a2:	4608      	mov	r0, r1
 80074a4:	4611      	mov	r1, r2
 80074a6:	2200      	movs	r2, #0
 80074a8:	6022      	str	r2, [r4, #0]
 80074aa:	461a      	mov	r2, r3
 80074ac:	f7ff f9e7 	bl	800687e <_write>
 80074b0:	1c43      	adds	r3, r0, #1
 80074b2:	d102      	bne.n	80074ba <_write_r+0x1e>
 80074b4:	6823      	ldr	r3, [r4, #0]
 80074b6:	b103      	cbz	r3, 80074ba <_write_r+0x1e>
 80074b8:	602b      	str	r3, [r5, #0]
 80074ba:	bd38      	pop	{r3, r4, r5, pc}
 80074bc:	2000402c 	.word	0x2000402c

080074c0 <__swsetup_r>:
 80074c0:	4b32      	ldr	r3, [pc, #200]	; (800758c <__swsetup_r+0xcc>)
 80074c2:	b570      	push	{r4, r5, r6, lr}
 80074c4:	681d      	ldr	r5, [r3, #0]
 80074c6:	4606      	mov	r6, r0
 80074c8:	460c      	mov	r4, r1
 80074ca:	b125      	cbz	r5, 80074d6 <__swsetup_r+0x16>
 80074cc:	69ab      	ldr	r3, [r5, #24]
 80074ce:	b913      	cbnz	r3, 80074d6 <__swsetup_r+0x16>
 80074d0:	4628      	mov	r0, r5
 80074d2:	f7ff fb5b 	bl	8006b8c <__sinit>
 80074d6:	4b2e      	ldr	r3, [pc, #184]	; (8007590 <__swsetup_r+0xd0>)
 80074d8:	429c      	cmp	r4, r3
 80074da:	d10f      	bne.n	80074fc <__swsetup_r+0x3c>
 80074dc:	686c      	ldr	r4, [r5, #4]
 80074de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074e2:	b29a      	uxth	r2, r3
 80074e4:	0715      	lsls	r5, r2, #28
 80074e6:	d42c      	bmi.n	8007542 <__swsetup_r+0x82>
 80074e8:	06d0      	lsls	r0, r2, #27
 80074ea:	d411      	bmi.n	8007510 <__swsetup_r+0x50>
 80074ec:	2209      	movs	r2, #9
 80074ee:	6032      	str	r2, [r6, #0]
 80074f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074f4:	81a3      	strh	r3, [r4, #12]
 80074f6:	f04f 30ff 	mov.w	r0, #4294967295
 80074fa:	e03e      	b.n	800757a <__swsetup_r+0xba>
 80074fc:	4b25      	ldr	r3, [pc, #148]	; (8007594 <__swsetup_r+0xd4>)
 80074fe:	429c      	cmp	r4, r3
 8007500:	d101      	bne.n	8007506 <__swsetup_r+0x46>
 8007502:	68ac      	ldr	r4, [r5, #8]
 8007504:	e7eb      	b.n	80074de <__swsetup_r+0x1e>
 8007506:	4b24      	ldr	r3, [pc, #144]	; (8007598 <__swsetup_r+0xd8>)
 8007508:	429c      	cmp	r4, r3
 800750a:	bf08      	it	eq
 800750c:	68ec      	ldreq	r4, [r5, #12]
 800750e:	e7e6      	b.n	80074de <__swsetup_r+0x1e>
 8007510:	0751      	lsls	r1, r2, #29
 8007512:	d512      	bpl.n	800753a <__swsetup_r+0x7a>
 8007514:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007516:	b141      	cbz	r1, 800752a <__swsetup_r+0x6a>
 8007518:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800751c:	4299      	cmp	r1, r3
 800751e:	d002      	beq.n	8007526 <__swsetup_r+0x66>
 8007520:	4630      	mov	r0, r6
 8007522:	f000 f973 	bl	800780c <_free_r>
 8007526:	2300      	movs	r3, #0
 8007528:	6363      	str	r3, [r4, #52]	; 0x34
 800752a:	89a3      	ldrh	r3, [r4, #12]
 800752c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007530:	81a3      	strh	r3, [r4, #12]
 8007532:	2300      	movs	r3, #0
 8007534:	6063      	str	r3, [r4, #4]
 8007536:	6923      	ldr	r3, [r4, #16]
 8007538:	6023      	str	r3, [r4, #0]
 800753a:	89a3      	ldrh	r3, [r4, #12]
 800753c:	f043 0308 	orr.w	r3, r3, #8
 8007540:	81a3      	strh	r3, [r4, #12]
 8007542:	6923      	ldr	r3, [r4, #16]
 8007544:	b94b      	cbnz	r3, 800755a <__swsetup_r+0x9a>
 8007546:	89a3      	ldrh	r3, [r4, #12]
 8007548:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800754c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007550:	d003      	beq.n	800755a <__swsetup_r+0x9a>
 8007552:	4621      	mov	r1, r4
 8007554:	4630      	mov	r0, r6
 8007556:	f000 f917 	bl	8007788 <__smakebuf_r>
 800755a:	89a2      	ldrh	r2, [r4, #12]
 800755c:	f012 0301 	ands.w	r3, r2, #1
 8007560:	d00c      	beq.n	800757c <__swsetup_r+0xbc>
 8007562:	2300      	movs	r3, #0
 8007564:	60a3      	str	r3, [r4, #8]
 8007566:	6963      	ldr	r3, [r4, #20]
 8007568:	425b      	negs	r3, r3
 800756a:	61a3      	str	r3, [r4, #24]
 800756c:	6923      	ldr	r3, [r4, #16]
 800756e:	b953      	cbnz	r3, 8007586 <__swsetup_r+0xc6>
 8007570:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007574:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007578:	d1ba      	bne.n	80074f0 <__swsetup_r+0x30>
 800757a:	bd70      	pop	{r4, r5, r6, pc}
 800757c:	0792      	lsls	r2, r2, #30
 800757e:	bf58      	it	pl
 8007580:	6963      	ldrpl	r3, [r4, #20]
 8007582:	60a3      	str	r3, [r4, #8]
 8007584:	e7f2      	b.n	800756c <__swsetup_r+0xac>
 8007586:	2000      	movs	r0, #0
 8007588:	e7f7      	b.n	800757a <__swsetup_r+0xba>
 800758a:	bf00      	nop
 800758c:	2000000c 	.word	0x2000000c
 8007590:	08007a38 	.word	0x08007a38
 8007594:	08007a58 	.word	0x08007a58
 8007598:	08007a18 	.word	0x08007a18

0800759c <_close_r>:
 800759c:	b538      	push	{r3, r4, r5, lr}
 800759e:	4c06      	ldr	r4, [pc, #24]	; (80075b8 <_close_r+0x1c>)
 80075a0:	2300      	movs	r3, #0
 80075a2:	4605      	mov	r5, r0
 80075a4:	4608      	mov	r0, r1
 80075a6:	6023      	str	r3, [r4, #0]
 80075a8:	f7ff f985 	bl	80068b6 <_close>
 80075ac:	1c43      	adds	r3, r0, #1
 80075ae:	d102      	bne.n	80075b6 <_close_r+0x1a>
 80075b0:	6823      	ldr	r3, [r4, #0]
 80075b2:	b103      	cbz	r3, 80075b6 <_close_r+0x1a>
 80075b4:	602b      	str	r3, [r5, #0]
 80075b6:	bd38      	pop	{r3, r4, r5, pc}
 80075b8:	2000402c 	.word	0x2000402c

080075bc <__sflush_r>:
 80075bc:	898a      	ldrh	r2, [r1, #12]
 80075be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075c2:	4605      	mov	r5, r0
 80075c4:	0710      	lsls	r0, r2, #28
 80075c6:	460c      	mov	r4, r1
 80075c8:	d458      	bmi.n	800767c <__sflush_r+0xc0>
 80075ca:	684b      	ldr	r3, [r1, #4]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	dc05      	bgt.n	80075dc <__sflush_r+0x20>
 80075d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	dc02      	bgt.n	80075dc <__sflush_r+0x20>
 80075d6:	2000      	movs	r0, #0
 80075d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075de:	2e00      	cmp	r6, #0
 80075e0:	d0f9      	beq.n	80075d6 <__sflush_r+0x1a>
 80075e2:	2300      	movs	r3, #0
 80075e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80075e8:	682f      	ldr	r7, [r5, #0]
 80075ea:	6a21      	ldr	r1, [r4, #32]
 80075ec:	602b      	str	r3, [r5, #0]
 80075ee:	d032      	beq.n	8007656 <__sflush_r+0x9a>
 80075f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80075f2:	89a3      	ldrh	r3, [r4, #12]
 80075f4:	075a      	lsls	r2, r3, #29
 80075f6:	d505      	bpl.n	8007604 <__sflush_r+0x48>
 80075f8:	6863      	ldr	r3, [r4, #4]
 80075fa:	1ac0      	subs	r0, r0, r3
 80075fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80075fe:	b10b      	cbz	r3, 8007604 <__sflush_r+0x48>
 8007600:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007602:	1ac0      	subs	r0, r0, r3
 8007604:	2300      	movs	r3, #0
 8007606:	4602      	mov	r2, r0
 8007608:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800760a:	6a21      	ldr	r1, [r4, #32]
 800760c:	4628      	mov	r0, r5
 800760e:	47b0      	blx	r6
 8007610:	1c43      	adds	r3, r0, #1
 8007612:	89a3      	ldrh	r3, [r4, #12]
 8007614:	d106      	bne.n	8007624 <__sflush_r+0x68>
 8007616:	6829      	ldr	r1, [r5, #0]
 8007618:	291d      	cmp	r1, #29
 800761a:	d848      	bhi.n	80076ae <__sflush_r+0xf2>
 800761c:	4a29      	ldr	r2, [pc, #164]	; (80076c4 <__sflush_r+0x108>)
 800761e:	40ca      	lsrs	r2, r1
 8007620:	07d6      	lsls	r6, r2, #31
 8007622:	d544      	bpl.n	80076ae <__sflush_r+0xf2>
 8007624:	2200      	movs	r2, #0
 8007626:	6062      	str	r2, [r4, #4]
 8007628:	04d9      	lsls	r1, r3, #19
 800762a:	6922      	ldr	r2, [r4, #16]
 800762c:	6022      	str	r2, [r4, #0]
 800762e:	d504      	bpl.n	800763a <__sflush_r+0x7e>
 8007630:	1c42      	adds	r2, r0, #1
 8007632:	d101      	bne.n	8007638 <__sflush_r+0x7c>
 8007634:	682b      	ldr	r3, [r5, #0]
 8007636:	b903      	cbnz	r3, 800763a <__sflush_r+0x7e>
 8007638:	6560      	str	r0, [r4, #84]	; 0x54
 800763a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800763c:	602f      	str	r7, [r5, #0]
 800763e:	2900      	cmp	r1, #0
 8007640:	d0c9      	beq.n	80075d6 <__sflush_r+0x1a>
 8007642:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007646:	4299      	cmp	r1, r3
 8007648:	d002      	beq.n	8007650 <__sflush_r+0x94>
 800764a:	4628      	mov	r0, r5
 800764c:	f000 f8de 	bl	800780c <_free_r>
 8007650:	2000      	movs	r0, #0
 8007652:	6360      	str	r0, [r4, #52]	; 0x34
 8007654:	e7c0      	b.n	80075d8 <__sflush_r+0x1c>
 8007656:	2301      	movs	r3, #1
 8007658:	4628      	mov	r0, r5
 800765a:	47b0      	blx	r6
 800765c:	1c41      	adds	r1, r0, #1
 800765e:	d1c8      	bne.n	80075f2 <__sflush_r+0x36>
 8007660:	682b      	ldr	r3, [r5, #0]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d0c5      	beq.n	80075f2 <__sflush_r+0x36>
 8007666:	2b1d      	cmp	r3, #29
 8007668:	d001      	beq.n	800766e <__sflush_r+0xb2>
 800766a:	2b16      	cmp	r3, #22
 800766c:	d101      	bne.n	8007672 <__sflush_r+0xb6>
 800766e:	602f      	str	r7, [r5, #0]
 8007670:	e7b1      	b.n	80075d6 <__sflush_r+0x1a>
 8007672:	89a3      	ldrh	r3, [r4, #12]
 8007674:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007678:	81a3      	strh	r3, [r4, #12]
 800767a:	e7ad      	b.n	80075d8 <__sflush_r+0x1c>
 800767c:	690f      	ldr	r7, [r1, #16]
 800767e:	2f00      	cmp	r7, #0
 8007680:	d0a9      	beq.n	80075d6 <__sflush_r+0x1a>
 8007682:	0793      	lsls	r3, r2, #30
 8007684:	680e      	ldr	r6, [r1, #0]
 8007686:	bf08      	it	eq
 8007688:	694b      	ldreq	r3, [r1, #20]
 800768a:	600f      	str	r7, [r1, #0]
 800768c:	bf18      	it	ne
 800768e:	2300      	movne	r3, #0
 8007690:	eba6 0807 	sub.w	r8, r6, r7
 8007694:	608b      	str	r3, [r1, #8]
 8007696:	f1b8 0f00 	cmp.w	r8, #0
 800769a:	dd9c      	ble.n	80075d6 <__sflush_r+0x1a>
 800769c:	4643      	mov	r3, r8
 800769e:	463a      	mov	r2, r7
 80076a0:	6a21      	ldr	r1, [r4, #32]
 80076a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80076a4:	4628      	mov	r0, r5
 80076a6:	47b0      	blx	r6
 80076a8:	2800      	cmp	r0, #0
 80076aa:	dc06      	bgt.n	80076ba <__sflush_r+0xfe>
 80076ac:	89a3      	ldrh	r3, [r4, #12]
 80076ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076b2:	81a3      	strh	r3, [r4, #12]
 80076b4:	f04f 30ff 	mov.w	r0, #4294967295
 80076b8:	e78e      	b.n	80075d8 <__sflush_r+0x1c>
 80076ba:	4407      	add	r7, r0
 80076bc:	eba8 0800 	sub.w	r8, r8, r0
 80076c0:	e7e9      	b.n	8007696 <__sflush_r+0xda>
 80076c2:	bf00      	nop
 80076c4:	20400001 	.word	0x20400001

080076c8 <_fflush_r>:
 80076c8:	b538      	push	{r3, r4, r5, lr}
 80076ca:	690b      	ldr	r3, [r1, #16]
 80076cc:	4605      	mov	r5, r0
 80076ce:	460c      	mov	r4, r1
 80076d0:	b1db      	cbz	r3, 800770a <_fflush_r+0x42>
 80076d2:	b118      	cbz	r0, 80076dc <_fflush_r+0x14>
 80076d4:	6983      	ldr	r3, [r0, #24]
 80076d6:	b90b      	cbnz	r3, 80076dc <_fflush_r+0x14>
 80076d8:	f7ff fa58 	bl	8006b8c <__sinit>
 80076dc:	4b0c      	ldr	r3, [pc, #48]	; (8007710 <_fflush_r+0x48>)
 80076de:	429c      	cmp	r4, r3
 80076e0:	d109      	bne.n	80076f6 <_fflush_r+0x2e>
 80076e2:	686c      	ldr	r4, [r5, #4]
 80076e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076e8:	b17b      	cbz	r3, 800770a <_fflush_r+0x42>
 80076ea:	4621      	mov	r1, r4
 80076ec:	4628      	mov	r0, r5
 80076ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076f2:	f7ff bf63 	b.w	80075bc <__sflush_r>
 80076f6:	4b07      	ldr	r3, [pc, #28]	; (8007714 <_fflush_r+0x4c>)
 80076f8:	429c      	cmp	r4, r3
 80076fa:	d101      	bne.n	8007700 <_fflush_r+0x38>
 80076fc:	68ac      	ldr	r4, [r5, #8]
 80076fe:	e7f1      	b.n	80076e4 <_fflush_r+0x1c>
 8007700:	4b05      	ldr	r3, [pc, #20]	; (8007718 <_fflush_r+0x50>)
 8007702:	429c      	cmp	r4, r3
 8007704:	bf08      	it	eq
 8007706:	68ec      	ldreq	r4, [r5, #12]
 8007708:	e7ec      	b.n	80076e4 <_fflush_r+0x1c>
 800770a:	2000      	movs	r0, #0
 800770c:	bd38      	pop	{r3, r4, r5, pc}
 800770e:	bf00      	nop
 8007710:	08007a38 	.word	0x08007a38
 8007714:	08007a58 	.word	0x08007a58
 8007718:	08007a18 	.word	0x08007a18

0800771c <_lseek_r>:
 800771c:	b538      	push	{r3, r4, r5, lr}
 800771e:	4c07      	ldr	r4, [pc, #28]	; (800773c <_lseek_r+0x20>)
 8007720:	4605      	mov	r5, r0
 8007722:	4608      	mov	r0, r1
 8007724:	4611      	mov	r1, r2
 8007726:	2200      	movs	r2, #0
 8007728:	6022      	str	r2, [r4, #0]
 800772a:	461a      	mov	r2, r3
 800772c:	f7ff f8ea 	bl	8006904 <_lseek>
 8007730:	1c43      	adds	r3, r0, #1
 8007732:	d102      	bne.n	800773a <_lseek_r+0x1e>
 8007734:	6823      	ldr	r3, [r4, #0]
 8007736:	b103      	cbz	r3, 800773a <_lseek_r+0x1e>
 8007738:	602b      	str	r3, [r5, #0]
 800773a:	bd38      	pop	{r3, r4, r5, pc}
 800773c:	2000402c 	.word	0x2000402c

08007740 <__swhatbuf_r>:
 8007740:	b570      	push	{r4, r5, r6, lr}
 8007742:	460e      	mov	r6, r1
 8007744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007748:	2900      	cmp	r1, #0
 800774a:	b096      	sub	sp, #88	; 0x58
 800774c:	4614      	mov	r4, r2
 800774e:	461d      	mov	r5, r3
 8007750:	da07      	bge.n	8007762 <__swhatbuf_r+0x22>
 8007752:	2300      	movs	r3, #0
 8007754:	602b      	str	r3, [r5, #0]
 8007756:	89b3      	ldrh	r3, [r6, #12]
 8007758:	061a      	lsls	r2, r3, #24
 800775a:	d410      	bmi.n	800777e <__swhatbuf_r+0x3e>
 800775c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007760:	e00e      	b.n	8007780 <__swhatbuf_r+0x40>
 8007762:	466a      	mov	r2, sp
 8007764:	f000 f8b2 	bl	80078cc <_fstat_r>
 8007768:	2800      	cmp	r0, #0
 800776a:	dbf2      	blt.n	8007752 <__swhatbuf_r+0x12>
 800776c:	9a01      	ldr	r2, [sp, #4]
 800776e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007772:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007776:	425a      	negs	r2, r3
 8007778:	415a      	adcs	r2, r3
 800777a:	602a      	str	r2, [r5, #0]
 800777c:	e7ee      	b.n	800775c <__swhatbuf_r+0x1c>
 800777e:	2340      	movs	r3, #64	; 0x40
 8007780:	2000      	movs	r0, #0
 8007782:	6023      	str	r3, [r4, #0]
 8007784:	b016      	add	sp, #88	; 0x58
 8007786:	bd70      	pop	{r4, r5, r6, pc}

08007788 <__smakebuf_r>:
 8007788:	898b      	ldrh	r3, [r1, #12]
 800778a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800778c:	079d      	lsls	r5, r3, #30
 800778e:	4606      	mov	r6, r0
 8007790:	460c      	mov	r4, r1
 8007792:	d507      	bpl.n	80077a4 <__smakebuf_r+0x1c>
 8007794:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007798:	6023      	str	r3, [r4, #0]
 800779a:	6123      	str	r3, [r4, #16]
 800779c:	2301      	movs	r3, #1
 800779e:	6163      	str	r3, [r4, #20]
 80077a0:	b002      	add	sp, #8
 80077a2:	bd70      	pop	{r4, r5, r6, pc}
 80077a4:	ab01      	add	r3, sp, #4
 80077a6:	466a      	mov	r2, sp
 80077a8:	f7ff ffca 	bl	8007740 <__swhatbuf_r>
 80077ac:	9900      	ldr	r1, [sp, #0]
 80077ae:	4605      	mov	r5, r0
 80077b0:	4630      	mov	r0, r6
 80077b2:	f7ff fa75 	bl	8006ca0 <_malloc_r>
 80077b6:	b948      	cbnz	r0, 80077cc <__smakebuf_r+0x44>
 80077b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077bc:	059a      	lsls	r2, r3, #22
 80077be:	d4ef      	bmi.n	80077a0 <__smakebuf_r+0x18>
 80077c0:	f023 0303 	bic.w	r3, r3, #3
 80077c4:	f043 0302 	orr.w	r3, r3, #2
 80077c8:	81a3      	strh	r3, [r4, #12]
 80077ca:	e7e3      	b.n	8007794 <__smakebuf_r+0xc>
 80077cc:	4b0d      	ldr	r3, [pc, #52]	; (8007804 <__smakebuf_r+0x7c>)
 80077ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80077d0:	89a3      	ldrh	r3, [r4, #12]
 80077d2:	6020      	str	r0, [r4, #0]
 80077d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077d8:	81a3      	strh	r3, [r4, #12]
 80077da:	9b00      	ldr	r3, [sp, #0]
 80077dc:	6163      	str	r3, [r4, #20]
 80077de:	9b01      	ldr	r3, [sp, #4]
 80077e0:	6120      	str	r0, [r4, #16]
 80077e2:	b15b      	cbz	r3, 80077fc <__smakebuf_r+0x74>
 80077e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077e8:	4630      	mov	r0, r6
 80077ea:	f000 f881 	bl	80078f0 <_isatty_r>
 80077ee:	b128      	cbz	r0, 80077fc <__smakebuf_r+0x74>
 80077f0:	89a3      	ldrh	r3, [r4, #12]
 80077f2:	f023 0303 	bic.w	r3, r3, #3
 80077f6:	f043 0301 	orr.w	r3, r3, #1
 80077fa:	81a3      	strh	r3, [r4, #12]
 80077fc:	89a3      	ldrh	r3, [r4, #12]
 80077fe:	431d      	orrs	r5, r3
 8007800:	81a5      	strh	r5, [r4, #12]
 8007802:	e7cd      	b.n	80077a0 <__smakebuf_r+0x18>
 8007804:	08006b55 	.word	0x08006b55

08007808 <__malloc_lock>:
 8007808:	4770      	bx	lr

0800780a <__malloc_unlock>:
 800780a:	4770      	bx	lr

0800780c <_free_r>:
 800780c:	b538      	push	{r3, r4, r5, lr}
 800780e:	4605      	mov	r5, r0
 8007810:	2900      	cmp	r1, #0
 8007812:	d045      	beq.n	80078a0 <_free_r+0x94>
 8007814:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007818:	1f0c      	subs	r4, r1, #4
 800781a:	2b00      	cmp	r3, #0
 800781c:	bfb8      	it	lt
 800781e:	18e4      	addlt	r4, r4, r3
 8007820:	f7ff fff2 	bl	8007808 <__malloc_lock>
 8007824:	4a1f      	ldr	r2, [pc, #124]	; (80078a4 <_free_r+0x98>)
 8007826:	6813      	ldr	r3, [r2, #0]
 8007828:	4610      	mov	r0, r2
 800782a:	b933      	cbnz	r3, 800783a <_free_r+0x2e>
 800782c:	6063      	str	r3, [r4, #4]
 800782e:	6014      	str	r4, [r2, #0]
 8007830:	4628      	mov	r0, r5
 8007832:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007836:	f7ff bfe8 	b.w	800780a <__malloc_unlock>
 800783a:	42a3      	cmp	r3, r4
 800783c:	d90c      	bls.n	8007858 <_free_r+0x4c>
 800783e:	6821      	ldr	r1, [r4, #0]
 8007840:	1862      	adds	r2, r4, r1
 8007842:	4293      	cmp	r3, r2
 8007844:	bf04      	itt	eq
 8007846:	681a      	ldreq	r2, [r3, #0]
 8007848:	685b      	ldreq	r3, [r3, #4]
 800784a:	6063      	str	r3, [r4, #4]
 800784c:	bf04      	itt	eq
 800784e:	1852      	addeq	r2, r2, r1
 8007850:	6022      	streq	r2, [r4, #0]
 8007852:	6004      	str	r4, [r0, #0]
 8007854:	e7ec      	b.n	8007830 <_free_r+0x24>
 8007856:	4613      	mov	r3, r2
 8007858:	685a      	ldr	r2, [r3, #4]
 800785a:	b10a      	cbz	r2, 8007860 <_free_r+0x54>
 800785c:	42a2      	cmp	r2, r4
 800785e:	d9fa      	bls.n	8007856 <_free_r+0x4a>
 8007860:	6819      	ldr	r1, [r3, #0]
 8007862:	1858      	adds	r0, r3, r1
 8007864:	42a0      	cmp	r0, r4
 8007866:	d10b      	bne.n	8007880 <_free_r+0x74>
 8007868:	6820      	ldr	r0, [r4, #0]
 800786a:	4401      	add	r1, r0
 800786c:	1858      	adds	r0, r3, r1
 800786e:	4282      	cmp	r2, r0
 8007870:	6019      	str	r1, [r3, #0]
 8007872:	d1dd      	bne.n	8007830 <_free_r+0x24>
 8007874:	6810      	ldr	r0, [r2, #0]
 8007876:	6852      	ldr	r2, [r2, #4]
 8007878:	605a      	str	r2, [r3, #4]
 800787a:	4401      	add	r1, r0
 800787c:	6019      	str	r1, [r3, #0]
 800787e:	e7d7      	b.n	8007830 <_free_r+0x24>
 8007880:	d902      	bls.n	8007888 <_free_r+0x7c>
 8007882:	230c      	movs	r3, #12
 8007884:	602b      	str	r3, [r5, #0]
 8007886:	e7d3      	b.n	8007830 <_free_r+0x24>
 8007888:	6820      	ldr	r0, [r4, #0]
 800788a:	1821      	adds	r1, r4, r0
 800788c:	428a      	cmp	r2, r1
 800788e:	bf04      	itt	eq
 8007890:	6811      	ldreq	r1, [r2, #0]
 8007892:	6852      	ldreq	r2, [r2, #4]
 8007894:	6062      	str	r2, [r4, #4]
 8007896:	bf04      	itt	eq
 8007898:	1809      	addeq	r1, r1, r0
 800789a:	6021      	streq	r1, [r4, #0]
 800789c:	605c      	str	r4, [r3, #4]
 800789e:	e7c7      	b.n	8007830 <_free_r+0x24>
 80078a0:	bd38      	pop	{r3, r4, r5, pc}
 80078a2:	bf00      	nop
 80078a4:	20003dec 	.word	0x20003dec

080078a8 <_read_r>:
 80078a8:	b538      	push	{r3, r4, r5, lr}
 80078aa:	4c07      	ldr	r4, [pc, #28]	; (80078c8 <_read_r+0x20>)
 80078ac:	4605      	mov	r5, r0
 80078ae:	4608      	mov	r0, r1
 80078b0:	4611      	mov	r1, r2
 80078b2:	2200      	movs	r2, #0
 80078b4:	6022      	str	r2, [r4, #0]
 80078b6:	461a      	mov	r2, r3
 80078b8:	f7fe ffc4 	bl	8006844 <_read>
 80078bc:	1c43      	adds	r3, r0, #1
 80078be:	d102      	bne.n	80078c6 <_read_r+0x1e>
 80078c0:	6823      	ldr	r3, [r4, #0]
 80078c2:	b103      	cbz	r3, 80078c6 <_read_r+0x1e>
 80078c4:	602b      	str	r3, [r5, #0]
 80078c6:	bd38      	pop	{r3, r4, r5, pc}
 80078c8:	2000402c 	.word	0x2000402c

080078cc <_fstat_r>:
 80078cc:	b538      	push	{r3, r4, r5, lr}
 80078ce:	4c07      	ldr	r4, [pc, #28]	; (80078ec <_fstat_r+0x20>)
 80078d0:	2300      	movs	r3, #0
 80078d2:	4605      	mov	r5, r0
 80078d4:	4608      	mov	r0, r1
 80078d6:	4611      	mov	r1, r2
 80078d8:	6023      	str	r3, [r4, #0]
 80078da:	f7fe fff8 	bl	80068ce <_fstat>
 80078de:	1c43      	adds	r3, r0, #1
 80078e0:	d102      	bne.n	80078e8 <_fstat_r+0x1c>
 80078e2:	6823      	ldr	r3, [r4, #0]
 80078e4:	b103      	cbz	r3, 80078e8 <_fstat_r+0x1c>
 80078e6:	602b      	str	r3, [r5, #0]
 80078e8:	bd38      	pop	{r3, r4, r5, pc}
 80078ea:	bf00      	nop
 80078ec:	2000402c 	.word	0x2000402c

080078f0 <_isatty_r>:
 80078f0:	b538      	push	{r3, r4, r5, lr}
 80078f2:	4c06      	ldr	r4, [pc, #24]	; (800790c <_isatty_r+0x1c>)
 80078f4:	2300      	movs	r3, #0
 80078f6:	4605      	mov	r5, r0
 80078f8:	4608      	mov	r0, r1
 80078fa:	6023      	str	r3, [r4, #0]
 80078fc:	f7fe fff7 	bl	80068ee <_isatty>
 8007900:	1c43      	adds	r3, r0, #1
 8007902:	d102      	bne.n	800790a <_isatty_r+0x1a>
 8007904:	6823      	ldr	r3, [r4, #0]
 8007906:	b103      	cbz	r3, 800790a <_isatty_r+0x1a>
 8007908:	602b      	str	r3, [r5, #0]
 800790a:	bd38      	pop	{r3, r4, r5, pc}
 800790c:	2000402c 	.word	0x2000402c

08007910 <_init>:
 8007910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007912:	bf00      	nop
 8007914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007916:	bc08      	pop	{r3}
 8007918:	469e      	mov	lr, r3
 800791a:	4770      	bx	lr

0800791c <_fini>:
 800791c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800791e:	bf00      	nop
 8007920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007922:	bc08      	pop	{r3}
 8007924:	469e      	mov	lr, r3
 8007926:	4770      	bx	lr
