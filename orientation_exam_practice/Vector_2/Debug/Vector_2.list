
Vector_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f60  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08008130  08008130  00018130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008318  08008318  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008318  08008318  00018318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008320  08008320  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008320  08008320  00018320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008324  08008324  00018324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008328  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003f00  20000070  08008398  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003f70  08008398  00023f70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000176d6  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000033c8  00000000  00000000  00037776  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001410  00000000  00000000  0003ab40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001288  00000000  00000000  0003bf50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027f8b  00000000  00000000  0003d1d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010da5  00000000  00000000  00065163  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f3764  00000000  00000000  00075f08  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016966c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a08  00000000  00000000  001696e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008118 	.word	0x08008118

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08008118 	.word	0x08008118

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b4:	2003      	movs	r0, #3
 80005b6:	f000 f8d6 	bl	8000766 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ba:	2000      	movs	r0, #0
 80005bc:	f006 fb76 	bl	8006cac <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80005c0:	f006 fa58 	bl	8006a74 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80005c4:	2300      	movs	r3, #0
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	bd80      	pop	{r7, pc}
	...

080005cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005d0:	4b06      	ldr	r3, [pc, #24]	; (80005ec <HAL_IncTick+0x20>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	461a      	mov	r2, r3
 80005d6:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <HAL_IncTick+0x24>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4413      	add	r3, r2
 80005dc:	4a04      	ldr	r2, [pc, #16]	; (80005f0 <HAL_IncTick+0x24>)
 80005de:	6013      	str	r3, [r2, #0]
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	20000000 	.word	0x20000000
 80005f0:	20003dec 	.word	0x20003dec

080005f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  return uwTick;
 80005f8:	4b03      	ldr	r3, [pc, #12]	; (8000608 <HAL_GetTick+0x14>)
 80005fa:	681b      	ldr	r3, [r3, #0]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	20003dec 	.word	0x20003dec

0800060c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	f003 0307 	and.w	r3, r3, #7
 800061a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800061c:	4b0b      	ldr	r3, [pc, #44]	; (800064c <__NVIC_SetPriorityGrouping+0x40>)
 800061e:	68db      	ldr	r3, [r3, #12]
 8000620:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000622:	68ba      	ldr	r2, [r7, #8]
 8000624:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000628:	4013      	ands	r3, r2
 800062a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <__NVIC_SetPriorityGrouping+0x44>)
 8000636:	4313      	orrs	r3, r2
 8000638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800063a:	4a04      	ldr	r2, [pc, #16]	; (800064c <__NVIC_SetPriorityGrouping+0x40>)
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	60d3      	str	r3, [r2, #12]
}
 8000640:	bf00      	nop
 8000642:	3714      	adds	r7, #20
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr
 800064c:	e000ed00 	.word	0xe000ed00
 8000650:	05fa0000 	.word	0x05fa0000

08000654 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000658:	4b04      	ldr	r3, [pc, #16]	; (800066c <__NVIC_GetPriorityGrouping+0x18>)
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	0a1b      	lsrs	r3, r3, #8
 800065e:	f003 0307 	and.w	r3, r3, #7
}
 8000662:	4618      	mov	r0, r3
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	e000ed00 	.word	0xe000ed00

08000670 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800067a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067e:	2b00      	cmp	r3, #0
 8000680:	db0b      	blt.n	800069a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	f003 021f 	and.w	r2, r3, #31
 8000688:	4907      	ldr	r1, [pc, #28]	; (80006a8 <__NVIC_EnableIRQ+0x38>)
 800068a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068e:	095b      	lsrs	r3, r3, #5
 8000690:	2001      	movs	r0, #1
 8000692:	fa00 f202 	lsl.w	r2, r0, r2
 8000696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800069a:	bf00      	nop
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	e000e100 	.word	0xe000e100

080006ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	6039      	str	r1, [r7, #0]
 80006b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	db0a      	blt.n	80006d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	b2da      	uxtb	r2, r3
 80006c4:	490c      	ldr	r1, [pc, #48]	; (80006f8 <__NVIC_SetPriority+0x4c>)
 80006c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ca:	0112      	lsls	r2, r2, #4
 80006cc:	b2d2      	uxtb	r2, r2
 80006ce:	440b      	add	r3, r1
 80006d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006d4:	e00a      	b.n	80006ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	b2da      	uxtb	r2, r3
 80006da:	4908      	ldr	r1, [pc, #32]	; (80006fc <__NVIC_SetPriority+0x50>)
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	f003 030f 	and.w	r3, r3, #15
 80006e2:	3b04      	subs	r3, #4
 80006e4:	0112      	lsls	r2, r2, #4
 80006e6:	b2d2      	uxtb	r2, r2
 80006e8:	440b      	add	r3, r1
 80006ea:	761a      	strb	r2, [r3, #24]
}
 80006ec:	bf00      	nop
 80006ee:	370c      	adds	r7, #12
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	e000e100 	.word	0xe000e100
 80006fc:	e000ed00 	.word	0xe000ed00

08000700 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000700:	b480      	push	{r7}
 8000702:	b089      	sub	sp, #36	; 0x24
 8000704:	af00      	add	r7, sp, #0
 8000706:	60f8      	str	r0, [r7, #12]
 8000708:	60b9      	str	r1, [r7, #8]
 800070a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	f003 0307 	and.w	r3, r3, #7
 8000712:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000714:	69fb      	ldr	r3, [r7, #28]
 8000716:	f1c3 0307 	rsb	r3, r3, #7
 800071a:	2b04      	cmp	r3, #4
 800071c:	bf28      	it	cs
 800071e:	2304      	movcs	r3, #4
 8000720:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	3304      	adds	r3, #4
 8000726:	2b06      	cmp	r3, #6
 8000728:	d902      	bls.n	8000730 <NVIC_EncodePriority+0x30>
 800072a:	69fb      	ldr	r3, [r7, #28]
 800072c:	3b03      	subs	r3, #3
 800072e:	e000      	b.n	8000732 <NVIC_EncodePriority+0x32>
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000734:	f04f 32ff 	mov.w	r2, #4294967295
 8000738:	69bb      	ldr	r3, [r7, #24]
 800073a:	fa02 f303 	lsl.w	r3, r2, r3
 800073e:	43da      	mvns	r2, r3
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	401a      	ands	r2, r3
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000748:	f04f 31ff 	mov.w	r1, #4294967295
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	fa01 f303 	lsl.w	r3, r1, r3
 8000752:	43d9      	mvns	r1, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000758:	4313      	orrs	r3, r2
         );
}
 800075a:	4618      	mov	r0, r3
 800075c:	3724      	adds	r7, #36	; 0x24
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr

08000766 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	b082      	sub	sp, #8
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f7ff ff4c 	bl	800060c <__NVIC_SetPriorityGrouping>
}
 8000774:	bf00      	nop
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}

0800077c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	60b9      	str	r1, [r7, #8]
 8000786:	607a      	str	r2, [r7, #4]
 8000788:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800078e:	f7ff ff61 	bl	8000654 <__NVIC_GetPriorityGrouping>
 8000792:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000794:	687a      	ldr	r2, [r7, #4]
 8000796:	68b9      	ldr	r1, [r7, #8]
 8000798:	6978      	ldr	r0, [r7, #20]
 800079a:	f7ff ffb1 	bl	8000700 <NVIC_EncodePriority>
 800079e:	4602      	mov	r2, r0
 80007a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007a4:	4611      	mov	r1, r2
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff ff80 	bl	80006ac <__NVIC_SetPriority>
}
 80007ac:	bf00      	nop
 80007ae:	3718      	adds	r7, #24
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff ff54 	bl	8000670 <__NVIC_EnableIRQ>
}
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b089      	sub	sp, #36	; 0x24
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80007da:	2300      	movs	r3, #0
 80007dc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80007ea:	2300      	movs	r3, #0
 80007ec:	61fb      	str	r3, [r7, #28]
 80007ee:	e175      	b.n	8000adc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80007f0:	2201      	movs	r2, #1
 80007f2:	69fb      	ldr	r3, [r7, #28]
 80007f4:	fa02 f303 	lsl.w	r3, r2, r3
 80007f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	697a      	ldr	r2, [r7, #20]
 8000800:	4013      	ands	r3, r2
 8000802:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000804:	693a      	ldr	r2, [r7, #16]
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	429a      	cmp	r2, r3
 800080a:	f040 8164 	bne.w	8000ad6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	685b      	ldr	r3, [r3, #4]
 8000812:	2b02      	cmp	r3, #2
 8000814:	d003      	beq.n	800081e <HAL_GPIO_Init+0x4e>
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	685b      	ldr	r3, [r3, #4]
 800081a:	2b12      	cmp	r3, #18
 800081c:	d123      	bne.n	8000866 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800081e:	69fb      	ldr	r3, [r7, #28]
 8000820:	08da      	lsrs	r2, r3, #3
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	3208      	adds	r2, #8
 8000826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800082a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800082c:	69fb      	ldr	r3, [r7, #28]
 800082e:	f003 0307 	and.w	r3, r3, #7
 8000832:	009b      	lsls	r3, r3, #2
 8000834:	220f      	movs	r2, #15
 8000836:	fa02 f303 	lsl.w	r3, r2, r3
 800083a:	43db      	mvns	r3, r3
 800083c:	69ba      	ldr	r2, [r7, #24]
 800083e:	4013      	ands	r3, r2
 8000840:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	691a      	ldr	r2, [r3, #16]
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	f003 0307 	and.w	r3, r3, #7
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	fa02 f303 	lsl.w	r3, r2, r3
 8000852:	69ba      	ldr	r2, [r7, #24]
 8000854:	4313      	orrs	r3, r2
 8000856:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000858:	69fb      	ldr	r3, [r7, #28]
 800085a:	08da      	lsrs	r2, r3, #3
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	3208      	adds	r2, #8
 8000860:	69b9      	ldr	r1, [r7, #24]
 8000862:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800086c:	69fb      	ldr	r3, [r7, #28]
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	2203      	movs	r2, #3
 8000872:	fa02 f303 	lsl.w	r3, r2, r3
 8000876:	43db      	mvns	r3, r3
 8000878:	69ba      	ldr	r2, [r7, #24]
 800087a:	4013      	ands	r3, r2
 800087c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	685b      	ldr	r3, [r3, #4]
 8000882:	f003 0203 	and.w	r2, r3, #3
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	fa02 f303 	lsl.w	r3, r2, r3
 800088e:	69ba      	ldr	r2, [r7, #24]
 8000890:	4313      	orrs	r3, r2
 8000892:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	69ba      	ldr	r2, [r7, #24]
 8000898:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d00b      	beq.n	80008ba <HAL_GPIO_Init+0xea>
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	2b02      	cmp	r3, #2
 80008a8:	d007      	beq.n	80008ba <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008ae:	2b11      	cmp	r3, #17
 80008b0:	d003      	beq.n	80008ba <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	2b12      	cmp	r3, #18
 80008b8:	d130      	bne.n	800091c <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	689b      	ldr	r3, [r3, #8]
 80008be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80008c0:	69fb      	ldr	r3, [r7, #28]
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	2203      	movs	r2, #3
 80008c6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ca:	43db      	mvns	r3, r3
 80008cc:	69ba      	ldr	r2, [r7, #24]
 80008ce:	4013      	ands	r3, r2
 80008d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	68da      	ldr	r2, [r3, #12]
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	fa02 f303 	lsl.w	r3, r2, r3
 80008de:	69ba      	ldr	r2, [r7, #24]
 80008e0:	4313      	orrs	r3, r2
 80008e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	69ba      	ldr	r2, [r7, #24]
 80008e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008f0:	2201      	movs	r2, #1
 80008f2:	69fb      	ldr	r3, [r7, #28]
 80008f4:	fa02 f303 	lsl.w	r3, r2, r3
 80008f8:	43db      	mvns	r3, r3
 80008fa:	69ba      	ldr	r2, [r7, #24]
 80008fc:	4013      	ands	r3, r2
 80008fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	091b      	lsrs	r3, r3, #4
 8000906:	f003 0201 	and.w	r2, r3, #1
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	fa02 f303 	lsl.w	r3, r2, r3
 8000910:	69ba      	ldr	r2, [r7, #24]
 8000912:	4313      	orrs	r3, r2
 8000914:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	69ba      	ldr	r2, [r7, #24]
 800091a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000922:	69fb      	ldr	r3, [r7, #28]
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	2203      	movs	r2, #3
 8000928:	fa02 f303 	lsl.w	r3, r2, r3
 800092c:	43db      	mvns	r3, r3
 800092e:	69ba      	ldr	r2, [r7, #24]
 8000930:	4013      	ands	r3, r2
 8000932:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	689a      	ldr	r2, [r3, #8]
 8000938:	69fb      	ldr	r3, [r7, #28]
 800093a:	005b      	lsls	r3, r3, #1
 800093c:	fa02 f303 	lsl.w	r3, r2, r3
 8000940:	69ba      	ldr	r2, [r7, #24]
 8000942:	4313      	orrs	r3, r2
 8000944:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	69ba      	ldr	r2, [r7, #24]
 800094a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	685b      	ldr	r3, [r3, #4]
 8000950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000954:	2b00      	cmp	r3, #0
 8000956:	f000 80be 	beq.w	8000ad6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095a:	4b65      	ldr	r3, [pc, #404]	; (8000af0 <HAL_GPIO_Init+0x320>)
 800095c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095e:	4a64      	ldr	r2, [pc, #400]	; (8000af0 <HAL_GPIO_Init+0x320>)
 8000960:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000964:	6453      	str	r3, [r2, #68]	; 0x44
 8000966:	4b62      	ldr	r3, [pc, #392]	; (8000af0 <HAL_GPIO_Init+0x320>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000972:	4a60      	ldr	r2, [pc, #384]	; (8000af4 <HAL_GPIO_Init+0x324>)
 8000974:	69fb      	ldr	r3, [r7, #28]
 8000976:	089b      	lsrs	r3, r3, #2
 8000978:	3302      	adds	r3, #2
 800097a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800097e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000980:	69fb      	ldr	r3, [r7, #28]
 8000982:	f003 0303 	and.w	r3, r3, #3
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	220f      	movs	r2, #15
 800098a:	fa02 f303 	lsl.w	r3, r2, r3
 800098e:	43db      	mvns	r3, r3
 8000990:	69ba      	ldr	r2, [r7, #24]
 8000992:	4013      	ands	r3, r2
 8000994:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4a57      	ldr	r2, [pc, #348]	; (8000af8 <HAL_GPIO_Init+0x328>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d037      	beq.n	8000a0e <HAL_GPIO_Init+0x23e>
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4a56      	ldr	r2, [pc, #344]	; (8000afc <HAL_GPIO_Init+0x32c>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d031      	beq.n	8000a0a <HAL_GPIO_Init+0x23a>
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4a55      	ldr	r2, [pc, #340]	; (8000b00 <HAL_GPIO_Init+0x330>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d02b      	beq.n	8000a06 <HAL_GPIO_Init+0x236>
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4a54      	ldr	r2, [pc, #336]	; (8000b04 <HAL_GPIO_Init+0x334>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d025      	beq.n	8000a02 <HAL_GPIO_Init+0x232>
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4a53      	ldr	r2, [pc, #332]	; (8000b08 <HAL_GPIO_Init+0x338>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d01f      	beq.n	80009fe <HAL_GPIO_Init+0x22e>
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4a52      	ldr	r2, [pc, #328]	; (8000b0c <HAL_GPIO_Init+0x33c>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d019      	beq.n	80009fa <HAL_GPIO_Init+0x22a>
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4a51      	ldr	r2, [pc, #324]	; (8000b10 <HAL_GPIO_Init+0x340>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d013      	beq.n	80009f6 <HAL_GPIO_Init+0x226>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4a50      	ldr	r2, [pc, #320]	; (8000b14 <HAL_GPIO_Init+0x344>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d00d      	beq.n	80009f2 <HAL_GPIO_Init+0x222>
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a4f      	ldr	r2, [pc, #316]	; (8000b18 <HAL_GPIO_Init+0x348>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d007      	beq.n	80009ee <HAL_GPIO_Init+0x21e>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a4e      	ldr	r2, [pc, #312]	; (8000b1c <HAL_GPIO_Init+0x34c>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d101      	bne.n	80009ea <HAL_GPIO_Init+0x21a>
 80009e6:	2309      	movs	r3, #9
 80009e8:	e012      	b.n	8000a10 <HAL_GPIO_Init+0x240>
 80009ea:	230a      	movs	r3, #10
 80009ec:	e010      	b.n	8000a10 <HAL_GPIO_Init+0x240>
 80009ee:	2308      	movs	r3, #8
 80009f0:	e00e      	b.n	8000a10 <HAL_GPIO_Init+0x240>
 80009f2:	2307      	movs	r3, #7
 80009f4:	e00c      	b.n	8000a10 <HAL_GPIO_Init+0x240>
 80009f6:	2306      	movs	r3, #6
 80009f8:	e00a      	b.n	8000a10 <HAL_GPIO_Init+0x240>
 80009fa:	2305      	movs	r3, #5
 80009fc:	e008      	b.n	8000a10 <HAL_GPIO_Init+0x240>
 80009fe:	2304      	movs	r3, #4
 8000a00:	e006      	b.n	8000a10 <HAL_GPIO_Init+0x240>
 8000a02:	2303      	movs	r3, #3
 8000a04:	e004      	b.n	8000a10 <HAL_GPIO_Init+0x240>
 8000a06:	2302      	movs	r3, #2
 8000a08:	e002      	b.n	8000a10 <HAL_GPIO_Init+0x240>
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	e000      	b.n	8000a10 <HAL_GPIO_Init+0x240>
 8000a0e:	2300      	movs	r3, #0
 8000a10:	69fa      	ldr	r2, [r7, #28]
 8000a12:	f002 0203 	and.w	r2, r2, #3
 8000a16:	0092      	lsls	r2, r2, #2
 8000a18:	4093      	lsls	r3, r2
 8000a1a:	69ba      	ldr	r2, [r7, #24]
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000a20:	4934      	ldr	r1, [pc, #208]	; (8000af4 <HAL_GPIO_Init+0x324>)
 8000a22:	69fb      	ldr	r3, [r7, #28]
 8000a24:	089b      	lsrs	r3, r3, #2
 8000a26:	3302      	adds	r3, #2
 8000a28:	69ba      	ldr	r2, [r7, #24]
 8000a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a2e:	4b3c      	ldr	r3, [pc, #240]	; (8000b20 <HAL_GPIO_Init+0x350>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	43db      	mvns	r3, r3
 8000a38:	69ba      	ldr	r2, [r7, #24]
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d003      	beq.n	8000a52 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000a4a:	69ba      	ldr	r2, [r7, #24]
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a52:	4a33      	ldr	r2, [pc, #204]	; (8000b20 <HAL_GPIO_Init+0x350>)
 8000a54:	69bb      	ldr	r3, [r7, #24]
 8000a56:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a58:	4b31      	ldr	r3, [pc, #196]	; (8000b20 <HAL_GPIO_Init+0x350>)
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a5e:	693b      	ldr	r3, [r7, #16]
 8000a60:	43db      	mvns	r3, r3
 8000a62:	69ba      	ldr	r2, [r7, #24]
 8000a64:	4013      	ands	r3, r2
 8000a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d003      	beq.n	8000a7c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000a74:	69ba      	ldr	r2, [r7, #24]
 8000a76:	693b      	ldr	r3, [r7, #16]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a7c:	4a28      	ldr	r2, [pc, #160]	; (8000b20 <HAL_GPIO_Init+0x350>)
 8000a7e:	69bb      	ldr	r3, [r7, #24]
 8000a80:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a82:	4b27      	ldr	r3, [pc, #156]	; (8000b20 <HAL_GPIO_Init+0x350>)
 8000a84:	689b      	ldr	r3, [r3, #8]
 8000a86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a88:	693b      	ldr	r3, [r7, #16]
 8000a8a:	43db      	mvns	r3, r3
 8000a8c:	69ba      	ldr	r2, [r7, #24]
 8000a8e:	4013      	ands	r3, r2
 8000a90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d003      	beq.n	8000aa6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000a9e:	69ba      	ldr	r2, [r7, #24]
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000aa6:	4a1e      	ldr	r2, [pc, #120]	; (8000b20 <HAL_GPIO_Init+0x350>)
 8000aa8:	69bb      	ldr	r3, [r7, #24]
 8000aaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000aac:	4b1c      	ldr	r3, [pc, #112]	; (8000b20 <HAL_GPIO_Init+0x350>)
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	43db      	mvns	r3, r3
 8000ab6:	69ba      	ldr	r2, [r7, #24]
 8000ab8:	4013      	ands	r3, r2
 8000aba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d003      	beq.n	8000ad0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000ac8:	69ba      	ldr	r2, [r7, #24]
 8000aca:	693b      	ldr	r3, [r7, #16]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ad0:	4a13      	ldr	r2, [pc, #76]	; (8000b20 <HAL_GPIO_Init+0x350>)
 8000ad2:	69bb      	ldr	r3, [r7, #24]
 8000ad4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	61fb      	str	r3, [r7, #28]
 8000adc:	69fb      	ldr	r3, [r7, #28]
 8000ade:	2b0f      	cmp	r3, #15
 8000ae0:	f67f ae86 	bls.w	80007f0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000ae4:	bf00      	nop
 8000ae6:	3724      	adds	r7, #36	; 0x24
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40013800 	.word	0x40013800
 8000af8:	40020000 	.word	0x40020000
 8000afc:	40020400 	.word	0x40020400
 8000b00:	40020800 	.word	0x40020800
 8000b04:	40020c00 	.word	0x40020c00
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	40021400 	.word	0x40021400
 8000b10:	40021800 	.word	0x40021800
 8000b14:	40021c00 	.word	0x40021c00
 8000b18:	40022000 	.word	0x40022000
 8000b1c:	40022400 	.word	0x40022400
 8000b20:	40013c00 	.word	0x40013c00

08000b24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	691a      	ldr	r2, [r3, #16]
 8000b34:	887b      	ldrh	r3, [r7, #2]
 8000b36:	4013      	ands	r3, r2
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d002      	beq.n	8000b42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	73fb      	strb	r3, [r7, #15]
 8000b40:	e001      	b.n	8000b46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000b42:	2300      	movs	r3, #0
 8000b44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3714      	adds	r7, #20
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000b5e:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b60:	695a      	ldr	r2, [r3, #20]
 8000b62:	88fb      	ldrh	r3, [r7, #6]
 8000b64:	4013      	ands	r3, r2
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d006      	beq.n	8000b78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000b6a:	4a05      	ldr	r2, [pc, #20]	; (8000b80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b6c:	88fb      	ldrh	r3, [r7, #6]
 8000b6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000b70:	88fb      	ldrh	r3, [r7, #6]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f005 fe00 	bl	8006778 <HAL_GPIO_EXTI_Callback>
  }
}
 8000b78:	bf00      	nop
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40013c00 	.word	0x40013c00

08000b84 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8e:	4b23      	ldr	r3, [pc, #140]	; (8000c1c <HAL_PWREx_EnableOverDrive+0x98>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b92:	4a22      	ldr	r2, [pc, #136]	; (8000c1c <HAL_PWREx_EnableOverDrive+0x98>)
 8000b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b98:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9a:	4b20      	ldr	r3, [pc, #128]	; (8000c1c <HAL_PWREx_EnableOverDrive+0x98>)
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba2:	603b      	str	r3, [r7, #0]
 8000ba4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000ba6:	4b1e      	ldr	r3, [pc, #120]	; (8000c20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4a1d      	ldr	r2, [pc, #116]	; (8000c20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bb0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bb2:	f7ff fd1f 	bl	80005f4 <HAL_GetTick>
 8000bb6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000bb8:	e009      	b.n	8000bce <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000bba:	f7ff fd1b 	bl	80005f4 <HAL_GetTick>
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	1ad3      	subs	r3, r2, r3
 8000bc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000bc8:	d901      	bls.n	8000bce <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	e022      	b.n	8000c14 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000bce:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bda:	d1ee      	bne.n	8000bba <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000bdc:	4b10      	ldr	r3, [pc, #64]	; (8000c20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a0f      	ldr	r2, [pc, #60]	; (8000c20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000be2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000be8:	f7ff fd04 	bl	80005f4 <HAL_GetTick>
 8000bec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000bee:	e009      	b.n	8000c04 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000bf0:	f7ff fd00 	bl	80005f4 <HAL_GetTick>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000bfe:	d901      	bls.n	8000c04 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8000c00:	2303      	movs	r3, #3
 8000c02:	e007      	b.n	8000c14 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000c10:	d1ee      	bne.n	8000bf0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8000c12:	2300      	movs	r3, #0
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40007000 	.word	0x40007000

08000c24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d101      	bne.n	8000c3a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	e25c      	b.n	80010f4 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	f000 8087 	beq.w	8000d56 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c48:	4b96      	ldr	r3, [pc, #600]	; (8000ea4 <HAL_RCC_OscConfig+0x280>)
 8000c4a:	689b      	ldr	r3, [r3, #8]
 8000c4c:	f003 030c 	and.w	r3, r3, #12
 8000c50:	2b04      	cmp	r3, #4
 8000c52:	d00c      	beq.n	8000c6e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c54:	4b93      	ldr	r3, [pc, #588]	; (8000ea4 <HAL_RCC_OscConfig+0x280>)
 8000c56:	689b      	ldr	r3, [r3, #8]
 8000c58:	f003 030c 	and.w	r3, r3, #12
 8000c5c:	2b08      	cmp	r3, #8
 8000c5e:	d112      	bne.n	8000c86 <HAL_RCC_OscConfig+0x62>
 8000c60:	4b90      	ldr	r3, [pc, #576]	; (8000ea4 <HAL_RCC_OscConfig+0x280>)
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000c6c:	d10b      	bne.n	8000c86 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c6e:	4b8d      	ldr	r3, [pc, #564]	; (8000ea4 <HAL_RCC_OscConfig+0x280>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d06c      	beq.n	8000d54 <HAL_RCC_OscConfig+0x130>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d168      	bne.n	8000d54 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
 8000c84:	e236      	b.n	80010f4 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c8e:	d106      	bne.n	8000c9e <HAL_RCC_OscConfig+0x7a>
 8000c90:	4b84      	ldr	r3, [pc, #528]	; (8000ea4 <HAL_RCC_OscConfig+0x280>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a83      	ldr	r2, [pc, #524]	; (8000ea4 <HAL_RCC_OscConfig+0x280>)
 8000c96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c9a:	6013      	str	r3, [r2, #0]
 8000c9c:	e02e      	b.n	8000cfc <HAL_RCC_OscConfig+0xd8>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d10c      	bne.n	8000cc0 <HAL_RCC_OscConfig+0x9c>
 8000ca6:	4b7f      	ldr	r3, [pc, #508]	; (8000ea4 <HAL_RCC_OscConfig+0x280>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a7e      	ldr	r2, [pc, #504]	; (8000ea4 <HAL_RCC_OscConfig+0x280>)
 8000cac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cb0:	6013      	str	r3, [r2, #0]
 8000cb2:	4b7c      	ldr	r3, [pc, #496]	; (8000ea4 <HAL_RCC_OscConfig+0x280>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a7b      	ldr	r2, [pc, #492]	; (8000ea4 <HAL_RCC_OscConfig+0x280>)
 8000cb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cbc:	6013      	str	r3, [r2, #0]
 8000cbe:	e01d      	b.n	8000cfc <HAL_RCC_OscConfig+0xd8>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cc8:	d10c      	bne.n	8000ce4 <HAL_RCC_OscConfig+0xc0>
 8000cca:	4b76      	ldr	r3, [pc, #472]	; (8000ea4 <HAL_RCC_OscConfig+0x280>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a75      	ldr	r2, [pc, #468]	; (8000ea4 <HAL_RCC_OscConfig+0x280>)
 8000cd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cd4:	6013      	str	r3, [r2, #0]
 8000cd6:	4b73      	ldr	r3, [pc, #460]	; (8000ea4 <HAL_RCC_OscConfig+0x280>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a72      	ldr	r2, [pc, #456]	; (8000ea4 <HAL_RCC_OscConfig+0x280>)
 8000cdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ce0:	6013      	str	r3, [r2, #0]
 8000ce2:	e00b      	b.n	8000cfc <HAL_RCC_OscConfig+0xd8>
 8000ce4:	4b6f      	ldr	r3, [pc, #444]	; (8000ea4 <HAL_RCC_OscConfig+0x280>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a6e      	ldr	r2, [pc, #440]	; (8000ea4 <HAL_RCC_OscConfig+0x280>)
 8000cea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cee:	6013      	str	r3, [r2, #0]
 8000cf0:	4b6c      	ldr	r3, [pc, #432]	; (8000ea4 <HAL_RCC_OscConfig+0x280>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a6b      	ldr	r2, [pc, #428]	; (8000ea4 <HAL_RCC_OscConfig+0x280>)
 8000cf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d013      	beq.n	8000d2c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d04:	f7ff fc76 	bl	80005f4 <HAL_GetTick>
 8000d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d0a:	e008      	b.n	8000d1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d0c:	f7ff fc72 	bl	80005f4 <HAL_GetTick>
 8000d10:	4602      	mov	r2, r0
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	2b64      	cmp	r3, #100	; 0x64
 8000d18:	d901      	bls.n	8000d1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	e1ea      	b.n	80010f4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d1e:	4b61      	ldr	r3, [pc, #388]	; (8000ea4 <HAL_RCC_OscConfig+0x280>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d0f0      	beq.n	8000d0c <HAL_RCC_OscConfig+0xe8>
 8000d2a:	e014      	b.n	8000d56 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d2c:	f7ff fc62 	bl	80005f4 <HAL_GetTick>
 8000d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d32:	e008      	b.n	8000d46 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d34:	f7ff fc5e 	bl	80005f4 <HAL_GetTick>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	2b64      	cmp	r3, #100	; 0x64
 8000d40:	d901      	bls.n	8000d46 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000d42:	2303      	movs	r3, #3
 8000d44:	e1d6      	b.n	80010f4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d46:	4b57      	ldr	r3, [pc, #348]	; (8000ea4 <HAL_RCC_OscConfig+0x280>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d1f0      	bne.n	8000d34 <HAL_RCC_OscConfig+0x110>
 8000d52:	e000      	b.n	8000d56 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f003 0302 	and.w	r3, r3, #2
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d069      	beq.n	8000e36 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d62:	4b50      	ldr	r3, [pc, #320]	; (8000ea4 <HAL_RCC_OscConfig+0x280>)
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	f003 030c 	and.w	r3, r3, #12
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d00b      	beq.n	8000d86 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d6e:	4b4d      	ldr	r3, [pc, #308]	; (8000ea4 <HAL_RCC_OscConfig+0x280>)
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	f003 030c 	and.w	r3, r3, #12
 8000d76:	2b08      	cmp	r3, #8
 8000d78:	d11c      	bne.n	8000db4 <HAL_RCC_OscConfig+0x190>
 8000d7a:	4b4a      	ldr	r3, [pc, #296]	; (8000ea4 <HAL_RCC_OscConfig+0x280>)
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d116      	bne.n	8000db4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d86:	4b47      	ldr	r3, [pc, #284]	; (8000ea4 <HAL_RCC_OscConfig+0x280>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d005      	beq.n	8000d9e <HAL_RCC_OscConfig+0x17a>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	68db      	ldr	r3, [r3, #12]
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d001      	beq.n	8000d9e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e1aa      	b.n	80010f4 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d9e:	4b41      	ldr	r3, [pc, #260]	; (8000ea4 <HAL_RCC_OscConfig+0x280>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	691b      	ldr	r3, [r3, #16]
 8000daa:	00db      	lsls	r3, r3, #3
 8000dac:	493d      	ldr	r1, [pc, #244]	; (8000ea4 <HAL_RCC_OscConfig+0x280>)
 8000dae:	4313      	orrs	r3, r2
 8000db0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000db2:	e040      	b.n	8000e36 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d023      	beq.n	8000e04 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000dbc:	4b39      	ldr	r3, [pc, #228]	; (8000ea4 <HAL_RCC_OscConfig+0x280>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a38      	ldr	r2, [pc, #224]	; (8000ea4 <HAL_RCC_OscConfig+0x280>)
 8000dc2:	f043 0301 	orr.w	r3, r3, #1
 8000dc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dc8:	f7ff fc14 	bl	80005f4 <HAL_GetTick>
 8000dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dce:	e008      	b.n	8000de2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dd0:	f7ff fc10 	bl	80005f4 <HAL_GetTick>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	2b02      	cmp	r3, #2
 8000ddc:	d901      	bls.n	8000de2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8000dde:	2303      	movs	r3, #3
 8000de0:	e188      	b.n	80010f4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000de2:	4b30      	ldr	r3, [pc, #192]	; (8000ea4 <HAL_RCC_OscConfig+0x280>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d0f0      	beq.n	8000dd0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dee:	4b2d      	ldr	r3, [pc, #180]	; (8000ea4 <HAL_RCC_OscConfig+0x280>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	691b      	ldr	r3, [r3, #16]
 8000dfa:	00db      	lsls	r3, r3, #3
 8000dfc:	4929      	ldr	r1, [pc, #164]	; (8000ea4 <HAL_RCC_OscConfig+0x280>)
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	600b      	str	r3, [r1, #0]
 8000e02:	e018      	b.n	8000e36 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e04:	4b27      	ldr	r3, [pc, #156]	; (8000ea4 <HAL_RCC_OscConfig+0x280>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a26      	ldr	r2, [pc, #152]	; (8000ea4 <HAL_RCC_OscConfig+0x280>)
 8000e0a:	f023 0301 	bic.w	r3, r3, #1
 8000e0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e10:	f7ff fbf0 	bl	80005f4 <HAL_GetTick>
 8000e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e16:	e008      	b.n	8000e2a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e18:	f7ff fbec 	bl	80005f4 <HAL_GetTick>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	d901      	bls.n	8000e2a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8000e26:	2303      	movs	r3, #3
 8000e28:	e164      	b.n	80010f4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e2a:	4b1e      	ldr	r3, [pc, #120]	; (8000ea4 <HAL_RCC_OscConfig+0x280>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f003 0302 	and.w	r3, r3, #2
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d1f0      	bne.n	8000e18 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f003 0308 	and.w	r3, r3, #8
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d038      	beq.n	8000eb4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	695b      	ldr	r3, [r3, #20]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d019      	beq.n	8000e7e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e4a:	4b16      	ldr	r3, [pc, #88]	; (8000ea4 <HAL_RCC_OscConfig+0x280>)
 8000e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e4e:	4a15      	ldr	r2, [pc, #84]	; (8000ea4 <HAL_RCC_OscConfig+0x280>)
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e56:	f7ff fbcd 	bl	80005f4 <HAL_GetTick>
 8000e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e5c:	e008      	b.n	8000e70 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e5e:	f7ff fbc9 	bl	80005f4 <HAL_GetTick>
 8000e62:	4602      	mov	r2, r0
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	1ad3      	subs	r3, r2, r3
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d901      	bls.n	8000e70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	e141      	b.n	80010f4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e70:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <HAL_RCC_OscConfig+0x280>)
 8000e72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e74:	f003 0302 	and.w	r3, r3, #2
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d0f0      	beq.n	8000e5e <HAL_RCC_OscConfig+0x23a>
 8000e7c:	e01a      	b.n	8000eb4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e7e:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <HAL_RCC_OscConfig+0x280>)
 8000e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e82:	4a08      	ldr	r2, [pc, #32]	; (8000ea4 <HAL_RCC_OscConfig+0x280>)
 8000e84:	f023 0301 	bic.w	r3, r3, #1
 8000e88:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e8a:	f7ff fbb3 	bl	80005f4 <HAL_GetTick>
 8000e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e90:	e00a      	b.n	8000ea8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e92:	f7ff fbaf 	bl	80005f4 <HAL_GetTick>
 8000e96:	4602      	mov	r2, r0
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	1ad3      	subs	r3, r2, r3
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d903      	bls.n	8000ea8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	e127      	b.n	80010f4 <HAL_RCC_OscConfig+0x4d0>
 8000ea4:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ea8:	4b94      	ldr	r3, [pc, #592]	; (80010fc <HAL_RCC_OscConfig+0x4d8>)
 8000eaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000eac:	f003 0302 	and.w	r3, r3, #2
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d1ee      	bne.n	8000e92 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f003 0304 	and.w	r3, r3, #4
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	f000 80a4 	beq.w	800100a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ec2:	4b8e      	ldr	r3, [pc, #568]	; (80010fc <HAL_RCC_OscConfig+0x4d8>)
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d10d      	bne.n	8000eea <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ece:	4b8b      	ldr	r3, [pc, #556]	; (80010fc <HAL_RCC_OscConfig+0x4d8>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed2:	4a8a      	ldr	r2, [pc, #552]	; (80010fc <HAL_RCC_OscConfig+0x4d8>)
 8000ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eda:	4b88      	ldr	r3, [pc, #544]	; (80010fc <HAL_RCC_OscConfig+0x4d8>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000eea:	4b85      	ldr	r3, [pc, #532]	; (8001100 <HAL_RCC_OscConfig+0x4dc>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d118      	bne.n	8000f28 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8000ef6:	4b82      	ldr	r3, [pc, #520]	; (8001100 <HAL_RCC_OscConfig+0x4dc>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a81      	ldr	r2, [pc, #516]	; (8001100 <HAL_RCC_OscConfig+0x4dc>)
 8000efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f02:	f7ff fb77 	bl	80005f4 <HAL_GetTick>
 8000f06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f08:	e008      	b.n	8000f1c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000f0a:	f7ff fb73 	bl	80005f4 <HAL_GetTick>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	2b64      	cmp	r3, #100	; 0x64
 8000f16:	d901      	bls.n	8000f1c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	e0eb      	b.n	80010f4 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f1c:	4b78      	ldr	r3, [pc, #480]	; (8001100 <HAL_RCC_OscConfig+0x4dc>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d0f0      	beq.n	8000f0a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d106      	bne.n	8000f3e <HAL_RCC_OscConfig+0x31a>
 8000f30:	4b72      	ldr	r3, [pc, #456]	; (80010fc <HAL_RCC_OscConfig+0x4d8>)
 8000f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f34:	4a71      	ldr	r2, [pc, #452]	; (80010fc <HAL_RCC_OscConfig+0x4d8>)
 8000f36:	f043 0301 	orr.w	r3, r3, #1
 8000f3a:	6713      	str	r3, [r2, #112]	; 0x70
 8000f3c:	e02d      	b.n	8000f9a <HAL_RCC_OscConfig+0x376>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d10c      	bne.n	8000f60 <HAL_RCC_OscConfig+0x33c>
 8000f46:	4b6d      	ldr	r3, [pc, #436]	; (80010fc <HAL_RCC_OscConfig+0x4d8>)
 8000f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f4a:	4a6c      	ldr	r2, [pc, #432]	; (80010fc <HAL_RCC_OscConfig+0x4d8>)
 8000f4c:	f023 0301 	bic.w	r3, r3, #1
 8000f50:	6713      	str	r3, [r2, #112]	; 0x70
 8000f52:	4b6a      	ldr	r3, [pc, #424]	; (80010fc <HAL_RCC_OscConfig+0x4d8>)
 8000f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f56:	4a69      	ldr	r2, [pc, #420]	; (80010fc <HAL_RCC_OscConfig+0x4d8>)
 8000f58:	f023 0304 	bic.w	r3, r3, #4
 8000f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8000f5e:	e01c      	b.n	8000f9a <HAL_RCC_OscConfig+0x376>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	2b05      	cmp	r3, #5
 8000f66:	d10c      	bne.n	8000f82 <HAL_RCC_OscConfig+0x35e>
 8000f68:	4b64      	ldr	r3, [pc, #400]	; (80010fc <HAL_RCC_OscConfig+0x4d8>)
 8000f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f6c:	4a63      	ldr	r2, [pc, #396]	; (80010fc <HAL_RCC_OscConfig+0x4d8>)
 8000f6e:	f043 0304 	orr.w	r3, r3, #4
 8000f72:	6713      	str	r3, [r2, #112]	; 0x70
 8000f74:	4b61      	ldr	r3, [pc, #388]	; (80010fc <HAL_RCC_OscConfig+0x4d8>)
 8000f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f78:	4a60      	ldr	r2, [pc, #384]	; (80010fc <HAL_RCC_OscConfig+0x4d8>)
 8000f7a:	f043 0301 	orr.w	r3, r3, #1
 8000f7e:	6713      	str	r3, [r2, #112]	; 0x70
 8000f80:	e00b      	b.n	8000f9a <HAL_RCC_OscConfig+0x376>
 8000f82:	4b5e      	ldr	r3, [pc, #376]	; (80010fc <HAL_RCC_OscConfig+0x4d8>)
 8000f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f86:	4a5d      	ldr	r2, [pc, #372]	; (80010fc <HAL_RCC_OscConfig+0x4d8>)
 8000f88:	f023 0301 	bic.w	r3, r3, #1
 8000f8c:	6713      	str	r3, [r2, #112]	; 0x70
 8000f8e:	4b5b      	ldr	r3, [pc, #364]	; (80010fc <HAL_RCC_OscConfig+0x4d8>)
 8000f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f92:	4a5a      	ldr	r2, [pc, #360]	; (80010fc <HAL_RCC_OscConfig+0x4d8>)
 8000f94:	f023 0304 	bic.w	r3, r3, #4
 8000f98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d015      	beq.n	8000fce <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fa2:	f7ff fb27 	bl	80005f4 <HAL_GetTick>
 8000fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fa8:	e00a      	b.n	8000fc0 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000faa:	f7ff fb23 	bl	80005f4 <HAL_GetTick>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d901      	bls.n	8000fc0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	e099      	b.n	80010f4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fc0:	4b4e      	ldr	r3, [pc, #312]	; (80010fc <HAL_RCC_OscConfig+0x4d8>)
 8000fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fc4:	f003 0302 	and.w	r3, r3, #2
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d0ee      	beq.n	8000faa <HAL_RCC_OscConfig+0x386>
 8000fcc:	e014      	b.n	8000ff8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fce:	f7ff fb11 	bl	80005f4 <HAL_GetTick>
 8000fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fd4:	e00a      	b.n	8000fec <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fd6:	f7ff fb0d 	bl	80005f4 <HAL_GetTick>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d901      	bls.n	8000fec <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	e083      	b.n	80010f4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fec:	4b43      	ldr	r3, [pc, #268]	; (80010fc <HAL_RCC_OscConfig+0x4d8>)
 8000fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ff0:	f003 0302 	and.w	r3, r3, #2
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d1ee      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000ff8:	7dfb      	ldrb	r3, [r7, #23]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d105      	bne.n	800100a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ffe:	4b3f      	ldr	r3, [pc, #252]	; (80010fc <HAL_RCC_OscConfig+0x4d8>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	4a3e      	ldr	r2, [pc, #248]	; (80010fc <HAL_RCC_OscConfig+0x4d8>)
 8001004:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001008:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	699b      	ldr	r3, [r3, #24]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d06f      	beq.n	80010f2 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001012:	4b3a      	ldr	r3, [pc, #232]	; (80010fc <HAL_RCC_OscConfig+0x4d8>)
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	f003 030c 	and.w	r3, r3, #12
 800101a:	2b08      	cmp	r3, #8
 800101c:	d067      	beq.n	80010ee <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	699b      	ldr	r3, [r3, #24]
 8001022:	2b02      	cmp	r3, #2
 8001024:	d149      	bne.n	80010ba <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001026:	4b35      	ldr	r3, [pc, #212]	; (80010fc <HAL_RCC_OscConfig+0x4d8>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a34      	ldr	r2, [pc, #208]	; (80010fc <HAL_RCC_OscConfig+0x4d8>)
 800102c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001030:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001032:	f7ff fadf 	bl	80005f4 <HAL_GetTick>
 8001036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001038:	e008      	b.n	800104c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800103a:	f7ff fadb 	bl	80005f4 <HAL_GetTick>
 800103e:	4602      	mov	r2, r0
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	2b02      	cmp	r3, #2
 8001046:	d901      	bls.n	800104c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001048:	2303      	movs	r3, #3
 800104a:	e053      	b.n	80010f4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800104c:	4b2b      	ldr	r3, [pc, #172]	; (80010fc <HAL_RCC_OscConfig+0x4d8>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d1f0      	bne.n	800103a <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	69da      	ldr	r2, [r3, #28]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6a1b      	ldr	r3, [r3, #32]
 8001060:	431a      	orrs	r2, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001066:	019b      	lsls	r3, r3, #6
 8001068:	431a      	orrs	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800106e:	085b      	lsrs	r3, r3, #1
 8001070:	3b01      	subs	r3, #1
 8001072:	041b      	lsls	r3, r3, #16
 8001074:	431a      	orrs	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800107a:	061b      	lsls	r3, r3, #24
 800107c:	4313      	orrs	r3, r2
 800107e:	4a1f      	ldr	r2, [pc, #124]	; (80010fc <HAL_RCC_OscConfig+0x4d8>)
 8001080:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001084:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001086:	4b1d      	ldr	r3, [pc, #116]	; (80010fc <HAL_RCC_OscConfig+0x4d8>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a1c      	ldr	r2, [pc, #112]	; (80010fc <HAL_RCC_OscConfig+0x4d8>)
 800108c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001090:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001092:	f7ff faaf 	bl	80005f4 <HAL_GetTick>
 8001096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001098:	e008      	b.n	80010ac <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800109a:	f7ff faab 	bl	80005f4 <HAL_GetTick>
 800109e:	4602      	mov	r2, r0
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d901      	bls.n	80010ac <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 80010a8:	2303      	movs	r3, #3
 80010aa:	e023      	b.n	80010f4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010ac:	4b13      	ldr	r3, [pc, #76]	; (80010fc <HAL_RCC_OscConfig+0x4d8>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d0f0      	beq.n	800109a <HAL_RCC_OscConfig+0x476>
 80010b8:	e01b      	b.n	80010f2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010ba:	4b10      	ldr	r3, [pc, #64]	; (80010fc <HAL_RCC_OscConfig+0x4d8>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a0f      	ldr	r2, [pc, #60]	; (80010fc <HAL_RCC_OscConfig+0x4d8>)
 80010c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80010c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010c6:	f7ff fa95 	bl	80005f4 <HAL_GetTick>
 80010ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010cc:	e008      	b.n	80010e0 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010ce:	f7ff fa91 	bl	80005f4 <HAL_GetTick>
 80010d2:	4602      	mov	r2, r0
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d901      	bls.n	80010e0 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 80010dc:	2303      	movs	r3, #3
 80010de:	e009      	b.n	80010f4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_RCC_OscConfig+0x4d8>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d1f0      	bne.n	80010ce <HAL_RCC_OscConfig+0x4aa>
 80010ec:	e001      	b.n	80010f2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e000      	b.n	80010f4 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 80010f2:	2300      	movs	r3, #0
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3718      	adds	r7, #24
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40023800 	.word	0x40023800
 8001100:	40007000 	.word	0x40007000

08001104 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d101      	bne.n	800111c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e0ce      	b.n	80012ba <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800111c:	4b69      	ldr	r3, [pc, #420]	; (80012c4 <HAL_RCC_ClockConfig+0x1c0>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 030f 	and.w	r3, r3, #15
 8001124:	683a      	ldr	r2, [r7, #0]
 8001126:	429a      	cmp	r2, r3
 8001128:	d910      	bls.n	800114c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800112a:	4b66      	ldr	r3, [pc, #408]	; (80012c4 <HAL_RCC_ClockConfig+0x1c0>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f023 020f 	bic.w	r2, r3, #15
 8001132:	4964      	ldr	r1, [pc, #400]	; (80012c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	4313      	orrs	r3, r2
 8001138:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800113a:	4b62      	ldr	r3, [pc, #392]	; (80012c4 <HAL_RCC_ClockConfig+0x1c0>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 030f 	and.w	r3, r3, #15
 8001142:	683a      	ldr	r2, [r7, #0]
 8001144:	429a      	cmp	r2, r3
 8001146:	d001      	beq.n	800114c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e0b6      	b.n	80012ba <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0302 	and.w	r3, r3, #2
 8001154:	2b00      	cmp	r3, #0
 8001156:	d020      	beq.n	800119a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0304 	and.w	r3, r3, #4
 8001160:	2b00      	cmp	r3, #0
 8001162:	d005      	beq.n	8001170 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001164:	4b58      	ldr	r3, [pc, #352]	; (80012c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	4a57      	ldr	r2, [pc, #348]	; (80012c8 <HAL_RCC_ClockConfig+0x1c4>)
 800116a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800116e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 0308 	and.w	r3, r3, #8
 8001178:	2b00      	cmp	r3, #0
 800117a:	d005      	beq.n	8001188 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800117c:	4b52      	ldr	r3, [pc, #328]	; (80012c8 <HAL_RCC_ClockConfig+0x1c4>)
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	4a51      	ldr	r2, [pc, #324]	; (80012c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001182:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001186:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001188:	4b4f      	ldr	r3, [pc, #316]	; (80012c8 <HAL_RCC_ClockConfig+0x1c4>)
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	494c      	ldr	r1, [pc, #304]	; (80012c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001196:	4313      	orrs	r3, r2
 8001198:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d040      	beq.n	8001228 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d107      	bne.n	80011be <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ae:	4b46      	ldr	r3, [pc, #280]	; (80012c8 <HAL_RCC_ClockConfig+0x1c4>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d115      	bne.n	80011e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e07d      	b.n	80012ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d107      	bne.n	80011d6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011c6:	4b40      	ldr	r3, [pc, #256]	; (80012c8 <HAL_RCC_ClockConfig+0x1c4>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d109      	bne.n	80011e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e071      	b.n	80012ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011d6:	4b3c      	ldr	r3, [pc, #240]	; (80012c8 <HAL_RCC_ClockConfig+0x1c4>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d101      	bne.n	80011e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e069      	b.n	80012ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011e6:	4b38      	ldr	r3, [pc, #224]	; (80012c8 <HAL_RCC_ClockConfig+0x1c4>)
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	f023 0203 	bic.w	r2, r3, #3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	4935      	ldr	r1, [pc, #212]	; (80012c8 <HAL_RCC_ClockConfig+0x1c4>)
 80011f4:	4313      	orrs	r3, r2
 80011f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80011f8:	f7ff f9fc 	bl	80005f4 <HAL_GetTick>
 80011fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011fe:	e00a      	b.n	8001216 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001200:	f7ff f9f8 	bl	80005f4 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	f241 3288 	movw	r2, #5000	; 0x1388
 800120e:	4293      	cmp	r3, r2
 8001210:	d901      	bls.n	8001216 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e051      	b.n	80012ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001216:	4b2c      	ldr	r3, [pc, #176]	; (80012c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f003 020c 	and.w	r2, r3, #12
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	429a      	cmp	r2, r3
 8001226:	d1eb      	bne.n	8001200 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001228:	4b26      	ldr	r3, [pc, #152]	; (80012c4 <HAL_RCC_ClockConfig+0x1c0>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 030f 	and.w	r3, r3, #15
 8001230:	683a      	ldr	r2, [r7, #0]
 8001232:	429a      	cmp	r2, r3
 8001234:	d210      	bcs.n	8001258 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001236:	4b23      	ldr	r3, [pc, #140]	; (80012c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f023 020f 	bic.w	r2, r3, #15
 800123e:	4921      	ldr	r1, [pc, #132]	; (80012c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	4313      	orrs	r3, r2
 8001244:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001246:	4b1f      	ldr	r3, [pc, #124]	; (80012c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 030f 	and.w	r3, r3, #15
 800124e:	683a      	ldr	r2, [r7, #0]
 8001250:	429a      	cmp	r2, r3
 8001252:	d001      	beq.n	8001258 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e030      	b.n	80012ba <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 0304 	and.w	r3, r3, #4
 8001260:	2b00      	cmp	r3, #0
 8001262:	d008      	beq.n	8001276 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001264:	4b18      	ldr	r3, [pc, #96]	; (80012c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	4915      	ldr	r1, [pc, #84]	; (80012c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001272:	4313      	orrs	r3, r2
 8001274:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0308 	and.w	r3, r3, #8
 800127e:	2b00      	cmp	r3, #0
 8001280:	d009      	beq.n	8001296 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001282:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	691b      	ldr	r3, [r3, #16]
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	490d      	ldr	r1, [pc, #52]	; (80012c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001292:	4313      	orrs	r3, r2
 8001294:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001296:	f000 f81d 	bl	80012d4 <HAL_RCC_GetSysClockFreq>
 800129a:	4601      	mov	r1, r0
 800129c:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <HAL_RCC_ClockConfig+0x1c4>)
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	091b      	lsrs	r3, r3, #4
 80012a2:	f003 030f 	and.w	r3, r3, #15
 80012a6:	4a09      	ldr	r2, [pc, #36]	; (80012cc <HAL_RCC_ClockConfig+0x1c8>)
 80012a8:	5cd3      	ldrb	r3, [r2, r3]
 80012aa:	fa21 f303 	lsr.w	r3, r1, r3
 80012ae:	4a08      	ldr	r2, [pc, #32]	; (80012d0 <HAL_RCC_ClockConfig+0x1cc>)
 80012b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80012b2:	2000      	movs	r0, #0
 80012b4:	f005 fcfa 	bl	8006cac <HAL_InitTick>

  return HAL_OK;
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40023c00 	.word	0x40023c00
 80012c8:	40023800 	.word	0x40023800
 80012cc:	08008268 	.word	0x08008268
 80012d0:	20000008 	.word	0x20000008

080012d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	2300      	movs	r3, #0
 80012e4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012ea:	4b50      	ldr	r3, [pc, #320]	; (800142c <HAL_RCC_GetSysClockFreq+0x158>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f003 030c 	and.w	r3, r3, #12
 80012f2:	2b04      	cmp	r3, #4
 80012f4:	d007      	beq.n	8001306 <HAL_RCC_GetSysClockFreq+0x32>
 80012f6:	2b08      	cmp	r3, #8
 80012f8:	d008      	beq.n	800130c <HAL_RCC_GetSysClockFreq+0x38>
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f040 808d 	bne.w	800141a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001300:	4b4b      	ldr	r3, [pc, #300]	; (8001430 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001302:	60bb      	str	r3, [r7, #8]
       break;
 8001304:	e08c      	b.n	8001420 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001306:	4b4b      	ldr	r3, [pc, #300]	; (8001434 <HAL_RCC_GetSysClockFreq+0x160>)
 8001308:	60bb      	str	r3, [r7, #8]
      break;
 800130a:	e089      	b.n	8001420 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800130c:	4b47      	ldr	r3, [pc, #284]	; (800142c <HAL_RCC_GetSysClockFreq+0x158>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001314:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001316:	4b45      	ldr	r3, [pc, #276]	; (800142c <HAL_RCC_GetSysClockFreq+0x158>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d023      	beq.n	800136a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001322:	4b42      	ldr	r3, [pc, #264]	; (800142c <HAL_RCC_GetSysClockFreq+0x158>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	099b      	lsrs	r3, r3, #6
 8001328:	f04f 0400 	mov.w	r4, #0
 800132c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001330:	f04f 0200 	mov.w	r2, #0
 8001334:	ea03 0501 	and.w	r5, r3, r1
 8001338:	ea04 0602 	and.w	r6, r4, r2
 800133c:	4a3d      	ldr	r2, [pc, #244]	; (8001434 <HAL_RCC_GetSysClockFreq+0x160>)
 800133e:	fb02 f106 	mul.w	r1, r2, r6
 8001342:	2200      	movs	r2, #0
 8001344:	fb02 f205 	mul.w	r2, r2, r5
 8001348:	440a      	add	r2, r1
 800134a:	493a      	ldr	r1, [pc, #232]	; (8001434 <HAL_RCC_GetSysClockFreq+0x160>)
 800134c:	fba5 0101 	umull	r0, r1, r5, r1
 8001350:	1853      	adds	r3, r2, r1
 8001352:	4619      	mov	r1, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f04f 0400 	mov.w	r4, #0
 800135a:	461a      	mov	r2, r3
 800135c:	4623      	mov	r3, r4
 800135e:	f7fe ffa7 	bl	80002b0 <__aeabi_uldivmod>
 8001362:	4603      	mov	r3, r0
 8001364:	460c      	mov	r4, r1
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	e049      	b.n	80013fe <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800136a:	4b30      	ldr	r3, [pc, #192]	; (800142c <HAL_RCC_GetSysClockFreq+0x158>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	099b      	lsrs	r3, r3, #6
 8001370:	f04f 0400 	mov.w	r4, #0
 8001374:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001378:	f04f 0200 	mov.w	r2, #0
 800137c:	ea03 0501 	and.w	r5, r3, r1
 8001380:	ea04 0602 	and.w	r6, r4, r2
 8001384:	4629      	mov	r1, r5
 8001386:	4632      	mov	r2, r6
 8001388:	f04f 0300 	mov.w	r3, #0
 800138c:	f04f 0400 	mov.w	r4, #0
 8001390:	0154      	lsls	r4, r2, #5
 8001392:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001396:	014b      	lsls	r3, r1, #5
 8001398:	4619      	mov	r1, r3
 800139a:	4622      	mov	r2, r4
 800139c:	1b49      	subs	r1, r1, r5
 800139e:	eb62 0206 	sbc.w	r2, r2, r6
 80013a2:	f04f 0300 	mov.w	r3, #0
 80013a6:	f04f 0400 	mov.w	r4, #0
 80013aa:	0194      	lsls	r4, r2, #6
 80013ac:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80013b0:	018b      	lsls	r3, r1, #6
 80013b2:	1a5b      	subs	r3, r3, r1
 80013b4:	eb64 0402 	sbc.w	r4, r4, r2
 80013b8:	f04f 0100 	mov.w	r1, #0
 80013bc:	f04f 0200 	mov.w	r2, #0
 80013c0:	00e2      	lsls	r2, r4, #3
 80013c2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80013c6:	00d9      	lsls	r1, r3, #3
 80013c8:	460b      	mov	r3, r1
 80013ca:	4614      	mov	r4, r2
 80013cc:	195b      	adds	r3, r3, r5
 80013ce:	eb44 0406 	adc.w	r4, r4, r6
 80013d2:	f04f 0100 	mov.w	r1, #0
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	02a2      	lsls	r2, r4, #10
 80013dc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80013e0:	0299      	lsls	r1, r3, #10
 80013e2:	460b      	mov	r3, r1
 80013e4:	4614      	mov	r4, r2
 80013e6:	4618      	mov	r0, r3
 80013e8:	4621      	mov	r1, r4
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f04f 0400 	mov.w	r4, #0
 80013f0:	461a      	mov	r2, r3
 80013f2:	4623      	mov	r3, r4
 80013f4:	f7fe ff5c 	bl	80002b0 <__aeabi_uldivmod>
 80013f8:	4603      	mov	r3, r0
 80013fa:	460c      	mov	r4, r1
 80013fc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80013fe:	4b0b      	ldr	r3, [pc, #44]	; (800142c <HAL_RCC_GetSysClockFreq+0x158>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	0c1b      	lsrs	r3, r3, #16
 8001404:	f003 0303 	and.w	r3, r3, #3
 8001408:	3301      	adds	r3, #1
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800140e:	68fa      	ldr	r2, [r7, #12]
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	fbb2 f3f3 	udiv	r3, r2, r3
 8001416:	60bb      	str	r3, [r7, #8]
      break;
 8001418:	e002      	b.n	8001420 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800141a:	4b05      	ldr	r3, [pc, #20]	; (8001430 <HAL_RCC_GetSysClockFreq+0x15c>)
 800141c:	60bb      	str	r3, [r7, #8]
      break;
 800141e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001420:	68bb      	ldr	r3, [r7, #8]
}
 8001422:	4618      	mov	r0, r3
 8001424:	3714      	adds	r7, #20
 8001426:	46bd      	mov	sp, r7
 8001428:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800142a:	bf00      	nop
 800142c:	40023800 	.word	0x40023800
 8001430:	00f42400 	.word	0x00f42400
 8001434:	017d7840 	.word	0x017d7840

08001438 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800143c:	4b03      	ldr	r3, [pc, #12]	; (800144c <HAL_RCC_GetHCLKFreq+0x14>)
 800143e:	681b      	ldr	r3, [r3, #0]
}
 8001440:	4618      	mov	r0, r3
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	20000008 	.word	0x20000008

08001450 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001454:	f7ff fff0 	bl	8001438 <HAL_RCC_GetHCLKFreq>
 8001458:	4601      	mov	r1, r0
 800145a:	4b05      	ldr	r3, [pc, #20]	; (8001470 <HAL_RCC_GetPCLK1Freq+0x20>)
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	0a9b      	lsrs	r3, r3, #10
 8001460:	f003 0307 	and.w	r3, r3, #7
 8001464:	4a03      	ldr	r2, [pc, #12]	; (8001474 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001466:	5cd3      	ldrb	r3, [r2, r3]
 8001468:	fa21 f303 	lsr.w	r3, r1, r3
}
 800146c:	4618      	mov	r0, r3
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40023800 	.word	0x40023800
 8001474:	08008278 	.word	0x08008278

08001478 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800147c:	f7ff ffdc 	bl	8001438 <HAL_RCC_GetHCLKFreq>
 8001480:	4601      	mov	r1, r0
 8001482:	4b05      	ldr	r3, [pc, #20]	; (8001498 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	0b5b      	lsrs	r3, r3, #13
 8001488:	f003 0307 	and.w	r3, r3, #7
 800148c:	4a03      	ldr	r2, [pc, #12]	; (800149c <HAL_RCC_GetPCLK2Freq+0x24>)
 800148e:	5cd3      	ldrb	r3, [r2, r3]
 8001490:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001494:	4618      	mov	r0, r3
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40023800 	.word	0x40023800
 800149c:	08008278 	.word	0x08008278

080014a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	220f      	movs	r2, #15
 80014ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HAL_RCC_GetClockConfig+0x5c>)
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f003 0203 	and.w	r2, r3, #3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80014bc:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <HAL_RCC_GetClockConfig+0x5c>)
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80014c8:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <HAL_RCC_GetClockConfig+0x5c>)
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80014d4:	4b09      	ldr	r3, [pc, #36]	; (80014fc <HAL_RCC_GetClockConfig+0x5c>)
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	08db      	lsrs	r3, r3, #3
 80014da:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014e2:	4b07      	ldr	r3, [pc, #28]	; (8001500 <HAL_RCC_GetClockConfig+0x60>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 020f 	and.w	r2, r3, #15
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	601a      	str	r2, [r3, #0]
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	40023800 	.word	0x40023800
 8001500:	40023c00 	.word	0x40023c00

08001504 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b088      	sub	sp, #32
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800151c:	2300      	movs	r3, #0
 800151e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0301 	and.w	r3, r3, #1
 8001528:	2b00      	cmp	r3, #0
 800152a:	d012      	beq.n	8001552 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800152c:	4b69      	ldr	r3, [pc, #420]	; (80016d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	4a68      	ldr	r2, [pc, #416]	; (80016d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001532:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001536:	6093      	str	r3, [r2, #8]
 8001538:	4b66      	ldr	r3, [pc, #408]	; (80016d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800153a:	689a      	ldr	r2, [r3, #8]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001540:	4964      	ldr	r1, [pc, #400]	; (80016d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001542:	4313      	orrs	r3, r2
 8001544:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800154e:	2301      	movs	r3, #1
 8001550:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d017      	beq.n	800158e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800155e:	4b5d      	ldr	r3, [pc, #372]	; (80016d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001560:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001564:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800156c:	4959      	ldr	r1, [pc, #356]	; (80016d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800156e:	4313      	orrs	r3, r2
 8001570:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001578:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800157c:	d101      	bne.n	8001582 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800157e:	2301      	movs	r3, #1
 8001580:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001586:	2b00      	cmp	r3, #0
 8001588:	d101      	bne.n	800158e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800158a:	2301      	movs	r3, #1
 800158c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d017      	beq.n	80015ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800159a:	4b4e      	ldr	r3, [pc, #312]	; (80016d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800159c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a8:	494a      	ldr	r1, [pc, #296]	; (80016d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80015aa:	4313      	orrs	r3, r2
 80015ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015b8:	d101      	bne.n	80015be <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80015ba:	2301      	movs	r3, #1
 80015bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d101      	bne.n	80015ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80015c6:	2301      	movs	r3, #1
 80015c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80015d6:	2301      	movs	r3, #1
 80015d8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0320 	and.w	r3, r3, #32
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f000 808b 	beq.w	80016fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80015e8:	4b3a      	ldr	r3, [pc, #232]	; (80016d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80015ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ec:	4a39      	ldr	r2, [pc, #228]	; (80016d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80015ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f2:	6413      	str	r3, [r2, #64]	; 0x40
 80015f4:	4b37      	ldr	r3, [pc, #220]	; (80016d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80015f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fc:	60bb      	str	r3, [r7, #8]
 80015fe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001600:	4b35      	ldr	r3, [pc, #212]	; (80016d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a34      	ldr	r2, [pc, #208]	; (80016d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800160a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800160c:	f7fe fff2 	bl	80005f4 <HAL_GetTick>
 8001610:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001612:	e008      	b.n	8001626 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001614:	f7fe ffee 	bl	80005f4 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b64      	cmp	r3, #100	; 0x64
 8001620:	d901      	bls.n	8001626 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e355      	b.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001626:	4b2c      	ldr	r3, [pc, #176]	; (80016d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800162e:	2b00      	cmp	r3, #0
 8001630:	d0f0      	beq.n	8001614 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001632:	4b28      	ldr	r3, [pc, #160]	; (80016d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800163a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d035      	beq.n	80016ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	429a      	cmp	r2, r3
 800164e:	d02e      	beq.n	80016ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001650:	4b20      	ldr	r3, [pc, #128]	; (80016d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001654:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001658:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800165a:	4b1e      	ldr	r3, [pc, #120]	; (80016d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800165c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800165e:	4a1d      	ldr	r2, [pc, #116]	; (80016d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001664:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001666:	4b1b      	ldr	r3, [pc, #108]	; (80016d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800166a:	4a1a      	ldr	r2, [pc, #104]	; (80016d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800166c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001670:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001672:	4a18      	ldr	r2, [pc, #96]	; (80016d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001678:	4b16      	ldr	r3, [pc, #88]	; (80016d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800167a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800167c:	f003 0301 	and.w	r3, r3, #1
 8001680:	2b01      	cmp	r3, #1
 8001682:	d114      	bne.n	80016ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001684:	f7fe ffb6 	bl	80005f4 <HAL_GetTick>
 8001688:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800168a:	e00a      	b.n	80016a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800168c:	f7fe ffb2 	bl	80005f4 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	f241 3288 	movw	r2, #5000	; 0x1388
 800169a:	4293      	cmp	r3, r2
 800169c:	d901      	bls.n	80016a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e317      	b.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016a2:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80016a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d0ee      	beq.n	800168c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80016ba:	d111      	bne.n	80016e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80016bc:	4b05      	ldr	r3, [pc, #20]	; (80016d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016c8:	4b04      	ldr	r3, [pc, #16]	; (80016dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80016ca:	400b      	ands	r3, r1
 80016cc:	4901      	ldr	r1, [pc, #4]	; (80016d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80016ce:	4313      	orrs	r3, r2
 80016d0:	608b      	str	r3, [r1, #8]
 80016d2:	e00b      	b.n	80016ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80016d4:	40023800 	.word	0x40023800
 80016d8:	40007000 	.word	0x40007000
 80016dc:	0ffffcff 	.word	0x0ffffcff
 80016e0:	4bb0      	ldr	r3, [pc, #704]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	4aaf      	ldr	r2, [pc, #700]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80016e6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80016ea:	6093      	str	r3, [r2, #8]
 80016ec:	4bad      	ldr	r3, [pc, #692]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80016ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016f8:	49aa      	ldr	r1, [pc, #680]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80016fa:	4313      	orrs	r3, r2
 80016fc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0310 	and.w	r3, r3, #16
 8001706:	2b00      	cmp	r3, #0
 8001708:	d010      	beq.n	800172c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800170a:	4ba6      	ldr	r3, [pc, #664]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800170c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001710:	4aa4      	ldr	r2, [pc, #656]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001712:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001716:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800171a:	4ba2      	ldr	r3, [pc, #648]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800171c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001724:	499f      	ldr	r1, [pc, #636]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001726:	4313      	orrs	r3, r2
 8001728:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d00a      	beq.n	800174e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001738:	4b9a      	ldr	r3, [pc, #616]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800173a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800173e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001746:	4997      	ldr	r1, [pc, #604]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001748:	4313      	orrs	r3, r2
 800174a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d00a      	beq.n	8001770 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800175a:	4b92      	ldr	r3, [pc, #584]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800175c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001760:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001768:	498e      	ldr	r1, [pc, #568]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800176a:	4313      	orrs	r3, r2
 800176c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d00a      	beq.n	8001792 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800177c:	4b89      	ldr	r3, [pc, #548]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800177e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001782:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800178a:	4986      	ldr	r1, [pc, #536]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800178c:	4313      	orrs	r3, r2
 800178e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d00a      	beq.n	80017b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800179e:	4b81      	ldr	r3, [pc, #516]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80017a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ac:	497d      	ldr	r1, [pc, #500]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d00a      	beq.n	80017d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80017c0:	4b78      	ldr	r3, [pc, #480]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80017c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017c6:	f023 0203 	bic.w	r2, r3, #3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ce:	4975      	ldr	r1, [pc, #468]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80017d0:	4313      	orrs	r3, r2
 80017d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d00a      	beq.n	80017f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80017e2:	4b70      	ldr	r3, [pc, #448]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80017e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017e8:	f023 020c 	bic.w	r2, r3, #12
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017f0:	496c      	ldr	r1, [pc, #432]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80017f2:	4313      	orrs	r3, r2
 80017f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001800:	2b00      	cmp	r3, #0
 8001802:	d00a      	beq.n	800181a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001804:	4b67      	ldr	r3, [pc, #412]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800180a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001812:	4964      	ldr	r1, [pc, #400]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001814:	4313      	orrs	r3, r2
 8001816:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001822:	2b00      	cmp	r3, #0
 8001824:	d00a      	beq.n	800183c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001826:	4b5f      	ldr	r3, [pc, #380]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800182c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001834:	495b      	ldr	r1, [pc, #364]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001836:	4313      	orrs	r3, r2
 8001838:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001844:	2b00      	cmp	r3, #0
 8001846:	d00a      	beq.n	800185e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001848:	4b56      	ldr	r3, [pc, #344]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800184a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800184e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001856:	4953      	ldr	r1, [pc, #332]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001858:	4313      	orrs	r3, r2
 800185a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001866:	2b00      	cmp	r3, #0
 8001868:	d00a      	beq.n	8001880 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800186a:	4b4e      	ldr	r3, [pc, #312]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800186c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001870:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001878:	494a      	ldr	r1, [pc, #296]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800187a:	4313      	orrs	r3, r2
 800187c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d00a      	beq.n	80018a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800188c:	4b45      	ldr	r3, [pc, #276]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800188e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001892:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800189a:	4942      	ldr	r1, [pc, #264]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800189c:	4313      	orrs	r3, r2
 800189e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d00a      	beq.n	80018c4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80018ae:	4b3d      	ldr	r3, [pc, #244]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80018b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018bc:	4939      	ldr	r1, [pc, #228]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80018be:	4313      	orrs	r3, r2
 80018c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d00a      	beq.n	80018e6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80018d0:	4b34      	ldr	r3, [pc, #208]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80018d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018d6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80018de:	4931      	ldr	r1, [pc, #196]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80018e0:	4313      	orrs	r3, r2
 80018e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d011      	beq.n	8001916 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80018f2:	4b2c      	ldr	r3, [pc, #176]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80018f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018f8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001900:	4928      	ldr	r1, [pc, #160]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001902:	4313      	orrs	r3, r2
 8001904:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800190c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001910:	d101      	bne.n	8001916 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001912:	2301      	movs	r3, #1
 8001914:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0308 	and.w	r3, r3, #8
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001922:	2301      	movs	r3, #1
 8001924:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d00a      	beq.n	8001948 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001932:	4b1c      	ldr	r3, [pc, #112]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001938:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001940:	4918      	ldr	r1, [pc, #96]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001942:	4313      	orrs	r3, r2
 8001944:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d00b      	beq.n	800196c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001954:	4b13      	ldr	r3, [pc, #76]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800195a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001964:	490f      	ldr	r1, [pc, #60]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001966:	4313      	orrs	r3, r2
 8001968:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d005      	beq.n	800197e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800197a:	f040 80d8 	bne.w	8001b2e <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800197e:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a08      	ldr	r2, [pc, #32]	; (80019a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001984:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001988:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800198a:	f7fe fe33 	bl	80005f4 <HAL_GetTick>
 800198e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001990:	e00a      	b.n	80019a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001992:	f7fe fe2f 	bl	80005f4 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b64      	cmp	r3, #100	; 0x64
 800199e:	d903      	bls.n	80019a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e196      	b.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80019a4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80019a8:	4b6c      	ldr	r3, [pc, #432]	; (8001b5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d1ee      	bne.n	8001992 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d021      	beq.n	8001a04 <HAL_RCCEx_PeriphCLKConfig+0x500>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d11d      	bne.n	8001a04 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80019c8:	4b64      	ldr	r3, [pc, #400]	; (8001b5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80019ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019ce:	0c1b      	lsrs	r3, r3, #16
 80019d0:	f003 0303 	and.w	r3, r3, #3
 80019d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80019d6:	4b61      	ldr	r3, [pc, #388]	; (8001b5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80019d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019dc:	0e1b      	lsrs	r3, r3, #24
 80019de:	f003 030f 	and.w	r3, r3, #15
 80019e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	019a      	lsls	r2, r3, #6
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	041b      	lsls	r3, r3, #16
 80019ee:	431a      	orrs	r2, r3
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	061b      	lsls	r3, r3, #24
 80019f4:	431a      	orrs	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	071b      	lsls	r3, r3, #28
 80019fc:	4957      	ldr	r1, [pc, #348]	; (8001b5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80019fe:	4313      	orrs	r3, r2
 8001a00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d004      	beq.n	8001a1a <HAL_RCCEx_PeriphCLKConfig+0x516>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a18:	d00a      	beq.n	8001a30 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d02e      	beq.n	8001a84 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a2e:	d129      	bne.n	8001a84 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001a30:	4b4a      	ldr	r3, [pc, #296]	; (8001b5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001a32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a36:	0c1b      	lsrs	r3, r3, #16
 8001a38:	f003 0303 	and.w	r3, r3, #3
 8001a3c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001a3e:	4b47      	ldr	r3, [pc, #284]	; (8001b5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001a40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a44:	0f1b      	lsrs	r3, r3, #28
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	019a      	lsls	r2, r3, #6
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	041b      	lsls	r3, r3, #16
 8001a56:	431a      	orrs	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	061b      	lsls	r3, r3, #24
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	071b      	lsls	r3, r3, #28
 8001a64:	493d      	ldr	r1, [pc, #244]	; (8001b5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001a66:	4313      	orrs	r3, r2
 8001a68:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001a6c:	4b3b      	ldr	r3, [pc, #236]	; (8001b5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001a6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a72:	f023 021f 	bic.w	r2, r3, #31
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	4937      	ldr	r1, [pc, #220]	; (8001b5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d01d      	beq.n	8001acc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001a90:	4b32      	ldr	r3, [pc, #200]	; (8001b5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001a92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a96:	0e1b      	lsrs	r3, r3, #24
 8001a98:	f003 030f 	and.w	r3, r3, #15
 8001a9c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001a9e:	4b2f      	ldr	r3, [pc, #188]	; (8001b5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001aa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001aa4:	0f1b      	lsrs	r3, r3, #28
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	019a      	lsls	r2, r3, #6
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	041b      	lsls	r3, r3, #16
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	061b      	lsls	r3, r3, #24
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	071b      	lsls	r3, r3, #28
 8001ac4:	4925      	ldr	r1, [pc, #148]	; (8001b5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d011      	beq.n	8001afc <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	019a      	lsls	r2, r3, #6
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	041b      	lsls	r3, r3, #16
 8001ae4:	431a      	orrs	r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	061b      	lsls	r3, r3, #24
 8001aec:	431a      	orrs	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	071b      	lsls	r3, r3, #28
 8001af4:	4919      	ldr	r1, [pc, #100]	; (8001b5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001afc:	4b17      	ldr	r3, [pc, #92]	; (8001b5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a16      	ldr	r2, [pc, #88]	; (8001b5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001b02:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b08:	f7fe fd74 	bl	80005f4 <HAL_GetTick>
 8001b0c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001b10:	f7fe fd70 	bl	80005f4 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b64      	cmp	r3, #100	; 0x64
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e0d7      	b.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001b22:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d0f0      	beq.n	8001b10 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	f040 80cd 	bne.w	8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001b36:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a08      	ldr	r2, [pc, #32]	; (8001b5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001b3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b42:	f7fe fd57 	bl	80005f4 <HAL_GetTick>
 8001b46:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001b48:	e00a      	b.n	8001b60 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001b4a:	f7fe fd53 	bl	80005f4 <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b64      	cmp	r3, #100	; 0x64
 8001b56:	d903      	bls.n	8001b60 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e0ba      	b.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8001b5c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001b60:	4b5e      	ldr	r3, [pc, #376]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b6c:	d0ed      	beq.n	8001b4a <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d009      	beq.n	8001b96 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d02e      	beq.n	8001bec <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d12a      	bne.n	8001bec <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001b96:	4b51      	ldr	r3, [pc, #324]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b9c:	0c1b      	lsrs	r3, r3, #16
 8001b9e:	f003 0303 	and.w	r3, r3, #3
 8001ba2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001ba4:	4b4d      	ldr	r3, [pc, #308]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001baa:	0f1b      	lsrs	r3, r3, #28
 8001bac:	f003 0307 	and.w	r3, r3, #7
 8001bb0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	019a      	lsls	r2, r3, #6
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	041b      	lsls	r3, r3, #16
 8001bbc:	431a      	orrs	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	061b      	lsls	r3, r3, #24
 8001bc4:	431a      	orrs	r2, r3
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	071b      	lsls	r3, r3, #28
 8001bca:	4944      	ldr	r1, [pc, #272]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001bd2:	4b42      	ldr	r3, [pc, #264]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001bd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bd8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be0:	3b01      	subs	r3, #1
 8001be2:	021b      	lsls	r3, r3, #8
 8001be4:	493d      	ldr	r1, [pc, #244]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d022      	beq.n	8001c3e <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001bfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001c00:	d11d      	bne.n	8001c3e <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001c02:	4b36      	ldr	r3, [pc, #216]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c08:	0e1b      	lsrs	r3, r3, #24
 8001c0a:	f003 030f 	and.w	r3, r3, #15
 8001c0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001c10:	4b32      	ldr	r3, [pc, #200]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c16:	0f1b      	lsrs	r3, r3, #28
 8001c18:	f003 0307 	and.w	r3, r3, #7
 8001c1c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	019a      	lsls	r2, r3, #6
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a1b      	ldr	r3, [r3, #32]
 8001c28:	041b      	lsls	r3, r3, #16
 8001c2a:	431a      	orrs	r2, r3
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	061b      	lsls	r3, r3, #24
 8001c30:	431a      	orrs	r2, r3
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	071b      	lsls	r3, r3, #28
 8001c36:	4929      	ldr	r1, [pc, #164]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0308 	and.w	r3, r3, #8
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d028      	beq.n	8001c9c <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001c4a:	4b24      	ldr	r3, [pc, #144]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c50:	0e1b      	lsrs	r3, r3, #24
 8001c52:	f003 030f 	and.w	r3, r3, #15
 8001c56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001c58:	4b20      	ldr	r3, [pc, #128]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c5e:	0c1b      	lsrs	r3, r3, #16
 8001c60:	f003 0303 	and.w	r3, r3, #3
 8001c64:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	695b      	ldr	r3, [r3, #20]
 8001c6a:	019a      	lsls	r2, r3, #6
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	041b      	lsls	r3, r3, #16
 8001c70:	431a      	orrs	r2, r3
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	061b      	lsls	r3, r3, #24
 8001c76:	431a      	orrs	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	69db      	ldr	r3, [r3, #28]
 8001c7c:	071b      	lsls	r3, r3, #28
 8001c7e:	4917      	ldr	r1, [pc, #92]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001c86:	4b15      	ldr	r3, [pc, #84]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001c88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c94:	4911      	ldr	r1, [pc, #68]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001c9c:	4b0f      	ldr	r3, [pc, #60]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a0e      	ldr	r2, [pc, #56]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001ca2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ca8:	f7fe fca4 	bl	80005f4 <HAL_GetTick>
 8001cac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001cb0:	f7fe fca0 	bl	80005f4 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b64      	cmp	r3, #100	; 0x64
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e007      	b.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001cc2:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001cca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001cce:	d1ef      	bne.n	8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3720      	adds	r7, #32
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40023800 	.word	0x40023800

08001ce0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e01c      	b.n	8001d2c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	795b      	ldrb	r3, [r3, #5]
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d105      	bne.n	8001d08 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f004 fede 	bl	8006ac4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f042 0204 	orr.w	r2, r2, #4
 8001d1c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2201      	movs	r2, #1
 8001d22:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	791b      	ldrb	r3, [r3, #4]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d101      	bne.n	8001d4e <HAL_RNG_GenerateRandomNumber+0x1a>
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	e03d      	b.n	8001dca <HAL_RNG_GenerateRandomNumber+0x96>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2201      	movs	r2, #1
 8001d52:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	795b      	ldrb	r3, [r3, #5]
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d12c      	bne.n	8001db8 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2202      	movs	r2, #2
 8001d62:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001d64:	f7fe fc46 	bl	80005f4 <HAL_GetTick>
 8001d68:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8001d6a:	e011      	b.n	8001d90 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8001d6c:	f7fe fc42 	bl	80005f4 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d90a      	bls.n	8001d90 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2202      	movs	r2, #2
 8001d84:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e01c      	b.n	8001dca <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d1e6      	bne.n	8001d6c <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	68da      	ldr	r2, [r3, #12]
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	715a      	strb	r2, [r3, #5]
 8001db6:	e004      	b.n	8001dc2 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2204      	movs	r2, #4
 8001dbc:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	711a      	strb	r2, [r3, #4]

  return status;
 8001dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  if(HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	330c      	adds	r3, #12
 8001dde:	4619      	mov	r1, r3
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f7ff ffa7 	bl	8001d34 <HAL_RNG_GenerateRandomNumber>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d102      	bne.n	8001df2 <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	e000      	b.n	8001df4 <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 8001df2:	2300      	movs	r3, #0
  }
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e01d      	b.n	8001e4a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d106      	bne.n	8001e28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f004 fe6e 	bl	8006b04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3304      	adds	r3, #4
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4610      	mov	r0, r2
 8001e3c:	f000 fc0e 	bl	800265c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
	...

08001e54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68da      	ldr	r2, [r3, #12]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f042 0201 	orr.w	r2, r2, #1
 8001e6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	689a      	ldr	r2, [r3, #8]
 8001e72:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <HAL_TIM_Base_Start_IT+0x50>)
 8001e74:	4013      	ands	r3, r2
 8001e76:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2b06      	cmp	r3, #6
 8001e7c:	d00b      	beq.n	8001e96 <HAL_TIM_Base_Start_IT+0x42>
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e84:	d007      	beq.n	8001e96 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f042 0201 	orr.w	r2, r2, #1
 8001e94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3714      	adds	r7, #20
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	00010007 	.word	0x00010007

08001ea8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e01d      	b.n	8001ef6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d106      	bne.n	8001ed4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f815 	bl	8001efe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3304      	adds	r3, #4
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4610      	mov	r0, r2
 8001ee8:	f000 fbb8 	bl	800265c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001efe:	b480      	push	{r7}
 8001f00:	b083      	sub	sp, #12
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001f06:	bf00      	nop
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
	...

08001f14 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	2b0c      	cmp	r3, #12
 8001f22:	d841      	bhi.n	8001fa8 <HAL_TIM_PWM_Start_IT+0x94>
 8001f24:	a201      	add	r2, pc, #4	; (adr r2, 8001f2c <HAL_TIM_PWM_Start_IT+0x18>)
 8001f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f2a:	bf00      	nop
 8001f2c:	08001f61 	.word	0x08001f61
 8001f30:	08001fa9 	.word	0x08001fa9
 8001f34:	08001fa9 	.word	0x08001fa9
 8001f38:	08001fa9 	.word	0x08001fa9
 8001f3c:	08001f73 	.word	0x08001f73
 8001f40:	08001fa9 	.word	0x08001fa9
 8001f44:	08001fa9 	.word	0x08001fa9
 8001f48:	08001fa9 	.word	0x08001fa9
 8001f4c:	08001f85 	.word	0x08001f85
 8001f50:	08001fa9 	.word	0x08001fa9
 8001f54:	08001fa9 	.word	0x08001fa9
 8001f58:	08001fa9 	.word	0x08001fa9
 8001f5c:	08001f97 	.word	0x08001f97
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68da      	ldr	r2, [r3, #12]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f042 0202 	orr.w	r2, r2, #2
 8001f6e:	60da      	str	r2, [r3, #12]
      break;
 8001f70:	e01b      	b.n	8001faa <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68da      	ldr	r2, [r3, #12]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f042 0204 	orr.w	r2, r2, #4
 8001f80:	60da      	str	r2, [r3, #12]
      break;
 8001f82:	e012      	b.n	8001faa <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f042 0208 	orr.w	r2, r2, #8
 8001f92:	60da      	str	r2, [r3, #12]
      break;
 8001f94:	e009      	b.n	8001faa <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68da      	ldr	r2, [r3, #12]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f042 0210 	orr.w	r2, r2, #16
 8001fa4:	60da      	str	r2, [r3, #12]
      break;
 8001fa6:	e000      	b.n	8001faa <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 8001fa8:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	6839      	ldr	r1, [r7, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f000 feea 	bl	8002d8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a17      	ldr	r2, [pc, #92]	; (800201c <HAL_TIM_PWM_Start_IT+0x108>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d004      	beq.n	8001fcc <HAL_TIM_PWM_Start_IT+0xb8>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a16      	ldr	r2, [pc, #88]	; (8002020 <HAL_TIM_PWM_Start_IT+0x10c>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d101      	bne.n	8001fd0 <HAL_TIM_PWM_Start_IT+0xbc>
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e000      	b.n	8001fd2 <HAL_TIM_PWM_Start_IT+0xbe>
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d007      	beq.n	8001fe6 <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fe4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	4b0d      	ldr	r3, [pc, #52]	; (8002024 <HAL_TIM_PWM_Start_IT+0x110>)
 8001fee:	4013      	ands	r3, r2
 8001ff0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2b06      	cmp	r3, #6
 8001ff6:	d00b      	beq.n	8002010 <HAL_TIM_PWM_Start_IT+0xfc>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ffe:	d007      	beq.n	8002010 <HAL_TIM_PWM_Start_IT+0xfc>
  {
    __HAL_TIM_ENABLE(htim);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f042 0201 	orr.w	r2, r2, #1
 800200e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40010000 	.word	0x40010000
 8002020:	40010400 	.word	0x40010400
 8002024:	00010007 	.word	0x00010007

08002028 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b02      	cmp	r3, #2
 800203c:	d122      	bne.n	8002084 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b02      	cmp	r3, #2
 800204a:	d11b      	bne.n	8002084 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f06f 0202 	mvn.w	r2, #2
 8002054:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2201      	movs	r2, #1
 800205a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	f003 0303 	and.w	r3, r3, #3
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 fad8 	bl	8002620 <HAL_TIM_IC_CaptureCallback>
 8002070:	e005      	b.n	800207e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 faca 	bl	800260c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 fadb 	bl	8002634 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	f003 0304 	and.w	r3, r3, #4
 800208e:	2b04      	cmp	r3, #4
 8002090:	d122      	bne.n	80020d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b04      	cmp	r3, #4
 800209e:	d11b      	bne.n	80020d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f06f 0204 	mvn.w	r2, #4
 80020a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2202      	movs	r2, #2
 80020ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 faae 	bl	8002620 <HAL_TIM_IC_CaptureCallback>
 80020c4:	e005      	b.n	80020d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 faa0 	bl	800260c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f000 fab1 	bl	8002634 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	f003 0308 	and.w	r3, r3, #8
 80020e2:	2b08      	cmp	r3, #8
 80020e4:	d122      	bne.n	800212c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	f003 0308 	and.w	r3, r3, #8
 80020f0:	2b08      	cmp	r3, #8
 80020f2:	d11b      	bne.n	800212c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f06f 0208 	mvn.w	r2, #8
 80020fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2204      	movs	r2, #4
 8002102:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	f003 0303 	and.w	r3, r3, #3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 fa84 	bl	8002620 <HAL_TIM_IC_CaptureCallback>
 8002118:	e005      	b.n	8002126 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 fa76 	bl	800260c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f000 fa87 	bl	8002634 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	f003 0310 	and.w	r3, r3, #16
 8002136:	2b10      	cmp	r3, #16
 8002138:	d122      	bne.n	8002180 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	f003 0310 	and.w	r3, r3, #16
 8002144:	2b10      	cmp	r3, #16
 8002146:	d11b      	bne.n	8002180 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f06f 0210 	mvn.w	r2, #16
 8002150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2208      	movs	r2, #8
 8002156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 fa5a 	bl	8002620 <HAL_TIM_IC_CaptureCallback>
 800216c:	e005      	b.n	800217a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 fa4c 	bl	800260c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f000 fa5d 	bl	8002634 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b01      	cmp	r3, #1
 800218c:	d10e      	bne.n	80021ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	2b01      	cmp	r3, #1
 800219a:	d107      	bne.n	80021ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f06f 0201 	mvn.w	r2, #1
 80021a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f004 fc2e 	bl	8006a08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b6:	2b80      	cmp	r3, #128	; 0x80
 80021b8:	d10e      	bne.n	80021d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021c4:	2b80      	cmp	r3, #128	; 0x80
 80021c6:	d107      	bne.n	80021d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 fe66 	bl	8002ea4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021e6:	d10e      	bne.n	8002206 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f2:	2b80      	cmp	r3, #128	; 0x80
 80021f4:	d107      	bne.n	8002206 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80021fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f000 fe59 	bl	8002eb8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002210:	2b40      	cmp	r3, #64	; 0x40
 8002212:	d10e      	bne.n	8002232 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800221e:	2b40      	cmp	r3, #64	; 0x40
 8002220:	d107      	bne.n	8002232 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800222a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f000 fa0b 	bl	8002648 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	f003 0320 	and.w	r3, r3, #32
 800223c:	2b20      	cmp	r3, #32
 800223e:	d10e      	bne.n	800225e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	f003 0320 	and.w	r3, r3, #32
 800224a:	2b20      	cmp	r3, #32
 800224c:	d107      	bne.n	800225e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f06f 0220 	mvn.w	r2, #32
 8002256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f000 fe19 	bl	8002e90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800225e:	bf00      	nop
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
	...

08002268 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800227a:	2b01      	cmp	r3, #1
 800227c:	d101      	bne.n	8002282 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800227e:	2302      	movs	r3, #2
 8002280:	e105      	b.n	800248e <HAL_TIM_PWM_ConfigChannel+0x226>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2201      	movs	r2, #1
 8002286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2202      	movs	r2, #2
 800228e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2b14      	cmp	r3, #20
 8002296:	f200 80f0 	bhi.w	800247a <HAL_TIM_PWM_ConfigChannel+0x212>
 800229a:	a201      	add	r2, pc, #4	; (adr r2, 80022a0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800229c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a0:	080022f5 	.word	0x080022f5
 80022a4:	0800247b 	.word	0x0800247b
 80022a8:	0800247b 	.word	0x0800247b
 80022ac:	0800247b 	.word	0x0800247b
 80022b0:	08002335 	.word	0x08002335
 80022b4:	0800247b 	.word	0x0800247b
 80022b8:	0800247b 	.word	0x0800247b
 80022bc:	0800247b 	.word	0x0800247b
 80022c0:	08002377 	.word	0x08002377
 80022c4:	0800247b 	.word	0x0800247b
 80022c8:	0800247b 	.word	0x0800247b
 80022cc:	0800247b 	.word	0x0800247b
 80022d0:	080023b7 	.word	0x080023b7
 80022d4:	0800247b 	.word	0x0800247b
 80022d8:	0800247b 	.word	0x0800247b
 80022dc:	0800247b 	.word	0x0800247b
 80022e0:	080023f9 	.word	0x080023f9
 80022e4:	0800247b 	.word	0x0800247b
 80022e8:	0800247b 	.word	0x0800247b
 80022ec:	0800247b 	.word	0x0800247b
 80022f0:	08002439 	.word	0x08002439
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68b9      	ldr	r1, [r7, #8]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f000 fa4e 	bl	800279c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	699a      	ldr	r2, [r3, #24]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f042 0208 	orr.w	r2, r2, #8
 800230e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	699a      	ldr	r2, [r3, #24]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f022 0204 	bic.w	r2, r2, #4
 800231e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6999      	ldr	r1, [r3, #24]
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	691a      	ldr	r2, [r3, #16]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	430a      	orrs	r2, r1
 8002330:	619a      	str	r2, [r3, #24]
      break;
 8002332:	e0a3      	b.n	800247c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	68b9      	ldr	r1, [r7, #8]
 800233a:	4618      	mov	r0, r3
 800233c:	f000 faa0 	bl	8002880 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	699a      	ldr	r2, [r3, #24]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800234e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	699a      	ldr	r2, [r3, #24]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800235e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6999      	ldr	r1, [r3, #24]
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	021a      	lsls	r2, r3, #8
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	430a      	orrs	r2, r1
 8002372:	619a      	str	r2, [r3, #24]
      break;
 8002374:	e082      	b.n	800247c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68b9      	ldr	r1, [r7, #8]
 800237c:	4618      	mov	r0, r3
 800237e:	f000 faf7 	bl	8002970 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	69da      	ldr	r2, [r3, #28]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f042 0208 	orr.w	r2, r2, #8
 8002390:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	69da      	ldr	r2, [r3, #28]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 0204 	bic.w	r2, r2, #4
 80023a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	69d9      	ldr	r1, [r3, #28]
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	691a      	ldr	r2, [r3, #16]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	430a      	orrs	r2, r1
 80023b2:	61da      	str	r2, [r3, #28]
      break;
 80023b4:	e062      	b.n	800247c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68b9      	ldr	r1, [r7, #8]
 80023bc:	4618      	mov	r0, r3
 80023be:	f000 fb4d 	bl	8002a5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	69da      	ldr	r2, [r3, #28]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	69da      	ldr	r2, [r3, #28]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	69d9      	ldr	r1, [r3, #28]
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	021a      	lsls	r2, r3, #8
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	430a      	orrs	r2, r1
 80023f4:	61da      	str	r2, [r3, #28]
      break;
 80023f6:	e041      	b.n	800247c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68b9      	ldr	r1, [r7, #8]
 80023fe:	4618      	mov	r0, r3
 8002400:	f000 fb84 	bl	8002b0c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f042 0208 	orr.w	r2, r2, #8
 8002412:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 0204 	bic.w	r2, r2, #4
 8002422:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	691a      	ldr	r2, [r3, #16]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	430a      	orrs	r2, r1
 8002434:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002436:	e021      	b.n	800247c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68b9      	ldr	r1, [r7, #8]
 800243e:	4618      	mov	r0, r3
 8002440:	f000 fbb6 	bl	8002bb0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002452:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002462:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	021a      	lsls	r2, r3, #8
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	430a      	orrs	r2, r1
 8002476:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002478:	e000      	b.n	800247c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800247a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop

08002498 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d101      	bne.n	80024b0 <HAL_TIM_ConfigClockSource+0x18>
 80024ac:	2302      	movs	r3, #2
 80024ae:	e0a6      	b.n	80025fe <HAL_TIM_ConfigClockSource+0x166>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2202      	movs	r2, #2
 80024bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	4b4f      	ldr	r3, [pc, #316]	; (8002608 <HAL_TIM_ConfigClockSource+0x170>)
 80024cc:	4013      	ands	r3, r2
 80024ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024d6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2b40      	cmp	r3, #64	; 0x40
 80024e6:	d067      	beq.n	80025b8 <HAL_TIM_ConfigClockSource+0x120>
 80024e8:	2b40      	cmp	r3, #64	; 0x40
 80024ea:	d80b      	bhi.n	8002504 <HAL_TIM_ConfigClockSource+0x6c>
 80024ec:	2b10      	cmp	r3, #16
 80024ee:	d073      	beq.n	80025d8 <HAL_TIM_ConfigClockSource+0x140>
 80024f0:	2b10      	cmp	r3, #16
 80024f2:	d802      	bhi.n	80024fa <HAL_TIM_ConfigClockSource+0x62>
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d06f      	beq.n	80025d8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80024f8:	e078      	b.n	80025ec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80024fa:	2b20      	cmp	r3, #32
 80024fc:	d06c      	beq.n	80025d8 <HAL_TIM_ConfigClockSource+0x140>
 80024fe:	2b30      	cmp	r3, #48	; 0x30
 8002500:	d06a      	beq.n	80025d8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002502:	e073      	b.n	80025ec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002504:	2b70      	cmp	r3, #112	; 0x70
 8002506:	d00d      	beq.n	8002524 <HAL_TIM_ConfigClockSource+0x8c>
 8002508:	2b70      	cmp	r3, #112	; 0x70
 800250a:	d804      	bhi.n	8002516 <HAL_TIM_ConfigClockSource+0x7e>
 800250c:	2b50      	cmp	r3, #80	; 0x50
 800250e:	d033      	beq.n	8002578 <HAL_TIM_ConfigClockSource+0xe0>
 8002510:	2b60      	cmp	r3, #96	; 0x60
 8002512:	d041      	beq.n	8002598 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002514:	e06a      	b.n	80025ec <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800251a:	d066      	beq.n	80025ea <HAL_TIM_ConfigClockSource+0x152>
 800251c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002520:	d017      	beq.n	8002552 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002522:	e063      	b.n	80025ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6818      	ldr	r0, [r3, #0]
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	6899      	ldr	r1, [r3, #8]
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685a      	ldr	r2, [r3, #4]
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	f000 fc0a 	bl	8002d4c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002546:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	609a      	str	r2, [r3, #8]
      break;
 8002550:	e04c      	b.n	80025ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6818      	ldr	r0, [r3, #0]
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	6899      	ldr	r1, [r3, #8]
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	f000 fbf3 	bl	8002d4c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002574:	609a      	str	r2, [r3, #8]
      break;
 8002576:	e039      	b.n	80025ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6818      	ldr	r0, [r3, #0]
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	6859      	ldr	r1, [r3, #4]
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	461a      	mov	r2, r3
 8002586:	f000 fb67 	bl	8002c58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2150      	movs	r1, #80	; 0x50
 8002590:	4618      	mov	r0, r3
 8002592:	f000 fbc0 	bl	8002d16 <TIM_ITRx_SetConfig>
      break;
 8002596:	e029      	b.n	80025ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6818      	ldr	r0, [r3, #0]
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	6859      	ldr	r1, [r3, #4]
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	461a      	mov	r2, r3
 80025a6:	f000 fb86 	bl	8002cb6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2160      	movs	r1, #96	; 0x60
 80025b0:	4618      	mov	r0, r3
 80025b2:	f000 fbb0 	bl	8002d16 <TIM_ITRx_SetConfig>
      break;
 80025b6:	e019      	b.n	80025ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6818      	ldr	r0, [r3, #0]
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	6859      	ldr	r1, [r3, #4]
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	461a      	mov	r2, r3
 80025c6:	f000 fb47 	bl	8002c58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2140      	movs	r1, #64	; 0x40
 80025d0:	4618      	mov	r0, r3
 80025d2:	f000 fba0 	bl	8002d16 <TIM_ITRx_SetConfig>
      break;
 80025d6:	e009      	b.n	80025ec <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4619      	mov	r1, r3
 80025e2:	4610      	mov	r0, r2
 80025e4:	f000 fb97 	bl	8002d16 <TIM_ITRx_SetConfig>
      break;
 80025e8:	e000      	b.n	80025ec <HAL_TIM_ConfigClockSource+0x154>
      break;
 80025ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	fffeff88 	.word	0xfffeff88

0800260c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a40      	ldr	r2, [pc, #256]	; (8002770 <TIM_Base_SetConfig+0x114>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d013      	beq.n	800269c <TIM_Base_SetConfig+0x40>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800267a:	d00f      	beq.n	800269c <TIM_Base_SetConfig+0x40>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a3d      	ldr	r2, [pc, #244]	; (8002774 <TIM_Base_SetConfig+0x118>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d00b      	beq.n	800269c <TIM_Base_SetConfig+0x40>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a3c      	ldr	r2, [pc, #240]	; (8002778 <TIM_Base_SetConfig+0x11c>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d007      	beq.n	800269c <TIM_Base_SetConfig+0x40>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a3b      	ldr	r2, [pc, #236]	; (800277c <TIM_Base_SetConfig+0x120>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d003      	beq.n	800269c <TIM_Base_SetConfig+0x40>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a3a      	ldr	r2, [pc, #232]	; (8002780 <TIM_Base_SetConfig+0x124>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d108      	bne.n	80026ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a2f      	ldr	r2, [pc, #188]	; (8002770 <TIM_Base_SetConfig+0x114>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d02b      	beq.n	800270e <TIM_Base_SetConfig+0xb2>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026bc:	d027      	beq.n	800270e <TIM_Base_SetConfig+0xb2>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a2c      	ldr	r2, [pc, #176]	; (8002774 <TIM_Base_SetConfig+0x118>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d023      	beq.n	800270e <TIM_Base_SetConfig+0xb2>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a2b      	ldr	r2, [pc, #172]	; (8002778 <TIM_Base_SetConfig+0x11c>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d01f      	beq.n	800270e <TIM_Base_SetConfig+0xb2>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a2a      	ldr	r2, [pc, #168]	; (800277c <TIM_Base_SetConfig+0x120>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d01b      	beq.n	800270e <TIM_Base_SetConfig+0xb2>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a29      	ldr	r2, [pc, #164]	; (8002780 <TIM_Base_SetConfig+0x124>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d017      	beq.n	800270e <TIM_Base_SetConfig+0xb2>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a28      	ldr	r2, [pc, #160]	; (8002784 <TIM_Base_SetConfig+0x128>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d013      	beq.n	800270e <TIM_Base_SetConfig+0xb2>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a27      	ldr	r2, [pc, #156]	; (8002788 <TIM_Base_SetConfig+0x12c>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d00f      	beq.n	800270e <TIM_Base_SetConfig+0xb2>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a26      	ldr	r2, [pc, #152]	; (800278c <TIM_Base_SetConfig+0x130>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d00b      	beq.n	800270e <TIM_Base_SetConfig+0xb2>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a25      	ldr	r2, [pc, #148]	; (8002790 <TIM_Base_SetConfig+0x134>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d007      	beq.n	800270e <TIM_Base_SetConfig+0xb2>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a24      	ldr	r2, [pc, #144]	; (8002794 <TIM_Base_SetConfig+0x138>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d003      	beq.n	800270e <TIM_Base_SetConfig+0xb2>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a23      	ldr	r2, [pc, #140]	; (8002798 <TIM_Base_SetConfig+0x13c>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d108      	bne.n	8002720 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002714:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	4313      	orrs	r3, r2
 800271e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	4313      	orrs	r3, r2
 800272c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a0a      	ldr	r2, [pc, #40]	; (8002770 <TIM_Base_SetConfig+0x114>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d003      	beq.n	8002754 <TIM_Base_SetConfig+0xf8>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a0c      	ldr	r2, [pc, #48]	; (8002780 <TIM_Base_SetConfig+0x124>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d103      	bne.n	800275c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	691a      	ldr	r2, [r3, #16]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	615a      	str	r2, [r3, #20]
}
 8002762:	bf00      	nop
 8002764:	3714      	adds	r7, #20
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	40010000 	.word	0x40010000
 8002774:	40000400 	.word	0x40000400
 8002778:	40000800 	.word	0x40000800
 800277c:	40000c00 	.word	0x40000c00
 8002780:	40010400 	.word	0x40010400
 8002784:	40014000 	.word	0x40014000
 8002788:	40014400 	.word	0x40014400
 800278c:	40014800 	.word	0x40014800
 8002790:	40001800 	.word	0x40001800
 8002794:	40001c00 	.word	0x40001c00
 8002798:	40002000 	.word	0x40002000

0800279c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800279c:	b480      	push	{r7}
 800279e:	b087      	sub	sp, #28
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	f023 0201 	bic.w	r2, r3, #1
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	4b2b      	ldr	r3, [pc, #172]	; (8002874 <TIM_OC1_SetConfig+0xd8>)
 80027c8:	4013      	ands	r3, r2
 80027ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f023 0303 	bic.w	r3, r3, #3
 80027d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	4313      	orrs	r3, r2
 80027dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	f023 0302 	bic.w	r3, r3, #2
 80027e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a21      	ldr	r2, [pc, #132]	; (8002878 <TIM_OC1_SetConfig+0xdc>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d003      	beq.n	8002800 <TIM_OC1_SetConfig+0x64>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a20      	ldr	r2, [pc, #128]	; (800287c <TIM_OC1_SetConfig+0xe0>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d10c      	bne.n	800281a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	f023 0308 	bic.w	r3, r3, #8
 8002806:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	697a      	ldr	r2, [r7, #20]
 800280e:	4313      	orrs	r3, r2
 8002810:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	f023 0304 	bic.w	r3, r3, #4
 8002818:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a16      	ldr	r2, [pc, #88]	; (8002878 <TIM_OC1_SetConfig+0xdc>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d003      	beq.n	800282a <TIM_OC1_SetConfig+0x8e>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a15      	ldr	r2, [pc, #84]	; (800287c <TIM_OC1_SetConfig+0xe0>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d111      	bne.n	800284e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002830:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002838:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	4313      	orrs	r3, r2
 8002842:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	4313      	orrs	r3, r2
 800284c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685a      	ldr	r2, [r3, #4]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	697a      	ldr	r2, [r7, #20]
 8002866:	621a      	str	r2, [r3, #32]
}
 8002868:	bf00      	nop
 800286a:	371c      	adds	r7, #28
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	fffeff8f 	.word	0xfffeff8f
 8002878:	40010000 	.word	0x40010000
 800287c:	40010400 	.word	0x40010400

08002880 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002880:	b480      	push	{r7}
 8002882:	b087      	sub	sp, #28
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	f023 0210 	bic.w	r2, r3, #16
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	4b2e      	ldr	r3, [pc, #184]	; (8002964 <TIM_OC2_SetConfig+0xe4>)
 80028ac:	4013      	ands	r3, r2
 80028ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	021b      	lsls	r3, r3, #8
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	f023 0320 	bic.w	r3, r3, #32
 80028ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	011b      	lsls	r3, r3, #4
 80028d2:	697a      	ldr	r2, [r7, #20]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a23      	ldr	r2, [pc, #140]	; (8002968 <TIM_OC2_SetConfig+0xe8>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d003      	beq.n	80028e8 <TIM_OC2_SetConfig+0x68>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a22      	ldr	r2, [pc, #136]	; (800296c <TIM_OC2_SetConfig+0xec>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d10d      	bne.n	8002904 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	011b      	lsls	r3, r3, #4
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002902:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a18      	ldr	r2, [pc, #96]	; (8002968 <TIM_OC2_SetConfig+0xe8>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d003      	beq.n	8002914 <TIM_OC2_SetConfig+0x94>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a17      	ldr	r2, [pc, #92]	; (800296c <TIM_OC2_SetConfig+0xec>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d113      	bne.n	800293c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800291a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002922:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	4313      	orrs	r3, r2
 800292e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	4313      	orrs	r3, r2
 800293a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685a      	ldr	r2, [r3, #4]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	621a      	str	r2, [r3, #32]
}
 8002956:	bf00      	nop
 8002958:	371c      	adds	r7, #28
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	feff8fff 	.word	0xfeff8fff
 8002968:	40010000 	.word	0x40010000
 800296c:	40010400 	.word	0x40010400

08002970 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002970:	b480      	push	{r7}
 8002972:	b087      	sub	sp, #28
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	4b2d      	ldr	r3, [pc, #180]	; (8002a50 <TIM_OC3_SetConfig+0xe0>)
 800299c:	4013      	ands	r3, r2
 800299e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f023 0303 	bic.w	r3, r3, #3
 80029a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80029b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	021b      	lsls	r3, r3, #8
 80029c0:	697a      	ldr	r2, [r7, #20]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a22      	ldr	r2, [pc, #136]	; (8002a54 <TIM_OC3_SetConfig+0xe4>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d003      	beq.n	80029d6 <TIM_OC3_SetConfig+0x66>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a21      	ldr	r2, [pc, #132]	; (8002a58 <TIM_OC3_SetConfig+0xe8>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d10d      	bne.n	80029f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80029dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	021b      	lsls	r3, r3, #8
 80029e4:	697a      	ldr	r2, [r7, #20]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a17      	ldr	r2, [pc, #92]	; (8002a54 <TIM_OC3_SetConfig+0xe4>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d003      	beq.n	8002a02 <TIM_OC3_SetConfig+0x92>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a16      	ldr	r2, [pc, #88]	; (8002a58 <TIM_OC3_SetConfig+0xe8>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d113      	bne.n	8002a2a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	011b      	lsls	r3, r3, #4
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	011b      	lsls	r3, r3, #4
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685a      	ldr	r2, [r3, #4]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	697a      	ldr	r2, [r7, #20]
 8002a42:	621a      	str	r2, [r3, #32]
}
 8002a44:	bf00      	nop
 8002a46:	371c      	adds	r7, #28
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr
 8002a50:	fffeff8f 	.word	0xfffeff8f
 8002a54:	40010000 	.word	0x40010000
 8002a58:	40010400 	.word	0x40010400

08002a5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b087      	sub	sp, #28
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	4b1e      	ldr	r3, [pc, #120]	; (8002b00 <TIM_OC4_SetConfig+0xa4>)
 8002a88:	4013      	ands	r3, r2
 8002a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	021b      	lsls	r3, r3, #8
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002aa6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	031b      	lsls	r3, r3, #12
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a13      	ldr	r2, [pc, #76]	; (8002b04 <TIM_OC4_SetConfig+0xa8>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d003      	beq.n	8002ac4 <TIM_OC4_SetConfig+0x68>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a12      	ldr	r2, [pc, #72]	; (8002b08 <TIM_OC4_SetConfig+0xac>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d109      	bne.n	8002ad8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002aca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	695b      	ldr	r3, [r3, #20]
 8002ad0:	019b      	lsls	r3, r3, #6
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	68fa      	ldr	r2, [r7, #12]
 8002ae2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	621a      	str	r2, [r3, #32]
}
 8002af2:	bf00      	nop
 8002af4:	371c      	adds	r7, #28
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	feff8fff 	.word	0xfeff8fff
 8002b04:	40010000 	.word	0x40010000
 8002b08:	40010400 	.word	0x40010400

08002b0c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b087      	sub	sp, #28
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	4b1b      	ldr	r3, [pc, #108]	; (8002ba4 <TIM_OC5_SetConfig+0x98>)
 8002b38:	4013      	ands	r3, r2
 8002b3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002b4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	041b      	lsls	r3, r3, #16
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a12      	ldr	r2, [pc, #72]	; (8002ba8 <TIM_OC5_SetConfig+0x9c>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d003      	beq.n	8002b6a <TIM_OC5_SetConfig+0x5e>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a11      	ldr	r2, [pc, #68]	; (8002bac <TIM_OC5_SetConfig+0xa0>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d109      	bne.n	8002b7e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b70:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	021b      	lsls	r3, r3, #8
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	697a      	ldr	r2, [r7, #20]
 8002b82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	621a      	str	r2, [r3, #32]
}
 8002b98:	bf00      	nop
 8002b9a:	371c      	adds	r7, #28
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	fffeff8f 	.word	0xfffeff8f
 8002ba8:	40010000 	.word	0x40010000
 8002bac:	40010400 	.word	0x40010400

08002bb0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b087      	sub	sp, #28
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	4b1c      	ldr	r3, [pc, #112]	; (8002c4c <TIM_OC6_SetConfig+0x9c>)
 8002bdc:	4013      	ands	r3, r2
 8002bde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	021b      	lsls	r3, r3, #8
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002bf2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	051b      	lsls	r3, r3, #20
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a13      	ldr	r2, [pc, #76]	; (8002c50 <TIM_OC6_SetConfig+0xa0>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d003      	beq.n	8002c10 <TIM_OC6_SetConfig+0x60>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a12      	ldr	r2, [pc, #72]	; (8002c54 <TIM_OC6_SetConfig+0xa4>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d109      	bne.n	8002c24 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c16:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	029b      	lsls	r3, r3, #10
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	697a      	ldr	r2, [r7, #20]
 8002c28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	621a      	str	r2, [r3, #32]
}
 8002c3e:	bf00      	nop
 8002c40:	371c      	adds	r7, #28
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	feff8fff 	.word	0xfeff8fff
 8002c50:	40010000 	.word	0x40010000
 8002c54:	40010400 	.word	0x40010400

08002c58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b087      	sub	sp, #28
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	f023 0201 	bic.w	r2, r3, #1
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	011b      	lsls	r3, r3, #4
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	f023 030a 	bic.w	r3, r3, #10
 8002c94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c96:	697a      	ldr	r2, [r7, #20]
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	621a      	str	r2, [r3, #32]
}
 8002caa:	bf00      	nop
 8002cac:	371c      	adds	r7, #28
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr

08002cb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b087      	sub	sp, #28
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	60f8      	str	r0, [r7, #12]
 8002cbe:	60b9      	str	r1, [r7, #8]
 8002cc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	f023 0210 	bic.w	r2, r3, #16
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ce0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	031b      	lsls	r3, r3, #12
 8002ce6:	697a      	ldr	r2, [r7, #20]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002cf2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	011b      	lsls	r3, r3, #4
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	621a      	str	r2, [r3, #32]
}
 8002d0a:	bf00      	nop
 8002d0c:	371c      	adds	r7, #28
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b085      	sub	sp, #20
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
 8002d1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	f043 0307 	orr.w	r3, r3, #7
 8002d38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	609a      	str	r2, [r3, #8]
}
 8002d40:	bf00      	nop
 8002d42:	3714      	adds	r7, #20
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b087      	sub	sp, #28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
 8002d58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	021a      	lsls	r2, r3, #8
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	609a      	str	r2, [r3, #8]
}
 8002d80:	bf00      	nop
 8002d82:	371c      	adds	r7, #28
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b087      	sub	sp, #28
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	f003 031f 	and.w	r3, r3, #31
 8002d9e:	2201      	movs	r2, #1
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6a1a      	ldr	r2, [r3, #32]
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	43db      	mvns	r3, r3
 8002dae:	401a      	ands	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6a1a      	ldr	r2, [r3, #32]
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	f003 031f 	and.w	r3, r3, #31
 8002dbe:	6879      	ldr	r1, [r7, #4]
 8002dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	621a      	str	r2, [r3, #32]
}
 8002dca:	bf00      	nop
 8002dcc:	371c      	adds	r7, #28
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
	...

08002dd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d101      	bne.n	8002df0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002dec:	2302      	movs	r3, #2
 8002dee:	e045      	b.n	8002e7c <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a1c      	ldr	r2, [pc, #112]	; (8002e88 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d004      	beq.n	8002e24 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a1b      	ldr	r2, [pc, #108]	; (8002e8c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d108      	bne.n	8002e36 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002e2a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e3c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e4e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	68ba      	ldr	r2, [r7, #8]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68ba      	ldr	r2, [r7, #8]
 8002e68:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3714      	adds	r7, #20
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	40010000 	.word	0x40010000
 8002e8c:	40010400 	.word	0x40010400

08002e90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e040      	b.n	8002f60 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d106      	bne.n	8002ef4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f003 fe7a 	bl	8006be8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2224      	movs	r2, #36	; 0x24
 8002ef8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 0201 	bic.w	r2, r2, #1
 8002f08:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f8be 	bl	800308c <UART_SetConfig>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d101      	bne.n	8002f1a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e022      	b.n	8002f60 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d002      	beq.n	8002f28 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 fb56 	bl	80035d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689a      	ldr	r2, [r3, #8]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f46:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f042 0201 	orr.w	r2, r2, #1
 8002f56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 fbdd 	bl	8003718 <UART_CheckIdleState>
 8002f5e:	4603      	mov	r3, r0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b08a      	sub	sp, #40	; 0x28
 8002f6c:	af02      	add	r7, sp, #8
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	603b      	str	r3, [r7, #0]
 8002f74:	4613      	mov	r3, r2
 8002f76:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f7c:	2b20      	cmp	r3, #32
 8002f7e:	d17f      	bne.n	8003080 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d002      	beq.n	8002f8c <HAL_UART_Transmit+0x24>
 8002f86:	88fb      	ldrh	r3, [r7, #6]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d101      	bne.n	8002f90 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e078      	b.n	8003082 <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d101      	bne.n	8002f9e <HAL_UART_Transmit+0x36>
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	e071      	b.n	8003082 <HAL_UART_Transmit+0x11a>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2221      	movs	r2, #33	; 0x21
 8002fb0:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002fb2:	f7fd fb1f 	bl	80005f4 <HAL_GetTick>
 8002fb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	88fa      	ldrh	r2, [r7, #6]
 8002fbc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	88fa      	ldrh	r2, [r7, #6]
 8002fc4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fd0:	d108      	bne.n	8002fe4 <HAL_UART_Transmit+0x7c>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d104      	bne.n	8002fe4 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	61bb      	str	r3, [r7, #24]
 8002fe2:	e003      	b.n	8002fec <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002fec:	e02c      	b.n	8003048 <HAL_UART_Transmit+0xe0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	2180      	movs	r1, #128	; 0x80
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f000 fbbc 	bl	8003776 <UART_WaitOnFlagUntilTimeout>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <HAL_UART_Transmit+0xa0>
      {
        return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e03c      	b.n	8003082 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10b      	bne.n	8003026 <HAL_UART_Transmit+0xbe>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	881b      	ldrh	r3, [r3, #0]
 8003012:	461a      	mov	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800301c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	3302      	adds	r3, #2
 8003022:	61bb      	str	r3, [r7, #24]
 8003024:	e007      	b.n	8003036 <HAL_UART_Transmit+0xce>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	781a      	ldrb	r2, [r3, #0]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	3301      	adds	r3, #1
 8003034:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800303c:	b29b      	uxth	r3, r3
 800303e:	3b01      	subs	r3, #1
 8003040:	b29a      	uxth	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800304e:	b29b      	uxth	r3, r3
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1cc      	bne.n	8002fee <HAL_UART_Transmit+0x86>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	9300      	str	r3, [sp, #0]
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	2200      	movs	r2, #0
 800305c:	2140      	movs	r1, #64	; 0x40
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 fb89 	bl	8003776 <UART_WaitOnFlagUntilTimeout>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <HAL_UART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e009      	b.n	8003082 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2220      	movs	r2, #32
 8003072:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 800307c:	2300      	movs	r3, #0
 800307e:	e000      	b.n	8003082 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8003080:	2302      	movs	r3, #2
  }
}
 8003082:	4618      	mov	r0, r3
 8003084:	3720      	adds	r7, #32
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
	...

0800308c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b088      	sub	sp, #32
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003094:	2300      	movs	r3, #0
 8003096:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003098:	2300      	movs	r3, #0
 800309a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	431a      	orrs	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	431a      	orrs	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	69db      	ldr	r3, [r3, #28]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	4bb1      	ldr	r3, [pc, #708]	; (8003380 <UART_SetConfig+0x2f4>)
 80030bc:	4013      	ands	r3, r2
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	6812      	ldr	r2, [r2, #0]
 80030c2:	6939      	ldr	r1, [r7, #16]
 80030c4:	430b      	orrs	r3, r1
 80030c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68da      	ldr	r2, [r3, #12]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	430a      	orrs	r2, r1
 80030dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	430a      	orrs	r2, r1
 8003100:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a9f      	ldr	r2, [pc, #636]	; (8003384 <UART_SetConfig+0x2f8>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d121      	bne.n	8003150 <UART_SetConfig+0xc4>
 800310c:	4b9e      	ldr	r3, [pc, #632]	; (8003388 <UART_SetConfig+0x2fc>)
 800310e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003112:	f003 0303 	and.w	r3, r3, #3
 8003116:	2b03      	cmp	r3, #3
 8003118:	d816      	bhi.n	8003148 <UART_SetConfig+0xbc>
 800311a:	a201      	add	r2, pc, #4	; (adr r2, 8003120 <UART_SetConfig+0x94>)
 800311c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003120:	08003131 	.word	0x08003131
 8003124:	0800313d 	.word	0x0800313d
 8003128:	08003137 	.word	0x08003137
 800312c:	08003143 	.word	0x08003143
 8003130:	2301      	movs	r3, #1
 8003132:	77fb      	strb	r3, [r7, #31]
 8003134:	e151      	b.n	80033da <UART_SetConfig+0x34e>
 8003136:	2302      	movs	r3, #2
 8003138:	77fb      	strb	r3, [r7, #31]
 800313a:	e14e      	b.n	80033da <UART_SetConfig+0x34e>
 800313c:	2304      	movs	r3, #4
 800313e:	77fb      	strb	r3, [r7, #31]
 8003140:	e14b      	b.n	80033da <UART_SetConfig+0x34e>
 8003142:	2308      	movs	r3, #8
 8003144:	77fb      	strb	r3, [r7, #31]
 8003146:	e148      	b.n	80033da <UART_SetConfig+0x34e>
 8003148:	2310      	movs	r3, #16
 800314a:	77fb      	strb	r3, [r7, #31]
 800314c:	bf00      	nop
 800314e:	e144      	b.n	80033da <UART_SetConfig+0x34e>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a8d      	ldr	r2, [pc, #564]	; (800338c <UART_SetConfig+0x300>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d134      	bne.n	80031c4 <UART_SetConfig+0x138>
 800315a:	4b8b      	ldr	r3, [pc, #556]	; (8003388 <UART_SetConfig+0x2fc>)
 800315c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003160:	f003 030c 	and.w	r3, r3, #12
 8003164:	2b0c      	cmp	r3, #12
 8003166:	d829      	bhi.n	80031bc <UART_SetConfig+0x130>
 8003168:	a201      	add	r2, pc, #4	; (adr r2, 8003170 <UART_SetConfig+0xe4>)
 800316a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800316e:	bf00      	nop
 8003170:	080031a5 	.word	0x080031a5
 8003174:	080031bd 	.word	0x080031bd
 8003178:	080031bd 	.word	0x080031bd
 800317c:	080031bd 	.word	0x080031bd
 8003180:	080031b1 	.word	0x080031b1
 8003184:	080031bd 	.word	0x080031bd
 8003188:	080031bd 	.word	0x080031bd
 800318c:	080031bd 	.word	0x080031bd
 8003190:	080031ab 	.word	0x080031ab
 8003194:	080031bd 	.word	0x080031bd
 8003198:	080031bd 	.word	0x080031bd
 800319c:	080031bd 	.word	0x080031bd
 80031a0:	080031b7 	.word	0x080031b7
 80031a4:	2300      	movs	r3, #0
 80031a6:	77fb      	strb	r3, [r7, #31]
 80031a8:	e117      	b.n	80033da <UART_SetConfig+0x34e>
 80031aa:	2302      	movs	r3, #2
 80031ac:	77fb      	strb	r3, [r7, #31]
 80031ae:	e114      	b.n	80033da <UART_SetConfig+0x34e>
 80031b0:	2304      	movs	r3, #4
 80031b2:	77fb      	strb	r3, [r7, #31]
 80031b4:	e111      	b.n	80033da <UART_SetConfig+0x34e>
 80031b6:	2308      	movs	r3, #8
 80031b8:	77fb      	strb	r3, [r7, #31]
 80031ba:	e10e      	b.n	80033da <UART_SetConfig+0x34e>
 80031bc:	2310      	movs	r3, #16
 80031be:	77fb      	strb	r3, [r7, #31]
 80031c0:	bf00      	nop
 80031c2:	e10a      	b.n	80033da <UART_SetConfig+0x34e>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a71      	ldr	r2, [pc, #452]	; (8003390 <UART_SetConfig+0x304>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d120      	bne.n	8003210 <UART_SetConfig+0x184>
 80031ce:	4b6e      	ldr	r3, [pc, #440]	; (8003388 <UART_SetConfig+0x2fc>)
 80031d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80031d8:	2b10      	cmp	r3, #16
 80031da:	d00f      	beq.n	80031fc <UART_SetConfig+0x170>
 80031dc:	2b10      	cmp	r3, #16
 80031de:	d802      	bhi.n	80031e6 <UART_SetConfig+0x15a>
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d005      	beq.n	80031f0 <UART_SetConfig+0x164>
 80031e4:	e010      	b.n	8003208 <UART_SetConfig+0x17c>
 80031e6:	2b20      	cmp	r3, #32
 80031e8:	d005      	beq.n	80031f6 <UART_SetConfig+0x16a>
 80031ea:	2b30      	cmp	r3, #48	; 0x30
 80031ec:	d009      	beq.n	8003202 <UART_SetConfig+0x176>
 80031ee:	e00b      	b.n	8003208 <UART_SetConfig+0x17c>
 80031f0:	2300      	movs	r3, #0
 80031f2:	77fb      	strb	r3, [r7, #31]
 80031f4:	e0f1      	b.n	80033da <UART_SetConfig+0x34e>
 80031f6:	2302      	movs	r3, #2
 80031f8:	77fb      	strb	r3, [r7, #31]
 80031fa:	e0ee      	b.n	80033da <UART_SetConfig+0x34e>
 80031fc:	2304      	movs	r3, #4
 80031fe:	77fb      	strb	r3, [r7, #31]
 8003200:	e0eb      	b.n	80033da <UART_SetConfig+0x34e>
 8003202:	2308      	movs	r3, #8
 8003204:	77fb      	strb	r3, [r7, #31]
 8003206:	e0e8      	b.n	80033da <UART_SetConfig+0x34e>
 8003208:	2310      	movs	r3, #16
 800320a:	77fb      	strb	r3, [r7, #31]
 800320c:	bf00      	nop
 800320e:	e0e4      	b.n	80033da <UART_SetConfig+0x34e>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a5f      	ldr	r2, [pc, #380]	; (8003394 <UART_SetConfig+0x308>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d120      	bne.n	800325c <UART_SetConfig+0x1d0>
 800321a:	4b5b      	ldr	r3, [pc, #364]	; (8003388 <UART_SetConfig+0x2fc>)
 800321c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003220:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003224:	2b40      	cmp	r3, #64	; 0x40
 8003226:	d00f      	beq.n	8003248 <UART_SetConfig+0x1bc>
 8003228:	2b40      	cmp	r3, #64	; 0x40
 800322a:	d802      	bhi.n	8003232 <UART_SetConfig+0x1a6>
 800322c:	2b00      	cmp	r3, #0
 800322e:	d005      	beq.n	800323c <UART_SetConfig+0x1b0>
 8003230:	e010      	b.n	8003254 <UART_SetConfig+0x1c8>
 8003232:	2b80      	cmp	r3, #128	; 0x80
 8003234:	d005      	beq.n	8003242 <UART_SetConfig+0x1b6>
 8003236:	2bc0      	cmp	r3, #192	; 0xc0
 8003238:	d009      	beq.n	800324e <UART_SetConfig+0x1c2>
 800323a:	e00b      	b.n	8003254 <UART_SetConfig+0x1c8>
 800323c:	2300      	movs	r3, #0
 800323e:	77fb      	strb	r3, [r7, #31]
 8003240:	e0cb      	b.n	80033da <UART_SetConfig+0x34e>
 8003242:	2302      	movs	r3, #2
 8003244:	77fb      	strb	r3, [r7, #31]
 8003246:	e0c8      	b.n	80033da <UART_SetConfig+0x34e>
 8003248:	2304      	movs	r3, #4
 800324a:	77fb      	strb	r3, [r7, #31]
 800324c:	e0c5      	b.n	80033da <UART_SetConfig+0x34e>
 800324e:	2308      	movs	r3, #8
 8003250:	77fb      	strb	r3, [r7, #31]
 8003252:	e0c2      	b.n	80033da <UART_SetConfig+0x34e>
 8003254:	2310      	movs	r3, #16
 8003256:	77fb      	strb	r3, [r7, #31]
 8003258:	bf00      	nop
 800325a:	e0be      	b.n	80033da <UART_SetConfig+0x34e>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a4d      	ldr	r2, [pc, #308]	; (8003398 <UART_SetConfig+0x30c>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d124      	bne.n	80032b0 <UART_SetConfig+0x224>
 8003266:	4b48      	ldr	r3, [pc, #288]	; (8003388 <UART_SetConfig+0x2fc>)
 8003268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003270:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003274:	d012      	beq.n	800329c <UART_SetConfig+0x210>
 8003276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800327a:	d802      	bhi.n	8003282 <UART_SetConfig+0x1f6>
 800327c:	2b00      	cmp	r3, #0
 800327e:	d007      	beq.n	8003290 <UART_SetConfig+0x204>
 8003280:	e012      	b.n	80032a8 <UART_SetConfig+0x21c>
 8003282:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003286:	d006      	beq.n	8003296 <UART_SetConfig+0x20a>
 8003288:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800328c:	d009      	beq.n	80032a2 <UART_SetConfig+0x216>
 800328e:	e00b      	b.n	80032a8 <UART_SetConfig+0x21c>
 8003290:	2300      	movs	r3, #0
 8003292:	77fb      	strb	r3, [r7, #31]
 8003294:	e0a1      	b.n	80033da <UART_SetConfig+0x34e>
 8003296:	2302      	movs	r3, #2
 8003298:	77fb      	strb	r3, [r7, #31]
 800329a:	e09e      	b.n	80033da <UART_SetConfig+0x34e>
 800329c:	2304      	movs	r3, #4
 800329e:	77fb      	strb	r3, [r7, #31]
 80032a0:	e09b      	b.n	80033da <UART_SetConfig+0x34e>
 80032a2:	2308      	movs	r3, #8
 80032a4:	77fb      	strb	r3, [r7, #31]
 80032a6:	e098      	b.n	80033da <UART_SetConfig+0x34e>
 80032a8:	2310      	movs	r3, #16
 80032aa:	77fb      	strb	r3, [r7, #31]
 80032ac:	bf00      	nop
 80032ae:	e094      	b.n	80033da <UART_SetConfig+0x34e>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a39      	ldr	r2, [pc, #228]	; (800339c <UART_SetConfig+0x310>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d124      	bne.n	8003304 <UART_SetConfig+0x278>
 80032ba:	4b33      	ldr	r3, [pc, #204]	; (8003388 <UART_SetConfig+0x2fc>)
 80032bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80032c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032c8:	d012      	beq.n	80032f0 <UART_SetConfig+0x264>
 80032ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ce:	d802      	bhi.n	80032d6 <UART_SetConfig+0x24a>
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d007      	beq.n	80032e4 <UART_SetConfig+0x258>
 80032d4:	e012      	b.n	80032fc <UART_SetConfig+0x270>
 80032d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032da:	d006      	beq.n	80032ea <UART_SetConfig+0x25e>
 80032dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032e0:	d009      	beq.n	80032f6 <UART_SetConfig+0x26a>
 80032e2:	e00b      	b.n	80032fc <UART_SetConfig+0x270>
 80032e4:	2301      	movs	r3, #1
 80032e6:	77fb      	strb	r3, [r7, #31]
 80032e8:	e077      	b.n	80033da <UART_SetConfig+0x34e>
 80032ea:	2302      	movs	r3, #2
 80032ec:	77fb      	strb	r3, [r7, #31]
 80032ee:	e074      	b.n	80033da <UART_SetConfig+0x34e>
 80032f0:	2304      	movs	r3, #4
 80032f2:	77fb      	strb	r3, [r7, #31]
 80032f4:	e071      	b.n	80033da <UART_SetConfig+0x34e>
 80032f6:	2308      	movs	r3, #8
 80032f8:	77fb      	strb	r3, [r7, #31]
 80032fa:	e06e      	b.n	80033da <UART_SetConfig+0x34e>
 80032fc:	2310      	movs	r3, #16
 80032fe:	77fb      	strb	r3, [r7, #31]
 8003300:	bf00      	nop
 8003302:	e06a      	b.n	80033da <UART_SetConfig+0x34e>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a25      	ldr	r2, [pc, #148]	; (80033a0 <UART_SetConfig+0x314>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d124      	bne.n	8003358 <UART_SetConfig+0x2cc>
 800330e:	4b1e      	ldr	r3, [pc, #120]	; (8003388 <UART_SetConfig+0x2fc>)
 8003310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003314:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003318:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800331c:	d012      	beq.n	8003344 <UART_SetConfig+0x2b8>
 800331e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003322:	d802      	bhi.n	800332a <UART_SetConfig+0x29e>
 8003324:	2b00      	cmp	r3, #0
 8003326:	d007      	beq.n	8003338 <UART_SetConfig+0x2ac>
 8003328:	e012      	b.n	8003350 <UART_SetConfig+0x2c4>
 800332a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800332e:	d006      	beq.n	800333e <UART_SetConfig+0x2b2>
 8003330:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003334:	d009      	beq.n	800334a <UART_SetConfig+0x2be>
 8003336:	e00b      	b.n	8003350 <UART_SetConfig+0x2c4>
 8003338:	2300      	movs	r3, #0
 800333a:	77fb      	strb	r3, [r7, #31]
 800333c:	e04d      	b.n	80033da <UART_SetConfig+0x34e>
 800333e:	2302      	movs	r3, #2
 8003340:	77fb      	strb	r3, [r7, #31]
 8003342:	e04a      	b.n	80033da <UART_SetConfig+0x34e>
 8003344:	2304      	movs	r3, #4
 8003346:	77fb      	strb	r3, [r7, #31]
 8003348:	e047      	b.n	80033da <UART_SetConfig+0x34e>
 800334a:	2308      	movs	r3, #8
 800334c:	77fb      	strb	r3, [r7, #31]
 800334e:	e044      	b.n	80033da <UART_SetConfig+0x34e>
 8003350:	2310      	movs	r3, #16
 8003352:	77fb      	strb	r3, [r7, #31]
 8003354:	bf00      	nop
 8003356:	e040      	b.n	80033da <UART_SetConfig+0x34e>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a11      	ldr	r2, [pc, #68]	; (80033a4 <UART_SetConfig+0x318>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d139      	bne.n	80033d6 <UART_SetConfig+0x34a>
 8003362:	4b09      	ldr	r3, [pc, #36]	; (8003388 <UART_SetConfig+0x2fc>)
 8003364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003368:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800336c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003370:	d027      	beq.n	80033c2 <UART_SetConfig+0x336>
 8003372:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003376:	d817      	bhi.n	80033a8 <UART_SetConfig+0x31c>
 8003378:	2b00      	cmp	r3, #0
 800337a:	d01c      	beq.n	80033b6 <UART_SetConfig+0x32a>
 800337c:	e027      	b.n	80033ce <UART_SetConfig+0x342>
 800337e:	bf00      	nop
 8003380:	efff69f3 	.word	0xefff69f3
 8003384:	40011000 	.word	0x40011000
 8003388:	40023800 	.word	0x40023800
 800338c:	40004400 	.word	0x40004400
 8003390:	40004800 	.word	0x40004800
 8003394:	40004c00 	.word	0x40004c00
 8003398:	40005000 	.word	0x40005000
 800339c:	40011400 	.word	0x40011400
 80033a0:	40007800 	.word	0x40007800
 80033a4:	40007c00 	.word	0x40007c00
 80033a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033ac:	d006      	beq.n	80033bc <UART_SetConfig+0x330>
 80033ae:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80033b2:	d009      	beq.n	80033c8 <UART_SetConfig+0x33c>
 80033b4:	e00b      	b.n	80033ce <UART_SetConfig+0x342>
 80033b6:	2300      	movs	r3, #0
 80033b8:	77fb      	strb	r3, [r7, #31]
 80033ba:	e00e      	b.n	80033da <UART_SetConfig+0x34e>
 80033bc:	2302      	movs	r3, #2
 80033be:	77fb      	strb	r3, [r7, #31]
 80033c0:	e00b      	b.n	80033da <UART_SetConfig+0x34e>
 80033c2:	2304      	movs	r3, #4
 80033c4:	77fb      	strb	r3, [r7, #31]
 80033c6:	e008      	b.n	80033da <UART_SetConfig+0x34e>
 80033c8:	2308      	movs	r3, #8
 80033ca:	77fb      	strb	r3, [r7, #31]
 80033cc:	e005      	b.n	80033da <UART_SetConfig+0x34e>
 80033ce:	2310      	movs	r3, #16
 80033d0:	77fb      	strb	r3, [r7, #31]
 80033d2:	bf00      	nop
 80033d4:	e001      	b.n	80033da <UART_SetConfig+0x34e>
 80033d6:	2310      	movs	r3, #16
 80033d8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	69db      	ldr	r3, [r3, #28]
 80033de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033e2:	d17c      	bne.n	80034de <UART_SetConfig+0x452>
  {
    switch (clocksource)
 80033e4:	7ffb      	ldrb	r3, [r7, #31]
 80033e6:	2b08      	cmp	r3, #8
 80033e8:	d859      	bhi.n	800349e <UART_SetConfig+0x412>
 80033ea:	a201      	add	r2, pc, #4	; (adr r2, 80033f0 <UART_SetConfig+0x364>)
 80033ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f0:	08003415 	.word	0x08003415
 80033f4:	08003433 	.word	0x08003433
 80033f8:	08003451 	.word	0x08003451
 80033fc:	0800349f 	.word	0x0800349f
 8003400:	08003469 	.word	0x08003469
 8003404:	0800349f 	.word	0x0800349f
 8003408:	0800349f 	.word	0x0800349f
 800340c:	0800349f 	.word	0x0800349f
 8003410:	08003487 	.word	0x08003487
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003414:	f7fe f81c 	bl	8001450 <HAL_RCC_GetPCLK1Freq>
 8003418:	4603      	mov	r3, r0
 800341a:	005a      	lsls	r2, r3, #1
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	085b      	lsrs	r3, r3, #1
 8003422:	441a      	add	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	fbb2 f3f3 	udiv	r3, r2, r3
 800342c:	b29b      	uxth	r3, r3
 800342e:	61bb      	str	r3, [r7, #24]
        break;
 8003430:	e038      	b.n	80034a4 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003432:	f7fe f821 	bl	8001478 <HAL_RCC_GetPCLK2Freq>
 8003436:	4603      	mov	r3, r0
 8003438:	005a      	lsls	r2, r3, #1
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	085b      	lsrs	r3, r3, #1
 8003440:	441a      	add	r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	fbb2 f3f3 	udiv	r3, r2, r3
 800344a:	b29b      	uxth	r3, r3
 800344c:	61bb      	str	r3, [r7, #24]
        break;
 800344e:	e029      	b.n	80034a4 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	085a      	lsrs	r2, r3, #1
 8003456:	4b5d      	ldr	r3, [pc, #372]	; (80035cc <UART_SetConfig+0x540>)
 8003458:	4413      	add	r3, r2
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	6852      	ldr	r2, [r2, #4]
 800345e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003462:	b29b      	uxth	r3, r3
 8003464:	61bb      	str	r3, [r7, #24]
        break;
 8003466:	e01d      	b.n	80034a4 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003468:	f7fd ff34 	bl	80012d4 <HAL_RCC_GetSysClockFreq>
 800346c:	4603      	mov	r3, r0
 800346e:	005a      	lsls	r2, r3, #1
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	085b      	lsrs	r3, r3, #1
 8003476:	441a      	add	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003480:	b29b      	uxth	r3, r3
 8003482:	61bb      	str	r3, [r7, #24]
        break;
 8003484:	e00e      	b.n	80034a4 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	085b      	lsrs	r3, r3, #1
 800348c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	fbb2 f3f3 	udiv	r3, r2, r3
 8003498:	b29b      	uxth	r3, r3
 800349a:	61bb      	str	r3, [r7, #24]
        break;
 800349c:	e002      	b.n	80034a4 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	75fb      	strb	r3, [r7, #23]
        break;
 80034a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	2b0f      	cmp	r3, #15
 80034a8:	d916      	bls.n	80034d8 <UART_SetConfig+0x44c>
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034b0:	d212      	bcs.n	80034d8 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	f023 030f 	bic.w	r3, r3, #15
 80034ba:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	085b      	lsrs	r3, r3, #1
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	89fb      	ldrh	r3, [r7, #14]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	89fa      	ldrh	r2, [r7, #14]
 80034d4:	60da      	str	r2, [r3, #12]
 80034d6:	e06e      	b.n	80035b6 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	75fb      	strb	r3, [r7, #23]
 80034dc:	e06b      	b.n	80035b6 <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 80034de:	7ffb      	ldrb	r3, [r7, #31]
 80034e0:	2b08      	cmp	r3, #8
 80034e2:	d857      	bhi.n	8003594 <UART_SetConfig+0x508>
 80034e4:	a201      	add	r2, pc, #4	; (adr r2, 80034ec <UART_SetConfig+0x460>)
 80034e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ea:	bf00      	nop
 80034ec:	08003511 	.word	0x08003511
 80034f0:	0800352d 	.word	0x0800352d
 80034f4:	08003549 	.word	0x08003549
 80034f8:	08003595 	.word	0x08003595
 80034fc:	08003561 	.word	0x08003561
 8003500:	08003595 	.word	0x08003595
 8003504:	08003595 	.word	0x08003595
 8003508:	08003595 	.word	0x08003595
 800350c:	0800357d 	.word	0x0800357d
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003510:	f7fd ff9e 	bl	8001450 <HAL_RCC_GetPCLK1Freq>
 8003514:	4602      	mov	r2, r0
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	085b      	lsrs	r3, r3, #1
 800351c:	441a      	add	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	fbb2 f3f3 	udiv	r3, r2, r3
 8003526:	b29b      	uxth	r3, r3
 8003528:	61bb      	str	r3, [r7, #24]
        break;
 800352a:	e036      	b.n	800359a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800352c:	f7fd ffa4 	bl	8001478 <HAL_RCC_GetPCLK2Freq>
 8003530:	4602      	mov	r2, r0
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	085b      	lsrs	r3, r3, #1
 8003538:	441a      	add	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003542:	b29b      	uxth	r3, r3
 8003544:	61bb      	str	r3, [r7, #24]
        break;
 8003546:	e028      	b.n	800359a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	085a      	lsrs	r2, r3, #1
 800354e:	4b20      	ldr	r3, [pc, #128]	; (80035d0 <UART_SetConfig+0x544>)
 8003550:	4413      	add	r3, r2
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	6852      	ldr	r2, [r2, #4]
 8003556:	fbb3 f3f2 	udiv	r3, r3, r2
 800355a:	b29b      	uxth	r3, r3
 800355c:	61bb      	str	r3, [r7, #24]
        break;
 800355e:	e01c      	b.n	800359a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003560:	f7fd feb8 	bl	80012d4 <HAL_RCC_GetSysClockFreq>
 8003564:	4602      	mov	r2, r0
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	085b      	lsrs	r3, r3, #1
 800356c:	441a      	add	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	fbb2 f3f3 	udiv	r3, r2, r3
 8003576:	b29b      	uxth	r3, r3
 8003578:	61bb      	str	r3, [r7, #24]
        break;
 800357a:	e00e      	b.n	800359a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	085b      	lsrs	r3, r3, #1
 8003582:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	fbb2 f3f3 	udiv	r3, r2, r3
 800358e:	b29b      	uxth	r3, r3
 8003590:	61bb      	str	r3, [r7, #24]
        break;
 8003592:	e002      	b.n	800359a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	75fb      	strb	r3, [r7, #23]
        break;
 8003598:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	2b0f      	cmp	r3, #15
 800359e:	d908      	bls.n	80035b2 <UART_SetConfig+0x526>
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035a6:	d204      	bcs.n	80035b2 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	60da      	str	r2, [r3, #12]
 80035b0:	e001      	b.n	80035b6 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80035c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3720      	adds	r7, #32
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	01e84800 	.word	0x01e84800
 80035d0:	00f42400 	.word	0x00f42400

080035d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00a      	beq.n	80035fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	430a      	orrs	r2, r1
 80035fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00a      	beq.n	8003620 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	430a      	orrs	r2, r1
 800361e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003624:	f003 0304 	and.w	r3, r3, #4
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00a      	beq.n	8003642 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	430a      	orrs	r2, r1
 8003640:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003646:	f003 0308 	and.w	r3, r3, #8
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00a      	beq.n	8003664 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	430a      	orrs	r2, r1
 8003662:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003668:	f003 0310 	and.w	r3, r3, #16
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00a      	beq.n	8003686 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	430a      	orrs	r2, r1
 8003684:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368a:	f003 0320 	and.w	r3, r3, #32
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00a      	beq.n	80036a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d01a      	beq.n	80036ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036d2:	d10a      	bne.n	80036ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00a      	beq.n	800370c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	430a      	orrs	r2, r1
 800370a:	605a      	str	r2, [r3, #4]
  }
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af02      	add	r7, sp, #8
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003726:	f7fc ff65 	bl	80005f4 <HAL_GetTick>
 800372a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0308 	and.w	r3, r3, #8
 8003736:	2b08      	cmp	r3, #8
 8003738:	d10e      	bne.n	8003758 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800373a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f000 f814 	bl	8003776 <UART_WaitOnFlagUntilTimeout>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e00a      	b.n	800376e <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2220      	movs	r2, #32
 800375c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2220      	movs	r2, #32
 8003762:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b084      	sub	sp, #16
 800377a:	af00      	add	r7, sp, #0
 800377c:	60f8      	str	r0, [r7, #12]
 800377e:	60b9      	str	r1, [r7, #8]
 8003780:	603b      	str	r3, [r7, #0]
 8003782:	4613      	mov	r3, r2
 8003784:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003786:	e02a      	b.n	80037de <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800378e:	d026      	beq.n	80037de <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003790:	f7fc ff30 	bl	80005f4 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	69ba      	ldr	r2, [r7, #24]
 800379c:	429a      	cmp	r2, r3
 800379e:	d302      	bcc.n	80037a6 <UART_WaitOnFlagUntilTimeout+0x30>
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d11b      	bne.n	80037de <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80037b4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 0201 	bic.w	r2, r2, #1
 80037c4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2220      	movs	r2, #32
 80037ca:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2220      	movs	r2, #32
 80037d0:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e00f      	b.n	80037fe <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	69da      	ldr	r2, [r3, #28]
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	4013      	ands	r3, r2
 80037e8:	68ba      	ldr	r2, [r7, #8]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	bf0c      	ite	eq
 80037ee:	2301      	moveq	r3, #1
 80037f0:	2300      	movne	r3, #0
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	461a      	mov	r2, r3
 80037f6:	79fb      	ldrb	r3, [r7, #7]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d0c5      	beq.n	8003788 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003806:	b480      	push	{r7}
 8003808:	b085      	sub	sp, #20
 800380a:	af00      	add	r7, sp, #0
 800380c:	4603      	mov	r3, r0
 800380e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003810:	2300      	movs	r3, #0
 8003812:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003814:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003818:	2b84      	cmp	r3, #132	; 0x84
 800381a:	d005      	beq.n	8003828 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800381c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	4413      	add	r3, r2
 8003824:	3303      	adds	r3, #3
 8003826:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003828:	68fb      	ldr	r3, [r7, #12]
}
 800382a:	4618      	mov	r0, r3
 800382c:	3714      	adds	r7, #20
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr

08003836 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003836:	b480      	push	{r7}
 8003838:	b083      	sub	sp, #12
 800383a:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800383c:	f3ef 8305 	mrs	r3, IPSR
 8003840:	607b      	str	r3, [r7, #4]
  return(result);
 8003842:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003844:	2b00      	cmp	r3, #0
 8003846:	bf14      	ite	ne
 8003848:	2301      	movne	r3, #1
 800384a:	2300      	moveq	r3, #0
 800384c:	b2db      	uxtb	r3, r3
}
 800384e:	4618      	mov	r0, r3
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800385e:	f001 fcc3 	bl	80051e8 <vTaskStartScheduler>
  
  return osOK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	bd80      	pop	{r7, pc}

08003868 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800386a:	b087      	sub	sp, #28
 800386c:	af02      	add	r7, sp, #8
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685c      	ldr	r4, [r3, #4]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800387e:	b29e      	uxth	r6, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003886:	4618      	mov	r0, r3
 8003888:	f7ff ffbd 	bl	8003806 <makeFreeRtosPriority>
 800388c:	4602      	mov	r2, r0
 800388e:	f107 030c 	add.w	r3, r7, #12
 8003892:	9301      	str	r3, [sp, #4]
 8003894:	9200      	str	r2, [sp, #0]
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	4632      	mov	r2, r6
 800389a:	4629      	mov	r1, r5
 800389c:	4620      	mov	r0, r4
 800389e:	f001 fb42 	bl	8004f26 <xTaskCreate>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d001      	beq.n	80038ac <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80038a8:	2300      	movs	r3, #0
 80038aa:	e000      	b.n	80038ae <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80038ac:	68fb      	ldr	r3, [r7, #12]
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3714      	adds	r7, #20
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080038b6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b084      	sub	sp, #16
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d001      	beq.n	80038cc <osDelay+0x16>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	e000      	b.n	80038ce <osDelay+0x18>
 80038cc:	2301      	movs	r3, #1
 80038ce:	4618      	mov	r0, r3
 80038d0:	f001 fc54 	bl	800517c <vTaskDelay>
  
  return osOK;
 80038d4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
	...

080038e0 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af02      	add	r7, sp, #8
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80038ea:	2300      	movs	r3, #0
 80038ec:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 80038ee:	2300      	movs	r3, #0
 80038f0:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 80038f2:	f7ff ffa0 	bl	8003836 <inHandlerMode>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d01c      	beq.n	8003936 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 80038fc:	6839      	ldr	r1, [r7, #0]
 80038fe:	f107 0208 	add.w	r2, r7, #8
 8003902:	f107 030c 	add.w	r3, r7, #12
 8003906:	9300      	str	r3, [sp, #0]
 8003908:	4613      	mov	r3, r2
 800390a:	2201      	movs	r2, #1
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f002 fb25 	bl	8005f5c <xTaskGenericNotifyFromISR>
 8003912:	4603      	mov	r3, r0
 8003914:	2b01      	cmp	r3, #1
 8003916:	d002      	beq.n	800391e <osSignalSet+0x3e>
      return 0x80000000;
 8003918:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800391c:	e019      	b.n	8003952 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d015      	beq.n	8003950 <osSignalSet+0x70>
 8003924:	4b0d      	ldr	r3, [pc, #52]	; (800395c <osSignalSet+0x7c>)
 8003926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800392a:	601a      	str	r2, [r3, #0]
 800392c:	f3bf 8f4f 	dsb	sy
 8003930:	f3bf 8f6f 	isb	sy
 8003934:	e00c      	b.n	8003950 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8003936:	6839      	ldr	r1, [r7, #0]
 8003938:	f107 0308 	add.w	r3, r7, #8
 800393c:	2201      	movs	r2, #1
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f002 fa68 	bl	8005e14 <xTaskGenericNotify>
 8003944:	4603      	mov	r3, r0
 8003946:	2b01      	cmp	r3, #1
 8003948:	d002      	beq.n	8003950 <osSignalSet+0x70>
    return 0x80000000;
 800394a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800394e:	e000      	b.n	8003952 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8003950:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8003952:	4618      	mov	r0, r3
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	e000ed04 	.word	0xe000ed04

08003960 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8003960:	b590      	push	{r4, r7, lr}
 8003962:	b089      	sub	sp, #36	; 0x24
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 800396c:	2300      	movs	r3, #0
 800396e:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8003970:	2300      	movs	r3, #0
 8003972:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800397a:	d103      	bne.n	8003984 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 800397c:	f04f 33ff 	mov.w	r3, #4294967295
 8003980:	61fb      	str	r3, [r7, #28]
 8003982:	e009      	b.n	8003998 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d006      	beq.n	8003998 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d101      	bne.n	8003998 <osSignalWait+0x38>
      ticks = 1;
 8003994:	2301      	movs	r3, #1
 8003996:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8003998:	f7ff ff4d 	bl	8003836 <inHandlerMode>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d002      	beq.n	80039a8 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 80039a2:	2382      	movs	r3, #130	; 0x82
 80039a4:	613b      	str	r3, [r7, #16]
 80039a6:	e01b      	b.n	80039e0 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 80039a8:	68b9      	ldr	r1, [r7, #8]
 80039aa:	f107 0310 	add.w	r3, r7, #16
 80039ae:	1d1a      	adds	r2, r3, #4
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	2000      	movs	r0, #0
 80039b4:	f002 f9d4 	bl	8005d60 <xTaskNotifyWait>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d008      	beq.n	80039d0 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d102      	bne.n	80039ca <osSignalWait+0x6a>
 80039c4:	2300      	movs	r3, #0
 80039c6:	613b      	str	r3, [r7, #16]
 80039c8:	e00a      	b.n	80039e0 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 80039ca:	2340      	movs	r3, #64	; 0x40
 80039cc:	613b      	str	r3, [r7, #16]
 80039ce:	e007      	b.n	80039e0 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	da02      	bge.n	80039dc <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 80039d6:	2386      	movs	r3, #134	; 0x86
 80039d8:	613b      	str	r3, [r7, #16]
 80039da:	e001      	b.n	80039e0 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 80039dc:	2308      	movs	r3, #8
 80039de:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	461c      	mov	r4, r3
 80039e4:	f107 0310 	add.w	r3, r7, #16
 80039e8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80039ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	3724      	adds	r7, #36	; 0x24
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd90      	pop	{r4, r7, pc}

080039f8 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8003a00:	2001      	movs	r0, #1
 8003a02:	f000 fe29 	bl	8004658 <xQueueCreateMutex>
 8003a06:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3708      	adds	r7, #8
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d101      	bne.n	8003a28 <osMutexWait+0x18>
    return osErrorParameter;
 8003a24:	2380      	movs	r3, #128	; 0x80
 8003a26:	e03a      	b.n	8003a9e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a32:	d103      	bne.n	8003a3c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8003a34:	f04f 33ff 	mov.w	r3, #4294967295
 8003a38:	60fb      	str	r3, [r7, #12]
 8003a3a:	e009      	b.n	8003a50 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d006      	beq.n	8003a50 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d101      	bne.n	8003a50 <osMutexWait+0x40>
      ticks = 1;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8003a50:	f7ff fef1 	bl	8003836 <inHandlerMode>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d017      	beq.n	8003a8a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8003a5a:	f107 0308 	add.w	r3, r7, #8
 8003a5e:	461a      	mov	r2, r3
 8003a60:	2100      	movs	r1, #0
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f001 f8b4 	bl	8004bd0 <xQueueReceiveFromISR>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d001      	beq.n	8003a72 <osMutexWait+0x62>
      return osErrorOS;
 8003a6e:	23ff      	movs	r3, #255	; 0xff
 8003a70:	e015      	b.n	8003a9e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d011      	beq.n	8003a9c <osMutexWait+0x8c>
 8003a78:	4b0b      	ldr	r3, [pc, #44]	; (8003aa8 <osMutexWait+0x98>)
 8003a7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a7e:	601a      	str	r2, [r3, #0]
 8003a80:	f3bf 8f4f 	dsb	sy
 8003a84:	f3bf 8f6f 	isb	sy
 8003a88:	e008      	b.n	8003a9c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8003a8a:	68f9      	ldr	r1, [r7, #12]
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 ff8f 	bl	80049b0 <xQueueSemaphoreTake>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d001      	beq.n	8003a9c <osMutexWait+0x8c>
    return osErrorOS;
 8003a98:	23ff      	movs	r3, #255	; 0xff
 8003a9a:	e000      	b.n	8003a9e <osMutexWait+0x8e>
  }
  
  return osOK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	e000ed04 	.word	0xe000ed04

08003aac <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8003abc:	f7ff febb 	bl	8003836 <inHandlerMode>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d016      	beq.n	8003af4 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8003ac6:	f107 0308 	add.w	r3, r7, #8
 8003aca:	4619      	mov	r1, r3
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 fedd 	bl	800488c <xQueueGiveFromISR>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d001      	beq.n	8003adc <osMutexRelease+0x30>
      return osErrorOS;
 8003ad8:	23ff      	movs	r3, #255	; 0xff
 8003ada:	e017      	b.n	8003b0c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d013      	beq.n	8003b0a <osMutexRelease+0x5e>
 8003ae2:	4b0c      	ldr	r3, [pc, #48]	; (8003b14 <osMutexRelease+0x68>)
 8003ae4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ae8:	601a      	str	r2, [r3, #0]
 8003aea:	f3bf 8f4f 	dsb	sy
 8003aee:	f3bf 8f6f 	isb	sy
 8003af2:	e00a      	b.n	8003b0a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8003af4:	2300      	movs	r3, #0
 8003af6:	2200      	movs	r2, #0
 8003af8:	2100      	movs	r1, #0
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 fdc4 	bl	8004688 <xQueueGenericSend>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d001      	beq.n	8003b0a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8003b06:	23ff      	movs	r3, #255	; 0xff
 8003b08:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	e000ed04 	.word	0xe000ed04

08003b18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b08a      	sub	sp, #40	; 0x28
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003b20:	2300      	movs	r3, #0
 8003b22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003b24:	f001 fbaa 	bl	800527c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003b28:	4b5a      	ldr	r3, [pc, #360]	; (8003c94 <pvPortMalloc+0x17c>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003b30:	f000 f916 	bl	8003d60 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003b34:	4b58      	ldr	r3, [pc, #352]	; (8003c98 <pvPortMalloc+0x180>)
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f040 8090 	bne.w	8003c62 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d01e      	beq.n	8003b86 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003b48:	2208      	movs	r2, #8
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f003 0307 	and.w	r3, r3, #7
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d015      	beq.n	8003b86 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f023 0307 	bic.w	r3, r3, #7
 8003b60:	3308      	adds	r3, #8
 8003b62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f003 0307 	and.w	r3, r3, #7
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00b      	beq.n	8003b86 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b72:	b672      	cpsid	i
 8003b74:	f383 8811 	msr	BASEPRI, r3
 8003b78:	f3bf 8f6f 	isb	sy
 8003b7c:	f3bf 8f4f 	dsb	sy
 8003b80:	b662      	cpsie	i
 8003b82:	617b      	str	r3, [r7, #20]
 8003b84:	e7fe      	b.n	8003b84 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d06a      	beq.n	8003c62 <pvPortMalloc+0x14a>
 8003b8c:	4b43      	ldr	r3, [pc, #268]	; (8003c9c <pvPortMalloc+0x184>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d865      	bhi.n	8003c62 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003b96:	4b42      	ldr	r3, [pc, #264]	; (8003ca0 <pvPortMalloc+0x188>)
 8003b98:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003b9a:	4b41      	ldr	r3, [pc, #260]	; (8003ca0 <pvPortMalloc+0x188>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003ba0:	e004      	b.n	8003bac <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d903      	bls.n	8003bbe <pvPortMalloc+0xa6>
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1f1      	bne.n	8003ba2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003bbe:	4b35      	ldr	r3, [pc, #212]	; (8003c94 <pvPortMalloc+0x17c>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d04c      	beq.n	8003c62 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003bc8:	6a3b      	ldr	r3, [r7, #32]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2208      	movs	r2, #8
 8003bce:	4413      	add	r3, r2
 8003bd0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	6a3b      	ldr	r3, [r7, #32]
 8003bd8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bdc:	685a      	ldr	r2, [r3, #4]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	1ad2      	subs	r2, r2, r3
 8003be2:	2308      	movs	r3, #8
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d920      	bls.n	8003c2c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4413      	add	r3, r2
 8003bf0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	f003 0307 	and.w	r3, r3, #7
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00b      	beq.n	8003c14 <pvPortMalloc+0xfc>
 8003bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c00:	b672      	cpsid	i
 8003c02:	f383 8811 	msr	BASEPRI, r3
 8003c06:	f3bf 8f6f 	isb	sy
 8003c0a:	f3bf 8f4f 	dsb	sy
 8003c0e:	b662      	cpsie	i
 8003c10:	613b      	str	r3, [r7, #16]
 8003c12:	e7fe      	b.n	8003c12 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	1ad2      	subs	r2, r2, r3
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003c26:	69b8      	ldr	r0, [r7, #24]
 8003c28:	f000 f8fc 	bl	8003e24 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003c2c:	4b1b      	ldr	r3, [pc, #108]	; (8003c9c <pvPortMalloc+0x184>)
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	4a19      	ldr	r2, [pc, #100]	; (8003c9c <pvPortMalloc+0x184>)
 8003c38:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003c3a:	4b18      	ldr	r3, [pc, #96]	; (8003c9c <pvPortMalloc+0x184>)
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	4b19      	ldr	r3, [pc, #100]	; (8003ca4 <pvPortMalloc+0x18c>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d203      	bcs.n	8003c4e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003c46:	4b15      	ldr	r3, [pc, #84]	; (8003c9c <pvPortMalloc+0x184>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a16      	ldr	r2, [pc, #88]	; (8003ca4 <pvPortMalloc+0x18c>)
 8003c4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	4b11      	ldr	r3, [pc, #68]	; (8003c98 <pvPortMalloc+0x180>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	431a      	orrs	r2, r3
 8003c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5e:	2200      	movs	r2, #0
 8003c60:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003c62:	f001 fb19 	bl	8005298 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00b      	beq.n	8003c88 <pvPortMalloc+0x170>
 8003c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c74:	b672      	cpsid	i
 8003c76:	f383 8811 	msr	BASEPRI, r3
 8003c7a:	f3bf 8f6f 	isb	sy
 8003c7e:	f3bf 8f4f 	dsb	sy
 8003c82:	b662      	cpsie	i
 8003c84:	60fb      	str	r3, [r7, #12]
 8003c86:	e7fe      	b.n	8003c86 <pvPortMalloc+0x16e>
	return pvReturn;
 8003c88:	69fb      	ldr	r3, [r7, #28]
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3728      	adds	r7, #40	; 0x28
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	20003c94 	.word	0x20003c94
 8003c98:	20003ca0 	.word	0x20003ca0
 8003c9c:	20003c98 	.word	0x20003c98
 8003ca0:	20003c8c 	.word	0x20003c8c
 8003ca4:	20003c9c 	.word	0x20003c9c

08003ca8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d04a      	beq.n	8003d50 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003cba:	2308      	movs	r3, #8
 8003cbc:	425b      	negs	r3, r3
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	685a      	ldr	r2, [r3, #4]
 8003ccc:	4b22      	ldr	r3, [pc, #136]	; (8003d58 <vPortFree+0xb0>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10b      	bne.n	8003cee <vPortFree+0x46>
 8003cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cda:	b672      	cpsid	i
 8003cdc:	f383 8811 	msr	BASEPRI, r3
 8003ce0:	f3bf 8f6f 	isb	sy
 8003ce4:	f3bf 8f4f 	dsb	sy
 8003ce8:	b662      	cpsie	i
 8003cea:	60fb      	str	r3, [r7, #12]
 8003cec:	e7fe      	b.n	8003cec <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00b      	beq.n	8003d0e <vPortFree+0x66>
 8003cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cfa:	b672      	cpsid	i
 8003cfc:	f383 8811 	msr	BASEPRI, r3
 8003d00:	f3bf 8f6f 	isb	sy
 8003d04:	f3bf 8f4f 	dsb	sy
 8003d08:	b662      	cpsie	i
 8003d0a:	60bb      	str	r3, [r7, #8]
 8003d0c:	e7fe      	b.n	8003d0c <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	685a      	ldr	r2, [r3, #4]
 8003d12:	4b11      	ldr	r3, [pc, #68]	; (8003d58 <vPortFree+0xb0>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4013      	ands	r3, r2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d019      	beq.n	8003d50 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d115      	bne.n	8003d50 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	685a      	ldr	r2, [r3, #4]
 8003d28:	4b0b      	ldr	r3, [pc, #44]	; (8003d58 <vPortFree+0xb0>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	43db      	mvns	r3, r3
 8003d2e:	401a      	ands	r2, r3
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003d34:	f001 faa2 	bl	800527c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	685a      	ldr	r2, [r3, #4]
 8003d3c:	4b07      	ldr	r3, [pc, #28]	; (8003d5c <vPortFree+0xb4>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4413      	add	r3, r2
 8003d42:	4a06      	ldr	r2, [pc, #24]	; (8003d5c <vPortFree+0xb4>)
 8003d44:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003d46:	6938      	ldr	r0, [r7, #16]
 8003d48:	f000 f86c 	bl	8003e24 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003d4c:	f001 faa4 	bl	8005298 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003d50:	bf00      	nop
 8003d52:	3718      	adds	r7, #24
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	20003ca0 	.word	0x20003ca0
 8003d5c:	20003c98 	.word	0x20003c98

08003d60 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003d66:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003d6a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003d6c:	4b27      	ldr	r3, [pc, #156]	; (8003e0c <prvHeapInit+0xac>)
 8003d6e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f003 0307 	and.w	r3, r3, #7
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00c      	beq.n	8003d94 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	3307      	adds	r3, #7
 8003d7e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f023 0307 	bic.w	r3, r3, #7
 8003d86:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003d88:	68ba      	ldr	r2, [r7, #8]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	4a1f      	ldr	r2, [pc, #124]	; (8003e0c <prvHeapInit+0xac>)
 8003d90:	4413      	add	r3, r2
 8003d92:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003d98:	4a1d      	ldr	r2, [pc, #116]	; (8003e10 <prvHeapInit+0xb0>)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003d9e:	4b1c      	ldr	r3, [pc, #112]	; (8003e10 <prvHeapInit+0xb0>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	68ba      	ldr	r2, [r7, #8]
 8003da8:	4413      	add	r3, r2
 8003daa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003dac:	2208      	movs	r2, #8
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	1a9b      	subs	r3, r3, r2
 8003db2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f023 0307 	bic.w	r3, r3, #7
 8003dba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	4a15      	ldr	r2, [pc, #84]	; (8003e14 <prvHeapInit+0xb4>)
 8003dc0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003dc2:	4b14      	ldr	r3, [pc, #80]	; (8003e14 <prvHeapInit+0xb4>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003dca:	4b12      	ldr	r3, [pc, #72]	; (8003e14 <prvHeapInit+0xb4>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	1ad2      	subs	r2, r2, r3
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003de0:	4b0c      	ldr	r3, [pc, #48]	; (8003e14 <prvHeapInit+0xb4>)
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	4a0a      	ldr	r2, [pc, #40]	; (8003e18 <prvHeapInit+0xb8>)
 8003dee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	4a09      	ldr	r2, [pc, #36]	; (8003e1c <prvHeapInit+0xbc>)
 8003df6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003df8:	4b09      	ldr	r3, [pc, #36]	; (8003e20 <prvHeapInit+0xc0>)
 8003dfa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003dfe:	601a      	str	r2, [r3, #0]
}
 8003e00:	bf00      	nop
 8003e02:	3714      	adds	r7, #20
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr
 8003e0c:	2000008c 	.word	0x2000008c
 8003e10:	20003c8c 	.word	0x20003c8c
 8003e14:	20003c94 	.word	0x20003c94
 8003e18:	20003c9c 	.word	0x20003c9c
 8003e1c:	20003c98 	.word	0x20003c98
 8003e20:	20003ca0 	.word	0x20003ca0

08003e24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003e2c:	4b28      	ldr	r3, [pc, #160]	; (8003ed0 <prvInsertBlockIntoFreeList+0xac>)
 8003e2e:	60fb      	str	r3, [r7, #12]
 8003e30:	e002      	b.n	8003e38 <prvInsertBlockIntoFreeList+0x14>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	60fb      	str	r3, [r7, #12]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d8f7      	bhi.n	8003e32 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	68ba      	ldr	r2, [r7, #8]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d108      	bne.n	8003e66 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	441a      	add	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	441a      	add	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d118      	bne.n	8003eac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	4b15      	ldr	r3, [pc, #84]	; (8003ed4 <prvInsertBlockIntoFreeList+0xb0>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d00d      	beq.n	8003ea2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685a      	ldr	r2, [r3, #4]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	441a      	add	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	e008      	b.n	8003eb4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003ea2:	4b0c      	ldr	r3, [pc, #48]	; (8003ed4 <prvInsertBlockIntoFreeList+0xb0>)
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	e003      	b.n	8003eb4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d002      	beq.n	8003ec2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ec2:	bf00      	nop
 8003ec4:	3714      	adds	r7, #20
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	20003c8c 	.word	0x20003c8c
 8003ed4:	20003c94 	.word	0x20003c94

08003ed8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f103 0208 	add.w	r2, r3, #8
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f04f 32ff 	mov.w	r2, #4294967295
 8003ef0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f103 0208 	add.w	r2, r3, #8
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f103 0208 	add.w	r2, r3, #8
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003f26:	bf00      	nop
 8003f28:	370c      	adds	r7, #12
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr

08003f32 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f32:	b480      	push	{r7}
 8003f34:	b085      	sub	sp, #20
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
 8003f3a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	689a      	ldr	r2, [r3, #8]
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	683a      	ldr	r2, [r7, #0]
 8003f5c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	1c5a      	adds	r2, r3, #1
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	601a      	str	r2, [r3, #0]
}
 8003f6e:	bf00      	nop
 8003f70:	3714      	adds	r7, #20
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr

08003f7a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b085      	sub	sp, #20
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
 8003f82:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f90:	d103      	bne.n	8003f9a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	e00c      	b.n	8003fb4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	3308      	adds	r3, #8
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	e002      	b.n	8003fa8 <vListInsert+0x2e>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	60fb      	str	r3, [r7, #12]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68ba      	ldr	r2, [r7, #8]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d2f6      	bcs.n	8003fa2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	685a      	ldr	r2, [r3, #4]
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	683a      	ldr	r2, [r7, #0]
 8003fce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	1c5a      	adds	r2, r3, #1
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	601a      	str	r2, [r3, #0]
}
 8003fe0:	bf00      	nop
 8003fe2:	3714      	adds	r7, #20
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	6892      	ldr	r2, [r2, #8]
 8004002:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	6852      	ldr	r2, [r2, #4]
 800400c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	429a      	cmp	r2, r3
 8004016:	d103      	bne.n	8004020 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	1e5a      	subs	r2, r3, #1
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
}
 8004034:	4618      	mov	r0, r3
 8004036:	3714      	adds	r7, #20
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	3b04      	subs	r3, #4
 8004050:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004058:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	3b04      	subs	r3, #4
 800405e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	f023 0201 	bic.w	r2, r3, #1
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	3b04      	subs	r3, #4
 800406e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004070:	4a0c      	ldr	r2, [pc, #48]	; (80040a4 <pxPortInitialiseStack+0x64>)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	3b14      	subs	r3, #20
 800407a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	3b04      	subs	r3, #4
 8004086:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f06f 0202 	mvn.w	r2, #2
 800408e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	3b20      	subs	r3, #32
 8004094:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004096:	68fb      	ldr	r3, [r7, #12]
}
 8004098:	4618      	mov	r0, r3
 800409a:	3714      	adds	r7, #20
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr
 80040a4:	080040a9 	.word	0x080040a9

080040a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80040ae:	2300      	movs	r3, #0
 80040b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80040b2:	4b13      	ldr	r3, [pc, #76]	; (8004100 <prvTaskExitError+0x58>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ba:	d00b      	beq.n	80040d4 <prvTaskExitError+0x2c>
 80040bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c0:	b672      	cpsid	i
 80040c2:	f383 8811 	msr	BASEPRI, r3
 80040c6:	f3bf 8f6f 	isb	sy
 80040ca:	f3bf 8f4f 	dsb	sy
 80040ce:	b662      	cpsie	i
 80040d0:	60fb      	str	r3, [r7, #12]
 80040d2:	e7fe      	b.n	80040d2 <prvTaskExitError+0x2a>
 80040d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d8:	b672      	cpsid	i
 80040da:	f383 8811 	msr	BASEPRI, r3
 80040de:	f3bf 8f6f 	isb	sy
 80040e2:	f3bf 8f4f 	dsb	sy
 80040e6:	b662      	cpsie	i
 80040e8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80040ea:	bf00      	nop
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d0fc      	beq.n	80040ec <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80040f2:	bf00      	nop
 80040f4:	3714      	adds	r7, #20
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	20000004 	.word	0x20000004
	...

08004110 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004110:	4b07      	ldr	r3, [pc, #28]	; (8004130 <pxCurrentTCBConst2>)
 8004112:	6819      	ldr	r1, [r3, #0]
 8004114:	6808      	ldr	r0, [r1, #0]
 8004116:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800411a:	f380 8809 	msr	PSP, r0
 800411e:	f3bf 8f6f 	isb	sy
 8004122:	f04f 0000 	mov.w	r0, #0
 8004126:	f380 8811 	msr	BASEPRI, r0
 800412a:	4770      	bx	lr
 800412c:	f3af 8000 	nop.w

08004130 <pxCurrentTCBConst2>:
 8004130:	20003cac 	.word	0x20003cac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004134:	bf00      	nop
 8004136:	bf00      	nop

08004138 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004138:	4808      	ldr	r0, [pc, #32]	; (800415c <prvPortStartFirstTask+0x24>)
 800413a:	6800      	ldr	r0, [r0, #0]
 800413c:	6800      	ldr	r0, [r0, #0]
 800413e:	f380 8808 	msr	MSP, r0
 8004142:	f04f 0000 	mov.w	r0, #0
 8004146:	f380 8814 	msr	CONTROL, r0
 800414a:	b662      	cpsie	i
 800414c:	b661      	cpsie	f
 800414e:	f3bf 8f4f 	dsb	sy
 8004152:	f3bf 8f6f 	isb	sy
 8004156:	df00      	svc	0
 8004158:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800415a:	bf00      	nop
 800415c:	e000ed08 	.word	0xe000ed08

08004160 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004166:	4b36      	ldr	r3, [pc, #216]	; (8004240 <xPortStartScheduler+0xe0>)
 8004168:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	b2db      	uxtb	r3, r3
 8004170:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	22ff      	movs	r2, #255	; 0xff
 8004176:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	b2db      	uxtb	r3, r3
 800417e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004180:	78fb      	ldrb	r3, [r7, #3]
 8004182:	b2db      	uxtb	r3, r3
 8004184:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004188:	b2da      	uxtb	r2, r3
 800418a:	4b2e      	ldr	r3, [pc, #184]	; (8004244 <xPortStartScheduler+0xe4>)
 800418c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800418e:	4b2e      	ldr	r3, [pc, #184]	; (8004248 <xPortStartScheduler+0xe8>)
 8004190:	2207      	movs	r2, #7
 8004192:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004194:	e009      	b.n	80041aa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004196:	4b2c      	ldr	r3, [pc, #176]	; (8004248 <xPortStartScheduler+0xe8>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	3b01      	subs	r3, #1
 800419c:	4a2a      	ldr	r2, [pc, #168]	; (8004248 <xPortStartScheduler+0xe8>)
 800419e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80041a0:	78fb      	ldrb	r3, [r7, #3]
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	005b      	lsls	r3, r3, #1
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041aa:	78fb      	ldrb	r3, [r7, #3]
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b2:	2b80      	cmp	r3, #128	; 0x80
 80041b4:	d0ef      	beq.n	8004196 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80041b6:	4b24      	ldr	r3, [pc, #144]	; (8004248 <xPortStartScheduler+0xe8>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f1c3 0307 	rsb	r3, r3, #7
 80041be:	2b04      	cmp	r3, #4
 80041c0:	d00b      	beq.n	80041da <xPortStartScheduler+0x7a>
 80041c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c6:	b672      	cpsid	i
 80041c8:	f383 8811 	msr	BASEPRI, r3
 80041cc:	f3bf 8f6f 	isb	sy
 80041d0:	f3bf 8f4f 	dsb	sy
 80041d4:	b662      	cpsie	i
 80041d6:	60bb      	str	r3, [r7, #8]
 80041d8:	e7fe      	b.n	80041d8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80041da:	4b1b      	ldr	r3, [pc, #108]	; (8004248 <xPortStartScheduler+0xe8>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	021b      	lsls	r3, r3, #8
 80041e0:	4a19      	ldr	r2, [pc, #100]	; (8004248 <xPortStartScheduler+0xe8>)
 80041e2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80041e4:	4b18      	ldr	r3, [pc, #96]	; (8004248 <xPortStartScheduler+0xe8>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041ec:	4a16      	ldr	r2, [pc, #88]	; (8004248 <xPortStartScheduler+0xe8>)
 80041ee:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	b2da      	uxtb	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80041f8:	4b14      	ldr	r3, [pc, #80]	; (800424c <xPortStartScheduler+0xec>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a13      	ldr	r2, [pc, #76]	; (800424c <xPortStartScheduler+0xec>)
 80041fe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004202:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004204:	4b11      	ldr	r3, [pc, #68]	; (800424c <xPortStartScheduler+0xec>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a10      	ldr	r2, [pc, #64]	; (800424c <xPortStartScheduler+0xec>)
 800420a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800420e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004210:	f000 f8d4 	bl	80043bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004214:	4b0e      	ldr	r3, [pc, #56]	; (8004250 <xPortStartScheduler+0xf0>)
 8004216:	2200      	movs	r2, #0
 8004218:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800421a:	f000 f8f3 	bl	8004404 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800421e:	4b0d      	ldr	r3, [pc, #52]	; (8004254 <xPortStartScheduler+0xf4>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a0c      	ldr	r2, [pc, #48]	; (8004254 <xPortStartScheduler+0xf4>)
 8004224:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004228:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800422a:	f7ff ff85 	bl	8004138 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800422e:	f001 f98f 	bl	8005550 <vTaskSwitchContext>
	prvTaskExitError();
 8004232:	f7ff ff39 	bl	80040a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3710      	adds	r7, #16
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	e000e400 	.word	0xe000e400
 8004244:	20003ca4 	.word	0x20003ca4
 8004248:	20003ca8 	.word	0x20003ca8
 800424c:	e000ed20 	.word	0xe000ed20
 8004250:	20000004 	.word	0x20000004
 8004254:	e000ef34 	.word	0xe000ef34

08004258 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004262:	b672      	cpsid	i
 8004264:	f383 8811 	msr	BASEPRI, r3
 8004268:	f3bf 8f6f 	isb	sy
 800426c:	f3bf 8f4f 	dsb	sy
 8004270:	b662      	cpsie	i
 8004272:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004274:	4b0f      	ldr	r3, [pc, #60]	; (80042b4 <vPortEnterCritical+0x5c>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	3301      	adds	r3, #1
 800427a:	4a0e      	ldr	r2, [pc, #56]	; (80042b4 <vPortEnterCritical+0x5c>)
 800427c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800427e:	4b0d      	ldr	r3, [pc, #52]	; (80042b4 <vPortEnterCritical+0x5c>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d110      	bne.n	80042a8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004286:	4b0c      	ldr	r3, [pc, #48]	; (80042b8 <vPortEnterCritical+0x60>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	b2db      	uxtb	r3, r3
 800428c:	2b00      	cmp	r3, #0
 800428e:	d00b      	beq.n	80042a8 <vPortEnterCritical+0x50>
 8004290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004294:	b672      	cpsid	i
 8004296:	f383 8811 	msr	BASEPRI, r3
 800429a:	f3bf 8f6f 	isb	sy
 800429e:	f3bf 8f4f 	dsb	sy
 80042a2:	b662      	cpsie	i
 80042a4:	603b      	str	r3, [r7, #0]
 80042a6:	e7fe      	b.n	80042a6 <vPortEnterCritical+0x4e>
	}
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr
 80042b4:	20000004 	.word	0x20000004
 80042b8:	e000ed04 	.word	0xe000ed04

080042bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80042c2:	4b12      	ldr	r3, [pc, #72]	; (800430c <vPortExitCritical+0x50>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10b      	bne.n	80042e2 <vPortExitCritical+0x26>
 80042ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ce:	b672      	cpsid	i
 80042d0:	f383 8811 	msr	BASEPRI, r3
 80042d4:	f3bf 8f6f 	isb	sy
 80042d8:	f3bf 8f4f 	dsb	sy
 80042dc:	b662      	cpsie	i
 80042de:	607b      	str	r3, [r7, #4]
 80042e0:	e7fe      	b.n	80042e0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 80042e2:	4b0a      	ldr	r3, [pc, #40]	; (800430c <vPortExitCritical+0x50>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	3b01      	subs	r3, #1
 80042e8:	4a08      	ldr	r2, [pc, #32]	; (800430c <vPortExitCritical+0x50>)
 80042ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80042ec:	4b07      	ldr	r3, [pc, #28]	; (800430c <vPortExitCritical+0x50>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d104      	bne.n	80042fe <vPortExitCritical+0x42>
 80042f4:	2300      	movs	r3, #0
 80042f6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80042fe:	bf00      	nop
 8004300:	370c      	adds	r7, #12
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	20000004 	.word	0x20000004

08004310 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004310:	f3ef 8009 	mrs	r0, PSP
 8004314:	f3bf 8f6f 	isb	sy
 8004318:	4b15      	ldr	r3, [pc, #84]	; (8004370 <pxCurrentTCBConst>)
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	f01e 0f10 	tst.w	lr, #16
 8004320:	bf08      	it	eq
 8004322:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004326:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800432a:	6010      	str	r0, [r2, #0]
 800432c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004330:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004334:	b672      	cpsid	i
 8004336:	f380 8811 	msr	BASEPRI, r0
 800433a:	f3bf 8f4f 	dsb	sy
 800433e:	f3bf 8f6f 	isb	sy
 8004342:	b662      	cpsie	i
 8004344:	f001 f904 	bl	8005550 <vTaskSwitchContext>
 8004348:	f04f 0000 	mov.w	r0, #0
 800434c:	f380 8811 	msr	BASEPRI, r0
 8004350:	bc09      	pop	{r0, r3}
 8004352:	6819      	ldr	r1, [r3, #0]
 8004354:	6808      	ldr	r0, [r1, #0]
 8004356:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800435a:	f01e 0f10 	tst.w	lr, #16
 800435e:	bf08      	it	eq
 8004360:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004364:	f380 8809 	msr	PSP, r0
 8004368:	f3bf 8f6f 	isb	sy
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop

08004370 <pxCurrentTCBConst>:
 8004370:	20003cac 	.word	0x20003cac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004374:	bf00      	nop
 8004376:	bf00      	nop

08004378 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
	__asm volatile
 800437e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004382:	b672      	cpsid	i
 8004384:	f383 8811 	msr	BASEPRI, r3
 8004388:	f3bf 8f6f 	isb	sy
 800438c:	f3bf 8f4f 	dsb	sy
 8004390:	b662      	cpsie	i
 8004392:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004394:	f001 f81e 	bl	80053d4 <xTaskIncrementTick>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d003      	beq.n	80043a6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800439e:	4b06      	ldr	r3, [pc, #24]	; (80043b8 <SysTick_Handler+0x40>)
 80043a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043a4:	601a      	str	r2, [r3, #0]
 80043a6:	2300      	movs	r3, #0
 80043a8:	603b      	str	r3, [r7, #0]
	__asm volatile
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80043b0:	bf00      	nop
 80043b2:	3708      	adds	r7, #8
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	e000ed04 	.word	0xe000ed04

080043bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80043c0:	4b0b      	ldr	r3, [pc, #44]	; (80043f0 <vPortSetupTimerInterrupt+0x34>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80043c6:	4b0b      	ldr	r3, [pc, #44]	; (80043f4 <vPortSetupTimerInterrupt+0x38>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80043cc:	4b0a      	ldr	r3, [pc, #40]	; (80043f8 <vPortSetupTimerInterrupt+0x3c>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a0a      	ldr	r2, [pc, #40]	; (80043fc <vPortSetupTimerInterrupt+0x40>)
 80043d2:	fba2 2303 	umull	r2, r3, r2, r3
 80043d6:	099b      	lsrs	r3, r3, #6
 80043d8:	4a09      	ldr	r2, [pc, #36]	; (8004400 <vPortSetupTimerInterrupt+0x44>)
 80043da:	3b01      	subs	r3, #1
 80043dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80043de:	4b04      	ldr	r3, [pc, #16]	; (80043f0 <vPortSetupTimerInterrupt+0x34>)
 80043e0:	2207      	movs	r2, #7
 80043e2:	601a      	str	r2, [r3, #0]
}
 80043e4:	bf00      	nop
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	e000e010 	.word	0xe000e010
 80043f4:	e000e018 	.word	0xe000e018
 80043f8:	20000008 	.word	0x20000008
 80043fc:	10624dd3 	.word	0x10624dd3
 8004400:	e000e014 	.word	0xe000e014

08004404 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004404:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004414 <vPortEnableVFP+0x10>
 8004408:	6801      	ldr	r1, [r0, #0]
 800440a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800440e:	6001      	str	r1, [r0, #0]
 8004410:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004412:	bf00      	nop
 8004414:	e000ed88 	.word	0xe000ed88

08004418 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800441e:	f3ef 8305 	mrs	r3, IPSR
 8004422:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2b0f      	cmp	r3, #15
 8004428:	d915      	bls.n	8004456 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800442a:	4a18      	ldr	r2, [pc, #96]	; (800448c <vPortValidateInterruptPriority+0x74>)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	4413      	add	r3, r2
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004434:	4b16      	ldr	r3, [pc, #88]	; (8004490 <vPortValidateInterruptPriority+0x78>)
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	7afa      	ldrb	r2, [r7, #11]
 800443a:	429a      	cmp	r2, r3
 800443c:	d20b      	bcs.n	8004456 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800443e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004442:	b672      	cpsid	i
 8004444:	f383 8811 	msr	BASEPRI, r3
 8004448:	f3bf 8f6f 	isb	sy
 800444c:	f3bf 8f4f 	dsb	sy
 8004450:	b662      	cpsie	i
 8004452:	607b      	str	r3, [r7, #4]
 8004454:	e7fe      	b.n	8004454 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004456:	4b0f      	ldr	r3, [pc, #60]	; (8004494 <vPortValidateInterruptPriority+0x7c>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800445e:	4b0e      	ldr	r3, [pc, #56]	; (8004498 <vPortValidateInterruptPriority+0x80>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	429a      	cmp	r2, r3
 8004464:	d90b      	bls.n	800447e <vPortValidateInterruptPriority+0x66>
 8004466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800446a:	b672      	cpsid	i
 800446c:	f383 8811 	msr	BASEPRI, r3
 8004470:	f3bf 8f6f 	isb	sy
 8004474:	f3bf 8f4f 	dsb	sy
 8004478:	b662      	cpsie	i
 800447a:	603b      	str	r3, [r7, #0]
 800447c:	e7fe      	b.n	800447c <vPortValidateInterruptPriority+0x64>
	}
 800447e:	bf00      	nop
 8004480:	3714      	adds	r7, #20
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	e000e3f0 	.word	0xe000e3f0
 8004490:	20003ca4 	.word	0x20003ca4
 8004494:	e000ed0c 	.word	0xe000ed0c
 8004498:	20003ca8 	.word	0x20003ca8

0800449c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d10b      	bne.n	80044c8 <xQueueGenericReset+0x2c>
 80044b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b4:	b672      	cpsid	i
 80044b6:	f383 8811 	msr	BASEPRI, r3
 80044ba:	f3bf 8f6f 	isb	sy
 80044be:	f3bf 8f4f 	dsb	sy
 80044c2:	b662      	cpsie	i
 80044c4:	60bb      	str	r3, [r7, #8]
 80044c6:	e7fe      	b.n	80044c6 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 80044c8:	f7ff fec6 	bl	8004258 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d4:	68f9      	ldr	r1, [r7, #12]
 80044d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80044d8:	fb01 f303 	mul.w	r3, r1, r3
 80044dc:	441a      	add	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f8:	3b01      	subs	r3, #1
 80044fa:	68f9      	ldr	r1, [r7, #12]
 80044fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80044fe:	fb01 f303 	mul.w	r3, r1, r3
 8004502:	441a      	add	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	22ff      	movs	r2, #255	; 0xff
 800450c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	22ff      	movs	r2, #255	; 0xff
 8004514:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d114      	bne.n	8004548 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d01a      	beq.n	800455c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	3310      	adds	r3, #16
 800452a:	4618      	mov	r0, r3
 800452c:	f001 f892 	bl	8005654 <xTaskRemoveFromEventList>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d012      	beq.n	800455c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004536:	4b0d      	ldr	r3, [pc, #52]	; (800456c <xQueueGenericReset+0xd0>)
 8004538:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800453c:	601a      	str	r2, [r3, #0]
 800453e:	f3bf 8f4f 	dsb	sy
 8004542:	f3bf 8f6f 	isb	sy
 8004546:	e009      	b.n	800455c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	3310      	adds	r3, #16
 800454c:	4618      	mov	r0, r3
 800454e:	f7ff fcc3 	bl	8003ed8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	3324      	adds	r3, #36	; 0x24
 8004556:	4618      	mov	r0, r3
 8004558:	f7ff fcbe 	bl	8003ed8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800455c:	f7ff feae 	bl	80042bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004560:	2301      	movs	r3, #1
}
 8004562:	4618      	mov	r0, r3
 8004564:	3710      	adds	r7, #16
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	e000ed04 	.word	0xe000ed04

08004570 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004570:	b580      	push	{r7, lr}
 8004572:	b08a      	sub	sp, #40	; 0x28
 8004574:	af02      	add	r7, sp, #8
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	4613      	mov	r3, r2
 800457c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d10b      	bne.n	800459c <xQueueGenericCreate+0x2c>
 8004584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004588:	b672      	cpsid	i
 800458a:	f383 8811 	msr	BASEPRI, r3
 800458e:	f3bf 8f6f 	isb	sy
 8004592:	f3bf 8f4f 	dsb	sy
 8004596:	b662      	cpsie	i
 8004598:	613b      	str	r3, [r7, #16]
 800459a:	e7fe      	b.n	800459a <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d102      	bne.n	80045a8 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80045a2:	2300      	movs	r3, #0
 80045a4:	61fb      	str	r3, [r7, #28]
 80045a6:	e004      	b.n	80045b2 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	68ba      	ldr	r2, [r7, #8]
 80045ac:	fb02 f303 	mul.w	r3, r2, r3
 80045b0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	3348      	adds	r3, #72	; 0x48
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7ff faae 	bl	8003b18 <pvPortMalloc>
 80045bc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00b      	beq.n	80045dc <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	3348      	adds	r3, #72	; 0x48
 80045c8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80045ca:	79fa      	ldrb	r2, [r7, #7]
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	9300      	str	r3, [sp, #0]
 80045d0:	4613      	mov	r3, r2
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	68b9      	ldr	r1, [r7, #8]
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	f000 f805 	bl	80045e6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80045dc:	69bb      	ldr	r3, [r7, #24]
	}
 80045de:	4618      	mov	r0, r3
 80045e0:	3720      	adds	r7, #32
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b084      	sub	sp, #16
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	60f8      	str	r0, [r7, #12]
 80045ee:	60b9      	str	r1, [r7, #8]
 80045f0:	607a      	str	r2, [r7, #4]
 80045f2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d103      	bne.n	8004602 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	601a      	str	r2, [r3, #0]
 8004600:	e002      	b.n	8004608 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	68ba      	ldr	r2, [r7, #8]
 8004612:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004614:	2101      	movs	r1, #1
 8004616:	69b8      	ldr	r0, [r7, #24]
 8004618:	f7ff ff40 	bl	800449c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800461c:	bf00      	nop
 800461e:	3710      	adds	r7, #16
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00e      	beq.n	8004650 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004644:	2300      	movs	r3, #0
 8004646:	2200      	movs	r2, #0
 8004648:	2100      	movs	r1, #0
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f81c 	bl	8004688 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004650:	bf00      	nop
 8004652:	3708      	adds	r7, #8
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004658:	b580      	push	{r7, lr}
 800465a:	b086      	sub	sp, #24
 800465c:	af00      	add	r7, sp, #0
 800465e:	4603      	mov	r3, r0
 8004660:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004662:	2301      	movs	r3, #1
 8004664:	617b      	str	r3, [r7, #20]
 8004666:	2300      	movs	r3, #0
 8004668:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800466a:	79fb      	ldrb	r3, [r7, #7]
 800466c:	461a      	mov	r2, r3
 800466e:	6939      	ldr	r1, [r7, #16]
 8004670:	6978      	ldr	r0, [r7, #20]
 8004672:	f7ff ff7d 	bl	8004570 <xQueueGenericCreate>
 8004676:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f7ff ffd3 	bl	8004624 <prvInitialiseMutex>

		return pxNewQueue;
 800467e:	68fb      	ldr	r3, [r7, #12]
	}
 8004680:	4618      	mov	r0, r3
 8004682:	3718      	adds	r7, #24
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b08e      	sub	sp, #56	; 0x38
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
 8004694:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004696:	2300      	movs	r3, #0
 8004698:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800469e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d10b      	bne.n	80046bc <xQueueGenericSend+0x34>
 80046a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a8:	b672      	cpsid	i
 80046aa:	f383 8811 	msr	BASEPRI, r3
 80046ae:	f3bf 8f6f 	isb	sy
 80046b2:	f3bf 8f4f 	dsb	sy
 80046b6:	b662      	cpsie	i
 80046b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80046ba:	e7fe      	b.n	80046ba <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d103      	bne.n	80046ca <xQueueGenericSend+0x42>
 80046c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d101      	bne.n	80046ce <xQueueGenericSend+0x46>
 80046ca:	2301      	movs	r3, #1
 80046cc:	e000      	b.n	80046d0 <xQueueGenericSend+0x48>
 80046ce:	2300      	movs	r3, #0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d10b      	bne.n	80046ec <xQueueGenericSend+0x64>
 80046d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d8:	b672      	cpsid	i
 80046da:	f383 8811 	msr	BASEPRI, r3
 80046de:	f3bf 8f6f 	isb	sy
 80046e2:	f3bf 8f4f 	dsb	sy
 80046e6:	b662      	cpsie	i
 80046e8:	627b      	str	r3, [r7, #36]	; 0x24
 80046ea:	e7fe      	b.n	80046ea <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d103      	bne.n	80046fa <xQueueGenericSend+0x72>
 80046f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d101      	bne.n	80046fe <xQueueGenericSend+0x76>
 80046fa:	2301      	movs	r3, #1
 80046fc:	e000      	b.n	8004700 <xQueueGenericSend+0x78>
 80046fe:	2300      	movs	r3, #0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d10b      	bne.n	800471c <xQueueGenericSend+0x94>
 8004704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004708:	b672      	cpsid	i
 800470a:	f383 8811 	msr	BASEPRI, r3
 800470e:	f3bf 8f6f 	isb	sy
 8004712:	f3bf 8f4f 	dsb	sy
 8004716:	b662      	cpsie	i
 8004718:	623b      	str	r3, [r7, #32]
 800471a:	e7fe      	b.n	800471a <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800471c:	f001 f93e 	bl	800599c <xTaskGetSchedulerState>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d102      	bne.n	800472c <xQueueGenericSend+0xa4>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d101      	bne.n	8004730 <xQueueGenericSend+0xa8>
 800472c:	2301      	movs	r3, #1
 800472e:	e000      	b.n	8004732 <xQueueGenericSend+0xaa>
 8004730:	2300      	movs	r3, #0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10b      	bne.n	800474e <xQueueGenericSend+0xc6>
 8004736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473a:	b672      	cpsid	i
 800473c:	f383 8811 	msr	BASEPRI, r3
 8004740:	f3bf 8f6f 	isb	sy
 8004744:	f3bf 8f4f 	dsb	sy
 8004748:	b662      	cpsie	i
 800474a:	61fb      	str	r3, [r7, #28]
 800474c:	e7fe      	b.n	800474c <xQueueGenericSend+0xc4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800474e:	f7ff fd83 	bl	8004258 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004754:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800475a:	429a      	cmp	r2, r3
 800475c:	d302      	bcc.n	8004764 <xQueueGenericSend+0xdc>
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	2b02      	cmp	r3, #2
 8004762:	d129      	bne.n	80047b8 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004764:	683a      	ldr	r2, [r7, #0]
 8004766:	68b9      	ldr	r1, [r7, #8]
 8004768:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800476a:	f000 facc 	bl	8004d06 <prvCopyDataToQueue>
 800476e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004774:	2b00      	cmp	r3, #0
 8004776:	d010      	beq.n	800479a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477a:	3324      	adds	r3, #36	; 0x24
 800477c:	4618      	mov	r0, r3
 800477e:	f000 ff69 	bl	8005654 <xTaskRemoveFromEventList>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d013      	beq.n	80047b0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004788:	4b3f      	ldr	r3, [pc, #252]	; (8004888 <xQueueGenericSend+0x200>)
 800478a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800478e:	601a      	str	r2, [r3, #0]
 8004790:	f3bf 8f4f 	dsb	sy
 8004794:	f3bf 8f6f 	isb	sy
 8004798:	e00a      	b.n	80047b0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800479a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800479c:	2b00      	cmp	r3, #0
 800479e:	d007      	beq.n	80047b0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80047a0:	4b39      	ldr	r3, [pc, #228]	; (8004888 <xQueueGenericSend+0x200>)
 80047a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047a6:	601a      	str	r2, [r3, #0]
 80047a8:	f3bf 8f4f 	dsb	sy
 80047ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80047b0:	f7ff fd84 	bl	80042bc <vPortExitCritical>
				return pdPASS;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e063      	b.n	8004880 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d103      	bne.n	80047c6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80047be:	f7ff fd7d 	bl	80042bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80047c2:	2300      	movs	r3, #0
 80047c4:	e05c      	b.n	8004880 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80047c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d106      	bne.n	80047da <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80047cc:	f107 0314 	add.w	r3, r7, #20
 80047d0:	4618      	mov	r0, r3
 80047d2:	f000 ffa3 	bl	800571c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80047d6:	2301      	movs	r3, #1
 80047d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80047da:	f7ff fd6f 	bl	80042bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047de:	f000 fd4d 	bl	800527c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047e2:	f7ff fd39 	bl	8004258 <vPortEnterCritical>
 80047e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047ec:	b25b      	sxtb	r3, r3
 80047ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f2:	d103      	bne.n	80047fc <xQueueGenericSend+0x174>
 80047f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004802:	b25b      	sxtb	r3, r3
 8004804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004808:	d103      	bne.n	8004812 <xQueueGenericSend+0x18a>
 800480a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480c:	2200      	movs	r2, #0
 800480e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004812:	f7ff fd53 	bl	80042bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004816:	1d3a      	adds	r2, r7, #4
 8004818:	f107 0314 	add.w	r3, r7, #20
 800481c:	4611      	mov	r1, r2
 800481e:	4618      	mov	r0, r3
 8004820:	f000 ff92 	bl	8005748 <xTaskCheckForTimeOut>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d124      	bne.n	8004874 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800482a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800482c:	f000 fb63 	bl	8004ef6 <prvIsQueueFull>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d018      	beq.n	8004868 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004838:	3310      	adds	r3, #16
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	4611      	mov	r1, r2
 800483e:	4618      	mov	r0, r3
 8004840:	f000 fee2 	bl	8005608 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004844:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004846:	f000 faee 	bl	8004e26 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800484a:	f000 fd25 	bl	8005298 <xTaskResumeAll>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	f47f af7c 	bne.w	800474e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004856:	4b0c      	ldr	r3, [pc, #48]	; (8004888 <xQueueGenericSend+0x200>)
 8004858:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800485c:	601a      	str	r2, [r3, #0]
 800485e:	f3bf 8f4f 	dsb	sy
 8004862:	f3bf 8f6f 	isb	sy
 8004866:	e772      	b.n	800474e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004868:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800486a:	f000 fadc 	bl	8004e26 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800486e:	f000 fd13 	bl	8005298 <xTaskResumeAll>
 8004872:	e76c      	b.n	800474e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004874:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004876:	f000 fad6 	bl	8004e26 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800487a:	f000 fd0d 	bl	8005298 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800487e:	2300      	movs	r3, #0
		}
	}
}
 8004880:	4618      	mov	r0, r3
 8004882:	3738      	adds	r7, #56	; 0x38
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	e000ed04 	.word	0xe000ed04

0800488c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b08e      	sub	sp, #56	; 0x38
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800489a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489c:	2b00      	cmp	r3, #0
 800489e:	d10b      	bne.n	80048b8 <xQueueGiveFromISR+0x2c>
 80048a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a4:	b672      	cpsid	i
 80048a6:	f383 8811 	msr	BASEPRI, r3
 80048aa:	f3bf 8f6f 	isb	sy
 80048ae:	f3bf 8f4f 	dsb	sy
 80048b2:	b662      	cpsie	i
 80048b4:	623b      	str	r3, [r7, #32]
 80048b6:	e7fe      	b.n	80048b6 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80048b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d00b      	beq.n	80048d8 <xQueueGiveFromISR+0x4c>
 80048c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c4:	b672      	cpsid	i
 80048c6:	f383 8811 	msr	BASEPRI, r3
 80048ca:	f3bf 8f6f 	isb	sy
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	b662      	cpsie	i
 80048d4:	61fb      	str	r3, [r7, #28]
 80048d6:	e7fe      	b.n	80048d6 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80048d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d103      	bne.n	80048e8 <xQueueGiveFromISR+0x5c>
 80048e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d101      	bne.n	80048ec <xQueueGiveFromISR+0x60>
 80048e8:	2301      	movs	r3, #1
 80048ea:	e000      	b.n	80048ee <xQueueGiveFromISR+0x62>
 80048ec:	2300      	movs	r3, #0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10b      	bne.n	800490a <xQueueGiveFromISR+0x7e>
 80048f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f6:	b672      	cpsid	i
 80048f8:	f383 8811 	msr	BASEPRI, r3
 80048fc:	f3bf 8f6f 	isb	sy
 8004900:	f3bf 8f4f 	dsb	sy
 8004904:	b662      	cpsie	i
 8004906:	61bb      	str	r3, [r7, #24]
 8004908:	e7fe      	b.n	8004908 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800490a:	f7ff fd85 	bl	8004418 <vPortValidateInterruptPriority>
	__asm volatile
 800490e:	f3ef 8211 	mrs	r2, BASEPRI
 8004912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004916:	b672      	cpsid	i
 8004918:	f383 8811 	msr	BASEPRI, r3
 800491c:	f3bf 8f6f 	isb	sy
 8004920:	f3bf 8f4f 	dsb	sy
 8004924:	b662      	cpsie	i
 8004926:	617a      	str	r2, [r7, #20]
 8004928:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800492a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800492c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800492e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004932:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004938:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800493a:	429a      	cmp	r2, r3
 800493c:	d22b      	bcs.n	8004996 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800493e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004940:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004944:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494a:	1c5a      	adds	r2, r3, #1
 800494c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800494e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004950:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004958:	d112      	bne.n	8004980 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800495a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495e:	2b00      	cmp	r3, #0
 8004960:	d016      	beq.n	8004990 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004964:	3324      	adds	r3, #36	; 0x24
 8004966:	4618      	mov	r0, r3
 8004968:	f000 fe74 	bl	8005654 <xTaskRemoveFromEventList>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00e      	beq.n	8004990 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00b      	beq.n	8004990 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	2201      	movs	r2, #1
 800497c:	601a      	str	r2, [r3, #0]
 800497e:	e007      	b.n	8004990 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004980:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004984:	3301      	adds	r3, #1
 8004986:	b2db      	uxtb	r3, r3
 8004988:	b25a      	sxtb	r2, r3
 800498a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004990:	2301      	movs	r3, #1
 8004992:	637b      	str	r3, [r7, #52]	; 0x34
 8004994:	e001      	b.n	800499a <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004996:	2300      	movs	r3, #0
 8004998:	637b      	str	r3, [r7, #52]	; 0x34
 800499a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800499c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80049a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3738      	adds	r7, #56	; 0x38
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
	...

080049b0 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b08e      	sub	sp, #56	; 0x38
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80049ba:	2300      	movs	r3, #0
 80049bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80049c2:	2300      	movs	r3, #0
 80049c4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80049c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d10b      	bne.n	80049e4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80049cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d0:	b672      	cpsid	i
 80049d2:	f383 8811 	msr	BASEPRI, r3
 80049d6:	f3bf 8f6f 	isb	sy
 80049da:	f3bf 8f4f 	dsb	sy
 80049de:	b662      	cpsie	i
 80049e0:	623b      	str	r3, [r7, #32]
 80049e2:	e7fe      	b.n	80049e2 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80049e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00b      	beq.n	8004a04 <xQueueSemaphoreTake+0x54>
 80049ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f0:	b672      	cpsid	i
 80049f2:	f383 8811 	msr	BASEPRI, r3
 80049f6:	f3bf 8f6f 	isb	sy
 80049fa:	f3bf 8f4f 	dsb	sy
 80049fe:	b662      	cpsie	i
 8004a00:	61fb      	str	r3, [r7, #28]
 8004a02:	e7fe      	b.n	8004a02 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a04:	f000 ffca 	bl	800599c <xTaskGetSchedulerState>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d102      	bne.n	8004a14 <xQueueSemaphoreTake+0x64>
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d101      	bne.n	8004a18 <xQueueSemaphoreTake+0x68>
 8004a14:	2301      	movs	r3, #1
 8004a16:	e000      	b.n	8004a1a <xQueueSemaphoreTake+0x6a>
 8004a18:	2300      	movs	r3, #0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10b      	bne.n	8004a36 <xQueueSemaphoreTake+0x86>
 8004a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a22:	b672      	cpsid	i
 8004a24:	f383 8811 	msr	BASEPRI, r3
 8004a28:	f3bf 8f6f 	isb	sy
 8004a2c:	f3bf 8f4f 	dsb	sy
 8004a30:	b662      	cpsie	i
 8004a32:	61bb      	str	r3, [r7, #24]
 8004a34:	e7fe      	b.n	8004a34 <xQueueSemaphoreTake+0x84>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a36:	f7ff fc0f 	bl	8004258 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d024      	beq.n	8004a90 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a48:	1e5a      	subs	r2, r3, #1
 8004a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a4c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d104      	bne.n	8004a60 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004a56:	f001 f96f 	bl	8005d38 <pvTaskIncrementMutexHeldCount>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a5e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00f      	beq.n	8004a88 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a6a:	3310      	adds	r3, #16
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f000 fdf1 	bl	8005654 <xTaskRemoveFromEventList>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d007      	beq.n	8004a88 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004a78:	4b54      	ldr	r3, [pc, #336]	; (8004bcc <xQueueSemaphoreTake+0x21c>)
 8004a7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a7e:	601a      	str	r2, [r3, #0]
 8004a80:	f3bf 8f4f 	dsb	sy
 8004a84:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004a88:	f7ff fc18 	bl	80042bc <vPortExitCritical>
				return pdPASS;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e098      	b.n	8004bc2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d112      	bne.n	8004abc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00b      	beq.n	8004ab4 <xQueueSemaphoreTake+0x104>
 8004a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa0:	b672      	cpsid	i
 8004aa2:	f383 8811 	msr	BASEPRI, r3
 8004aa6:	f3bf 8f6f 	isb	sy
 8004aaa:	f3bf 8f4f 	dsb	sy
 8004aae:	b662      	cpsie	i
 8004ab0:	617b      	str	r3, [r7, #20]
 8004ab2:	e7fe      	b.n	8004ab2 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004ab4:	f7ff fc02 	bl	80042bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	e082      	b.n	8004bc2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d106      	bne.n	8004ad0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ac2:	f107 030c 	add.w	r3, r7, #12
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f000 fe28 	bl	800571c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004acc:	2301      	movs	r3, #1
 8004ace:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ad0:	f7ff fbf4 	bl	80042bc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ad4:	f000 fbd2 	bl	800527c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ad8:	f7ff fbbe 	bl	8004258 <vPortEnterCritical>
 8004adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ade:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ae2:	b25b      	sxtb	r3, r3
 8004ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae8:	d103      	bne.n	8004af2 <xQueueSemaphoreTake+0x142>
 8004aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004af8:	b25b      	sxtb	r3, r3
 8004afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004afe:	d103      	bne.n	8004b08 <xQueueSemaphoreTake+0x158>
 8004b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b08:	f7ff fbd8 	bl	80042bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b0c:	463a      	mov	r2, r7
 8004b0e:	f107 030c 	add.w	r3, r7, #12
 8004b12:	4611      	mov	r1, r2
 8004b14:	4618      	mov	r0, r3
 8004b16:	f000 fe17 	bl	8005748 <xTaskCheckForTimeOut>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d132      	bne.n	8004b86 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b22:	f000 f9d2 	bl	8004eca <prvIsQueueEmpty>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d026      	beq.n	8004b7a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d109      	bne.n	8004b48 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004b34:	f7ff fb90 	bl	8004258 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f000 ff4b 	bl	80059d8 <xTaskPriorityInherit>
 8004b42:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004b44:	f7ff fbba 	bl	80042bc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b4a:	3324      	adds	r3, #36	; 0x24
 8004b4c:	683a      	ldr	r2, [r7, #0]
 8004b4e:	4611      	mov	r1, r2
 8004b50:	4618      	mov	r0, r3
 8004b52:	f000 fd59 	bl	8005608 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b58:	f000 f965 	bl	8004e26 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004b5c:	f000 fb9c 	bl	8005298 <xTaskResumeAll>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	f47f af67 	bne.w	8004a36 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004b68:	4b18      	ldr	r3, [pc, #96]	; (8004bcc <xQueueSemaphoreTake+0x21c>)
 8004b6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b6e:	601a      	str	r2, [r3, #0]
 8004b70:	f3bf 8f4f 	dsb	sy
 8004b74:	f3bf 8f6f 	isb	sy
 8004b78:	e75d      	b.n	8004a36 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004b7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b7c:	f000 f953 	bl	8004e26 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b80:	f000 fb8a 	bl	8005298 <xTaskResumeAll>
 8004b84:	e757      	b.n	8004a36 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004b86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b88:	f000 f94d 	bl	8004e26 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b8c:	f000 fb84 	bl	8005298 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b92:	f000 f99a 	bl	8004eca <prvIsQueueEmpty>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f43f af4c 	beq.w	8004a36 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d00d      	beq.n	8004bc0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8004ba4:	f7ff fb58 	bl	8004258 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004ba8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004baa:	f000 f894 	bl	8004cd6 <prvGetDisinheritPriorityAfterTimeout>
 8004bae:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8004bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f001 f81c 	bl	8005bf4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004bbc:	f7ff fb7e 	bl	80042bc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004bc0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3738      	adds	r7, #56	; 0x38
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	e000ed04 	.word	0xe000ed04

08004bd0 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b08e      	sub	sp, #56	; 0x38
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d10b      	bne.n	8004bfe <xQueueReceiveFromISR+0x2e>
 8004be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bea:	b672      	cpsid	i
 8004bec:	f383 8811 	msr	BASEPRI, r3
 8004bf0:	f3bf 8f6f 	isb	sy
 8004bf4:	f3bf 8f4f 	dsb	sy
 8004bf8:	b662      	cpsie	i
 8004bfa:	623b      	str	r3, [r7, #32]
 8004bfc:	e7fe      	b.n	8004bfc <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d103      	bne.n	8004c0c <xQueueReceiveFromISR+0x3c>
 8004c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d101      	bne.n	8004c10 <xQueueReceiveFromISR+0x40>
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e000      	b.n	8004c12 <xQueueReceiveFromISR+0x42>
 8004c10:	2300      	movs	r3, #0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10b      	bne.n	8004c2e <xQueueReceiveFromISR+0x5e>
 8004c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c1a:	b672      	cpsid	i
 8004c1c:	f383 8811 	msr	BASEPRI, r3
 8004c20:	f3bf 8f6f 	isb	sy
 8004c24:	f3bf 8f4f 	dsb	sy
 8004c28:	b662      	cpsie	i
 8004c2a:	61fb      	str	r3, [r7, #28]
 8004c2c:	e7fe      	b.n	8004c2c <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c2e:	f7ff fbf3 	bl	8004418 <vPortValidateInterruptPriority>
	__asm volatile
 8004c32:	f3ef 8211 	mrs	r2, BASEPRI
 8004c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3a:	b672      	cpsid	i
 8004c3c:	f383 8811 	msr	BASEPRI, r3
 8004c40:	f3bf 8f6f 	isb	sy
 8004c44:	f3bf 8f4f 	dsb	sy
 8004c48:	b662      	cpsie	i
 8004c4a:	61ba      	str	r2, [r7, #24]
 8004c4c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004c4e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004c50:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c56:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d02f      	beq.n	8004cbe <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004c68:	68b9      	ldr	r1, [r7, #8]
 8004c6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c6c:	f000 f8b5 	bl	8004dda <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c72:	1e5a      	subs	r2, r3, #1
 8004c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c76:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004c78:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c80:	d112      	bne.n	8004ca8 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d016      	beq.n	8004cb8 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8c:	3310      	adds	r3, #16
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f000 fce0 	bl	8005654 <xTaskRemoveFromEventList>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00e      	beq.n	8004cb8 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d00b      	beq.n	8004cb8 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	601a      	str	r2, [r3, #0]
 8004ca6:	e007      	b.n	8004cb8 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004ca8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004cac:	3301      	adds	r3, #1
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	b25a      	sxtb	r2, r3
 8004cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	637b      	str	r3, [r7, #52]	; 0x34
 8004cbc:	e001      	b.n	8004cc2 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	637b      	str	r3, [r7, #52]	; 0x34
 8004cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3738      	adds	r7, #56	; 0x38
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004cd6:	b480      	push	{r7}
 8004cd8:	b085      	sub	sp, #20
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d006      	beq.n	8004cf4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f1c3 0307 	rsb	r3, r3, #7
 8004cf0:	60fb      	str	r3, [r7, #12]
 8004cf2:	e001      	b.n	8004cf8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
	}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3714      	adds	r7, #20
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr

08004d06 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b086      	sub	sp, #24
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	60f8      	str	r0, [r7, #12]
 8004d0e:	60b9      	str	r1, [r7, #8]
 8004d10:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004d12:	2300      	movs	r3, #0
 8004d14:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d10d      	bne.n	8004d40 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d14d      	bne.n	8004dc8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	4618      	mov	r0, r3
 8004d32:	f000 fed7 	bl	8005ae4 <xTaskPriorityDisinherit>
 8004d36:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	605a      	str	r2, [r3, #4]
 8004d3e:	e043      	b.n	8004dc8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d119      	bne.n	8004d7a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6898      	ldr	r0, [r3, #8]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	461a      	mov	r2, r3
 8004d50:	68b9      	ldr	r1, [r7, #8]
 8004d52:	f002 fa85 	bl	8007260 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	689a      	ldr	r2, [r3, #8]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5e:	441a      	add	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	689a      	ldr	r2, [r3, #8]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d32b      	bcc.n	8004dc8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	609a      	str	r2, [r3, #8]
 8004d78:	e026      	b.n	8004dc8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	68d8      	ldr	r0, [r3, #12]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d82:	461a      	mov	r2, r3
 8004d84:	68b9      	ldr	r1, [r7, #8]
 8004d86:	f002 fa6b 	bl	8007260 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	68da      	ldr	r2, [r3, #12]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d92:	425b      	negs	r3, r3
 8004d94:	441a      	add	r2, r3
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	68da      	ldr	r2, [r3, #12]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d207      	bcs.n	8004db6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	685a      	ldr	r2, [r3, #4]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dae:	425b      	negs	r3, r3
 8004db0:	441a      	add	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d105      	bne.n	8004dc8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d002      	beq.n	8004dc8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	1c5a      	adds	r2, r3, #1
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004dd0:	697b      	ldr	r3, [r7, #20]
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3718      	adds	r7, #24
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}

08004dda <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b082      	sub	sp, #8
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
 8004de2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d018      	beq.n	8004e1e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	68da      	ldr	r2, [r3, #12]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df4:	441a      	add	r2, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	68da      	ldr	r2, [r3, #12]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d303      	bcc.n	8004e0e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	68d9      	ldr	r1, [r3, #12]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e16:	461a      	mov	r2, r3
 8004e18:	6838      	ldr	r0, [r7, #0]
 8004e1a:	f002 fa21 	bl	8007260 <memcpy>
	}
}
 8004e1e:	bf00      	nop
 8004e20:	3708      	adds	r7, #8
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}

08004e26 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b084      	sub	sp, #16
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004e2e:	f7ff fa13 	bl	8004258 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e38:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e3a:	e011      	b.n	8004e60 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d012      	beq.n	8004e6a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	3324      	adds	r3, #36	; 0x24
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f000 fc03 	bl	8005654 <xTaskRemoveFromEventList>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d001      	beq.n	8004e58 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004e54:	f000 fcdc 	bl	8005810 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004e58:	7bfb      	ldrb	r3, [r7, #15]
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	dce9      	bgt.n	8004e3c <prvUnlockQueue+0x16>
 8004e68:	e000      	b.n	8004e6c <prvUnlockQueue+0x46>
					break;
 8004e6a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	22ff      	movs	r2, #255	; 0xff
 8004e70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004e74:	f7ff fa22 	bl	80042bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004e78:	f7ff f9ee 	bl	8004258 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e82:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e84:	e011      	b.n	8004eaa <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d012      	beq.n	8004eb4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	3310      	adds	r3, #16
 8004e92:	4618      	mov	r0, r3
 8004e94:	f000 fbde 	bl	8005654 <xTaskRemoveFromEventList>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d001      	beq.n	8004ea2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004e9e:	f000 fcb7 	bl	8005810 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004ea2:	7bbb      	ldrb	r3, [r7, #14]
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004eaa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	dce9      	bgt.n	8004e86 <prvUnlockQueue+0x60>
 8004eb2:	e000      	b.n	8004eb6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004eb4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	22ff      	movs	r2, #255	; 0xff
 8004eba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004ebe:	f7ff f9fd 	bl	80042bc <vPortExitCritical>
}
 8004ec2:	bf00      	nop
 8004ec4:	3710      	adds	r7, #16
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b084      	sub	sp, #16
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ed2:	f7ff f9c1 	bl	8004258 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d102      	bne.n	8004ee4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	60fb      	str	r3, [r7, #12]
 8004ee2:	e001      	b.n	8004ee8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ee8:	f7ff f9e8 	bl	80042bc <vPortExitCritical>

	return xReturn;
 8004eec:	68fb      	ldr	r3, [r7, #12]
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3710      	adds	r7, #16
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	b084      	sub	sp, #16
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004efe:	f7ff f9ab 	bl	8004258 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d102      	bne.n	8004f14 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	60fb      	str	r3, [r7, #12]
 8004f12:	e001      	b.n	8004f18 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004f14:	2300      	movs	r3, #0
 8004f16:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f18:	f7ff f9d0 	bl	80042bc <vPortExitCritical>

	return xReturn;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3710      	adds	r7, #16
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}

08004f26 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004f26:	b580      	push	{r7, lr}
 8004f28:	b08c      	sub	sp, #48	; 0x30
 8004f2a:	af04      	add	r7, sp, #16
 8004f2c:	60f8      	str	r0, [r7, #12]
 8004f2e:	60b9      	str	r1, [r7, #8]
 8004f30:	603b      	str	r3, [r7, #0]
 8004f32:	4613      	mov	r3, r2
 8004f34:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f36:	88fb      	ldrh	r3, [r7, #6]
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7fe fdec 	bl	8003b18 <pvPortMalloc>
 8004f40:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00e      	beq.n	8004f66 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004f48:	2054      	movs	r0, #84	; 0x54
 8004f4a:	f7fe fde5 	bl	8003b18 <pvPortMalloc>
 8004f4e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d003      	beq.n	8004f5e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	631a      	str	r2, [r3, #48]	; 0x30
 8004f5c:	e005      	b.n	8004f6a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004f5e:	6978      	ldr	r0, [r7, #20]
 8004f60:	f7fe fea2 	bl	8003ca8 <vPortFree>
 8004f64:	e001      	b.n	8004f6a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004f66:	2300      	movs	r3, #0
 8004f68:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d013      	beq.n	8004f98 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004f70:	88fa      	ldrh	r2, [r7, #6]
 8004f72:	2300      	movs	r3, #0
 8004f74:	9303      	str	r3, [sp, #12]
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	9302      	str	r3, [sp, #8]
 8004f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f7c:	9301      	str	r3, [sp, #4]
 8004f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f80:	9300      	str	r3, [sp, #0]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	68b9      	ldr	r1, [r7, #8]
 8004f86:	68f8      	ldr	r0, [r7, #12]
 8004f88:	f000 f80e 	bl	8004fa8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f8c:	69f8      	ldr	r0, [r7, #28]
 8004f8e:	f000 f88b 	bl	80050a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004f92:	2301      	movs	r3, #1
 8004f94:	61bb      	str	r3, [r7, #24]
 8004f96:	e002      	b.n	8004f9e <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004f98:	f04f 33ff 	mov.w	r3, #4294967295
 8004f9c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004f9e:	69bb      	ldr	r3, [r7, #24]
	}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3720      	adds	r7, #32
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b088      	sub	sp, #32
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	607a      	str	r2, [r7, #4]
 8004fb4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fba:	6879      	ldr	r1, [r7, #4]
 8004fbc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004fc0:	440b      	add	r3, r1
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	f023 0307 	bic.w	r3, r3, #7
 8004fce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	f003 0307 	and.w	r3, r3, #7
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00b      	beq.n	8004ff2 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8004fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fde:	b672      	cpsid	i
 8004fe0:	f383 8811 	msr	BASEPRI, r3
 8004fe4:	f3bf 8f6f 	isb	sy
 8004fe8:	f3bf 8f4f 	dsb	sy
 8004fec:	b662      	cpsie	i
 8004fee:	617b      	str	r3, [r7, #20]
 8004ff0:	e7fe      	b.n	8004ff0 <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	61fb      	str	r3, [r7, #28]
 8004ff6:	e012      	b.n	800501e <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004ff8:	68ba      	ldr	r2, [r7, #8]
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	7819      	ldrb	r1, [r3, #0]
 8005000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	4413      	add	r3, r2
 8005006:	3334      	adds	r3, #52	; 0x34
 8005008:	460a      	mov	r2, r1
 800500a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	4413      	add	r3, r2
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d006      	beq.n	8005026 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	3301      	adds	r3, #1
 800501c:	61fb      	str	r3, [r7, #28]
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	2b0f      	cmp	r3, #15
 8005022:	d9e9      	bls.n	8004ff8 <prvInitialiseNewTask+0x50>
 8005024:	e000      	b.n	8005028 <prvInitialiseNewTask+0x80>
		{
			break;
 8005026:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502a:	2200      	movs	r2, #0
 800502c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005032:	2b06      	cmp	r3, #6
 8005034:	d901      	bls.n	800503a <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005036:	2306      	movs	r3, #6
 8005038:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800503a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800503e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005042:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005044:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005048:	2200      	movs	r2, #0
 800504a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800504c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504e:	3304      	adds	r3, #4
 8005050:	4618      	mov	r0, r3
 8005052:	f7fe ff61 	bl	8003f18 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005058:	3318      	adds	r3, #24
 800505a:	4618      	mov	r0, r3
 800505c:	f7fe ff5c 	bl	8003f18 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005062:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005064:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005068:	f1c3 0207 	rsb	r2, r3, #7
 800506c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005072:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005074:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005078:	2200      	movs	r2, #0
 800507a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800507c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507e:	2200      	movs	r2, #0
 8005080:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005084:	683a      	ldr	r2, [r7, #0]
 8005086:	68f9      	ldr	r1, [r7, #12]
 8005088:	69b8      	ldr	r0, [r7, #24]
 800508a:	f7fe ffd9 	bl	8004040 <pxPortInitialiseStack>
 800508e:	4602      	mov	r2, r0
 8005090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005092:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005096:	2b00      	cmp	r3, #0
 8005098:	d002      	beq.n	80050a0 <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800509a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800509c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800509e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050a0:	bf00      	nop
 80050a2:	3720      	adds	r7, #32
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80050b0:	f7ff f8d2 	bl	8004258 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80050b4:	4b2a      	ldr	r3, [pc, #168]	; (8005160 <prvAddNewTaskToReadyList+0xb8>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	3301      	adds	r3, #1
 80050ba:	4a29      	ldr	r2, [pc, #164]	; (8005160 <prvAddNewTaskToReadyList+0xb8>)
 80050bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80050be:	4b29      	ldr	r3, [pc, #164]	; (8005164 <prvAddNewTaskToReadyList+0xbc>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d109      	bne.n	80050da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80050c6:	4a27      	ldr	r2, [pc, #156]	; (8005164 <prvAddNewTaskToReadyList+0xbc>)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80050cc:	4b24      	ldr	r3, [pc, #144]	; (8005160 <prvAddNewTaskToReadyList+0xb8>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d110      	bne.n	80050f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80050d4:	f000 fbc0 	bl	8005858 <prvInitialiseTaskLists>
 80050d8:	e00d      	b.n	80050f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80050da:	4b23      	ldr	r3, [pc, #140]	; (8005168 <prvAddNewTaskToReadyList+0xc0>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d109      	bne.n	80050f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80050e2:	4b20      	ldr	r3, [pc, #128]	; (8005164 <prvAddNewTaskToReadyList+0xbc>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d802      	bhi.n	80050f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80050f0:	4a1c      	ldr	r2, [pc, #112]	; (8005164 <prvAddNewTaskToReadyList+0xbc>)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80050f6:	4b1d      	ldr	r3, [pc, #116]	; (800516c <prvAddNewTaskToReadyList+0xc4>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	3301      	adds	r3, #1
 80050fc:	4a1b      	ldr	r2, [pc, #108]	; (800516c <prvAddNewTaskToReadyList+0xc4>)
 80050fe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005104:	2201      	movs	r2, #1
 8005106:	409a      	lsls	r2, r3
 8005108:	4b19      	ldr	r3, [pc, #100]	; (8005170 <prvAddNewTaskToReadyList+0xc8>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4313      	orrs	r3, r2
 800510e:	4a18      	ldr	r2, [pc, #96]	; (8005170 <prvAddNewTaskToReadyList+0xc8>)
 8005110:	6013      	str	r3, [r2, #0]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005116:	4613      	mov	r3, r2
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	4413      	add	r3, r2
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	4a15      	ldr	r2, [pc, #84]	; (8005174 <prvAddNewTaskToReadyList+0xcc>)
 8005120:	441a      	add	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	3304      	adds	r3, #4
 8005126:	4619      	mov	r1, r3
 8005128:	4610      	mov	r0, r2
 800512a:	f7fe ff02 	bl	8003f32 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800512e:	f7ff f8c5 	bl	80042bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005132:	4b0d      	ldr	r3, [pc, #52]	; (8005168 <prvAddNewTaskToReadyList+0xc0>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00e      	beq.n	8005158 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800513a:	4b0a      	ldr	r3, [pc, #40]	; (8005164 <prvAddNewTaskToReadyList+0xbc>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005144:	429a      	cmp	r2, r3
 8005146:	d207      	bcs.n	8005158 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005148:	4b0b      	ldr	r3, [pc, #44]	; (8005178 <prvAddNewTaskToReadyList+0xd0>)
 800514a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800514e:	601a      	str	r2, [r3, #0]
 8005150:	f3bf 8f4f 	dsb	sy
 8005154:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005158:	bf00      	nop
 800515a:	3708      	adds	r7, #8
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	20003dac 	.word	0x20003dac
 8005164:	20003cac 	.word	0x20003cac
 8005168:	20003db8 	.word	0x20003db8
 800516c:	20003dc8 	.word	0x20003dc8
 8005170:	20003db4 	.word	0x20003db4
 8005174:	20003cb0 	.word	0x20003cb0
 8005178:	e000ed04 	.word	0xe000ed04

0800517c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005184:	2300      	movs	r3, #0
 8005186:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d018      	beq.n	80051c0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800518e:	4b14      	ldr	r3, [pc, #80]	; (80051e0 <vTaskDelay+0x64>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00b      	beq.n	80051ae <vTaskDelay+0x32>
 8005196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519a:	b672      	cpsid	i
 800519c:	f383 8811 	msr	BASEPRI, r3
 80051a0:	f3bf 8f6f 	isb	sy
 80051a4:	f3bf 8f4f 	dsb	sy
 80051a8:	b662      	cpsie	i
 80051aa:	60bb      	str	r3, [r7, #8]
 80051ac:	e7fe      	b.n	80051ac <vTaskDelay+0x30>
			vTaskSuspendAll();
 80051ae:	f000 f865 	bl	800527c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80051b2:	2100      	movs	r1, #0
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 ff9d 	bl	80060f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80051ba:	f000 f86d 	bl	8005298 <xTaskResumeAll>
 80051be:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d107      	bne.n	80051d6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80051c6:	4b07      	ldr	r3, [pc, #28]	; (80051e4 <vTaskDelay+0x68>)
 80051c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051cc:	601a      	str	r2, [r3, #0]
 80051ce:	f3bf 8f4f 	dsb	sy
 80051d2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80051d6:	bf00      	nop
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	20003dd4 	.word	0x20003dd4
 80051e4:	e000ed04 	.word	0xe000ed04

080051e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b086      	sub	sp, #24
 80051ec:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80051ee:	4b1d      	ldr	r3, [pc, #116]	; (8005264 <vTaskStartScheduler+0x7c>)
 80051f0:	9301      	str	r3, [sp, #4]
 80051f2:	2300      	movs	r3, #0
 80051f4:	9300      	str	r3, [sp, #0]
 80051f6:	2300      	movs	r3, #0
 80051f8:	2280      	movs	r2, #128	; 0x80
 80051fa:	491b      	ldr	r1, [pc, #108]	; (8005268 <vTaskStartScheduler+0x80>)
 80051fc:	481b      	ldr	r0, [pc, #108]	; (800526c <vTaskStartScheduler+0x84>)
 80051fe:	f7ff fe92 	bl	8004f26 <xTaskCreate>
 8005202:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2b01      	cmp	r3, #1
 8005208:	d117      	bne.n	800523a <vTaskStartScheduler+0x52>
 800520a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800520e:	b672      	cpsid	i
 8005210:	f383 8811 	msr	BASEPRI, r3
 8005214:	f3bf 8f6f 	isb	sy
 8005218:	f3bf 8f4f 	dsb	sy
 800521c:	b662      	cpsie	i
 800521e:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005220:	4b13      	ldr	r3, [pc, #76]	; (8005270 <vTaskStartScheduler+0x88>)
 8005222:	f04f 32ff 	mov.w	r2, #4294967295
 8005226:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005228:	4b12      	ldr	r3, [pc, #72]	; (8005274 <vTaskStartScheduler+0x8c>)
 800522a:	2201      	movs	r2, #1
 800522c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800522e:	4b12      	ldr	r3, [pc, #72]	; (8005278 <vTaskStartScheduler+0x90>)
 8005230:	2200      	movs	r2, #0
 8005232:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005234:	f7fe ff94 	bl	8004160 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005238:	e00f      	b.n	800525a <vTaskStartScheduler+0x72>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005240:	d10b      	bne.n	800525a <vTaskStartScheduler+0x72>
 8005242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005246:	b672      	cpsid	i
 8005248:	f383 8811 	msr	BASEPRI, r3
 800524c:	f3bf 8f6f 	isb	sy
 8005250:	f3bf 8f4f 	dsb	sy
 8005254:	b662      	cpsie	i
 8005256:	607b      	str	r3, [r7, #4]
 8005258:	e7fe      	b.n	8005258 <vTaskStartScheduler+0x70>
}
 800525a:	bf00      	nop
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	20003dd0 	.word	0x20003dd0
 8005268:	08008130 	.word	0x08008130
 800526c:	08005829 	.word	0x08005829
 8005270:	20003dcc 	.word	0x20003dcc
 8005274:	20003db8 	.word	0x20003db8
 8005278:	20003db0 	.word	0x20003db0

0800527c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800527c:	b480      	push	{r7}
 800527e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005280:	4b04      	ldr	r3, [pc, #16]	; (8005294 <vTaskSuspendAll+0x18>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	3301      	adds	r3, #1
 8005286:	4a03      	ldr	r2, [pc, #12]	; (8005294 <vTaskSuspendAll+0x18>)
 8005288:	6013      	str	r3, [r2, #0]
}
 800528a:	bf00      	nop
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr
 8005294:	20003dd4 	.word	0x20003dd4

08005298 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800529e:	2300      	movs	r3, #0
 80052a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80052a2:	2300      	movs	r3, #0
 80052a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80052a6:	4b42      	ldr	r3, [pc, #264]	; (80053b0 <xTaskResumeAll+0x118>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d10b      	bne.n	80052c6 <xTaskResumeAll+0x2e>
 80052ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b2:	b672      	cpsid	i
 80052b4:	f383 8811 	msr	BASEPRI, r3
 80052b8:	f3bf 8f6f 	isb	sy
 80052bc:	f3bf 8f4f 	dsb	sy
 80052c0:	b662      	cpsie	i
 80052c2:	603b      	str	r3, [r7, #0]
 80052c4:	e7fe      	b.n	80052c4 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80052c6:	f7fe ffc7 	bl	8004258 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80052ca:	4b39      	ldr	r3, [pc, #228]	; (80053b0 <xTaskResumeAll+0x118>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	3b01      	subs	r3, #1
 80052d0:	4a37      	ldr	r2, [pc, #220]	; (80053b0 <xTaskResumeAll+0x118>)
 80052d2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052d4:	4b36      	ldr	r3, [pc, #216]	; (80053b0 <xTaskResumeAll+0x118>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d161      	bne.n	80053a0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80052dc:	4b35      	ldr	r3, [pc, #212]	; (80053b4 <xTaskResumeAll+0x11c>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d05d      	beq.n	80053a0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80052e4:	e02e      	b.n	8005344 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80052e6:	4b34      	ldr	r3, [pc, #208]	; (80053b8 <xTaskResumeAll+0x120>)
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	3318      	adds	r3, #24
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7fe fe7a 	bl	8003fec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	3304      	adds	r3, #4
 80052fc:	4618      	mov	r0, r3
 80052fe:	f7fe fe75 	bl	8003fec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005306:	2201      	movs	r2, #1
 8005308:	409a      	lsls	r2, r3
 800530a:	4b2c      	ldr	r3, [pc, #176]	; (80053bc <xTaskResumeAll+0x124>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4313      	orrs	r3, r2
 8005310:	4a2a      	ldr	r2, [pc, #168]	; (80053bc <xTaskResumeAll+0x124>)
 8005312:	6013      	str	r3, [r2, #0]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005318:	4613      	mov	r3, r2
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	4413      	add	r3, r2
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	4a27      	ldr	r2, [pc, #156]	; (80053c0 <xTaskResumeAll+0x128>)
 8005322:	441a      	add	r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	3304      	adds	r3, #4
 8005328:	4619      	mov	r1, r3
 800532a:	4610      	mov	r0, r2
 800532c:	f7fe fe01 	bl	8003f32 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005334:	4b23      	ldr	r3, [pc, #140]	; (80053c4 <xTaskResumeAll+0x12c>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533a:	429a      	cmp	r2, r3
 800533c:	d302      	bcc.n	8005344 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800533e:	4b22      	ldr	r3, [pc, #136]	; (80053c8 <xTaskResumeAll+0x130>)
 8005340:	2201      	movs	r2, #1
 8005342:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005344:	4b1c      	ldr	r3, [pc, #112]	; (80053b8 <xTaskResumeAll+0x120>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1cc      	bne.n	80052e6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d001      	beq.n	8005356 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005352:	f000 fafd 	bl	8005950 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005356:	4b1d      	ldr	r3, [pc, #116]	; (80053cc <xTaskResumeAll+0x134>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d010      	beq.n	8005384 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005362:	f000 f837 	bl	80053d4 <xTaskIncrementTick>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d002      	beq.n	8005372 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800536c:	4b16      	ldr	r3, [pc, #88]	; (80053c8 <xTaskResumeAll+0x130>)
 800536e:	2201      	movs	r2, #1
 8005370:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	3b01      	subs	r3, #1
 8005376:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1f1      	bne.n	8005362 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800537e:	4b13      	ldr	r3, [pc, #76]	; (80053cc <xTaskResumeAll+0x134>)
 8005380:	2200      	movs	r2, #0
 8005382:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005384:	4b10      	ldr	r3, [pc, #64]	; (80053c8 <xTaskResumeAll+0x130>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d009      	beq.n	80053a0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800538c:	2301      	movs	r3, #1
 800538e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005390:	4b0f      	ldr	r3, [pc, #60]	; (80053d0 <xTaskResumeAll+0x138>)
 8005392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005396:	601a      	str	r2, [r3, #0]
 8005398:	f3bf 8f4f 	dsb	sy
 800539c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80053a0:	f7fe ff8c 	bl	80042bc <vPortExitCritical>

	return xAlreadyYielded;
 80053a4:	68bb      	ldr	r3, [r7, #8]
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3710      	adds	r7, #16
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	20003dd4 	.word	0x20003dd4
 80053b4:	20003dac 	.word	0x20003dac
 80053b8:	20003d6c 	.word	0x20003d6c
 80053bc:	20003db4 	.word	0x20003db4
 80053c0:	20003cb0 	.word	0x20003cb0
 80053c4:	20003cac 	.word	0x20003cac
 80053c8:	20003dc0 	.word	0x20003dc0
 80053cc:	20003dbc 	.word	0x20003dbc
 80053d0:	e000ed04 	.word	0xe000ed04

080053d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b086      	sub	sp, #24
 80053d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80053da:	2300      	movs	r3, #0
 80053dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053de:	4b51      	ldr	r3, [pc, #324]	; (8005524 <xTaskIncrementTick+0x150>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	f040 808e 	bne.w	8005504 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80053e8:	4b4f      	ldr	r3, [pc, #316]	; (8005528 <xTaskIncrementTick+0x154>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	3301      	adds	r3, #1
 80053ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80053f0:	4a4d      	ldr	r2, [pc, #308]	; (8005528 <xTaskIncrementTick+0x154>)
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d121      	bne.n	8005440 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80053fc:	4b4b      	ldr	r3, [pc, #300]	; (800552c <xTaskIncrementTick+0x158>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00b      	beq.n	800541e <xTaskIncrementTick+0x4a>
 8005406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540a:	b672      	cpsid	i
 800540c:	f383 8811 	msr	BASEPRI, r3
 8005410:	f3bf 8f6f 	isb	sy
 8005414:	f3bf 8f4f 	dsb	sy
 8005418:	b662      	cpsie	i
 800541a:	603b      	str	r3, [r7, #0]
 800541c:	e7fe      	b.n	800541c <xTaskIncrementTick+0x48>
 800541e:	4b43      	ldr	r3, [pc, #268]	; (800552c <xTaskIncrementTick+0x158>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	60fb      	str	r3, [r7, #12]
 8005424:	4b42      	ldr	r3, [pc, #264]	; (8005530 <xTaskIncrementTick+0x15c>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a40      	ldr	r2, [pc, #256]	; (800552c <xTaskIncrementTick+0x158>)
 800542a:	6013      	str	r3, [r2, #0]
 800542c:	4a40      	ldr	r2, [pc, #256]	; (8005530 <xTaskIncrementTick+0x15c>)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6013      	str	r3, [r2, #0]
 8005432:	4b40      	ldr	r3, [pc, #256]	; (8005534 <xTaskIncrementTick+0x160>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	3301      	adds	r3, #1
 8005438:	4a3e      	ldr	r2, [pc, #248]	; (8005534 <xTaskIncrementTick+0x160>)
 800543a:	6013      	str	r3, [r2, #0]
 800543c:	f000 fa88 	bl	8005950 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005440:	4b3d      	ldr	r3, [pc, #244]	; (8005538 <xTaskIncrementTick+0x164>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	429a      	cmp	r2, r3
 8005448:	d34d      	bcc.n	80054e6 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800544a:	4b38      	ldr	r3, [pc, #224]	; (800552c <xTaskIncrementTick+0x158>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d101      	bne.n	8005458 <xTaskIncrementTick+0x84>
 8005454:	2301      	movs	r3, #1
 8005456:	e000      	b.n	800545a <xTaskIncrementTick+0x86>
 8005458:	2300      	movs	r3, #0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d004      	beq.n	8005468 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800545e:	4b36      	ldr	r3, [pc, #216]	; (8005538 <xTaskIncrementTick+0x164>)
 8005460:	f04f 32ff 	mov.w	r2, #4294967295
 8005464:	601a      	str	r2, [r3, #0]
					break;
 8005466:	e03e      	b.n	80054e6 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005468:	4b30      	ldr	r3, [pc, #192]	; (800552c <xTaskIncrementTick+0x158>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	429a      	cmp	r2, r3
 800547e:	d203      	bcs.n	8005488 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005480:	4a2d      	ldr	r2, [pc, #180]	; (8005538 <xTaskIncrementTick+0x164>)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6013      	str	r3, [r2, #0]
						break;
 8005486:	e02e      	b.n	80054e6 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	3304      	adds	r3, #4
 800548c:	4618      	mov	r0, r3
 800548e:	f7fe fdad 	bl	8003fec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005496:	2b00      	cmp	r3, #0
 8005498:	d004      	beq.n	80054a4 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	3318      	adds	r3, #24
 800549e:	4618      	mov	r0, r3
 80054a0:	f7fe fda4 	bl	8003fec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a8:	2201      	movs	r2, #1
 80054aa:	409a      	lsls	r2, r3
 80054ac:	4b23      	ldr	r3, [pc, #140]	; (800553c <xTaskIncrementTick+0x168>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	4a22      	ldr	r2, [pc, #136]	; (800553c <xTaskIncrementTick+0x168>)
 80054b4:	6013      	str	r3, [r2, #0]
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ba:	4613      	mov	r3, r2
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	4413      	add	r3, r2
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	4a1f      	ldr	r2, [pc, #124]	; (8005540 <xTaskIncrementTick+0x16c>)
 80054c4:	441a      	add	r2, r3
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	3304      	adds	r3, #4
 80054ca:	4619      	mov	r1, r3
 80054cc:	4610      	mov	r0, r2
 80054ce:	f7fe fd30 	bl	8003f32 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054d6:	4b1b      	ldr	r3, [pc, #108]	; (8005544 <xTaskIncrementTick+0x170>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054dc:	429a      	cmp	r2, r3
 80054de:	d3b4      	bcc.n	800544a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80054e0:	2301      	movs	r3, #1
 80054e2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054e4:	e7b1      	b.n	800544a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80054e6:	4b17      	ldr	r3, [pc, #92]	; (8005544 <xTaskIncrementTick+0x170>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ec:	4914      	ldr	r1, [pc, #80]	; (8005540 <xTaskIncrementTick+0x16c>)
 80054ee:	4613      	mov	r3, r2
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	4413      	add	r3, r2
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	440b      	add	r3, r1
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d907      	bls.n	800550e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80054fe:	2301      	movs	r3, #1
 8005500:	617b      	str	r3, [r7, #20]
 8005502:	e004      	b.n	800550e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005504:	4b10      	ldr	r3, [pc, #64]	; (8005548 <xTaskIncrementTick+0x174>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	3301      	adds	r3, #1
 800550a:	4a0f      	ldr	r2, [pc, #60]	; (8005548 <xTaskIncrementTick+0x174>)
 800550c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800550e:	4b0f      	ldr	r3, [pc, #60]	; (800554c <xTaskIncrementTick+0x178>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d001      	beq.n	800551a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8005516:	2301      	movs	r3, #1
 8005518:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800551a:	697b      	ldr	r3, [r7, #20]
}
 800551c:	4618      	mov	r0, r3
 800551e:	3718      	adds	r7, #24
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	20003dd4 	.word	0x20003dd4
 8005528:	20003db0 	.word	0x20003db0
 800552c:	20003d64 	.word	0x20003d64
 8005530:	20003d68 	.word	0x20003d68
 8005534:	20003dc4 	.word	0x20003dc4
 8005538:	20003dcc 	.word	0x20003dcc
 800553c:	20003db4 	.word	0x20003db4
 8005540:	20003cb0 	.word	0x20003cb0
 8005544:	20003cac 	.word	0x20003cac
 8005548:	20003dbc 	.word	0x20003dbc
 800554c:	20003dc0 	.word	0x20003dc0

08005550 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005550:	b480      	push	{r7}
 8005552:	b087      	sub	sp, #28
 8005554:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005556:	4b27      	ldr	r3, [pc, #156]	; (80055f4 <vTaskSwitchContext+0xa4>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d003      	beq.n	8005566 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800555e:	4b26      	ldr	r3, [pc, #152]	; (80055f8 <vTaskSwitchContext+0xa8>)
 8005560:	2201      	movs	r2, #1
 8005562:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005564:	e040      	b.n	80055e8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005566:	4b24      	ldr	r3, [pc, #144]	; (80055f8 <vTaskSwitchContext+0xa8>)
 8005568:	2200      	movs	r2, #0
 800556a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800556c:	4b23      	ldr	r3, [pc, #140]	; (80055fc <vTaskSwitchContext+0xac>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	fab3 f383 	clz	r3, r3
 8005578:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800557a:	7afb      	ldrb	r3, [r7, #11]
 800557c:	f1c3 031f 	rsb	r3, r3, #31
 8005580:	617b      	str	r3, [r7, #20]
 8005582:	491f      	ldr	r1, [pc, #124]	; (8005600 <vTaskSwitchContext+0xb0>)
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	4613      	mov	r3, r2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	4413      	add	r3, r2
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	440b      	add	r3, r1
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d10b      	bne.n	80055ae <vTaskSwitchContext+0x5e>
	__asm volatile
 8005596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800559a:	b672      	cpsid	i
 800559c:	f383 8811 	msr	BASEPRI, r3
 80055a0:	f3bf 8f6f 	isb	sy
 80055a4:	f3bf 8f4f 	dsb	sy
 80055a8:	b662      	cpsie	i
 80055aa:	607b      	str	r3, [r7, #4]
 80055ac:	e7fe      	b.n	80055ac <vTaskSwitchContext+0x5c>
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	4613      	mov	r3, r2
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	4413      	add	r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	4a11      	ldr	r2, [pc, #68]	; (8005600 <vTaskSwitchContext+0xb0>)
 80055ba:	4413      	add	r3, r2
 80055bc:	613b      	str	r3, [r7, #16]
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	685a      	ldr	r2, [r3, #4]
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	605a      	str	r2, [r3, #4]
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	685a      	ldr	r2, [r3, #4]
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	3308      	adds	r3, #8
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d104      	bne.n	80055de <vTaskSwitchContext+0x8e>
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	685a      	ldr	r2, [r3, #4]
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	605a      	str	r2, [r3, #4]
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	4a07      	ldr	r2, [pc, #28]	; (8005604 <vTaskSwitchContext+0xb4>)
 80055e6:	6013      	str	r3, [r2, #0]
}
 80055e8:	bf00      	nop
 80055ea:	371c      	adds	r7, #28
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr
 80055f4:	20003dd4 	.word	0x20003dd4
 80055f8:	20003dc0 	.word	0x20003dc0
 80055fc:	20003db4 	.word	0x20003db4
 8005600:	20003cb0 	.word	0x20003cb0
 8005604:	20003cac 	.word	0x20003cac

08005608 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d10b      	bne.n	8005630 <vTaskPlaceOnEventList+0x28>
 8005618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800561c:	b672      	cpsid	i
 800561e:	f383 8811 	msr	BASEPRI, r3
 8005622:	f3bf 8f6f 	isb	sy
 8005626:	f3bf 8f4f 	dsb	sy
 800562a:	b662      	cpsie	i
 800562c:	60fb      	str	r3, [r7, #12]
 800562e:	e7fe      	b.n	800562e <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005630:	4b07      	ldr	r3, [pc, #28]	; (8005650 <vTaskPlaceOnEventList+0x48>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	3318      	adds	r3, #24
 8005636:	4619      	mov	r1, r3
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f7fe fc9e 	bl	8003f7a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800563e:	2101      	movs	r1, #1
 8005640:	6838      	ldr	r0, [r7, #0]
 8005642:	f000 fd57 	bl	80060f4 <prvAddCurrentTaskToDelayedList>
}
 8005646:	bf00      	nop
 8005648:	3710      	adds	r7, #16
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	20003cac 	.word	0x20003cac

08005654 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b086      	sub	sp, #24
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d10b      	bne.n	8005682 <xTaskRemoveFromEventList+0x2e>
 800566a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800566e:	b672      	cpsid	i
 8005670:	f383 8811 	msr	BASEPRI, r3
 8005674:	f3bf 8f6f 	isb	sy
 8005678:	f3bf 8f4f 	dsb	sy
 800567c:	b662      	cpsie	i
 800567e:	60fb      	str	r3, [r7, #12]
 8005680:	e7fe      	b.n	8005680 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	3318      	adds	r3, #24
 8005686:	4618      	mov	r0, r3
 8005688:	f7fe fcb0 	bl	8003fec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800568c:	4b1d      	ldr	r3, [pc, #116]	; (8005704 <xTaskRemoveFromEventList+0xb0>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d11c      	bne.n	80056ce <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	3304      	adds	r3, #4
 8005698:	4618      	mov	r0, r3
 800569a:	f7fe fca7 	bl	8003fec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a2:	2201      	movs	r2, #1
 80056a4:	409a      	lsls	r2, r3
 80056a6:	4b18      	ldr	r3, [pc, #96]	; (8005708 <xTaskRemoveFromEventList+0xb4>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	4a16      	ldr	r2, [pc, #88]	; (8005708 <xTaskRemoveFromEventList+0xb4>)
 80056ae:	6013      	str	r3, [r2, #0]
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056b4:	4613      	mov	r3, r2
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	4413      	add	r3, r2
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	4a13      	ldr	r2, [pc, #76]	; (800570c <xTaskRemoveFromEventList+0xb8>)
 80056be:	441a      	add	r2, r3
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	3304      	adds	r3, #4
 80056c4:	4619      	mov	r1, r3
 80056c6:	4610      	mov	r0, r2
 80056c8:	f7fe fc33 	bl	8003f32 <vListInsertEnd>
 80056cc:	e005      	b.n	80056da <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	3318      	adds	r3, #24
 80056d2:	4619      	mov	r1, r3
 80056d4:	480e      	ldr	r0, [pc, #56]	; (8005710 <xTaskRemoveFromEventList+0xbc>)
 80056d6:	f7fe fc2c 	bl	8003f32 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056de:	4b0d      	ldr	r3, [pc, #52]	; (8005714 <xTaskRemoveFromEventList+0xc0>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d905      	bls.n	80056f4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80056e8:	2301      	movs	r3, #1
 80056ea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80056ec:	4b0a      	ldr	r3, [pc, #40]	; (8005718 <xTaskRemoveFromEventList+0xc4>)
 80056ee:	2201      	movs	r2, #1
 80056f0:	601a      	str	r2, [r3, #0]
 80056f2:	e001      	b.n	80056f8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80056f4:	2300      	movs	r3, #0
 80056f6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80056f8:	697b      	ldr	r3, [r7, #20]
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3718      	adds	r7, #24
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	20003dd4 	.word	0x20003dd4
 8005708:	20003db4 	.word	0x20003db4
 800570c:	20003cb0 	.word	0x20003cb0
 8005710:	20003d6c 	.word	0x20003d6c
 8005714:	20003cac 	.word	0x20003cac
 8005718:	20003dc0 	.word	0x20003dc0

0800571c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005724:	4b06      	ldr	r3, [pc, #24]	; (8005740 <vTaskInternalSetTimeOutState+0x24>)
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800572c:	4b05      	ldr	r3, [pc, #20]	; (8005744 <vTaskInternalSetTimeOutState+0x28>)
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	605a      	str	r2, [r3, #4]
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr
 8005740:	20003dc4 	.word	0x20003dc4
 8005744:	20003db0 	.word	0x20003db0

08005748 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b088      	sub	sp, #32
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d10b      	bne.n	8005770 <xTaskCheckForTimeOut+0x28>
 8005758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575c:	b672      	cpsid	i
 800575e:	f383 8811 	msr	BASEPRI, r3
 8005762:	f3bf 8f6f 	isb	sy
 8005766:	f3bf 8f4f 	dsb	sy
 800576a:	b662      	cpsie	i
 800576c:	613b      	str	r3, [r7, #16]
 800576e:	e7fe      	b.n	800576e <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d10b      	bne.n	800578e <xTaskCheckForTimeOut+0x46>
 8005776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577a:	b672      	cpsid	i
 800577c:	f383 8811 	msr	BASEPRI, r3
 8005780:	f3bf 8f6f 	isb	sy
 8005784:	f3bf 8f4f 	dsb	sy
 8005788:	b662      	cpsie	i
 800578a:	60fb      	str	r3, [r7, #12]
 800578c:	e7fe      	b.n	800578c <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800578e:	f7fe fd63 	bl	8004258 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005792:	4b1d      	ldr	r3, [pc, #116]	; (8005808 <xTaskCheckForTimeOut+0xc0>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	69ba      	ldr	r2, [r7, #24]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057aa:	d102      	bne.n	80057b2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80057ac:	2300      	movs	r3, #0
 80057ae:	61fb      	str	r3, [r7, #28]
 80057b0:	e023      	b.n	80057fa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	4b15      	ldr	r3, [pc, #84]	; (800580c <xTaskCheckForTimeOut+0xc4>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d007      	beq.n	80057ce <xTaskCheckForTimeOut+0x86>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	69ba      	ldr	r2, [r7, #24]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d302      	bcc.n	80057ce <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80057c8:	2301      	movs	r3, #1
 80057ca:	61fb      	str	r3, [r7, #28]
 80057cc:	e015      	b.n	80057fa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	697a      	ldr	r2, [r7, #20]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d20b      	bcs.n	80057f0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	1ad2      	subs	r2, r2, r3
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f7ff ff99 	bl	800571c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80057ea:	2300      	movs	r3, #0
 80057ec:	61fb      	str	r3, [r7, #28]
 80057ee:	e004      	b.n	80057fa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	2200      	movs	r2, #0
 80057f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80057f6:	2301      	movs	r3, #1
 80057f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80057fa:	f7fe fd5f 	bl	80042bc <vPortExitCritical>

	return xReturn;
 80057fe:	69fb      	ldr	r3, [r7, #28]
}
 8005800:	4618      	mov	r0, r3
 8005802:	3720      	adds	r7, #32
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	20003db0 	.word	0x20003db0
 800580c:	20003dc4 	.word	0x20003dc4

08005810 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005810:	b480      	push	{r7}
 8005812:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005814:	4b03      	ldr	r3, [pc, #12]	; (8005824 <vTaskMissedYield+0x14>)
 8005816:	2201      	movs	r2, #1
 8005818:	601a      	str	r2, [r3, #0]
}
 800581a:	bf00      	nop
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr
 8005824:	20003dc0 	.word	0x20003dc0

08005828 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005830:	f000 f852 	bl	80058d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005834:	4b06      	ldr	r3, [pc, #24]	; (8005850 <prvIdleTask+0x28>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2b01      	cmp	r3, #1
 800583a:	d9f9      	bls.n	8005830 <prvIdleTask+0x8>
			{
				taskYIELD();
 800583c:	4b05      	ldr	r3, [pc, #20]	; (8005854 <prvIdleTask+0x2c>)
 800583e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005842:	601a      	str	r2, [r3, #0]
 8005844:	f3bf 8f4f 	dsb	sy
 8005848:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800584c:	e7f0      	b.n	8005830 <prvIdleTask+0x8>
 800584e:	bf00      	nop
 8005850:	20003cb0 	.word	0x20003cb0
 8005854:	e000ed04 	.word	0xe000ed04

08005858 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800585e:	2300      	movs	r3, #0
 8005860:	607b      	str	r3, [r7, #4]
 8005862:	e00c      	b.n	800587e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	4613      	mov	r3, r2
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	4413      	add	r3, r2
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	4a12      	ldr	r2, [pc, #72]	; (80058b8 <prvInitialiseTaskLists+0x60>)
 8005870:	4413      	add	r3, r2
 8005872:	4618      	mov	r0, r3
 8005874:	f7fe fb30 	bl	8003ed8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	3301      	adds	r3, #1
 800587c:	607b      	str	r3, [r7, #4]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2b06      	cmp	r3, #6
 8005882:	d9ef      	bls.n	8005864 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005884:	480d      	ldr	r0, [pc, #52]	; (80058bc <prvInitialiseTaskLists+0x64>)
 8005886:	f7fe fb27 	bl	8003ed8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800588a:	480d      	ldr	r0, [pc, #52]	; (80058c0 <prvInitialiseTaskLists+0x68>)
 800588c:	f7fe fb24 	bl	8003ed8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005890:	480c      	ldr	r0, [pc, #48]	; (80058c4 <prvInitialiseTaskLists+0x6c>)
 8005892:	f7fe fb21 	bl	8003ed8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005896:	480c      	ldr	r0, [pc, #48]	; (80058c8 <prvInitialiseTaskLists+0x70>)
 8005898:	f7fe fb1e 	bl	8003ed8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800589c:	480b      	ldr	r0, [pc, #44]	; (80058cc <prvInitialiseTaskLists+0x74>)
 800589e:	f7fe fb1b 	bl	8003ed8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80058a2:	4b0b      	ldr	r3, [pc, #44]	; (80058d0 <prvInitialiseTaskLists+0x78>)
 80058a4:	4a05      	ldr	r2, [pc, #20]	; (80058bc <prvInitialiseTaskLists+0x64>)
 80058a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80058a8:	4b0a      	ldr	r3, [pc, #40]	; (80058d4 <prvInitialiseTaskLists+0x7c>)
 80058aa:	4a05      	ldr	r2, [pc, #20]	; (80058c0 <prvInitialiseTaskLists+0x68>)
 80058ac:	601a      	str	r2, [r3, #0]
}
 80058ae:	bf00      	nop
 80058b0:	3708      	adds	r7, #8
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	20003cb0 	.word	0x20003cb0
 80058bc:	20003d3c 	.word	0x20003d3c
 80058c0:	20003d50 	.word	0x20003d50
 80058c4:	20003d6c 	.word	0x20003d6c
 80058c8:	20003d80 	.word	0x20003d80
 80058cc:	20003d98 	.word	0x20003d98
 80058d0:	20003d64 	.word	0x20003d64
 80058d4:	20003d68 	.word	0x20003d68

080058d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b082      	sub	sp, #8
 80058dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058de:	e019      	b.n	8005914 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80058e0:	f7fe fcba 	bl	8004258 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80058e4:	4b0f      	ldr	r3, [pc, #60]	; (8005924 <prvCheckTasksWaitingTermination+0x4c>)
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	3304      	adds	r3, #4
 80058f0:	4618      	mov	r0, r3
 80058f2:	f7fe fb7b 	bl	8003fec <uxListRemove>
				--uxCurrentNumberOfTasks;
 80058f6:	4b0c      	ldr	r3, [pc, #48]	; (8005928 <prvCheckTasksWaitingTermination+0x50>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	3b01      	subs	r3, #1
 80058fc:	4a0a      	ldr	r2, [pc, #40]	; (8005928 <prvCheckTasksWaitingTermination+0x50>)
 80058fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005900:	4b0a      	ldr	r3, [pc, #40]	; (800592c <prvCheckTasksWaitingTermination+0x54>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	3b01      	subs	r3, #1
 8005906:	4a09      	ldr	r2, [pc, #36]	; (800592c <prvCheckTasksWaitingTermination+0x54>)
 8005908:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800590a:	f7fe fcd7 	bl	80042bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 f80e 	bl	8005930 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005914:	4b05      	ldr	r3, [pc, #20]	; (800592c <prvCheckTasksWaitingTermination+0x54>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d1e1      	bne.n	80058e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800591c:	bf00      	nop
 800591e:	3708      	adds	r7, #8
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	20003d80 	.word	0x20003d80
 8005928:	20003dac 	.word	0x20003dac
 800592c:	20003d94 	.word	0x20003d94

08005930 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800593c:	4618      	mov	r0, r3
 800593e:	f7fe f9b3 	bl	8003ca8 <vPortFree>
			vPortFree( pxTCB );
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f7fe f9b0 	bl	8003ca8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005948:	bf00      	nop
 800594a:	3708      	adds	r7, #8
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005956:	4b0f      	ldr	r3, [pc, #60]	; (8005994 <prvResetNextTaskUnblockTime+0x44>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d101      	bne.n	8005964 <prvResetNextTaskUnblockTime+0x14>
 8005960:	2301      	movs	r3, #1
 8005962:	e000      	b.n	8005966 <prvResetNextTaskUnblockTime+0x16>
 8005964:	2300      	movs	r3, #0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d004      	beq.n	8005974 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800596a:	4b0b      	ldr	r3, [pc, #44]	; (8005998 <prvResetNextTaskUnblockTime+0x48>)
 800596c:	f04f 32ff 	mov.w	r2, #4294967295
 8005970:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005972:	e008      	b.n	8005986 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005974:	4b07      	ldr	r3, [pc, #28]	; (8005994 <prvResetNextTaskUnblockTime+0x44>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	4a05      	ldr	r2, [pc, #20]	; (8005998 <prvResetNextTaskUnblockTime+0x48>)
 8005984:	6013      	str	r3, [r2, #0]
}
 8005986:	bf00      	nop
 8005988:	370c      	adds	r7, #12
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	20003d64 	.word	0x20003d64
 8005998:	20003dcc 	.word	0x20003dcc

0800599c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80059a2:	4b0b      	ldr	r3, [pc, #44]	; (80059d0 <xTaskGetSchedulerState+0x34>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d102      	bne.n	80059b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80059aa:	2301      	movs	r3, #1
 80059ac:	607b      	str	r3, [r7, #4]
 80059ae:	e008      	b.n	80059c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059b0:	4b08      	ldr	r3, [pc, #32]	; (80059d4 <xTaskGetSchedulerState+0x38>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d102      	bne.n	80059be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80059b8:	2302      	movs	r3, #2
 80059ba:	607b      	str	r3, [r7, #4]
 80059bc:	e001      	b.n	80059c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80059be:	2300      	movs	r3, #0
 80059c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80059c2:	687b      	ldr	r3, [r7, #4]
	}
 80059c4:	4618      	mov	r0, r3
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr
 80059d0:	20003db8 	.word	0x20003db8
 80059d4:	20003dd4 	.word	0x20003dd4

080059d8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80059e4:	2300      	movs	r3, #0
 80059e6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d06e      	beq.n	8005acc <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f2:	4b39      	ldr	r3, [pc, #228]	; (8005ad8 <xTaskPriorityInherit+0x100>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d25e      	bcs.n	8005aba <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	db06      	blt.n	8005a12 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a04:	4b34      	ldr	r3, [pc, #208]	; (8005ad8 <xTaskPriorityInherit+0x100>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a0a:	f1c3 0207 	rsb	r2, r3, #7
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	6959      	ldr	r1, [r3, #20]
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	4413      	add	r3, r2
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	4a2e      	ldr	r2, [pc, #184]	; (8005adc <xTaskPriorityInherit+0x104>)
 8005a24:	4413      	add	r3, r2
 8005a26:	4299      	cmp	r1, r3
 8005a28:	d101      	bne.n	8005a2e <xTaskPriorityInherit+0x56>
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e000      	b.n	8005a30 <xTaskPriorityInherit+0x58>
 8005a2e:	2300      	movs	r3, #0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d03a      	beq.n	8005aaa <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	3304      	adds	r3, #4
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f7fe fad7 	bl	8003fec <uxListRemove>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d115      	bne.n	8005a70 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a48:	4924      	ldr	r1, [pc, #144]	; (8005adc <xTaskPriorityInherit+0x104>)
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	4413      	add	r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	440b      	add	r3, r1
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d10a      	bne.n	8005a70 <xTaskPriorityInherit+0x98>
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5e:	2201      	movs	r2, #1
 8005a60:	fa02 f303 	lsl.w	r3, r2, r3
 8005a64:	43da      	mvns	r2, r3
 8005a66:	4b1e      	ldr	r3, [pc, #120]	; (8005ae0 <xTaskPriorityInherit+0x108>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	4a1c      	ldr	r2, [pc, #112]	; (8005ae0 <xTaskPriorityInherit+0x108>)
 8005a6e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005a70:	4b19      	ldr	r3, [pc, #100]	; (8005ad8 <xTaskPriorityInherit+0x100>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a7e:	2201      	movs	r2, #1
 8005a80:	409a      	lsls	r2, r3
 8005a82:	4b17      	ldr	r3, [pc, #92]	; (8005ae0 <xTaskPriorityInherit+0x108>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	4a15      	ldr	r2, [pc, #84]	; (8005ae0 <xTaskPriorityInherit+0x108>)
 8005a8a:	6013      	str	r3, [r2, #0]
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a90:	4613      	mov	r3, r2
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	4413      	add	r3, r2
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	4a10      	ldr	r2, [pc, #64]	; (8005adc <xTaskPriorityInherit+0x104>)
 8005a9a:	441a      	add	r2, r3
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	3304      	adds	r3, #4
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	4610      	mov	r0, r2
 8005aa4:	f7fe fa45 	bl	8003f32 <vListInsertEnd>
 8005aa8:	e004      	b.n	8005ab4 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005aaa:	4b0b      	ldr	r3, [pc, #44]	; (8005ad8 <xTaskPriorityInherit+0x100>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	60fb      	str	r3, [r7, #12]
 8005ab8:	e008      	b.n	8005acc <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005abe:	4b06      	ldr	r3, [pc, #24]	; (8005ad8 <xTaskPriorityInherit+0x100>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d201      	bcs.n	8005acc <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005acc:	68fb      	ldr	r3, [r7, #12]
	}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3710      	adds	r7, #16
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	20003cac 	.word	0x20003cac
 8005adc:	20003cb0 	.word	0x20003cb0
 8005ae0:	20003db4 	.word	0x20003db4

08005ae4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b086      	sub	sp, #24
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005af0:	2300      	movs	r3, #0
 8005af2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d070      	beq.n	8005bdc <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005afa:	4b3b      	ldr	r3, [pc, #236]	; (8005be8 <xTaskPriorityDisinherit+0x104>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	693a      	ldr	r2, [r7, #16]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d00b      	beq.n	8005b1c <xTaskPriorityDisinherit+0x38>
 8005b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b08:	b672      	cpsid	i
 8005b0a:	f383 8811 	msr	BASEPRI, r3
 8005b0e:	f3bf 8f6f 	isb	sy
 8005b12:	f3bf 8f4f 	dsb	sy
 8005b16:	b662      	cpsie	i
 8005b18:	60fb      	str	r3, [r7, #12]
 8005b1a:	e7fe      	b.n	8005b1a <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d10b      	bne.n	8005b3c <xTaskPriorityDisinherit+0x58>
 8005b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b28:	b672      	cpsid	i
 8005b2a:	f383 8811 	msr	BASEPRI, r3
 8005b2e:	f3bf 8f6f 	isb	sy
 8005b32:	f3bf 8f4f 	dsb	sy
 8005b36:	b662      	cpsie	i
 8005b38:	60bb      	str	r3, [r7, #8]
 8005b3a:	e7fe      	b.n	8005b3a <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b40:	1e5a      	subs	r2, r3, #1
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d044      	beq.n	8005bdc <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d140      	bne.n	8005bdc <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	3304      	adds	r3, #4
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f7fe fa44 	bl	8003fec <uxListRemove>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d115      	bne.n	8005b96 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b6e:	491f      	ldr	r1, [pc, #124]	; (8005bec <xTaskPriorityDisinherit+0x108>)
 8005b70:	4613      	mov	r3, r2
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4413      	add	r3, r2
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	440b      	add	r3, r1
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d10a      	bne.n	8005b96 <xTaskPriorityDisinherit+0xb2>
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b84:	2201      	movs	r2, #1
 8005b86:	fa02 f303 	lsl.w	r3, r2, r3
 8005b8a:	43da      	mvns	r2, r3
 8005b8c:	4b18      	ldr	r3, [pc, #96]	; (8005bf0 <xTaskPriorityDisinherit+0x10c>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4013      	ands	r3, r2
 8005b92:	4a17      	ldr	r2, [pc, #92]	; (8005bf0 <xTaskPriorityDisinherit+0x10c>)
 8005b94:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba2:	f1c3 0207 	rsb	r2, r3, #7
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bae:	2201      	movs	r2, #1
 8005bb0:	409a      	lsls	r2, r3
 8005bb2:	4b0f      	ldr	r3, [pc, #60]	; (8005bf0 <xTaskPriorityDisinherit+0x10c>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	4a0d      	ldr	r2, [pc, #52]	; (8005bf0 <xTaskPriorityDisinherit+0x10c>)
 8005bba:	6013      	str	r3, [r2, #0]
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	4413      	add	r3, r2
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	4a08      	ldr	r2, [pc, #32]	; (8005bec <xTaskPriorityDisinherit+0x108>)
 8005bca:	441a      	add	r2, r3
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	3304      	adds	r3, #4
 8005bd0:	4619      	mov	r1, r3
 8005bd2:	4610      	mov	r0, r2
 8005bd4:	f7fe f9ad 	bl	8003f32 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005bdc:	697b      	ldr	r3, [r7, #20]
	}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3718      	adds	r7, #24
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	20003cac 	.word	0x20003cac
 8005bec:	20003cb0 	.word	0x20003cb0
 8005bf0:	20003db4 	.word	0x20003db4

08005bf4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b088      	sub	sp, #32
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005c02:	2301      	movs	r3, #1
 8005c04:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	f000 808a 	beq.w	8005d22 <vTaskPriorityDisinheritAfterTimeout+0x12e>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d10b      	bne.n	8005c2e <vTaskPriorityDisinheritAfterTimeout+0x3a>
 8005c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1a:	b672      	cpsid	i
 8005c1c:	f383 8811 	msr	BASEPRI, r3
 8005c20:	f3bf 8f6f 	isb	sy
 8005c24:	f3bf 8f4f 	dsb	sy
 8005c28:	b662      	cpsie	i
 8005c2a:	60fb      	str	r3, [r7, #12]
 8005c2c:	e7fe      	b.n	8005c2c <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c32:	683a      	ldr	r2, [r7, #0]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d902      	bls.n	8005c3e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	61fb      	str	r3, [r7, #28]
 8005c3c:	e002      	b.n	8005c44 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c42:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c48:	69fa      	ldr	r2, [r7, #28]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d069      	beq.n	8005d22 <vTaskPriorityDisinheritAfterTimeout+0x12e>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d164      	bne.n	8005d22 <vTaskPriorityDisinheritAfterTimeout+0x12e>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005c58:	4b34      	ldr	r3, [pc, #208]	; (8005d2c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	69ba      	ldr	r2, [r7, #24]
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d10b      	bne.n	8005c7a <vTaskPriorityDisinheritAfterTimeout+0x86>
 8005c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c66:	b672      	cpsid	i
 8005c68:	f383 8811 	msr	BASEPRI, r3
 8005c6c:	f3bf 8f6f 	isb	sy
 8005c70:	f3bf 8f4f 	dsb	sy
 8005c74:	b662      	cpsie	i
 8005c76:	60bb      	str	r3, [r7, #8]
 8005c78:	e7fe      	b.n	8005c78 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	69fa      	ldr	r2, [r7, #28]
 8005c84:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	699b      	ldr	r3, [r3, #24]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	db04      	blt.n	8005c98 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	f1c3 0207 	rsb	r2, r3, #7
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	6959      	ldr	r1, [r3, #20]
 8005c9c:	693a      	ldr	r2, [r7, #16]
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	4413      	add	r3, r2
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	4a22      	ldr	r2, [pc, #136]	; (8005d30 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8005ca8:	4413      	add	r3, r2
 8005caa:	4299      	cmp	r1, r3
 8005cac:	d101      	bne.n	8005cb2 <vTaskPriorityDisinheritAfterTimeout+0xbe>
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e000      	b.n	8005cb4 <vTaskPriorityDisinheritAfterTimeout+0xc0>
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d034      	beq.n	8005d22 <vTaskPriorityDisinheritAfterTimeout+0x12e>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	3304      	adds	r3, #4
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f7fe f995 	bl	8003fec <uxListRemove>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d115      	bne.n	8005cf4 <vTaskPriorityDisinheritAfterTimeout+0x100>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ccc:	4918      	ldr	r1, [pc, #96]	; (8005d30 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8005cce:	4613      	mov	r3, r2
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	4413      	add	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	440b      	add	r3, r1
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d10a      	bne.n	8005cf4 <vTaskPriorityDisinheritAfterTimeout+0x100>
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce8:	43da      	mvns	r2, r3
 8005cea:	4b12      	ldr	r3, [pc, #72]	; (8005d34 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4013      	ands	r3, r2
 8005cf0:	4a10      	ldr	r2, [pc, #64]	; (8005d34 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8005cf2:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	409a      	lsls	r2, r3
 8005cfc:	4b0d      	ldr	r3, [pc, #52]	; (8005d34 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	4a0c      	ldr	r2, [pc, #48]	; (8005d34 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8005d04:	6013      	str	r3, [r2, #0]
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	4413      	add	r3, r2
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	4a07      	ldr	r2, [pc, #28]	; (8005d30 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8005d14:	441a      	add	r2, r3
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	3304      	adds	r3, #4
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	4610      	mov	r0, r2
 8005d1e:	f7fe f908 	bl	8003f32 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d22:	bf00      	nop
 8005d24:	3720      	adds	r7, #32
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	20003cac 	.word	0x20003cac
 8005d30:	20003cb0 	.word	0x20003cb0
 8005d34:	20003db4 	.word	0x20003db4

08005d38 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8005d38:	b480      	push	{r7}
 8005d3a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005d3c:	4b07      	ldr	r3, [pc, #28]	; (8005d5c <pvTaskIncrementMutexHeldCount+0x24>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d004      	beq.n	8005d4e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005d44:	4b05      	ldr	r3, [pc, #20]	; (8005d5c <pvTaskIncrementMutexHeldCount+0x24>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d4a:	3201      	adds	r2, #1
 8005d4c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8005d4e:	4b03      	ldr	r3, [pc, #12]	; (8005d5c <pvTaskIncrementMutexHeldCount+0x24>)
 8005d50:	681b      	ldr	r3, [r3, #0]
	}
 8005d52:	4618      	mov	r0, r3
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr
 8005d5c:	20003cac 	.word	0x20003cac

08005d60 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b086      	sub	sp, #24
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	607a      	str	r2, [r7, #4]
 8005d6c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8005d6e:	f7fe fa73 	bl	8004258 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005d72:	4b26      	ldr	r3, [pc, #152]	; (8005e0c <xTaskNotifyWait+0xac>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d01a      	beq.n	8005db6 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8005d80:	4b22      	ldr	r3, [pc, #136]	; (8005e0c <xTaskNotifyWait+0xac>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	43d2      	mvns	r2, r2
 8005d8a:	400a      	ands	r2, r1
 8005d8c:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8005d8e:	4b1f      	ldr	r3, [pc, #124]	; (8005e0c <xTaskNotifyWait+0xac>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00b      	beq.n	8005db6 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005d9e:	2101      	movs	r1, #1
 8005da0:	6838      	ldr	r0, [r7, #0]
 8005da2:	f000 f9a7 	bl	80060f4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8005da6:	4b1a      	ldr	r3, [pc, #104]	; (8005e10 <xTaskNotifyWait+0xb0>)
 8005da8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dac:	601a      	str	r2, [r3, #0]
 8005dae:	f3bf 8f4f 	dsb	sy
 8005db2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005db6:	f7fe fa81 	bl	80042bc <vPortExitCritical>

		taskENTER_CRITICAL();
 8005dba:	f7fe fa4d 	bl	8004258 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d004      	beq.n	8005dce <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8005dc4:	4b11      	ldr	r3, [pc, #68]	; (8005e0c <xTaskNotifyWait+0xac>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005dce:	4b0f      	ldr	r3, [pc, #60]	; (8005e0c <xTaskNotifyWait+0xac>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d002      	beq.n	8005de2 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	617b      	str	r3, [r7, #20]
 8005de0:	e008      	b.n	8005df4 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8005de2:	4b0a      	ldr	r3, [pc, #40]	; (8005e0c <xTaskNotifyWait+0xac>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005de8:	68ba      	ldr	r2, [r7, #8]
 8005dea:	43d2      	mvns	r2, r2
 8005dec:	400a      	ands	r2, r1
 8005dee:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 8005df0:	2301      	movs	r3, #1
 8005df2:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005df4:	4b05      	ldr	r3, [pc, #20]	; (8005e0c <xTaskNotifyWait+0xac>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8005dfe:	f7fe fa5d 	bl	80042bc <vPortExitCritical>

		return xReturn;
 8005e02:	697b      	ldr	r3, [r7, #20]
	}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3718      	adds	r7, #24
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	20003cac 	.word	0x20003cac
 8005e10:	e000ed04 	.word	0xe000ed04

08005e14 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b08a      	sub	sp, #40	; 0x28
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	60b9      	str	r1, [r7, #8]
 8005e1e:	603b      	str	r3, [r7, #0]
 8005e20:	4613      	mov	r3, r2
 8005e22:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8005e24:	2301      	movs	r3, #1
 8005e26:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d10b      	bne.n	8005e46 <xTaskGenericNotify+0x32>
 8005e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e32:	b672      	cpsid	i
 8005e34:	f383 8811 	msr	BASEPRI, r3
 8005e38:	f3bf 8f6f 	isb	sy
 8005e3c:	f3bf 8f4f 	dsb	sy
 8005e40:	b662      	cpsie	i
 8005e42:	61bb      	str	r3, [r7, #24]
 8005e44:	e7fe      	b.n	8005e44 <xTaskGenericNotify+0x30>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8005e4a:	f7fe fa05 	bl	8004258 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d003      	beq.n	8005e5c <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005e54:	6a3b      	ldr	r3, [r7, #32]
 8005e56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005e5c:	6a3b      	ldr	r3, [r7, #32]
 8005e5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e62:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005e64:	6a3b      	ldr	r3, [r7, #32]
 8005e66:	2202      	movs	r2, #2
 8005e68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8005e6c:	79fb      	ldrb	r3, [r7, #7]
 8005e6e:	2b04      	cmp	r3, #4
 8005e70:	d827      	bhi.n	8005ec2 <xTaskGenericNotify+0xae>
 8005e72:	a201      	add	r2, pc, #4	; (adr r2, 8005e78 <xTaskGenericNotify+0x64>)
 8005e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e78:	08005ec3 	.word	0x08005ec3
 8005e7c:	08005e8d 	.word	0x08005e8d
 8005e80:	08005e9b 	.word	0x08005e9b
 8005e84:	08005ea7 	.word	0x08005ea7
 8005e88:	08005eaf 	.word	0x08005eaf
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005e8c:	6a3b      	ldr	r3, [r7, #32]
 8005e8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	431a      	orrs	r2, r3
 8005e94:	6a3b      	ldr	r3, [r7, #32]
 8005e96:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8005e98:	e013      	b.n	8005ec2 <xTaskGenericNotify+0xae>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8005e9a:	6a3b      	ldr	r3, [r7, #32]
 8005e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e9e:	1c5a      	adds	r2, r3, #1
 8005ea0:	6a3b      	ldr	r3, [r7, #32]
 8005ea2:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8005ea4:	e00d      	b.n	8005ec2 <xTaskGenericNotify+0xae>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8005ea6:	6a3b      	ldr	r3, [r7, #32]
 8005ea8:	68ba      	ldr	r2, [r7, #8]
 8005eaa:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8005eac:	e009      	b.n	8005ec2 <xTaskGenericNotify+0xae>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005eae:	7ffb      	ldrb	r3, [r7, #31]
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d003      	beq.n	8005ebc <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8005eb4:	6a3b      	ldr	r3, [r7, #32]
 8005eb6:	68ba      	ldr	r2, [r7, #8]
 8005eb8:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8005eba:	e001      	b.n	8005ec0 <xTaskGenericNotify+0xac>
						xReturn = pdFAIL;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8005ec0:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005ec2:	7ffb      	ldrb	r3, [r7, #31]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d13a      	bne.n	8005f3e <xTaskGenericNotify+0x12a>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ec8:	6a3b      	ldr	r3, [r7, #32]
 8005eca:	3304      	adds	r3, #4
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f7fe f88d 	bl	8003fec <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8005ed2:	6a3b      	ldr	r3, [r7, #32]
 8005ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	409a      	lsls	r2, r3
 8005eda:	4b1c      	ldr	r3, [pc, #112]	; (8005f4c <xTaskGenericNotify+0x138>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	4a1a      	ldr	r2, [pc, #104]	; (8005f4c <xTaskGenericNotify+0x138>)
 8005ee2:	6013      	str	r3, [r2, #0]
 8005ee4:	6a3b      	ldr	r3, [r7, #32]
 8005ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ee8:	4613      	mov	r3, r2
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	4413      	add	r3, r2
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	4a17      	ldr	r2, [pc, #92]	; (8005f50 <xTaskGenericNotify+0x13c>)
 8005ef2:	441a      	add	r2, r3
 8005ef4:	6a3b      	ldr	r3, [r7, #32]
 8005ef6:	3304      	adds	r3, #4
 8005ef8:	4619      	mov	r1, r3
 8005efa:	4610      	mov	r0, r2
 8005efc:	f7fe f819 	bl	8003f32 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005f00:	6a3b      	ldr	r3, [r7, #32]
 8005f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d00b      	beq.n	8005f20 <xTaskGenericNotify+0x10c>
 8005f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f0c:	b672      	cpsid	i
 8005f0e:	f383 8811 	msr	BASEPRI, r3
 8005f12:	f3bf 8f6f 	isb	sy
 8005f16:	f3bf 8f4f 	dsb	sy
 8005f1a:	b662      	cpsie	i
 8005f1c:	617b      	str	r3, [r7, #20]
 8005f1e:	e7fe      	b.n	8005f1e <xTaskGenericNotify+0x10a>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005f20:	6a3b      	ldr	r3, [r7, #32]
 8005f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f24:	4b0b      	ldr	r3, [pc, #44]	; (8005f54 <xTaskGenericNotify+0x140>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d907      	bls.n	8005f3e <xTaskGenericNotify+0x12a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8005f2e:	4b0a      	ldr	r3, [pc, #40]	; (8005f58 <xTaskGenericNotify+0x144>)
 8005f30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f34:	601a      	str	r2, [r3, #0]
 8005f36:	f3bf 8f4f 	dsb	sy
 8005f3a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005f3e:	f7fe f9bd 	bl	80042bc <vPortExitCritical>

		return xReturn;
 8005f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3728      	adds	r7, #40	; 0x28
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	20003db4 	.word	0x20003db4
 8005f50:	20003cb0 	.word	0x20003cb0
 8005f54:	20003cac 	.word	0x20003cac
 8005f58:	e000ed04 	.word	0xe000ed04

08005f5c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b08e      	sub	sp, #56	; 0x38
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	603b      	str	r3, [r7, #0]
 8005f68:	4613      	mov	r3, r2
 8005f6a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d10b      	bne.n	8005f8e <xTaskGenericNotifyFromISR+0x32>
 8005f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7a:	b672      	cpsid	i
 8005f7c:	f383 8811 	msr	BASEPRI, r3
 8005f80:	f3bf 8f6f 	isb	sy
 8005f84:	f3bf 8f4f 	dsb	sy
 8005f88:	b662      	cpsie	i
 8005f8a:	627b      	str	r3, [r7, #36]	; 0x24
 8005f8c:	e7fe      	b.n	8005f8c <xTaskGenericNotifyFromISR+0x30>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f8e:	f7fe fa43 	bl	8004418 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8005f96:	f3ef 8211 	mrs	r2, BASEPRI
 8005f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f9e:	b672      	cpsid	i
 8005fa0:	f383 8811 	msr	BASEPRI, r3
 8005fa4:	f3bf 8f6f 	isb	sy
 8005fa8:	f3bf 8f4f 	dsb	sy
 8005fac:	b662      	cpsie	i
 8005fae:	623a      	str	r2, [r7, #32]
 8005fb0:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8005fb2:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d003      	beq.n	8005fc4 <xTaskGenericNotifyFromISR+0x68>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005fca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd0:	2202      	movs	r2, #2
 8005fd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8005fd6:	79fb      	ldrb	r3, [r7, #7]
 8005fd8:	2b04      	cmp	r3, #4
 8005fda:	d829      	bhi.n	8006030 <xTaskGenericNotifyFromISR+0xd4>
 8005fdc:	a201      	add	r2, pc, #4	; (adr r2, 8005fe4 <xTaskGenericNotifyFromISR+0x88>)
 8005fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe2:	bf00      	nop
 8005fe4:	08006031 	.word	0x08006031
 8005fe8:	08005ff9 	.word	0x08005ff9
 8005fec:	08006007 	.word	0x08006007
 8005ff0:	08006013 	.word	0x08006013
 8005ff4:	0800601b 	.word	0x0800601b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	431a      	orrs	r2, r3
 8006000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006002:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8006004:	e014      	b.n	8006030 <xTaskGenericNotifyFromISR+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8006006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800600a:	1c5a      	adds	r2, r3, #1
 800600c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8006010:	e00e      	b.n	8006030 <xTaskGenericNotifyFromISR+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8006012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006014:	68ba      	ldr	r2, [r7, #8]
 8006016:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8006018:	e00a      	b.n	8006030 <xTaskGenericNotifyFromISR+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800601a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800601e:	2b02      	cmp	r3, #2
 8006020:	d003      	beq.n	800602a <xTaskGenericNotifyFromISR+0xce>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8006022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006024:	68ba      	ldr	r2, [r7, #8]
 8006026:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8006028:	e001      	b.n	800602e <xTaskGenericNotifyFromISR+0xd2>
						xReturn = pdFAIL;
 800602a:	2300      	movs	r3, #0
 800602c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800602e:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006030:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006034:	2b01      	cmp	r3, #1
 8006036:	d147      	bne.n	80060c8 <xTaskGenericNotifyFromISR+0x16c>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00b      	beq.n	8006058 <xTaskGenericNotifyFromISR+0xfc>
	__asm volatile
 8006040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006044:	b672      	cpsid	i
 8006046:	f383 8811 	msr	BASEPRI, r3
 800604a:	f3bf 8f6f 	isb	sy
 800604e:	f3bf 8f4f 	dsb	sy
 8006052:	b662      	cpsie	i
 8006054:	61bb      	str	r3, [r7, #24]
 8006056:	e7fe      	b.n	8006056 <xTaskGenericNotifyFromISR+0xfa>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006058:	4b20      	ldr	r3, [pc, #128]	; (80060dc <xTaskGenericNotifyFromISR+0x180>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d11c      	bne.n	800609a <xTaskGenericNotifyFromISR+0x13e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006062:	3304      	adds	r3, #4
 8006064:	4618      	mov	r0, r3
 8006066:	f7fd ffc1 	bl	8003fec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800606a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800606e:	2201      	movs	r2, #1
 8006070:	409a      	lsls	r2, r3
 8006072:	4b1b      	ldr	r3, [pc, #108]	; (80060e0 <xTaskGenericNotifyFromISR+0x184>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4313      	orrs	r3, r2
 8006078:	4a19      	ldr	r2, [pc, #100]	; (80060e0 <xTaskGenericNotifyFromISR+0x184>)
 800607a:	6013      	str	r3, [r2, #0]
 800607c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006080:	4613      	mov	r3, r2
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	4413      	add	r3, r2
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	4a16      	ldr	r2, [pc, #88]	; (80060e4 <xTaskGenericNotifyFromISR+0x188>)
 800608a:	441a      	add	r2, r3
 800608c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608e:	3304      	adds	r3, #4
 8006090:	4619      	mov	r1, r3
 8006092:	4610      	mov	r0, r2
 8006094:	f7fd ff4d 	bl	8003f32 <vListInsertEnd>
 8006098:	e005      	b.n	80060a6 <xTaskGenericNotifyFromISR+0x14a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800609a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609c:	3318      	adds	r3, #24
 800609e:	4619      	mov	r1, r3
 80060a0:	4811      	ldr	r0, [pc, #68]	; (80060e8 <xTaskGenericNotifyFromISR+0x18c>)
 80060a2:	f7fd ff46 	bl	8003f32 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80060a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060aa:	4b10      	ldr	r3, [pc, #64]	; (80060ec <xTaskGenericNotifyFromISR+0x190>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d909      	bls.n	80060c8 <xTaskGenericNotifyFromISR+0x16c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80060b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d003      	beq.n	80060c2 <xTaskGenericNotifyFromISR+0x166>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80060ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060bc:	2201      	movs	r2, #1
 80060be:	601a      	str	r2, [r3, #0]
 80060c0:	e002      	b.n	80060c8 <xTaskGenericNotifyFromISR+0x16c>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 80060c2:	4b0b      	ldr	r3, [pc, #44]	; (80060f0 <xTaskGenericNotifyFromISR+0x194>)
 80060c4:	2201      	movs	r2, #1
 80060c6:	601a      	str	r2, [r3, #0]
 80060c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ca:	617b      	str	r3, [r7, #20]
	__asm volatile
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80060d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3738      	adds	r7, #56	; 0x38
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	20003dd4 	.word	0x20003dd4
 80060e0:	20003db4 	.word	0x20003db4
 80060e4:	20003cb0 	.word	0x20003cb0
 80060e8:	20003d6c 	.word	0x20003d6c
 80060ec:	20003cac 	.word	0x20003cac
 80060f0:	20003dc0 	.word	0x20003dc0

080060f4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80060fe:	4b29      	ldr	r3, [pc, #164]	; (80061a4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006104:	4b28      	ldr	r3, [pc, #160]	; (80061a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	3304      	adds	r3, #4
 800610a:	4618      	mov	r0, r3
 800610c:	f7fd ff6e 	bl	8003fec <uxListRemove>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d10b      	bne.n	800612e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006116:	4b24      	ldr	r3, [pc, #144]	; (80061a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800611c:	2201      	movs	r2, #1
 800611e:	fa02 f303 	lsl.w	r3, r2, r3
 8006122:	43da      	mvns	r2, r3
 8006124:	4b21      	ldr	r3, [pc, #132]	; (80061ac <prvAddCurrentTaskToDelayedList+0xb8>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4013      	ands	r3, r2
 800612a:	4a20      	ldr	r2, [pc, #128]	; (80061ac <prvAddCurrentTaskToDelayedList+0xb8>)
 800612c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006134:	d10a      	bne.n	800614c <prvAddCurrentTaskToDelayedList+0x58>
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d007      	beq.n	800614c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800613c:	4b1a      	ldr	r3, [pc, #104]	; (80061a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	3304      	adds	r3, #4
 8006142:	4619      	mov	r1, r3
 8006144:	481a      	ldr	r0, [pc, #104]	; (80061b0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006146:	f7fd fef4 	bl	8003f32 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800614a:	e026      	b.n	800619a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4413      	add	r3, r2
 8006152:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006154:	4b14      	ldr	r3, [pc, #80]	; (80061a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800615c:	68ba      	ldr	r2, [r7, #8]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	429a      	cmp	r2, r3
 8006162:	d209      	bcs.n	8006178 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006164:	4b13      	ldr	r3, [pc, #76]	; (80061b4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	4b0f      	ldr	r3, [pc, #60]	; (80061a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	3304      	adds	r3, #4
 800616e:	4619      	mov	r1, r3
 8006170:	4610      	mov	r0, r2
 8006172:	f7fd ff02 	bl	8003f7a <vListInsert>
}
 8006176:	e010      	b.n	800619a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006178:	4b0f      	ldr	r3, [pc, #60]	; (80061b8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	4b0a      	ldr	r3, [pc, #40]	; (80061a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	3304      	adds	r3, #4
 8006182:	4619      	mov	r1, r3
 8006184:	4610      	mov	r0, r2
 8006186:	f7fd fef8 	bl	8003f7a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800618a:	4b0c      	ldr	r3, [pc, #48]	; (80061bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	68ba      	ldr	r2, [r7, #8]
 8006190:	429a      	cmp	r2, r3
 8006192:	d202      	bcs.n	800619a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006194:	4a09      	ldr	r2, [pc, #36]	; (80061bc <prvAddCurrentTaskToDelayedList+0xc8>)
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	6013      	str	r3, [r2, #0]
}
 800619a:	bf00      	nop
 800619c:	3710      	adds	r7, #16
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	20003db0 	.word	0x20003db0
 80061a8:	20003cac 	.word	0x20003cac
 80061ac:	20003db4 	.word	0x20003db4
 80061b0:	20003d98 	.word	0x20003d98
 80061b4:	20003d68 	.word	0x20003d68
 80061b8:	20003d64 	.word	0x20003d64
 80061bc:	20003dcc 	.word	0x20003dcc

080061c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80061c0:	b5b0      	push	{r4, r5, r7, lr}
 80061c2:	b0a0      	sub	sp, #128	; 0x80
 80061c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	init(&vector);
 80061c6:	4844      	ldr	r0, [pc, #272]	; (80062d8 <main+0x118>)
 80061c8:	f000 fed4 	bl	8006f74 <init>
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80061cc:	f7fa f9f0 	bl	80005b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80061d0:	f000 f8a2 	bl	8006318 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80061d4:	f000 fa42 	bl	800665c <MX_GPIO_Init>
  MX_RNG_Init();
 80061d8:	f000 f934 	bl	8006444 <MX_RNG_Init>
  MX_USART1_UART_Init();
 80061dc:	f000 fa0e 	bl	80065fc <MX_USART1_UART_Init>
  MX_TIM5_Init();
 80061e0:	f000 f9bc 	bl	800655c <MX_TIM5_Init>
  MX_TIM3_Init();
 80061e4:	f000 f942 	bl	800646c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim5);
 80061e8:	483c      	ldr	r0, [pc, #240]	; (80062dc <main+0x11c>)
 80061ea:	f7fb fe33 	bl	8001e54 <HAL_TIM_Base_Start_IT>
HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 80061ee:	2100      	movs	r1, #0
 80061f0:	483b      	ldr	r0, [pc, #236]	; (80062e0 <main+0x120>)
 80061f2:	f7fb fe8f 	bl	8001f14 <HAL_TIM_PWM_Start_IT>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of Vector */
  osMutexDef(Vector);
 80061f6:	2300      	movs	r3, #0
 80061f8:	67fb      	str	r3, [r7, #124]	; 0x7c
  VectorHandle = osMutexCreate(osMutex(Vector));
 80061fa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80061fe:	4618      	mov	r0, r3
 8006200:	f7fd fbfa 	bl	80039f8 <osMutexCreate>
 8006204:	4602      	mov	r2, r0
 8006206:	4b37      	ldr	r3, [pc, #220]	; (80062e4 <main+0x124>)
 8006208:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 800620a:	4b37      	ldr	r3, [pc, #220]	; (80062e8 <main+0x128>)
 800620c:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8006210:	461d      	mov	r5, r3
 8006212:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006214:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006216:	682b      	ldr	r3, [r5, #0]
 8006218:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800621a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800621e:	2100      	movs	r1, #0
 8006220:	4618      	mov	r0, r3
 8006222:	f7fd fb21 	bl	8003868 <osThreadCreate>
 8006226:	4602      	mov	r2, r0
 8006228:	4b30      	ldr	r3, [pc, #192]	; (80062ec <main+0x12c>)
 800622a:	601a      	str	r2, [r3, #0]

  /* definition and creation of Printer */
  osThreadDef(Printer, StartPrinter, osPriorityNormal, 0, 512);
 800622c:	4b30      	ldr	r3, [pc, #192]	; (80062f0 <main+0x130>)
 800622e:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8006232:	461d      	mov	r5, r3
 8006234:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006236:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006238:	682b      	ldr	r3, [r5, #0]
 800623a:	6023      	str	r3, [r4, #0]
  PrinterHandle = osThreadCreate(osThread(Printer), NULL);
 800623c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006240:	2100      	movs	r1, #0
 8006242:	4618      	mov	r0, r3
 8006244:	f7fd fb10 	bl	8003868 <osThreadCreate>
 8006248:	4602      	mov	r2, r0
 800624a:	4b2a      	ldr	r3, [pc, #168]	; (80062f4 <main+0x134>)
 800624c:	601a      	str	r2, [r3, #0]

  /* definition and creation of PushBack */
  osThreadDef(PushBack, StartPushBack, osPriorityNormal, 0, 512);
 800624e:	4b2a      	ldr	r3, [pc, #168]	; (80062f8 <main+0x138>)
 8006250:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8006254:	461d      	mov	r5, r3
 8006256:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006258:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800625a:	682b      	ldr	r3, [r5, #0]
 800625c:	6023      	str	r3, [r4, #0]
  PushBackHandle = osThreadCreate(osThread(PushBack), NULL);
 800625e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006262:	2100      	movs	r1, #0
 8006264:	4618      	mov	r0, r3
 8006266:	f7fd faff 	bl	8003868 <osThreadCreate>
 800626a:	4602      	mov	r2, r0
 800626c:	4b23      	ldr	r3, [pc, #140]	; (80062fc <main+0x13c>)
 800626e:	601a      	str	r2, [r3, #0]

  /* definition and creation of PopBack */
  osThreadDef(PopBack, StartPopBack, osPriorityNormal, 0, 512);
 8006270:	4b23      	ldr	r3, [pc, #140]	; (8006300 <main+0x140>)
 8006272:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8006276:	461d      	mov	r5, r3
 8006278:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800627a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800627c:	682b      	ldr	r3, [r5, #0]
 800627e:	6023      	str	r3, [r4, #0]
  PopBackHandle = osThreadCreate(osThread(PopBack), NULL);
 8006280:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006284:	2100      	movs	r1, #0
 8006286:	4618      	mov	r0, r3
 8006288:	f7fd faee 	bl	8003868 <osThreadCreate>
 800628c:	4602      	mov	r2, r0
 800628e:	4b1d      	ldr	r3, [pc, #116]	; (8006304 <main+0x144>)
 8006290:	601a      	str	r2, [r3, #0]

  /* definition and creation of EraseTask */
  osThreadDef(EraseTask, StartEraseTask, osPriorityNormal, 0, 512);
 8006292:	4b1d      	ldr	r3, [pc, #116]	; (8006308 <main+0x148>)
 8006294:	f107 0418 	add.w	r4, r7, #24
 8006298:	461d      	mov	r5, r3
 800629a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800629c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800629e:	682b      	ldr	r3, [r5, #0]
 80062a0:	6023      	str	r3, [r4, #0]
  EraseTaskHandle = osThreadCreate(osThread(EraseTask), NULL);
 80062a2:	f107 0318 	add.w	r3, r7, #24
 80062a6:	2100      	movs	r1, #0
 80062a8:	4618      	mov	r0, r3
 80062aa:	f7fd fadd 	bl	8003868 <osThreadCreate>
 80062ae:	4602      	mov	r2, r0
 80062b0:	4b16      	ldr	r3, [pc, #88]	; (800630c <main+0x14c>)
 80062b2:	601a      	str	r2, [r3, #0]

  /* definition and creation of Average */
  osThreadDef(Average, StartAverage, osPriorityNormal, 0, 512);
 80062b4:	4b16      	ldr	r3, [pc, #88]	; (8006310 <main+0x150>)
 80062b6:	1d3c      	adds	r4, r7, #4
 80062b8:	461d      	mov	r5, r3
 80062ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062be:	682b      	ldr	r3, [r5, #0]
 80062c0:	6023      	str	r3, [r4, #0]
  AverageHandle = osThreadCreate(osThread(Average), NULL);
 80062c2:	1d3b      	adds	r3, r7, #4
 80062c4:	2100      	movs	r1, #0
 80062c6:	4618      	mov	r0, r3
 80062c8:	f7fd face 	bl	8003868 <osThreadCreate>
 80062cc:	4602      	mov	r2, r0
 80062ce:	4b11      	ldr	r3, [pc, #68]	; (8006314 <main+0x154>)
 80062d0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80062d2:	f7fd fac2 	bl	800385a <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80062d6:	e7fe      	b.n	80062d6 <main+0x116>
 80062d8:	20003f20 	.word	0x20003f20
 80062dc:	20003e04 	.word	0x20003e04
 80062e0:	20003e44 	.word	0x20003e44
 80062e4:	20003f1c 	.word	0x20003f1c
 80062e8:	08008144 	.word	0x08008144
 80062ec:	20003df8 	.word	0x20003df8
 80062f0:	08008160 	.word	0x08008160
 80062f4:	20003df0 	.word	0x20003df0
 80062f8:	08008180 	.word	0x08008180
 80062fc:	20003f18 	.word	0x20003f18
 8006300:	0800819c 	.word	0x0800819c
 8006304:	20003e00 	.word	0x20003e00
 8006308:	080081bc 	.word	0x080081bc
 800630c:	20003dfc 	.word	0x20003dfc
 8006310:	080081d8 	.word	0x080081d8
 8006314:	20003f14 	.word	0x20003f14

08006318 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b0b4      	sub	sp, #208	; 0xd0
 800631c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800631e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006322:	2230      	movs	r2, #48	; 0x30
 8006324:	2100      	movs	r1, #0
 8006326:	4618      	mov	r0, r3
 8006328:	f000 ffa5 	bl	8007276 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800632c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006330:	2200      	movs	r2, #0
 8006332:	601a      	str	r2, [r3, #0]
 8006334:	605a      	str	r2, [r3, #4]
 8006336:	609a      	str	r2, [r3, #8]
 8006338:	60da      	str	r2, [r3, #12]
 800633a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800633c:	f107 0308 	add.w	r3, r7, #8
 8006340:	2284      	movs	r2, #132	; 0x84
 8006342:	2100      	movs	r1, #0
 8006344:	4618      	mov	r0, r3
 8006346:	f000 ff96 	bl	8007276 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800634a:	4b3b      	ldr	r3, [pc, #236]	; (8006438 <SystemClock_Config+0x120>)
 800634c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634e:	4a3a      	ldr	r2, [pc, #232]	; (8006438 <SystemClock_Config+0x120>)
 8006350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006354:	6413      	str	r3, [r2, #64]	; 0x40
 8006356:	4b38      	ldr	r3, [pc, #224]	; (8006438 <SystemClock_Config+0x120>)
 8006358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800635e:	607b      	str	r3, [r7, #4]
 8006360:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8006362:	4b36      	ldr	r3, [pc, #216]	; (800643c <SystemClock_Config+0x124>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800636a:	4a34      	ldr	r2, [pc, #208]	; (800643c <SystemClock_Config+0x124>)
 800636c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006370:	6013      	str	r3, [r2, #0]
 8006372:	4b32      	ldr	r3, [pc, #200]	; (800643c <SystemClock_Config+0x124>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800637a:	603b      	str	r3, [r7, #0]
 800637c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800637e:	2302      	movs	r3, #2
 8006380:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006384:	2301      	movs	r3, #1
 8006386:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800638a:	2310      	movs	r3, #16
 800638c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006390:	2302      	movs	r3, #2
 8006392:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006396:	2300      	movs	r3, #0
 8006398:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 800639c:	2308      	movs	r3, #8
 800639e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 50;
 80063a2:	2332      	movs	r3, #50	; 0x32
 80063a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80063a8:	2302      	movs	r3, #2
 80063aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80063ae:	2303      	movs	r3, #3
 80063b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80063b4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80063b8:	4618      	mov	r0, r3
 80063ba:	f7fa fc33 	bl	8000c24 <HAL_RCC_OscConfig>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d001      	beq.n	80063c8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80063c4:	f000 fb4e 	bl	8006a64 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80063c8:	f7fa fbdc 	bl	8000b84 <HAL_PWREx_EnableOverDrive>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d001      	beq.n	80063d6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80063d2:	f000 fb47 	bl	8006a64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80063d6:	230f      	movs	r3, #15
 80063d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80063dc:	2302      	movs	r3, #2
 80063de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80063e2:	2300      	movs	r3, #0
 80063e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80063e8:	2300      	movs	r3, #0
 80063ea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80063ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80063f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80063f6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80063fa:	2101      	movs	r1, #1
 80063fc:	4618      	mov	r0, r3
 80063fe:	f7fa fe81 	bl	8001104 <HAL_RCC_ClockConfig>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d001      	beq.n	800640c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8006408:	f000 fb2c 	bl	8006a64 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_CLK48;
 800640c:	4b0c      	ldr	r3, [pc, #48]	; (8006440 <SystemClock_Config+0x128>)
 800640e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006410:	2300      	movs	r3, #0
 8006412:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8006414:	2300      	movs	r3, #0
 8006416:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800641a:	f107 0308 	add.w	r3, r7, #8
 800641e:	4618      	mov	r0, r3
 8006420:	f7fb f870 	bl	8001504 <HAL_RCCEx_PeriphCLKConfig>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d001      	beq.n	800642e <SystemClock_Config+0x116>
  {
    Error_Handler();
 800642a:	f000 fb1b 	bl	8006a64 <Error_Handler>
  }
}
 800642e:	bf00      	nop
 8006430:	37d0      	adds	r7, #208	; 0xd0
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	40023800 	.word	0x40023800
 800643c:	40007000 	.word	0x40007000
 8006440:	00200040 	.word	0x00200040

08006444 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8006448:	4b06      	ldr	r3, [pc, #24]	; (8006464 <MX_RNG_Init+0x20>)
 800644a:	4a07      	ldr	r2, [pc, #28]	; (8006468 <MX_RNG_Init+0x24>)
 800644c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800644e:	4805      	ldr	r0, [pc, #20]	; (8006464 <MX_RNG_Init+0x20>)
 8006450:	f7fb fc46 	bl	8001ce0 <HAL_RNG_Init>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d001      	beq.n	800645e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800645a:	f000 fb03 	bl	8006a64 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800645e:	bf00      	nop
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	20003f04 	.word	0x20003f04
 8006468:	50060800 	.word	0x50060800

0800646c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b08e      	sub	sp, #56	; 0x38
 8006470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006472:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006476:	2200      	movs	r2, #0
 8006478:	601a      	str	r2, [r3, #0]
 800647a:	605a      	str	r2, [r3, #4]
 800647c:	609a      	str	r2, [r3, #8]
 800647e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006480:	f107 031c 	add.w	r3, r7, #28
 8006484:	2200      	movs	r2, #0
 8006486:	601a      	str	r2, [r3, #0]
 8006488:	605a      	str	r2, [r3, #4]
 800648a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800648c:	463b      	mov	r3, r7
 800648e:	2200      	movs	r2, #0
 8006490:	601a      	str	r2, [r3, #0]
 8006492:	605a      	str	r2, [r3, #4]
 8006494:	609a      	str	r2, [r3, #8]
 8006496:	60da      	str	r2, [r3, #12]
 8006498:	611a      	str	r2, [r3, #16]
 800649a:	615a      	str	r2, [r3, #20]
 800649c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800649e:	4b2d      	ldr	r3, [pc, #180]	; (8006554 <MX_TIM3_Init+0xe8>)
 80064a0:	4a2d      	ldr	r2, [pc, #180]	; (8006558 <MX_TIM3_Init+0xec>)
 80064a2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 500;
 80064a4:	4b2b      	ldr	r3, [pc, #172]	; (8006554 <MX_TIM3_Init+0xe8>)
 80064a6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80064aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80064ac:	4b29      	ldr	r3, [pc, #164]	; (8006554 <MX_TIM3_Init+0xe8>)
 80064ae:	2200      	movs	r2, #0
 80064b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80064b2:	4b28      	ldr	r3, [pc, #160]	; (8006554 <MX_TIM3_Init+0xe8>)
 80064b4:	2264      	movs	r2, #100	; 0x64
 80064b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80064b8:	4b26      	ldr	r3, [pc, #152]	; (8006554 <MX_TIM3_Init+0xe8>)
 80064ba:	2200      	movs	r2, #0
 80064bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80064be:	4b25      	ldr	r3, [pc, #148]	; (8006554 <MX_TIM3_Init+0xe8>)
 80064c0:	2200      	movs	r2, #0
 80064c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80064c4:	4823      	ldr	r0, [pc, #140]	; (8006554 <MX_TIM3_Init+0xe8>)
 80064c6:	f7fb fc99 	bl	8001dfc <HAL_TIM_Base_Init>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d001      	beq.n	80064d4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80064d0:	f000 fac8 	bl	8006a64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80064d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064d8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80064da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80064de:	4619      	mov	r1, r3
 80064e0:	481c      	ldr	r0, [pc, #112]	; (8006554 <MX_TIM3_Init+0xe8>)
 80064e2:	f7fb ffd9 	bl	8002498 <HAL_TIM_ConfigClockSource>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d001      	beq.n	80064f0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80064ec:	f000 faba 	bl	8006a64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80064f0:	4818      	ldr	r0, [pc, #96]	; (8006554 <MX_TIM3_Init+0xe8>)
 80064f2:	f7fb fcd9 	bl	8001ea8 <HAL_TIM_PWM_Init>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d001      	beq.n	8006500 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80064fc:	f000 fab2 	bl	8006a64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006500:	2300      	movs	r3, #0
 8006502:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006504:	2300      	movs	r3, #0
 8006506:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006508:	f107 031c 	add.w	r3, r7, #28
 800650c:	4619      	mov	r1, r3
 800650e:	4811      	ldr	r0, [pc, #68]	; (8006554 <MX_TIM3_Init+0xe8>)
 8006510:	f7fc fc62 	bl	8002dd8 <HAL_TIMEx_MasterConfigSynchronization>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d001      	beq.n	800651e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800651a:	f000 faa3 	bl	8006a64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800651e:	2360      	movs	r3, #96	; 0x60
 8006520:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 8006522:	2332      	movs	r3, #50	; 0x32
 8006524:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006526:	2300      	movs	r3, #0
 8006528:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800652a:	2300      	movs	r3, #0
 800652c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800652e:	463b      	mov	r3, r7
 8006530:	2200      	movs	r2, #0
 8006532:	4619      	mov	r1, r3
 8006534:	4807      	ldr	r0, [pc, #28]	; (8006554 <MX_TIM3_Init+0xe8>)
 8006536:	f7fb fe97 	bl	8002268 <HAL_TIM_PWM_ConfigChannel>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d001      	beq.n	8006544 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8006540:	f000 fa90 	bl	8006a64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8006544:	4803      	ldr	r0, [pc, #12]	; (8006554 <MX_TIM3_Init+0xe8>)
 8006546:	f000 fb17 	bl	8006b78 <HAL_TIM_MspPostInit>

}
 800654a:	bf00      	nop
 800654c:	3738      	adds	r7, #56	; 0x38
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	20003e44 	.word	0x20003e44
 8006558:	40000400 	.word	0x40000400

0800655c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b088      	sub	sp, #32
 8006560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006562:	f107 0310 	add.w	r3, r7, #16
 8006566:	2200      	movs	r2, #0
 8006568:	601a      	str	r2, [r3, #0]
 800656a:	605a      	str	r2, [r3, #4]
 800656c:	609a      	str	r2, [r3, #8]
 800656e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006570:	1d3b      	adds	r3, r7, #4
 8006572:	2200      	movs	r2, #0
 8006574:	601a      	str	r2, [r3, #0]
 8006576:	605a      	str	r2, [r3, #4]
 8006578:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800657a:	4b1e      	ldr	r3, [pc, #120]	; (80065f4 <MX_TIM5_Init+0x98>)
 800657c:	4a1e      	ldr	r2, [pc, #120]	; (80065f8 <MX_TIM5_Init+0x9c>)
 800657e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 50000-1;
 8006580:	4b1c      	ldr	r3, [pc, #112]	; (80065f4 <MX_TIM5_Init+0x98>)
 8006582:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8006586:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006588:	4b1a      	ldr	r3, [pc, #104]	; (80065f4 <MX_TIM5_Init+0x98>)
 800658a:	2200      	movs	r2, #0
 800658c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000;
 800658e:	4b19      	ldr	r3, [pc, #100]	; (80065f4 <MX_TIM5_Init+0x98>)
 8006590:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006594:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006596:	4b17      	ldr	r3, [pc, #92]	; (80065f4 <MX_TIM5_Init+0x98>)
 8006598:	2200      	movs	r2, #0
 800659a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800659c:	4b15      	ldr	r3, [pc, #84]	; (80065f4 <MX_TIM5_Init+0x98>)
 800659e:	2200      	movs	r2, #0
 80065a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80065a2:	4814      	ldr	r0, [pc, #80]	; (80065f4 <MX_TIM5_Init+0x98>)
 80065a4:	f7fb fc2a 	bl	8001dfc <HAL_TIM_Base_Init>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d001      	beq.n	80065b2 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 80065ae:	f000 fa59 	bl	8006a64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80065b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80065b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80065b8:	f107 0310 	add.w	r3, r7, #16
 80065bc:	4619      	mov	r1, r3
 80065be:	480d      	ldr	r0, [pc, #52]	; (80065f4 <MX_TIM5_Init+0x98>)
 80065c0:	f7fb ff6a 	bl	8002498 <HAL_TIM_ConfigClockSource>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d001      	beq.n	80065ce <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 80065ca:	f000 fa4b 	bl	8006a64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80065ce:	2300      	movs	r3, #0
 80065d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80065d2:	2300      	movs	r3, #0
 80065d4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80065d6:	1d3b      	adds	r3, r7, #4
 80065d8:	4619      	mov	r1, r3
 80065da:	4806      	ldr	r0, [pc, #24]	; (80065f4 <MX_TIM5_Init+0x98>)
 80065dc:	f7fc fbfc 	bl	8002dd8 <HAL_TIMEx_MasterConfigSynchronization>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d001      	beq.n	80065ea <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 80065e6:	f000 fa3d 	bl	8006a64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80065ea:	bf00      	nop
 80065ec:	3720      	adds	r7, #32
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop
 80065f4:	20003e04 	.word	0x20003e04
 80065f8:	40000c00 	.word	0x40000c00

080065fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006600:	4b14      	ldr	r3, [pc, #80]	; (8006654 <MX_USART1_UART_Init+0x58>)
 8006602:	4a15      	ldr	r2, [pc, #84]	; (8006658 <MX_USART1_UART_Init+0x5c>)
 8006604:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006606:	4b13      	ldr	r3, [pc, #76]	; (8006654 <MX_USART1_UART_Init+0x58>)
 8006608:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800660c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800660e:	4b11      	ldr	r3, [pc, #68]	; (8006654 <MX_USART1_UART_Init+0x58>)
 8006610:	2200      	movs	r2, #0
 8006612:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006614:	4b0f      	ldr	r3, [pc, #60]	; (8006654 <MX_USART1_UART_Init+0x58>)
 8006616:	2200      	movs	r2, #0
 8006618:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800661a:	4b0e      	ldr	r3, [pc, #56]	; (8006654 <MX_USART1_UART_Init+0x58>)
 800661c:	2200      	movs	r2, #0
 800661e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006620:	4b0c      	ldr	r3, [pc, #48]	; (8006654 <MX_USART1_UART_Init+0x58>)
 8006622:	220c      	movs	r2, #12
 8006624:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006626:	4b0b      	ldr	r3, [pc, #44]	; (8006654 <MX_USART1_UART_Init+0x58>)
 8006628:	2200      	movs	r2, #0
 800662a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800662c:	4b09      	ldr	r3, [pc, #36]	; (8006654 <MX_USART1_UART_Init+0x58>)
 800662e:	2200      	movs	r2, #0
 8006630:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006632:	4b08      	ldr	r3, [pc, #32]	; (8006654 <MX_USART1_UART_Init+0x58>)
 8006634:	2200      	movs	r2, #0
 8006636:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006638:	4b06      	ldr	r3, [pc, #24]	; (8006654 <MX_USART1_UART_Init+0x58>)
 800663a:	2200      	movs	r2, #0
 800663c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800663e:	4805      	ldr	r0, [pc, #20]	; (8006654 <MX_USART1_UART_Init+0x58>)
 8006640:	f7fc fc44 	bl	8002ecc <HAL_UART_Init>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d001      	beq.n	800664e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800664a:	f000 fa0b 	bl	8006a64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800664e:	bf00      	nop
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	20003e84 	.word	0x20003e84
 8006658:	40011000 	.word	0x40011000

0800665c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b08a      	sub	sp, #40	; 0x28
 8006660:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006662:	f107 0314 	add.w	r3, r7, #20
 8006666:	2200      	movs	r2, #0
 8006668:	601a      	str	r2, [r3, #0]
 800666a:	605a      	str	r2, [r3, #4]
 800666c:	609a      	str	r2, [r3, #8]
 800666e:	60da      	str	r2, [r3, #12]
 8006670:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006672:	4b34      	ldr	r3, [pc, #208]	; (8006744 <MX_GPIO_Init+0xe8>)
 8006674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006676:	4a33      	ldr	r2, [pc, #204]	; (8006744 <MX_GPIO_Init+0xe8>)
 8006678:	f043 0302 	orr.w	r3, r3, #2
 800667c:	6313      	str	r3, [r2, #48]	; 0x30
 800667e:	4b31      	ldr	r3, [pc, #196]	; (8006744 <MX_GPIO_Init+0xe8>)
 8006680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006682:	f003 0302 	and.w	r3, r3, #2
 8006686:	613b      	str	r3, [r7, #16]
 8006688:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800668a:	4b2e      	ldr	r3, [pc, #184]	; (8006744 <MX_GPIO_Init+0xe8>)
 800668c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800668e:	4a2d      	ldr	r2, [pc, #180]	; (8006744 <MX_GPIO_Init+0xe8>)
 8006690:	f043 0301 	orr.w	r3, r3, #1
 8006694:	6313      	str	r3, [r2, #48]	; 0x30
 8006696:	4b2b      	ldr	r3, [pc, #172]	; (8006744 <MX_GPIO_Init+0xe8>)
 8006698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800669a:	f003 0301 	and.w	r3, r3, #1
 800669e:	60fb      	str	r3, [r7, #12]
 80066a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80066a2:	4b28      	ldr	r3, [pc, #160]	; (8006744 <MX_GPIO_Init+0xe8>)
 80066a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a6:	4a27      	ldr	r2, [pc, #156]	; (8006744 <MX_GPIO_Init+0xe8>)
 80066a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066ac:	6313      	str	r3, [r2, #48]	; 0x30
 80066ae:	4b25      	ldr	r3, [pc, #148]	; (8006744 <MX_GPIO_Init+0xe8>)
 80066b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066b6:	60bb      	str	r3, [r7, #8]
 80066b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80066ba:	4b22      	ldr	r3, [pc, #136]	; (8006744 <MX_GPIO_Init+0xe8>)
 80066bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066be:	4a21      	ldr	r2, [pc, #132]	; (8006744 <MX_GPIO_Init+0xe8>)
 80066c0:	f043 0304 	orr.w	r3, r3, #4
 80066c4:	6313      	str	r3, [r2, #48]	; 0x30
 80066c6:	4b1f      	ldr	r3, [pc, #124]	; (8006744 <MX_GPIO_Init+0xe8>)
 80066c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ca:	f003 0304 	and.w	r3, r3, #4
 80066ce:	607b      	str	r3, [r7, #4]
 80066d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80066d2:	4b1c      	ldr	r3, [pc, #112]	; (8006744 <MX_GPIO_Init+0xe8>)
 80066d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d6:	4a1b      	ldr	r2, [pc, #108]	; (8006744 <MX_GPIO_Init+0xe8>)
 80066d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066dc:	6313      	str	r3, [r2, #48]	; 0x30
 80066de:	4b19      	ldr	r3, [pc, #100]	; (8006744 <MX_GPIO_Init+0xe8>)
 80066e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066e6:	603b      	str	r3, [r7, #0]
 80066e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : BUTTON_BLACK_Pin */
  GPIO_InitStruct.Pin = BUTTON_BLACK_Pin;
 80066ea:	2304      	movs	r3, #4
 80066ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80066ee:	4b16      	ldr	r3, [pc, #88]	; (8006748 <MX_GPIO_Init+0xec>)
 80066f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80066f2:	2302      	movs	r3, #2
 80066f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_BLACK_GPIO_Port, &GPIO_InitStruct);
 80066f6:	f107 0314 	add.w	r3, r7, #20
 80066fa:	4619      	mov	r1, r3
 80066fc:	4813      	ldr	r0, [pc, #76]	; (800674c <MX_GPIO_Init+0xf0>)
 80066fe:	f7fa f867 	bl	80007d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_BLUE_Pin */
  GPIO_InitStruct.Pin = BUTTON_BLUE_Pin;
 8006702:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006708:	4b11      	ldr	r3, [pc, #68]	; (8006750 <MX_GPIO_Init+0xf4>)
 800670a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800670c:	2302      	movs	r3, #2
 800670e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_BLUE_GPIO_Port, &GPIO_InitStruct);
 8006710:	f107 0314 	add.w	r3, r7, #20
 8006714:	4619      	mov	r1, r3
 8006716:	480d      	ldr	r0, [pc, #52]	; (800674c <MX_GPIO_Init+0xf0>)
 8006718:	f7fa f85a 	bl	80007d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 6, 0);
 800671c:	2200      	movs	r2, #0
 800671e:	2106      	movs	r1, #6
 8006720:	2008      	movs	r0, #8
 8006722:	f7fa f82b 	bl	800077c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8006726:	2008      	movs	r0, #8
 8006728:	f7fa f844 	bl	80007b4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 800672c:	2200      	movs	r2, #0
 800672e:	2106      	movs	r1, #6
 8006730:	2028      	movs	r0, #40	; 0x28
 8006732:	f7fa f823 	bl	800077c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006736:	2028      	movs	r0, #40	; 0x28
 8006738:	f7fa f83c 	bl	80007b4 <HAL_NVIC_EnableIRQ>

}
 800673c:	bf00      	nop
 800673e:	3728      	adds	r7, #40	; 0x28
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	40023800 	.word	0x40023800
 8006748:	10310000 	.word	0x10310000
 800674c:	40022000 	.word	0x40022000
 8006750:	10110000 	.word	0x10110000

08006754 <__io_putchar>:

/* USER CODE BEGIN 4 */

int __io_putchar(int ch) {
 8006754:	b580      	push	{r7, lr}
 8006756:	b082      	sub	sp, #8
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 0xFFFF);
 800675c:	1d39      	adds	r1, r7, #4
 800675e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006762:	2201      	movs	r2, #1
 8006764:	4803      	ldr	r0, [pc, #12]	; (8006774 <__io_putchar+0x20>)
 8006766:	f7fc fbff 	bl	8002f68 <HAL_UART_Transmit>
	return ch;
 800676a:	687b      	ldr	r3, [r7, #4]
}
 800676c:	4618      	mov	r0, r3
 800676e:	3708      	adds	r7, #8
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	20003e84 	.word	0x20003e84

08006778 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
 800677e:	4603      	mov	r3, r0
 8006780:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == BUTTON_BLACK_Pin) {
 8006782:	88fb      	ldrh	r3, [r7, #6]
 8006784:	2b04      	cmp	r3, #4
 8006786:	d122      	bne.n	80067ce <HAL_GPIO_EXTI_Callback+0x56>
		if (HAL_GetTick() - 300 < prev_start_time) {
 8006788:	f7f9 ff34 	bl	80005f4 <HAL_GetTick>
 800678c:	4603      	mov	r3, r0
 800678e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006792:	4a1f      	ldr	r2, [pc, #124]	; (8006810 <HAL_GPIO_EXTI_Callback+0x98>)
 8006794:	6812      	ldr	r2, [r2, #0]
 8006796:	4293      	cmp	r3, r2
 8006798:	d333      	bcc.n	8006802 <HAL_GPIO_EXTI_Callback+0x8a>
			return;
		}
		prev_start_time = HAL_GetTick();
 800679a:	f7f9 ff2b 	bl	80005f4 <HAL_GetTick>
 800679e:	4603      	mov	r3, r0
 80067a0:	461a      	mov	r2, r3
 80067a2:	4b1b      	ldr	r3, [pc, #108]	; (8006810 <HAL_GPIO_EXTI_Callback+0x98>)
 80067a4:	601a      	str	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(BUTTON_BLACK_GPIO_Port, BUTTON_BLACK_Pin) == 1) {
 80067a6:	2104      	movs	r1, #4
 80067a8:	481a      	ldr	r0, [pc, #104]	; (8006814 <HAL_GPIO_EXTI_Callback+0x9c>)
 80067aa:	f7fa f9bb 	bl	8000b24 <HAL_GPIO_ReadPin>
 80067ae:	4603      	mov	r3, r0
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d102      	bne.n	80067ba <HAL_GPIO_EXTI_Callback+0x42>
			//printf("push\n");
			prog_state = 1;
 80067b4:	4b18      	ldr	r3, [pc, #96]	; (8006818 <HAL_GPIO_EXTI_Callback+0xa0>)
 80067b6:	2201      	movs	r2, #1
 80067b8:	701a      	strb	r2, [r3, #0]

		}
		if (HAL_GPIO_ReadPin(BUTTON_BLACK_GPIO_Port, BUTTON_BLACK_Pin) == 0) {
 80067ba:	2104      	movs	r1, #4
 80067bc:	4815      	ldr	r0, [pc, #84]	; (8006814 <HAL_GPIO_EXTI_Callback+0x9c>)
 80067be:	f7fa f9b1 	bl	8000b24 <HAL_GPIO_ReadPin>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d102      	bne.n	80067ce <HAL_GPIO_EXTI_Callback+0x56>
			//printf("release\n");
			prog_state = 0;
 80067c8:	4b13      	ldr	r3, [pc, #76]	; (8006818 <HAL_GPIO_EXTI_Callback+0xa0>)
 80067ca:	2200      	movs	r2, #0
 80067cc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (GPIO_Pin == BUTTON_BLUE_Pin) {
 80067ce:	88fb      	ldrh	r3, [r7, #6]
 80067d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067d4:	d118      	bne.n	8006808 <HAL_GPIO_EXTI_Callback+0x90>
		if (HAL_GetTick() - 300 < prev_start_time) {
 80067d6:	f7f9 ff0d 	bl	80005f4 <HAL_GetTick>
 80067da:	4603      	mov	r3, r0
 80067dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067e0:	4a0b      	ldr	r2, [pc, #44]	; (8006810 <HAL_GPIO_EXTI_Callback+0x98>)
 80067e2:	6812      	ldr	r2, [r2, #0]
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d30e      	bcc.n	8006806 <HAL_GPIO_EXTI_Callback+0x8e>
			return;
		}
		prev_start_time = HAL_GetTick();
 80067e8:	f7f9 ff04 	bl	80005f4 <HAL_GetTick>
 80067ec:	4603      	mov	r3, r0
 80067ee:	461a      	mov	r2, r3
 80067f0:	4b07      	ldr	r3, [pc, #28]	; (8006810 <HAL_GPIO_EXTI_Callback+0x98>)
 80067f2:	601a      	str	r2, [r3, #0]
		//printf("push blue\n");
		osSignalSet(EraseTaskHandle, 1);
 80067f4:	4b09      	ldr	r3, [pc, #36]	; (800681c <HAL_GPIO_EXTI_Callback+0xa4>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2101      	movs	r1, #1
 80067fa:	4618      	mov	r0, r3
 80067fc:	f7fd f870 	bl	80038e0 <osSignalSet>
 8006800:	e002      	b.n	8006808 <HAL_GPIO_EXTI_Callback+0x90>
			return;
 8006802:	bf00      	nop
 8006804:	e000      	b.n	8006808 <HAL_GPIO_EXTI_Callback+0x90>
			return;
 8006806:	bf00      	nop
	}
}
 8006808:	3708      	adds	r7, #8
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	20003df4 	.word	0x20003df4
 8006814:	40022000 	.word	0x40022000
 8006818:	20003dd8 	.word	0x20003dd8
 800681c:	20003dfc 	.word	0x20003dfc

08006820 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
    

  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8006828:	2001      	movs	r0, #1
 800682a:	f7fd f844 	bl	80038b6 <osDelay>
 800682e:	e7fb      	b.n	8006828 <StartDefaultTask+0x8>

08006830 <StartPrinter>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartPrinter */
void StartPrinter(void const * argument)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPrinter */
	/* Infinite loop */
	for (;;) {
		osDelay(500);
 8006838:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800683c:	f7fd f83b 	bl	80038b6 <osDelay>
		osMutexWait(VectorHandle, osWaitForever);
 8006840:	4b09      	ldr	r3, [pc, #36]	; (8006868 <StartPrinter+0x38>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f04f 31ff 	mov.w	r1, #4294967295
 8006848:	4618      	mov	r0, r3
 800684a:	f7fd f8e1 	bl	8003a10 <osMutexWait>
		print(&vector);
 800684e:	4807      	ldr	r0, [pc, #28]	; (800686c <StartPrinter+0x3c>)
 8006850:	f000 fc04 	bl	800705c <print>
		osMutexRelease(VectorHandle);
 8006854:	4b04      	ldr	r3, [pc, #16]	; (8006868 <StartPrinter+0x38>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4618      	mov	r0, r3
 800685a:	f7fd f927 	bl	8003aac <osMutexRelease>
		osDelay(500);
 800685e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006862:	f7fd f828 	bl	80038b6 <osDelay>
		osDelay(500);
 8006866:	e7e7      	b.n	8006838 <StartPrinter+0x8>
 8006868:	20003f1c 	.word	0x20003f1c
 800686c:	20003f20 	.word	0x20003f20

08006870 <StartPushBack>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartPushBack */
void StartPushBack(void const * argument)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPushBack */
	/* Infinite loop */
	for (;;) {
		osDelay(500);
 8006878:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800687c:	f7fd f81b 	bl	80038b6 <osDelay>
		if (prog_state == 1) {
 8006880:	4b16      	ldr	r3, [pc, #88]	; (80068dc <StartPushBack+0x6c>)
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	2b01      	cmp	r3, #1
 8006886:	d124      	bne.n	80068d2 <StartPushBack+0x62>

			int random_number = HAL_RNG_GetRandomNumber(&hrng);
 8006888:	4815      	ldr	r0, [pc, #84]	; (80068e0 <StartPushBack+0x70>)
 800688a:	f7fb faa2 	bl	8001dd2 <HAL_RNG_GetRandomNumber>
 800688e:	4603      	mov	r3, r0
 8006890:	60fb      	str	r3, [r7, #12]

			osMutexWait(VectorHandle, osWaitForever);
 8006892:	4b14      	ldr	r3, [pc, #80]	; (80068e4 <StartPushBack+0x74>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f04f 31ff 	mov.w	r1, #4294967295
 800689a:	4618      	mov	r0, r3
 800689c:	f7fd f8b8 	bl	8003a10 <osMutexWait>
			push_back(&vector, (abs(random_number)) % 100 + 1);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80068a6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80068aa:	4b0f      	ldr	r3, [pc, #60]	; (80068e8 <StartPushBack+0x78>)
 80068ac:	fb83 1302 	smull	r1, r3, r3, r2
 80068b0:	1159      	asrs	r1, r3, #5
 80068b2:	17d3      	asrs	r3, r2, #31
 80068b4:	1acb      	subs	r3, r1, r3
 80068b6:	2164      	movs	r1, #100	; 0x64
 80068b8:	fb01 f303 	mul.w	r3, r1, r3
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	3301      	adds	r3, #1
 80068c0:	4619      	mov	r1, r3
 80068c2:	480a      	ldr	r0, [pc, #40]	; (80068ec <StartPushBack+0x7c>)
 80068c4:	f000 fb66 	bl	8006f94 <push_back>
			osMutexRelease(VectorHandle);
 80068c8:	4b06      	ldr	r3, [pc, #24]	; (80068e4 <StartPushBack+0x74>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4618      	mov	r0, r3
 80068ce:	f7fd f8ed 	bl	8003aac <osMutexRelease>

		}
		osDelay(500);
 80068d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80068d6:	f7fc ffee 	bl	80038b6 <osDelay>
		osDelay(500);
 80068da:	e7cd      	b.n	8006878 <StartPushBack+0x8>
 80068dc:	20003dd8 	.word	0x20003dd8
 80068e0:	20003f04 	.word	0x20003f04
 80068e4:	20003f1c 	.word	0x20003f1c
 80068e8:	51eb851f 	.word	0x51eb851f
 80068ec:	20003f20 	.word	0x20003f20

080068f0 <StartPopBack>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartPopBack */
void StartPopBack(void const * argument)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b086      	sub	sp, #24
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartPopBack */
	/* Infinite loop */
	for (;;) {

		//osDelay(1000);
		osSignalWait(1, osWaitForever);
 80068f8:	463b      	mov	r3, r7
 80068fa:	f04f 32ff 	mov.w	r2, #4294967295
 80068fe:	2101      	movs	r1, #1
 8006900:	4618      	mov	r0, r3
 8006902:	f7fd f82d 	bl	8003960 <osSignalWait>
		if (prog_state == 0) {
 8006906:	4b0a      	ldr	r3, [pc, #40]	; (8006930 <StartPopBack+0x40>)
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d1f4      	bne.n	80068f8 <StartPopBack+0x8>
			osMutexWait(VectorHandle, osWaitForever);
 800690e:	4b09      	ldr	r3, [pc, #36]	; (8006934 <StartPopBack+0x44>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f04f 31ff 	mov.w	r1, #4294967295
 8006916:	4618      	mov	r0, r3
 8006918:	f7fd f87a 	bl	8003a10 <osMutexWait>
			pop_back(&vector);
 800691c:	4806      	ldr	r0, [pc, #24]	; (8006938 <StartPopBack+0x48>)
 800691e:	f000 fbc7 	bl	80070b0 <pop_back>
			osMutexRelease(VectorHandle);
 8006922:	4b04      	ldr	r3, [pc, #16]	; (8006934 <StartPopBack+0x44>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4618      	mov	r0, r3
 8006928:	f7fd f8c0 	bl	8003aac <osMutexRelease>
		osSignalWait(1, osWaitForever);
 800692c:	e7e4      	b.n	80068f8 <StartPopBack+0x8>
 800692e:	bf00      	nop
 8006930:	20003dd8 	.word	0x20003dd8
 8006934:	20003f1c 	.word	0x20003f1c
 8006938:	20003f20 	.word	0x20003f20

0800693c <StartEraseTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartEraseTask */
void StartEraseTask(void const * argument)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b08a      	sub	sp, #40	; 0x28
 8006940:	af00      	add	r7, sp, #0
 8006942:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartEraseTask */
	/* Infinite loop */
	for (;;) {
		osSignalWait(1, osWaitForever);
 8006944:	463b      	mov	r3, r7
 8006946:	f04f 32ff 	mov.w	r2, #4294967295
 800694a:	2101      	movs	r1, #1
 800694c:	4618      	mov	r0, r3
 800694e:	f7fd f807 	bl	8003960 <osSignalWait>
		osMutexWait(VectorHandle, osWaitForever);
 8006952:	4b15      	ldr	r3, [pc, #84]	; (80069a8 <StartEraseTask+0x6c>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f04f 31ff 	mov.w	r1, #4294967295
 800695a:	4618      	mov	r0, r3
 800695c:	f7fd f858 	bl	8003a10 <osMutexWait>

		int vector_size = size(&vector);
 8006960:	4812      	ldr	r0, [pc, #72]	; (80069ac <StartEraseTask+0x70>)
 8006962:	f000 fb6f 	bl	8007044 <size>
 8006966:	6278      	str	r0, [r7, #36]	; 0x24
		int random_number = HAL_RNG_GetRandomNumber(&hrng);
 8006968:	4811      	ldr	r0, [pc, #68]	; (80069b0 <StartEraseTask+0x74>)
 800696a:	f7fb fa32 	bl	8001dd2 <HAL_RNG_GetRandomNumber>
 800696e:	4603      	mov	r3, r0
 8006970:	623b      	str	r3, [r7, #32]
		int random_index = random_number % vector_size;
 8006972:	6a3b      	ldr	r3, [r7, #32]
 8006974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006976:	fb93 f2f2 	sdiv	r2, r3, r2
 800697a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800697c:	fb01 f202 	mul.w	r2, r1, r2
 8006980:	1a9b      	subs	r3, r3, r2
 8006982:	61fb      	str	r3, [r7, #28]
		erase(&vector, abs(random_index));
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	2b00      	cmp	r3, #0
 8006988:	bfb8      	it	lt
 800698a:	425b      	neglt	r3, r3
 800698c:	4619      	mov	r1, r3
 800698e:	4807      	ldr	r0, [pc, #28]	; (80069ac <StartEraseTask+0x70>)
 8006990:	f000 fba4 	bl	80070dc <erase>
		printf("erase");
 8006994:	4807      	ldr	r0, [pc, #28]	; (80069b4 <StartEraseTask+0x78>)
 8006996:	f000 fc77 	bl	8007288 <iprintf>

		osMutexRelease(VectorHandle);
 800699a:	4b03      	ldr	r3, [pc, #12]	; (80069a8 <StartEraseTask+0x6c>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4618      	mov	r0, r3
 80069a0:	f7fd f884 	bl	8003aac <osMutexRelease>
	for (;;) {
 80069a4:	e7ce      	b.n	8006944 <StartEraseTask+0x8>
 80069a6:	bf00      	nop
 80069a8:	20003f1c 	.word	0x20003f1c
 80069ac:	20003f20 	.word	0x20003f20
 80069b0:	20003f04 	.word	0x20003f04
 80069b4:	080081ec 	.word	0x080081ec

080069b8 <StartAverage>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAverage */
void StartAverage(void const * argument)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAverage */
  /* Infinite loop */
  for(;;)
  {
	  osMutexWait(VectorHandle, osWaitForever);
 80069c0:	4b0e      	ldr	r3, [pc, #56]	; (80069fc <StartAverage+0x44>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f04f 31ff 	mov.w	r1, #4294967295
 80069c8:	4618      	mov	r0, r3
 80069ca:	f7fd f821 	bl	8003a10 <osMutexWait>
	  int average_vector = average(&vector);
 80069ce:	480c      	ldr	r0, [pc, #48]	; (8006a00 <StartAverage+0x48>)
 80069d0:	f000 fbbe 	bl	8007150 <average>
 80069d4:	60f8      	str	r0, [r7, #12]
	  if (average_vector == -1) {
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069dc:	d101      	bne.n	80069e2 <StartAverage+0x2a>
		average_vector = 0;
 80069de:	2300      	movs	r3, #0
 80069e0:	60fb      	str	r3, [r7, #12]
	}
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, average_vector);
 80069e2:	4b08      	ldr	r3, [pc, #32]	; (8006a04 <StartAverage+0x4c>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	635a      	str	r2, [r3, #52]	; 0x34
	  osMutexRelease(VectorHandle);
 80069ea:	4b04      	ldr	r3, [pc, #16]	; (80069fc <StartAverage+0x44>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4618      	mov	r0, r3
 80069f0:	f7fd f85c 	bl	8003aac <osMutexRelease>
	  osDelay(50);
 80069f4:	2032      	movs	r0, #50	; 0x32
 80069f6:	f7fc ff5e 	bl	80038b6 <osDelay>
  {
 80069fa:	e7e1      	b.n	80069c0 <StartAverage+0x8>
 80069fc:	20003f1c 	.word	0x20003f1c
 8006a00:	20003f20 	.word	0x20003f20
 8006a04:	20003e44 	.word	0x20003e44

08006a08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b082      	sub	sp, #8
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM5) {
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a0f      	ldr	r2, [pc, #60]	; (8006a54 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d110      	bne.n	8006a3c <HAL_TIM_PeriodElapsedCallback+0x34>
		if (time_counter == 1) {
 8006a1a:	4b0f      	ldr	r3, [pc, #60]	; (8006a58 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d109      	bne.n	8006a36 <HAL_TIM_PeriodElapsedCallback+0x2e>
			time_counter = 0;
 8006a22:	4b0d      	ldr	r3, [pc, #52]	; (8006a58 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8006a24:	2200      	movs	r2, #0
 8006a26:	601a      	str	r2, [r3, #0]
			osSignalSet(PopBackHandle, 1);
 8006a28:	4b0c      	ldr	r3, [pc, #48]	; (8006a5c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	2101      	movs	r1, #1
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7fc ff56 	bl	80038e0 <osSignalSet>
 8006a34:	e002      	b.n	8006a3c <HAL_TIM_PeriodElapsedCallback+0x34>
		} else {
			time_counter = 1;
 8006a36:	4b08      	ldr	r3, [pc, #32]	; (8006a58 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8006a38:	2201      	movs	r2, #1
 8006a3a:	601a      	str	r2, [r3, #0]
		}
	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a07      	ldr	r2, [pc, #28]	; (8006a60 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d101      	bne.n	8006a4a <HAL_TIM_PeriodElapsedCallback+0x42>
    HAL_IncTick();
 8006a46:	f7f9 fdc1 	bl	80005cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8006a4a:	bf00      	nop
 8006a4c:	3708      	adds	r7, #8
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	40000c00 	.word	0x40000c00
 8006a58:	20003ddc 	.word	0x20003ddc
 8006a5c:	20003e00 	.word	0x20003e00
 8006a60:	40002000 	.word	0x40002000

08006a64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006a64:	b480      	push	{r7}
 8006a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006a68:	bf00      	nop
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr
	...

08006a74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8006a7a:	4b11      	ldr	r3, [pc, #68]	; (8006ac0 <HAL_MspInit+0x4c>)
 8006a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7e:	4a10      	ldr	r2, [pc, #64]	; (8006ac0 <HAL_MspInit+0x4c>)
 8006a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a84:	6413      	str	r3, [r2, #64]	; 0x40
 8006a86:	4b0e      	ldr	r3, [pc, #56]	; (8006ac0 <HAL_MspInit+0x4c>)
 8006a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a8e:	607b      	str	r3, [r7, #4]
 8006a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a92:	4b0b      	ldr	r3, [pc, #44]	; (8006ac0 <HAL_MspInit+0x4c>)
 8006a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a96:	4a0a      	ldr	r2, [pc, #40]	; (8006ac0 <HAL_MspInit+0x4c>)
 8006a98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8006a9e:	4b08      	ldr	r3, [pc, #32]	; (8006ac0 <HAL_MspInit+0x4c>)
 8006aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006aa6:	603b      	str	r3, [r7, #0]
 8006aa8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006aaa:	2200      	movs	r2, #0
 8006aac:	210f      	movs	r1, #15
 8006aae:	f06f 0001 	mvn.w	r0, #1
 8006ab2:	f7f9 fe63 	bl	800077c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006ab6:	bf00      	nop
 8006ab8:	3708      	adds	r7, #8
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	40023800 	.word	0x40023800

08006ac4 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b085      	sub	sp, #20
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a0a      	ldr	r2, [pc, #40]	; (8006afc <HAL_RNG_MspInit+0x38>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d10b      	bne.n	8006aee <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8006ad6:	4b0a      	ldr	r3, [pc, #40]	; (8006b00 <HAL_RNG_MspInit+0x3c>)
 8006ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ada:	4a09      	ldr	r2, [pc, #36]	; (8006b00 <HAL_RNG_MspInit+0x3c>)
 8006adc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ae0:	6353      	str	r3, [r2, #52]	; 0x34
 8006ae2:	4b07      	ldr	r3, [pc, #28]	; (8006b00 <HAL_RNG_MspInit+0x3c>)
 8006ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aea:	60fb      	str	r3, [r7, #12]
 8006aec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8006aee:	bf00      	nop
 8006af0:	3714      	adds	r7, #20
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop
 8006afc:	50060800 	.word	0x50060800
 8006b00:	40023800 	.word	0x40023800

08006b04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a16      	ldr	r2, [pc, #88]	; (8006b6c <HAL_TIM_Base_MspInit+0x68>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d10c      	bne.n	8006b30 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006b16:	4b16      	ldr	r3, [pc, #88]	; (8006b70 <HAL_TIM_Base_MspInit+0x6c>)
 8006b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b1a:	4a15      	ldr	r2, [pc, #84]	; (8006b70 <HAL_TIM_Base_MspInit+0x6c>)
 8006b1c:	f043 0302 	orr.w	r3, r3, #2
 8006b20:	6413      	str	r3, [r2, #64]	; 0x40
 8006b22:	4b13      	ldr	r3, [pc, #76]	; (8006b70 <HAL_TIM_Base_MspInit+0x6c>)
 8006b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b26:	f003 0302 	and.w	r3, r3, #2
 8006b2a:	60fb      	str	r3, [r7, #12]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8006b2e:	e018      	b.n	8006b62 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM5)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a0f      	ldr	r2, [pc, #60]	; (8006b74 <HAL_TIM_Base_MspInit+0x70>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d113      	bne.n	8006b62 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006b3a:	4b0d      	ldr	r3, [pc, #52]	; (8006b70 <HAL_TIM_Base_MspInit+0x6c>)
 8006b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3e:	4a0c      	ldr	r2, [pc, #48]	; (8006b70 <HAL_TIM_Base_MspInit+0x6c>)
 8006b40:	f043 0308 	orr.w	r3, r3, #8
 8006b44:	6413      	str	r3, [r2, #64]	; 0x40
 8006b46:	4b0a      	ldr	r3, [pc, #40]	; (8006b70 <HAL_TIM_Base_MspInit+0x6c>)
 8006b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4a:	f003 0308 	and.w	r3, r3, #8
 8006b4e:	60bb      	str	r3, [r7, #8]
 8006b50:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 6, 0);
 8006b52:	2200      	movs	r2, #0
 8006b54:	2106      	movs	r1, #6
 8006b56:	2032      	movs	r0, #50	; 0x32
 8006b58:	f7f9 fe10 	bl	800077c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8006b5c:	2032      	movs	r0, #50	; 0x32
 8006b5e:	f7f9 fe29 	bl	80007b4 <HAL_NVIC_EnableIRQ>
}
 8006b62:	bf00      	nop
 8006b64:	3710      	adds	r7, #16
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	40000400 	.word	0x40000400
 8006b70:	40023800 	.word	0x40023800
 8006b74:	40000c00 	.word	0x40000c00

08006b78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b088      	sub	sp, #32
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b80:	f107 030c 	add.w	r3, r7, #12
 8006b84:	2200      	movs	r2, #0
 8006b86:	601a      	str	r2, [r3, #0]
 8006b88:	605a      	str	r2, [r3, #4]
 8006b8a:	609a      	str	r2, [r3, #8]
 8006b8c:	60da      	str	r2, [r3, #12]
 8006b8e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a11      	ldr	r2, [pc, #68]	; (8006bdc <HAL_TIM_MspPostInit+0x64>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d11b      	bne.n	8006bd2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b9a:	4b11      	ldr	r3, [pc, #68]	; (8006be0 <HAL_TIM_MspPostInit+0x68>)
 8006b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b9e:	4a10      	ldr	r2, [pc, #64]	; (8006be0 <HAL_TIM_MspPostInit+0x68>)
 8006ba0:	f043 0302 	orr.w	r3, r3, #2
 8006ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8006ba6:	4b0e      	ldr	r3, [pc, #56]	; (8006be0 <HAL_TIM_MspPostInit+0x68>)
 8006ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006baa:	f003 0302 	and.w	r3, r3, #2
 8006bae:	60bb      	str	r3, [r7, #8]
 8006bb0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PB4     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006bb2:	2310      	movs	r3, #16
 8006bb4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bb6:	2302      	movs	r3, #2
 8006bb8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006bc2:	2302      	movs	r3, #2
 8006bc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006bc6:	f107 030c 	add.w	r3, r7, #12
 8006bca:	4619      	mov	r1, r3
 8006bcc:	4805      	ldr	r0, [pc, #20]	; (8006be4 <HAL_TIM_MspPostInit+0x6c>)
 8006bce:	f7f9 fdff 	bl	80007d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8006bd2:	bf00      	nop
 8006bd4:	3720      	adds	r7, #32
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	40000400 	.word	0x40000400
 8006be0:	40023800 	.word	0x40023800
 8006be4:	40020400 	.word	0x40020400

08006be8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b08a      	sub	sp, #40	; 0x28
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bf0:	f107 0314 	add.w	r3, r7, #20
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	601a      	str	r2, [r3, #0]
 8006bf8:	605a      	str	r2, [r3, #4]
 8006bfa:	609a      	str	r2, [r3, #8]
 8006bfc:	60da      	str	r2, [r3, #12]
 8006bfe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a25      	ldr	r2, [pc, #148]	; (8006c9c <HAL_UART_MspInit+0xb4>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d144      	bne.n	8006c94 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006c0a:	4b25      	ldr	r3, [pc, #148]	; (8006ca0 <HAL_UART_MspInit+0xb8>)
 8006c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c0e:	4a24      	ldr	r2, [pc, #144]	; (8006ca0 <HAL_UART_MspInit+0xb8>)
 8006c10:	f043 0310 	orr.w	r3, r3, #16
 8006c14:	6453      	str	r3, [r2, #68]	; 0x44
 8006c16:	4b22      	ldr	r3, [pc, #136]	; (8006ca0 <HAL_UART_MspInit+0xb8>)
 8006c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c1a:	f003 0310 	and.w	r3, r3, #16
 8006c1e:	613b      	str	r3, [r7, #16]
 8006c20:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c22:	4b1f      	ldr	r3, [pc, #124]	; (8006ca0 <HAL_UART_MspInit+0xb8>)
 8006c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c26:	4a1e      	ldr	r2, [pc, #120]	; (8006ca0 <HAL_UART_MspInit+0xb8>)
 8006c28:	f043 0302 	orr.w	r3, r3, #2
 8006c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8006c2e:	4b1c      	ldr	r3, [pc, #112]	; (8006ca0 <HAL_UART_MspInit+0xb8>)
 8006c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c32:	f003 0302 	and.w	r3, r3, #2
 8006c36:	60fb      	str	r3, [r7, #12]
 8006c38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c3a:	4b19      	ldr	r3, [pc, #100]	; (8006ca0 <HAL_UART_MspInit+0xb8>)
 8006c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c3e:	4a18      	ldr	r2, [pc, #96]	; (8006ca0 <HAL_UART_MspInit+0xb8>)
 8006c40:	f043 0301 	orr.w	r3, r3, #1
 8006c44:	6313      	str	r3, [r2, #48]	; 0x30
 8006c46:	4b16      	ldr	r3, [pc, #88]	; (8006ca0 <HAL_UART_MspInit+0xb8>)
 8006c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c4a:	f003 0301 	and.w	r3, r3, #1
 8006c4e:	60bb      	str	r3, [r7, #8]
 8006c50:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8006c52:	2380      	movs	r3, #128	; 0x80
 8006c54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c56:	2302      	movs	r3, #2
 8006c58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006c62:	2307      	movs	r3, #7
 8006c64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c66:	f107 0314 	add.w	r3, r7, #20
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	480d      	ldr	r0, [pc, #52]	; (8006ca4 <HAL_UART_MspInit+0xbc>)
 8006c6e:	f7f9 fdaf 	bl	80007d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006c72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c78:	2302      	movs	r3, #2
 8006c7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c80:	2303      	movs	r3, #3
 8006c82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006c84:	2307      	movs	r3, #7
 8006c86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c88:	f107 0314 	add.w	r3, r7, #20
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	4806      	ldr	r0, [pc, #24]	; (8006ca8 <HAL_UART_MspInit+0xc0>)
 8006c90:	f7f9 fd9e 	bl	80007d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006c94:	bf00      	nop
 8006c96:	3728      	adds	r7, #40	; 0x28
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	40011000 	.word	0x40011000
 8006ca0:	40023800 	.word	0x40023800
 8006ca4:	40020400 	.word	0x40020400
 8006ca8:	40020000 	.word	0x40020000

08006cac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b08c      	sub	sp, #48	; 0x30
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0); 
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	6879      	ldr	r1, [r7, #4]
 8006cc0:	202d      	movs	r0, #45	; 0x2d
 8006cc2:	f7f9 fd5b 	bl	800077c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn); 
 8006cc6:	202d      	movs	r0, #45	; 0x2d
 8006cc8:	f7f9 fd74 	bl	80007b4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8006ccc:	4b1e      	ldr	r3, [pc, #120]	; (8006d48 <HAL_InitTick+0x9c>)
 8006cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd0:	4a1d      	ldr	r2, [pc, #116]	; (8006d48 <HAL_InitTick+0x9c>)
 8006cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cd6:	6413      	str	r3, [r2, #64]	; 0x40
 8006cd8:	4b1b      	ldr	r3, [pc, #108]	; (8006d48 <HAL_InitTick+0x9c>)
 8006cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ce0:	60fb      	str	r3, [r7, #12]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006ce4:	f107 0210 	add.w	r2, r7, #16
 8006ce8:	f107 0314 	add.w	r3, r7, #20
 8006cec:	4611      	mov	r1, r2
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f7fa fbd6 	bl	80014a0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM14 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8006cf4:	f7fa fbac 	bl	8001450 <HAL_RCC_GetPCLK1Freq>
 8006cf8:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8006cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cfc:	4a13      	ldr	r2, [pc, #76]	; (8006d4c <HAL_InitTick+0xa0>)
 8006cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8006d02:	0c9b      	lsrs	r3, r3, #18
 8006d04:	3b01      	subs	r3, #1
 8006d06:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8006d08:	4b11      	ldr	r3, [pc, #68]	; (8006d50 <HAL_InitTick+0xa4>)
 8006d0a:	4a12      	ldr	r2, [pc, #72]	; (8006d54 <HAL_InitTick+0xa8>)
 8006d0c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000 / 1000) - 1;
 8006d0e:	4b10      	ldr	r3, [pc, #64]	; (8006d50 <HAL_InitTick+0xa4>)
 8006d10:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006d14:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8006d16:	4a0e      	ldr	r2, [pc, #56]	; (8006d50 <HAL_InitTick+0xa4>)
 8006d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d1a:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8006d1c:	4b0c      	ldr	r3, [pc, #48]	; (8006d50 <HAL_InitTick+0xa4>)
 8006d1e:	2200      	movs	r2, #0
 8006d20:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006d22:	4b0b      	ldr	r3, [pc, #44]	; (8006d50 <HAL_InitTick+0xa4>)
 8006d24:	2200      	movs	r2, #0
 8006d26:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8006d28:	4809      	ldr	r0, [pc, #36]	; (8006d50 <HAL_InitTick+0xa4>)
 8006d2a:	f7fb f867 	bl	8001dfc <HAL_TIM_Base_Init>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d104      	bne.n	8006d3e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8006d34:	4806      	ldr	r0, [pc, #24]	; (8006d50 <HAL_InitTick+0xa4>)
 8006d36:	f7fb f88d 	bl	8001e54 <HAL_TIM_Base_Start_IT>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	e000      	b.n	8006d40 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3730      	adds	r7, #48	; 0x30
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	40023800 	.word	0x40023800
 8006d4c:	431bde83 	.word	0x431bde83
 8006d50:	20003f2c 	.word	0x20003f2c
 8006d54:	40002000 	.word	0x40002000

08006d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006d5c:	bf00      	nop
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr

08006d66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006d66:	b480      	push	{r7}
 8006d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006d6a:	e7fe      	b.n	8006d6a <HardFault_Handler+0x4>

08006d6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006d70:	e7fe      	b.n	8006d70 <MemManage_Handler+0x4>

08006d72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006d72:	b480      	push	{r7}
 8006d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006d76:	e7fe      	b.n	8006d76 <BusFault_Handler+0x4>

08006d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006d7c:	e7fe      	b.n	8006d7c <UsageFault_Handler+0x4>

08006d7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006d7e:	b480      	push	{r7}
 8006d80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006d82:	bf00      	nop
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr

08006d8c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8006d90:	2004      	movs	r0, #4
 8006d92:	f7f9 fedf 	bl	8000b54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8006d96:	bf00      	nop
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8006d9e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006da2:	f7f9 fed7 	bl	8000b54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006da6:	bf00      	nop
 8006da8:	bd80      	pop	{r7, pc}
	...

08006dac <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8006db0:	4802      	ldr	r0, [pc, #8]	; (8006dbc <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8006db2:	f7fb f939 	bl	8002028 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8006db6:	bf00      	nop
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop
 8006dbc:	20003f2c 	.word	0x20003f2c

08006dc0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8006dc4:	4802      	ldr	r0, [pc, #8]	; (8006dd0 <TIM5_IRQHandler+0x10>)
 8006dc6:	f7fb f92f 	bl	8002028 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8006dca:	bf00      	nop
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	20003e04 	.word	0x20003e04

08006dd4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b086      	sub	sp, #24
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006de0:	2300      	movs	r3, #0
 8006de2:	617b      	str	r3, [r7, #20]
 8006de4:	e00a      	b.n	8006dfc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006de6:	f3af 8000 	nop.w
 8006dea:	4601      	mov	r1, r0
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	1c5a      	adds	r2, r3, #1
 8006df0:	60ba      	str	r2, [r7, #8]
 8006df2:	b2ca      	uxtb	r2, r1
 8006df4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	3301      	adds	r3, #1
 8006dfa:	617b      	str	r3, [r7, #20]
 8006dfc:	697a      	ldr	r2, [r7, #20]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	dbf0      	blt.n	8006de6 <_read+0x12>
	}

return len;
 8006e04:	687b      	ldr	r3, [r7, #4]
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3718      	adds	r7, #24
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}

08006e0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006e0e:	b580      	push	{r7, lr}
 8006e10:	b086      	sub	sp, #24
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	60f8      	str	r0, [r7, #12]
 8006e16:	60b9      	str	r1, [r7, #8]
 8006e18:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	617b      	str	r3, [r7, #20]
 8006e1e:	e009      	b.n	8006e34 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	1c5a      	adds	r2, r3, #1
 8006e24:	60ba      	str	r2, [r7, #8]
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f7ff fc93 	bl	8006754 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	3301      	adds	r3, #1
 8006e32:	617b      	str	r3, [r7, #20]
 8006e34:	697a      	ldr	r2, [r7, #20]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	dbf1      	blt.n	8006e20 <_write+0x12>
	}
	return len;
 8006e3c:	687b      	ldr	r3, [r7, #4]
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3718      	adds	r7, #24
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}

08006e46 <_close>:

int _close(int file)
{
 8006e46:	b480      	push	{r7}
 8006e48:	b083      	sub	sp, #12
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
	return -1;
 8006e4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	370c      	adds	r7, #12
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr

08006e5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006e5e:	b480      	push	{r7}
 8006e60:	b083      	sub	sp, #12
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
 8006e66:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006e6e:	605a      	str	r2, [r3, #4]
	return 0;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	370c      	adds	r7, #12
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr

08006e7e <_isatty>:

int _isatty(int file)
{
 8006e7e:	b480      	push	{r7}
 8006e80:	b083      	sub	sp, #12
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	6078      	str	r0, [r7, #4]
	return 1;
 8006e86:	2301      	movs	r3, #1
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	370c      	adds	r7, #12
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	607a      	str	r2, [r7, #4]
	return 0;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3714      	adds	r7, #20
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr
	...

08006eb0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006eb8:	4b11      	ldr	r3, [pc, #68]	; (8006f00 <_sbrk+0x50>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d102      	bne.n	8006ec6 <_sbrk+0x16>
		heap_end = &end;
 8006ec0:	4b0f      	ldr	r3, [pc, #60]	; (8006f00 <_sbrk+0x50>)
 8006ec2:	4a10      	ldr	r2, [pc, #64]	; (8006f04 <_sbrk+0x54>)
 8006ec4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8006ec6:	4b0e      	ldr	r3, [pc, #56]	; (8006f00 <_sbrk+0x50>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006ecc:	4b0c      	ldr	r3, [pc, #48]	; (8006f00 <_sbrk+0x50>)
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	466a      	mov	r2, sp
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d907      	bls.n	8006eea <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8006eda:	f000 f997 	bl	800720c <__errno>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	230c      	movs	r3, #12
 8006ee2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8006ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ee8:	e006      	b.n	8006ef8 <_sbrk+0x48>
	}

	heap_end += incr;
 8006eea:	4b05      	ldr	r3, [pc, #20]	; (8006f00 <_sbrk+0x50>)
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	4a03      	ldr	r2, [pc, #12]	; (8006f00 <_sbrk+0x50>)
 8006ef4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3710      	adds	r7, #16
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	20003de0 	.word	0x20003de0
 8006f04:	20003f70 	.word	0x20003f70

08006f08 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006f0c:	4b15      	ldr	r3, [pc, #84]	; (8006f64 <SystemInit+0x5c>)
 8006f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f12:	4a14      	ldr	r2, [pc, #80]	; (8006f64 <SystemInit+0x5c>)
 8006f14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006f18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8006f1c:	4b12      	ldr	r3, [pc, #72]	; (8006f68 <SystemInit+0x60>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a11      	ldr	r2, [pc, #68]	; (8006f68 <SystemInit+0x60>)
 8006f22:	f043 0301 	orr.w	r3, r3, #1
 8006f26:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006f28:	4b0f      	ldr	r3, [pc, #60]	; (8006f68 <SystemInit+0x60>)
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006f2e:	4b0e      	ldr	r3, [pc, #56]	; (8006f68 <SystemInit+0x60>)
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	490d      	ldr	r1, [pc, #52]	; (8006f68 <SystemInit+0x60>)
 8006f34:	4b0d      	ldr	r3, [pc, #52]	; (8006f6c <SystemInit+0x64>)
 8006f36:	4013      	ands	r3, r2
 8006f38:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8006f3a:	4b0b      	ldr	r3, [pc, #44]	; (8006f68 <SystemInit+0x60>)
 8006f3c:	4a0c      	ldr	r2, [pc, #48]	; (8006f70 <SystemInit+0x68>)
 8006f3e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006f40:	4b09      	ldr	r3, [pc, #36]	; (8006f68 <SystemInit+0x60>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a08      	ldr	r2, [pc, #32]	; (8006f68 <SystemInit+0x60>)
 8006f46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f4a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006f4c:	4b06      	ldr	r3, [pc, #24]	; (8006f68 <SystemInit+0x60>)
 8006f4e:	2200      	movs	r2, #0
 8006f50:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006f52:	4b04      	ldr	r3, [pc, #16]	; (8006f64 <SystemInit+0x5c>)
 8006f54:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006f58:	609a      	str	r2, [r3, #8]
#endif
}
 8006f5a:	bf00      	nop
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr
 8006f64:	e000ed00 	.word	0xe000ed00
 8006f68:	40023800 	.word	0x40023800
 8006f6c:	fef6ffff 	.word	0xfef6ffff
 8006f70:	24003010 	.word	0x24003010

08006f74 <init>:
#include "vector.h"

void init(vector_t *vector) {
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]

	vector->capacity = 0;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	609a      	str	r2, [r3, #8]

	vector->size = 0;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	605a      	str	r2, [r3, #4]

}
 8006f88:	bf00      	nop
 8006f8a:	370c      	adds	r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <push_back>:

void push_back(vector_t *vector, int new_data) {
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
	vector->size++;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	1c5a      	adds	r2, r3, #1
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	605a      	str	r2, [r3, #4]

	if (vector->capacity <= vector->size + 1) {
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	689a      	ldr	r2, [r3, #8]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	dc33      	bgt.n	800701e <push_back+0x8a>
		vector->capacity = vector->capacity + 10;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	f103 020a 	add.w	r2, r3, #10
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	609a      	str	r2, [r3, #8]

		int *temp = vector->data;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	60bb      	str	r3, [r7, #8]
		vector->data = (int *) pvPortMalloc(vector->capacity * sizeof(int));
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f7fc fda2 	bl	8003b18 <pvPortMalloc>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	601a      	str	r2, [r3, #0]

		if (vector->data == NULL) {
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d102      	bne.n	8006fea <push_back+0x56>
			printf("Data NULL");
 8006fe4:	4816      	ldr	r0, [pc, #88]	; (8007040 <push_back+0xac>)
 8006fe6:	f000 f94f 	bl	8007288 <iprintf>
		}

		for (int i = 0; i < vector->size - 1; ++i) {
 8006fea:	2300      	movs	r3, #0
 8006fec:	60fb      	str	r3, [r7, #12]
 8006fee:	e00d      	b.n	800700c <push_back+0x78>
			vector->data[i] = temp[i];
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	009b      	lsls	r3, r3, #2
 8006ff4:	68ba      	ldr	r2, [r7, #8]
 8006ff6:	441a      	add	r2, r3
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6819      	ldr	r1, [r3, #0]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	440b      	add	r3, r1
 8007002:	6812      	ldr	r2, [r2, #0]
 8007004:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < vector->size - 1; ++i) {
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	3301      	adds	r3, #1
 800700a:	60fb      	str	r3, [r7, #12]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	3b01      	subs	r3, #1
 8007012:	68fa      	ldr	r2, [r7, #12]
 8007014:	429a      	cmp	r2, r3
 8007016:	dbeb      	blt.n	8006ff0 <push_back+0x5c>
		}

		vPortFree(temp);
 8007018:	68b8      	ldr	r0, [r7, #8]
 800701a:	f7fc fe45 	bl	8003ca8 <vPortFree>
	}
	vector->data[vector->size - 1] = new_data;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	4619      	mov	r1, r3
 8007028:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800702c:	440b      	add	r3, r1
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	4413      	add	r3, r2
 8007032:	683a      	ldr	r2, [r7, #0]
 8007034:	601a      	str	r2, [r3, #0]


}
 8007036:	bf00      	nop
 8007038:	3710      	adds	r7, #16
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	080081f4 	.word	0x080081f4

08007044 <size>:
	if (vector->size < 0) {
		vector->size = 0;
	}
}

int size(vector_t *vector) {
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
	return vector->size;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	685b      	ldr	r3, [r3, #4]
}
 8007050:	4618      	mov	r0, r3
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <print>:
	}
	vector->data[position] = value;

}

void print(vector_t *vector) {
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
	if (vector->size == 0) {
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d103      	bne.n	8007074 <print+0x18>
		printf("The vector is empty\n");
 800706c:	480e      	ldr	r0, [pc, #56]	; (80070a8 <print+0x4c>)
 800706e:	f000 f97f 	bl	8007370 <puts>
		return;
 8007072:	e015      	b.n	80070a0 <print+0x44>
	}
	for (int i = 0; i < vector->size; ++i) {
 8007074:	2300      	movs	r3, #0
 8007076:	60fb      	str	r3, [r7, #12]
 8007078:	e00d      	b.n	8007096 <print+0x3a>
		printf("%d: %d\n", i, vector->data[i]);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	4413      	add	r3, r2
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	461a      	mov	r2, r3
 8007088:	68f9      	ldr	r1, [r7, #12]
 800708a:	4808      	ldr	r0, [pc, #32]	; (80070ac <print+0x50>)
 800708c:	f000 f8fc 	bl	8007288 <iprintf>
	for (int i = 0; i < vector->size; ++i) {
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	3301      	adds	r3, #1
 8007094:	60fb      	str	r3, [r7, #12]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	68fa      	ldr	r2, [r7, #12]
 800709c:	429a      	cmp	r2, r3
 800709e:	dbec      	blt.n	800707a <print+0x1e>
	}
}
 80070a0:	3710      	adds	r7, #16
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	0800822c 	.word	0x0800822c
 80070ac:	08008240 	.word	0x08008240

080070b0 <pop_back>:
	} else {
		return 0;
	}
}

void pop_back(vector_t *vector) {
 80070b0:	b480      	push	{r7}
 80070b2:	b083      	sub	sp, #12
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
	vector->size--;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	1e5a      	subs	r2, r3, #1
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	605a      	str	r2, [r3, #4]
	if (vector->size < 0) {
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	da02      	bge.n	80070d0 <pop_back+0x20>
			vector->size = 0;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	605a      	str	r2, [r3, #4]
		}
}
 80070d0:	bf00      	nop
 80070d2:	370c      	adds	r7, #12
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <erase>:

void erase(vector_t *vector, int position) {
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	6039      	str	r1, [r7, #0]
	if (position > vector->size - 1) {
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	3b01      	subs	r3, #1
 80070ec:	683a      	ldr	r2, [r7, #0]
 80070ee:	429a      	cmp	r2, r3
 80070f0:	dd03      	ble.n	80070fa <erase+0x1e>
		printf("The position does not exist.");
 80070f2:	4816      	ldr	r0, [pc, #88]	; (800714c <erase+0x70>)
 80070f4:	f000 f8c8 	bl	8007288 <iprintf>
		return;
 80070f8:	e025      	b.n	8007146 <erase+0x6a>
	}

	for (int i = 0; i < vector->size - position; ++i) {
 80070fa:	2300      	movs	r3, #0
 80070fc:	60fb      	str	r3, [r7, #12]
 80070fe:	e016      	b.n	800712e <erase+0x52>
		vector->data[position + i - 1] = vector->data[position + i];
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	6839      	ldr	r1, [r7, #0]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	440b      	add	r3, r1
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	441a      	add	r2, r3
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6819      	ldr	r1, [r3, #0]
 8007112:	6838      	ldr	r0, [r7, #0]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	4403      	add	r3, r0
 8007118:	4618      	mov	r0, r3
 800711a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800711e:	4403      	add	r3, r0
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	440b      	add	r3, r1
 8007124:	6812      	ldr	r2, [r2, #0]
 8007126:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < vector->size - position; ++i) {
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	3301      	adds	r3, #1
 800712c:	60fb      	str	r3, [r7, #12]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	685a      	ldr	r2, [r3, #4]
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	1ad3      	subs	r3, r2, r3
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	429a      	cmp	r2, r3
 800713a:	dbe1      	blt.n	8007100 <erase+0x24>
	}

	vector->size--;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	1e5a      	subs	r2, r3, #1
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	605a      	str	r2, [r3, #4]
}
 8007146:	3710      	adds	r7, #16
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}
 800714c:	08008248 	.word	0x08008248

08007150 <average>:
		return find;
	}

}

int average(vector_t *vector){
 8007150:	b480      	push	{r7}
 8007152:	b087      	sub	sp, #28
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
	int counter = 0;
 8007158:	2300      	movs	r3, #0
 800715a:	617b      	str	r3, [r7, #20]
	int sum = 0;
 800715c:	2300      	movs	r3, #0
 800715e:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < vector->size -1; ++i) {
 8007160:	2300      	movs	r3, #0
 8007162:	60fb      	str	r3, [r7, #12]
 8007164:	bf00      	nop
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	3b01      	subs	r3, #1
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	429a      	cmp	r2, r3
 8007170:	da1c      	bge.n	80071ac <average+0x5c>
		sum += vector->data[i];
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	4413      	add	r3, r2
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	693a      	ldr	r2, [r7, #16]
 8007180:	4413      	add	r3, r2
 8007182:	613b      	str	r3, [r7, #16]
		counter++;
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	3301      	adds	r3, #1
 8007188:	617b      	str	r3, [r7, #20]
		return (float)sum / counter;
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	ee07 3a90 	vmov	s15, r3
 8007190:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	ee07 3a90 	vmov	s15, r3
 800719a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800719e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80071a6:	ee17 3a90 	vmov	r3, s15
 80071aa:	e7ff      	b.n	80071ac <average+0x5c>
	};
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	371c      	adds	r7, #28
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80071b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80071f0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80071bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80071be:	e003      	b.n	80071c8 <LoopCopyDataInit>

080071c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80071c0:	4b0c      	ldr	r3, [pc, #48]	; (80071f4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80071c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80071c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80071c6:	3104      	adds	r1, #4

080071c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80071c8:	480b      	ldr	r0, [pc, #44]	; (80071f8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80071ca:	4b0c      	ldr	r3, [pc, #48]	; (80071fc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80071cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80071ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80071d0:	d3f6      	bcc.n	80071c0 <CopyDataInit>
  ldr  r2, =_sbss
 80071d2:	4a0b      	ldr	r2, [pc, #44]	; (8007200 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80071d4:	e002      	b.n	80071dc <LoopFillZerobss>

080071d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80071d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80071d8:	f842 3b04 	str.w	r3, [r2], #4

080071dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80071dc:	4b09      	ldr	r3, [pc, #36]	; (8007204 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80071de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80071e0:	d3f9      	bcc.n	80071d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80071e2:	f7ff fe91 	bl	8006f08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80071e6:	f000 f817 	bl	8007218 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80071ea:	f7fe ffe9 	bl	80061c0 <main>
  bx  lr    
 80071ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80071f0:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80071f4:	08008328 	.word	0x08008328
  ldr  r0, =_sdata
 80071f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80071fc:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8007200:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8007204:	20003f70 	.word	0x20003f70

08007208 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007208:	e7fe      	b.n	8007208 <ADC_IRQHandler>
	...

0800720c <__errno>:
 800720c:	4b01      	ldr	r3, [pc, #4]	; (8007214 <__errno+0x8>)
 800720e:	6818      	ldr	r0, [r3, #0]
 8007210:	4770      	bx	lr
 8007212:	bf00      	nop
 8007214:	2000000c 	.word	0x2000000c

08007218 <__libc_init_array>:
 8007218:	b570      	push	{r4, r5, r6, lr}
 800721a:	4e0d      	ldr	r6, [pc, #52]	; (8007250 <__libc_init_array+0x38>)
 800721c:	4c0d      	ldr	r4, [pc, #52]	; (8007254 <__libc_init_array+0x3c>)
 800721e:	1ba4      	subs	r4, r4, r6
 8007220:	10a4      	asrs	r4, r4, #2
 8007222:	2500      	movs	r5, #0
 8007224:	42a5      	cmp	r5, r4
 8007226:	d109      	bne.n	800723c <__libc_init_array+0x24>
 8007228:	4e0b      	ldr	r6, [pc, #44]	; (8007258 <__libc_init_array+0x40>)
 800722a:	4c0c      	ldr	r4, [pc, #48]	; (800725c <__libc_init_array+0x44>)
 800722c:	f000 ff74 	bl	8008118 <_init>
 8007230:	1ba4      	subs	r4, r4, r6
 8007232:	10a4      	asrs	r4, r4, #2
 8007234:	2500      	movs	r5, #0
 8007236:	42a5      	cmp	r5, r4
 8007238:	d105      	bne.n	8007246 <__libc_init_array+0x2e>
 800723a:	bd70      	pop	{r4, r5, r6, pc}
 800723c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007240:	4798      	blx	r3
 8007242:	3501      	adds	r5, #1
 8007244:	e7ee      	b.n	8007224 <__libc_init_array+0xc>
 8007246:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800724a:	4798      	blx	r3
 800724c:	3501      	adds	r5, #1
 800724e:	e7f2      	b.n	8007236 <__libc_init_array+0x1e>
 8007250:	08008320 	.word	0x08008320
 8007254:	08008320 	.word	0x08008320
 8007258:	08008320 	.word	0x08008320
 800725c:	08008324 	.word	0x08008324

08007260 <memcpy>:
 8007260:	b510      	push	{r4, lr}
 8007262:	1e43      	subs	r3, r0, #1
 8007264:	440a      	add	r2, r1
 8007266:	4291      	cmp	r1, r2
 8007268:	d100      	bne.n	800726c <memcpy+0xc>
 800726a:	bd10      	pop	{r4, pc}
 800726c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007270:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007274:	e7f7      	b.n	8007266 <memcpy+0x6>

08007276 <memset>:
 8007276:	4402      	add	r2, r0
 8007278:	4603      	mov	r3, r0
 800727a:	4293      	cmp	r3, r2
 800727c:	d100      	bne.n	8007280 <memset+0xa>
 800727e:	4770      	bx	lr
 8007280:	f803 1b01 	strb.w	r1, [r3], #1
 8007284:	e7f9      	b.n	800727a <memset+0x4>
	...

08007288 <iprintf>:
 8007288:	b40f      	push	{r0, r1, r2, r3}
 800728a:	4b0a      	ldr	r3, [pc, #40]	; (80072b4 <iprintf+0x2c>)
 800728c:	b513      	push	{r0, r1, r4, lr}
 800728e:	681c      	ldr	r4, [r3, #0]
 8007290:	b124      	cbz	r4, 800729c <iprintf+0x14>
 8007292:	69a3      	ldr	r3, [r4, #24]
 8007294:	b913      	cbnz	r3, 800729c <iprintf+0x14>
 8007296:	4620      	mov	r0, r4
 8007298:	f000 fa22 	bl	80076e0 <__sinit>
 800729c:	ab05      	add	r3, sp, #20
 800729e:	9a04      	ldr	r2, [sp, #16]
 80072a0:	68a1      	ldr	r1, [r4, #8]
 80072a2:	9301      	str	r3, [sp, #4]
 80072a4:	4620      	mov	r0, r4
 80072a6:	f000 fbdb 	bl	8007a60 <_vfiprintf_r>
 80072aa:	b002      	add	sp, #8
 80072ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072b0:	b004      	add	sp, #16
 80072b2:	4770      	bx	lr
 80072b4:	2000000c 	.word	0x2000000c

080072b8 <_puts_r>:
 80072b8:	b570      	push	{r4, r5, r6, lr}
 80072ba:	460e      	mov	r6, r1
 80072bc:	4605      	mov	r5, r0
 80072be:	b118      	cbz	r0, 80072c8 <_puts_r+0x10>
 80072c0:	6983      	ldr	r3, [r0, #24]
 80072c2:	b90b      	cbnz	r3, 80072c8 <_puts_r+0x10>
 80072c4:	f000 fa0c 	bl	80076e0 <__sinit>
 80072c8:	69ab      	ldr	r3, [r5, #24]
 80072ca:	68ac      	ldr	r4, [r5, #8]
 80072cc:	b913      	cbnz	r3, 80072d4 <_puts_r+0x1c>
 80072ce:	4628      	mov	r0, r5
 80072d0:	f000 fa06 	bl	80076e0 <__sinit>
 80072d4:	4b23      	ldr	r3, [pc, #140]	; (8007364 <_puts_r+0xac>)
 80072d6:	429c      	cmp	r4, r3
 80072d8:	d117      	bne.n	800730a <_puts_r+0x52>
 80072da:	686c      	ldr	r4, [r5, #4]
 80072dc:	89a3      	ldrh	r3, [r4, #12]
 80072de:	071b      	lsls	r3, r3, #28
 80072e0:	d51d      	bpl.n	800731e <_puts_r+0x66>
 80072e2:	6923      	ldr	r3, [r4, #16]
 80072e4:	b1db      	cbz	r3, 800731e <_puts_r+0x66>
 80072e6:	3e01      	subs	r6, #1
 80072e8:	68a3      	ldr	r3, [r4, #8]
 80072ea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80072ee:	3b01      	subs	r3, #1
 80072f0:	60a3      	str	r3, [r4, #8]
 80072f2:	b9e9      	cbnz	r1, 8007330 <_puts_r+0x78>
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	da2e      	bge.n	8007356 <_puts_r+0x9e>
 80072f8:	4622      	mov	r2, r4
 80072fa:	210a      	movs	r1, #10
 80072fc:	4628      	mov	r0, r5
 80072fe:	f000 f83f 	bl	8007380 <__swbuf_r>
 8007302:	3001      	adds	r0, #1
 8007304:	d011      	beq.n	800732a <_puts_r+0x72>
 8007306:	200a      	movs	r0, #10
 8007308:	e011      	b.n	800732e <_puts_r+0x76>
 800730a:	4b17      	ldr	r3, [pc, #92]	; (8007368 <_puts_r+0xb0>)
 800730c:	429c      	cmp	r4, r3
 800730e:	d101      	bne.n	8007314 <_puts_r+0x5c>
 8007310:	68ac      	ldr	r4, [r5, #8]
 8007312:	e7e3      	b.n	80072dc <_puts_r+0x24>
 8007314:	4b15      	ldr	r3, [pc, #84]	; (800736c <_puts_r+0xb4>)
 8007316:	429c      	cmp	r4, r3
 8007318:	bf08      	it	eq
 800731a:	68ec      	ldreq	r4, [r5, #12]
 800731c:	e7de      	b.n	80072dc <_puts_r+0x24>
 800731e:	4621      	mov	r1, r4
 8007320:	4628      	mov	r0, r5
 8007322:	f000 f87f 	bl	8007424 <__swsetup_r>
 8007326:	2800      	cmp	r0, #0
 8007328:	d0dd      	beq.n	80072e6 <_puts_r+0x2e>
 800732a:	f04f 30ff 	mov.w	r0, #4294967295
 800732e:	bd70      	pop	{r4, r5, r6, pc}
 8007330:	2b00      	cmp	r3, #0
 8007332:	da04      	bge.n	800733e <_puts_r+0x86>
 8007334:	69a2      	ldr	r2, [r4, #24]
 8007336:	429a      	cmp	r2, r3
 8007338:	dc06      	bgt.n	8007348 <_puts_r+0x90>
 800733a:	290a      	cmp	r1, #10
 800733c:	d004      	beq.n	8007348 <_puts_r+0x90>
 800733e:	6823      	ldr	r3, [r4, #0]
 8007340:	1c5a      	adds	r2, r3, #1
 8007342:	6022      	str	r2, [r4, #0]
 8007344:	7019      	strb	r1, [r3, #0]
 8007346:	e7cf      	b.n	80072e8 <_puts_r+0x30>
 8007348:	4622      	mov	r2, r4
 800734a:	4628      	mov	r0, r5
 800734c:	f000 f818 	bl	8007380 <__swbuf_r>
 8007350:	3001      	adds	r0, #1
 8007352:	d1c9      	bne.n	80072e8 <_puts_r+0x30>
 8007354:	e7e9      	b.n	800732a <_puts_r+0x72>
 8007356:	6823      	ldr	r3, [r4, #0]
 8007358:	200a      	movs	r0, #10
 800735a:	1c5a      	adds	r2, r3, #1
 800735c:	6022      	str	r2, [r4, #0]
 800735e:	7018      	strb	r0, [r3, #0]
 8007360:	e7e5      	b.n	800732e <_puts_r+0x76>
 8007362:	bf00      	nop
 8007364:	080082a4 	.word	0x080082a4
 8007368:	080082c4 	.word	0x080082c4
 800736c:	08008284 	.word	0x08008284

08007370 <puts>:
 8007370:	4b02      	ldr	r3, [pc, #8]	; (800737c <puts+0xc>)
 8007372:	4601      	mov	r1, r0
 8007374:	6818      	ldr	r0, [r3, #0]
 8007376:	f7ff bf9f 	b.w	80072b8 <_puts_r>
 800737a:	bf00      	nop
 800737c:	2000000c 	.word	0x2000000c

08007380 <__swbuf_r>:
 8007380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007382:	460e      	mov	r6, r1
 8007384:	4614      	mov	r4, r2
 8007386:	4605      	mov	r5, r0
 8007388:	b118      	cbz	r0, 8007392 <__swbuf_r+0x12>
 800738a:	6983      	ldr	r3, [r0, #24]
 800738c:	b90b      	cbnz	r3, 8007392 <__swbuf_r+0x12>
 800738e:	f000 f9a7 	bl	80076e0 <__sinit>
 8007392:	4b21      	ldr	r3, [pc, #132]	; (8007418 <__swbuf_r+0x98>)
 8007394:	429c      	cmp	r4, r3
 8007396:	d12a      	bne.n	80073ee <__swbuf_r+0x6e>
 8007398:	686c      	ldr	r4, [r5, #4]
 800739a:	69a3      	ldr	r3, [r4, #24]
 800739c:	60a3      	str	r3, [r4, #8]
 800739e:	89a3      	ldrh	r3, [r4, #12]
 80073a0:	071a      	lsls	r2, r3, #28
 80073a2:	d52e      	bpl.n	8007402 <__swbuf_r+0x82>
 80073a4:	6923      	ldr	r3, [r4, #16]
 80073a6:	b363      	cbz	r3, 8007402 <__swbuf_r+0x82>
 80073a8:	6923      	ldr	r3, [r4, #16]
 80073aa:	6820      	ldr	r0, [r4, #0]
 80073ac:	1ac0      	subs	r0, r0, r3
 80073ae:	6963      	ldr	r3, [r4, #20]
 80073b0:	b2f6      	uxtb	r6, r6
 80073b2:	4283      	cmp	r3, r0
 80073b4:	4637      	mov	r7, r6
 80073b6:	dc04      	bgt.n	80073c2 <__swbuf_r+0x42>
 80073b8:	4621      	mov	r1, r4
 80073ba:	4628      	mov	r0, r5
 80073bc:	f000 f926 	bl	800760c <_fflush_r>
 80073c0:	bb28      	cbnz	r0, 800740e <__swbuf_r+0x8e>
 80073c2:	68a3      	ldr	r3, [r4, #8]
 80073c4:	3b01      	subs	r3, #1
 80073c6:	60a3      	str	r3, [r4, #8]
 80073c8:	6823      	ldr	r3, [r4, #0]
 80073ca:	1c5a      	adds	r2, r3, #1
 80073cc:	6022      	str	r2, [r4, #0]
 80073ce:	701e      	strb	r6, [r3, #0]
 80073d0:	6963      	ldr	r3, [r4, #20]
 80073d2:	3001      	adds	r0, #1
 80073d4:	4283      	cmp	r3, r0
 80073d6:	d004      	beq.n	80073e2 <__swbuf_r+0x62>
 80073d8:	89a3      	ldrh	r3, [r4, #12]
 80073da:	07db      	lsls	r3, r3, #31
 80073dc:	d519      	bpl.n	8007412 <__swbuf_r+0x92>
 80073de:	2e0a      	cmp	r6, #10
 80073e0:	d117      	bne.n	8007412 <__swbuf_r+0x92>
 80073e2:	4621      	mov	r1, r4
 80073e4:	4628      	mov	r0, r5
 80073e6:	f000 f911 	bl	800760c <_fflush_r>
 80073ea:	b190      	cbz	r0, 8007412 <__swbuf_r+0x92>
 80073ec:	e00f      	b.n	800740e <__swbuf_r+0x8e>
 80073ee:	4b0b      	ldr	r3, [pc, #44]	; (800741c <__swbuf_r+0x9c>)
 80073f0:	429c      	cmp	r4, r3
 80073f2:	d101      	bne.n	80073f8 <__swbuf_r+0x78>
 80073f4:	68ac      	ldr	r4, [r5, #8]
 80073f6:	e7d0      	b.n	800739a <__swbuf_r+0x1a>
 80073f8:	4b09      	ldr	r3, [pc, #36]	; (8007420 <__swbuf_r+0xa0>)
 80073fa:	429c      	cmp	r4, r3
 80073fc:	bf08      	it	eq
 80073fe:	68ec      	ldreq	r4, [r5, #12]
 8007400:	e7cb      	b.n	800739a <__swbuf_r+0x1a>
 8007402:	4621      	mov	r1, r4
 8007404:	4628      	mov	r0, r5
 8007406:	f000 f80d 	bl	8007424 <__swsetup_r>
 800740a:	2800      	cmp	r0, #0
 800740c:	d0cc      	beq.n	80073a8 <__swbuf_r+0x28>
 800740e:	f04f 37ff 	mov.w	r7, #4294967295
 8007412:	4638      	mov	r0, r7
 8007414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007416:	bf00      	nop
 8007418:	080082a4 	.word	0x080082a4
 800741c:	080082c4 	.word	0x080082c4
 8007420:	08008284 	.word	0x08008284

08007424 <__swsetup_r>:
 8007424:	4b32      	ldr	r3, [pc, #200]	; (80074f0 <__swsetup_r+0xcc>)
 8007426:	b570      	push	{r4, r5, r6, lr}
 8007428:	681d      	ldr	r5, [r3, #0]
 800742a:	4606      	mov	r6, r0
 800742c:	460c      	mov	r4, r1
 800742e:	b125      	cbz	r5, 800743a <__swsetup_r+0x16>
 8007430:	69ab      	ldr	r3, [r5, #24]
 8007432:	b913      	cbnz	r3, 800743a <__swsetup_r+0x16>
 8007434:	4628      	mov	r0, r5
 8007436:	f000 f953 	bl	80076e0 <__sinit>
 800743a:	4b2e      	ldr	r3, [pc, #184]	; (80074f4 <__swsetup_r+0xd0>)
 800743c:	429c      	cmp	r4, r3
 800743e:	d10f      	bne.n	8007460 <__swsetup_r+0x3c>
 8007440:	686c      	ldr	r4, [r5, #4]
 8007442:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007446:	b29a      	uxth	r2, r3
 8007448:	0715      	lsls	r5, r2, #28
 800744a:	d42c      	bmi.n	80074a6 <__swsetup_r+0x82>
 800744c:	06d0      	lsls	r0, r2, #27
 800744e:	d411      	bmi.n	8007474 <__swsetup_r+0x50>
 8007450:	2209      	movs	r2, #9
 8007452:	6032      	str	r2, [r6, #0]
 8007454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007458:	81a3      	strh	r3, [r4, #12]
 800745a:	f04f 30ff 	mov.w	r0, #4294967295
 800745e:	e03e      	b.n	80074de <__swsetup_r+0xba>
 8007460:	4b25      	ldr	r3, [pc, #148]	; (80074f8 <__swsetup_r+0xd4>)
 8007462:	429c      	cmp	r4, r3
 8007464:	d101      	bne.n	800746a <__swsetup_r+0x46>
 8007466:	68ac      	ldr	r4, [r5, #8]
 8007468:	e7eb      	b.n	8007442 <__swsetup_r+0x1e>
 800746a:	4b24      	ldr	r3, [pc, #144]	; (80074fc <__swsetup_r+0xd8>)
 800746c:	429c      	cmp	r4, r3
 800746e:	bf08      	it	eq
 8007470:	68ec      	ldreq	r4, [r5, #12]
 8007472:	e7e6      	b.n	8007442 <__swsetup_r+0x1e>
 8007474:	0751      	lsls	r1, r2, #29
 8007476:	d512      	bpl.n	800749e <__swsetup_r+0x7a>
 8007478:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800747a:	b141      	cbz	r1, 800748e <__swsetup_r+0x6a>
 800747c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007480:	4299      	cmp	r1, r3
 8007482:	d002      	beq.n	800748a <__swsetup_r+0x66>
 8007484:	4630      	mov	r0, r6
 8007486:	f000 fa19 	bl	80078bc <_free_r>
 800748a:	2300      	movs	r3, #0
 800748c:	6363      	str	r3, [r4, #52]	; 0x34
 800748e:	89a3      	ldrh	r3, [r4, #12]
 8007490:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007494:	81a3      	strh	r3, [r4, #12]
 8007496:	2300      	movs	r3, #0
 8007498:	6063      	str	r3, [r4, #4]
 800749a:	6923      	ldr	r3, [r4, #16]
 800749c:	6023      	str	r3, [r4, #0]
 800749e:	89a3      	ldrh	r3, [r4, #12]
 80074a0:	f043 0308 	orr.w	r3, r3, #8
 80074a4:	81a3      	strh	r3, [r4, #12]
 80074a6:	6923      	ldr	r3, [r4, #16]
 80074a8:	b94b      	cbnz	r3, 80074be <__swsetup_r+0x9a>
 80074aa:	89a3      	ldrh	r3, [r4, #12]
 80074ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80074b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074b4:	d003      	beq.n	80074be <__swsetup_r+0x9a>
 80074b6:	4621      	mov	r1, r4
 80074b8:	4630      	mov	r0, r6
 80074ba:	f000 f9bf 	bl	800783c <__smakebuf_r>
 80074be:	89a2      	ldrh	r2, [r4, #12]
 80074c0:	f012 0301 	ands.w	r3, r2, #1
 80074c4:	d00c      	beq.n	80074e0 <__swsetup_r+0xbc>
 80074c6:	2300      	movs	r3, #0
 80074c8:	60a3      	str	r3, [r4, #8]
 80074ca:	6963      	ldr	r3, [r4, #20]
 80074cc:	425b      	negs	r3, r3
 80074ce:	61a3      	str	r3, [r4, #24]
 80074d0:	6923      	ldr	r3, [r4, #16]
 80074d2:	b953      	cbnz	r3, 80074ea <__swsetup_r+0xc6>
 80074d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074d8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80074dc:	d1ba      	bne.n	8007454 <__swsetup_r+0x30>
 80074de:	bd70      	pop	{r4, r5, r6, pc}
 80074e0:	0792      	lsls	r2, r2, #30
 80074e2:	bf58      	it	pl
 80074e4:	6963      	ldrpl	r3, [r4, #20]
 80074e6:	60a3      	str	r3, [r4, #8]
 80074e8:	e7f2      	b.n	80074d0 <__swsetup_r+0xac>
 80074ea:	2000      	movs	r0, #0
 80074ec:	e7f7      	b.n	80074de <__swsetup_r+0xba>
 80074ee:	bf00      	nop
 80074f0:	2000000c 	.word	0x2000000c
 80074f4:	080082a4 	.word	0x080082a4
 80074f8:	080082c4 	.word	0x080082c4
 80074fc:	08008284 	.word	0x08008284

08007500 <__sflush_r>:
 8007500:	898a      	ldrh	r2, [r1, #12]
 8007502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007506:	4605      	mov	r5, r0
 8007508:	0710      	lsls	r0, r2, #28
 800750a:	460c      	mov	r4, r1
 800750c:	d458      	bmi.n	80075c0 <__sflush_r+0xc0>
 800750e:	684b      	ldr	r3, [r1, #4]
 8007510:	2b00      	cmp	r3, #0
 8007512:	dc05      	bgt.n	8007520 <__sflush_r+0x20>
 8007514:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007516:	2b00      	cmp	r3, #0
 8007518:	dc02      	bgt.n	8007520 <__sflush_r+0x20>
 800751a:	2000      	movs	r0, #0
 800751c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007520:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007522:	2e00      	cmp	r6, #0
 8007524:	d0f9      	beq.n	800751a <__sflush_r+0x1a>
 8007526:	2300      	movs	r3, #0
 8007528:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800752c:	682f      	ldr	r7, [r5, #0]
 800752e:	6a21      	ldr	r1, [r4, #32]
 8007530:	602b      	str	r3, [r5, #0]
 8007532:	d032      	beq.n	800759a <__sflush_r+0x9a>
 8007534:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007536:	89a3      	ldrh	r3, [r4, #12]
 8007538:	075a      	lsls	r2, r3, #29
 800753a:	d505      	bpl.n	8007548 <__sflush_r+0x48>
 800753c:	6863      	ldr	r3, [r4, #4]
 800753e:	1ac0      	subs	r0, r0, r3
 8007540:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007542:	b10b      	cbz	r3, 8007548 <__sflush_r+0x48>
 8007544:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007546:	1ac0      	subs	r0, r0, r3
 8007548:	2300      	movs	r3, #0
 800754a:	4602      	mov	r2, r0
 800754c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800754e:	6a21      	ldr	r1, [r4, #32]
 8007550:	4628      	mov	r0, r5
 8007552:	47b0      	blx	r6
 8007554:	1c43      	adds	r3, r0, #1
 8007556:	89a3      	ldrh	r3, [r4, #12]
 8007558:	d106      	bne.n	8007568 <__sflush_r+0x68>
 800755a:	6829      	ldr	r1, [r5, #0]
 800755c:	291d      	cmp	r1, #29
 800755e:	d848      	bhi.n	80075f2 <__sflush_r+0xf2>
 8007560:	4a29      	ldr	r2, [pc, #164]	; (8007608 <__sflush_r+0x108>)
 8007562:	40ca      	lsrs	r2, r1
 8007564:	07d6      	lsls	r6, r2, #31
 8007566:	d544      	bpl.n	80075f2 <__sflush_r+0xf2>
 8007568:	2200      	movs	r2, #0
 800756a:	6062      	str	r2, [r4, #4]
 800756c:	04d9      	lsls	r1, r3, #19
 800756e:	6922      	ldr	r2, [r4, #16]
 8007570:	6022      	str	r2, [r4, #0]
 8007572:	d504      	bpl.n	800757e <__sflush_r+0x7e>
 8007574:	1c42      	adds	r2, r0, #1
 8007576:	d101      	bne.n	800757c <__sflush_r+0x7c>
 8007578:	682b      	ldr	r3, [r5, #0]
 800757a:	b903      	cbnz	r3, 800757e <__sflush_r+0x7e>
 800757c:	6560      	str	r0, [r4, #84]	; 0x54
 800757e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007580:	602f      	str	r7, [r5, #0]
 8007582:	2900      	cmp	r1, #0
 8007584:	d0c9      	beq.n	800751a <__sflush_r+0x1a>
 8007586:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800758a:	4299      	cmp	r1, r3
 800758c:	d002      	beq.n	8007594 <__sflush_r+0x94>
 800758e:	4628      	mov	r0, r5
 8007590:	f000 f994 	bl	80078bc <_free_r>
 8007594:	2000      	movs	r0, #0
 8007596:	6360      	str	r0, [r4, #52]	; 0x34
 8007598:	e7c0      	b.n	800751c <__sflush_r+0x1c>
 800759a:	2301      	movs	r3, #1
 800759c:	4628      	mov	r0, r5
 800759e:	47b0      	blx	r6
 80075a0:	1c41      	adds	r1, r0, #1
 80075a2:	d1c8      	bne.n	8007536 <__sflush_r+0x36>
 80075a4:	682b      	ldr	r3, [r5, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d0c5      	beq.n	8007536 <__sflush_r+0x36>
 80075aa:	2b1d      	cmp	r3, #29
 80075ac:	d001      	beq.n	80075b2 <__sflush_r+0xb2>
 80075ae:	2b16      	cmp	r3, #22
 80075b0:	d101      	bne.n	80075b6 <__sflush_r+0xb6>
 80075b2:	602f      	str	r7, [r5, #0]
 80075b4:	e7b1      	b.n	800751a <__sflush_r+0x1a>
 80075b6:	89a3      	ldrh	r3, [r4, #12]
 80075b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075bc:	81a3      	strh	r3, [r4, #12]
 80075be:	e7ad      	b.n	800751c <__sflush_r+0x1c>
 80075c0:	690f      	ldr	r7, [r1, #16]
 80075c2:	2f00      	cmp	r7, #0
 80075c4:	d0a9      	beq.n	800751a <__sflush_r+0x1a>
 80075c6:	0793      	lsls	r3, r2, #30
 80075c8:	680e      	ldr	r6, [r1, #0]
 80075ca:	bf08      	it	eq
 80075cc:	694b      	ldreq	r3, [r1, #20]
 80075ce:	600f      	str	r7, [r1, #0]
 80075d0:	bf18      	it	ne
 80075d2:	2300      	movne	r3, #0
 80075d4:	eba6 0807 	sub.w	r8, r6, r7
 80075d8:	608b      	str	r3, [r1, #8]
 80075da:	f1b8 0f00 	cmp.w	r8, #0
 80075de:	dd9c      	ble.n	800751a <__sflush_r+0x1a>
 80075e0:	4643      	mov	r3, r8
 80075e2:	463a      	mov	r2, r7
 80075e4:	6a21      	ldr	r1, [r4, #32]
 80075e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80075e8:	4628      	mov	r0, r5
 80075ea:	47b0      	blx	r6
 80075ec:	2800      	cmp	r0, #0
 80075ee:	dc06      	bgt.n	80075fe <__sflush_r+0xfe>
 80075f0:	89a3      	ldrh	r3, [r4, #12]
 80075f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075f6:	81a3      	strh	r3, [r4, #12]
 80075f8:	f04f 30ff 	mov.w	r0, #4294967295
 80075fc:	e78e      	b.n	800751c <__sflush_r+0x1c>
 80075fe:	4407      	add	r7, r0
 8007600:	eba8 0800 	sub.w	r8, r8, r0
 8007604:	e7e9      	b.n	80075da <__sflush_r+0xda>
 8007606:	bf00      	nop
 8007608:	20400001 	.word	0x20400001

0800760c <_fflush_r>:
 800760c:	b538      	push	{r3, r4, r5, lr}
 800760e:	690b      	ldr	r3, [r1, #16]
 8007610:	4605      	mov	r5, r0
 8007612:	460c      	mov	r4, r1
 8007614:	b1db      	cbz	r3, 800764e <_fflush_r+0x42>
 8007616:	b118      	cbz	r0, 8007620 <_fflush_r+0x14>
 8007618:	6983      	ldr	r3, [r0, #24]
 800761a:	b90b      	cbnz	r3, 8007620 <_fflush_r+0x14>
 800761c:	f000 f860 	bl	80076e0 <__sinit>
 8007620:	4b0c      	ldr	r3, [pc, #48]	; (8007654 <_fflush_r+0x48>)
 8007622:	429c      	cmp	r4, r3
 8007624:	d109      	bne.n	800763a <_fflush_r+0x2e>
 8007626:	686c      	ldr	r4, [r5, #4]
 8007628:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800762c:	b17b      	cbz	r3, 800764e <_fflush_r+0x42>
 800762e:	4621      	mov	r1, r4
 8007630:	4628      	mov	r0, r5
 8007632:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007636:	f7ff bf63 	b.w	8007500 <__sflush_r>
 800763a:	4b07      	ldr	r3, [pc, #28]	; (8007658 <_fflush_r+0x4c>)
 800763c:	429c      	cmp	r4, r3
 800763e:	d101      	bne.n	8007644 <_fflush_r+0x38>
 8007640:	68ac      	ldr	r4, [r5, #8]
 8007642:	e7f1      	b.n	8007628 <_fflush_r+0x1c>
 8007644:	4b05      	ldr	r3, [pc, #20]	; (800765c <_fflush_r+0x50>)
 8007646:	429c      	cmp	r4, r3
 8007648:	bf08      	it	eq
 800764a:	68ec      	ldreq	r4, [r5, #12]
 800764c:	e7ec      	b.n	8007628 <_fflush_r+0x1c>
 800764e:	2000      	movs	r0, #0
 8007650:	bd38      	pop	{r3, r4, r5, pc}
 8007652:	bf00      	nop
 8007654:	080082a4 	.word	0x080082a4
 8007658:	080082c4 	.word	0x080082c4
 800765c:	08008284 	.word	0x08008284

08007660 <std>:
 8007660:	2300      	movs	r3, #0
 8007662:	b510      	push	{r4, lr}
 8007664:	4604      	mov	r4, r0
 8007666:	e9c0 3300 	strd	r3, r3, [r0]
 800766a:	6083      	str	r3, [r0, #8]
 800766c:	8181      	strh	r1, [r0, #12]
 800766e:	6643      	str	r3, [r0, #100]	; 0x64
 8007670:	81c2      	strh	r2, [r0, #14]
 8007672:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007676:	6183      	str	r3, [r0, #24]
 8007678:	4619      	mov	r1, r3
 800767a:	2208      	movs	r2, #8
 800767c:	305c      	adds	r0, #92	; 0x5c
 800767e:	f7ff fdfa 	bl	8007276 <memset>
 8007682:	4b05      	ldr	r3, [pc, #20]	; (8007698 <std+0x38>)
 8007684:	6263      	str	r3, [r4, #36]	; 0x24
 8007686:	4b05      	ldr	r3, [pc, #20]	; (800769c <std+0x3c>)
 8007688:	62a3      	str	r3, [r4, #40]	; 0x28
 800768a:	4b05      	ldr	r3, [pc, #20]	; (80076a0 <std+0x40>)
 800768c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800768e:	4b05      	ldr	r3, [pc, #20]	; (80076a4 <std+0x44>)
 8007690:	6224      	str	r4, [r4, #32]
 8007692:	6323      	str	r3, [r4, #48]	; 0x30
 8007694:	bd10      	pop	{r4, pc}
 8007696:	bf00      	nop
 8007698:	08007fbd 	.word	0x08007fbd
 800769c:	08007fdf 	.word	0x08007fdf
 80076a0:	08008017 	.word	0x08008017
 80076a4:	0800803b 	.word	0x0800803b

080076a8 <_cleanup_r>:
 80076a8:	4901      	ldr	r1, [pc, #4]	; (80076b0 <_cleanup_r+0x8>)
 80076aa:	f000 b885 	b.w	80077b8 <_fwalk_reent>
 80076ae:	bf00      	nop
 80076b0:	0800760d 	.word	0x0800760d

080076b4 <__sfmoreglue>:
 80076b4:	b570      	push	{r4, r5, r6, lr}
 80076b6:	1e4a      	subs	r2, r1, #1
 80076b8:	2568      	movs	r5, #104	; 0x68
 80076ba:	4355      	muls	r5, r2
 80076bc:	460e      	mov	r6, r1
 80076be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80076c2:	f000 f949 	bl	8007958 <_malloc_r>
 80076c6:	4604      	mov	r4, r0
 80076c8:	b140      	cbz	r0, 80076dc <__sfmoreglue+0x28>
 80076ca:	2100      	movs	r1, #0
 80076cc:	e9c0 1600 	strd	r1, r6, [r0]
 80076d0:	300c      	adds	r0, #12
 80076d2:	60a0      	str	r0, [r4, #8]
 80076d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80076d8:	f7ff fdcd 	bl	8007276 <memset>
 80076dc:	4620      	mov	r0, r4
 80076de:	bd70      	pop	{r4, r5, r6, pc}

080076e0 <__sinit>:
 80076e0:	6983      	ldr	r3, [r0, #24]
 80076e2:	b510      	push	{r4, lr}
 80076e4:	4604      	mov	r4, r0
 80076e6:	bb33      	cbnz	r3, 8007736 <__sinit+0x56>
 80076e8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80076ec:	6503      	str	r3, [r0, #80]	; 0x50
 80076ee:	4b12      	ldr	r3, [pc, #72]	; (8007738 <__sinit+0x58>)
 80076f0:	4a12      	ldr	r2, [pc, #72]	; (800773c <__sinit+0x5c>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	6282      	str	r2, [r0, #40]	; 0x28
 80076f6:	4298      	cmp	r0, r3
 80076f8:	bf04      	itt	eq
 80076fa:	2301      	moveq	r3, #1
 80076fc:	6183      	streq	r3, [r0, #24]
 80076fe:	f000 f81f 	bl	8007740 <__sfp>
 8007702:	6060      	str	r0, [r4, #4]
 8007704:	4620      	mov	r0, r4
 8007706:	f000 f81b 	bl	8007740 <__sfp>
 800770a:	60a0      	str	r0, [r4, #8]
 800770c:	4620      	mov	r0, r4
 800770e:	f000 f817 	bl	8007740 <__sfp>
 8007712:	2200      	movs	r2, #0
 8007714:	60e0      	str	r0, [r4, #12]
 8007716:	2104      	movs	r1, #4
 8007718:	6860      	ldr	r0, [r4, #4]
 800771a:	f7ff ffa1 	bl	8007660 <std>
 800771e:	2201      	movs	r2, #1
 8007720:	2109      	movs	r1, #9
 8007722:	68a0      	ldr	r0, [r4, #8]
 8007724:	f7ff ff9c 	bl	8007660 <std>
 8007728:	2202      	movs	r2, #2
 800772a:	2112      	movs	r1, #18
 800772c:	68e0      	ldr	r0, [r4, #12]
 800772e:	f7ff ff97 	bl	8007660 <std>
 8007732:	2301      	movs	r3, #1
 8007734:	61a3      	str	r3, [r4, #24]
 8007736:	bd10      	pop	{r4, pc}
 8007738:	08008280 	.word	0x08008280
 800773c:	080076a9 	.word	0x080076a9

08007740 <__sfp>:
 8007740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007742:	4b1b      	ldr	r3, [pc, #108]	; (80077b0 <__sfp+0x70>)
 8007744:	681e      	ldr	r6, [r3, #0]
 8007746:	69b3      	ldr	r3, [r6, #24]
 8007748:	4607      	mov	r7, r0
 800774a:	b913      	cbnz	r3, 8007752 <__sfp+0x12>
 800774c:	4630      	mov	r0, r6
 800774e:	f7ff ffc7 	bl	80076e0 <__sinit>
 8007752:	3648      	adds	r6, #72	; 0x48
 8007754:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007758:	3b01      	subs	r3, #1
 800775a:	d503      	bpl.n	8007764 <__sfp+0x24>
 800775c:	6833      	ldr	r3, [r6, #0]
 800775e:	b133      	cbz	r3, 800776e <__sfp+0x2e>
 8007760:	6836      	ldr	r6, [r6, #0]
 8007762:	e7f7      	b.n	8007754 <__sfp+0x14>
 8007764:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007768:	b16d      	cbz	r5, 8007786 <__sfp+0x46>
 800776a:	3468      	adds	r4, #104	; 0x68
 800776c:	e7f4      	b.n	8007758 <__sfp+0x18>
 800776e:	2104      	movs	r1, #4
 8007770:	4638      	mov	r0, r7
 8007772:	f7ff ff9f 	bl	80076b4 <__sfmoreglue>
 8007776:	6030      	str	r0, [r6, #0]
 8007778:	2800      	cmp	r0, #0
 800777a:	d1f1      	bne.n	8007760 <__sfp+0x20>
 800777c:	230c      	movs	r3, #12
 800777e:	603b      	str	r3, [r7, #0]
 8007780:	4604      	mov	r4, r0
 8007782:	4620      	mov	r0, r4
 8007784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007786:	4b0b      	ldr	r3, [pc, #44]	; (80077b4 <__sfp+0x74>)
 8007788:	6665      	str	r5, [r4, #100]	; 0x64
 800778a:	e9c4 5500 	strd	r5, r5, [r4]
 800778e:	60a5      	str	r5, [r4, #8]
 8007790:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007794:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007798:	2208      	movs	r2, #8
 800779a:	4629      	mov	r1, r5
 800779c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80077a0:	f7ff fd69 	bl	8007276 <memset>
 80077a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80077a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80077ac:	e7e9      	b.n	8007782 <__sfp+0x42>
 80077ae:	bf00      	nop
 80077b0:	08008280 	.word	0x08008280
 80077b4:	ffff0001 	.word	0xffff0001

080077b8 <_fwalk_reent>:
 80077b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077bc:	4680      	mov	r8, r0
 80077be:	4689      	mov	r9, r1
 80077c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80077c4:	2600      	movs	r6, #0
 80077c6:	b914      	cbnz	r4, 80077ce <_fwalk_reent+0x16>
 80077c8:	4630      	mov	r0, r6
 80077ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077ce:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80077d2:	3f01      	subs	r7, #1
 80077d4:	d501      	bpl.n	80077da <_fwalk_reent+0x22>
 80077d6:	6824      	ldr	r4, [r4, #0]
 80077d8:	e7f5      	b.n	80077c6 <_fwalk_reent+0xe>
 80077da:	89ab      	ldrh	r3, [r5, #12]
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d907      	bls.n	80077f0 <_fwalk_reent+0x38>
 80077e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80077e4:	3301      	adds	r3, #1
 80077e6:	d003      	beq.n	80077f0 <_fwalk_reent+0x38>
 80077e8:	4629      	mov	r1, r5
 80077ea:	4640      	mov	r0, r8
 80077ec:	47c8      	blx	r9
 80077ee:	4306      	orrs	r6, r0
 80077f0:	3568      	adds	r5, #104	; 0x68
 80077f2:	e7ee      	b.n	80077d2 <_fwalk_reent+0x1a>

080077f4 <__swhatbuf_r>:
 80077f4:	b570      	push	{r4, r5, r6, lr}
 80077f6:	460e      	mov	r6, r1
 80077f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077fc:	2900      	cmp	r1, #0
 80077fe:	b096      	sub	sp, #88	; 0x58
 8007800:	4614      	mov	r4, r2
 8007802:	461d      	mov	r5, r3
 8007804:	da07      	bge.n	8007816 <__swhatbuf_r+0x22>
 8007806:	2300      	movs	r3, #0
 8007808:	602b      	str	r3, [r5, #0]
 800780a:	89b3      	ldrh	r3, [r6, #12]
 800780c:	061a      	lsls	r2, r3, #24
 800780e:	d410      	bmi.n	8007832 <__swhatbuf_r+0x3e>
 8007810:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007814:	e00e      	b.n	8007834 <__swhatbuf_r+0x40>
 8007816:	466a      	mov	r2, sp
 8007818:	f000 fc36 	bl	8008088 <_fstat_r>
 800781c:	2800      	cmp	r0, #0
 800781e:	dbf2      	blt.n	8007806 <__swhatbuf_r+0x12>
 8007820:	9a01      	ldr	r2, [sp, #4]
 8007822:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007826:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800782a:	425a      	negs	r2, r3
 800782c:	415a      	adcs	r2, r3
 800782e:	602a      	str	r2, [r5, #0]
 8007830:	e7ee      	b.n	8007810 <__swhatbuf_r+0x1c>
 8007832:	2340      	movs	r3, #64	; 0x40
 8007834:	2000      	movs	r0, #0
 8007836:	6023      	str	r3, [r4, #0]
 8007838:	b016      	add	sp, #88	; 0x58
 800783a:	bd70      	pop	{r4, r5, r6, pc}

0800783c <__smakebuf_r>:
 800783c:	898b      	ldrh	r3, [r1, #12]
 800783e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007840:	079d      	lsls	r5, r3, #30
 8007842:	4606      	mov	r6, r0
 8007844:	460c      	mov	r4, r1
 8007846:	d507      	bpl.n	8007858 <__smakebuf_r+0x1c>
 8007848:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800784c:	6023      	str	r3, [r4, #0]
 800784e:	6123      	str	r3, [r4, #16]
 8007850:	2301      	movs	r3, #1
 8007852:	6163      	str	r3, [r4, #20]
 8007854:	b002      	add	sp, #8
 8007856:	bd70      	pop	{r4, r5, r6, pc}
 8007858:	ab01      	add	r3, sp, #4
 800785a:	466a      	mov	r2, sp
 800785c:	f7ff ffca 	bl	80077f4 <__swhatbuf_r>
 8007860:	9900      	ldr	r1, [sp, #0]
 8007862:	4605      	mov	r5, r0
 8007864:	4630      	mov	r0, r6
 8007866:	f000 f877 	bl	8007958 <_malloc_r>
 800786a:	b948      	cbnz	r0, 8007880 <__smakebuf_r+0x44>
 800786c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007870:	059a      	lsls	r2, r3, #22
 8007872:	d4ef      	bmi.n	8007854 <__smakebuf_r+0x18>
 8007874:	f023 0303 	bic.w	r3, r3, #3
 8007878:	f043 0302 	orr.w	r3, r3, #2
 800787c:	81a3      	strh	r3, [r4, #12]
 800787e:	e7e3      	b.n	8007848 <__smakebuf_r+0xc>
 8007880:	4b0d      	ldr	r3, [pc, #52]	; (80078b8 <__smakebuf_r+0x7c>)
 8007882:	62b3      	str	r3, [r6, #40]	; 0x28
 8007884:	89a3      	ldrh	r3, [r4, #12]
 8007886:	6020      	str	r0, [r4, #0]
 8007888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800788c:	81a3      	strh	r3, [r4, #12]
 800788e:	9b00      	ldr	r3, [sp, #0]
 8007890:	6163      	str	r3, [r4, #20]
 8007892:	9b01      	ldr	r3, [sp, #4]
 8007894:	6120      	str	r0, [r4, #16]
 8007896:	b15b      	cbz	r3, 80078b0 <__smakebuf_r+0x74>
 8007898:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800789c:	4630      	mov	r0, r6
 800789e:	f000 fc05 	bl	80080ac <_isatty_r>
 80078a2:	b128      	cbz	r0, 80078b0 <__smakebuf_r+0x74>
 80078a4:	89a3      	ldrh	r3, [r4, #12]
 80078a6:	f023 0303 	bic.w	r3, r3, #3
 80078aa:	f043 0301 	orr.w	r3, r3, #1
 80078ae:	81a3      	strh	r3, [r4, #12]
 80078b0:	89a3      	ldrh	r3, [r4, #12]
 80078b2:	431d      	orrs	r5, r3
 80078b4:	81a5      	strh	r5, [r4, #12]
 80078b6:	e7cd      	b.n	8007854 <__smakebuf_r+0x18>
 80078b8:	080076a9 	.word	0x080076a9

080078bc <_free_r>:
 80078bc:	b538      	push	{r3, r4, r5, lr}
 80078be:	4605      	mov	r5, r0
 80078c0:	2900      	cmp	r1, #0
 80078c2:	d045      	beq.n	8007950 <_free_r+0x94>
 80078c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078c8:	1f0c      	subs	r4, r1, #4
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	bfb8      	it	lt
 80078ce:	18e4      	addlt	r4, r4, r3
 80078d0:	f000 fc0e 	bl	80080f0 <__malloc_lock>
 80078d4:	4a1f      	ldr	r2, [pc, #124]	; (8007954 <_free_r+0x98>)
 80078d6:	6813      	ldr	r3, [r2, #0]
 80078d8:	4610      	mov	r0, r2
 80078da:	b933      	cbnz	r3, 80078ea <_free_r+0x2e>
 80078dc:	6063      	str	r3, [r4, #4]
 80078de:	6014      	str	r4, [r2, #0]
 80078e0:	4628      	mov	r0, r5
 80078e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078e6:	f000 bc04 	b.w	80080f2 <__malloc_unlock>
 80078ea:	42a3      	cmp	r3, r4
 80078ec:	d90c      	bls.n	8007908 <_free_r+0x4c>
 80078ee:	6821      	ldr	r1, [r4, #0]
 80078f0:	1862      	adds	r2, r4, r1
 80078f2:	4293      	cmp	r3, r2
 80078f4:	bf04      	itt	eq
 80078f6:	681a      	ldreq	r2, [r3, #0]
 80078f8:	685b      	ldreq	r3, [r3, #4]
 80078fa:	6063      	str	r3, [r4, #4]
 80078fc:	bf04      	itt	eq
 80078fe:	1852      	addeq	r2, r2, r1
 8007900:	6022      	streq	r2, [r4, #0]
 8007902:	6004      	str	r4, [r0, #0]
 8007904:	e7ec      	b.n	80078e0 <_free_r+0x24>
 8007906:	4613      	mov	r3, r2
 8007908:	685a      	ldr	r2, [r3, #4]
 800790a:	b10a      	cbz	r2, 8007910 <_free_r+0x54>
 800790c:	42a2      	cmp	r2, r4
 800790e:	d9fa      	bls.n	8007906 <_free_r+0x4a>
 8007910:	6819      	ldr	r1, [r3, #0]
 8007912:	1858      	adds	r0, r3, r1
 8007914:	42a0      	cmp	r0, r4
 8007916:	d10b      	bne.n	8007930 <_free_r+0x74>
 8007918:	6820      	ldr	r0, [r4, #0]
 800791a:	4401      	add	r1, r0
 800791c:	1858      	adds	r0, r3, r1
 800791e:	4282      	cmp	r2, r0
 8007920:	6019      	str	r1, [r3, #0]
 8007922:	d1dd      	bne.n	80078e0 <_free_r+0x24>
 8007924:	6810      	ldr	r0, [r2, #0]
 8007926:	6852      	ldr	r2, [r2, #4]
 8007928:	605a      	str	r2, [r3, #4]
 800792a:	4401      	add	r1, r0
 800792c:	6019      	str	r1, [r3, #0]
 800792e:	e7d7      	b.n	80078e0 <_free_r+0x24>
 8007930:	d902      	bls.n	8007938 <_free_r+0x7c>
 8007932:	230c      	movs	r3, #12
 8007934:	602b      	str	r3, [r5, #0]
 8007936:	e7d3      	b.n	80078e0 <_free_r+0x24>
 8007938:	6820      	ldr	r0, [r4, #0]
 800793a:	1821      	adds	r1, r4, r0
 800793c:	428a      	cmp	r2, r1
 800793e:	bf04      	itt	eq
 8007940:	6811      	ldreq	r1, [r2, #0]
 8007942:	6852      	ldreq	r2, [r2, #4]
 8007944:	6062      	str	r2, [r4, #4]
 8007946:	bf04      	itt	eq
 8007948:	1809      	addeq	r1, r1, r0
 800794a:	6021      	streq	r1, [r4, #0]
 800794c:	605c      	str	r4, [r3, #4]
 800794e:	e7c7      	b.n	80078e0 <_free_r+0x24>
 8007950:	bd38      	pop	{r3, r4, r5, pc}
 8007952:	bf00      	nop
 8007954:	20003de4 	.word	0x20003de4

08007958 <_malloc_r>:
 8007958:	b570      	push	{r4, r5, r6, lr}
 800795a:	1ccd      	adds	r5, r1, #3
 800795c:	f025 0503 	bic.w	r5, r5, #3
 8007960:	3508      	adds	r5, #8
 8007962:	2d0c      	cmp	r5, #12
 8007964:	bf38      	it	cc
 8007966:	250c      	movcc	r5, #12
 8007968:	2d00      	cmp	r5, #0
 800796a:	4606      	mov	r6, r0
 800796c:	db01      	blt.n	8007972 <_malloc_r+0x1a>
 800796e:	42a9      	cmp	r1, r5
 8007970:	d903      	bls.n	800797a <_malloc_r+0x22>
 8007972:	230c      	movs	r3, #12
 8007974:	6033      	str	r3, [r6, #0]
 8007976:	2000      	movs	r0, #0
 8007978:	bd70      	pop	{r4, r5, r6, pc}
 800797a:	f000 fbb9 	bl	80080f0 <__malloc_lock>
 800797e:	4a21      	ldr	r2, [pc, #132]	; (8007a04 <_malloc_r+0xac>)
 8007980:	6814      	ldr	r4, [r2, #0]
 8007982:	4621      	mov	r1, r4
 8007984:	b991      	cbnz	r1, 80079ac <_malloc_r+0x54>
 8007986:	4c20      	ldr	r4, [pc, #128]	; (8007a08 <_malloc_r+0xb0>)
 8007988:	6823      	ldr	r3, [r4, #0]
 800798a:	b91b      	cbnz	r3, 8007994 <_malloc_r+0x3c>
 800798c:	4630      	mov	r0, r6
 800798e:	f000 fb05 	bl	8007f9c <_sbrk_r>
 8007992:	6020      	str	r0, [r4, #0]
 8007994:	4629      	mov	r1, r5
 8007996:	4630      	mov	r0, r6
 8007998:	f000 fb00 	bl	8007f9c <_sbrk_r>
 800799c:	1c43      	adds	r3, r0, #1
 800799e:	d124      	bne.n	80079ea <_malloc_r+0x92>
 80079a0:	230c      	movs	r3, #12
 80079a2:	6033      	str	r3, [r6, #0]
 80079a4:	4630      	mov	r0, r6
 80079a6:	f000 fba4 	bl	80080f2 <__malloc_unlock>
 80079aa:	e7e4      	b.n	8007976 <_malloc_r+0x1e>
 80079ac:	680b      	ldr	r3, [r1, #0]
 80079ae:	1b5b      	subs	r3, r3, r5
 80079b0:	d418      	bmi.n	80079e4 <_malloc_r+0x8c>
 80079b2:	2b0b      	cmp	r3, #11
 80079b4:	d90f      	bls.n	80079d6 <_malloc_r+0x7e>
 80079b6:	600b      	str	r3, [r1, #0]
 80079b8:	50cd      	str	r5, [r1, r3]
 80079ba:	18cc      	adds	r4, r1, r3
 80079bc:	4630      	mov	r0, r6
 80079be:	f000 fb98 	bl	80080f2 <__malloc_unlock>
 80079c2:	f104 000b 	add.w	r0, r4, #11
 80079c6:	1d23      	adds	r3, r4, #4
 80079c8:	f020 0007 	bic.w	r0, r0, #7
 80079cc:	1ac3      	subs	r3, r0, r3
 80079ce:	d0d3      	beq.n	8007978 <_malloc_r+0x20>
 80079d0:	425a      	negs	r2, r3
 80079d2:	50e2      	str	r2, [r4, r3]
 80079d4:	e7d0      	b.n	8007978 <_malloc_r+0x20>
 80079d6:	428c      	cmp	r4, r1
 80079d8:	684b      	ldr	r3, [r1, #4]
 80079da:	bf16      	itet	ne
 80079dc:	6063      	strne	r3, [r4, #4]
 80079de:	6013      	streq	r3, [r2, #0]
 80079e0:	460c      	movne	r4, r1
 80079e2:	e7eb      	b.n	80079bc <_malloc_r+0x64>
 80079e4:	460c      	mov	r4, r1
 80079e6:	6849      	ldr	r1, [r1, #4]
 80079e8:	e7cc      	b.n	8007984 <_malloc_r+0x2c>
 80079ea:	1cc4      	adds	r4, r0, #3
 80079ec:	f024 0403 	bic.w	r4, r4, #3
 80079f0:	42a0      	cmp	r0, r4
 80079f2:	d005      	beq.n	8007a00 <_malloc_r+0xa8>
 80079f4:	1a21      	subs	r1, r4, r0
 80079f6:	4630      	mov	r0, r6
 80079f8:	f000 fad0 	bl	8007f9c <_sbrk_r>
 80079fc:	3001      	adds	r0, #1
 80079fe:	d0cf      	beq.n	80079a0 <_malloc_r+0x48>
 8007a00:	6025      	str	r5, [r4, #0]
 8007a02:	e7db      	b.n	80079bc <_malloc_r+0x64>
 8007a04:	20003de4 	.word	0x20003de4
 8007a08:	20003de8 	.word	0x20003de8

08007a0c <__sfputc_r>:
 8007a0c:	6893      	ldr	r3, [r2, #8]
 8007a0e:	3b01      	subs	r3, #1
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	b410      	push	{r4}
 8007a14:	6093      	str	r3, [r2, #8]
 8007a16:	da08      	bge.n	8007a2a <__sfputc_r+0x1e>
 8007a18:	6994      	ldr	r4, [r2, #24]
 8007a1a:	42a3      	cmp	r3, r4
 8007a1c:	db01      	blt.n	8007a22 <__sfputc_r+0x16>
 8007a1e:	290a      	cmp	r1, #10
 8007a20:	d103      	bne.n	8007a2a <__sfputc_r+0x1e>
 8007a22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a26:	f7ff bcab 	b.w	8007380 <__swbuf_r>
 8007a2a:	6813      	ldr	r3, [r2, #0]
 8007a2c:	1c58      	adds	r0, r3, #1
 8007a2e:	6010      	str	r0, [r2, #0]
 8007a30:	7019      	strb	r1, [r3, #0]
 8007a32:	4608      	mov	r0, r1
 8007a34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a38:	4770      	bx	lr

08007a3a <__sfputs_r>:
 8007a3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a3c:	4606      	mov	r6, r0
 8007a3e:	460f      	mov	r7, r1
 8007a40:	4614      	mov	r4, r2
 8007a42:	18d5      	adds	r5, r2, r3
 8007a44:	42ac      	cmp	r4, r5
 8007a46:	d101      	bne.n	8007a4c <__sfputs_r+0x12>
 8007a48:	2000      	movs	r0, #0
 8007a4a:	e007      	b.n	8007a5c <__sfputs_r+0x22>
 8007a4c:	463a      	mov	r2, r7
 8007a4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a52:	4630      	mov	r0, r6
 8007a54:	f7ff ffda 	bl	8007a0c <__sfputc_r>
 8007a58:	1c43      	adds	r3, r0, #1
 8007a5a:	d1f3      	bne.n	8007a44 <__sfputs_r+0xa>
 8007a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007a60 <_vfiprintf_r>:
 8007a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a64:	460c      	mov	r4, r1
 8007a66:	b09d      	sub	sp, #116	; 0x74
 8007a68:	4617      	mov	r7, r2
 8007a6a:	461d      	mov	r5, r3
 8007a6c:	4606      	mov	r6, r0
 8007a6e:	b118      	cbz	r0, 8007a78 <_vfiprintf_r+0x18>
 8007a70:	6983      	ldr	r3, [r0, #24]
 8007a72:	b90b      	cbnz	r3, 8007a78 <_vfiprintf_r+0x18>
 8007a74:	f7ff fe34 	bl	80076e0 <__sinit>
 8007a78:	4b7c      	ldr	r3, [pc, #496]	; (8007c6c <_vfiprintf_r+0x20c>)
 8007a7a:	429c      	cmp	r4, r3
 8007a7c:	d158      	bne.n	8007b30 <_vfiprintf_r+0xd0>
 8007a7e:	6874      	ldr	r4, [r6, #4]
 8007a80:	89a3      	ldrh	r3, [r4, #12]
 8007a82:	0718      	lsls	r0, r3, #28
 8007a84:	d55e      	bpl.n	8007b44 <_vfiprintf_r+0xe4>
 8007a86:	6923      	ldr	r3, [r4, #16]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d05b      	beq.n	8007b44 <_vfiprintf_r+0xe4>
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	9309      	str	r3, [sp, #36]	; 0x24
 8007a90:	2320      	movs	r3, #32
 8007a92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a96:	2330      	movs	r3, #48	; 0x30
 8007a98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a9c:	9503      	str	r5, [sp, #12]
 8007a9e:	f04f 0b01 	mov.w	fp, #1
 8007aa2:	46b8      	mov	r8, r7
 8007aa4:	4645      	mov	r5, r8
 8007aa6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007aaa:	b10b      	cbz	r3, 8007ab0 <_vfiprintf_r+0x50>
 8007aac:	2b25      	cmp	r3, #37	; 0x25
 8007aae:	d154      	bne.n	8007b5a <_vfiprintf_r+0xfa>
 8007ab0:	ebb8 0a07 	subs.w	sl, r8, r7
 8007ab4:	d00b      	beq.n	8007ace <_vfiprintf_r+0x6e>
 8007ab6:	4653      	mov	r3, sl
 8007ab8:	463a      	mov	r2, r7
 8007aba:	4621      	mov	r1, r4
 8007abc:	4630      	mov	r0, r6
 8007abe:	f7ff ffbc 	bl	8007a3a <__sfputs_r>
 8007ac2:	3001      	adds	r0, #1
 8007ac4:	f000 80c2 	beq.w	8007c4c <_vfiprintf_r+0x1ec>
 8007ac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aca:	4453      	add	r3, sl
 8007acc:	9309      	str	r3, [sp, #36]	; 0x24
 8007ace:	f898 3000 	ldrb.w	r3, [r8]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	f000 80ba 	beq.w	8007c4c <_vfiprintf_r+0x1ec>
 8007ad8:	2300      	movs	r3, #0
 8007ada:	f04f 32ff 	mov.w	r2, #4294967295
 8007ade:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ae2:	9304      	str	r3, [sp, #16]
 8007ae4:	9307      	str	r3, [sp, #28]
 8007ae6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007aea:	931a      	str	r3, [sp, #104]	; 0x68
 8007aec:	46a8      	mov	r8, r5
 8007aee:	2205      	movs	r2, #5
 8007af0:	f818 1b01 	ldrb.w	r1, [r8], #1
 8007af4:	485e      	ldr	r0, [pc, #376]	; (8007c70 <_vfiprintf_r+0x210>)
 8007af6:	f7f8 fb8b 	bl	8000210 <memchr>
 8007afa:	9b04      	ldr	r3, [sp, #16]
 8007afc:	bb78      	cbnz	r0, 8007b5e <_vfiprintf_r+0xfe>
 8007afe:	06d9      	lsls	r1, r3, #27
 8007b00:	bf44      	itt	mi
 8007b02:	2220      	movmi	r2, #32
 8007b04:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007b08:	071a      	lsls	r2, r3, #28
 8007b0a:	bf44      	itt	mi
 8007b0c:	222b      	movmi	r2, #43	; 0x2b
 8007b0e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007b12:	782a      	ldrb	r2, [r5, #0]
 8007b14:	2a2a      	cmp	r2, #42	; 0x2a
 8007b16:	d02a      	beq.n	8007b6e <_vfiprintf_r+0x10e>
 8007b18:	9a07      	ldr	r2, [sp, #28]
 8007b1a:	46a8      	mov	r8, r5
 8007b1c:	2000      	movs	r0, #0
 8007b1e:	250a      	movs	r5, #10
 8007b20:	4641      	mov	r1, r8
 8007b22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b26:	3b30      	subs	r3, #48	; 0x30
 8007b28:	2b09      	cmp	r3, #9
 8007b2a:	d969      	bls.n	8007c00 <_vfiprintf_r+0x1a0>
 8007b2c:	b360      	cbz	r0, 8007b88 <_vfiprintf_r+0x128>
 8007b2e:	e024      	b.n	8007b7a <_vfiprintf_r+0x11a>
 8007b30:	4b50      	ldr	r3, [pc, #320]	; (8007c74 <_vfiprintf_r+0x214>)
 8007b32:	429c      	cmp	r4, r3
 8007b34:	d101      	bne.n	8007b3a <_vfiprintf_r+0xda>
 8007b36:	68b4      	ldr	r4, [r6, #8]
 8007b38:	e7a2      	b.n	8007a80 <_vfiprintf_r+0x20>
 8007b3a:	4b4f      	ldr	r3, [pc, #316]	; (8007c78 <_vfiprintf_r+0x218>)
 8007b3c:	429c      	cmp	r4, r3
 8007b3e:	bf08      	it	eq
 8007b40:	68f4      	ldreq	r4, [r6, #12]
 8007b42:	e79d      	b.n	8007a80 <_vfiprintf_r+0x20>
 8007b44:	4621      	mov	r1, r4
 8007b46:	4630      	mov	r0, r6
 8007b48:	f7ff fc6c 	bl	8007424 <__swsetup_r>
 8007b4c:	2800      	cmp	r0, #0
 8007b4e:	d09d      	beq.n	8007a8c <_vfiprintf_r+0x2c>
 8007b50:	f04f 30ff 	mov.w	r0, #4294967295
 8007b54:	b01d      	add	sp, #116	; 0x74
 8007b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b5a:	46a8      	mov	r8, r5
 8007b5c:	e7a2      	b.n	8007aa4 <_vfiprintf_r+0x44>
 8007b5e:	4a44      	ldr	r2, [pc, #272]	; (8007c70 <_vfiprintf_r+0x210>)
 8007b60:	1a80      	subs	r0, r0, r2
 8007b62:	fa0b f000 	lsl.w	r0, fp, r0
 8007b66:	4318      	orrs	r0, r3
 8007b68:	9004      	str	r0, [sp, #16]
 8007b6a:	4645      	mov	r5, r8
 8007b6c:	e7be      	b.n	8007aec <_vfiprintf_r+0x8c>
 8007b6e:	9a03      	ldr	r2, [sp, #12]
 8007b70:	1d11      	adds	r1, r2, #4
 8007b72:	6812      	ldr	r2, [r2, #0]
 8007b74:	9103      	str	r1, [sp, #12]
 8007b76:	2a00      	cmp	r2, #0
 8007b78:	db01      	blt.n	8007b7e <_vfiprintf_r+0x11e>
 8007b7a:	9207      	str	r2, [sp, #28]
 8007b7c:	e004      	b.n	8007b88 <_vfiprintf_r+0x128>
 8007b7e:	4252      	negs	r2, r2
 8007b80:	f043 0302 	orr.w	r3, r3, #2
 8007b84:	9207      	str	r2, [sp, #28]
 8007b86:	9304      	str	r3, [sp, #16]
 8007b88:	f898 3000 	ldrb.w	r3, [r8]
 8007b8c:	2b2e      	cmp	r3, #46	; 0x2e
 8007b8e:	d10e      	bne.n	8007bae <_vfiprintf_r+0x14e>
 8007b90:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007b94:	2b2a      	cmp	r3, #42	; 0x2a
 8007b96:	d138      	bne.n	8007c0a <_vfiprintf_r+0x1aa>
 8007b98:	9b03      	ldr	r3, [sp, #12]
 8007b9a:	1d1a      	adds	r2, r3, #4
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	9203      	str	r2, [sp, #12]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	bfb8      	it	lt
 8007ba4:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ba8:	f108 0802 	add.w	r8, r8, #2
 8007bac:	9305      	str	r3, [sp, #20]
 8007bae:	4d33      	ldr	r5, [pc, #204]	; (8007c7c <_vfiprintf_r+0x21c>)
 8007bb0:	f898 1000 	ldrb.w	r1, [r8]
 8007bb4:	2203      	movs	r2, #3
 8007bb6:	4628      	mov	r0, r5
 8007bb8:	f7f8 fb2a 	bl	8000210 <memchr>
 8007bbc:	b140      	cbz	r0, 8007bd0 <_vfiprintf_r+0x170>
 8007bbe:	2340      	movs	r3, #64	; 0x40
 8007bc0:	1b40      	subs	r0, r0, r5
 8007bc2:	fa03 f000 	lsl.w	r0, r3, r0
 8007bc6:	9b04      	ldr	r3, [sp, #16]
 8007bc8:	4303      	orrs	r3, r0
 8007bca:	f108 0801 	add.w	r8, r8, #1
 8007bce:	9304      	str	r3, [sp, #16]
 8007bd0:	f898 1000 	ldrb.w	r1, [r8]
 8007bd4:	482a      	ldr	r0, [pc, #168]	; (8007c80 <_vfiprintf_r+0x220>)
 8007bd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007bda:	2206      	movs	r2, #6
 8007bdc:	f108 0701 	add.w	r7, r8, #1
 8007be0:	f7f8 fb16 	bl	8000210 <memchr>
 8007be4:	2800      	cmp	r0, #0
 8007be6:	d037      	beq.n	8007c58 <_vfiprintf_r+0x1f8>
 8007be8:	4b26      	ldr	r3, [pc, #152]	; (8007c84 <_vfiprintf_r+0x224>)
 8007bea:	bb1b      	cbnz	r3, 8007c34 <_vfiprintf_r+0x1d4>
 8007bec:	9b03      	ldr	r3, [sp, #12]
 8007bee:	3307      	adds	r3, #7
 8007bf0:	f023 0307 	bic.w	r3, r3, #7
 8007bf4:	3308      	adds	r3, #8
 8007bf6:	9303      	str	r3, [sp, #12]
 8007bf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bfa:	444b      	add	r3, r9
 8007bfc:	9309      	str	r3, [sp, #36]	; 0x24
 8007bfe:	e750      	b.n	8007aa2 <_vfiprintf_r+0x42>
 8007c00:	fb05 3202 	mla	r2, r5, r2, r3
 8007c04:	2001      	movs	r0, #1
 8007c06:	4688      	mov	r8, r1
 8007c08:	e78a      	b.n	8007b20 <_vfiprintf_r+0xc0>
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	f108 0801 	add.w	r8, r8, #1
 8007c10:	9305      	str	r3, [sp, #20]
 8007c12:	4619      	mov	r1, r3
 8007c14:	250a      	movs	r5, #10
 8007c16:	4640      	mov	r0, r8
 8007c18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c1c:	3a30      	subs	r2, #48	; 0x30
 8007c1e:	2a09      	cmp	r2, #9
 8007c20:	d903      	bls.n	8007c2a <_vfiprintf_r+0x1ca>
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d0c3      	beq.n	8007bae <_vfiprintf_r+0x14e>
 8007c26:	9105      	str	r1, [sp, #20]
 8007c28:	e7c1      	b.n	8007bae <_vfiprintf_r+0x14e>
 8007c2a:	fb05 2101 	mla	r1, r5, r1, r2
 8007c2e:	2301      	movs	r3, #1
 8007c30:	4680      	mov	r8, r0
 8007c32:	e7f0      	b.n	8007c16 <_vfiprintf_r+0x1b6>
 8007c34:	ab03      	add	r3, sp, #12
 8007c36:	9300      	str	r3, [sp, #0]
 8007c38:	4622      	mov	r2, r4
 8007c3a:	4b13      	ldr	r3, [pc, #76]	; (8007c88 <_vfiprintf_r+0x228>)
 8007c3c:	a904      	add	r1, sp, #16
 8007c3e:	4630      	mov	r0, r6
 8007c40:	f3af 8000 	nop.w
 8007c44:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007c48:	4681      	mov	r9, r0
 8007c4a:	d1d5      	bne.n	8007bf8 <_vfiprintf_r+0x198>
 8007c4c:	89a3      	ldrh	r3, [r4, #12]
 8007c4e:	065b      	lsls	r3, r3, #25
 8007c50:	f53f af7e 	bmi.w	8007b50 <_vfiprintf_r+0xf0>
 8007c54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c56:	e77d      	b.n	8007b54 <_vfiprintf_r+0xf4>
 8007c58:	ab03      	add	r3, sp, #12
 8007c5a:	9300      	str	r3, [sp, #0]
 8007c5c:	4622      	mov	r2, r4
 8007c5e:	4b0a      	ldr	r3, [pc, #40]	; (8007c88 <_vfiprintf_r+0x228>)
 8007c60:	a904      	add	r1, sp, #16
 8007c62:	4630      	mov	r0, r6
 8007c64:	f000 f888 	bl	8007d78 <_printf_i>
 8007c68:	e7ec      	b.n	8007c44 <_vfiprintf_r+0x1e4>
 8007c6a:	bf00      	nop
 8007c6c:	080082a4 	.word	0x080082a4
 8007c70:	080082e4 	.word	0x080082e4
 8007c74:	080082c4 	.word	0x080082c4
 8007c78:	08008284 	.word	0x08008284
 8007c7c:	080082ea 	.word	0x080082ea
 8007c80:	080082ee 	.word	0x080082ee
 8007c84:	00000000 	.word	0x00000000
 8007c88:	08007a3b 	.word	0x08007a3b

08007c8c <_printf_common>:
 8007c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c90:	4691      	mov	r9, r2
 8007c92:	461f      	mov	r7, r3
 8007c94:	688a      	ldr	r2, [r1, #8]
 8007c96:	690b      	ldr	r3, [r1, #16]
 8007c98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	bfb8      	it	lt
 8007ca0:	4613      	movlt	r3, r2
 8007ca2:	f8c9 3000 	str.w	r3, [r9]
 8007ca6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007caa:	4606      	mov	r6, r0
 8007cac:	460c      	mov	r4, r1
 8007cae:	b112      	cbz	r2, 8007cb6 <_printf_common+0x2a>
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	f8c9 3000 	str.w	r3, [r9]
 8007cb6:	6823      	ldr	r3, [r4, #0]
 8007cb8:	0699      	lsls	r1, r3, #26
 8007cba:	bf42      	ittt	mi
 8007cbc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007cc0:	3302      	addmi	r3, #2
 8007cc2:	f8c9 3000 	strmi.w	r3, [r9]
 8007cc6:	6825      	ldr	r5, [r4, #0]
 8007cc8:	f015 0506 	ands.w	r5, r5, #6
 8007ccc:	d107      	bne.n	8007cde <_printf_common+0x52>
 8007cce:	f104 0a19 	add.w	sl, r4, #25
 8007cd2:	68e3      	ldr	r3, [r4, #12]
 8007cd4:	f8d9 2000 	ldr.w	r2, [r9]
 8007cd8:	1a9b      	subs	r3, r3, r2
 8007cda:	42ab      	cmp	r3, r5
 8007cdc:	dc28      	bgt.n	8007d30 <_printf_common+0xa4>
 8007cde:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007ce2:	6822      	ldr	r2, [r4, #0]
 8007ce4:	3300      	adds	r3, #0
 8007ce6:	bf18      	it	ne
 8007ce8:	2301      	movne	r3, #1
 8007cea:	0692      	lsls	r2, r2, #26
 8007cec:	d42d      	bmi.n	8007d4a <_printf_common+0xbe>
 8007cee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007cf2:	4639      	mov	r1, r7
 8007cf4:	4630      	mov	r0, r6
 8007cf6:	47c0      	blx	r8
 8007cf8:	3001      	adds	r0, #1
 8007cfa:	d020      	beq.n	8007d3e <_printf_common+0xb2>
 8007cfc:	6823      	ldr	r3, [r4, #0]
 8007cfe:	68e5      	ldr	r5, [r4, #12]
 8007d00:	f8d9 2000 	ldr.w	r2, [r9]
 8007d04:	f003 0306 	and.w	r3, r3, #6
 8007d08:	2b04      	cmp	r3, #4
 8007d0a:	bf08      	it	eq
 8007d0c:	1aad      	subeq	r5, r5, r2
 8007d0e:	68a3      	ldr	r3, [r4, #8]
 8007d10:	6922      	ldr	r2, [r4, #16]
 8007d12:	bf0c      	ite	eq
 8007d14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d18:	2500      	movne	r5, #0
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	bfc4      	itt	gt
 8007d1e:	1a9b      	subgt	r3, r3, r2
 8007d20:	18ed      	addgt	r5, r5, r3
 8007d22:	f04f 0900 	mov.w	r9, #0
 8007d26:	341a      	adds	r4, #26
 8007d28:	454d      	cmp	r5, r9
 8007d2a:	d11a      	bne.n	8007d62 <_printf_common+0xd6>
 8007d2c:	2000      	movs	r0, #0
 8007d2e:	e008      	b.n	8007d42 <_printf_common+0xb6>
 8007d30:	2301      	movs	r3, #1
 8007d32:	4652      	mov	r2, sl
 8007d34:	4639      	mov	r1, r7
 8007d36:	4630      	mov	r0, r6
 8007d38:	47c0      	blx	r8
 8007d3a:	3001      	adds	r0, #1
 8007d3c:	d103      	bne.n	8007d46 <_printf_common+0xba>
 8007d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8007d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d46:	3501      	adds	r5, #1
 8007d48:	e7c3      	b.n	8007cd2 <_printf_common+0x46>
 8007d4a:	18e1      	adds	r1, r4, r3
 8007d4c:	1c5a      	adds	r2, r3, #1
 8007d4e:	2030      	movs	r0, #48	; 0x30
 8007d50:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d54:	4422      	add	r2, r4
 8007d56:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d5a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d5e:	3302      	adds	r3, #2
 8007d60:	e7c5      	b.n	8007cee <_printf_common+0x62>
 8007d62:	2301      	movs	r3, #1
 8007d64:	4622      	mov	r2, r4
 8007d66:	4639      	mov	r1, r7
 8007d68:	4630      	mov	r0, r6
 8007d6a:	47c0      	blx	r8
 8007d6c:	3001      	adds	r0, #1
 8007d6e:	d0e6      	beq.n	8007d3e <_printf_common+0xb2>
 8007d70:	f109 0901 	add.w	r9, r9, #1
 8007d74:	e7d8      	b.n	8007d28 <_printf_common+0x9c>
	...

08007d78 <_printf_i>:
 8007d78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007d7c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007d80:	460c      	mov	r4, r1
 8007d82:	7e09      	ldrb	r1, [r1, #24]
 8007d84:	b085      	sub	sp, #20
 8007d86:	296e      	cmp	r1, #110	; 0x6e
 8007d88:	4617      	mov	r7, r2
 8007d8a:	4606      	mov	r6, r0
 8007d8c:	4698      	mov	r8, r3
 8007d8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d90:	f000 80b3 	beq.w	8007efa <_printf_i+0x182>
 8007d94:	d822      	bhi.n	8007ddc <_printf_i+0x64>
 8007d96:	2963      	cmp	r1, #99	; 0x63
 8007d98:	d036      	beq.n	8007e08 <_printf_i+0x90>
 8007d9a:	d80a      	bhi.n	8007db2 <_printf_i+0x3a>
 8007d9c:	2900      	cmp	r1, #0
 8007d9e:	f000 80b9 	beq.w	8007f14 <_printf_i+0x19c>
 8007da2:	2958      	cmp	r1, #88	; 0x58
 8007da4:	f000 8083 	beq.w	8007eae <_printf_i+0x136>
 8007da8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007dac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007db0:	e032      	b.n	8007e18 <_printf_i+0xa0>
 8007db2:	2964      	cmp	r1, #100	; 0x64
 8007db4:	d001      	beq.n	8007dba <_printf_i+0x42>
 8007db6:	2969      	cmp	r1, #105	; 0x69
 8007db8:	d1f6      	bne.n	8007da8 <_printf_i+0x30>
 8007dba:	6820      	ldr	r0, [r4, #0]
 8007dbc:	6813      	ldr	r3, [r2, #0]
 8007dbe:	0605      	lsls	r5, r0, #24
 8007dc0:	f103 0104 	add.w	r1, r3, #4
 8007dc4:	d52a      	bpl.n	8007e1c <_printf_i+0xa4>
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	6011      	str	r1, [r2, #0]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	da03      	bge.n	8007dd6 <_printf_i+0x5e>
 8007dce:	222d      	movs	r2, #45	; 0x2d
 8007dd0:	425b      	negs	r3, r3
 8007dd2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007dd6:	486f      	ldr	r0, [pc, #444]	; (8007f94 <_printf_i+0x21c>)
 8007dd8:	220a      	movs	r2, #10
 8007dda:	e039      	b.n	8007e50 <_printf_i+0xd8>
 8007ddc:	2973      	cmp	r1, #115	; 0x73
 8007dde:	f000 809d 	beq.w	8007f1c <_printf_i+0x1a4>
 8007de2:	d808      	bhi.n	8007df6 <_printf_i+0x7e>
 8007de4:	296f      	cmp	r1, #111	; 0x6f
 8007de6:	d020      	beq.n	8007e2a <_printf_i+0xb2>
 8007de8:	2970      	cmp	r1, #112	; 0x70
 8007dea:	d1dd      	bne.n	8007da8 <_printf_i+0x30>
 8007dec:	6823      	ldr	r3, [r4, #0]
 8007dee:	f043 0320 	orr.w	r3, r3, #32
 8007df2:	6023      	str	r3, [r4, #0]
 8007df4:	e003      	b.n	8007dfe <_printf_i+0x86>
 8007df6:	2975      	cmp	r1, #117	; 0x75
 8007df8:	d017      	beq.n	8007e2a <_printf_i+0xb2>
 8007dfa:	2978      	cmp	r1, #120	; 0x78
 8007dfc:	d1d4      	bne.n	8007da8 <_printf_i+0x30>
 8007dfe:	2378      	movs	r3, #120	; 0x78
 8007e00:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007e04:	4864      	ldr	r0, [pc, #400]	; (8007f98 <_printf_i+0x220>)
 8007e06:	e055      	b.n	8007eb4 <_printf_i+0x13c>
 8007e08:	6813      	ldr	r3, [r2, #0]
 8007e0a:	1d19      	adds	r1, r3, #4
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	6011      	str	r1, [r2, #0]
 8007e10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e18:	2301      	movs	r3, #1
 8007e1a:	e08c      	b.n	8007f36 <_printf_i+0x1be>
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	6011      	str	r1, [r2, #0]
 8007e20:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007e24:	bf18      	it	ne
 8007e26:	b21b      	sxthne	r3, r3
 8007e28:	e7cf      	b.n	8007dca <_printf_i+0x52>
 8007e2a:	6813      	ldr	r3, [r2, #0]
 8007e2c:	6825      	ldr	r5, [r4, #0]
 8007e2e:	1d18      	adds	r0, r3, #4
 8007e30:	6010      	str	r0, [r2, #0]
 8007e32:	0628      	lsls	r0, r5, #24
 8007e34:	d501      	bpl.n	8007e3a <_printf_i+0xc2>
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	e002      	b.n	8007e40 <_printf_i+0xc8>
 8007e3a:	0668      	lsls	r0, r5, #25
 8007e3c:	d5fb      	bpl.n	8007e36 <_printf_i+0xbe>
 8007e3e:	881b      	ldrh	r3, [r3, #0]
 8007e40:	4854      	ldr	r0, [pc, #336]	; (8007f94 <_printf_i+0x21c>)
 8007e42:	296f      	cmp	r1, #111	; 0x6f
 8007e44:	bf14      	ite	ne
 8007e46:	220a      	movne	r2, #10
 8007e48:	2208      	moveq	r2, #8
 8007e4a:	2100      	movs	r1, #0
 8007e4c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e50:	6865      	ldr	r5, [r4, #4]
 8007e52:	60a5      	str	r5, [r4, #8]
 8007e54:	2d00      	cmp	r5, #0
 8007e56:	f2c0 8095 	blt.w	8007f84 <_printf_i+0x20c>
 8007e5a:	6821      	ldr	r1, [r4, #0]
 8007e5c:	f021 0104 	bic.w	r1, r1, #4
 8007e60:	6021      	str	r1, [r4, #0]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d13d      	bne.n	8007ee2 <_printf_i+0x16a>
 8007e66:	2d00      	cmp	r5, #0
 8007e68:	f040 808e 	bne.w	8007f88 <_printf_i+0x210>
 8007e6c:	4665      	mov	r5, ip
 8007e6e:	2a08      	cmp	r2, #8
 8007e70:	d10b      	bne.n	8007e8a <_printf_i+0x112>
 8007e72:	6823      	ldr	r3, [r4, #0]
 8007e74:	07db      	lsls	r3, r3, #31
 8007e76:	d508      	bpl.n	8007e8a <_printf_i+0x112>
 8007e78:	6923      	ldr	r3, [r4, #16]
 8007e7a:	6862      	ldr	r2, [r4, #4]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	bfde      	ittt	le
 8007e80:	2330      	movle	r3, #48	; 0x30
 8007e82:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e86:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007e8a:	ebac 0305 	sub.w	r3, ip, r5
 8007e8e:	6123      	str	r3, [r4, #16]
 8007e90:	f8cd 8000 	str.w	r8, [sp]
 8007e94:	463b      	mov	r3, r7
 8007e96:	aa03      	add	r2, sp, #12
 8007e98:	4621      	mov	r1, r4
 8007e9a:	4630      	mov	r0, r6
 8007e9c:	f7ff fef6 	bl	8007c8c <_printf_common>
 8007ea0:	3001      	adds	r0, #1
 8007ea2:	d14d      	bne.n	8007f40 <_printf_i+0x1c8>
 8007ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ea8:	b005      	add	sp, #20
 8007eaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007eae:	4839      	ldr	r0, [pc, #228]	; (8007f94 <_printf_i+0x21c>)
 8007eb0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007eb4:	6813      	ldr	r3, [r2, #0]
 8007eb6:	6821      	ldr	r1, [r4, #0]
 8007eb8:	1d1d      	adds	r5, r3, #4
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	6015      	str	r5, [r2, #0]
 8007ebe:	060a      	lsls	r2, r1, #24
 8007ec0:	d50b      	bpl.n	8007eda <_printf_i+0x162>
 8007ec2:	07ca      	lsls	r2, r1, #31
 8007ec4:	bf44      	itt	mi
 8007ec6:	f041 0120 	orrmi.w	r1, r1, #32
 8007eca:	6021      	strmi	r1, [r4, #0]
 8007ecc:	b91b      	cbnz	r3, 8007ed6 <_printf_i+0x15e>
 8007ece:	6822      	ldr	r2, [r4, #0]
 8007ed0:	f022 0220 	bic.w	r2, r2, #32
 8007ed4:	6022      	str	r2, [r4, #0]
 8007ed6:	2210      	movs	r2, #16
 8007ed8:	e7b7      	b.n	8007e4a <_printf_i+0xd2>
 8007eda:	064d      	lsls	r5, r1, #25
 8007edc:	bf48      	it	mi
 8007ede:	b29b      	uxthmi	r3, r3
 8007ee0:	e7ef      	b.n	8007ec2 <_printf_i+0x14a>
 8007ee2:	4665      	mov	r5, ip
 8007ee4:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ee8:	fb02 3311 	mls	r3, r2, r1, r3
 8007eec:	5cc3      	ldrb	r3, [r0, r3]
 8007eee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	2900      	cmp	r1, #0
 8007ef6:	d1f5      	bne.n	8007ee4 <_printf_i+0x16c>
 8007ef8:	e7b9      	b.n	8007e6e <_printf_i+0xf6>
 8007efa:	6813      	ldr	r3, [r2, #0]
 8007efc:	6825      	ldr	r5, [r4, #0]
 8007efe:	6961      	ldr	r1, [r4, #20]
 8007f00:	1d18      	adds	r0, r3, #4
 8007f02:	6010      	str	r0, [r2, #0]
 8007f04:	0628      	lsls	r0, r5, #24
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	d501      	bpl.n	8007f0e <_printf_i+0x196>
 8007f0a:	6019      	str	r1, [r3, #0]
 8007f0c:	e002      	b.n	8007f14 <_printf_i+0x19c>
 8007f0e:	066a      	lsls	r2, r5, #25
 8007f10:	d5fb      	bpl.n	8007f0a <_printf_i+0x192>
 8007f12:	8019      	strh	r1, [r3, #0]
 8007f14:	2300      	movs	r3, #0
 8007f16:	6123      	str	r3, [r4, #16]
 8007f18:	4665      	mov	r5, ip
 8007f1a:	e7b9      	b.n	8007e90 <_printf_i+0x118>
 8007f1c:	6813      	ldr	r3, [r2, #0]
 8007f1e:	1d19      	adds	r1, r3, #4
 8007f20:	6011      	str	r1, [r2, #0]
 8007f22:	681d      	ldr	r5, [r3, #0]
 8007f24:	6862      	ldr	r2, [r4, #4]
 8007f26:	2100      	movs	r1, #0
 8007f28:	4628      	mov	r0, r5
 8007f2a:	f7f8 f971 	bl	8000210 <memchr>
 8007f2e:	b108      	cbz	r0, 8007f34 <_printf_i+0x1bc>
 8007f30:	1b40      	subs	r0, r0, r5
 8007f32:	6060      	str	r0, [r4, #4]
 8007f34:	6863      	ldr	r3, [r4, #4]
 8007f36:	6123      	str	r3, [r4, #16]
 8007f38:	2300      	movs	r3, #0
 8007f3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f3e:	e7a7      	b.n	8007e90 <_printf_i+0x118>
 8007f40:	6923      	ldr	r3, [r4, #16]
 8007f42:	462a      	mov	r2, r5
 8007f44:	4639      	mov	r1, r7
 8007f46:	4630      	mov	r0, r6
 8007f48:	47c0      	blx	r8
 8007f4a:	3001      	adds	r0, #1
 8007f4c:	d0aa      	beq.n	8007ea4 <_printf_i+0x12c>
 8007f4e:	6823      	ldr	r3, [r4, #0]
 8007f50:	079b      	lsls	r3, r3, #30
 8007f52:	d413      	bmi.n	8007f7c <_printf_i+0x204>
 8007f54:	68e0      	ldr	r0, [r4, #12]
 8007f56:	9b03      	ldr	r3, [sp, #12]
 8007f58:	4298      	cmp	r0, r3
 8007f5a:	bfb8      	it	lt
 8007f5c:	4618      	movlt	r0, r3
 8007f5e:	e7a3      	b.n	8007ea8 <_printf_i+0x130>
 8007f60:	2301      	movs	r3, #1
 8007f62:	464a      	mov	r2, r9
 8007f64:	4639      	mov	r1, r7
 8007f66:	4630      	mov	r0, r6
 8007f68:	47c0      	blx	r8
 8007f6a:	3001      	adds	r0, #1
 8007f6c:	d09a      	beq.n	8007ea4 <_printf_i+0x12c>
 8007f6e:	3501      	adds	r5, #1
 8007f70:	68e3      	ldr	r3, [r4, #12]
 8007f72:	9a03      	ldr	r2, [sp, #12]
 8007f74:	1a9b      	subs	r3, r3, r2
 8007f76:	42ab      	cmp	r3, r5
 8007f78:	dcf2      	bgt.n	8007f60 <_printf_i+0x1e8>
 8007f7a:	e7eb      	b.n	8007f54 <_printf_i+0x1dc>
 8007f7c:	2500      	movs	r5, #0
 8007f7e:	f104 0919 	add.w	r9, r4, #25
 8007f82:	e7f5      	b.n	8007f70 <_printf_i+0x1f8>
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d1ac      	bne.n	8007ee2 <_printf_i+0x16a>
 8007f88:	7803      	ldrb	r3, [r0, #0]
 8007f8a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f8e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f92:	e76c      	b.n	8007e6e <_printf_i+0xf6>
 8007f94:	080082f5 	.word	0x080082f5
 8007f98:	08008306 	.word	0x08008306

08007f9c <_sbrk_r>:
 8007f9c:	b538      	push	{r3, r4, r5, lr}
 8007f9e:	4c06      	ldr	r4, [pc, #24]	; (8007fb8 <_sbrk_r+0x1c>)
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	4605      	mov	r5, r0
 8007fa4:	4608      	mov	r0, r1
 8007fa6:	6023      	str	r3, [r4, #0]
 8007fa8:	f7fe ff82 	bl	8006eb0 <_sbrk>
 8007fac:	1c43      	adds	r3, r0, #1
 8007fae:	d102      	bne.n	8007fb6 <_sbrk_r+0x1a>
 8007fb0:	6823      	ldr	r3, [r4, #0]
 8007fb2:	b103      	cbz	r3, 8007fb6 <_sbrk_r+0x1a>
 8007fb4:	602b      	str	r3, [r5, #0]
 8007fb6:	bd38      	pop	{r3, r4, r5, pc}
 8007fb8:	20003f6c 	.word	0x20003f6c

08007fbc <__sread>:
 8007fbc:	b510      	push	{r4, lr}
 8007fbe:	460c      	mov	r4, r1
 8007fc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fc4:	f000 f896 	bl	80080f4 <_read_r>
 8007fc8:	2800      	cmp	r0, #0
 8007fca:	bfab      	itete	ge
 8007fcc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007fce:	89a3      	ldrhlt	r3, [r4, #12]
 8007fd0:	181b      	addge	r3, r3, r0
 8007fd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007fd6:	bfac      	ite	ge
 8007fd8:	6563      	strge	r3, [r4, #84]	; 0x54
 8007fda:	81a3      	strhlt	r3, [r4, #12]
 8007fdc:	bd10      	pop	{r4, pc}

08007fde <__swrite>:
 8007fde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fe2:	461f      	mov	r7, r3
 8007fe4:	898b      	ldrh	r3, [r1, #12]
 8007fe6:	05db      	lsls	r3, r3, #23
 8007fe8:	4605      	mov	r5, r0
 8007fea:	460c      	mov	r4, r1
 8007fec:	4616      	mov	r6, r2
 8007fee:	d505      	bpl.n	8007ffc <__swrite+0x1e>
 8007ff0:	2302      	movs	r3, #2
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ff8:	f000 f868 	bl	80080cc <_lseek_r>
 8007ffc:	89a3      	ldrh	r3, [r4, #12]
 8007ffe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008002:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008006:	81a3      	strh	r3, [r4, #12]
 8008008:	4632      	mov	r2, r6
 800800a:	463b      	mov	r3, r7
 800800c:	4628      	mov	r0, r5
 800800e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008012:	f000 b817 	b.w	8008044 <_write_r>

08008016 <__sseek>:
 8008016:	b510      	push	{r4, lr}
 8008018:	460c      	mov	r4, r1
 800801a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800801e:	f000 f855 	bl	80080cc <_lseek_r>
 8008022:	1c43      	adds	r3, r0, #1
 8008024:	89a3      	ldrh	r3, [r4, #12]
 8008026:	bf15      	itete	ne
 8008028:	6560      	strne	r0, [r4, #84]	; 0x54
 800802a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800802e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008032:	81a3      	strheq	r3, [r4, #12]
 8008034:	bf18      	it	ne
 8008036:	81a3      	strhne	r3, [r4, #12]
 8008038:	bd10      	pop	{r4, pc}

0800803a <__sclose>:
 800803a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800803e:	f000 b813 	b.w	8008068 <_close_r>
	...

08008044 <_write_r>:
 8008044:	b538      	push	{r3, r4, r5, lr}
 8008046:	4c07      	ldr	r4, [pc, #28]	; (8008064 <_write_r+0x20>)
 8008048:	4605      	mov	r5, r0
 800804a:	4608      	mov	r0, r1
 800804c:	4611      	mov	r1, r2
 800804e:	2200      	movs	r2, #0
 8008050:	6022      	str	r2, [r4, #0]
 8008052:	461a      	mov	r2, r3
 8008054:	f7fe fedb 	bl	8006e0e <_write>
 8008058:	1c43      	adds	r3, r0, #1
 800805a:	d102      	bne.n	8008062 <_write_r+0x1e>
 800805c:	6823      	ldr	r3, [r4, #0]
 800805e:	b103      	cbz	r3, 8008062 <_write_r+0x1e>
 8008060:	602b      	str	r3, [r5, #0]
 8008062:	bd38      	pop	{r3, r4, r5, pc}
 8008064:	20003f6c 	.word	0x20003f6c

08008068 <_close_r>:
 8008068:	b538      	push	{r3, r4, r5, lr}
 800806a:	4c06      	ldr	r4, [pc, #24]	; (8008084 <_close_r+0x1c>)
 800806c:	2300      	movs	r3, #0
 800806e:	4605      	mov	r5, r0
 8008070:	4608      	mov	r0, r1
 8008072:	6023      	str	r3, [r4, #0]
 8008074:	f7fe fee7 	bl	8006e46 <_close>
 8008078:	1c43      	adds	r3, r0, #1
 800807a:	d102      	bne.n	8008082 <_close_r+0x1a>
 800807c:	6823      	ldr	r3, [r4, #0]
 800807e:	b103      	cbz	r3, 8008082 <_close_r+0x1a>
 8008080:	602b      	str	r3, [r5, #0]
 8008082:	bd38      	pop	{r3, r4, r5, pc}
 8008084:	20003f6c 	.word	0x20003f6c

08008088 <_fstat_r>:
 8008088:	b538      	push	{r3, r4, r5, lr}
 800808a:	4c07      	ldr	r4, [pc, #28]	; (80080a8 <_fstat_r+0x20>)
 800808c:	2300      	movs	r3, #0
 800808e:	4605      	mov	r5, r0
 8008090:	4608      	mov	r0, r1
 8008092:	4611      	mov	r1, r2
 8008094:	6023      	str	r3, [r4, #0]
 8008096:	f7fe fee2 	bl	8006e5e <_fstat>
 800809a:	1c43      	adds	r3, r0, #1
 800809c:	d102      	bne.n	80080a4 <_fstat_r+0x1c>
 800809e:	6823      	ldr	r3, [r4, #0]
 80080a0:	b103      	cbz	r3, 80080a4 <_fstat_r+0x1c>
 80080a2:	602b      	str	r3, [r5, #0]
 80080a4:	bd38      	pop	{r3, r4, r5, pc}
 80080a6:	bf00      	nop
 80080a8:	20003f6c 	.word	0x20003f6c

080080ac <_isatty_r>:
 80080ac:	b538      	push	{r3, r4, r5, lr}
 80080ae:	4c06      	ldr	r4, [pc, #24]	; (80080c8 <_isatty_r+0x1c>)
 80080b0:	2300      	movs	r3, #0
 80080b2:	4605      	mov	r5, r0
 80080b4:	4608      	mov	r0, r1
 80080b6:	6023      	str	r3, [r4, #0]
 80080b8:	f7fe fee1 	bl	8006e7e <_isatty>
 80080bc:	1c43      	adds	r3, r0, #1
 80080be:	d102      	bne.n	80080c6 <_isatty_r+0x1a>
 80080c0:	6823      	ldr	r3, [r4, #0]
 80080c2:	b103      	cbz	r3, 80080c6 <_isatty_r+0x1a>
 80080c4:	602b      	str	r3, [r5, #0]
 80080c6:	bd38      	pop	{r3, r4, r5, pc}
 80080c8:	20003f6c 	.word	0x20003f6c

080080cc <_lseek_r>:
 80080cc:	b538      	push	{r3, r4, r5, lr}
 80080ce:	4c07      	ldr	r4, [pc, #28]	; (80080ec <_lseek_r+0x20>)
 80080d0:	4605      	mov	r5, r0
 80080d2:	4608      	mov	r0, r1
 80080d4:	4611      	mov	r1, r2
 80080d6:	2200      	movs	r2, #0
 80080d8:	6022      	str	r2, [r4, #0]
 80080da:	461a      	mov	r2, r3
 80080dc:	f7fe feda 	bl	8006e94 <_lseek>
 80080e0:	1c43      	adds	r3, r0, #1
 80080e2:	d102      	bne.n	80080ea <_lseek_r+0x1e>
 80080e4:	6823      	ldr	r3, [r4, #0]
 80080e6:	b103      	cbz	r3, 80080ea <_lseek_r+0x1e>
 80080e8:	602b      	str	r3, [r5, #0]
 80080ea:	bd38      	pop	{r3, r4, r5, pc}
 80080ec:	20003f6c 	.word	0x20003f6c

080080f0 <__malloc_lock>:
 80080f0:	4770      	bx	lr

080080f2 <__malloc_unlock>:
 80080f2:	4770      	bx	lr

080080f4 <_read_r>:
 80080f4:	b538      	push	{r3, r4, r5, lr}
 80080f6:	4c07      	ldr	r4, [pc, #28]	; (8008114 <_read_r+0x20>)
 80080f8:	4605      	mov	r5, r0
 80080fa:	4608      	mov	r0, r1
 80080fc:	4611      	mov	r1, r2
 80080fe:	2200      	movs	r2, #0
 8008100:	6022      	str	r2, [r4, #0]
 8008102:	461a      	mov	r2, r3
 8008104:	f7fe fe66 	bl	8006dd4 <_read>
 8008108:	1c43      	adds	r3, r0, #1
 800810a:	d102      	bne.n	8008112 <_read_r+0x1e>
 800810c:	6823      	ldr	r3, [r4, #0]
 800810e:	b103      	cbz	r3, 8008112 <_read_r+0x1e>
 8008110:	602b      	str	r3, [r5, #0]
 8008112:	bd38      	pop	{r3, r4, r5, pc}
 8008114:	20003f6c 	.word	0x20003f6c

08008118 <_init>:
 8008118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800811a:	bf00      	nop
 800811c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800811e:	bc08      	pop	{r3}
 8008120:	469e      	mov	lr, r3
 8008122:	4770      	bx	lr

08008124 <_fini>:
 8008124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008126:	bf00      	nop
 8008128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800812a:	bc08      	pop	{r3}
 800812c:	469e      	mov	lr, r3
 800812e:	4770      	bx	lr
