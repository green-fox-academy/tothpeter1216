
Thread_creation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003344  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003514  08003514  00013514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800359c  0800359c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800359c  0800359c  0001359c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080035a4  080035a4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035a4  080035a4  000135a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035a8  080035a8  000135a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080035ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003db8  2000000c  080035b8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003dc4  080035b8  00023dc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e966  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021d3  00000000  00000000  0002e9a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000de0  00000000  00000000  00030b78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cd8  00000000  00000000  00031958  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002578e  00000000  00000000  00032630  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b327  00000000  00000000  00057dbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000eb102  00000000  00000000  000630e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014e1e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000390c  00000000  00000000  0014e264  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000000c 	.word	0x2000000c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080034fc 	.word	0x080034fc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000010 	.word	0x20000010
 800020c:	080034fc 	.word	0x080034fc

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b972 	b.w	800050c <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	4688      	mov	r8, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14b      	bne.n	80002e6 <__udivmoddi4+0xa6>
 800024e:	428a      	cmp	r2, r1
 8000250:	4615      	mov	r5, r2
 8000252:	d967      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0720 	rsb	r7, r2, #32
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	fa20 f707 	lsr.w	r7, r0, r7
 8000266:	4095      	lsls	r5, r2
 8000268:	ea47 0803 	orr.w	r8, r7, r3
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbb8 f7fe 	udiv	r7, r8, lr
 8000278:	fa1f fc85 	uxth.w	ip, r5
 800027c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000280:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000284:	fb07 f10c 	mul.w	r1, r7, ip
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18eb      	adds	r3, r5, r3
 800028e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000292:	f080 811b 	bcs.w	80004cc <__udivmoddi4+0x28c>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8118 	bls.w	80004cc <__udivmoddi4+0x28c>
 800029c:	3f02      	subs	r7, #2
 800029e:	442b      	add	r3, r5
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b4:	45a4      	cmp	ip, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	192c      	adds	r4, r5, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8107 	bcs.w	80004d0 <__udivmoddi4+0x290>
 80002c2:	45a4      	cmp	ip, r4
 80002c4:	f240 8104 	bls.w	80004d0 <__udivmoddi4+0x290>
 80002c8:	3802      	subs	r0, #2
 80002ca:	442c      	add	r4, r5
 80002cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d0:	eba4 040c 	sub.w	r4, r4, ip
 80002d4:	2700      	movs	r7, #0
 80002d6:	b11e      	cbz	r6, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c6 4300 	strd	r4, r3, [r6]
 80002e0:	4639      	mov	r1, r7
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0xbe>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80eb 	beq.w	80004c6 <__udivmoddi4+0x286>
 80002f0:	2700      	movs	r7, #0
 80002f2:	e9c6 0100 	strd	r0, r1, [r6]
 80002f6:	4638      	mov	r0, r7
 80002f8:	4639      	mov	r1, r7
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	fab3 f783 	clz	r7, r3
 8000302:	2f00      	cmp	r7, #0
 8000304:	d147      	bne.n	8000396 <__udivmoddi4+0x156>
 8000306:	428b      	cmp	r3, r1
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xd0>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2c4>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb61 0303 	sbc.w	r3, r1, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4698      	mov	r8, r3
 800031a:	2e00      	cmp	r6, #0
 800031c:	d0e0      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800031e:	e9c6 4800 	strd	r4, r8, [r6]
 8000322:	e7dd      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000324:	b902      	cbnz	r2, 8000328 <__udivmoddi4+0xe8>
 8000326:	deff      	udf	#255	; 0xff
 8000328:	fab2 f282 	clz	r2, r2
 800032c:	2a00      	cmp	r2, #0
 800032e:	f040 808f 	bne.w	8000450 <__udivmoddi4+0x210>
 8000332:	1b49      	subs	r1, r1, r5
 8000334:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000338:	fa1f f885 	uxth.w	r8, r5
 800033c:	2701      	movs	r7, #1
 800033e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fb0e 111c 	mls	r1, lr, ip, r1
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb08 f10c 	mul.w	r1, r8, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x124>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f10c 30ff 	add.w	r0, ip, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4299      	cmp	r1, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 8000362:	4684      	mov	ip, r0
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb1 f0fe 	udiv	r0, r1, lr
 800036c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000370:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000374:	fb08 f800 	mul.w	r8, r8, r0
 8000378:	45a0      	cmp	r8, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x14c>
 800037c:	192c      	adds	r4, r5, r4
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x14a>
 8000384:	45a0      	cmp	r8, r4
 8000386:	f200 80b6 	bhi.w	80004f6 <__udivmoddi4+0x2b6>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 0408 	sub.w	r4, r4, r8
 8000390:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000394:	e79f      	b.n	80002d6 <__udivmoddi4+0x96>
 8000396:	f1c7 0c20 	rsb	ip, r7, #32
 800039a:	40bb      	lsls	r3, r7
 800039c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a4:	fa01 f407 	lsl.w	r4, r1, r7
 80003a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b4:	4325      	orrs	r5, r4
 80003b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ba:	0c2c      	lsrs	r4, r5, #16
 80003bc:	fb08 3319 	mls	r3, r8, r9, r3
 80003c0:	fa1f fa8e 	uxth.w	sl, lr
 80003c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c8:	fb09 f40a 	mul.w	r4, r9, sl
 80003cc:	429c      	cmp	r4, r3
 80003ce:	fa02 f207 	lsl.w	r2, r2, r7
 80003d2:	fa00 f107 	lsl.w	r1, r0, r7
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1e 0303 	adds.w	r3, lr, r3
 80003dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e0:	f080 8087 	bcs.w	80004f2 <__udivmoddi4+0x2b2>
 80003e4:	429c      	cmp	r4, r3
 80003e6:	f240 8084 	bls.w	80004f2 <__udivmoddi4+0x2b2>
 80003ea:	f1a9 0902 	sub.w	r9, r9, #2
 80003ee:	4473      	add	r3, lr
 80003f0:	1b1b      	subs	r3, r3, r4
 80003f2:	b2ad      	uxth	r5, r5
 80003f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f8:	fb08 3310 	mls	r3, r8, r0, r3
 80003fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000400:	fb00 fa0a 	mul.w	sl, r0, sl
 8000404:	45a2      	cmp	sl, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1e 0404 	adds.w	r4, lr, r4
 800040c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000410:	d26b      	bcs.n	80004ea <__udivmoddi4+0x2aa>
 8000412:	45a2      	cmp	sl, r4
 8000414:	d969      	bls.n	80004ea <__udivmoddi4+0x2aa>
 8000416:	3802      	subs	r0, #2
 8000418:	4474      	add	r4, lr
 800041a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800041e:	fba0 8902 	umull	r8, r9, r0, r2
 8000422:	eba4 040a 	sub.w	r4, r4, sl
 8000426:	454c      	cmp	r4, r9
 8000428:	46c2      	mov	sl, r8
 800042a:	464b      	mov	r3, r9
 800042c:	d354      	bcc.n	80004d8 <__udivmoddi4+0x298>
 800042e:	d051      	beq.n	80004d4 <__udivmoddi4+0x294>
 8000430:	2e00      	cmp	r6, #0
 8000432:	d069      	beq.n	8000508 <__udivmoddi4+0x2c8>
 8000434:	ebb1 050a 	subs.w	r5, r1, sl
 8000438:	eb64 0403 	sbc.w	r4, r4, r3
 800043c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000440:	40fd      	lsrs	r5, r7
 8000442:	40fc      	lsrs	r4, r7
 8000444:	ea4c 0505 	orr.w	r5, ip, r5
 8000448:	e9c6 5400 	strd	r5, r4, [r6]
 800044c:	2700      	movs	r7, #0
 800044e:	e747      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000450:	f1c2 0320 	rsb	r3, r2, #32
 8000454:	fa20 f703 	lsr.w	r7, r0, r3
 8000458:	4095      	lsls	r5, r2
 800045a:	fa01 f002 	lsl.w	r0, r1, r2
 800045e:	fa21 f303 	lsr.w	r3, r1, r3
 8000462:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000466:	4338      	orrs	r0, r7
 8000468:	0c01      	lsrs	r1, r0, #16
 800046a:	fbb3 f7fe 	udiv	r7, r3, lr
 800046e:	fa1f f885 	uxth.w	r8, r5
 8000472:	fb0e 3317 	mls	r3, lr, r7, r3
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb07 f308 	mul.w	r3, r7, r8
 800047e:	428b      	cmp	r3, r1
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x256>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f107 3cff 	add.w	ip, r7, #4294967295
 800048c:	d22f      	bcs.n	80004ee <__udivmoddi4+0x2ae>
 800048e:	428b      	cmp	r3, r1
 8000490:	d92d      	bls.n	80004ee <__udivmoddi4+0x2ae>
 8000492:	3f02      	subs	r7, #2
 8000494:	4429      	add	r1, r5
 8000496:	1acb      	subs	r3, r1, r3
 8000498:	b281      	uxth	r1, r0
 800049a:	fbb3 f0fe 	udiv	r0, r3, lr
 800049e:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a6:	fb00 f308 	mul.w	r3, r0, r8
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x27e>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b4:	d217      	bcs.n	80004e6 <__udivmoddi4+0x2a6>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d915      	bls.n	80004e6 <__udivmoddi4+0x2a6>
 80004ba:	3802      	subs	r0, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c4:	e73b      	b.n	800033e <__udivmoddi4+0xfe>
 80004c6:	4637      	mov	r7, r6
 80004c8:	4630      	mov	r0, r6
 80004ca:	e709      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004cc:	4607      	mov	r7, r0
 80004ce:	e6e7      	b.n	80002a0 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fb      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d4:	4541      	cmp	r1, r8
 80004d6:	d2ab      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004dc:	eb69 020e 	sbc.w	r2, r9, lr
 80004e0:	3801      	subs	r0, #1
 80004e2:	4613      	mov	r3, r2
 80004e4:	e7a4      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e6:	4660      	mov	r0, ip
 80004e8:	e7e9      	b.n	80004be <__udivmoddi4+0x27e>
 80004ea:	4618      	mov	r0, r3
 80004ec:	e795      	b.n	800041a <__udivmoddi4+0x1da>
 80004ee:	4667      	mov	r7, ip
 80004f0:	e7d1      	b.n	8000496 <__udivmoddi4+0x256>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e77c      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	442c      	add	r4, r5
 80004fa:	e747      	b.n	800038c <__udivmoddi4+0x14c>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	442b      	add	r3, r5
 8000502:	e72f      	b.n	8000364 <__udivmoddi4+0x124>
 8000504:	4638      	mov	r0, r7
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xda>
 8000508:	4637      	mov	r7, r6
 800050a:	e6e9      	b.n	80002e0 <__udivmoddi4+0xa0>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000514:	2003      	movs	r0, #3
 8000516:	f000 f8d6 	bl	80006c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800051a:	2000      	movs	r0, #0
 800051c:	f002 fee6 	bl	80032ec <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000520:	f002 febc 	bl	800329c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000524:	2300      	movs	r3, #0
}
 8000526:	4618      	mov	r0, r3
 8000528:	bd80      	pop	{r7, pc}
	...

0800052c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000530:	4b06      	ldr	r3, [pc, #24]	; (800054c <HAL_IncTick+0x20>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	461a      	mov	r2, r3
 8000536:	4b06      	ldr	r3, [pc, #24]	; (8000550 <HAL_IncTick+0x24>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4413      	add	r3, r2
 800053c:	4a04      	ldr	r2, [pc, #16]	; (8000550 <HAL_IncTick+0x24>)
 800053e:	6013      	str	r3, [r2, #0]
}
 8000540:	bf00      	nop
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	20000000 	.word	0x20000000
 8000550:	20003d74 	.word	0x20003d74

08000554 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  return uwTick;
 8000558:	4b03      	ldr	r3, [pc, #12]	; (8000568 <HAL_GetTick+0x14>)
 800055a:	681b      	ldr	r3, [r3, #0]
}
 800055c:	4618      	mov	r0, r3
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	20003d74 	.word	0x20003d74

0800056c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	f003 0307 	and.w	r3, r3, #7
 800057a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800057c:	4b0b      	ldr	r3, [pc, #44]	; (80005ac <__NVIC_SetPriorityGrouping+0x40>)
 800057e:	68db      	ldr	r3, [r3, #12]
 8000580:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000582:	68ba      	ldr	r2, [r7, #8]
 8000584:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000588:	4013      	ands	r3, r2
 800058a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000590:	68bb      	ldr	r3, [r7, #8]
 8000592:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000594:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <__NVIC_SetPriorityGrouping+0x44>)
 8000596:	4313      	orrs	r3, r2
 8000598:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800059a:	4a04      	ldr	r2, [pc, #16]	; (80005ac <__NVIC_SetPriorityGrouping+0x40>)
 800059c:	68bb      	ldr	r3, [r7, #8]
 800059e:	60d3      	str	r3, [r2, #12]
}
 80005a0:	bf00      	nop
 80005a2:	3714      	adds	r7, #20
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr
 80005ac:	e000ed00 	.word	0xe000ed00
 80005b0:	05fa0000 	.word	0x05fa0000

080005b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005b8:	4b04      	ldr	r3, [pc, #16]	; (80005cc <__NVIC_GetPriorityGrouping+0x18>)
 80005ba:	68db      	ldr	r3, [r3, #12]
 80005bc:	0a1b      	lsrs	r3, r3, #8
 80005be:	f003 0307 	and.w	r3, r3, #7
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr
 80005cc:	e000ed00 	.word	0xe000ed00

080005d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	db0b      	blt.n	80005fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	f003 021f 	and.w	r2, r3, #31
 80005e8:	4907      	ldr	r1, [pc, #28]	; (8000608 <__NVIC_EnableIRQ+0x38>)
 80005ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ee:	095b      	lsrs	r3, r3, #5
 80005f0:	2001      	movs	r0, #1
 80005f2:	fa00 f202 	lsl.w	r2, r0, r2
 80005f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005fa:	bf00      	nop
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	e000e100 	.word	0xe000e100

0800060c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	6039      	str	r1, [r7, #0]
 8000616:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061c:	2b00      	cmp	r3, #0
 800061e:	db0a      	blt.n	8000636 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	b2da      	uxtb	r2, r3
 8000624:	490c      	ldr	r1, [pc, #48]	; (8000658 <__NVIC_SetPriority+0x4c>)
 8000626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062a:	0112      	lsls	r2, r2, #4
 800062c:	b2d2      	uxtb	r2, r2
 800062e:	440b      	add	r3, r1
 8000630:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000634:	e00a      	b.n	800064c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	b2da      	uxtb	r2, r3
 800063a:	4908      	ldr	r1, [pc, #32]	; (800065c <__NVIC_SetPriority+0x50>)
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	f003 030f 	and.w	r3, r3, #15
 8000642:	3b04      	subs	r3, #4
 8000644:	0112      	lsls	r2, r2, #4
 8000646:	b2d2      	uxtb	r2, r2
 8000648:	440b      	add	r3, r1
 800064a:	761a      	strb	r2, [r3, #24]
}
 800064c:	bf00      	nop
 800064e:	370c      	adds	r7, #12
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr
 8000658:	e000e100 	.word	0xe000e100
 800065c:	e000ed00 	.word	0xe000ed00

08000660 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000660:	b480      	push	{r7}
 8000662:	b089      	sub	sp, #36	; 0x24
 8000664:	af00      	add	r7, sp, #0
 8000666:	60f8      	str	r0, [r7, #12]
 8000668:	60b9      	str	r1, [r7, #8]
 800066a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	f003 0307 	and.w	r3, r3, #7
 8000672:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000674:	69fb      	ldr	r3, [r7, #28]
 8000676:	f1c3 0307 	rsb	r3, r3, #7
 800067a:	2b04      	cmp	r3, #4
 800067c:	bf28      	it	cs
 800067e:	2304      	movcs	r3, #4
 8000680:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000682:	69fb      	ldr	r3, [r7, #28]
 8000684:	3304      	adds	r3, #4
 8000686:	2b06      	cmp	r3, #6
 8000688:	d902      	bls.n	8000690 <NVIC_EncodePriority+0x30>
 800068a:	69fb      	ldr	r3, [r7, #28]
 800068c:	3b03      	subs	r3, #3
 800068e:	e000      	b.n	8000692 <NVIC_EncodePriority+0x32>
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000694:	f04f 32ff 	mov.w	r2, #4294967295
 8000698:	69bb      	ldr	r3, [r7, #24]
 800069a:	fa02 f303 	lsl.w	r3, r2, r3
 800069e:	43da      	mvns	r2, r3
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	401a      	ands	r2, r3
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006a8:	f04f 31ff 	mov.w	r1, #4294967295
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	fa01 f303 	lsl.w	r3, r1, r3
 80006b2:	43d9      	mvns	r1, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b8:	4313      	orrs	r3, r2
         );
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3724      	adds	r7, #36	; 0x24
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr

080006c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b082      	sub	sp, #8
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006ce:	6878      	ldr	r0, [r7, #4]
 80006d0:	f7ff ff4c 	bl	800056c <__NVIC_SetPriorityGrouping>
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
 80006e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80006ee:	f7ff ff61 	bl	80005b4 <__NVIC_GetPriorityGrouping>
 80006f2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006f4:	687a      	ldr	r2, [r7, #4]
 80006f6:	68b9      	ldr	r1, [r7, #8]
 80006f8:	6978      	ldr	r0, [r7, #20]
 80006fa:	f7ff ffb1 	bl	8000660 <NVIC_EncodePriority>
 80006fe:	4602      	mov	r2, r0
 8000700:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000704:	4611      	mov	r1, r2
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff ff80 	bl	800060c <__NVIC_SetPriority>
}
 800070c:	bf00      	nop
 800070e:	3718      	adds	r7, #24
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800071e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000722:	4618      	mov	r0, r3
 8000724:	f7ff ff54 	bl	80005d0 <__NVIC_EnableIRQ>
}
 8000728:	bf00      	nop
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000730:	b480      	push	{r7}
 8000732:	b089      	sub	sp, #36	; 0x24
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800073a:	2300      	movs	r3, #0
 800073c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800073e:	2300      	movs	r3, #0
 8000740:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000742:	2300      	movs	r3, #0
 8000744:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000746:	2300      	movs	r3, #0
 8000748:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800074a:	2300      	movs	r3, #0
 800074c:	61fb      	str	r3, [r7, #28]
 800074e:	e175      	b.n	8000a3c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000750:	2201      	movs	r2, #1
 8000752:	69fb      	ldr	r3, [r7, #28]
 8000754:	fa02 f303 	lsl.w	r3, r2, r3
 8000758:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	697a      	ldr	r2, [r7, #20]
 8000760:	4013      	ands	r3, r2
 8000762:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000764:	693a      	ldr	r2, [r7, #16]
 8000766:	697b      	ldr	r3, [r7, #20]
 8000768:	429a      	cmp	r2, r3
 800076a:	f040 8164 	bne.w	8000a36 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	685b      	ldr	r3, [r3, #4]
 8000772:	2b02      	cmp	r3, #2
 8000774:	d003      	beq.n	800077e <HAL_GPIO_Init+0x4e>
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	685b      	ldr	r3, [r3, #4]
 800077a:	2b12      	cmp	r3, #18
 800077c:	d123      	bne.n	80007c6 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800077e:	69fb      	ldr	r3, [r7, #28]
 8000780:	08da      	lsrs	r2, r3, #3
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	3208      	adds	r2, #8
 8000786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800078a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800078c:	69fb      	ldr	r3, [r7, #28]
 800078e:	f003 0307 	and.w	r3, r3, #7
 8000792:	009b      	lsls	r3, r3, #2
 8000794:	220f      	movs	r2, #15
 8000796:	fa02 f303 	lsl.w	r3, r2, r3
 800079a:	43db      	mvns	r3, r3
 800079c:	69ba      	ldr	r2, [r7, #24]
 800079e:	4013      	ands	r3, r2
 80007a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	691a      	ldr	r2, [r3, #16]
 80007a6:	69fb      	ldr	r3, [r7, #28]
 80007a8:	f003 0307 	and.w	r3, r3, #7
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	fa02 f303 	lsl.w	r3, r2, r3
 80007b2:	69ba      	ldr	r2, [r7, #24]
 80007b4:	4313      	orrs	r3, r2
 80007b6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80007b8:	69fb      	ldr	r3, [r7, #28]
 80007ba:	08da      	lsrs	r2, r3, #3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	3208      	adds	r2, #8
 80007c0:	69b9      	ldr	r1, [r7, #24]
 80007c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80007cc:	69fb      	ldr	r3, [r7, #28]
 80007ce:	005b      	lsls	r3, r3, #1
 80007d0:	2203      	movs	r2, #3
 80007d2:	fa02 f303 	lsl.w	r3, r2, r3
 80007d6:	43db      	mvns	r3, r3
 80007d8:	69ba      	ldr	r2, [r7, #24]
 80007da:	4013      	ands	r3, r2
 80007dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	f003 0203 	and.w	r2, r3, #3
 80007e6:	69fb      	ldr	r3, [r7, #28]
 80007e8:	005b      	lsls	r3, r3, #1
 80007ea:	fa02 f303 	lsl.w	r3, r2, r3
 80007ee:	69ba      	ldr	r2, [r7, #24]
 80007f0:	4313      	orrs	r3, r2
 80007f2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	69ba      	ldr	r2, [r7, #24]
 80007f8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d00b      	beq.n	800081a <HAL_GPIO_Init+0xea>
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	685b      	ldr	r3, [r3, #4]
 8000806:	2b02      	cmp	r3, #2
 8000808:	d007      	beq.n	800081a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800080e:	2b11      	cmp	r3, #17
 8000810:	d003      	beq.n	800081a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	685b      	ldr	r3, [r3, #4]
 8000816:	2b12      	cmp	r3, #18
 8000818:	d130      	bne.n	800087c <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	689b      	ldr	r3, [r3, #8]
 800081e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000820:	69fb      	ldr	r3, [r7, #28]
 8000822:	005b      	lsls	r3, r3, #1
 8000824:	2203      	movs	r2, #3
 8000826:	fa02 f303 	lsl.w	r3, r2, r3
 800082a:	43db      	mvns	r3, r3
 800082c:	69ba      	ldr	r2, [r7, #24]
 800082e:	4013      	ands	r3, r2
 8000830:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	68da      	ldr	r2, [r3, #12]
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	005b      	lsls	r3, r3, #1
 800083a:	fa02 f303 	lsl.w	r3, r2, r3
 800083e:	69ba      	ldr	r2, [r7, #24]
 8000840:	4313      	orrs	r3, r2
 8000842:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	69ba      	ldr	r2, [r7, #24]
 8000848:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000850:	2201      	movs	r2, #1
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	fa02 f303 	lsl.w	r3, r2, r3
 8000858:	43db      	mvns	r3, r3
 800085a:	69ba      	ldr	r2, [r7, #24]
 800085c:	4013      	ands	r3, r2
 800085e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	091b      	lsrs	r3, r3, #4
 8000866:	f003 0201 	and.w	r2, r3, #1
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	fa02 f303 	lsl.w	r3, r2, r3
 8000870:	69ba      	ldr	r2, [r7, #24]
 8000872:	4313      	orrs	r3, r2
 8000874:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	69ba      	ldr	r2, [r7, #24]
 800087a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	68db      	ldr	r3, [r3, #12]
 8000880:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	2203      	movs	r2, #3
 8000888:	fa02 f303 	lsl.w	r3, r2, r3
 800088c:	43db      	mvns	r3, r3
 800088e:	69ba      	ldr	r2, [r7, #24]
 8000890:	4013      	ands	r3, r2
 8000892:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	689a      	ldr	r2, [r3, #8]
 8000898:	69fb      	ldr	r3, [r7, #28]
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	fa02 f303 	lsl.w	r3, r2, r3
 80008a0:	69ba      	ldr	r2, [r7, #24]
 80008a2:	4313      	orrs	r3, r2
 80008a4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	69ba      	ldr	r2, [r7, #24]
 80008aa:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	f000 80be 	beq.w	8000a36 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ba:	4b65      	ldr	r3, [pc, #404]	; (8000a50 <HAL_GPIO_Init+0x320>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008be:	4a64      	ldr	r2, [pc, #400]	; (8000a50 <HAL_GPIO_Init+0x320>)
 80008c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008c4:	6453      	str	r3, [r2, #68]	; 0x44
 80008c6:	4b62      	ldr	r3, [pc, #392]	; (8000a50 <HAL_GPIO_Init+0x320>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80008d2:	4a60      	ldr	r2, [pc, #384]	; (8000a54 <HAL_GPIO_Init+0x324>)
 80008d4:	69fb      	ldr	r3, [r7, #28]
 80008d6:	089b      	lsrs	r3, r3, #2
 80008d8:	3302      	adds	r3, #2
 80008da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008de:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80008e0:	69fb      	ldr	r3, [r7, #28]
 80008e2:	f003 0303 	and.w	r3, r3, #3
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	220f      	movs	r2, #15
 80008ea:	fa02 f303 	lsl.w	r3, r2, r3
 80008ee:	43db      	mvns	r3, r3
 80008f0:	69ba      	ldr	r2, [r7, #24]
 80008f2:	4013      	ands	r3, r2
 80008f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4a57      	ldr	r2, [pc, #348]	; (8000a58 <HAL_GPIO_Init+0x328>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d037      	beq.n	800096e <HAL_GPIO_Init+0x23e>
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4a56      	ldr	r2, [pc, #344]	; (8000a5c <HAL_GPIO_Init+0x32c>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d031      	beq.n	800096a <HAL_GPIO_Init+0x23a>
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4a55      	ldr	r2, [pc, #340]	; (8000a60 <HAL_GPIO_Init+0x330>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d02b      	beq.n	8000966 <HAL_GPIO_Init+0x236>
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4a54      	ldr	r2, [pc, #336]	; (8000a64 <HAL_GPIO_Init+0x334>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d025      	beq.n	8000962 <HAL_GPIO_Init+0x232>
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4a53      	ldr	r2, [pc, #332]	; (8000a68 <HAL_GPIO_Init+0x338>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d01f      	beq.n	800095e <HAL_GPIO_Init+0x22e>
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4a52      	ldr	r2, [pc, #328]	; (8000a6c <HAL_GPIO_Init+0x33c>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d019      	beq.n	800095a <HAL_GPIO_Init+0x22a>
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4a51      	ldr	r2, [pc, #324]	; (8000a70 <HAL_GPIO_Init+0x340>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d013      	beq.n	8000956 <HAL_GPIO_Init+0x226>
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4a50      	ldr	r2, [pc, #320]	; (8000a74 <HAL_GPIO_Init+0x344>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d00d      	beq.n	8000952 <HAL_GPIO_Init+0x222>
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4a4f      	ldr	r2, [pc, #316]	; (8000a78 <HAL_GPIO_Init+0x348>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d007      	beq.n	800094e <HAL_GPIO_Init+0x21e>
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4a4e      	ldr	r2, [pc, #312]	; (8000a7c <HAL_GPIO_Init+0x34c>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d101      	bne.n	800094a <HAL_GPIO_Init+0x21a>
 8000946:	2309      	movs	r3, #9
 8000948:	e012      	b.n	8000970 <HAL_GPIO_Init+0x240>
 800094a:	230a      	movs	r3, #10
 800094c:	e010      	b.n	8000970 <HAL_GPIO_Init+0x240>
 800094e:	2308      	movs	r3, #8
 8000950:	e00e      	b.n	8000970 <HAL_GPIO_Init+0x240>
 8000952:	2307      	movs	r3, #7
 8000954:	e00c      	b.n	8000970 <HAL_GPIO_Init+0x240>
 8000956:	2306      	movs	r3, #6
 8000958:	e00a      	b.n	8000970 <HAL_GPIO_Init+0x240>
 800095a:	2305      	movs	r3, #5
 800095c:	e008      	b.n	8000970 <HAL_GPIO_Init+0x240>
 800095e:	2304      	movs	r3, #4
 8000960:	e006      	b.n	8000970 <HAL_GPIO_Init+0x240>
 8000962:	2303      	movs	r3, #3
 8000964:	e004      	b.n	8000970 <HAL_GPIO_Init+0x240>
 8000966:	2302      	movs	r3, #2
 8000968:	e002      	b.n	8000970 <HAL_GPIO_Init+0x240>
 800096a:	2301      	movs	r3, #1
 800096c:	e000      	b.n	8000970 <HAL_GPIO_Init+0x240>
 800096e:	2300      	movs	r3, #0
 8000970:	69fa      	ldr	r2, [r7, #28]
 8000972:	f002 0203 	and.w	r2, r2, #3
 8000976:	0092      	lsls	r2, r2, #2
 8000978:	4093      	lsls	r3, r2
 800097a:	69ba      	ldr	r2, [r7, #24]
 800097c:	4313      	orrs	r3, r2
 800097e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000980:	4934      	ldr	r1, [pc, #208]	; (8000a54 <HAL_GPIO_Init+0x324>)
 8000982:	69fb      	ldr	r3, [r7, #28]
 8000984:	089b      	lsrs	r3, r3, #2
 8000986:	3302      	adds	r3, #2
 8000988:	69ba      	ldr	r2, [r7, #24]
 800098a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800098e:	4b3c      	ldr	r3, [pc, #240]	; (8000a80 <HAL_GPIO_Init+0x350>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000994:	693b      	ldr	r3, [r7, #16]
 8000996:	43db      	mvns	r3, r3
 8000998:	69ba      	ldr	r2, [r7, #24]
 800099a:	4013      	ands	r3, r2
 800099c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d003      	beq.n	80009b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80009aa:	69ba      	ldr	r2, [r7, #24]
 80009ac:	693b      	ldr	r3, [r7, #16]
 80009ae:	4313      	orrs	r3, r2
 80009b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80009b2:	4a33      	ldr	r2, [pc, #204]	; (8000a80 <HAL_GPIO_Init+0x350>)
 80009b4:	69bb      	ldr	r3, [r7, #24]
 80009b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80009b8:	4b31      	ldr	r3, [pc, #196]	; (8000a80 <HAL_GPIO_Init+0x350>)
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009be:	693b      	ldr	r3, [r7, #16]
 80009c0:	43db      	mvns	r3, r3
 80009c2:	69ba      	ldr	r2, [r7, #24]
 80009c4:	4013      	ands	r3, r2
 80009c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d003      	beq.n	80009dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80009d4:	69ba      	ldr	r2, [r7, #24]
 80009d6:	693b      	ldr	r3, [r7, #16]
 80009d8:	4313      	orrs	r3, r2
 80009da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80009dc:	4a28      	ldr	r2, [pc, #160]	; (8000a80 <HAL_GPIO_Init+0x350>)
 80009de:	69bb      	ldr	r3, [r7, #24]
 80009e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80009e2:	4b27      	ldr	r3, [pc, #156]	; (8000a80 <HAL_GPIO_Init+0x350>)
 80009e4:	689b      	ldr	r3, [r3, #8]
 80009e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009e8:	693b      	ldr	r3, [r7, #16]
 80009ea:	43db      	mvns	r3, r3
 80009ec:	69ba      	ldr	r2, [r7, #24]
 80009ee:	4013      	ands	r3, r2
 80009f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d003      	beq.n	8000a06 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80009fe:	69ba      	ldr	r2, [r7, #24]
 8000a00:	693b      	ldr	r3, [r7, #16]
 8000a02:	4313      	orrs	r3, r2
 8000a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a06:	4a1e      	ldr	r2, [pc, #120]	; (8000a80 <HAL_GPIO_Init+0x350>)
 8000a08:	69bb      	ldr	r3, [r7, #24]
 8000a0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a0c:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <HAL_GPIO_Init+0x350>)
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a12:	693b      	ldr	r3, [r7, #16]
 8000a14:	43db      	mvns	r3, r3
 8000a16:	69ba      	ldr	r2, [r7, #24]
 8000a18:	4013      	ands	r3, r2
 8000a1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d003      	beq.n	8000a30 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000a28:	69ba      	ldr	r2, [r7, #24]
 8000a2a:	693b      	ldr	r3, [r7, #16]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000a30:	4a13      	ldr	r2, [pc, #76]	; (8000a80 <HAL_GPIO_Init+0x350>)
 8000a32:	69bb      	ldr	r3, [r7, #24]
 8000a34:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000a36:	69fb      	ldr	r3, [r7, #28]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	61fb      	str	r3, [r7, #28]
 8000a3c:	69fb      	ldr	r3, [r7, #28]
 8000a3e:	2b0f      	cmp	r3, #15
 8000a40:	f67f ae86 	bls.w	8000750 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000a44:	bf00      	nop
 8000a46:	3724      	adds	r7, #36	; 0x24
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40013800 	.word	0x40013800
 8000a58:	40020000 	.word	0x40020000
 8000a5c:	40020400 	.word	0x40020400
 8000a60:	40020800 	.word	0x40020800
 8000a64:	40020c00 	.word	0x40020c00
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	40021400 	.word	0x40021400
 8000a70:	40021800 	.word	0x40021800
 8000a74:	40021c00 	.word	0x40021c00
 8000a78:	40022000 	.word	0x40022000
 8000a7c:	40022400 	.word	0x40022400
 8000a80:	40013c00 	.word	0x40013c00

08000a84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	460b      	mov	r3, r1
 8000a8e:	807b      	strh	r3, [r7, #2]
 8000a90:	4613      	mov	r3, r2
 8000a92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000a94:	787b      	ldrb	r3, [r7, #1]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d003      	beq.n	8000aa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000a9a:	887a      	ldrh	r2, [r7, #2]
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8000aa0:	e003      	b.n	8000aaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000aa2:	887b      	ldrh	r3, [r7, #2]
 8000aa4:	041a      	lsls	r2, r3, #16
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	619a      	str	r2, [r3, #24]
}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	b083      	sub	sp, #12
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
 8000abe:	460b      	mov	r3, r1
 8000ac0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	695a      	ldr	r2, [r3, #20]
 8000ac6:	887b      	ldrh	r3, [r7, #2]
 8000ac8:	401a      	ands	r2, r3
 8000aca:	887b      	ldrh	r3, [r7, #2]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d104      	bne.n	8000ada <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000ad0:	887b      	ldrh	r3, [r7, #2]
 8000ad2:	041a      	lsls	r2, r3, #16
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000ad8:	e002      	b.n	8000ae0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000ada:	887a      	ldrh	r2, [r7, #2]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	619a      	str	r2, [r3, #24]
}
 8000ae0:	bf00      	nop
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8000af4:	2300      	movs	r3, #0
 8000af6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d101      	bne.n	8000b02 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
 8000b00:	e25c      	b.n	8000fbc <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	f000 8087 	beq.w	8000c1e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b10:	4b96      	ldr	r3, [pc, #600]	; (8000d6c <HAL_RCC_OscConfig+0x280>)
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	f003 030c 	and.w	r3, r3, #12
 8000b18:	2b04      	cmp	r3, #4
 8000b1a:	d00c      	beq.n	8000b36 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b1c:	4b93      	ldr	r3, [pc, #588]	; (8000d6c <HAL_RCC_OscConfig+0x280>)
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	f003 030c 	and.w	r3, r3, #12
 8000b24:	2b08      	cmp	r3, #8
 8000b26:	d112      	bne.n	8000b4e <HAL_RCC_OscConfig+0x62>
 8000b28:	4b90      	ldr	r3, [pc, #576]	; (8000d6c <HAL_RCC_OscConfig+0x280>)
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000b34:	d10b      	bne.n	8000b4e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b36:	4b8d      	ldr	r3, [pc, #564]	; (8000d6c <HAL_RCC_OscConfig+0x280>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d06c      	beq.n	8000c1c <HAL_RCC_OscConfig+0x130>
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d168      	bne.n	8000c1c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e236      	b.n	8000fbc <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b56:	d106      	bne.n	8000b66 <HAL_RCC_OscConfig+0x7a>
 8000b58:	4b84      	ldr	r3, [pc, #528]	; (8000d6c <HAL_RCC_OscConfig+0x280>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a83      	ldr	r2, [pc, #524]	; (8000d6c <HAL_RCC_OscConfig+0x280>)
 8000b5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b62:	6013      	str	r3, [r2, #0]
 8000b64:	e02e      	b.n	8000bc4 <HAL_RCC_OscConfig+0xd8>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d10c      	bne.n	8000b88 <HAL_RCC_OscConfig+0x9c>
 8000b6e:	4b7f      	ldr	r3, [pc, #508]	; (8000d6c <HAL_RCC_OscConfig+0x280>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a7e      	ldr	r2, [pc, #504]	; (8000d6c <HAL_RCC_OscConfig+0x280>)
 8000b74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b78:	6013      	str	r3, [r2, #0]
 8000b7a:	4b7c      	ldr	r3, [pc, #496]	; (8000d6c <HAL_RCC_OscConfig+0x280>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a7b      	ldr	r2, [pc, #492]	; (8000d6c <HAL_RCC_OscConfig+0x280>)
 8000b80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b84:	6013      	str	r3, [r2, #0]
 8000b86:	e01d      	b.n	8000bc4 <HAL_RCC_OscConfig+0xd8>
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b90:	d10c      	bne.n	8000bac <HAL_RCC_OscConfig+0xc0>
 8000b92:	4b76      	ldr	r3, [pc, #472]	; (8000d6c <HAL_RCC_OscConfig+0x280>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a75      	ldr	r2, [pc, #468]	; (8000d6c <HAL_RCC_OscConfig+0x280>)
 8000b98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b9c:	6013      	str	r3, [r2, #0]
 8000b9e:	4b73      	ldr	r3, [pc, #460]	; (8000d6c <HAL_RCC_OscConfig+0x280>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a72      	ldr	r2, [pc, #456]	; (8000d6c <HAL_RCC_OscConfig+0x280>)
 8000ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ba8:	6013      	str	r3, [r2, #0]
 8000baa:	e00b      	b.n	8000bc4 <HAL_RCC_OscConfig+0xd8>
 8000bac:	4b6f      	ldr	r3, [pc, #444]	; (8000d6c <HAL_RCC_OscConfig+0x280>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a6e      	ldr	r2, [pc, #440]	; (8000d6c <HAL_RCC_OscConfig+0x280>)
 8000bb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bb6:	6013      	str	r3, [r2, #0]
 8000bb8:	4b6c      	ldr	r3, [pc, #432]	; (8000d6c <HAL_RCC_OscConfig+0x280>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a6b      	ldr	r2, [pc, #428]	; (8000d6c <HAL_RCC_OscConfig+0x280>)
 8000bbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d013      	beq.n	8000bf4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000bcc:	f7ff fcc2 	bl	8000554 <HAL_GetTick>
 8000bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bd2:	e008      	b.n	8000be6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bd4:	f7ff fcbe 	bl	8000554 <HAL_GetTick>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	2b64      	cmp	r3, #100	; 0x64
 8000be0:	d901      	bls.n	8000be6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000be2:	2303      	movs	r3, #3
 8000be4:	e1ea      	b.n	8000fbc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000be6:	4b61      	ldr	r3, [pc, #388]	; (8000d6c <HAL_RCC_OscConfig+0x280>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d0f0      	beq.n	8000bd4 <HAL_RCC_OscConfig+0xe8>
 8000bf2:	e014      	b.n	8000c1e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000bf4:	f7ff fcae 	bl	8000554 <HAL_GetTick>
 8000bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bfa:	e008      	b.n	8000c0e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bfc:	f7ff fcaa 	bl	8000554 <HAL_GetTick>
 8000c00:	4602      	mov	r2, r0
 8000c02:	693b      	ldr	r3, [r7, #16]
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	2b64      	cmp	r3, #100	; 0x64
 8000c08:	d901      	bls.n	8000c0e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	e1d6      	b.n	8000fbc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c0e:	4b57      	ldr	r3, [pc, #348]	; (8000d6c <HAL_RCC_OscConfig+0x280>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d1f0      	bne.n	8000bfc <HAL_RCC_OscConfig+0x110>
 8000c1a:	e000      	b.n	8000c1e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f003 0302 	and.w	r3, r3, #2
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d069      	beq.n	8000cfe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c2a:	4b50      	ldr	r3, [pc, #320]	; (8000d6c <HAL_RCC_OscConfig+0x280>)
 8000c2c:	689b      	ldr	r3, [r3, #8]
 8000c2e:	f003 030c 	and.w	r3, r3, #12
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d00b      	beq.n	8000c4e <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c36:	4b4d      	ldr	r3, [pc, #308]	; (8000d6c <HAL_RCC_OscConfig+0x280>)
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	f003 030c 	and.w	r3, r3, #12
 8000c3e:	2b08      	cmp	r3, #8
 8000c40:	d11c      	bne.n	8000c7c <HAL_RCC_OscConfig+0x190>
 8000c42:	4b4a      	ldr	r3, [pc, #296]	; (8000d6c <HAL_RCC_OscConfig+0x280>)
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d116      	bne.n	8000c7c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c4e:	4b47      	ldr	r3, [pc, #284]	; (8000d6c <HAL_RCC_OscConfig+0x280>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f003 0302 	and.w	r3, r3, #2
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d005      	beq.n	8000c66 <HAL_RCC_OscConfig+0x17a>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	68db      	ldr	r3, [r3, #12]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d001      	beq.n	8000c66 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e1aa      	b.n	8000fbc <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c66:	4b41      	ldr	r3, [pc, #260]	; (8000d6c <HAL_RCC_OscConfig+0x280>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	691b      	ldr	r3, [r3, #16]
 8000c72:	00db      	lsls	r3, r3, #3
 8000c74:	493d      	ldr	r1, [pc, #244]	; (8000d6c <HAL_RCC_OscConfig+0x280>)
 8000c76:	4313      	orrs	r3, r2
 8000c78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c7a:	e040      	b.n	8000cfe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d023      	beq.n	8000ccc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c84:	4b39      	ldr	r3, [pc, #228]	; (8000d6c <HAL_RCC_OscConfig+0x280>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a38      	ldr	r2, [pc, #224]	; (8000d6c <HAL_RCC_OscConfig+0x280>)
 8000c8a:	f043 0301 	orr.w	r3, r3, #1
 8000c8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c90:	f7ff fc60 	bl	8000554 <HAL_GetTick>
 8000c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c96:	e008      	b.n	8000caa <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c98:	f7ff fc5c 	bl	8000554 <HAL_GetTick>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	693b      	ldr	r3, [r7, #16]
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	d901      	bls.n	8000caa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	e188      	b.n	8000fbc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000caa:	4b30      	ldr	r3, [pc, #192]	; (8000d6c <HAL_RCC_OscConfig+0x280>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f003 0302 	and.w	r3, r3, #2
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d0f0      	beq.n	8000c98 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cb6:	4b2d      	ldr	r3, [pc, #180]	; (8000d6c <HAL_RCC_OscConfig+0x280>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	691b      	ldr	r3, [r3, #16]
 8000cc2:	00db      	lsls	r3, r3, #3
 8000cc4:	4929      	ldr	r1, [pc, #164]	; (8000d6c <HAL_RCC_OscConfig+0x280>)
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	600b      	str	r3, [r1, #0]
 8000cca:	e018      	b.n	8000cfe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ccc:	4b27      	ldr	r3, [pc, #156]	; (8000d6c <HAL_RCC_OscConfig+0x280>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a26      	ldr	r2, [pc, #152]	; (8000d6c <HAL_RCC_OscConfig+0x280>)
 8000cd2:	f023 0301 	bic.w	r3, r3, #1
 8000cd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cd8:	f7ff fc3c 	bl	8000554 <HAL_GetTick>
 8000cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cde:	e008      	b.n	8000cf2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ce0:	f7ff fc38 	bl	8000554 <HAL_GetTick>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	2b02      	cmp	r3, #2
 8000cec:	d901      	bls.n	8000cf2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	e164      	b.n	8000fbc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cf2:	4b1e      	ldr	r3, [pc, #120]	; (8000d6c <HAL_RCC_OscConfig+0x280>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f003 0302 	and.w	r3, r3, #2
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d1f0      	bne.n	8000ce0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f003 0308 	and.w	r3, r3, #8
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d038      	beq.n	8000d7c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	695b      	ldr	r3, [r3, #20]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d019      	beq.n	8000d46 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d12:	4b16      	ldr	r3, [pc, #88]	; (8000d6c <HAL_RCC_OscConfig+0x280>)
 8000d14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d16:	4a15      	ldr	r2, [pc, #84]	; (8000d6c <HAL_RCC_OscConfig+0x280>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d1e:	f7ff fc19 	bl	8000554 <HAL_GetTick>
 8000d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d24:	e008      	b.n	8000d38 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d26:	f7ff fc15 	bl	8000554 <HAL_GetTick>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	1ad3      	subs	r3, r2, r3
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	d901      	bls.n	8000d38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000d34:	2303      	movs	r3, #3
 8000d36:	e141      	b.n	8000fbc <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d38:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <HAL_RCC_OscConfig+0x280>)
 8000d3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d3c:	f003 0302 	and.w	r3, r3, #2
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d0f0      	beq.n	8000d26 <HAL_RCC_OscConfig+0x23a>
 8000d44:	e01a      	b.n	8000d7c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d46:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <HAL_RCC_OscConfig+0x280>)
 8000d48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d4a:	4a08      	ldr	r2, [pc, #32]	; (8000d6c <HAL_RCC_OscConfig+0x280>)
 8000d4c:	f023 0301 	bic.w	r3, r3, #1
 8000d50:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d52:	f7ff fbff 	bl	8000554 <HAL_GetTick>
 8000d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d58:	e00a      	b.n	8000d70 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d5a:	f7ff fbfb 	bl	8000554 <HAL_GetTick>
 8000d5e:	4602      	mov	r2, r0
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	1ad3      	subs	r3, r2, r3
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d903      	bls.n	8000d70 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	e127      	b.n	8000fbc <HAL_RCC_OscConfig+0x4d0>
 8000d6c:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d70:	4b94      	ldr	r3, [pc, #592]	; (8000fc4 <HAL_RCC_OscConfig+0x4d8>)
 8000d72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d74:	f003 0302 	and.w	r3, r3, #2
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d1ee      	bne.n	8000d5a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f003 0304 	and.w	r3, r3, #4
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	f000 80a4 	beq.w	8000ed2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d8a:	4b8e      	ldr	r3, [pc, #568]	; (8000fc4 <HAL_RCC_OscConfig+0x4d8>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d10d      	bne.n	8000db2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d96:	4b8b      	ldr	r3, [pc, #556]	; (8000fc4 <HAL_RCC_OscConfig+0x4d8>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9a:	4a8a      	ldr	r2, [pc, #552]	; (8000fc4 <HAL_RCC_OscConfig+0x4d8>)
 8000d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da0:	6413      	str	r3, [r2, #64]	; 0x40
 8000da2:	4b88      	ldr	r3, [pc, #544]	; (8000fc4 <HAL_RCC_OscConfig+0x4d8>)
 8000da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000dae:	2301      	movs	r3, #1
 8000db0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000db2:	4b85      	ldr	r3, [pc, #532]	; (8000fc8 <HAL_RCC_OscConfig+0x4dc>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d118      	bne.n	8000df0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8000dbe:	4b82      	ldr	r3, [pc, #520]	; (8000fc8 <HAL_RCC_OscConfig+0x4dc>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a81      	ldr	r2, [pc, #516]	; (8000fc8 <HAL_RCC_OscConfig+0x4dc>)
 8000dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000dca:	f7ff fbc3 	bl	8000554 <HAL_GetTick>
 8000dce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000dd0:	e008      	b.n	8000de4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000dd2:	f7ff fbbf 	bl	8000554 <HAL_GetTick>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	1ad3      	subs	r3, r2, r3
 8000ddc:	2b64      	cmp	r3, #100	; 0x64
 8000dde:	d901      	bls.n	8000de4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8000de0:	2303      	movs	r3, #3
 8000de2:	e0eb      	b.n	8000fbc <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000de4:	4b78      	ldr	r3, [pc, #480]	; (8000fc8 <HAL_RCC_OscConfig+0x4dc>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d0f0      	beq.n	8000dd2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d106      	bne.n	8000e06 <HAL_RCC_OscConfig+0x31a>
 8000df8:	4b72      	ldr	r3, [pc, #456]	; (8000fc4 <HAL_RCC_OscConfig+0x4d8>)
 8000dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dfc:	4a71      	ldr	r2, [pc, #452]	; (8000fc4 <HAL_RCC_OscConfig+0x4d8>)
 8000dfe:	f043 0301 	orr.w	r3, r3, #1
 8000e02:	6713      	str	r3, [r2, #112]	; 0x70
 8000e04:	e02d      	b.n	8000e62 <HAL_RCC_OscConfig+0x376>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d10c      	bne.n	8000e28 <HAL_RCC_OscConfig+0x33c>
 8000e0e:	4b6d      	ldr	r3, [pc, #436]	; (8000fc4 <HAL_RCC_OscConfig+0x4d8>)
 8000e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e12:	4a6c      	ldr	r2, [pc, #432]	; (8000fc4 <HAL_RCC_OscConfig+0x4d8>)
 8000e14:	f023 0301 	bic.w	r3, r3, #1
 8000e18:	6713      	str	r3, [r2, #112]	; 0x70
 8000e1a:	4b6a      	ldr	r3, [pc, #424]	; (8000fc4 <HAL_RCC_OscConfig+0x4d8>)
 8000e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e1e:	4a69      	ldr	r2, [pc, #420]	; (8000fc4 <HAL_RCC_OscConfig+0x4d8>)
 8000e20:	f023 0304 	bic.w	r3, r3, #4
 8000e24:	6713      	str	r3, [r2, #112]	; 0x70
 8000e26:	e01c      	b.n	8000e62 <HAL_RCC_OscConfig+0x376>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	2b05      	cmp	r3, #5
 8000e2e:	d10c      	bne.n	8000e4a <HAL_RCC_OscConfig+0x35e>
 8000e30:	4b64      	ldr	r3, [pc, #400]	; (8000fc4 <HAL_RCC_OscConfig+0x4d8>)
 8000e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e34:	4a63      	ldr	r2, [pc, #396]	; (8000fc4 <HAL_RCC_OscConfig+0x4d8>)
 8000e36:	f043 0304 	orr.w	r3, r3, #4
 8000e3a:	6713      	str	r3, [r2, #112]	; 0x70
 8000e3c:	4b61      	ldr	r3, [pc, #388]	; (8000fc4 <HAL_RCC_OscConfig+0x4d8>)
 8000e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e40:	4a60      	ldr	r2, [pc, #384]	; (8000fc4 <HAL_RCC_OscConfig+0x4d8>)
 8000e42:	f043 0301 	orr.w	r3, r3, #1
 8000e46:	6713      	str	r3, [r2, #112]	; 0x70
 8000e48:	e00b      	b.n	8000e62 <HAL_RCC_OscConfig+0x376>
 8000e4a:	4b5e      	ldr	r3, [pc, #376]	; (8000fc4 <HAL_RCC_OscConfig+0x4d8>)
 8000e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e4e:	4a5d      	ldr	r2, [pc, #372]	; (8000fc4 <HAL_RCC_OscConfig+0x4d8>)
 8000e50:	f023 0301 	bic.w	r3, r3, #1
 8000e54:	6713      	str	r3, [r2, #112]	; 0x70
 8000e56:	4b5b      	ldr	r3, [pc, #364]	; (8000fc4 <HAL_RCC_OscConfig+0x4d8>)
 8000e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e5a:	4a5a      	ldr	r2, [pc, #360]	; (8000fc4 <HAL_RCC_OscConfig+0x4d8>)
 8000e5c:	f023 0304 	bic.w	r3, r3, #4
 8000e60:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d015      	beq.n	8000e96 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e6a:	f7ff fb73 	bl	8000554 <HAL_GetTick>
 8000e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e70:	e00a      	b.n	8000e88 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e72:	f7ff fb6f 	bl	8000554 <HAL_GetTick>
 8000e76:	4602      	mov	r2, r0
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	1ad3      	subs	r3, r2, r3
 8000e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d901      	bls.n	8000e88 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8000e84:	2303      	movs	r3, #3
 8000e86:	e099      	b.n	8000fbc <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e88:	4b4e      	ldr	r3, [pc, #312]	; (8000fc4 <HAL_RCC_OscConfig+0x4d8>)
 8000e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e8c:	f003 0302 	and.w	r3, r3, #2
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d0ee      	beq.n	8000e72 <HAL_RCC_OscConfig+0x386>
 8000e94:	e014      	b.n	8000ec0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e96:	f7ff fb5d 	bl	8000554 <HAL_GetTick>
 8000e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e9c:	e00a      	b.n	8000eb4 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e9e:	f7ff fb59 	bl	8000554 <HAL_GetTick>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	1ad3      	subs	r3, r2, r3
 8000ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d901      	bls.n	8000eb4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	e083      	b.n	8000fbc <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000eb4:	4b43      	ldr	r3, [pc, #268]	; (8000fc4 <HAL_RCC_OscConfig+0x4d8>)
 8000eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eb8:	f003 0302 	and.w	r3, r3, #2
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d1ee      	bne.n	8000e9e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000ec0:	7dfb      	ldrb	r3, [r7, #23]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d105      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ec6:	4b3f      	ldr	r3, [pc, #252]	; (8000fc4 <HAL_RCC_OscConfig+0x4d8>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eca:	4a3e      	ldr	r2, [pc, #248]	; (8000fc4 <HAL_RCC_OscConfig+0x4d8>)
 8000ecc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ed0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	699b      	ldr	r3, [r3, #24]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d06f      	beq.n	8000fba <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000eda:	4b3a      	ldr	r3, [pc, #232]	; (8000fc4 <HAL_RCC_OscConfig+0x4d8>)
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	f003 030c 	and.w	r3, r3, #12
 8000ee2:	2b08      	cmp	r3, #8
 8000ee4:	d067      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	699b      	ldr	r3, [r3, #24]
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d149      	bne.n	8000f82 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000eee:	4b35      	ldr	r3, [pc, #212]	; (8000fc4 <HAL_RCC_OscConfig+0x4d8>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a34      	ldr	r2, [pc, #208]	; (8000fc4 <HAL_RCC_OscConfig+0x4d8>)
 8000ef4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000ef8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000efa:	f7ff fb2b 	bl	8000554 <HAL_GetTick>
 8000efe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f00:	e008      	b.n	8000f14 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f02:	f7ff fb27 	bl	8000554 <HAL_GetTick>
 8000f06:	4602      	mov	r2, r0
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d901      	bls.n	8000f14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8000f10:	2303      	movs	r3, #3
 8000f12:	e053      	b.n	8000fbc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f14:	4b2b      	ldr	r3, [pc, #172]	; (8000fc4 <HAL_RCC_OscConfig+0x4d8>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d1f0      	bne.n	8000f02 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	69da      	ldr	r2, [r3, #28]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6a1b      	ldr	r3, [r3, #32]
 8000f28:	431a      	orrs	r2, r3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f2e:	019b      	lsls	r3, r3, #6
 8000f30:	431a      	orrs	r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f36:	085b      	lsrs	r3, r3, #1
 8000f38:	3b01      	subs	r3, #1
 8000f3a:	041b      	lsls	r3, r3, #16
 8000f3c:	431a      	orrs	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f42:	061b      	lsls	r3, r3, #24
 8000f44:	4313      	orrs	r3, r2
 8000f46:	4a1f      	ldr	r2, [pc, #124]	; (8000fc4 <HAL_RCC_OscConfig+0x4d8>)
 8000f48:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000f4c:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f4e:	4b1d      	ldr	r3, [pc, #116]	; (8000fc4 <HAL_RCC_OscConfig+0x4d8>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a1c      	ldr	r2, [pc, #112]	; (8000fc4 <HAL_RCC_OscConfig+0x4d8>)
 8000f54:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f5a:	f7ff fafb 	bl	8000554 <HAL_GetTick>
 8000f5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f60:	e008      	b.n	8000f74 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f62:	f7ff faf7 	bl	8000554 <HAL_GetTick>
 8000f66:	4602      	mov	r2, r0
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	1ad3      	subs	r3, r2, r3
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	d901      	bls.n	8000f74 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8000f70:	2303      	movs	r3, #3
 8000f72:	e023      	b.n	8000fbc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f74:	4b13      	ldr	r3, [pc, #76]	; (8000fc4 <HAL_RCC_OscConfig+0x4d8>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d0f0      	beq.n	8000f62 <HAL_RCC_OscConfig+0x476>
 8000f80:	e01b      	b.n	8000fba <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f82:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <HAL_RCC_OscConfig+0x4d8>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a0f      	ldr	r2, [pc, #60]	; (8000fc4 <HAL_RCC_OscConfig+0x4d8>)
 8000f88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f8e:	f7ff fae1 	bl	8000554 <HAL_GetTick>
 8000f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f94:	e008      	b.n	8000fa8 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f96:	f7ff fadd 	bl	8000554 <HAL_GetTick>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	d901      	bls.n	8000fa8 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	e009      	b.n	8000fbc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <HAL_RCC_OscConfig+0x4d8>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d1f0      	bne.n	8000f96 <HAL_RCC_OscConfig+0x4aa>
 8000fb4:	e001      	b.n	8000fba <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e000      	b.n	8000fbc <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8000fba:	2300      	movs	r3, #0
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3718      	adds	r7, #24
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	40007000 	.word	0x40007000

08000fcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d101      	bne.n	8000fe4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e0ce      	b.n	8001182 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000fe4:	4b69      	ldr	r3, [pc, #420]	; (800118c <HAL_RCC_ClockConfig+0x1c0>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f003 030f 	and.w	r3, r3, #15
 8000fec:	683a      	ldr	r2, [r7, #0]
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	d910      	bls.n	8001014 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ff2:	4b66      	ldr	r3, [pc, #408]	; (800118c <HAL_RCC_ClockConfig+0x1c0>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f023 020f 	bic.w	r2, r3, #15
 8000ffa:	4964      	ldr	r1, [pc, #400]	; (800118c <HAL_RCC_ClockConfig+0x1c0>)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001002:	4b62      	ldr	r3, [pc, #392]	; (800118c <HAL_RCC_ClockConfig+0x1c0>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f003 030f 	and.w	r3, r3, #15
 800100a:	683a      	ldr	r2, [r7, #0]
 800100c:	429a      	cmp	r2, r3
 800100e:	d001      	beq.n	8001014 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	e0b6      	b.n	8001182 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f003 0302 	and.w	r3, r3, #2
 800101c:	2b00      	cmp	r3, #0
 800101e:	d020      	beq.n	8001062 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f003 0304 	and.w	r3, r3, #4
 8001028:	2b00      	cmp	r3, #0
 800102a:	d005      	beq.n	8001038 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800102c:	4b58      	ldr	r3, [pc, #352]	; (8001190 <HAL_RCC_ClockConfig+0x1c4>)
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	4a57      	ldr	r2, [pc, #348]	; (8001190 <HAL_RCC_ClockConfig+0x1c4>)
 8001032:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001036:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f003 0308 	and.w	r3, r3, #8
 8001040:	2b00      	cmp	r3, #0
 8001042:	d005      	beq.n	8001050 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001044:	4b52      	ldr	r3, [pc, #328]	; (8001190 <HAL_RCC_ClockConfig+0x1c4>)
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	4a51      	ldr	r2, [pc, #324]	; (8001190 <HAL_RCC_ClockConfig+0x1c4>)
 800104a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800104e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001050:	4b4f      	ldr	r3, [pc, #316]	; (8001190 <HAL_RCC_ClockConfig+0x1c4>)
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	494c      	ldr	r1, [pc, #304]	; (8001190 <HAL_RCC_ClockConfig+0x1c4>)
 800105e:	4313      	orrs	r3, r2
 8001060:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	2b00      	cmp	r3, #0
 800106c:	d040      	beq.n	80010f0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d107      	bne.n	8001086 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001076:	4b46      	ldr	r3, [pc, #280]	; (8001190 <HAL_RCC_ClockConfig+0x1c4>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d115      	bne.n	80010ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e07d      	b.n	8001182 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	2b02      	cmp	r3, #2
 800108c:	d107      	bne.n	800109e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800108e:	4b40      	ldr	r3, [pc, #256]	; (8001190 <HAL_RCC_ClockConfig+0x1c4>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d109      	bne.n	80010ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e071      	b.n	8001182 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800109e:	4b3c      	ldr	r3, [pc, #240]	; (8001190 <HAL_RCC_ClockConfig+0x1c4>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d101      	bne.n	80010ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e069      	b.n	8001182 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010ae:	4b38      	ldr	r3, [pc, #224]	; (8001190 <HAL_RCC_ClockConfig+0x1c4>)
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	f023 0203 	bic.w	r2, r3, #3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	4935      	ldr	r1, [pc, #212]	; (8001190 <HAL_RCC_ClockConfig+0x1c4>)
 80010bc:	4313      	orrs	r3, r2
 80010be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80010c0:	f7ff fa48 	bl	8000554 <HAL_GetTick>
 80010c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010c6:	e00a      	b.n	80010de <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010c8:	f7ff fa44 	bl	8000554 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d901      	bls.n	80010de <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80010da:	2303      	movs	r3, #3
 80010dc:	e051      	b.n	8001182 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010de:	4b2c      	ldr	r3, [pc, #176]	; (8001190 <HAL_RCC_ClockConfig+0x1c4>)
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	f003 020c 	and.w	r2, r3, #12
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d1eb      	bne.n	80010c8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80010f0:	4b26      	ldr	r3, [pc, #152]	; (800118c <HAL_RCC_ClockConfig+0x1c0>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 030f 	and.w	r3, r3, #15
 80010f8:	683a      	ldr	r2, [r7, #0]
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d210      	bcs.n	8001120 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010fe:	4b23      	ldr	r3, [pc, #140]	; (800118c <HAL_RCC_ClockConfig+0x1c0>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f023 020f 	bic.w	r2, r3, #15
 8001106:	4921      	ldr	r1, [pc, #132]	; (800118c <HAL_RCC_ClockConfig+0x1c0>)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	4313      	orrs	r3, r2
 800110c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800110e:	4b1f      	ldr	r3, [pc, #124]	; (800118c <HAL_RCC_ClockConfig+0x1c0>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 030f 	and.w	r3, r3, #15
 8001116:	683a      	ldr	r2, [r7, #0]
 8001118:	429a      	cmp	r2, r3
 800111a:	d001      	beq.n	8001120 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	e030      	b.n	8001182 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 0304 	and.w	r3, r3, #4
 8001128:	2b00      	cmp	r3, #0
 800112a:	d008      	beq.n	800113e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800112c:	4b18      	ldr	r3, [pc, #96]	; (8001190 <HAL_RCC_ClockConfig+0x1c4>)
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	4915      	ldr	r1, [pc, #84]	; (8001190 <HAL_RCC_ClockConfig+0x1c4>)
 800113a:	4313      	orrs	r3, r2
 800113c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0308 	and.w	r3, r3, #8
 8001146:	2b00      	cmp	r3, #0
 8001148:	d009      	beq.n	800115e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800114a:	4b11      	ldr	r3, [pc, #68]	; (8001190 <HAL_RCC_ClockConfig+0x1c4>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	691b      	ldr	r3, [r3, #16]
 8001156:	00db      	lsls	r3, r3, #3
 8001158:	490d      	ldr	r1, [pc, #52]	; (8001190 <HAL_RCC_ClockConfig+0x1c4>)
 800115a:	4313      	orrs	r3, r2
 800115c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800115e:	f000 f81d 	bl	800119c <HAL_RCC_GetSysClockFreq>
 8001162:	4601      	mov	r1, r0
 8001164:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <HAL_RCC_ClockConfig+0x1c4>)
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	091b      	lsrs	r3, r3, #4
 800116a:	f003 030f 	and.w	r3, r3, #15
 800116e:	4a09      	ldr	r2, [pc, #36]	; (8001194 <HAL_RCC_ClockConfig+0x1c8>)
 8001170:	5cd3      	ldrb	r3, [r2, r3]
 8001172:	fa21 f303 	lsr.w	r3, r1, r3
 8001176:	4a08      	ldr	r2, [pc, #32]	; (8001198 <HAL_RCC_ClockConfig+0x1cc>)
 8001178:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800117a:	2000      	movs	r0, #0
 800117c:	f002 f8b6 	bl	80032ec <HAL_InitTick>

  return HAL_OK;
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40023c00 	.word	0x40023c00
 8001190:	40023800 	.word	0x40023800
 8001194:	08003584 	.word	0x08003584
 8001198:	20000008 	.word	0x20000008

0800119c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800119c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	2300      	movs	r3, #0
 80011ac:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011b2:	4b50      	ldr	r3, [pc, #320]	; (80012f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f003 030c 	and.w	r3, r3, #12
 80011ba:	2b04      	cmp	r3, #4
 80011bc:	d007      	beq.n	80011ce <HAL_RCC_GetSysClockFreq+0x32>
 80011be:	2b08      	cmp	r3, #8
 80011c0:	d008      	beq.n	80011d4 <HAL_RCC_GetSysClockFreq+0x38>
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	f040 808d 	bne.w	80012e2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80011c8:	4b4b      	ldr	r3, [pc, #300]	; (80012f8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80011ca:	60bb      	str	r3, [r7, #8]
       break;
 80011cc:	e08c      	b.n	80012e8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80011ce:	4b4b      	ldr	r3, [pc, #300]	; (80012fc <HAL_RCC_GetSysClockFreq+0x160>)
 80011d0:	60bb      	str	r3, [r7, #8]
      break;
 80011d2:	e089      	b.n	80012e8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011d4:	4b47      	ldr	r3, [pc, #284]	; (80012f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011dc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80011de:	4b45      	ldr	r3, [pc, #276]	; (80012f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d023      	beq.n	8001232 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011ea:	4b42      	ldr	r3, [pc, #264]	; (80012f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	099b      	lsrs	r3, r3, #6
 80011f0:	f04f 0400 	mov.w	r4, #0
 80011f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80011f8:	f04f 0200 	mov.w	r2, #0
 80011fc:	ea03 0501 	and.w	r5, r3, r1
 8001200:	ea04 0602 	and.w	r6, r4, r2
 8001204:	4a3d      	ldr	r2, [pc, #244]	; (80012fc <HAL_RCC_GetSysClockFreq+0x160>)
 8001206:	fb02 f106 	mul.w	r1, r2, r6
 800120a:	2200      	movs	r2, #0
 800120c:	fb02 f205 	mul.w	r2, r2, r5
 8001210:	440a      	add	r2, r1
 8001212:	493a      	ldr	r1, [pc, #232]	; (80012fc <HAL_RCC_GetSysClockFreq+0x160>)
 8001214:	fba5 0101 	umull	r0, r1, r5, r1
 8001218:	1853      	adds	r3, r2, r1
 800121a:	4619      	mov	r1, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f04f 0400 	mov.w	r4, #0
 8001222:	461a      	mov	r2, r3
 8001224:	4623      	mov	r3, r4
 8001226:	f7fe fff3 	bl	8000210 <__aeabi_uldivmod>
 800122a:	4603      	mov	r3, r0
 800122c:	460c      	mov	r4, r1
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	e049      	b.n	80012c6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001232:	4b30      	ldr	r3, [pc, #192]	; (80012f4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	099b      	lsrs	r3, r3, #6
 8001238:	f04f 0400 	mov.w	r4, #0
 800123c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001240:	f04f 0200 	mov.w	r2, #0
 8001244:	ea03 0501 	and.w	r5, r3, r1
 8001248:	ea04 0602 	and.w	r6, r4, r2
 800124c:	4629      	mov	r1, r5
 800124e:	4632      	mov	r2, r6
 8001250:	f04f 0300 	mov.w	r3, #0
 8001254:	f04f 0400 	mov.w	r4, #0
 8001258:	0154      	lsls	r4, r2, #5
 800125a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800125e:	014b      	lsls	r3, r1, #5
 8001260:	4619      	mov	r1, r3
 8001262:	4622      	mov	r2, r4
 8001264:	1b49      	subs	r1, r1, r5
 8001266:	eb62 0206 	sbc.w	r2, r2, r6
 800126a:	f04f 0300 	mov.w	r3, #0
 800126e:	f04f 0400 	mov.w	r4, #0
 8001272:	0194      	lsls	r4, r2, #6
 8001274:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001278:	018b      	lsls	r3, r1, #6
 800127a:	1a5b      	subs	r3, r3, r1
 800127c:	eb64 0402 	sbc.w	r4, r4, r2
 8001280:	f04f 0100 	mov.w	r1, #0
 8001284:	f04f 0200 	mov.w	r2, #0
 8001288:	00e2      	lsls	r2, r4, #3
 800128a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800128e:	00d9      	lsls	r1, r3, #3
 8001290:	460b      	mov	r3, r1
 8001292:	4614      	mov	r4, r2
 8001294:	195b      	adds	r3, r3, r5
 8001296:	eb44 0406 	adc.w	r4, r4, r6
 800129a:	f04f 0100 	mov.w	r1, #0
 800129e:	f04f 0200 	mov.w	r2, #0
 80012a2:	02a2      	lsls	r2, r4, #10
 80012a4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80012a8:	0299      	lsls	r1, r3, #10
 80012aa:	460b      	mov	r3, r1
 80012ac:	4614      	mov	r4, r2
 80012ae:	4618      	mov	r0, r3
 80012b0:	4621      	mov	r1, r4
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f04f 0400 	mov.w	r4, #0
 80012b8:	461a      	mov	r2, r3
 80012ba:	4623      	mov	r3, r4
 80012bc:	f7fe ffa8 	bl	8000210 <__aeabi_uldivmod>
 80012c0:	4603      	mov	r3, r0
 80012c2:	460c      	mov	r4, r1
 80012c4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80012c6:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	0c1b      	lsrs	r3, r3, #16
 80012cc:	f003 0303 	and.w	r3, r3, #3
 80012d0:	3301      	adds	r3, #1
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	fbb2 f3f3 	udiv	r3, r2, r3
 80012de:	60bb      	str	r3, [r7, #8]
      break;
 80012e0:	e002      	b.n	80012e8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80012e2:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80012e4:	60bb      	str	r3, [r7, #8]
      break;
 80012e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012e8:	68bb      	ldr	r3, [r7, #8]
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3714      	adds	r7, #20
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40023800 	.word	0x40023800
 80012f8:	00f42400 	.word	0x00f42400
 80012fc:	017d7840 	.word	0x017d7840

08001300 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001304:	4b03      	ldr	r3, [pc, #12]	; (8001314 <HAL_RCC_GetHCLKFreq+0x14>)
 8001306:	681b      	ldr	r3, [r3, #0]
}
 8001308:	4618      	mov	r0, r3
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	20000008 	.word	0x20000008

08001318 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800131c:	f7ff fff0 	bl	8001300 <HAL_RCC_GetHCLKFreq>
 8001320:	4601      	mov	r1, r0
 8001322:	4b05      	ldr	r3, [pc, #20]	; (8001338 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	0a9b      	lsrs	r3, r3, #10
 8001328:	f003 0307 	and.w	r3, r3, #7
 800132c:	4a03      	ldr	r2, [pc, #12]	; (800133c <HAL_RCC_GetPCLK1Freq+0x24>)
 800132e:	5cd3      	ldrb	r3, [r2, r3]
 8001330:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001334:	4618      	mov	r0, r3
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40023800 	.word	0x40023800
 800133c:	08003594 	.word	0x08003594

08001340 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	220f      	movs	r2, #15
 800134e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001350:	4b12      	ldr	r3, [pc, #72]	; (800139c <HAL_RCC_GetClockConfig+0x5c>)
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	f003 0203 	and.w	r2, r3, #3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800135c:	4b0f      	ldr	r3, [pc, #60]	; (800139c <HAL_RCC_GetClockConfig+0x5c>)
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001368:	4b0c      	ldr	r3, [pc, #48]	; (800139c <HAL_RCC_GetClockConfig+0x5c>)
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001374:	4b09      	ldr	r3, [pc, #36]	; (800139c <HAL_RCC_GetClockConfig+0x5c>)
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	08db      	lsrs	r3, r3, #3
 800137a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001382:	4b07      	ldr	r3, [pc, #28]	; (80013a0 <HAL_RCC_GetClockConfig+0x60>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 020f 	and.w	r2, r3, #15
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	601a      	str	r2, [r3, #0]
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	40023800 	.word	0x40023800
 80013a0:	40023c00 	.word	0x40023c00

080013a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d101      	bne.n	80013b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e01d      	b.n	80013f2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d106      	bne.n	80013d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f000 f815 	bl	80013fa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2202      	movs	r2, #2
 80013d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3304      	adds	r3, #4
 80013e0:	4619      	mov	r1, r3
 80013e2:	4610      	mov	r0, r2
 80013e4:	f000 f986 	bl	80016f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2201      	movs	r2, #1
 80013ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80013fa:	b480      	push	{r7}
 80013fc:	b083      	sub	sp, #12
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
	...

08001410 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	68da      	ldr	r2, [r3, #12]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f042 0201 	orr.w	r2, r2, #1
 8001426:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	689a      	ldr	r2, [r3, #8]
 800142e:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <HAL_TIM_Base_Start_IT+0x50>)
 8001430:	4013      	ands	r3, r2
 8001432:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	2b06      	cmp	r3, #6
 8001438:	d00b      	beq.n	8001452 <HAL_TIM_Base_Start_IT+0x42>
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001440:	d007      	beq.n	8001452 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f042 0201 	orr.w	r2, r2, #1
 8001450:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001452:	2300      	movs	r3, #0
}
 8001454:	4618      	mov	r0, r3
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	00010007 	.word	0x00010007

08001464 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	691b      	ldr	r3, [r3, #16]
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b02      	cmp	r3, #2
 8001478:	d122      	bne.n	80014c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	f003 0302 	and.w	r3, r3, #2
 8001484:	2b02      	cmp	r3, #2
 8001486:	d11b      	bne.n	80014c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f06f 0202 	mvn.w	r2, #2
 8001490:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2201      	movs	r2, #1
 8001496:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	f003 0303 	and.w	r3, r3, #3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f000 f905 	bl	80016b6 <HAL_TIM_IC_CaptureCallback>
 80014ac:	e005      	b.n	80014ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f000 f8f7 	bl	80016a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f000 f908 	bl	80016ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	691b      	ldr	r3, [r3, #16]
 80014c6:	f003 0304 	and.w	r3, r3, #4
 80014ca:	2b04      	cmp	r3, #4
 80014cc:	d122      	bne.n	8001514 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	f003 0304 	and.w	r3, r3, #4
 80014d8:	2b04      	cmp	r3, #4
 80014da:	d11b      	bne.n	8001514 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f06f 0204 	mvn.w	r2, #4
 80014e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2202      	movs	r2, #2
 80014ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d003      	beq.n	8001502 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f000 f8db 	bl	80016b6 <HAL_TIM_IC_CaptureCallback>
 8001500:	e005      	b.n	800150e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f000 f8cd 	bl	80016a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f000 f8de 	bl	80016ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	f003 0308 	and.w	r3, r3, #8
 800151e:	2b08      	cmp	r3, #8
 8001520:	d122      	bne.n	8001568 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	f003 0308 	and.w	r3, r3, #8
 800152c:	2b08      	cmp	r3, #8
 800152e:	d11b      	bne.n	8001568 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f06f 0208 	mvn.w	r2, #8
 8001538:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2204      	movs	r2, #4
 800153e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	69db      	ldr	r3, [r3, #28]
 8001546:	f003 0303 	and.w	r3, r3, #3
 800154a:	2b00      	cmp	r3, #0
 800154c:	d003      	beq.n	8001556 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f000 f8b1 	bl	80016b6 <HAL_TIM_IC_CaptureCallback>
 8001554:	e005      	b.n	8001562 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f000 f8a3 	bl	80016a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f000 f8b4 	bl	80016ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	691b      	ldr	r3, [r3, #16]
 800156e:	f003 0310 	and.w	r3, r3, #16
 8001572:	2b10      	cmp	r3, #16
 8001574:	d122      	bne.n	80015bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	f003 0310 	and.w	r3, r3, #16
 8001580:	2b10      	cmp	r3, #16
 8001582:	d11b      	bne.n	80015bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f06f 0210 	mvn.w	r2, #16
 800158c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2208      	movs	r2, #8
 8001592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	69db      	ldr	r3, [r3, #28]
 800159a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d003      	beq.n	80015aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f000 f887 	bl	80016b6 <HAL_TIM_IC_CaptureCallback>
 80015a8:	e005      	b.n	80015b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f000 f879 	bl	80016a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f000 f88a 	bl	80016ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d10e      	bne.n	80015e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d107      	bne.n	80015e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f06f 0201 	mvn.w	r2, #1
 80015e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f001 fe40 	bl	8003268 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	691b      	ldr	r3, [r3, #16]
 80015ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015f2:	2b80      	cmp	r3, #128	; 0x80
 80015f4:	d10e      	bne.n	8001614 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001600:	2b80      	cmp	r3, #128	; 0x80
 8001602:	d107      	bne.n	8001614 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800160c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f000 f91a 	bl	8001848 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800161e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001622:	d10e      	bne.n	8001642 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800162e:	2b80      	cmp	r3, #128	; 0x80
 8001630:	d107      	bne.n	8001642 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800163a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f000 f90d 	bl	800185c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	691b      	ldr	r3, [r3, #16]
 8001648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800164c:	2b40      	cmp	r3, #64	; 0x40
 800164e:	d10e      	bne.n	800166e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800165a:	2b40      	cmp	r3, #64	; 0x40
 800165c:	d107      	bne.n	800166e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001666:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 f838 	bl	80016de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	691b      	ldr	r3, [r3, #16]
 8001674:	f003 0320 	and.w	r3, r3, #32
 8001678:	2b20      	cmp	r3, #32
 800167a:	d10e      	bne.n	800169a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	f003 0320 	and.w	r3, r3, #32
 8001686:	2b20      	cmp	r3, #32
 8001688:	d107      	bne.n	800169a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f06f 0220 	mvn.w	r2, #32
 8001692:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f000 f8cd 	bl	8001834 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016a2:	b480      	push	{r7}
 80016a4:	b083      	sub	sp, #12
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80016b6:	b480      	push	{r7}
 80016b8:	b083      	sub	sp, #12
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80016ca:	b480      	push	{r7}
 80016cc:	b083      	sub	sp, #12
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80016de:	b480      	push	{r7}
 80016e0:	b083      	sub	sp, #12
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80016e6:	bf00      	nop
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
	...

080016f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4a40      	ldr	r2, [pc, #256]	; (8001808 <TIM_Base_SetConfig+0x114>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d013      	beq.n	8001734 <TIM_Base_SetConfig+0x40>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001712:	d00f      	beq.n	8001734 <TIM_Base_SetConfig+0x40>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4a3d      	ldr	r2, [pc, #244]	; (800180c <TIM_Base_SetConfig+0x118>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d00b      	beq.n	8001734 <TIM_Base_SetConfig+0x40>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4a3c      	ldr	r2, [pc, #240]	; (8001810 <TIM_Base_SetConfig+0x11c>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d007      	beq.n	8001734 <TIM_Base_SetConfig+0x40>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4a3b      	ldr	r2, [pc, #236]	; (8001814 <TIM_Base_SetConfig+0x120>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d003      	beq.n	8001734 <TIM_Base_SetConfig+0x40>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4a3a      	ldr	r2, [pc, #232]	; (8001818 <TIM_Base_SetConfig+0x124>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d108      	bne.n	8001746 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800173a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	68fa      	ldr	r2, [r7, #12]
 8001742:	4313      	orrs	r3, r2
 8001744:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a2f      	ldr	r2, [pc, #188]	; (8001808 <TIM_Base_SetConfig+0x114>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d02b      	beq.n	80017a6 <TIM_Base_SetConfig+0xb2>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001754:	d027      	beq.n	80017a6 <TIM_Base_SetConfig+0xb2>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a2c      	ldr	r2, [pc, #176]	; (800180c <TIM_Base_SetConfig+0x118>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d023      	beq.n	80017a6 <TIM_Base_SetConfig+0xb2>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a2b      	ldr	r2, [pc, #172]	; (8001810 <TIM_Base_SetConfig+0x11c>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d01f      	beq.n	80017a6 <TIM_Base_SetConfig+0xb2>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a2a      	ldr	r2, [pc, #168]	; (8001814 <TIM_Base_SetConfig+0x120>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d01b      	beq.n	80017a6 <TIM_Base_SetConfig+0xb2>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a29      	ldr	r2, [pc, #164]	; (8001818 <TIM_Base_SetConfig+0x124>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d017      	beq.n	80017a6 <TIM_Base_SetConfig+0xb2>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a28      	ldr	r2, [pc, #160]	; (800181c <TIM_Base_SetConfig+0x128>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d013      	beq.n	80017a6 <TIM_Base_SetConfig+0xb2>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a27      	ldr	r2, [pc, #156]	; (8001820 <TIM_Base_SetConfig+0x12c>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d00f      	beq.n	80017a6 <TIM_Base_SetConfig+0xb2>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a26      	ldr	r2, [pc, #152]	; (8001824 <TIM_Base_SetConfig+0x130>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d00b      	beq.n	80017a6 <TIM_Base_SetConfig+0xb2>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a25      	ldr	r2, [pc, #148]	; (8001828 <TIM_Base_SetConfig+0x134>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d007      	beq.n	80017a6 <TIM_Base_SetConfig+0xb2>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a24      	ldr	r2, [pc, #144]	; (800182c <TIM_Base_SetConfig+0x138>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d003      	beq.n	80017a6 <TIM_Base_SetConfig+0xb2>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a23      	ldr	r2, [pc, #140]	; (8001830 <TIM_Base_SetConfig+0x13c>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d108      	bne.n	80017b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	695b      	ldr	r3, [r3, #20]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	68fa      	ldr	r2, [r7, #12]
 80017ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	689a      	ldr	r2, [r3, #8]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4a0a      	ldr	r2, [pc, #40]	; (8001808 <TIM_Base_SetConfig+0x114>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d003      	beq.n	80017ec <TIM_Base_SetConfig+0xf8>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a0c      	ldr	r2, [pc, #48]	; (8001818 <TIM_Base_SetConfig+0x124>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d103      	bne.n	80017f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	691a      	ldr	r2, [r3, #16]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2201      	movs	r2, #1
 80017f8:	615a      	str	r2, [r3, #20]
}
 80017fa:	bf00      	nop
 80017fc:	3714      	adds	r7, #20
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	40010000 	.word	0x40010000
 800180c:	40000400 	.word	0x40000400
 8001810:	40000800 	.word	0x40000800
 8001814:	40000c00 	.word	0x40000c00
 8001818:	40010400 	.word	0x40010400
 800181c:	40014000 	.word	0x40014000
 8001820:	40014400 	.word	0x40014400
 8001824:	40014800 	.word	0x40014800
 8001828:	40001800 	.word	0x40001800
 800182c:	40001c00 	.word	0x40001c00
 8001830:	40002000 	.word	0x40002000

08001834 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800187a:	2300      	movs	r3, #0
 800187c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800187e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001882:	2b84      	cmp	r3, #132	; 0x84
 8001884:	d005      	beq.n	8001892 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001886:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	4413      	add	r3, r2
 800188e:	3303      	adds	r3, #3
 8001890:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001892:	68fb      	ldr	r3, [r7, #12]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80018a6:	f3ef 8305 	mrs	r3, IPSR
 80018aa:	607b      	str	r3, [r7, #4]
  return(result);
 80018ac:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	bf14      	ite	ne
 80018b2:	2301      	movne	r3, #1
 80018b4:	2300      	moveq	r3, #0
 80018b6:	b2db      	uxtb	r3, r3
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80018c8:	f001 f82c 	bl	8002924 <vTaskStartScheduler>
  
  return osOK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80018d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018d4:	b087      	sub	sp, #28
 80018d6:	af02      	add	r7, sp, #8
 80018d8:	6078      	str	r0, [r7, #4]
 80018da:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685c      	ldr	r4, [r3, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80018e8:	b29e      	uxth	r6, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff ffbd 	bl	8001870 <makeFreeRtosPriority>
 80018f6:	4602      	mov	r2, r0
 80018f8:	f107 030c 	add.w	r3, r7, #12
 80018fc:	9301      	str	r3, [sp, #4]
 80018fe:	9200      	str	r2, [sp, #0]
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	4632      	mov	r2, r6
 8001904:	4629      	mov	r1, r5
 8001906:	4620      	mov	r0, r4
 8001908:	f000 fd08 	bl	800231c <xTaskCreate>
 800190c:	4603      	mov	r3, r0
 800190e:	2b01      	cmp	r3, #1
 8001910:	d001      	beq.n	8001916 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8001912:	2300      	movs	r3, #0
 8001914:	e000      	b.n	8001918 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8001916:	68fb      	ldr	r3, [r7, #12]
}
 8001918:	4618      	mov	r0, r3
 800191a:	3714      	adds	r7, #20
 800191c:	46bd      	mov	sp, r7
 800191e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001920 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <osDelay+0x16>
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	e000      	b.n	8001938 <osDelay+0x18>
 8001936:	2301      	movs	r3, #1
 8001938:	4618      	mov	r0, r3
 800193a:	f000 fe1b 	bl	8002574 <vTaskDelay>
  
  return osOK;
 800193e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001940:	4618      	mov	r0, r3
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f000 fe45 	bl	80025e0 <vTaskSuspend>
  
  return osOK;
 8001956:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8001958:	4618      	mov	r0, r3
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 8001968:	f7ff ff9a 	bl	80018a0 <inHandlerMode>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d00e      	beq.n	8001990 <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f000 ff62 	bl	800283c <xTaskResumeFromISR>
 8001978:	4603      	mov	r3, r0
 800197a:	2b01      	cmp	r3, #1
 800197c:	d10b      	bne.n	8001996 <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 800197e:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <osThreadResume+0x40>)
 8001980:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	f3bf 8f4f 	dsb	sy
 800198a:	f3bf 8f6f 	isb	sy
 800198e:	e002      	b.n	8001996 <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f000 fef5 	bl	8002780 <vTaskResume>
  }
  return osOK;
 8001996:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8001998:	4618      	mov	r0, r3
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	e000ed04 	.word	0xe000ed04

080019a4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b08a      	sub	sp, #40	; 0x28
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80019b0:	f001 f802 	bl	80029b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80019b4:	4b5a      	ldr	r3, [pc, #360]	; (8001b20 <pvPortMalloc+0x17c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d101      	bne.n	80019c0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80019bc:	f000 f916 	bl	8001bec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80019c0:	4b58      	ldr	r3, [pc, #352]	; (8001b24 <pvPortMalloc+0x180>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4013      	ands	r3, r2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f040 8090 	bne.w	8001aee <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d01e      	beq.n	8001a12 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80019d4:	2208      	movs	r2, #8
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4413      	add	r3, r2
 80019da:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d015      	beq.n	8001a12 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f023 0307 	bic.w	r3, r3, #7
 80019ec:	3308      	adds	r3, #8
 80019ee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f003 0307 	and.w	r3, r3, #7
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00b      	beq.n	8001a12 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80019fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019fe:	b672      	cpsid	i
 8001a00:	f383 8811 	msr	BASEPRI, r3
 8001a04:	f3bf 8f6f 	isb	sy
 8001a08:	f3bf 8f4f 	dsb	sy
 8001a0c:	b662      	cpsie	i
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	e7fe      	b.n	8001a10 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d06a      	beq.n	8001aee <pvPortMalloc+0x14a>
 8001a18:	4b43      	ldr	r3, [pc, #268]	; (8001b28 <pvPortMalloc+0x184>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d865      	bhi.n	8001aee <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001a22:	4b42      	ldr	r3, [pc, #264]	; (8001b2c <pvPortMalloc+0x188>)
 8001a24:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001a26:	4b41      	ldr	r3, [pc, #260]	; (8001b2c <pvPortMalloc+0x188>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001a2c:	e004      	b.n	8001a38 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a30:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d903      	bls.n	8001a4a <pvPortMalloc+0xa6>
 8001a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d1f1      	bne.n	8001a2e <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001a4a:	4b35      	ldr	r3, [pc, #212]	; (8001b20 <pvPortMalloc+0x17c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d04c      	beq.n	8001aee <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001a54:	6a3b      	ldr	r3, [r7, #32]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2208      	movs	r2, #8
 8001a5a:	4413      	add	r3, r2
 8001a5c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	6a3b      	ldr	r3, [r7, #32]
 8001a64:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a68:	685a      	ldr	r2, [r3, #4]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	1ad2      	subs	r2, r2, r3
 8001a6e:	2308      	movs	r3, #8
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d920      	bls.n	8001ab8 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	f003 0307 	and.w	r3, r3, #7
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d00b      	beq.n	8001aa0 <pvPortMalloc+0xfc>
 8001a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a8c:	b672      	cpsid	i
 8001a8e:	f383 8811 	msr	BASEPRI, r3
 8001a92:	f3bf 8f6f 	isb	sy
 8001a96:	f3bf 8f4f 	dsb	sy
 8001a9a:	b662      	cpsie	i
 8001a9c:	613b      	str	r3, [r7, #16]
 8001a9e:	e7fe      	b.n	8001a9e <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa2:	685a      	ldr	r2, [r3, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	1ad2      	subs	r2, r2, r3
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001ab2:	69b8      	ldr	r0, [r7, #24]
 8001ab4:	f000 f8fc 	bl	8001cb0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001ab8:	4b1b      	ldr	r3, [pc, #108]	; (8001b28 <pvPortMalloc+0x184>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	4a19      	ldr	r2, [pc, #100]	; (8001b28 <pvPortMalloc+0x184>)
 8001ac4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001ac6:	4b18      	ldr	r3, [pc, #96]	; (8001b28 <pvPortMalloc+0x184>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	4b19      	ldr	r3, [pc, #100]	; (8001b30 <pvPortMalloc+0x18c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d203      	bcs.n	8001ada <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001ad2:	4b15      	ldr	r3, [pc, #84]	; (8001b28 <pvPortMalloc+0x184>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a16      	ldr	r2, [pc, #88]	; (8001b30 <pvPortMalloc+0x18c>)
 8001ad8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001adc:	685a      	ldr	r2, [r3, #4]
 8001ade:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <pvPortMalloc+0x180>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	431a      	orrs	r2, r3
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001aee:	f000 ff71 	bl	80029d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	f003 0307 	and.w	r3, r3, #7
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d00b      	beq.n	8001b14 <pvPortMalloc+0x170>
 8001afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b00:	b672      	cpsid	i
 8001b02:	f383 8811 	msr	BASEPRI, r3
 8001b06:	f3bf 8f6f 	isb	sy
 8001b0a:	f3bf 8f4f 	dsb	sy
 8001b0e:	b662      	cpsie	i
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	e7fe      	b.n	8001b12 <pvPortMalloc+0x16e>
	return pvReturn;
 8001b14:	69fb      	ldr	r3, [r7, #28]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3728      	adds	r7, #40	; 0x28
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20003c30 	.word	0x20003c30
 8001b24:	20003c3c 	.word	0x20003c3c
 8001b28:	20003c34 	.word	0x20003c34
 8001b2c:	20003c28 	.word	0x20003c28
 8001b30:	20003c38 	.word	0x20003c38

08001b34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d04a      	beq.n	8001bdc <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001b46:	2308      	movs	r3, #8
 8001b48:	425b      	negs	r3, r3
 8001b4a:	697a      	ldr	r2, [r7, #20]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	685a      	ldr	r2, [r3, #4]
 8001b58:	4b22      	ldr	r3, [pc, #136]	; (8001be4 <vPortFree+0xb0>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d10b      	bne.n	8001b7a <vPortFree+0x46>
 8001b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b66:	b672      	cpsid	i
 8001b68:	f383 8811 	msr	BASEPRI, r3
 8001b6c:	f3bf 8f6f 	isb	sy
 8001b70:	f3bf 8f4f 	dsb	sy
 8001b74:	b662      	cpsie	i
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	e7fe      	b.n	8001b78 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d00b      	beq.n	8001b9a <vPortFree+0x66>
 8001b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b86:	b672      	cpsid	i
 8001b88:	f383 8811 	msr	BASEPRI, r3
 8001b8c:	f3bf 8f6f 	isb	sy
 8001b90:	f3bf 8f4f 	dsb	sy
 8001b94:	b662      	cpsie	i
 8001b96:	60bb      	str	r3, [r7, #8]
 8001b98:	e7fe      	b.n	8001b98 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	685a      	ldr	r2, [r3, #4]
 8001b9e:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <vPortFree+0xb0>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d019      	beq.n	8001bdc <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d115      	bne.n	8001bdc <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	685a      	ldr	r2, [r3, #4]
 8001bb4:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <vPortFree+0xb0>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	401a      	ands	r2, r3
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001bc0:	f000 fefa 	bl	80029b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	685a      	ldr	r2, [r3, #4]
 8001bc8:	4b07      	ldr	r3, [pc, #28]	; (8001be8 <vPortFree+0xb4>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4413      	add	r3, r2
 8001bce:	4a06      	ldr	r2, [pc, #24]	; (8001be8 <vPortFree+0xb4>)
 8001bd0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001bd2:	6938      	ldr	r0, [r7, #16]
 8001bd4:	f000 f86c 	bl	8001cb0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001bd8:	f000 fefc 	bl	80029d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001bdc:	bf00      	nop
 8001bde:	3718      	adds	r7, #24
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	20003c3c 	.word	0x20003c3c
 8001be8:	20003c34 	.word	0x20003c34

08001bec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001bf2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001bf6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001bf8:	4b27      	ldr	r3, [pc, #156]	; (8001c98 <prvHeapInit+0xac>)
 8001bfa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00c      	beq.n	8001c20 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	3307      	adds	r3, #7
 8001c0a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f023 0307 	bic.w	r3, r3, #7
 8001c12:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001c14:	68ba      	ldr	r2, [r7, #8]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	4a1f      	ldr	r2, [pc, #124]	; (8001c98 <prvHeapInit+0xac>)
 8001c1c:	4413      	add	r3, r2
 8001c1e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001c24:	4a1d      	ldr	r2, [pc, #116]	; (8001c9c <prvHeapInit+0xb0>)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001c2a:	4b1c      	ldr	r3, [pc, #112]	; (8001c9c <prvHeapInit+0xb0>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	68ba      	ldr	r2, [r7, #8]
 8001c34:	4413      	add	r3, r2
 8001c36:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001c38:	2208      	movs	r2, #8
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	1a9b      	subs	r3, r3, r2
 8001c3e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f023 0307 	bic.w	r3, r3, #7
 8001c46:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	4a15      	ldr	r2, [pc, #84]	; (8001ca0 <prvHeapInit+0xb4>)
 8001c4c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001c4e:	4b14      	ldr	r3, [pc, #80]	; (8001ca0 <prvHeapInit+0xb4>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2200      	movs	r2, #0
 8001c54:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001c56:	4b12      	ldr	r3, [pc, #72]	; (8001ca0 <prvHeapInit+0xb4>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	1ad2      	subs	r2, r2, r3
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001c6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <prvHeapInit+0xb4>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	4a0a      	ldr	r2, [pc, #40]	; (8001ca4 <prvHeapInit+0xb8>)
 8001c7a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	4a09      	ldr	r2, [pc, #36]	; (8001ca8 <prvHeapInit+0xbc>)
 8001c82:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001c84:	4b09      	ldr	r3, [pc, #36]	; (8001cac <prvHeapInit+0xc0>)
 8001c86:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001c8a:	601a      	str	r2, [r3, #0]
}
 8001c8c:	bf00      	nop
 8001c8e:	3714      	adds	r7, #20
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	20000028 	.word	0x20000028
 8001c9c:	20003c28 	.word	0x20003c28
 8001ca0:	20003c30 	.word	0x20003c30
 8001ca4:	20003c38 	.word	0x20003c38
 8001ca8:	20003c34 	.word	0x20003c34
 8001cac:	20003c3c 	.word	0x20003c3c

08001cb0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001cb8:	4b28      	ldr	r3, [pc, #160]	; (8001d5c <prvInsertBlockIntoFreeList+0xac>)
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	e002      	b.n	8001cc4 <prvInsertBlockIntoFreeList+0x14>
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d8f7      	bhi.n	8001cbe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	68ba      	ldr	r2, [r7, #8]
 8001cd8:	4413      	add	r3, r2
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d108      	bne.n	8001cf2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	685a      	ldr	r2, [r3, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	441a      	add	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	68ba      	ldr	r2, [r7, #8]
 8001cfc:	441a      	add	r2, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d118      	bne.n	8001d38 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	4b15      	ldr	r3, [pc, #84]	; (8001d60 <prvInsertBlockIntoFreeList+0xb0>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d00d      	beq.n	8001d2e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685a      	ldr	r2, [r3, #4]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	441a      	add	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	e008      	b.n	8001d40 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001d2e:	4b0c      	ldr	r3, [pc, #48]	; (8001d60 <prvInsertBlockIntoFreeList+0xb0>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	e003      	b.n	8001d40 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d002      	beq.n	8001d4e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001d4e:	bf00      	nop
 8001d50:	3714      	adds	r7, #20
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	20003c28 	.word	0x20003c28
 8001d60:	20003c30 	.word	0x20003c30

08001d64 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f103 0208 	add.w	r2, r3, #8
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f04f 32ff 	mov.w	r2, #4294967295
 8001d7c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f103 0208 	add.w	r2, r3, #8
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f103 0208 	add.w	r2, r3, #8
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b085      	sub	sp, #20
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
 8001dc6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	689a      	ldr	r2, [r3, #8]
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	683a      	ldr	r2, [r7, #0]
 8001de8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	1c5a      	adds	r2, r3, #1
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	601a      	str	r2, [r3, #0]
}
 8001dfa:	bf00      	nop
 8001dfc:	3714      	adds	r7, #20
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr

08001e06 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001e06:	b480      	push	{r7}
 8001e08:	b085      	sub	sp, #20
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
 8001e0e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e1c:	d103      	bne.n	8001e26 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	e00c      	b.n	8001e40 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	3308      	adds	r3, #8
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	e002      	b.n	8001e34 <vListInsert+0x2e>
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	68ba      	ldr	r2, [r7, #8]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d2f6      	bcs.n	8001e2e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	685a      	ldr	r2, [r3, #4]
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	1c5a      	adds	r2, r3, #1
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	601a      	str	r2, [r3, #0]
}
 8001e6c:	bf00      	nop
 8001e6e:	3714      	adds	r7, #20
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	6892      	ldr	r2, [r2, #8]
 8001e8e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	6852      	ldr	r2, [r2, #4]
 8001e98:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d103      	bne.n	8001eac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	1e5a      	subs	r2, r3, #1
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3714      	adds	r7, #20
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	3b04      	subs	r3, #4
 8001edc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ee4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	3b04      	subs	r3, #4
 8001eea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	f023 0201 	bic.w	r2, r3, #1
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	3b04      	subs	r3, #4
 8001efa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001efc:	4a0c      	ldr	r2, [pc, #48]	; (8001f30 <pxPortInitialiseStack+0x64>)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	3b14      	subs	r3, #20
 8001f06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	3b04      	subs	r3, #4
 8001f12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f06f 0202 	mvn.w	r2, #2
 8001f1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	3b20      	subs	r3, #32
 8001f20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8001f22:	68fb      	ldr	r3, [r7, #12]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3714      	adds	r7, #20
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	08001f35 	.word	0x08001f35

08001f34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001f3e:	4b13      	ldr	r3, [pc, #76]	; (8001f8c <prvTaskExitError+0x58>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f46:	d00b      	beq.n	8001f60 <prvTaskExitError+0x2c>
 8001f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f4c:	b672      	cpsid	i
 8001f4e:	f383 8811 	msr	BASEPRI, r3
 8001f52:	f3bf 8f6f 	isb	sy
 8001f56:	f3bf 8f4f 	dsb	sy
 8001f5a:	b662      	cpsie	i
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	e7fe      	b.n	8001f5e <prvTaskExitError+0x2a>
 8001f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f64:	b672      	cpsid	i
 8001f66:	f383 8811 	msr	BASEPRI, r3
 8001f6a:	f3bf 8f6f 	isb	sy
 8001f6e:	f3bf 8f4f 	dsb	sy
 8001f72:	b662      	cpsie	i
 8001f74:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8001f76:	bf00      	nop
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d0fc      	beq.n	8001f78 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8001f7e:	bf00      	nop
 8001f80:	3714      	adds	r7, #20
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	20000004 	.word	0x20000004

08001f90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001f90:	4b07      	ldr	r3, [pc, #28]	; (8001fb0 <pxCurrentTCBConst2>)
 8001f92:	6819      	ldr	r1, [r3, #0]
 8001f94:	6808      	ldr	r0, [r1, #0]
 8001f96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f9a:	f380 8809 	msr	PSP, r0
 8001f9e:	f3bf 8f6f 	isb	sy
 8001fa2:	f04f 0000 	mov.w	r0, #0
 8001fa6:	f380 8811 	msr	BASEPRI, r0
 8001faa:	4770      	bx	lr
 8001fac:	f3af 8000 	nop.w

08001fb0 <pxCurrentTCBConst2>:
 8001fb0:	20003c48 	.word	0x20003c48
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8001fb4:	bf00      	nop
 8001fb6:	bf00      	nop

08001fb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8001fb8:	4808      	ldr	r0, [pc, #32]	; (8001fdc <prvPortStartFirstTask+0x24>)
 8001fba:	6800      	ldr	r0, [r0, #0]
 8001fbc:	6800      	ldr	r0, [r0, #0]
 8001fbe:	f380 8808 	msr	MSP, r0
 8001fc2:	f04f 0000 	mov.w	r0, #0
 8001fc6:	f380 8814 	msr	CONTROL, r0
 8001fca:	b662      	cpsie	i
 8001fcc:	b661      	cpsie	f
 8001fce:	f3bf 8f4f 	dsb	sy
 8001fd2:	f3bf 8f6f 	isb	sy
 8001fd6:	df00      	svc	0
 8001fd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8001fda:	bf00      	nop
 8001fdc:	e000ed08 	.word	0xe000ed08

08001fe0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8001fe6:	4b36      	ldr	r3, [pc, #216]	; (80020c0 <xPortStartScheduler+0xe0>)
 8001fe8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	22ff      	movs	r2, #255	; 0xff
 8001ff6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002000:	78fb      	ldrb	r3, [r7, #3]
 8002002:	b2db      	uxtb	r3, r3
 8002004:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002008:	b2da      	uxtb	r2, r3
 800200a:	4b2e      	ldr	r3, [pc, #184]	; (80020c4 <xPortStartScheduler+0xe4>)
 800200c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800200e:	4b2e      	ldr	r3, [pc, #184]	; (80020c8 <xPortStartScheduler+0xe8>)
 8002010:	2207      	movs	r2, #7
 8002012:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002014:	e009      	b.n	800202a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8002016:	4b2c      	ldr	r3, [pc, #176]	; (80020c8 <xPortStartScheduler+0xe8>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	3b01      	subs	r3, #1
 800201c:	4a2a      	ldr	r2, [pc, #168]	; (80020c8 <xPortStartScheduler+0xe8>)
 800201e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002020:	78fb      	ldrb	r3, [r7, #3]
 8002022:	b2db      	uxtb	r3, r3
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	b2db      	uxtb	r3, r3
 8002028:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800202a:	78fb      	ldrb	r3, [r7, #3]
 800202c:	b2db      	uxtb	r3, r3
 800202e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002032:	2b80      	cmp	r3, #128	; 0x80
 8002034:	d0ef      	beq.n	8002016 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002036:	4b24      	ldr	r3, [pc, #144]	; (80020c8 <xPortStartScheduler+0xe8>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f1c3 0307 	rsb	r3, r3, #7
 800203e:	2b04      	cmp	r3, #4
 8002040:	d00b      	beq.n	800205a <xPortStartScheduler+0x7a>
 8002042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002046:	b672      	cpsid	i
 8002048:	f383 8811 	msr	BASEPRI, r3
 800204c:	f3bf 8f6f 	isb	sy
 8002050:	f3bf 8f4f 	dsb	sy
 8002054:	b662      	cpsie	i
 8002056:	60bb      	str	r3, [r7, #8]
 8002058:	e7fe      	b.n	8002058 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800205a:	4b1b      	ldr	r3, [pc, #108]	; (80020c8 <xPortStartScheduler+0xe8>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	021b      	lsls	r3, r3, #8
 8002060:	4a19      	ldr	r2, [pc, #100]	; (80020c8 <xPortStartScheduler+0xe8>)
 8002062:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002064:	4b18      	ldr	r3, [pc, #96]	; (80020c8 <xPortStartScheduler+0xe8>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800206c:	4a16      	ldr	r2, [pc, #88]	; (80020c8 <xPortStartScheduler+0xe8>)
 800206e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	b2da      	uxtb	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002078:	4b14      	ldr	r3, [pc, #80]	; (80020cc <xPortStartScheduler+0xec>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a13      	ldr	r2, [pc, #76]	; (80020cc <xPortStartScheduler+0xec>)
 800207e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002082:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002084:	4b11      	ldr	r3, [pc, #68]	; (80020cc <xPortStartScheduler+0xec>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a10      	ldr	r2, [pc, #64]	; (80020cc <xPortStartScheduler+0xec>)
 800208a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800208e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002090:	f000 f8d4 	bl	800223c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002094:	4b0e      	ldr	r3, [pc, #56]	; (80020d0 <xPortStartScheduler+0xf0>)
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800209a:	f000 f8f3 	bl	8002284 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800209e:	4b0d      	ldr	r3, [pc, #52]	; (80020d4 <xPortStartScheduler+0xf4>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a0c      	ldr	r2, [pc, #48]	; (80020d4 <xPortStartScheduler+0xf4>)
 80020a4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80020a8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80020aa:	f7ff ff85 	bl	8001fb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80020ae:	f000 fded 	bl	8002c8c <vTaskSwitchContext>
	prvTaskExitError();
 80020b2:	f7ff ff3f 	bl	8001f34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	e000e400 	.word	0xe000e400
 80020c4:	20003c40 	.word	0x20003c40
 80020c8:	20003c44 	.word	0x20003c44
 80020cc:	e000ed20 	.word	0xe000ed20
 80020d0:	20000004 	.word	0x20000004
 80020d4:	e000ef34 	.word	0xe000ef34

080020d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020e2:	b672      	cpsid	i
 80020e4:	f383 8811 	msr	BASEPRI, r3
 80020e8:	f3bf 8f6f 	isb	sy
 80020ec:	f3bf 8f4f 	dsb	sy
 80020f0:	b662      	cpsie	i
 80020f2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80020f4:	4b0f      	ldr	r3, [pc, #60]	; (8002134 <vPortEnterCritical+0x5c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	3301      	adds	r3, #1
 80020fa:	4a0e      	ldr	r2, [pc, #56]	; (8002134 <vPortEnterCritical+0x5c>)
 80020fc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80020fe:	4b0d      	ldr	r3, [pc, #52]	; (8002134 <vPortEnterCritical+0x5c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d110      	bne.n	8002128 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002106:	4b0c      	ldr	r3, [pc, #48]	; (8002138 <vPortEnterCritical+0x60>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00b      	beq.n	8002128 <vPortEnterCritical+0x50>
 8002110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002114:	b672      	cpsid	i
 8002116:	f383 8811 	msr	BASEPRI, r3
 800211a:	f3bf 8f6f 	isb	sy
 800211e:	f3bf 8f4f 	dsb	sy
 8002122:	b662      	cpsie	i
 8002124:	603b      	str	r3, [r7, #0]
 8002126:	e7fe      	b.n	8002126 <vPortEnterCritical+0x4e>
	}
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	20000004 	.word	0x20000004
 8002138:	e000ed04 	.word	0xe000ed04

0800213c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002142:	4b12      	ldr	r3, [pc, #72]	; (800218c <vPortExitCritical+0x50>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d10b      	bne.n	8002162 <vPortExitCritical+0x26>
 800214a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800214e:	b672      	cpsid	i
 8002150:	f383 8811 	msr	BASEPRI, r3
 8002154:	f3bf 8f6f 	isb	sy
 8002158:	f3bf 8f4f 	dsb	sy
 800215c:	b662      	cpsie	i
 800215e:	607b      	str	r3, [r7, #4]
 8002160:	e7fe      	b.n	8002160 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8002162:	4b0a      	ldr	r3, [pc, #40]	; (800218c <vPortExitCritical+0x50>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	3b01      	subs	r3, #1
 8002168:	4a08      	ldr	r2, [pc, #32]	; (800218c <vPortExitCritical+0x50>)
 800216a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800216c:	4b07      	ldr	r3, [pc, #28]	; (800218c <vPortExitCritical+0x50>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d104      	bne.n	800217e <vPortExitCritical+0x42>
 8002174:	2300      	movs	r3, #0
 8002176:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800217e:	bf00      	nop
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	20000004 	.word	0x20000004

08002190 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002190:	f3ef 8009 	mrs	r0, PSP
 8002194:	f3bf 8f6f 	isb	sy
 8002198:	4b15      	ldr	r3, [pc, #84]	; (80021f0 <pxCurrentTCBConst>)
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	f01e 0f10 	tst.w	lr, #16
 80021a0:	bf08      	it	eq
 80021a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80021a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021aa:	6010      	str	r0, [r2, #0]
 80021ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80021b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80021b4:	b672      	cpsid	i
 80021b6:	f380 8811 	msr	BASEPRI, r0
 80021ba:	f3bf 8f4f 	dsb	sy
 80021be:	f3bf 8f6f 	isb	sy
 80021c2:	b662      	cpsie	i
 80021c4:	f000 fd62 	bl	8002c8c <vTaskSwitchContext>
 80021c8:	f04f 0000 	mov.w	r0, #0
 80021cc:	f380 8811 	msr	BASEPRI, r0
 80021d0:	bc09      	pop	{r0, r3}
 80021d2:	6819      	ldr	r1, [r3, #0]
 80021d4:	6808      	ldr	r0, [r1, #0]
 80021d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021da:	f01e 0f10 	tst.w	lr, #16
 80021de:	bf08      	it	eq
 80021e0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80021e4:	f380 8809 	msr	PSP, r0
 80021e8:	f3bf 8f6f 	isb	sy
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop

080021f0 <pxCurrentTCBConst>:
 80021f0:	20003c48 	.word	0x20003c48
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80021f4:	bf00      	nop
 80021f6:	bf00      	nop

080021f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
	__asm volatile
 80021fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002202:	b672      	cpsid	i
 8002204:	f383 8811 	msr	BASEPRI, r3
 8002208:	f3bf 8f6f 	isb	sy
 800220c:	f3bf 8f4f 	dsb	sy
 8002210:	b662      	cpsie	i
 8002212:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002214:	f000 fc7c 	bl	8002b10 <xTaskIncrementTick>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800221e:	4b06      	ldr	r3, [pc, #24]	; (8002238 <SysTick_Handler+0x40>)
 8002220:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	2300      	movs	r3, #0
 8002228:	603b      	str	r3, [r7, #0]
	__asm volatile
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8002230:	bf00      	nop
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	e000ed04 	.word	0xe000ed04

0800223c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002240:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <vPortSetupTimerInterrupt+0x34>)
 8002242:	2200      	movs	r2, #0
 8002244:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002246:	4b0b      	ldr	r3, [pc, #44]	; (8002274 <vPortSetupTimerInterrupt+0x38>)
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800224c:	4b0a      	ldr	r3, [pc, #40]	; (8002278 <vPortSetupTimerInterrupt+0x3c>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a0a      	ldr	r2, [pc, #40]	; (800227c <vPortSetupTimerInterrupt+0x40>)
 8002252:	fba2 2303 	umull	r2, r3, r2, r3
 8002256:	099b      	lsrs	r3, r3, #6
 8002258:	4a09      	ldr	r2, [pc, #36]	; (8002280 <vPortSetupTimerInterrupt+0x44>)
 800225a:	3b01      	subs	r3, #1
 800225c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800225e:	4b04      	ldr	r3, [pc, #16]	; (8002270 <vPortSetupTimerInterrupt+0x34>)
 8002260:	2207      	movs	r2, #7
 8002262:	601a      	str	r2, [r3, #0]
}
 8002264:	bf00      	nop
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	e000e010 	.word	0xe000e010
 8002274:	e000e018 	.word	0xe000e018
 8002278:	20000008 	.word	0x20000008
 800227c:	10624dd3 	.word	0x10624dd3
 8002280:	e000e014 	.word	0xe000e014

08002284 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002284:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002294 <vPortEnableVFP+0x10>
 8002288:	6801      	ldr	r1, [r0, #0]
 800228a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800228e:	6001      	str	r1, [r0, #0]
 8002290:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002292:	bf00      	nop
 8002294:	e000ed88 	.word	0xe000ed88

08002298 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800229e:	f3ef 8305 	mrs	r3, IPSR
 80022a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2b0f      	cmp	r3, #15
 80022a8:	d915      	bls.n	80022d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80022aa:	4a18      	ldr	r2, [pc, #96]	; (800230c <vPortValidateInterruptPriority+0x74>)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	4413      	add	r3, r2
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80022b4:	4b16      	ldr	r3, [pc, #88]	; (8002310 <vPortValidateInterruptPriority+0x78>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	7afa      	ldrb	r2, [r7, #11]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d20b      	bcs.n	80022d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80022be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022c2:	b672      	cpsid	i
 80022c4:	f383 8811 	msr	BASEPRI, r3
 80022c8:	f3bf 8f6f 	isb	sy
 80022cc:	f3bf 8f4f 	dsb	sy
 80022d0:	b662      	cpsie	i
 80022d2:	607b      	str	r3, [r7, #4]
 80022d4:	e7fe      	b.n	80022d4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80022d6:	4b0f      	ldr	r3, [pc, #60]	; (8002314 <vPortValidateInterruptPriority+0x7c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80022de:	4b0e      	ldr	r3, [pc, #56]	; (8002318 <vPortValidateInterruptPriority+0x80>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d90b      	bls.n	80022fe <vPortValidateInterruptPriority+0x66>
 80022e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ea:	b672      	cpsid	i
 80022ec:	f383 8811 	msr	BASEPRI, r3
 80022f0:	f3bf 8f6f 	isb	sy
 80022f4:	f3bf 8f4f 	dsb	sy
 80022f8:	b662      	cpsie	i
 80022fa:	603b      	str	r3, [r7, #0]
 80022fc:	e7fe      	b.n	80022fc <vPortValidateInterruptPriority+0x64>
	}
 80022fe:	bf00      	nop
 8002300:	3714      	adds	r7, #20
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	e000e3f0 	.word	0xe000e3f0
 8002310:	20003c40 	.word	0x20003c40
 8002314:	e000ed0c 	.word	0xe000ed0c
 8002318:	20003c44 	.word	0x20003c44

0800231c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800231c:	b580      	push	{r7, lr}
 800231e:	b08c      	sub	sp, #48	; 0x30
 8002320:	af04      	add	r7, sp, #16
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	603b      	str	r3, [r7, #0]
 8002328:	4613      	mov	r3, r2
 800232a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800232c:	88fb      	ldrh	r3, [r7, #6]
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff fb37 	bl	80019a4 <pvPortMalloc>
 8002336:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00e      	beq.n	800235c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800233e:	2054      	movs	r0, #84	; 0x54
 8002340:	f7ff fb30 	bl	80019a4 <pvPortMalloc>
 8002344:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d003      	beq.n	8002354 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	631a      	str	r2, [r3, #48]	; 0x30
 8002352:	e005      	b.n	8002360 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002354:	6978      	ldr	r0, [r7, #20]
 8002356:	f7ff fbed 	bl	8001b34 <vPortFree>
 800235a:	e001      	b.n	8002360 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800235c:	2300      	movs	r3, #0
 800235e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d013      	beq.n	800238e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002366:	88fa      	ldrh	r2, [r7, #6]
 8002368:	2300      	movs	r3, #0
 800236a:	9303      	str	r3, [sp, #12]
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	9302      	str	r3, [sp, #8]
 8002370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002372:	9301      	str	r3, [sp, #4]
 8002374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	68b9      	ldr	r1, [r7, #8]
 800237c:	68f8      	ldr	r0, [r7, #12]
 800237e:	f000 f80e 	bl	800239e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002382:	69f8      	ldr	r0, [r7, #28]
 8002384:	f000 f88c 	bl	80024a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002388:	2301      	movs	r3, #1
 800238a:	61bb      	str	r3, [r7, #24]
 800238c:	e002      	b.n	8002394 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800238e:	f04f 33ff 	mov.w	r3, #4294967295
 8002392:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002394:	69bb      	ldr	r3, [r7, #24]
	}
 8002396:	4618      	mov	r0, r3
 8002398:	3720      	adds	r7, #32
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b088      	sub	sp, #32
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	60f8      	str	r0, [r7, #12]
 80023a6:	60b9      	str	r1, [r7, #8]
 80023a8:	607a      	str	r2, [r7, #4]
 80023aa:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80023ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023b0:	6879      	ldr	r1, [r7, #4]
 80023b2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80023b6:	440b      	add	r3, r1
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4413      	add	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	f023 0307 	bic.w	r3, r3, #7
 80023c4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	f003 0307 	and.w	r3, r3, #7
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d00b      	beq.n	80023e8 <prvInitialiseNewTask+0x4a>
 80023d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023d4:	b672      	cpsid	i
 80023d6:	f383 8811 	msr	BASEPRI, r3
 80023da:	f3bf 8f6f 	isb	sy
 80023de:	f3bf 8f4f 	dsb	sy
 80023e2:	b662      	cpsie	i
 80023e4:	617b      	str	r3, [r7, #20]
 80023e6:	e7fe      	b.n	80023e6 <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80023e8:	2300      	movs	r3, #0
 80023ea:	61fb      	str	r3, [r7, #28]
 80023ec:	e012      	b.n	8002414 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80023ee:	68ba      	ldr	r2, [r7, #8]
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	4413      	add	r3, r2
 80023f4:	7819      	ldrb	r1, [r3, #0]
 80023f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	4413      	add	r3, r2
 80023fc:	3334      	adds	r3, #52	; 0x34
 80023fe:	460a      	mov	r2, r1
 8002400:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002402:	68ba      	ldr	r2, [r7, #8]
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	4413      	add	r3, r2
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d006      	beq.n	800241c <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	3301      	adds	r3, #1
 8002412:	61fb      	str	r3, [r7, #28]
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	2b0f      	cmp	r3, #15
 8002418:	d9e9      	bls.n	80023ee <prvInitialiseNewTask+0x50>
 800241a:	e000      	b.n	800241e <prvInitialiseNewTask+0x80>
		{
			break;
 800241c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800241e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002428:	2b06      	cmp	r3, #6
 800242a:	d901      	bls.n	8002430 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800242c:	2306      	movs	r3, #6
 800242e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002432:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002434:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002438:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800243a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800243c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800243e:	2200      	movs	r2, #0
 8002440:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002444:	3304      	adds	r3, #4
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff fcac 	bl	8001da4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800244c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800244e:	3318      	adds	r3, #24
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff fca7 	bl	8001da4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002458:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800245a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800245c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800245e:	f1c3 0207 	rsb	r2, r3, #7
 8002462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002464:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800246a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800246c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800246e:	2200      	movs	r2, #0
 8002470:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002474:	2200      	movs	r2, #0
 8002476:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	68f9      	ldr	r1, [r7, #12]
 800247e:	69b8      	ldr	r0, [r7, #24]
 8002480:	f7ff fd24 	bl	8001ecc <pxPortInitialiseStack>
 8002484:	4602      	mov	r2, r0
 8002486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002488:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800248a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800248c:	2b00      	cmp	r3, #0
 800248e:	d002      	beq.n	8002496 <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002492:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002494:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002496:	bf00      	nop
 8002498:	3720      	adds	r7, #32
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
	...

080024a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80024a8:	f7ff fe16 	bl	80020d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80024ac:	4b2a      	ldr	r3, [pc, #168]	; (8002558 <prvAddNewTaskToReadyList+0xb8>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	3301      	adds	r3, #1
 80024b2:	4a29      	ldr	r2, [pc, #164]	; (8002558 <prvAddNewTaskToReadyList+0xb8>)
 80024b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80024b6:	4b29      	ldr	r3, [pc, #164]	; (800255c <prvAddNewTaskToReadyList+0xbc>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d109      	bne.n	80024d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80024be:	4a27      	ldr	r2, [pc, #156]	; (800255c <prvAddNewTaskToReadyList+0xbc>)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80024c4:	4b24      	ldr	r3, [pc, #144]	; (8002558 <prvAddNewTaskToReadyList+0xb8>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d110      	bne.n	80024ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80024cc:	f000 fc52 	bl	8002d74 <prvInitialiseTaskLists>
 80024d0:	e00d      	b.n	80024ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80024d2:	4b23      	ldr	r3, [pc, #140]	; (8002560 <prvAddNewTaskToReadyList+0xc0>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d109      	bne.n	80024ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80024da:	4b20      	ldr	r3, [pc, #128]	; (800255c <prvAddNewTaskToReadyList+0xbc>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d802      	bhi.n	80024ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80024e8:	4a1c      	ldr	r2, [pc, #112]	; (800255c <prvAddNewTaskToReadyList+0xbc>)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80024ee:	4b1d      	ldr	r3, [pc, #116]	; (8002564 <prvAddNewTaskToReadyList+0xc4>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	3301      	adds	r3, #1
 80024f4:	4a1b      	ldr	r2, [pc, #108]	; (8002564 <prvAddNewTaskToReadyList+0xc4>)
 80024f6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fc:	2201      	movs	r2, #1
 80024fe:	409a      	lsls	r2, r3
 8002500:	4b19      	ldr	r3, [pc, #100]	; (8002568 <prvAddNewTaskToReadyList+0xc8>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4313      	orrs	r3, r2
 8002506:	4a18      	ldr	r2, [pc, #96]	; (8002568 <prvAddNewTaskToReadyList+0xc8>)
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800250e:	4613      	mov	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	4413      	add	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	4a15      	ldr	r2, [pc, #84]	; (800256c <prvAddNewTaskToReadyList+0xcc>)
 8002518:	441a      	add	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	3304      	adds	r3, #4
 800251e:	4619      	mov	r1, r3
 8002520:	4610      	mov	r0, r2
 8002522:	f7ff fc4c 	bl	8001dbe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002526:	f7ff fe09 	bl	800213c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800252a:	4b0d      	ldr	r3, [pc, #52]	; (8002560 <prvAddNewTaskToReadyList+0xc0>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00e      	beq.n	8002550 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002532:	4b0a      	ldr	r3, [pc, #40]	; (800255c <prvAddNewTaskToReadyList+0xbc>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253c:	429a      	cmp	r2, r3
 800253e:	d207      	bcs.n	8002550 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002540:	4b0b      	ldr	r3, [pc, #44]	; (8002570 <prvAddNewTaskToReadyList+0xd0>)
 8002542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	f3bf 8f4f 	dsb	sy
 800254c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002550:	bf00      	nop
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	20003d48 	.word	0x20003d48
 800255c:	20003c48 	.word	0x20003c48
 8002560:	20003d54 	.word	0x20003d54
 8002564:	20003d64 	.word	0x20003d64
 8002568:	20003d50 	.word	0x20003d50
 800256c:	20003c4c 	.word	0x20003c4c
 8002570:	e000ed04 	.word	0xe000ed04

08002574 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800257c:	2300      	movs	r3, #0
 800257e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d018      	beq.n	80025b8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002586:	4b14      	ldr	r3, [pc, #80]	; (80025d8 <vTaskDelay+0x64>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00b      	beq.n	80025a6 <vTaskDelay+0x32>
 800258e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002592:	b672      	cpsid	i
 8002594:	f383 8811 	msr	BASEPRI, r3
 8002598:	f3bf 8f6f 	isb	sy
 800259c:	f3bf 8f4f 	dsb	sy
 80025a0:	b662      	cpsie	i
 80025a2:	60bb      	str	r3, [r7, #8]
 80025a4:	e7fe      	b.n	80025a4 <vTaskDelay+0x30>
			vTaskSuspendAll();
 80025a6:	f000 fa07 	bl	80029b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80025aa:	2100      	movs	r1, #0
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 fc83 	bl	8002eb8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80025b2:	f000 fa0f 	bl	80029d4 <xTaskResumeAll>
 80025b6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d107      	bne.n	80025ce <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80025be:	4b07      	ldr	r3, [pc, #28]	; (80025dc <vTaskDelay+0x68>)
 80025c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	f3bf 8f4f 	dsb	sy
 80025ca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80025ce:	bf00      	nop
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	20003d70 	.word	0x20003d70
 80025dc:	e000ed04 	.word	0xe000ed04

080025e0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80025e8:	f7ff fd76 	bl	80020d8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d102      	bne.n	80025f8 <vTaskSuspend+0x18>
 80025f2:	4b3d      	ldr	r3, [pc, #244]	; (80026e8 <vTaskSuspend+0x108>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	e000      	b.n	80025fa <vTaskSuspend+0x1a>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	3304      	adds	r3, #4
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff fc39 	bl	8001e78 <uxListRemove>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d115      	bne.n	8002638 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002610:	4936      	ldr	r1, [pc, #216]	; (80026ec <vTaskSuspend+0x10c>)
 8002612:	4613      	mov	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4413      	add	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	440b      	add	r3, r1
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10a      	bne.n	8002638 <vTaskSuspend+0x58>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002626:	2201      	movs	r2, #1
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	43da      	mvns	r2, r3
 800262e:	4b30      	ldr	r3, [pc, #192]	; (80026f0 <vTaskSuspend+0x110>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4013      	ands	r3, r2
 8002634:	4a2e      	ldr	r2, [pc, #184]	; (80026f0 <vTaskSuspend+0x110>)
 8002636:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263c:	2b00      	cmp	r3, #0
 800263e:	d004      	beq.n	800264a <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	3318      	adds	r3, #24
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff fc17 	bl	8001e78 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	3304      	adds	r3, #4
 800264e:	4619      	mov	r1, r3
 8002650:	4828      	ldr	r0, [pc, #160]	; (80026f4 <vTaskSuspend+0x114>)
 8002652:	f7ff fbb4 	bl	8001dbe <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b01      	cmp	r3, #1
 8002660:	d103      	bne.n	800266a <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800266a:	f7ff fd67 	bl	800213c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800266e:	4b22      	ldr	r3, [pc, #136]	; (80026f8 <vTaskSuspend+0x118>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d005      	beq.n	8002682 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8002676:	f7ff fd2f 	bl	80020d8 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800267a:	f000 fbf7 	bl	8002e6c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800267e:	f7ff fd5d 	bl	800213c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8002682:	4b19      	ldr	r3, [pc, #100]	; (80026e8 <vTaskSuspend+0x108>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	429a      	cmp	r2, r3
 800268a:	d128      	bne.n	80026de <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 800268c:	4b1a      	ldr	r3, [pc, #104]	; (80026f8 <vTaskSuspend+0x118>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d018      	beq.n	80026c6 <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8002694:	4b19      	ldr	r3, [pc, #100]	; (80026fc <vTaskSuspend+0x11c>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00b      	beq.n	80026b4 <vTaskSuspend+0xd4>
 800269c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a0:	b672      	cpsid	i
 80026a2:	f383 8811 	msr	BASEPRI, r3
 80026a6:	f3bf 8f6f 	isb	sy
 80026aa:	f3bf 8f4f 	dsb	sy
 80026ae:	b662      	cpsie	i
 80026b0:	60bb      	str	r3, [r7, #8]
 80026b2:	e7fe      	b.n	80026b2 <vTaskSuspend+0xd2>
				portYIELD_WITHIN_API();
 80026b4:	4b12      	ldr	r3, [pc, #72]	; (8002700 <vTaskSuspend+0x120>)
 80026b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	f3bf 8f4f 	dsb	sy
 80026c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80026c4:	e00b      	b.n	80026de <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 80026c6:	4b0b      	ldr	r3, [pc, #44]	; (80026f4 <vTaskSuspend+0x114>)
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	4b0e      	ldr	r3, [pc, #56]	; (8002704 <vTaskSuspend+0x124>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d103      	bne.n	80026da <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 80026d2:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <vTaskSuspend+0x108>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
	}
 80026d8:	e001      	b.n	80026de <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 80026da:	f000 fad7 	bl	8002c8c <vTaskSwitchContext>
	}
 80026de:	bf00      	nop
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	20003c48 	.word	0x20003c48
 80026ec:	20003c4c 	.word	0x20003c4c
 80026f0:	20003d50 	.word	0x20003d50
 80026f4:	20003d34 	.word	0x20003d34
 80026f8:	20003d54 	.word	0x20003d54
 80026fc:	20003d70 	.word	0x20003d70
 8002700:	e000ed04 	.word	0xe000ed04
 8002704:	20003d48 	.word	0x20003d48

08002708 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8002708:	b480      	push	{r7}
 800270a:	b087      	sub	sp, #28
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8002710:	2300      	movs	r3, #0
 8002712:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10b      	bne.n	8002736 <prvTaskIsTaskSuspended+0x2e>
 800271e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002722:	b672      	cpsid	i
 8002724:	f383 8811 	msr	BASEPRI, r3
 8002728:	f3bf 8f6f 	isb	sy
 800272c:	f3bf 8f4f 	dsb	sy
 8002730:	b662      	cpsie	i
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	e7fe      	b.n	8002734 <prvTaskIsTaskSuspended+0x2c>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	4a0f      	ldr	r2, [pc, #60]	; (8002778 <prvTaskIsTaskSuspended+0x70>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d101      	bne.n	8002744 <prvTaskIsTaskSuspended+0x3c>
 8002740:	2301      	movs	r3, #1
 8002742:	e000      	b.n	8002746 <prvTaskIsTaskSuspended+0x3e>
 8002744:	2300      	movs	r3, #0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00f      	beq.n	800276a <prvTaskIsTaskSuspended+0x62>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274e:	4a0b      	ldr	r2, [pc, #44]	; (800277c <prvTaskIsTaskSuspended+0x74>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d00a      	beq.n	800276a <prvTaskIsTaskSuspended+0x62>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <prvTaskIsTaskSuspended+0x58>
 800275c:	2301      	movs	r3, #1
 800275e:	e000      	b.n	8002762 <prvTaskIsTaskSuspended+0x5a>
 8002760:	2300      	movs	r3, #0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <prvTaskIsTaskSuspended+0x62>
				{
					xReturn = pdTRUE;
 8002766:	2301      	movs	r3, #1
 8002768:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800276a:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800276c:	4618      	mov	r0, r3
 800276e:	371c      	adds	r7, #28
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	20003d34 	.word	0x20003d34
 800277c:	20003d08 	.word	0x20003d08

08002780 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10b      	bne.n	80027aa <vTaskResume+0x2a>
 8002792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002796:	b672      	cpsid	i
 8002798:	f383 8811 	msr	BASEPRI, r3
 800279c:	f3bf 8f6f 	isb	sy
 80027a0:	f3bf 8f4f 	dsb	sy
 80027a4:	b662      	cpsie	i
 80027a6:	60bb      	str	r3, [r7, #8]
 80027a8:	e7fe      	b.n	80027a8 <vTaskResume+0x28>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d039      	beq.n	8002824 <vTaskResume+0xa4>
 80027b0:	4b1e      	ldr	r3, [pc, #120]	; (800282c <vTaskResume+0xac>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d034      	beq.n	8002824 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 80027ba:	f7ff fc8d 	bl	80020d8 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f7ff ffa2 	bl	8002708 <prvTaskIsTaskSuspended>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d02a      	beq.n	8002820 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	3304      	adds	r3, #4
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff fb52 	bl	8001e78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d8:	2201      	movs	r2, #1
 80027da:	409a      	lsls	r2, r3
 80027dc:	4b14      	ldr	r3, [pc, #80]	; (8002830 <vTaskResume+0xb0>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	4a13      	ldr	r2, [pc, #76]	; (8002830 <vTaskResume+0xb0>)
 80027e4:	6013      	str	r3, [r2, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ea:	4613      	mov	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4413      	add	r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	4a10      	ldr	r2, [pc, #64]	; (8002834 <vTaskResume+0xb4>)
 80027f4:	441a      	add	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	3304      	adds	r3, #4
 80027fa:	4619      	mov	r1, r3
 80027fc:	4610      	mov	r0, r2
 80027fe:	f7ff fade 	bl	8001dbe <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002806:	4b09      	ldr	r3, [pc, #36]	; (800282c <vTaskResume+0xac>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280c:	429a      	cmp	r2, r3
 800280e:	d307      	bcc.n	8002820 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8002810:	4b09      	ldr	r3, [pc, #36]	; (8002838 <vTaskResume+0xb8>)
 8002812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	f3bf 8f4f 	dsb	sy
 800281c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8002820:	f7ff fc8c 	bl	800213c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002824:	bf00      	nop
 8002826:	3710      	adds	r7, #16
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	20003c48 	.word	0x20003c48
 8002830:	20003d50 	.word	0x20003d50
 8002834:	20003c4c 	.word	0x20003c4c
 8002838:	e000ed04 	.word	0xe000ed04

0800283c <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 800283c:	b580      	push	{r7, lr}
 800283e:	b08a      	sub	sp, #40	; 0x28
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8002844:	2300      	movs	r3, #0
 8002846:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10b      	bne.n	800286a <xTaskResumeFromISR+0x2e>
 8002852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002856:	b672      	cpsid	i
 8002858:	f383 8811 	msr	BASEPRI, r3
 800285c:	f3bf 8f6f 	isb	sy
 8002860:	f3bf 8f4f 	dsb	sy
 8002864:	b662      	cpsie	i
 8002866:	61bb      	str	r3, [r7, #24]
 8002868:	e7fe      	b.n	8002868 <xTaskResumeFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800286a:	f7ff fd15 	bl	8002298 <vPortValidateInterruptPriority>
	__asm volatile
 800286e:	f3ef 8211 	mrs	r2, BASEPRI
 8002872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002876:	b672      	cpsid	i
 8002878:	f383 8811 	msr	BASEPRI, r3
 800287c:	f3bf 8f6f 	isb	sy
 8002880:	f3bf 8f4f 	dsb	sy
 8002884:	b662      	cpsie	i
 8002886:	617a      	str	r2, [r7, #20]
 8002888:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800288a:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800288c:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800288e:	6a38      	ldr	r0, [r7, #32]
 8002890:	f7ff ff3a 	bl	8002708 <prvTaskIsTaskSuspended>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d02f      	beq.n	80028fa <xTaskResumeFromISR+0xbe>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800289a:	4b1d      	ldr	r3, [pc, #116]	; (8002910 <xTaskResumeFromISR+0xd4>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d125      	bne.n	80028ee <xTaskResumeFromISR+0xb2>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80028a2:	6a3b      	ldr	r3, [r7, #32]
 80028a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028a6:	4b1b      	ldr	r3, [pc, #108]	; (8002914 <xTaskResumeFromISR+0xd8>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d301      	bcc.n	80028b4 <xTaskResumeFromISR+0x78>
					{
						xYieldRequired = pdTRUE;
 80028b0:	2301      	movs	r3, #1
 80028b2:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80028b4:	6a3b      	ldr	r3, [r7, #32]
 80028b6:	3304      	adds	r3, #4
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff fadd 	bl	8001e78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80028be:	6a3b      	ldr	r3, [r7, #32]
 80028c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c2:	2201      	movs	r2, #1
 80028c4:	409a      	lsls	r2, r3
 80028c6:	4b14      	ldr	r3, [pc, #80]	; (8002918 <xTaskResumeFromISR+0xdc>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	4a12      	ldr	r2, [pc, #72]	; (8002918 <xTaskResumeFromISR+0xdc>)
 80028ce:	6013      	str	r3, [r2, #0]
 80028d0:	6a3b      	ldr	r3, [r7, #32]
 80028d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028d4:	4613      	mov	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4a0f      	ldr	r2, [pc, #60]	; (800291c <xTaskResumeFromISR+0xe0>)
 80028de:	441a      	add	r2, r3
 80028e0:	6a3b      	ldr	r3, [r7, #32]
 80028e2:	3304      	adds	r3, #4
 80028e4:	4619      	mov	r1, r3
 80028e6:	4610      	mov	r0, r2
 80028e8:	f7ff fa69 	bl	8001dbe <vListInsertEnd>
 80028ec:	e005      	b.n	80028fa <xTaskResumeFromISR+0xbe>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80028ee:	6a3b      	ldr	r3, [r7, #32]
 80028f0:	3318      	adds	r3, #24
 80028f2:	4619      	mov	r1, r3
 80028f4:	480a      	ldr	r0, [pc, #40]	; (8002920 <xTaskResumeFromISR+0xe4>)
 80028f6:	f7ff fa62 	bl	8001dbe <vListInsertEnd>
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f383 8811 	msr	BASEPRI, r3
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8002904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8002906:	4618      	mov	r0, r3
 8002908:	3728      	adds	r7, #40	; 0x28
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	20003d70 	.word	0x20003d70
 8002914:	20003c48 	.word	0x20003c48
 8002918:	20003d50 	.word	0x20003d50
 800291c:	20003c4c 	.word	0x20003c4c
 8002920:	20003d08 	.word	0x20003d08

08002924 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b086      	sub	sp, #24
 8002928:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800292a:	4b1d      	ldr	r3, [pc, #116]	; (80029a0 <vTaskStartScheduler+0x7c>)
 800292c:	9301      	str	r3, [sp, #4]
 800292e:	2300      	movs	r3, #0
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	2300      	movs	r3, #0
 8002934:	2280      	movs	r2, #128	; 0x80
 8002936:	491b      	ldr	r1, [pc, #108]	; (80029a4 <vTaskStartScheduler+0x80>)
 8002938:	481b      	ldr	r0, [pc, #108]	; (80029a8 <vTaskStartScheduler+0x84>)
 800293a:	f7ff fcef 	bl	800231c <xTaskCreate>
 800293e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d117      	bne.n	8002976 <vTaskStartScheduler+0x52>
	__asm volatile
 8002946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800294a:	b672      	cpsid	i
 800294c:	f383 8811 	msr	BASEPRI, r3
 8002950:	f3bf 8f6f 	isb	sy
 8002954:	f3bf 8f4f 	dsb	sy
 8002958:	b662      	cpsie	i
 800295a:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800295c:	4b13      	ldr	r3, [pc, #76]	; (80029ac <vTaskStartScheduler+0x88>)
 800295e:	f04f 32ff 	mov.w	r2, #4294967295
 8002962:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002964:	4b12      	ldr	r3, [pc, #72]	; (80029b0 <vTaskStartScheduler+0x8c>)
 8002966:	2201      	movs	r2, #1
 8002968:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800296a:	4b12      	ldr	r3, [pc, #72]	; (80029b4 <vTaskStartScheduler+0x90>)
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002970:	f7ff fb36 	bl	8001fe0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002974:	e00f      	b.n	8002996 <vTaskStartScheduler+0x72>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800297c:	d10b      	bne.n	8002996 <vTaskStartScheduler+0x72>
 800297e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002982:	b672      	cpsid	i
 8002984:	f383 8811 	msr	BASEPRI, r3
 8002988:	f3bf 8f6f 	isb	sy
 800298c:	f3bf 8f4f 	dsb	sy
 8002990:	b662      	cpsie	i
 8002992:	607b      	str	r3, [r7, #4]
 8002994:	e7fe      	b.n	8002994 <vTaskStartScheduler+0x70>
}
 8002996:	bf00      	nop
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	20003d6c 	.word	0x20003d6c
 80029a4:	08003514 	.word	0x08003514
 80029a8:	08002d45 	.word	0x08002d45
 80029ac:	20003d68 	.word	0x20003d68
 80029b0:	20003d54 	.word	0x20003d54
 80029b4:	20003d4c 	.word	0x20003d4c

080029b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80029bc:	4b04      	ldr	r3, [pc, #16]	; (80029d0 <vTaskSuspendAll+0x18>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	3301      	adds	r3, #1
 80029c2:	4a03      	ldr	r2, [pc, #12]	; (80029d0 <vTaskSuspendAll+0x18>)
 80029c4:	6013      	str	r3, [r2, #0]
}
 80029c6:	bf00      	nop
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr
 80029d0:	20003d70 	.word	0x20003d70

080029d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80029da:	2300      	movs	r3, #0
 80029dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80029de:	2300      	movs	r3, #0
 80029e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80029e2:	4b42      	ldr	r3, [pc, #264]	; (8002aec <xTaskResumeAll+0x118>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10b      	bne.n	8002a02 <xTaskResumeAll+0x2e>
 80029ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ee:	b672      	cpsid	i
 80029f0:	f383 8811 	msr	BASEPRI, r3
 80029f4:	f3bf 8f6f 	isb	sy
 80029f8:	f3bf 8f4f 	dsb	sy
 80029fc:	b662      	cpsie	i
 80029fe:	603b      	str	r3, [r7, #0]
 8002a00:	e7fe      	b.n	8002a00 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002a02:	f7ff fb69 	bl	80020d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002a06:	4b39      	ldr	r3, [pc, #228]	; (8002aec <xTaskResumeAll+0x118>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	4a37      	ldr	r2, [pc, #220]	; (8002aec <xTaskResumeAll+0x118>)
 8002a0e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a10:	4b36      	ldr	r3, [pc, #216]	; (8002aec <xTaskResumeAll+0x118>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d161      	bne.n	8002adc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002a18:	4b35      	ldr	r3, [pc, #212]	; (8002af0 <xTaskResumeAll+0x11c>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d05d      	beq.n	8002adc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a20:	e02e      	b.n	8002a80 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002a22:	4b34      	ldr	r3, [pc, #208]	; (8002af4 <xTaskResumeAll+0x120>)
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	3318      	adds	r3, #24
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff fa22 	bl	8001e78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	3304      	adds	r3, #4
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff fa1d 	bl	8001e78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a42:	2201      	movs	r2, #1
 8002a44:	409a      	lsls	r2, r3
 8002a46:	4b2c      	ldr	r3, [pc, #176]	; (8002af8 <xTaskResumeAll+0x124>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	4a2a      	ldr	r2, [pc, #168]	; (8002af8 <xTaskResumeAll+0x124>)
 8002a4e:	6013      	str	r3, [r2, #0]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a54:	4613      	mov	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4413      	add	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4a27      	ldr	r2, [pc, #156]	; (8002afc <xTaskResumeAll+0x128>)
 8002a5e:	441a      	add	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	3304      	adds	r3, #4
 8002a64:	4619      	mov	r1, r3
 8002a66:	4610      	mov	r0, r2
 8002a68:	f7ff f9a9 	bl	8001dbe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a70:	4b23      	ldr	r3, [pc, #140]	; (8002b00 <xTaskResumeAll+0x12c>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d302      	bcc.n	8002a80 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002a7a:	4b22      	ldr	r3, [pc, #136]	; (8002b04 <xTaskResumeAll+0x130>)
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a80:	4b1c      	ldr	r3, [pc, #112]	; (8002af4 <xTaskResumeAll+0x120>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1cc      	bne.n	8002a22 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002a8e:	f000 f9ed 	bl	8002e6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002a92:	4b1d      	ldr	r3, [pc, #116]	; (8002b08 <xTaskResumeAll+0x134>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d010      	beq.n	8002ac0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002a9e:	f000 f837 	bl	8002b10 <xTaskIncrementTick>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d002      	beq.n	8002aae <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002aa8:	4b16      	ldr	r3, [pc, #88]	; (8002b04 <xTaskResumeAll+0x130>)
 8002aaa:	2201      	movs	r2, #1
 8002aac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1f1      	bne.n	8002a9e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8002aba:	4b13      	ldr	r3, [pc, #76]	; (8002b08 <xTaskResumeAll+0x134>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002ac0:	4b10      	ldr	r3, [pc, #64]	; (8002b04 <xTaskResumeAll+0x130>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d009      	beq.n	8002adc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002acc:	4b0f      	ldr	r3, [pc, #60]	; (8002b0c <xTaskResumeAll+0x138>)
 8002ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	f3bf 8f4f 	dsb	sy
 8002ad8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002adc:	f7ff fb2e 	bl	800213c <vPortExitCritical>

	return xAlreadyYielded;
 8002ae0:	68bb      	ldr	r3, [r7, #8]
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	20003d70 	.word	0x20003d70
 8002af0:	20003d48 	.word	0x20003d48
 8002af4:	20003d08 	.word	0x20003d08
 8002af8:	20003d50 	.word	0x20003d50
 8002afc:	20003c4c 	.word	0x20003c4c
 8002b00:	20003c48 	.word	0x20003c48
 8002b04:	20003d5c 	.word	0x20003d5c
 8002b08:	20003d58 	.word	0x20003d58
 8002b0c:	e000ed04 	.word	0xe000ed04

08002b10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002b16:	2300      	movs	r3, #0
 8002b18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b1a:	4b51      	ldr	r3, [pc, #324]	; (8002c60 <xTaskIncrementTick+0x150>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f040 808e 	bne.w	8002c40 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002b24:	4b4f      	ldr	r3, [pc, #316]	; (8002c64 <xTaskIncrementTick+0x154>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002b2c:	4a4d      	ldr	r2, [pc, #308]	; (8002c64 <xTaskIncrementTick+0x154>)
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d121      	bne.n	8002b7c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002b38:	4b4b      	ldr	r3, [pc, #300]	; (8002c68 <xTaskIncrementTick+0x158>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00b      	beq.n	8002b5a <xTaskIncrementTick+0x4a>
 8002b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b46:	b672      	cpsid	i
 8002b48:	f383 8811 	msr	BASEPRI, r3
 8002b4c:	f3bf 8f6f 	isb	sy
 8002b50:	f3bf 8f4f 	dsb	sy
 8002b54:	b662      	cpsie	i
 8002b56:	603b      	str	r3, [r7, #0]
 8002b58:	e7fe      	b.n	8002b58 <xTaskIncrementTick+0x48>
 8002b5a:	4b43      	ldr	r3, [pc, #268]	; (8002c68 <xTaskIncrementTick+0x158>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	4b42      	ldr	r3, [pc, #264]	; (8002c6c <xTaskIncrementTick+0x15c>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a40      	ldr	r2, [pc, #256]	; (8002c68 <xTaskIncrementTick+0x158>)
 8002b66:	6013      	str	r3, [r2, #0]
 8002b68:	4a40      	ldr	r2, [pc, #256]	; (8002c6c <xTaskIncrementTick+0x15c>)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6013      	str	r3, [r2, #0]
 8002b6e:	4b40      	ldr	r3, [pc, #256]	; (8002c70 <xTaskIncrementTick+0x160>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	3301      	adds	r3, #1
 8002b74:	4a3e      	ldr	r2, [pc, #248]	; (8002c70 <xTaskIncrementTick+0x160>)
 8002b76:	6013      	str	r3, [r2, #0]
 8002b78:	f000 f978 	bl	8002e6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002b7c:	4b3d      	ldr	r3, [pc, #244]	; (8002c74 <xTaskIncrementTick+0x164>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d34d      	bcc.n	8002c22 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b86:	4b38      	ldr	r3, [pc, #224]	; (8002c68 <xTaskIncrementTick+0x158>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d101      	bne.n	8002b94 <xTaskIncrementTick+0x84>
 8002b90:	2301      	movs	r3, #1
 8002b92:	e000      	b.n	8002b96 <xTaskIncrementTick+0x86>
 8002b94:	2300      	movs	r3, #0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d004      	beq.n	8002ba4 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b9a:	4b36      	ldr	r3, [pc, #216]	; (8002c74 <xTaskIncrementTick+0x164>)
 8002b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002ba0:	601a      	str	r2, [r3, #0]
					break;
 8002ba2:	e03e      	b.n	8002c22 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002ba4:	4b30      	ldr	r3, [pc, #192]	; (8002c68 <xTaskIncrementTick+0x158>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d203      	bcs.n	8002bc4 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002bbc:	4a2d      	ldr	r2, [pc, #180]	; (8002c74 <xTaskIncrementTick+0x164>)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6013      	str	r3, [r2, #0]
						break;
 8002bc2:	e02e      	b.n	8002c22 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	3304      	adds	r3, #4
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff f955 	bl	8001e78 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d004      	beq.n	8002be0 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	3318      	adds	r3, #24
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff f94c 	bl	8001e78 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be4:	2201      	movs	r2, #1
 8002be6:	409a      	lsls	r2, r3
 8002be8:	4b23      	ldr	r3, [pc, #140]	; (8002c78 <xTaskIncrementTick+0x168>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	4a22      	ldr	r2, [pc, #136]	; (8002c78 <xTaskIncrementTick+0x168>)
 8002bf0:	6013      	str	r3, [r2, #0]
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	4413      	add	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4a1f      	ldr	r2, [pc, #124]	; (8002c7c <xTaskIncrementTick+0x16c>)
 8002c00:	441a      	add	r2, r3
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	3304      	adds	r3, #4
 8002c06:	4619      	mov	r1, r3
 8002c08:	4610      	mov	r0, r2
 8002c0a:	f7ff f8d8 	bl	8001dbe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c12:	4b1b      	ldr	r3, [pc, #108]	; (8002c80 <xTaskIncrementTick+0x170>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d3b4      	bcc.n	8002b86 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c20:	e7b1      	b.n	8002b86 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002c22:	4b17      	ldr	r3, [pc, #92]	; (8002c80 <xTaskIncrementTick+0x170>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c28:	4914      	ldr	r1, [pc, #80]	; (8002c7c <xTaskIncrementTick+0x16c>)
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	4413      	add	r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	440b      	add	r3, r1
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d907      	bls.n	8002c4a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	617b      	str	r3, [r7, #20]
 8002c3e:	e004      	b.n	8002c4a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002c40:	4b10      	ldr	r3, [pc, #64]	; (8002c84 <xTaskIncrementTick+0x174>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	3301      	adds	r3, #1
 8002c46:	4a0f      	ldr	r2, [pc, #60]	; (8002c84 <xTaskIncrementTick+0x174>)
 8002c48:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002c4a:	4b0f      	ldr	r3, [pc, #60]	; (8002c88 <xTaskIncrementTick+0x178>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8002c52:	2301      	movs	r3, #1
 8002c54:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002c56:	697b      	ldr	r3, [r7, #20]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3718      	adds	r7, #24
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	20003d70 	.word	0x20003d70
 8002c64:	20003d4c 	.word	0x20003d4c
 8002c68:	20003d00 	.word	0x20003d00
 8002c6c:	20003d04 	.word	0x20003d04
 8002c70:	20003d60 	.word	0x20003d60
 8002c74:	20003d68 	.word	0x20003d68
 8002c78:	20003d50 	.word	0x20003d50
 8002c7c:	20003c4c 	.word	0x20003c4c
 8002c80:	20003c48 	.word	0x20003c48
 8002c84:	20003d58 	.word	0x20003d58
 8002c88:	20003d5c 	.word	0x20003d5c

08002c8c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b087      	sub	sp, #28
 8002c90:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002c92:	4b27      	ldr	r3, [pc, #156]	; (8002d30 <vTaskSwitchContext+0xa4>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d003      	beq.n	8002ca2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002c9a:	4b26      	ldr	r3, [pc, #152]	; (8002d34 <vTaskSwitchContext+0xa8>)
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002ca0:	e040      	b.n	8002d24 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8002ca2:	4b24      	ldr	r3, [pc, #144]	; (8002d34 <vTaskSwitchContext+0xa8>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002ca8:	4b23      	ldr	r3, [pc, #140]	; (8002d38 <vTaskSwitchContext+0xac>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	fab3 f383 	clz	r3, r3
 8002cb4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002cb6:	7afb      	ldrb	r3, [r7, #11]
 8002cb8:	f1c3 031f 	rsb	r3, r3, #31
 8002cbc:	617b      	str	r3, [r7, #20]
 8002cbe:	491f      	ldr	r1, [pc, #124]	; (8002d3c <vTaskSwitchContext+0xb0>)
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	4413      	add	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	440b      	add	r3, r1
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d10b      	bne.n	8002cea <vTaskSwitchContext+0x5e>
	__asm volatile
 8002cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd6:	b672      	cpsid	i
 8002cd8:	f383 8811 	msr	BASEPRI, r3
 8002cdc:	f3bf 8f6f 	isb	sy
 8002ce0:	f3bf 8f4f 	dsb	sy
 8002ce4:	b662      	cpsie	i
 8002ce6:	607b      	str	r3, [r7, #4]
 8002ce8:	e7fe      	b.n	8002ce8 <vTaskSwitchContext+0x5c>
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	4613      	mov	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4a11      	ldr	r2, [pc, #68]	; (8002d3c <vTaskSwitchContext+0xb0>)
 8002cf6:	4413      	add	r3, r2
 8002cf8:	613b      	str	r3, [r7, #16]
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	605a      	str	r2, [r3, #4]
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	3308      	adds	r3, #8
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d104      	bne.n	8002d1a <vTaskSwitchContext+0x8e>
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	685a      	ldr	r2, [r3, #4]
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	605a      	str	r2, [r3, #4]
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	4a07      	ldr	r2, [pc, #28]	; (8002d40 <vTaskSwitchContext+0xb4>)
 8002d22:	6013      	str	r3, [r2, #0]
}
 8002d24:	bf00      	nop
 8002d26:	371c      	adds	r7, #28
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr
 8002d30:	20003d70 	.word	0x20003d70
 8002d34:	20003d5c 	.word	0x20003d5c
 8002d38:	20003d50 	.word	0x20003d50
 8002d3c:	20003c4c 	.word	0x20003c4c
 8002d40:	20003c48 	.word	0x20003c48

08002d44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002d4c:	f000 f852 	bl	8002df4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002d50:	4b06      	ldr	r3, [pc, #24]	; (8002d6c <prvIdleTask+0x28>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d9f9      	bls.n	8002d4c <prvIdleTask+0x8>
			{
				taskYIELD();
 8002d58:	4b05      	ldr	r3, [pc, #20]	; (8002d70 <prvIdleTask+0x2c>)
 8002d5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	f3bf 8f4f 	dsb	sy
 8002d64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002d68:	e7f0      	b.n	8002d4c <prvIdleTask+0x8>
 8002d6a:	bf00      	nop
 8002d6c:	20003c4c 	.word	0x20003c4c
 8002d70:	e000ed04 	.word	0xe000ed04

08002d74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	607b      	str	r3, [r7, #4]
 8002d7e:	e00c      	b.n	8002d9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	4613      	mov	r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	4413      	add	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4a12      	ldr	r2, [pc, #72]	; (8002dd4 <prvInitialiseTaskLists+0x60>)
 8002d8c:	4413      	add	r3, r2
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7fe ffe8 	bl	8001d64 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	3301      	adds	r3, #1
 8002d98:	607b      	str	r3, [r7, #4]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2b06      	cmp	r3, #6
 8002d9e:	d9ef      	bls.n	8002d80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002da0:	480d      	ldr	r0, [pc, #52]	; (8002dd8 <prvInitialiseTaskLists+0x64>)
 8002da2:	f7fe ffdf 	bl	8001d64 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002da6:	480d      	ldr	r0, [pc, #52]	; (8002ddc <prvInitialiseTaskLists+0x68>)
 8002da8:	f7fe ffdc 	bl	8001d64 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002dac:	480c      	ldr	r0, [pc, #48]	; (8002de0 <prvInitialiseTaskLists+0x6c>)
 8002dae:	f7fe ffd9 	bl	8001d64 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002db2:	480c      	ldr	r0, [pc, #48]	; (8002de4 <prvInitialiseTaskLists+0x70>)
 8002db4:	f7fe ffd6 	bl	8001d64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002db8:	480b      	ldr	r0, [pc, #44]	; (8002de8 <prvInitialiseTaskLists+0x74>)
 8002dba:	f7fe ffd3 	bl	8001d64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002dbe:	4b0b      	ldr	r3, [pc, #44]	; (8002dec <prvInitialiseTaskLists+0x78>)
 8002dc0:	4a05      	ldr	r2, [pc, #20]	; (8002dd8 <prvInitialiseTaskLists+0x64>)
 8002dc2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002dc4:	4b0a      	ldr	r3, [pc, #40]	; (8002df0 <prvInitialiseTaskLists+0x7c>)
 8002dc6:	4a05      	ldr	r2, [pc, #20]	; (8002ddc <prvInitialiseTaskLists+0x68>)
 8002dc8:	601a      	str	r2, [r3, #0]
}
 8002dca:	bf00      	nop
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	20003c4c 	.word	0x20003c4c
 8002dd8:	20003cd8 	.word	0x20003cd8
 8002ddc:	20003cec 	.word	0x20003cec
 8002de0:	20003d08 	.word	0x20003d08
 8002de4:	20003d1c 	.word	0x20003d1c
 8002de8:	20003d34 	.word	0x20003d34
 8002dec:	20003d00 	.word	0x20003d00
 8002df0:	20003d04 	.word	0x20003d04

08002df4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002dfa:	e019      	b.n	8002e30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002dfc:	f7ff f96c 	bl	80020d8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002e00:	4b0f      	ldr	r3, [pc, #60]	; (8002e40 <prvCheckTasksWaitingTermination+0x4c>)
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	3304      	adds	r3, #4
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff f833 	bl	8001e78 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002e12:	4b0c      	ldr	r3, [pc, #48]	; (8002e44 <prvCheckTasksWaitingTermination+0x50>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	3b01      	subs	r3, #1
 8002e18:	4a0a      	ldr	r2, [pc, #40]	; (8002e44 <prvCheckTasksWaitingTermination+0x50>)
 8002e1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002e1c:	4b0a      	ldr	r3, [pc, #40]	; (8002e48 <prvCheckTasksWaitingTermination+0x54>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	3b01      	subs	r3, #1
 8002e22:	4a09      	ldr	r2, [pc, #36]	; (8002e48 <prvCheckTasksWaitingTermination+0x54>)
 8002e24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002e26:	f7ff f989 	bl	800213c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 f80e 	bl	8002e4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002e30:	4b05      	ldr	r3, [pc, #20]	; (8002e48 <prvCheckTasksWaitingTermination+0x54>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1e1      	bne.n	8002dfc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002e38:	bf00      	nop
 8002e3a:	3708      	adds	r7, #8
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	20003d1c 	.word	0x20003d1c
 8002e44:	20003d48 	.word	0x20003d48
 8002e48:	20003d30 	.word	0x20003d30

08002e4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7fe fe6b 	bl	8001b34 <vPortFree>
			vPortFree( pxTCB );
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f7fe fe68 	bl	8001b34 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002e64:	bf00      	nop
 8002e66:	3708      	adds	r7, #8
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e72:	4b0f      	ldr	r3, [pc, #60]	; (8002eb0 <prvResetNextTaskUnblockTime+0x44>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <prvResetNextTaskUnblockTime+0x14>
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e000      	b.n	8002e82 <prvResetNextTaskUnblockTime+0x16>
 8002e80:	2300      	movs	r3, #0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d004      	beq.n	8002e90 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002e86:	4b0b      	ldr	r3, [pc, #44]	; (8002eb4 <prvResetNextTaskUnblockTime+0x48>)
 8002e88:	f04f 32ff 	mov.w	r2, #4294967295
 8002e8c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002e8e:	e008      	b.n	8002ea2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002e90:	4b07      	ldr	r3, [pc, #28]	; (8002eb0 <prvResetNextTaskUnblockTime+0x44>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	4a05      	ldr	r2, [pc, #20]	; (8002eb4 <prvResetNextTaskUnblockTime+0x48>)
 8002ea0:	6013      	str	r3, [r2, #0]
}
 8002ea2:	bf00      	nop
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	20003d00 	.word	0x20003d00
 8002eb4:	20003d68 	.word	0x20003d68

08002eb8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002ec2:	4b29      	ldr	r3, [pc, #164]	; (8002f68 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002ec8:	4b28      	ldr	r3, [pc, #160]	; (8002f6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	3304      	adds	r3, #4
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7fe ffd2 	bl	8001e78 <uxListRemove>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10b      	bne.n	8002ef2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002eda:	4b24      	ldr	r3, [pc, #144]	; (8002f6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee6:	43da      	mvns	r2, r3
 8002ee8:	4b21      	ldr	r3, [pc, #132]	; (8002f70 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4013      	ands	r3, r2
 8002eee:	4a20      	ldr	r2, [pc, #128]	; (8002f70 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002ef0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef8:	d10a      	bne.n	8002f10 <prvAddCurrentTaskToDelayedList+0x58>
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d007      	beq.n	8002f10 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f00:	4b1a      	ldr	r3, [pc, #104]	; (8002f6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	3304      	adds	r3, #4
 8002f06:	4619      	mov	r1, r3
 8002f08:	481a      	ldr	r0, [pc, #104]	; (8002f74 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002f0a:	f7fe ff58 	bl	8001dbe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002f0e:	e026      	b.n	8002f5e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4413      	add	r3, r2
 8002f16:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002f18:	4b14      	ldr	r3, [pc, #80]	; (8002f6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68ba      	ldr	r2, [r7, #8]
 8002f1e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002f20:	68ba      	ldr	r2, [r7, #8]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d209      	bcs.n	8002f3c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f28:	4b13      	ldr	r3, [pc, #76]	; (8002f78 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	4b0f      	ldr	r3, [pc, #60]	; (8002f6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	3304      	adds	r3, #4
 8002f32:	4619      	mov	r1, r3
 8002f34:	4610      	mov	r0, r2
 8002f36:	f7fe ff66 	bl	8001e06 <vListInsert>
}
 8002f3a:	e010      	b.n	8002f5e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f3c:	4b0f      	ldr	r3, [pc, #60]	; (8002f7c <prvAddCurrentTaskToDelayedList+0xc4>)
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	4b0a      	ldr	r3, [pc, #40]	; (8002f6c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	3304      	adds	r3, #4
 8002f46:	4619      	mov	r1, r3
 8002f48:	4610      	mov	r0, r2
 8002f4a:	f7fe ff5c 	bl	8001e06 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002f4e:	4b0c      	ldr	r3, [pc, #48]	; (8002f80 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68ba      	ldr	r2, [r7, #8]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d202      	bcs.n	8002f5e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002f58:	4a09      	ldr	r2, [pc, #36]	; (8002f80 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	6013      	str	r3, [r2, #0]
}
 8002f5e:	bf00      	nop
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	20003d4c 	.word	0x20003d4c
 8002f6c:	20003c48 	.word	0x20003c48
 8002f70:	20003d50 	.word	0x20003d50
 8002f74:	20003d34 	.word	0x20003d34
 8002f78:	20003d04 	.word	0x20003d04
 8002f7c:	20003d00 	.word	0x20003d00
 8002f80:	20003d68 	.word	0x20003d68

08002f84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f84:	b5b0      	push	{r4, r5, r7, lr}
 8002f86:	b090      	sub	sp, #64	; 0x40
 8002f88:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f8a:	f7fd fac1 	bl	8000510 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f8e:	f000 f843 	bl	8003018 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f92:	f000 f8a9 	bl	80030e8 <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002f96:	4b1a      	ldr	r3, [pc, #104]	; (8003000 <main+0x7c>)
 8002f98:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8002f9c:	461d      	mov	r5, r3
 8002f9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fa0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fa2:	682b      	ldr	r3, [r5, #0]
 8002fa4:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002fa6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002faa:	2100      	movs	r1, #0
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7fe fc90 	bl	80018d2 <osThreadCreate>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	4b13      	ldr	r3, [pc, #76]	; (8003004 <main+0x80>)
 8002fb6:	601a      	str	r2, [r3, #0]

  /* definition and creation of Thread1_LED_R */
  osThreadDef(Thread1_LED_R, StartThread1_LED_R, osPriorityNormal, 0, 128);
 8002fb8:	4b13      	ldr	r3, [pc, #76]	; (8003008 <main+0x84>)
 8002fba:	f107 0418 	add.w	r4, r7, #24
 8002fbe:	461d      	mov	r5, r3
 8002fc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fc4:	682b      	ldr	r3, [r5, #0]
 8002fc6:	6023      	str	r3, [r4, #0]
  Thread1_LED_RHandle = osThreadCreate(osThread(Thread1_LED_R), NULL);
 8002fc8:	f107 0318 	add.w	r3, r7, #24
 8002fcc:	2100      	movs	r1, #0
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fe fc7f 	bl	80018d2 <osThreadCreate>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	4b0d      	ldr	r3, [pc, #52]	; (800300c <main+0x88>)
 8002fd8:	601a      	str	r2, [r3, #0]

  /* definition and creation of Thread2_LED_L */
  osThreadDef(Thread2_LED_L, StartThread2_LED_L, osPriorityNormal, 0, 128);
 8002fda:	4b0d      	ldr	r3, [pc, #52]	; (8003010 <main+0x8c>)
 8002fdc:	1d3c      	adds	r4, r7, #4
 8002fde:	461d      	mov	r5, r3
 8002fe0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fe2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fe4:	682b      	ldr	r3, [r5, #0]
 8002fe6:	6023      	str	r3, [r4, #0]
  Thread2_LED_LHandle = osThreadCreate(osThread(Thread2_LED_L), NULL);
 8002fe8:	1d3b      	adds	r3, r7, #4
 8002fea:	2100      	movs	r1, #0
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7fe fc70 	bl	80018d2 <osThreadCreate>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	4b07      	ldr	r3, [pc, #28]	; (8003014 <main+0x90>)
 8002ff6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002ff8:	f7fe fc64 	bl	80018c4 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002ffc:	e7fe      	b.n	8002ffc <main+0x78>
 8002ffe:	bf00      	nop
 8003000:	08003528 	.word	0x08003528
 8003004:	20003d78 	.word	0x20003d78
 8003008:	0800354c 	.word	0x0800354c
 800300c:	20003d7c 	.word	0x20003d7c
 8003010:	08003570 	.word	0x08003570
 8003014:	20003d80 	.word	0x20003d80

08003018 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b094      	sub	sp, #80	; 0x50
 800301c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800301e:	f107 0320 	add.w	r3, r7, #32
 8003022:	2230      	movs	r2, #48	; 0x30
 8003024:	2100      	movs	r1, #0
 8003026:	4618      	mov	r0, r3
 8003028:	f000 fa60 	bl	80034ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800302c:	f107 030c 	add.w	r3, r7, #12
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	605a      	str	r2, [r3, #4]
 8003036:	609a      	str	r2, [r3, #8]
 8003038:	60da      	str	r2, [r3, #12]
 800303a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800303c:	4b28      	ldr	r3, [pc, #160]	; (80030e0 <SystemClock_Config+0xc8>)
 800303e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003040:	4a27      	ldr	r2, [pc, #156]	; (80030e0 <SystemClock_Config+0xc8>)
 8003042:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003046:	6413      	str	r3, [r2, #64]	; 0x40
 8003048:	4b25      	ldr	r3, [pc, #148]	; (80030e0 <SystemClock_Config+0xc8>)
 800304a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003050:	60bb      	str	r3, [r7, #8]
 8003052:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003054:	4b23      	ldr	r3, [pc, #140]	; (80030e4 <SystemClock_Config+0xcc>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800305c:	4a21      	ldr	r2, [pc, #132]	; (80030e4 <SystemClock_Config+0xcc>)
 800305e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003062:	6013      	str	r3, [r2, #0]
 8003064:	4b1f      	ldr	r3, [pc, #124]	; (80030e4 <SystemClock_Config+0xcc>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800306c:	607b      	str	r3, [r7, #4]
 800306e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003070:	2302      	movs	r3, #2
 8003072:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003074:	2301      	movs	r3, #1
 8003076:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003078:	2310      	movs	r3, #16
 800307a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800307c:	2302      	movs	r3, #2
 800307e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003080:	2300      	movs	r3, #0
 8003082:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 10;
 8003084:	230a      	movs	r3, #10
 8003086:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 210;
 8003088:	23d2      	movs	r3, #210	; 0xd2
 800308a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800308c:	2302      	movs	r3, #2
 800308e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003090:	2302      	movs	r3, #2
 8003092:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003094:	f107 0320 	add.w	r3, r7, #32
 8003098:	4618      	mov	r0, r3
 800309a:	f7fd fd27 	bl	8000aec <HAL_RCC_OscConfig>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80030a4:	f000 f8f2 	bl	800328c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030a8:	230f      	movs	r3, #15
 80030aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030ac:	2302      	movs	r3, #2
 80030ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80030b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80030b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80030ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80030c0:	f107 030c 	add.w	r3, r7, #12
 80030c4:	2105      	movs	r1, #5
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7fd ff80 	bl	8000fcc <HAL_RCC_ClockConfig>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80030d2:	f000 f8db 	bl	800328c <Error_Handler>
  }
}
 80030d6:	bf00      	nop
 80030d8:	3750      	adds	r7, #80	; 0x50
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	40023800 	.word	0x40023800
 80030e4:	40007000 	.word	0x40007000

080030e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b08a      	sub	sp, #40	; 0x28
 80030ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030ee:	f107 0314 	add.w	r3, r7, #20
 80030f2:	2200      	movs	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]
 80030f6:	605a      	str	r2, [r3, #4]
 80030f8:	609a      	str	r2, [r3, #8]
 80030fa:	60da      	str	r2, [r3, #12]
 80030fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030fe:	4b24      	ldr	r3, [pc, #144]	; (8003190 <MX_GPIO_Init+0xa8>)
 8003100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003102:	4a23      	ldr	r2, [pc, #140]	; (8003190 <MX_GPIO_Init+0xa8>)
 8003104:	f043 0301 	orr.w	r3, r3, #1
 8003108:	6313      	str	r3, [r2, #48]	; 0x30
 800310a:	4b21      	ldr	r3, [pc, #132]	; (8003190 <MX_GPIO_Init+0xa8>)
 800310c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	613b      	str	r3, [r7, #16]
 8003114:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003116:	4b1e      	ldr	r3, [pc, #120]	; (8003190 <MX_GPIO_Init+0xa8>)
 8003118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311a:	4a1d      	ldr	r2, [pc, #116]	; (8003190 <MX_GPIO_Init+0xa8>)
 800311c:	f043 0304 	orr.w	r3, r3, #4
 8003120:	6313      	str	r3, [r2, #48]	; 0x30
 8003122:	4b1b      	ldr	r3, [pc, #108]	; (8003190 <MX_GPIO_Init+0xa8>)
 8003124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003126:	f003 0304 	and.w	r3, r3, #4
 800312a:	60fb      	str	r3, [r7, #12]
 800312c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800312e:	4b18      	ldr	r3, [pc, #96]	; (8003190 <MX_GPIO_Init+0xa8>)
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	4a17      	ldr	r2, [pc, #92]	; (8003190 <MX_GPIO_Init+0xa8>)
 8003134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003138:	6313      	str	r3, [r2, #48]	; 0x30
 800313a:	4b15      	ldr	r3, [pc, #84]	; (8003190 <MX_GPIO_Init+0xa8>)
 800313c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003142:	60bb      	str	r3, [r7, #8]
 8003144:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003146:	4b12      	ldr	r3, [pc, #72]	; (8003190 <MX_GPIO_Init+0xa8>)
 8003148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314a:	4a11      	ldr	r2, [pc, #68]	; (8003190 <MX_GPIO_Init+0xa8>)
 800314c:	f043 0320 	orr.w	r3, r3, #32
 8003150:	6313      	str	r3, [r2, #48]	; 0x30
 8003152:	4b0f      	ldr	r3, [pc, #60]	; (8003190 <MX_GPIO_Init+0xa8>)
 8003154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003156:	f003 0320 	and.w	r3, r3, #32
 800315a:	607b      	str	r3, [r7, #4]
 800315c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, RED_R_Pin|RED_L_Pin, GPIO_PIN_RESET);
 800315e:	2200      	movs	r2, #0
 8003160:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003164:	480b      	ldr	r0, [pc, #44]	; (8003194 <MX_GPIO_Init+0xac>)
 8003166:	f7fd fc8d 	bl	8000a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RED_R_Pin RED_L_Pin */
  GPIO_InitStruct.Pin = RED_R_Pin|RED_L_Pin;
 800316a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800316e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003170:	2301      	movs	r3, #1
 8003172:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003174:	2300      	movs	r3, #0
 8003176:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003178:	2300      	movs	r3, #0
 800317a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800317c:	f107 0314 	add.w	r3, r7, #20
 8003180:	4619      	mov	r1, r3
 8003182:	4804      	ldr	r0, [pc, #16]	; (8003194 <MX_GPIO_Init+0xac>)
 8003184:	f7fd fad4 	bl	8000730 <HAL_GPIO_Init>

}
 8003188:	bf00      	nop
 800318a:	3728      	adds	r7, #40	; 0x28
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	40023800 	.word	0x40023800
 8003194:	40021400 	.word	0x40021400

08003198 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80031a0:	2001      	movs	r0, #1
 80031a2:	f7fe fbbd 	bl	8001920 <osDelay>
 80031a6:	e7fb      	b.n	80031a0 <StartDefaultTask+0x8>

080031a8 <StartThread1_LED_R>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartThread1_LED_R */
void StartThread1_LED_R(void const * argument)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartThread1_LED_R */
  /* Infinite loop */
	for(;;){
  for(int i = 0;i < 25;i++)
 80031b0:	2300      	movs	r3, #0
 80031b2:	60fb      	str	r3, [r7, #12]
 80031b4:	e00a      	b.n	80031cc <StartThread1_LED_R+0x24>
  {

	  HAL_GPIO_TogglePin(RED_R_GPIO_Port, RED_R_Pin);
 80031b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80031ba:	4814      	ldr	r0, [pc, #80]	; (800320c <StartThread1_LED_R+0x64>)
 80031bc:	f7fd fc7b 	bl	8000ab6 <HAL_GPIO_TogglePin>
    osDelay(200);
 80031c0:	20c8      	movs	r0, #200	; 0xc8
 80031c2:	f7fe fbad 	bl	8001920 <osDelay>
  for(int i = 0;i < 25;i++)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	3301      	adds	r3, #1
 80031ca:	60fb      	str	r3, [r7, #12]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2b18      	cmp	r3, #24
 80031d0:	ddf1      	ble.n	80031b6 <StartThread1_LED_R+0xe>
  }
  osThreadSuspend(Thread1_LED_RHandle);
 80031d2:	4b0f      	ldr	r3, [pc, #60]	; (8003210 <StartThread1_LED_R+0x68>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7fe fbb6 	bl	8001948 <osThreadSuspend>

  for(int i = 0;i < 5;i++)
 80031dc:	2300      	movs	r3, #0
 80031de:	60bb      	str	r3, [r7, #8]
 80031e0:	e00b      	b.n	80031fa <StartThread1_LED_R+0x52>
    {

  	  HAL_GPIO_TogglePin(RED_R_GPIO_Port, RED_R_Pin);
 80031e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80031e6:	4809      	ldr	r0, [pc, #36]	; (800320c <StartThread1_LED_R+0x64>)
 80031e8:	f7fd fc65 	bl	8000ab6 <HAL_GPIO_TogglePin>
      osDelay(1000);
 80031ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80031f0:	f7fe fb96 	bl	8001920 <osDelay>
  for(int i = 0;i < 5;i++)
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	3301      	adds	r3, #1
 80031f8:	60bb      	str	r3, [r7, #8]
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	2b04      	cmp	r3, #4
 80031fe:	ddf0      	ble.n	80031e2 <StartThread1_LED_R+0x3a>
    }
  osThreadResume(Thread2_LED_LHandle);
 8003200:	4b04      	ldr	r3, [pc, #16]	; (8003214 <StartThread1_LED_R+0x6c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4618      	mov	r0, r3
 8003206:	f7fe fbab 	bl	8001960 <osThreadResume>
  for(int i = 0;i < 25;i++)
 800320a:	e7d1      	b.n	80031b0 <StartThread1_LED_R+0x8>
 800320c:	40021400 	.word	0x40021400
 8003210:	20003d7c 	.word	0x20003d7c
 8003214:	20003d80 	.word	0x20003d80

08003218 <StartThread2_LED_L>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartThread2_LED_L */
void StartThread2_LED_L(void const * argument)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartThread2_LED_L */
  /* Infinite loop */
	for(;;){
  for(int i = 0; i < 20; i++)
 8003220:	2300      	movs	r3, #0
 8003222:	60fb      	str	r3, [r7, #12]
 8003224:	e00b      	b.n	800323e <StartThread2_LED_L+0x26>
  {
	  HAL_GPIO_TogglePin(RED_L_GPIO_Port, RED_L_Pin);
 8003226:	f44f 7100 	mov.w	r1, #512	; 0x200
 800322a:	480c      	ldr	r0, [pc, #48]	; (800325c <StartThread2_LED_L+0x44>)
 800322c:	f7fd fc43 	bl	8000ab6 <HAL_GPIO_TogglePin>
	      osDelay(500);
 8003230:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003234:	f7fe fb74 	bl	8001920 <osDelay>
  for(int i = 0; i < 20; i++)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	3301      	adds	r3, #1
 800323c:	60fb      	str	r3, [r7, #12]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2b13      	cmp	r3, #19
 8003242:	ddf0      	ble.n	8003226 <StartThread2_LED_L+0xe>
  }
  osThreadResume(Thread1_LED_RHandle);
 8003244:	4b06      	ldr	r3, [pc, #24]	; (8003260 <StartThread2_LED_L+0x48>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4618      	mov	r0, r3
 800324a:	f7fe fb89 	bl	8001960 <osThreadResume>
  osThreadSuspend(Thread2_LED_LHandle);
 800324e:	4b05      	ldr	r3, [pc, #20]	; (8003264 <StartThread2_LED_L+0x4c>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4618      	mov	r0, r3
 8003254:	f7fe fb78 	bl	8001948 <osThreadSuspend>
  for(int i = 0; i < 20; i++)
 8003258:	e7e2      	b.n	8003220 <StartThread2_LED_L+0x8>
 800325a:	bf00      	nop
 800325c:	40021400 	.word	0x40021400
 8003260:	20003d7c 	.word	0x20003d7c
 8003264:	20003d80 	.word	0x20003d80

08003268 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a04      	ldr	r2, [pc, #16]	; (8003288 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d101      	bne.n	800327e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800327a:	f7fd f957 	bl	800052c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800327e:	bf00      	nop
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	40002000 	.word	0x40002000

0800328c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003290:	bf00      	nop
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
	...

0800329c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80032a2:	4b11      	ldr	r3, [pc, #68]	; (80032e8 <HAL_MspInit+0x4c>)
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	4a10      	ldr	r2, [pc, #64]	; (80032e8 <HAL_MspInit+0x4c>)
 80032a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ac:	6413      	str	r3, [r2, #64]	; 0x40
 80032ae:	4b0e      	ldr	r3, [pc, #56]	; (80032e8 <HAL_MspInit+0x4c>)
 80032b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b6:	607b      	str	r3, [r7, #4]
 80032b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ba:	4b0b      	ldr	r3, [pc, #44]	; (80032e8 <HAL_MspInit+0x4c>)
 80032bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032be:	4a0a      	ldr	r2, [pc, #40]	; (80032e8 <HAL_MspInit+0x4c>)
 80032c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032c4:	6453      	str	r3, [r2, #68]	; 0x44
 80032c6:	4b08      	ldr	r3, [pc, #32]	; (80032e8 <HAL_MspInit+0x4c>)
 80032c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032ce:	603b      	str	r3, [r7, #0]
 80032d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80032d2:	2200      	movs	r2, #0
 80032d4:	210f      	movs	r1, #15
 80032d6:	f06f 0001 	mvn.w	r0, #1
 80032da:	f7fd f9ff 	bl	80006dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032de:	bf00      	nop
 80032e0:	3708      	adds	r7, #8
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	40023800 	.word	0x40023800

080032ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b08c      	sub	sp, #48	; 0x30
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80032f4:	2300      	movs	r3, #0
 80032f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80032f8:	2300      	movs	r3, #0
 80032fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0); 
 80032fc:	2200      	movs	r2, #0
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	202d      	movs	r0, #45	; 0x2d
 8003302:	f7fd f9eb 	bl	80006dc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn); 
 8003306:	202d      	movs	r0, #45	; 0x2d
 8003308:	f7fd fa04 	bl	8000714 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 800330c:	4b1f      	ldr	r3, [pc, #124]	; (800338c <HAL_InitTick+0xa0>)
 800330e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003310:	4a1e      	ldr	r2, [pc, #120]	; (800338c <HAL_InitTick+0xa0>)
 8003312:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003316:	6413      	str	r3, [r2, #64]	; 0x40
 8003318:	4b1c      	ldr	r3, [pc, #112]	; (800338c <HAL_InitTick+0xa0>)
 800331a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003320:	60fb      	str	r3, [r7, #12]
 8003322:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003324:	f107 0210 	add.w	r2, r7, #16
 8003328:	f107 0314 	add.w	r3, r7, #20
 800332c:	4611      	mov	r1, r2
 800332e:	4618      	mov	r0, r3
 8003330:	f7fe f806 	bl	8001340 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003334:	f7fd fff0 	bl	8001318 <HAL_RCC_GetPCLK1Freq>
 8003338:	4603      	mov	r3, r0
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800333e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003340:	4a13      	ldr	r2, [pc, #76]	; (8003390 <HAL_InitTick+0xa4>)
 8003342:	fba2 2303 	umull	r2, r3, r2, r3
 8003346:	0c9b      	lsrs	r3, r3, #18
 8003348:	3b01      	subs	r3, #1
 800334a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 800334c:	4b11      	ldr	r3, [pc, #68]	; (8003394 <HAL_InitTick+0xa8>)
 800334e:	4a12      	ldr	r2, [pc, #72]	; (8003398 <HAL_InitTick+0xac>)
 8003350:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000 / 1000) - 1;
 8003352:	4b10      	ldr	r3, [pc, #64]	; (8003394 <HAL_InitTick+0xa8>)
 8003354:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003358:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 800335a:	4a0e      	ldr	r2, [pc, #56]	; (8003394 <HAL_InitTick+0xa8>)
 800335c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800335e:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8003360:	4b0c      	ldr	r3, [pc, #48]	; (8003394 <HAL_InitTick+0xa8>)
 8003362:	2200      	movs	r2, #0
 8003364:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003366:	4b0b      	ldr	r3, [pc, #44]	; (8003394 <HAL_InitTick+0xa8>)
 8003368:	2200      	movs	r2, #0
 800336a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 800336c:	4809      	ldr	r0, [pc, #36]	; (8003394 <HAL_InitTick+0xa8>)
 800336e:	f7fe f819 	bl	80013a4 <HAL_TIM_Base_Init>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d104      	bne.n	8003382 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8003378:	4806      	ldr	r0, [pc, #24]	; (8003394 <HAL_InitTick+0xa8>)
 800337a:	f7fe f849 	bl	8001410 <HAL_TIM_Base_Start_IT>
 800337e:	4603      	mov	r3, r0
 8003380:	e000      	b.n	8003384 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
}
 8003384:	4618      	mov	r0, r3
 8003386:	3730      	adds	r7, #48	; 0x30
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40023800 	.word	0x40023800
 8003390:	431bde83 	.word	0x431bde83
 8003394:	20003d84 	.word	0x20003d84
 8003398:	40002000 	.word	0x40002000

0800339c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80033a0:	bf00      	nop
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr

080033aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033aa:	b480      	push	{r7}
 80033ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033ae:	e7fe      	b.n	80033ae <HardFault_Handler+0x4>

080033b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033b4:	e7fe      	b.n	80033b4 <MemManage_Handler+0x4>

080033b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033b6:	b480      	push	{r7}
 80033b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033ba:	e7fe      	b.n	80033ba <BusFault_Handler+0x4>

080033bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033c0:	e7fe      	b.n	80033c0 <UsageFault_Handler+0x4>

080033c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033c2:	b480      	push	{r7}
 80033c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033c6:	bf00      	nop
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80033d4:	4802      	ldr	r0, [pc, #8]	; (80033e0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80033d6:	f7fe f845 	bl	8001464 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80033da:	bf00      	nop
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	20003d84 	.word	0x20003d84

080033e4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033e8:	4b15      	ldr	r3, [pc, #84]	; (8003440 <SystemInit+0x5c>)
 80033ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ee:	4a14      	ldr	r2, [pc, #80]	; (8003440 <SystemInit+0x5c>)
 80033f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80033f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80033f8:	4b12      	ldr	r3, [pc, #72]	; (8003444 <SystemInit+0x60>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a11      	ldr	r2, [pc, #68]	; (8003444 <SystemInit+0x60>)
 80033fe:	f043 0301 	orr.w	r3, r3, #1
 8003402:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003404:	4b0f      	ldr	r3, [pc, #60]	; (8003444 <SystemInit+0x60>)
 8003406:	2200      	movs	r2, #0
 8003408:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800340a:	4b0e      	ldr	r3, [pc, #56]	; (8003444 <SystemInit+0x60>)
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	490d      	ldr	r1, [pc, #52]	; (8003444 <SystemInit+0x60>)
 8003410:	4b0d      	ldr	r3, [pc, #52]	; (8003448 <SystemInit+0x64>)
 8003412:	4013      	ands	r3, r2
 8003414:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003416:	4b0b      	ldr	r3, [pc, #44]	; (8003444 <SystemInit+0x60>)
 8003418:	4a0c      	ldr	r2, [pc, #48]	; (800344c <SystemInit+0x68>)
 800341a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800341c:	4b09      	ldr	r3, [pc, #36]	; (8003444 <SystemInit+0x60>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a08      	ldr	r2, [pc, #32]	; (8003444 <SystemInit+0x60>)
 8003422:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003426:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003428:	4b06      	ldr	r3, [pc, #24]	; (8003444 <SystemInit+0x60>)
 800342a:	2200      	movs	r2, #0
 800342c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800342e:	4b04      	ldr	r3, [pc, #16]	; (8003440 <SystemInit+0x5c>)
 8003430:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003434:	609a      	str	r2, [r3, #8]
#endif
}
 8003436:	bf00      	nop
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr
 8003440:	e000ed00 	.word	0xe000ed00
 8003444:	40023800 	.word	0x40023800
 8003448:	fef6ffff 	.word	0xfef6ffff
 800344c:	24003010 	.word	0x24003010

08003450 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003450:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003488 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003454:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003456:	e003      	b.n	8003460 <LoopCopyDataInit>

08003458 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003458:	4b0c      	ldr	r3, [pc, #48]	; (800348c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800345a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800345c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800345e:	3104      	adds	r1, #4

08003460 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003460:	480b      	ldr	r0, [pc, #44]	; (8003490 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003462:	4b0c      	ldr	r3, [pc, #48]	; (8003494 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003464:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003466:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003468:	d3f6      	bcc.n	8003458 <CopyDataInit>
  ldr  r2, =_sbss
 800346a:	4a0b      	ldr	r2, [pc, #44]	; (8003498 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800346c:	e002      	b.n	8003474 <LoopFillZerobss>

0800346e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800346e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003470:	f842 3b04 	str.w	r3, [r2], #4

08003474 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003474:	4b09      	ldr	r3, [pc, #36]	; (800349c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003476:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003478:	d3f9      	bcc.n	800346e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800347a:	f7ff ffb3 	bl	80033e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800347e:	f000 f811 	bl	80034a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003482:	f7ff fd7f 	bl	8002f84 <main>
  bx  lr    
 8003486:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003488:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800348c:	080035ac 	.word	0x080035ac
  ldr  r0, =_sdata
 8003490:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003494:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8003498:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800349c:	20003dc4 	.word	0x20003dc4

080034a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80034a0:	e7fe      	b.n	80034a0 <ADC_IRQHandler>
	...

080034a4 <__libc_init_array>:
 80034a4:	b570      	push	{r4, r5, r6, lr}
 80034a6:	4e0d      	ldr	r6, [pc, #52]	; (80034dc <__libc_init_array+0x38>)
 80034a8:	4c0d      	ldr	r4, [pc, #52]	; (80034e0 <__libc_init_array+0x3c>)
 80034aa:	1ba4      	subs	r4, r4, r6
 80034ac:	10a4      	asrs	r4, r4, #2
 80034ae:	2500      	movs	r5, #0
 80034b0:	42a5      	cmp	r5, r4
 80034b2:	d109      	bne.n	80034c8 <__libc_init_array+0x24>
 80034b4:	4e0b      	ldr	r6, [pc, #44]	; (80034e4 <__libc_init_array+0x40>)
 80034b6:	4c0c      	ldr	r4, [pc, #48]	; (80034e8 <__libc_init_array+0x44>)
 80034b8:	f000 f820 	bl	80034fc <_init>
 80034bc:	1ba4      	subs	r4, r4, r6
 80034be:	10a4      	asrs	r4, r4, #2
 80034c0:	2500      	movs	r5, #0
 80034c2:	42a5      	cmp	r5, r4
 80034c4:	d105      	bne.n	80034d2 <__libc_init_array+0x2e>
 80034c6:	bd70      	pop	{r4, r5, r6, pc}
 80034c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034cc:	4798      	blx	r3
 80034ce:	3501      	adds	r5, #1
 80034d0:	e7ee      	b.n	80034b0 <__libc_init_array+0xc>
 80034d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034d6:	4798      	blx	r3
 80034d8:	3501      	adds	r5, #1
 80034da:	e7f2      	b.n	80034c2 <__libc_init_array+0x1e>
 80034dc:	080035a4 	.word	0x080035a4
 80034e0:	080035a4 	.word	0x080035a4
 80034e4:	080035a4 	.word	0x080035a4
 80034e8:	080035a8 	.word	0x080035a8

080034ec <memset>:
 80034ec:	4402      	add	r2, r0
 80034ee:	4603      	mov	r3, r0
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d100      	bne.n	80034f6 <memset+0xa>
 80034f4:	4770      	bx	lr
 80034f6:	f803 1b01 	strb.w	r1, [r3], #1
 80034fa:	e7f9      	b.n	80034f0 <memset+0x4>

080034fc <_init>:
 80034fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034fe:	bf00      	nop
 8003500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003502:	bc08      	pop	{r3}
 8003504:	469e      	mov	lr, r3
 8003506:	4770      	bx	lr

08003508 <_fini>:
 8003508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800350a:	bf00      	nop
 800350c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800350e:	bc08      	pop	{r3}
 8003510:	469e      	mov	lr, r3
 8003512:	4770      	bx	lr
