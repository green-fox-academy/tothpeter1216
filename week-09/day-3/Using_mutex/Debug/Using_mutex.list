
Using_mutex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040f0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080042c0  080042c0  000142c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004338  08004338  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004338  08004338  00014338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004340  08004340  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004340  08004340  00014340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004344  08004344  00014344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004348  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003dbc  2000000c  08004354  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003dc8  08004354  00023dc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000105a0  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000024fe  00000000  00000000  000305dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ed8  00000000  00000000  00032ae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dc0  00000000  00000000  000339b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000259a9  00000000  00000000  00034778  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c269  00000000  00000000  0005a121  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000eb7c3  00000000  00000000  0006638a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00151b4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d54  00000000  00000000  00151bc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000000c 	.word	0x2000000c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080042a8 	.word	0x080042a8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000010 	.word	0x20000010
 800020c:	080042a8 	.word	0x080042a8

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b972 	b.w	800050c <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	4688      	mov	r8, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14b      	bne.n	80002e6 <__udivmoddi4+0xa6>
 800024e:	428a      	cmp	r2, r1
 8000250:	4615      	mov	r5, r2
 8000252:	d967      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0720 	rsb	r7, r2, #32
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	fa20 f707 	lsr.w	r7, r0, r7
 8000266:	4095      	lsls	r5, r2
 8000268:	ea47 0803 	orr.w	r8, r7, r3
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbb8 f7fe 	udiv	r7, r8, lr
 8000278:	fa1f fc85 	uxth.w	ip, r5
 800027c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000280:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000284:	fb07 f10c 	mul.w	r1, r7, ip
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18eb      	adds	r3, r5, r3
 800028e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000292:	f080 811b 	bcs.w	80004cc <__udivmoddi4+0x28c>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8118 	bls.w	80004cc <__udivmoddi4+0x28c>
 800029c:	3f02      	subs	r7, #2
 800029e:	442b      	add	r3, r5
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b4:	45a4      	cmp	ip, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	192c      	adds	r4, r5, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8107 	bcs.w	80004d0 <__udivmoddi4+0x290>
 80002c2:	45a4      	cmp	ip, r4
 80002c4:	f240 8104 	bls.w	80004d0 <__udivmoddi4+0x290>
 80002c8:	3802      	subs	r0, #2
 80002ca:	442c      	add	r4, r5
 80002cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d0:	eba4 040c 	sub.w	r4, r4, ip
 80002d4:	2700      	movs	r7, #0
 80002d6:	b11e      	cbz	r6, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c6 4300 	strd	r4, r3, [r6]
 80002e0:	4639      	mov	r1, r7
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0xbe>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80eb 	beq.w	80004c6 <__udivmoddi4+0x286>
 80002f0:	2700      	movs	r7, #0
 80002f2:	e9c6 0100 	strd	r0, r1, [r6]
 80002f6:	4638      	mov	r0, r7
 80002f8:	4639      	mov	r1, r7
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	fab3 f783 	clz	r7, r3
 8000302:	2f00      	cmp	r7, #0
 8000304:	d147      	bne.n	8000396 <__udivmoddi4+0x156>
 8000306:	428b      	cmp	r3, r1
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xd0>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2c4>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb61 0303 	sbc.w	r3, r1, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4698      	mov	r8, r3
 800031a:	2e00      	cmp	r6, #0
 800031c:	d0e0      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800031e:	e9c6 4800 	strd	r4, r8, [r6]
 8000322:	e7dd      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000324:	b902      	cbnz	r2, 8000328 <__udivmoddi4+0xe8>
 8000326:	deff      	udf	#255	; 0xff
 8000328:	fab2 f282 	clz	r2, r2
 800032c:	2a00      	cmp	r2, #0
 800032e:	f040 808f 	bne.w	8000450 <__udivmoddi4+0x210>
 8000332:	1b49      	subs	r1, r1, r5
 8000334:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000338:	fa1f f885 	uxth.w	r8, r5
 800033c:	2701      	movs	r7, #1
 800033e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fb0e 111c 	mls	r1, lr, ip, r1
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb08 f10c 	mul.w	r1, r8, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x124>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f10c 30ff 	add.w	r0, ip, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4299      	cmp	r1, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 8000362:	4684      	mov	ip, r0
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb1 f0fe 	udiv	r0, r1, lr
 800036c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000370:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000374:	fb08 f800 	mul.w	r8, r8, r0
 8000378:	45a0      	cmp	r8, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x14c>
 800037c:	192c      	adds	r4, r5, r4
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x14a>
 8000384:	45a0      	cmp	r8, r4
 8000386:	f200 80b6 	bhi.w	80004f6 <__udivmoddi4+0x2b6>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 0408 	sub.w	r4, r4, r8
 8000390:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000394:	e79f      	b.n	80002d6 <__udivmoddi4+0x96>
 8000396:	f1c7 0c20 	rsb	ip, r7, #32
 800039a:	40bb      	lsls	r3, r7
 800039c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a4:	fa01 f407 	lsl.w	r4, r1, r7
 80003a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b4:	4325      	orrs	r5, r4
 80003b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ba:	0c2c      	lsrs	r4, r5, #16
 80003bc:	fb08 3319 	mls	r3, r8, r9, r3
 80003c0:	fa1f fa8e 	uxth.w	sl, lr
 80003c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c8:	fb09 f40a 	mul.w	r4, r9, sl
 80003cc:	429c      	cmp	r4, r3
 80003ce:	fa02 f207 	lsl.w	r2, r2, r7
 80003d2:	fa00 f107 	lsl.w	r1, r0, r7
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1e 0303 	adds.w	r3, lr, r3
 80003dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e0:	f080 8087 	bcs.w	80004f2 <__udivmoddi4+0x2b2>
 80003e4:	429c      	cmp	r4, r3
 80003e6:	f240 8084 	bls.w	80004f2 <__udivmoddi4+0x2b2>
 80003ea:	f1a9 0902 	sub.w	r9, r9, #2
 80003ee:	4473      	add	r3, lr
 80003f0:	1b1b      	subs	r3, r3, r4
 80003f2:	b2ad      	uxth	r5, r5
 80003f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f8:	fb08 3310 	mls	r3, r8, r0, r3
 80003fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000400:	fb00 fa0a 	mul.w	sl, r0, sl
 8000404:	45a2      	cmp	sl, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1e 0404 	adds.w	r4, lr, r4
 800040c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000410:	d26b      	bcs.n	80004ea <__udivmoddi4+0x2aa>
 8000412:	45a2      	cmp	sl, r4
 8000414:	d969      	bls.n	80004ea <__udivmoddi4+0x2aa>
 8000416:	3802      	subs	r0, #2
 8000418:	4474      	add	r4, lr
 800041a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800041e:	fba0 8902 	umull	r8, r9, r0, r2
 8000422:	eba4 040a 	sub.w	r4, r4, sl
 8000426:	454c      	cmp	r4, r9
 8000428:	46c2      	mov	sl, r8
 800042a:	464b      	mov	r3, r9
 800042c:	d354      	bcc.n	80004d8 <__udivmoddi4+0x298>
 800042e:	d051      	beq.n	80004d4 <__udivmoddi4+0x294>
 8000430:	2e00      	cmp	r6, #0
 8000432:	d069      	beq.n	8000508 <__udivmoddi4+0x2c8>
 8000434:	ebb1 050a 	subs.w	r5, r1, sl
 8000438:	eb64 0403 	sbc.w	r4, r4, r3
 800043c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000440:	40fd      	lsrs	r5, r7
 8000442:	40fc      	lsrs	r4, r7
 8000444:	ea4c 0505 	orr.w	r5, ip, r5
 8000448:	e9c6 5400 	strd	r5, r4, [r6]
 800044c:	2700      	movs	r7, #0
 800044e:	e747      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000450:	f1c2 0320 	rsb	r3, r2, #32
 8000454:	fa20 f703 	lsr.w	r7, r0, r3
 8000458:	4095      	lsls	r5, r2
 800045a:	fa01 f002 	lsl.w	r0, r1, r2
 800045e:	fa21 f303 	lsr.w	r3, r1, r3
 8000462:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000466:	4338      	orrs	r0, r7
 8000468:	0c01      	lsrs	r1, r0, #16
 800046a:	fbb3 f7fe 	udiv	r7, r3, lr
 800046e:	fa1f f885 	uxth.w	r8, r5
 8000472:	fb0e 3317 	mls	r3, lr, r7, r3
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb07 f308 	mul.w	r3, r7, r8
 800047e:	428b      	cmp	r3, r1
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x256>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f107 3cff 	add.w	ip, r7, #4294967295
 800048c:	d22f      	bcs.n	80004ee <__udivmoddi4+0x2ae>
 800048e:	428b      	cmp	r3, r1
 8000490:	d92d      	bls.n	80004ee <__udivmoddi4+0x2ae>
 8000492:	3f02      	subs	r7, #2
 8000494:	4429      	add	r1, r5
 8000496:	1acb      	subs	r3, r1, r3
 8000498:	b281      	uxth	r1, r0
 800049a:	fbb3 f0fe 	udiv	r0, r3, lr
 800049e:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a6:	fb00 f308 	mul.w	r3, r0, r8
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x27e>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b4:	d217      	bcs.n	80004e6 <__udivmoddi4+0x2a6>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d915      	bls.n	80004e6 <__udivmoddi4+0x2a6>
 80004ba:	3802      	subs	r0, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c4:	e73b      	b.n	800033e <__udivmoddi4+0xfe>
 80004c6:	4637      	mov	r7, r6
 80004c8:	4630      	mov	r0, r6
 80004ca:	e709      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004cc:	4607      	mov	r7, r0
 80004ce:	e6e7      	b.n	80002a0 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fb      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d4:	4541      	cmp	r1, r8
 80004d6:	d2ab      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004dc:	eb69 020e 	sbc.w	r2, r9, lr
 80004e0:	3801      	subs	r0, #1
 80004e2:	4613      	mov	r3, r2
 80004e4:	e7a4      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e6:	4660      	mov	r0, ip
 80004e8:	e7e9      	b.n	80004be <__udivmoddi4+0x27e>
 80004ea:	4618      	mov	r0, r3
 80004ec:	e795      	b.n	800041a <__udivmoddi4+0x1da>
 80004ee:	4667      	mov	r7, ip
 80004f0:	e7d1      	b.n	8000496 <__udivmoddi4+0x256>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e77c      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	442c      	add	r4, r5
 80004fa:	e747      	b.n	800038c <__udivmoddi4+0x14c>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	442b      	add	r3, r5
 8000502:	e72f      	b.n	8000364 <__udivmoddi4+0x124>
 8000504:	4638      	mov	r0, r7
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xda>
 8000508:	4637      	mov	r7, r6
 800050a:	e6e9      	b.n	80002e0 <__udivmoddi4+0xa0>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000514:	2003      	movs	r0, #3
 8000516:	f000 f8d6 	bl	80006c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800051a:	2000      	movs	r0, #0
 800051c:	f003 fdb0 	bl	8004080 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000520:	f003 fd86 	bl	8004030 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000524:	2300      	movs	r3, #0
}
 8000526:	4618      	mov	r0, r3
 8000528:	bd80      	pop	{r7, pc}
	...

0800052c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000530:	4b06      	ldr	r3, [pc, #24]	; (800054c <HAL_IncTick+0x20>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	461a      	mov	r2, r3
 8000536:	4b06      	ldr	r3, [pc, #24]	; (8000550 <HAL_IncTick+0x24>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4413      	add	r3, r2
 800053c:	4a04      	ldr	r2, [pc, #16]	; (8000550 <HAL_IncTick+0x24>)
 800053e:	6013      	str	r3, [r2, #0]
}
 8000540:	bf00      	nop
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	20000000 	.word	0x20000000
 8000550:	20003d74 	.word	0x20003d74

08000554 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  return uwTick;
 8000558:	4b03      	ldr	r3, [pc, #12]	; (8000568 <HAL_GetTick+0x14>)
 800055a:	681b      	ldr	r3, [r3, #0]
}
 800055c:	4618      	mov	r0, r3
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	20003d74 	.word	0x20003d74

0800056c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	f003 0307 	and.w	r3, r3, #7
 800057a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800057c:	4b0b      	ldr	r3, [pc, #44]	; (80005ac <__NVIC_SetPriorityGrouping+0x40>)
 800057e:	68db      	ldr	r3, [r3, #12]
 8000580:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000582:	68ba      	ldr	r2, [r7, #8]
 8000584:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000588:	4013      	ands	r3, r2
 800058a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000590:	68bb      	ldr	r3, [r7, #8]
 8000592:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000594:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <__NVIC_SetPriorityGrouping+0x44>)
 8000596:	4313      	orrs	r3, r2
 8000598:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800059a:	4a04      	ldr	r2, [pc, #16]	; (80005ac <__NVIC_SetPriorityGrouping+0x40>)
 800059c:	68bb      	ldr	r3, [r7, #8]
 800059e:	60d3      	str	r3, [r2, #12]
}
 80005a0:	bf00      	nop
 80005a2:	3714      	adds	r7, #20
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr
 80005ac:	e000ed00 	.word	0xe000ed00
 80005b0:	05fa0000 	.word	0x05fa0000

080005b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005b8:	4b04      	ldr	r3, [pc, #16]	; (80005cc <__NVIC_GetPriorityGrouping+0x18>)
 80005ba:	68db      	ldr	r3, [r3, #12]
 80005bc:	0a1b      	lsrs	r3, r3, #8
 80005be:	f003 0307 	and.w	r3, r3, #7
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr
 80005cc:	e000ed00 	.word	0xe000ed00

080005d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	db0b      	blt.n	80005fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	f003 021f 	and.w	r2, r3, #31
 80005e8:	4907      	ldr	r1, [pc, #28]	; (8000608 <__NVIC_EnableIRQ+0x38>)
 80005ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ee:	095b      	lsrs	r3, r3, #5
 80005f0:	2001      	movs	r0, #1
 80005f2:	fa00 f202 	lsl.w	r2, r0, r2
 80005f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005fa:	bf00      	nop
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	e000e100 	.word	0xe000e100

0800060c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	6039      	str	r1, [r7, #0]
 8000616:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061c:	2b00      	cmp	r3, #0
 800061e:	db0a      	blt.n	8000636 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	b2da      	uxtb	r2, r3
 8000624:	490c      	ldr	r1, [pc, #48]	; (8000658 <__NVIC_SetPriority+0x4c>)
 8000626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062a:	0112      	lsls	r2, r2, #4
 800062c:	b2d2      	uxtb	r2, r2
 800062e:	440b      	add	r3, r1
 8000630:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000634:	e00a      	b.n	800064c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	b2da      	uxtb	r2, r3
 800063a:	4908      	ldr	r1, [pc, #32]	; (800065c <__NVIC_SetPriority+0x50>)
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	f003 030f 	and.w	r3, r3, #15
 8000642:	3b04      	subs	r3, #4
 8000644:	0112      	lsls	r2, r2, #4
 8000646:	b2d2      	uxtb	r2, r2
 8000648:	440b      	add	r3, r1
 800064a:	761a      	strb	r2, [r3, #24]
}
 800064c:	bf00      	nop
 800064e:	370c      	adds	r7, #12
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr
 8000658:	e000e100 	.word	0xe000e100
 800065c:	e000ed00 	.word	0xe000ed00

08000660 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000660:	b480      	push	{r7}
 8000662:	b089      	sub	sp, #36	; 0x24
 8000664:	af00      	add	r7, sp, #0
 8000666:	60f8      	str	r0, [r7, #12]
 8000668:	60b9      	str	r1, [r7, #8]
 800066a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	f003 0307 	and.w	r3, r3, #7
 8000672:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000674:	69fb      	ldr	r3, [r7, #28]
 8000676:	f1c3 0307 	rsb	r3, r3, #7
 800067a:	2b04      	cmp	r3, #4
 800067c:	bf28      	it	cs
 800067e:	2304      	movcs	r3, #4
 8000680:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000682:	69fb      	ldr	r3, [r7, #28]
 8000684:	3304      	adds	r3, #4
 8000686:	2b06      	cmp	r3, #6
 8000688:	d902      	bls.n	8000690 <NVIC_EncodePriority+0x30>
 800068a:	69fb      	ldr	r3, [r7, #28]
 800068c:	3b03      	subs	r3, #3
 800068e:	e000      	b.n	8000692 <NVIC_EncodePriority+0x32>
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000694:	f04f 32ff 	mov.w	r2, #4294967295
 8000698:	69bb      	ldr	r3, [r7, #24]
 800069a:	fa02 f303 	lsl.w	r3, r2, r3
 800069e:	43da      	mvns	r2, r3
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	401a      	ands	r2, r3
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006a8:	f04f 31ff 	mov.w	r1, #4294967295
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	fa01 f303 	lsl.w	r3, r1, r3
 80006b2:	43d9      	mvns	r1, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b8:	4313      	orrs	r3, r2
         );
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3724      	adds	r7, #36	; 0x24
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr

080006c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b082      	sub	sp, #8
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006ce:	6878      	ldr	r0, [r7, #4]
 80006d0:	f7ff ff4c 	bl	800056c <__NVIC_SetPriorityGrouping>
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
 80006e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80006ee:	f7ff ff61 	bl	80005b4 <__NVIC_GetPriorityGrouping>
 80006f2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006f4:	687a      	ldr	r2, [r7, #4]
 80006f6:	68b9      	ldr	r1, [r7, #8]
 80006f8:	6978      	ldr	r0, [r7, #20]
 80006fa:	f7ff ffb1 	bl	8000660 <NVIC_EncodePriority>
 80006fe:	4602      	mov	r2, r0
 8000700:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000704:	4611      	mov	r1, r2
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff ff80 	bl	800060c <__NVIC_SetPriority>
}
 800070c:	bf00      	nop
 800070e:	3718      	adds	r7, #24
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800071e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000722:	4618      	mov	r0, r3
 8000724:	f7ff ff54 	bl	80005d0 <__NVIC_EnableIRQ>
}
 8000728:	bf00      	nop
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000730:	b480      	push	{r7}
 8000732:	b089      	sub	sp, #36	; 0x24
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800073a:	2300      	movs	r3, #0
 800073c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800073e:	2300      	movs	r3, #0
 8000740:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000742:	2300      	movs	r3, #0
 8000744:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000746:	2300      	movs	r3, #0
 8000748:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800074a:	2300      	movs	r3, #0
 800074c:	61fb      	str	r3, [r7, #28]
 800074e:	e175      	b.n	8000a3c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000750:	2201      	movs	r2, #1
 8000752:	69fb      	ldr	r3, [r7, #28]
 8000754:	fa02 f303 	lsl.w	r3, r2, r3
 8000758:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	697a      	ldr	r2, [r7, #20]
 8000760:	4013      	ands	r3, r2
 8000762:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000764:	693a      	ldr	r2, [r7, #16]
 8000766:	697b      	ldr	r3, [r7, #20]
 8000768:	429a      	cmp	r2, r3
 800076a:	f040 8164 	bne.w	8000a36 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	685b      	ldr	r3, [r3, #4]
 8000772:	2b02      	cmp	r3, #2
 8000774:	d003      	beq.n	800077e <HAL_GPIO_Init+0x4e>
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	685b      	ldr	r3, [r3, #4]
 800077a:	2b12      	cmp	r3, #18
 800077c:	d123      	bne.n	80007c6 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800077e:	69fb      	ldr	r3, [r7, #28]
 8000780:	08da      	lsrs	r2, r3, #3
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	3208      	adds	r2, #8
 8000786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800078a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800078c:	69fb      	ldr	r3, [r7, #28]
 800078e:	f003 0307 	and.w	r3, r3, #7
 8000792:	009b      	lsls	r3, r3, #2
 8000794:	220f      	movs	r2, #15
 8000796:	fa02 f303 	lsl.w	r3, r2, r3
 800079a:	43db      	mvns	r3, r3
 800079c:	69ba      	ldr	r2, [r7, #24]
 800079e:	4013      	ands	r3, r2
 80007a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	691a      	ldr	r2, [r3, #16]
 80007a6:	69fb      	ldr	r3, [r7, #28]
 80007a8:	f003 0307 	and.w	r3, r3, #7
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	fa02 f303 	lsl.w	r3, r2, r3
 80007b2:	69ba      	ldr	r2, [r7, #24]
 80007b4:	4313      	orrs	r3, r2
 80007b6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80007b8:	69fb      	ldr	r3, [r7, #28]
 80007ba:	08da      	lsrs	r2, r3, #3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	3208      	adds	r2, #8
 80007c0:	69b9      	ldr	r1, [r7, #24]
 80007c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80007cc:	69fb      	ldr	r3, [r7, #28]
 80007ce:	005b      	lsls	r3, r3, #1
 80007d0:	2203      	movs	r2, #3
 80007d2:	fa02 f303 	lsl.w	r3, r2, r3
 80007d6:	43db      	mvns	r3, r3
 80007d8:	69ba      	ldr	r2, [r7, #24]
 80007da:	4013      	ands	r3, r2
 80007dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	f003 0203 	and.w	r2, r3, #3
 80007e6:	69fb      	ldr	r3, [r7, #28]
 80007e8:	005b      	lsls	r3, r3, #1
 80007ea:	fa02 f303 	lsl.w	r3, r2, r3
 80007ee:	69ba      	ldr	r2, [r7, #24]
 80007f0:	4313      	orrs	r3, r2
 80007f2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	69ba      	ldr	r2, [r7, #24]
 80007f8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d00b      	beq.n	800081a <HAL_GPIO_Init+0xea>
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	685b      	ldr	r3, [r3, #4]
 8000806:	2b02      	cmp	r3, #2
 8000808:	d007      	beq.n	800081a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800080e:	2b11      	cmp	r3, #17
 8000810:	d003      	beq.n	800081a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	685b      	ldr	r3, [r3, #4]
 8000816:	2b12      	cmp	r3, #18
 8000818:	d130      	bne.n	800087c <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	689b      	ldr	r3, [r3, #8]
 800081e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000820:	69fb      	ldr	r3, [r7, #28]
 8000822:	005b      	lsls	r3, r3, #1
 8000824:	2203      	movs	r2, #3
 8000826:	fa02 f303 	lsl.w	r3, r2, r3
 800082a:	43db      	mvns	r3, r3
 800082c:	69ba      	ldr	r2, [r7, #24]
 800082e:	4013      	ands	r3, r2
 8000830:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	68da      	ldr	r2, [r3, #12]
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	005b      	lsls	r3, r3, #1
 800083a:	fa02 f303 	lsl.w	r3, r2, r3
 800083e:	69ba      	ldr	r2, [r7, #24]
 8000840:	4313      	orrs	r3, r2
 8000842:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	69ba      	ldr	r2, [r7, #24]
 8000848:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000850:	2201      	movs	r2, #1
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	fa02 f303 	lsl.w	r3, r2, r3
 8000858:	43db      	mvns	r3, r3
 800085a:	69ba      	ldr	r2, [r7, #24]
 800085c:	4013      	ands	r3, r2
 800085e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	091b      	lsrs	r3, r3, #4
 8000866:	f003 0201 	and.w	r2, r3, #1
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	fa02 f303 	lsl.w	r3, r2, r3
 8000870:	69ba      	ldr	r2, [r7, #24]
 8000872:	4313      	orrs	r3, r2
 8000874:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	69ba      	ldr	r2, [r7, #24]
 800087a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	68db      	ldr	r3, [r3, #12]
 8000880:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	2203      	movs	r2, #3
 8000888:	fa02 f303 	lsl.w	r3, r2, r3
 800088c:	43db      	mvns	r3, r3
 800088e:	69ba      	ldr	r2, [r7, #24]
 8000890:	4013      	ands	r3, r2
 8000892:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	689a      	ldr	r2, [r3, #8]
 8000898:	69fb      	ldr	r3, [r7, #28]
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	fa02 f303 	lsl.w	r3, r2, r3
 80008a0:	69ba      	ldr	r2, [r7, #24]
 80008a2:	4313      	orrs	r3, r2
 80008a4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	69ba      	ldr	r2, [r7, #24]
 80008aa:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	f000 80be 	beq.w	8000a36 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ba:	4b65      	ldr	r3, [pc, #404]	; (8000a50 <HAL_GPIO_Init+0x320>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008be:	4a64      	ldr	r2, [pc, #400]	; (8000a50 <HAL_GPIO_Init+0x320>)
 80008c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008c4:	6453      	str	r3, [r2, #68]	; 0x44
 80008c6:	4b62      	ldr	r3, [pc, #392]	; (8000a50 <HAL_GPIO_Init+0x320>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80008d2:	4a60      	ldr	r2, [pc, #384]	; (8000a54 <HAL_GPIO_Init+0x324>)
 80008d4:	69fb      	ldr	r3, [r7, #28]
 80008d6:	089b      	lsrs	r3, r3, #2
 80008d8:	3302      	adds	r3, #2
 80008da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008de:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80008e0:	69fb      	ldr	r3, [r7, #28]
 80008e2:	f003 0303 	and.w	r3, r3, #3
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	220f      	movs	r2, #15
 80008ea:	fa02 f303 	lsl.w	r3, r2, r3
 80008ee:	43db      	mvns	r3, r3
 80008f0:	69ba      	ldr	r2, [r7, #24]
 80008f2:	4013      	ands	r3, r2
 80008f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4a57      	ldr	r2, [pc, #348]	; (8000a58 <HAL_GPIO_Init+0x328>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d037      	beq.n	800096e <HAL_GPIO_Init+0x23e>
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4a56      	ldr	r2, [pc, #344]	; (8000a5c <HAL_GPIO_Init+0x32c>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d031      	beq.n	800096a <HAL_GPIO_Init+0x23a>
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4a55      	ldr	r2, [pc, #340]	; (8000a60 <HAL_GPIO_Init+0x330>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d02b      	beq.n	8000966 <HAL_GPIO_Init+0x236>
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4a54      	ldr	r2, [pc, #336]	; (8000a64 <HAL_GPIO_Init+0x334>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d025      	beq.n	8000962 <HAL_GPIO_Init+0x232>
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4a53      	ldr	r2, [pc, #332]	; (8000a68 <HAL_GPIO_Init+0x338>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d01f      	beq.n	800095e <HAL_GPIO_Init+0x22e>
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4a52      	ldr	r2, [pc, #328]	; (8000a6c <HAL_GPIO_Init+0x33c>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d019      	beq.n	800095a <HAL_GPIO_Init+0x22a>
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4a51      	ldr	r2, [pc, #324]	; (8000a70 <HAL_GPIO_Init+0x340>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d013      	beq.n	8000956 <HAL_GPIO_Init+0x226>
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4a50      	ldr	r2, [pc, #320]	; (8000a74 <HAL_GPIO_Init+0x344>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d00d      	beq.n	8000952 <HAL_GPIO_Init+0x222>
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4a4f      	ldr	r2, [pc, #316]	; (8000a78 <HAL_GPIO_Init+0x348>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d007      	beq.n	800094e <HAL_GPIO_Init+0x21e>
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4a4e      	ldr	r2, [pc, #312]	; (8000a7c <HAL_GPIO_Init+0x34c>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d101      	bne.n	800094a <HAL_GPIO_Init+0x21a>
 8000946:	2309      	movs	r3, #9
 8000948:	e012      	b.n	8000970 <HAL_GPIO_Init+0x240>
 800094a:	230a      	movs	r3, #10
 800094c:	e010      	b.n	8000970 <HAL_GPIO_Init+0x240>
 800094e:	2308      	movs	r3, #8
 8000950:	e00e      	b.n	8000970 <HAL_GPIO_Init+0x240>
 8000952:	2307      	movs	r3, #7
 8000954:	e00c      	b.n	8000970 <HAL_GPIO_Init+0x240>
 8000956:	2306      	movs	r3, #6
 8000958:	e00a      	b.n	8000970 <HAL_GPIO_Init+0x240>
 800095a:	2305      	movs	r3, #5
 800095c:	e008      	b.n	8000970 <HAL_GPIO_Init+0x240>
 800095e:	2304      	movs	r3, #4
 8000960:	e006      	b.n	8000970 <HAL_GPIO_Init+0x240>
 8000962:	2303      	movs	r3, #3
 8000964:	e004      	b.n	8000970 <HAL_GPIO_Init+0x240>
 8000966:	2302      	movs	r3, #2
 8000968:	e002      	b.n	8000970 <HAL_GPIO_Init+0x240>
 800096a:	2301      	movs	r3, #1
 800096c:	e000      	b.n	8000970 <HAL_GPIO_Init+0x240>
 800096e:	2300      	movs	r3, #0
 8000970:	69fa      	ldr	r2, [r7, #28]
 8000972:	f002 0203 	and.w	r2, r2, #3
 8000976:	0092      	lsls	r2, r2, #2
 8000978:	4093      	lsls	r3, r2
 800097a:	69ba      	ldr	r2, [r7, #24]
 800097c:	4313      	orrs	r3, r2
 800097e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000980:	4934      	ldr	r1, [pc, #208]	; (8000a54 <HAL_GPIO_Init+0x324>)
 8000982:	69fb      	ldr	r3, [r7, #28]
 8000984:	089b      	lsrs	r3, r3, #2
 8000986:	3302      	adds	r3, #2
 8000988:	69ba      	ldr	r2, [r7, #24]
 800098a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800098e:	4b3c      	ldr	r3, [pc, #240]	; (8000a80 <HAL_GPIO_Init+0x350>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000994:	693b      	ldr	r3, [r7, #16]
 8000996:	43db      	mvns	r3, r3
 8000998:	69ba      	ldr	r2, [r7, #24]
 800099a:	4013      	ands	r3, r2
 800099c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d003      	beq.n	80009b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80009aa:	69ba      	ldr	r2, [r7, #24]
 80009ac:	693b      	ldr	r3, [r7, #16]
 80009ae:	4313      	orrs	r3, r2
 80009b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80009b2:	4a33      	ldr	r2, [pc, #204]	; (8000a80 <HAL_GPIO_Init+0x350>)
 80009b4:	69bb      	ldr	r3, [r7, #24]
 80009b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80009b8:	4b31      	ldr	r3, [pc, #196]	; (8000a80 <HAL_GPIO_Init+0x350>)
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009be:	693b      	ldr	r3, [r7, #16]
 80009c0:	43db      	mvns	r3, r3
 80009c2:	69ba      	ldr	r2, [r7, #24]
 80009c4:	4013      	ands	r3, r2
 80009c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d003      	beq.n	80009dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80009d4:	69ba      	ldr	r2, [r7, #24]
 80009d6:	693b      	ldr	r3, [r7, #16]
 80009d8:	4313      	orrs	r3, r2
 80009da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80009dc:	4a28      	ldr	r2, [pc, #160]	; (8000a80 <HAL_GPIO_Init+0x350>)
 80009de:	69bb      	ldr	r3, [r7, #24]
 80009e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80009e2:	4b27      	ldr	r3, [pc, #156]	; (8000a80 <HAL_GPIO_Init+0x350>)
 80009e4:	689b      	ldr	r3, [r3, #8]
 80009e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009e8:	693b      	ldr	r3, [r7, #16]
 80009ea:	43db      	mvns	r3, r3
 80009ec:	69ba      	ldr	r2, [r7, #24]
 80009ee:	4013      	ands	r3, r2
 80009f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d003      	beq.n	8000a06 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80009fe:	69ba      	ldr	r2, [r7, #24]
 8000a00:	693b      	ldr	r3, [r7, #16]
 8000a02:	4313      	orrs	r3, r2
 8000a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a06:	4a1e      	ldr	r2, [pc, #120]	; (8000a80 <HAL_GPIO_Init+0x350>)
 8000a08:	69bb      	ldr	r3, [r7, #24]
 8000a0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a0c:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <HAL_GPIO_Init+0x350>)
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a12:	693b      	ldr	r3, [r7, #16]
 8000a14:	43db      	mvns	r3, r3
 8000a16:	69ba      	ldr	r2, [r7, #24]
 8000a18:	4013      	ands	r3, r2
 8000a1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d003      	beq.n	8000a30 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000a28:	69ba      	ldr	r2, [r7, #24]
 8000a2a:	693b      	ldr	r3, [r7, #16]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000a30:	4a13      	ldr	r2, [pc, #76]	; (8000a80 <HAL_GPIO_Init+0x350>)
 8000a32:	69bb      	ldr	r3, [r7, #24]
 8000a34:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000a36:	69fb      	ldr	r3, [r7, #28]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	61fb      	str	r3, [r7, #28]
 8000a3c:	69fb      	ldr	r3, [r7, #28]
 8000a3e:	2b0f      	cmp	r3, #15
 8000a40:	f67f ae86 	bls.w	8000750 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000a44:	bf00      	nop
 8000a46:	3724      	adds	r7, #36	; 0x24
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40013800 	.word	0x40013800
 8000a58:	40020000 	.word	0x40020000
 8000a5c:	40020400 	.word	0x40020400
 8000a60:	40020800 	.word	0x40020800
 8000a64:	40020c00 	.word	0x40020c00
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	40021400 	.word	0x40021400
 8000a70:	40021800 	.word	0x40021800
 8000a74:	40021c00 	.word	0x40021c00
 8000a78:	40022000 	.word	0x40022000
 8000a7c:	40022400 	.word	0x40022400
 8000a80:	40013c00 	.word	0x40013c00

08000a84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	460b      	mov	r3, r1
 8000a8e:	807b      	strh	r3, [r7, #2]
 8000a90:	4613      	mov	r3, r2
 8000a92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000a94:	787b      	ldrb	r3, [r7, #1]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d003      	beq.n	8000aa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000a9a:	887a      	ldrh	r2, [r7, #2]
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8000aa0:	e003      	b.n	8000aaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000aa2:	887b      	ldrh	r3, [r7, #2]
 8000aa4:	041a      	lsls	r2, r3, #16
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	619a      	str	r2, [r3, #24]
}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
	...

08000ab8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d101      	bne.n	8000ace <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
 8000acc:	e25c      	b.n	8000f88 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	f000 8087 	beq.w	8000bea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000adc:	4b96      	ldr	r3, [pc, #600]	; (8000d38 <HAL_RCC_OscConfig+0x280>)
 8000ade:	689b      	ldr	r3, [r3, #8]
 8000ae0:	f003 030c 	and.w	r3, r3, #12
 8000ae4:	2b04      	cmp	r3, #4
 8000ae6:	d00c      	beq.n	8000b02 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ae8:	4b93      	ldr	r3, [pc, #588]	; (8000d38 <HAL_RCC_OscConfig+0x280>)
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	f003 030c 	and.w	r3, r3, #12
 8000af0:	2b08      	cmp	r3, #8
 8000af2:	d112      	bne.n	8000b1a <HAL_RCC_OscConfig+0x62>
 8000af4:	4b90      	ldr	r3, [pc, #576]	; (8000d38 <HAL_RCC_OscConfig+0x280>)
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000afc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000b00:	d10b      	bne.n	8000b1a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b02:	4b8d      	ldr	r3, [pc, #564]	; (8000d38 <HAL_RCC_OscConfig+0x280>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d06c      	beq.n	8000be8 <HAL_RCC_OscConfig+0x130>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d168      	bne.n	8000be8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	e236      	b.n	8000f88 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b22:	d106      	bne.n	8000b32 <HAL_RCC_OscConfig+0x7a>
 8000b24:	4b84      	ldr	r3, [pc, #528]	; (8000d38 <HAL_RCC_OscConfig+0x280>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a83      	ldr	r2, [pc, #524]	; (8000d38 <HAL_RCC_OscConfig+0x280>)
 8000b2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b2e:	6013      	str	r3, [r2, #0]
 8000b30:	e02e      	b.n	8000b90 <HAL_RCC_OscConfig+0xd8>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d10c      	bne.n	8000b54 <HAL_RCC_OscConfig+0x9c>
 8000b3a:	4b7f      	ldr	r3, [pc, #508]	; (8000d38 <HAL_RCC_OscConfig+0x280>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a7e      	ldr	r2, [pc, #504]	; (8000d38 <HAL_RCC_OscConfig+0x280>)
 8000b40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b44:	6013      	str	r3, [r2, #0]
 8000b46:	4b7c      	ldr	r3, [pc, #496]	; (8000d38 <HAL_RCC_OscConfig+0x280>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a7b      	ldr	r2, [pc, #492]	; (8000d38 <HAL_RCC_OscConfig+0x280>)
 8000b4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b50:	6013      	str	r3, [r2, #0]
 8000b52:	e01d      	b.n	8000b90 <HAL_RCC_OscConfig+0xd8>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b5c:	d10c      	bne.n	8000b78 <HAL_RCC_OscConfig+0xc0>
 8000b5e:	4b76      	ldr	r3, [pc, #472]	; (8000d38 <HAL_RCC_OscConfig+0x280>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a75      	ldr	r2, [pc, #468]	; (8000d38 <HAL_RCC_OscConfig+0x280>)
 8000b64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b68:	6013      	str	r3, [r2, #0]
 8000b6a:	4b73      	ldr	r3, [pc, #460]	; (8000d38 <HAL_RCC_OscConfig+0x280>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a72      	ldr	r2, [pc, #456]	; (8000d38 <HAL_RCC_OscConfig+0x280>)
 8000b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b74:	6013      	str	r3, [r2, #0]
 8000b76:	e00b      	b.n	8000b90 <HAL_RCC_OscConfig+0xd8>
 8000b78:	4b6f      	ldr	r3, [pc, #444]	; (8000d38 <HAL_RCC_OscConfig+0x280>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a6e      	ldr	r2, [pc, #440]	; (8000d38 <HAL_RCC_OscConfig+0x280>)
 8000b7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b82:	6013      	str	r3, [r2, #0]
 8000b84:	4b6c      	ldr	r3, [pc, #432]	; (8000d38 <HAL_RCC_OscConfig+0x280>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a6b      	ldr	r2, [pc, #428]	; (8000d38 <HAL_RCC_OscConfig+0x280>)
 8000b8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d013      	beq.n	8000bc0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b98:	f7ff fcdc 	bl	8000554 <HAL_GetTick>
 8000b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b9e:	e008      	b.n	8000bb2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ba0:	f7ff fcd8 	bl	8000554 <HAL_GetTick>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	2b64      	cmp	r3, #100	; 0x64
 8000bac:	d901      	bls.n	8000bb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000bae:	2303      	movs	r3, #3
 8000bb0:	e1ea      	b.n	8000f88 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bb2:	4b61      	ldr	r3, [pc, #388]	; (8000d38 <HAL_RCC_OscConfig+0x280>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d0f0      	beq.n	8000ba0 <HAL_RCC_OscConfig+0xe8>
 8000bbe:	e014      	b.n	8000bea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000bc0:	f7ff fcc8 	bl	8000554 <HAL_GetTick>
 8000bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bc6:	e008      	b.n	8000bda <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bc8:	f7ff fcc4 	bl	8000554 <HAL_GetTick>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	2b64      	cmp	r3, #100	; 0x64
 8000bd4:	d901      	bls.n	8000bda <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	e1d6      	b.n	8000f88 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bda:	4b57      	ldr	r3, [pc, #348]	; (8000d38 <HAL_RCC_OscConfig+0x280>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d1f0      	bne.n	8000bc8 <HAL_RCC_OscConfig+0x110>
 8000be6:	e000      	b.n	8000bea <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000be8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f003 0302 	and.w	r3, r3, #2
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d069      	beq.n	8000cca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000bf6:	4b50      	ldr	r3, [pc, #320]	; (8000d38 <HAL_RCC_OscConfig+0x280>)
 8000bf8:	689b      	ldr	r3, [r3, #8]
 8000bfa:	f003 030c 	and.w	r3, r3, #12
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d00b      	beq.n	8000c1a <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c02:	4b4d      	ldr	r3, [pc, #308]	; (8000d38 <HAL_RCC_OscConfig+0x280>)
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	f003 030c 	and.w	r3, r3, #12
 8000c0a:	2b08      	cmp	r3, #8
 8000c0c:	d11c      	bne.n	8000c48 <HAL_RCC_OscConfig+0x190>
 8000c0e:	4b4a      	ldr	r3, [pc, #296]	; (8000d38 <HAL_RCC_OscConfig+0x280>)
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d116      	bne.n	8000c48 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c1a:	4b47      	ldr	r3, [pc, #284]	; (8000d38 <HAL_RCC_OscConfig+0x280>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f003 0302 	and.w	r3, r3, #2
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d005      	beq.n	8000c32 <HAL_RCC_OscConfig+0x17a>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	68db      	ldr	r3, [r3, #12]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d001      	beq.n	8000c32 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e1aa      	b.n	8000f88 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c32:	4b41      	ldr	r3, [pc, #260]	; (8000d38 <HAL_RCC_OscConfig+0x280>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	691b      	ldr	r3, [r3, #16]
 8000c3e:	00db      	lsls	r3, r3, #3
 8000c40:	493d      	ldr	r1, [pc, #244]	; (8000d38 <HAL_RCC_OscConfig+0x280>)
 8000c42:	4313      	orrs	r3, r2
 8000c44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c46:	e040      	b.n	8000cca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d023      	beq.n	8000c98 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c50:	4b39      	ldr	r3, [pc, #228]	; (8000d38 <HAL_RCC_OscConfig+0x280>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a38      	ldr	r2, [pc, #224]	; (8000d38 <HAL_RCC_OscConfig+0x280>)
 8000c56:	f043 0301 	orr.w	r3, r3, #1
 8000c5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c5c:	f7ff fc7a 	bl	8000554 <HAL_GetTick>
 8000c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c62:	e008      	b.n	8000c76 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c64:	f7ff fc76 	bl	8000554 <HAL_GetTick>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	1ad3      	subs	r3, r2, r3
 8000c6e:	2b02      	cmp	r3, #2
 8000c70:	d901      	bls.n	8000c76 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8000c72:	2303      	movs	r3, #3
 8000c74:	e188      	b.n	8000f88 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c76:	4b30      	ldr	r3, [pc, #192]	; (8000d38 <HAL_RCC_OscConfig+0x280>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f003 0302 	and.w	r3, r3, #2
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d0f0      	beq.n	8000c64 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c82:	4b2d      	ldr	r3, [pc, #180]	; (8000d38 <HAL_RCC_OscConfig+0x280>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	691b      	ldr	r3, [r3, #16]
 8000c8e:	00db      	lsls	r3, r3, #3
 8000c90:	4929      	ldr	r1, [pc, #164]	; (8000d38 <HAL_RCC_OscConfig+0x280>)
 8000c92:	4313      	orrs	r3, r2
 8000c94:	600b      	str	r3, [r1, #0]
 8000c96:	e018      	b.n	8000cca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c98:	4b27      	ldr	r3, [pc, #156]	; (8000d38 <HAL_RCC_OscConfig+0x280>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a26      	ldr	r2, [pc, #152]	; (8000d38 <HAL_RCC_OscConfig+0x280>)
 8000c9e:	f023 0301 	bic.w	r3, r3, #1
 8000ca2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ca4:	f7ff fc56 	bl	8000554 <HAL_GetTick>
 8000ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000caa:	e008      	b.n	8000cbe <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cac:	f7ff fc52 	bl	8000554 <HAL_GetTick>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	2b02      	cmp	r3, #2
 8000cb8:	d901      	bls.n	8000cbe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	e164      	b.n	8000f88 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cbe:	4b1e      	ldr	r3, [pc, #120]	; (8000d38 <HAL_RCC_OscConfig+0x280>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f003 0302 	and.w	r3, r3, #2
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d1f0      	bne.n	8000cac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f003 0308 	and.w	r3, r3, #8
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d038      	beq.n	8000d48 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	695b      	ldr	r3, [r3, #20]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d019      	beq.n	8000d12 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000cde:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <HAL_RCC_OscConfig+0x280>)
 8000ce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ce2:	4a15      	ldr	r2, [pc, #84]	; (8000d38 <HAL_RCC_OscConfig+0x280>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000cea:	f7ff fc33 	bl	8000554 <HAL_GetTick>
 8000cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cf0:	e008      	b.n	8000d04 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cf2:	f7ff fc2f 	bl	8000554 <HAL_GetTick>
 8000cf6:	4602      	mov	r2, r0
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	1ad3      	subs	r3, r2, r3
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	d901      	bls.n	8000d04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000d00:	2303      	movs	r3, #3
 8000d02:	e141      	b.n	8000f88 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d04:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <HAL_RCC_OscConfig+0x280>)
 8000d06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d08:	f003 0302 	and.w	r3, r3, #2
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d0f0      	beq.n	8000cf2 <HAL_RCC_OscConfig+0x23a>
 8000d10:	e01a      	b.n	8000d48 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d12:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <HAL_RCC_OscConfig+0x280>)
 8000d14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d16:	4a08      	ldr	r2, [pc, #32]	; (8000d38 <HAL_RCC_OscConfig+0x280>)
 8000d18:	f023 0301 	bic.w	r3, r3, #1
 8000d1c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d1e:	f7ff fc19 	bl	8000554 <HAL_GetTick>
 8000d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d24:	e00a      	b.n	8000d3c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d26:	f7ff fc15 	bl	8000554 <HAL_GetTick>
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	1ad3      	subs	r3, r2, r3
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	d903      	bls.n	8000d3c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8000d34:	2303      	movs	r3, #3
 8000d36:	e127      	b.n	8000f88 <HAL_RCC_OscConfig+0x4d0>
 8000d38:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d3c:	4b94      	ldr	r3, [pc, #592]	; (8000f90 <HAL_RCC_OscConfig+0x4d8>)
 8000d3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d40:	f003 0302 	and.w	r3, r3, #2
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d1ee      	bne.n	8000d26 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f003 0304 	and.w	r3, r3, #4
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	f000 80a4 	beq.w	8000e9e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d56:	4b8e      	ldr	r3, [pc, #568]	; (8000f90 <HAL_RCC_OscConfig+0x4d8>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d10d      	bne.n	8000d7e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d62:	4b8b      	ldr	r3, [pc, #556]	; (8000f90 <HAL_RCC_OscConfig+0x4d8>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	4a8a      	ldr	r2, [pc, #552]	; (8000f90 <HAL_RCC_OscConfig+0x4d8>)
 8000d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6e:	4b88      	ldr	r3, [pc, #544]	; (8000f90 <HAL_RCC_OscConfig+0x4d8>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000d7e:	4b85      	ldr	r3, [pc, #532]	; (8000f94 <HAL_RCC_OscConfig+0x4dc>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d118      	bne.n	8000dbc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8000d8a:	4b82      	ldr	r3, [pc, #520]	; (8000f94 <HAL_RCC_OscConfig+0x4dc>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a81      	ldr	r2, [pc, #516]	; (8000f94 <HAL_RCC_OscConfig+0x4dc>)
 8000d90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d96:	f7ff fbdd 	bl	8000554 <HAL_GetTick>
 8000d9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000d9c:	e008      	b.n	8000db0 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000d9e:	f7ff fbd9 	bl	8000554 <HAL_GetTick>
 8000da2:	4602      	mov	r2, r0
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	1ad3      	subs	r3, r2, r3
 8000da8:	2b64      	cmp	r3, #100	; 0x64
 8000daa:	d901      	bls.n	8000db0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8000dac:	2303      	movs	r3, #3
 8000dae:	e0eb      	b.n	8000f88 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000db0:	4b78      	ldr	r3, [pc, #480]	; (8000f94 <HAL_RCC_OscConfig+0x4dc>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d0f0      	beq.n	8000d9e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d106      	bne.n	8000dd2 <HAL_RCC_OscConfig+0x31a>
 8000dc4:	4b72      	ldr	r3, [pc, #456]	; (8000f90 <HAL_RCC_OscConfig+0x4d8>)
 8000dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dc8:	4a71      	ldr	r2, [pc, #452]	; (8000f90 <HAL_RCC_OscConfig+0x4d8>)
 8000dca:	f043 0301 	orr.w	r3, r3, #1
 8000dce:	6713      	str	r3, [r2, #112]	; 0x70
 8000dd0:	e02d      	b.n	8000e2e <HAL_RCC_OscConfig+0x376>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d10c      	bne.n	8000df4 <HAL_RCC_OscConfig+0x33c>
 8000dda:	4b6d      	ldr	r3, [pc, #436]	; (8000f90 <HAL_RCC_OscConfig+0x4d8>)
 8000ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dde:	4a6c      	ldr	r2, [pc, #432]	; (8000f90 <HAL_RCC_OscConfig+0x4d8>)
 8000de0:	f023 0301 	bic.w	r3, r3, #1
 8000de4:	6713      	str	r3, [r2, #112]	; 0x70
 8000de6:	4b6a      	ldr	r3, [pc, #424]	; (8000f90 <HAL_RCC_OscConfig+0x4d8>)
 8000de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dea:	4a69      	ldr	r2, [pc, #420]	; (8000f90 <HAL_RCC_OscConfig+0x4d8>)
 8000dec:	f023 0304 	bic.w	r3, r3, #4
 8000df0:	6713      	str	r3, [r2, #112]	; 0x70
 8000df2:	e01c      	b.n	8000e2e <HAL_RCC_OscConfig+0x376>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	2b05      	cmp	r3, #5
 8000dfa:	d10c      	bne.n	8000e16 <HAL_RCC_OscConfig+0x35e>
 8000dfc:	4b64      	ldr	r3, [pc, #400]	; (8000f90 <HAL_RCC_OscConfig+0x4d8>)
 8000dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e00:	4a63      	ldr	r2, [pc, #396]	; (8000f90 <HAL_RCC_OscConfig+0x4d8>)
 8000e02:	f043 0304 	orr.w	r3, r3, #4
 8000e06:	6713      	str	r3, [r2, #112]	; 0x70
 8000e08:	4b61      	ldr	r3, [pc, #388]	; (8000f90 <HAL_RCC_OscConfig+0x4d8>)
 8000e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e0c:	4a60      	ldr	r2, [pc, #384]	; (8000f90 <HAL_RCC_OscConfig+0x4d8>)
 8000e0e:	f043 0301 	orr.w	r3, r3, #1
 8000e12:	6713      	str	r3, [r2, #112]	; 0x70
 8000e14:	e00b      	b.n	8000e2e <HAL_RCC_OscConfig+0x376>
 8000e16:	4b5e      	ldr	r3, [pc, #376]	; (8000f90 <HAL_RCC_OscConfig+0x4d8>)
 8000e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e1a:	4a5d      	ldr	r2, [pc, #372]	; (8000f90 <HAL_RCC_OscConfig+0x4d8>)
 8000e1c:	f023 0301 	bic.w	r3, r3, #1
 8000e20:	6713      	str	r3, [r2, #112]	; 0x70
 8000e22:	4b5b      	ldr	r3, [pc, #364]	; (8000f90 <HAL_RCC_OscConfig+0x4d8>)
 8000e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e26:	4a5a      	ldr	r2, [pc, #360]	; (8000f90 <HAL_RCC_OscConfig+0x4d8>)
 8000e28:	f023 0304 	bic.w	r3, r3, #4
 8000e2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d015      	beq.n	8000e62 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e36:	f7ff fb8d 	bl	8000554 <HAL_GetTick>
 8000e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e3c:	e00a      	b.n	8000e54 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e3e:	f7ff fb89 	bl	8000554 <HAL_GetTick>
 8000e42:	4602      	mov	r2, r0
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	1ad3      	subs	r3, r2, r3
 8000e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d901      	bls.n	8000e54 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8000e50:	2303      	movs	r3, #3
 8000e52:	e099      	b.n	8000f88 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e54:	4b4e      	ldr	r3, [pc, #312]	; (8000f90 <HAL_RCC_OscConfig+0x4d8>)
 8000e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e58:	f003 0302 	and.w	r3, r3, #2
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d0ee      	beq.n	8000e3e <HAL_RCC_OscConfig+0x386>
 8000e60:	e014      	b.n	8000e8c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e62:	f7ff fb77 	bl	8000554 <HAL_GetTick>
 8000e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e68:	e00a      	b.n	8000e80 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e6a:	f7ff fb73 	bl	8000554 <HAL_GetTick>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d901      	bls.n	8000e80 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	e083      	b.n	8000f88 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e80:	4b43      	ldr	r3, [pc, #268]	; (8000f90 <HAL_RCC_OscConfig+0x4d8>)
 8000e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e84:	f003 0302 	and.w	r3, r3, #2
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d1ee      	bne.n	8000e6a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000e8c:	7dfb      	ldrb	r3, [r7, #23]
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d105      	bne.n	8000e9e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e92:	4b3f      	ldr	r3, [pc, #252]	; (8000f90 <HAL_RCC_OscConfig+0x4d8>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e96:	4a3e      	ldr	r2, [pc, #248]	; (8000f90 <HAL_RCC_OscConfig+0x4d8>)
 8000e98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e9c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	699b      	ldr	r3, [r3, #24]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d06f      	beq.n	8000f86 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ea6:	4b3a      	ldr	r3, [pc, #232]	; (8000f90 <HAL_RCC_OscConfig+0x4d8>)
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	f003 030c 	and.w	r3, r3, #12
 8000eae:	2b08      	cmp	r3, #8
 8000eb0:	d067      	beq.n	8000f82 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	699b      	ldr	r3, [r3, #24]
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d149      	bne.n	8000f4e <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000eba:	4b35      	ldr	r3, [pc, #212]	; (8000f90 <HAL_RCC_OscConfig+0x4d8>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a34      	ldr	r2, [pc, #208]	; (8000f90 <HAL_RCC_OscConfig+0x4d8>)
 8000ec0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000ec4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ec6:	f7ff fb45 	bl	8000554 <HAL_GetTick>
 8000eca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ecc:	e008      	b.n	8000ee0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ece:	f7ff fb41 	bl	8000554 <HAL_GetTick>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	1ad3      	subs	r3, r2, r3
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d901      	bls.n	8000ee0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8000edc:	2303      	movs	r3, #3
 8000ede:	e053      	b.n	8000f88 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ee0:	4b2b      	ldr	r3, [pc, #172]	; (8000f90 <HAL_RCC_OscConfig+0x4d8>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d1f0      	bne.n	8000ece <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	69da      	ldr	r2, [r3, #28]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6a1b      	ldr	r3, [r3, #32]
 8000ef4:	431a      	orrs	r2, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efa:	019b      	lsls	r3, r3, #6
 8000efc:	431a      	orrs	r2, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f02:	085b      	lsrs	r3, r3, #1
 8000f04:	3b01      	subs	r3, #1
 8000f06:	041b      	lsls	r3, r3, #16
 8000f08:	431a      	orrs	r2, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f0e:	061b      	lsls	r3, r3, #24
 8000f10:	4313      	orrs	r3, r2
 8000f12:	4a1f      	ldr	r2, [pc, #124]	; (8000f90 <HAL_RCC_OscConfig+0x4d8>)
 8000f14:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000f18:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f1a:	4b1d      	ldr	r3, [pc, #116]	; (8000f90 <HAL_RCC_OscConfig+0x4d8>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a1c      	ldr	r2, [pc, #112]	; (8000f90 <HAL_RCC_OscConfig+0x4d8>)
 8000f20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f26:	f7ff fb15 	bl	8000554 <HAL_GetTick>
 8000f2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f2c:	e008      	b.n	8000f40 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f2e:	f7ff fb11 	bl	8000554 <HAL_GetTick>
 8000f32:	4602      	mov	r2, r0
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	1ad3      	subs	r3, r2, r3
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	d901      	bls.n	8000f40 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	e023      	b.n	8000f88 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f40:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <HAL_RCC_OscConfig+0x4d8>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d0f0      	beq.n	8000f2e <HAL_RCC_OscConfig+0x476>
 8000f4c:	e01b      	b.n	8000f86 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f4e:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <HAL_RCC_OscConfig+0x4d8>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a0f      	ldr	r2, [pc, #60]	; (8000f90 <HAL_RCC_OscConfig+0x4d8>)
 8000f54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f5a:	f7ff fafb 	bl	8000554 <HAL_GetTick>
 8000f5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f60:	e008      	b.n	8000f74 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f62:	f7ff faf7 	bl	8000554 <HAL_GetTick>
 8000f66:	4602      	mov	r2, r0
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	1ad3      	subs	r3, r2, r3
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	d901      	bls.n	8000f74 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8000f70:	2303      	movs	r3, #3
 8000f72:	e009      	b.n	8000f88 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f74:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_RCC_OscConfig+0x4d8>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d1f0      	bne.n	8000f62 <HAL_RCC_OscConfig+0x4aa>
 8000f80:	e001      	b.n	8000f86 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e000      	b.n	8000f88 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8000f86:	2300      	movs	r3, #0
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3718      	adds	r7, #24
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40007000 	.word	0x40007000

08000f98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d101      	bne.n	8000fb0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	e0ce      	b.n	800114e <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000fb0:	4b69      	ldr	r3, [pc, #420]	; (8001158 <HAL_RCC_ClockConfig+0x1c0>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f003 030f 	and.w	r3, r3, #15
 8000fb8:	683a      	ldr	r2, [r7, #0]
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d910      	bls.n	8000fe0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fbe:	4b66      	ldr	r3, [pc, #408]	; (8001158 <HAL_RCC_ClockConfig+0x1c0>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f023 020f 	bic.w	r2, r3, #15
 8000fc6:	4964      	ldr	r1, [pc, #400]	; (8001158 <HAL_RCC_ClockConfig+0x1c0>)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fce:	4b62      	ldr	r3, [pc, #392]	; (8001158 <HAL_RCC_ClockConfig+0x1c0>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f003 030f 	and.w	r3, r3, #15
 8000fd6:	683a      	ldr	r2, [r7, #0]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d001      	beq.n	8000fe0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e0b6      	b.n	800114e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f003 0302 	and.w	r3, r3, #2
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d020      	beq.n	800102e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f003 0304 	and.w	r3, r3, #4
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d005      	beq.n	8001004 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000ff8:	4b58      	ldr	r3, [pc, #352]	; (800115c <HAL_RCC_ClockConfig+0x1c4>)
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	4a57      	ldr	r2, [pc, #348]	; (800115c <HAL_RCC_ClockConfig+0x1c4>)
 8000ffe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001002:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f003 0308 	and.w	r3, r3, #8
 800100c:	2b00      	cmp	r3, #0
 800100e:	d005      	beq.n	800101c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001010:	4b52      	ldr	r3, [pc, #328]	; (800115c <HAL_RCC_ClockConfig+0x1c4>)
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	4a51      	ldr	r2, [pc, #324]	; (800115c <HAL_RCC_ClockConfig+0x1c4>)
 8001016:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800101a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800101c:	4b4f      	ldr	r3, [pc, #316]	; (800115c <HAL_RCC_ClockConfig+0x1c4>)
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	494c      	ldr	r1, [pc, #304]	; (800115c <HAL_RCC_ClockConfig+0x1c4>)
 800102a:	4313      	orrs	r3, r2
 800102c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	2b00      	cmp	r3, #0
 8001038:	d040      	beq.n	80010bc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d107      	bne.n	8001052 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001042:	4b46      	ldr	r3, [pc, #280]	; (800115c <HAL_RCC_ClockConfig+0x1c4>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d115      	bne.n	800107a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e07d      	b.n	800114e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	2b02      	cmp	r3, #2
 8001058:	d107      	bne.n	800106a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800105a:	4b40      	ldr	r3, [pc, #256]	; (800115c <HAL_RCC_ClockConfig+0x1c4>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d109      	bne.n	800107a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e071      	b.n	800114e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800106a:	4b3c      	ldr	r3, [pc, #240]	; (800115c <HAL_RCC_ClockConfig+0x1c4>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0302 	and.w	r3, r3, #2
 8001072:	2b00      	cmp	r3, #0
 8001074:	d101      	bne.n	800107a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e069      	b.n	800114e <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800107a:	4b38      	ldr	r3, [pc, #224]	; (800115c <HAL_RCC_ClockConfig+0x1c4>)
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	f023 0203 	bic.w	r2, r3, #3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	4935      	ldr	r1, [pc, #212]	; (800115c <HAL_RCC_ClockConfig+0x1c4>)
 8001088:	4313      	orrs	r3, r2
 800108a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800108c:	f7ff fa62 	bl	8000554 <HAL_GetTick>
 8001090:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001092:	e00a      	b.n	80010aa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001094:	f7ff fa5e 	bl	8000554 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	f241 3288 	movw	r2, #5000	; 0x1388
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d901      	bls.n	80010aa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80010a6:	2303      	movs	r3, #3
 80010a8:	e051      	b.n	800114e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010aa:	4b2c      	ldr	r3, [pc, #176]	; (800115c <HAL_RCC_ClockConfig+0x1c4>)
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	f003 020c 	and.w	r2, r3, #12
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d1eb      	bne.n	8001094 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80010bc:	4b26      	ldr	r3, [pc, #152]	; (8001158 <HAL_RCC_ClockConfig+0x1c0>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f003 030f 	and.w	r3, r3, #15
 80010c4:	683a      	ldr	r2, [r7, #0]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d210      	bcs.n	80010ec <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ca:	4b23      	ldr	r3, [pc, #140]	; (8001158 <HAL_RCC_ClockConfig+0x1c0>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f023 020f 	bic.w	r2, r3, #15
 80010d2:	4921      	ldr	r1, [pc, #132]	; (8001158 <HAL_RCC_ClockConfig+0x1c0>)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010da:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <HAL_RCC_ClockConfig+0x1c0>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 030f 	and.w	r3, r3, #15
 80010e2:	683a      	ldr	r2, [r7, #0]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d001      	beq.n	80010ec <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e030      	b.n	800114e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 0304 	and.w	r3, r3, #4
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d008      	beq.n	800110a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010f8:	4b18      	ldr	r3, [pc, #96]	; (800115c <HAL_RCC_ClockConfig+0x1c4>)
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	4915      	ldr	r1, [pc, #84]	; (800115c <HAL_RCC_ClockConfig+0x1c4>)
 8001106:	4313      	orrs	r3, r2
 8001108:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 0308 	and.w	r3, r3, #8
 8001112:	2b00      	cmp	r3, #0
 8001114:	d009      	beq.n	800112a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001116:	4b11      	ldr	r3, [pc, #68]	; (800115c <HAL_RCC_ClockConfig+0x1c4>)
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	691b      	ldr	r3, [r3, #16]
 8001122:	00db      	lsls	r3, r3, #3
 8001124:	490d      	ldr	r1, [pc, #52]	; (800115c <HAL_RCC_ClockConfig+0x1c4>)
 8001126:	4313      	orrs	r3, r2
 8001128:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800112a:	f000 f81d 	bl	8001168 <HAL_RCC_GetSysClockFreq>
 800112e:	4601      	mov	r1, r0
 8001130:	4b0a      	ldr	r3, [pc, #40]	; (800115c <HAL_RCC_ClockConfig+0x1c4>)
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	091b      	lsrs	r3, r3, #4
 8001136:	f003 030f 	and.w	r3, r3, #15
 800113a:	4a09      	ldr	r2, [pc, #36]	; (8001160 <HAL_RCC_ClockConfig+0x1c8>)
 800113c:	5cd3      	ldrb	r3, [r2, r3]
 800113e:	fa21 f303 	lsr.w	r3, r1, r3
 8001142:	4a08      	ldr	r2, [pc, #32]	; (8001164 <HAL_RCC_ClockConfig+0x1cc>)
 8001144:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001146:	2000      	movs	r0, #0
 8001148:	f002 ff9a 	bl	8004080 <HAL_InitTick>

  return HAL_OK;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40023c00 	.word	0x40023c00
 800115c:	40023800 	.word	0x40023800
 8001160:	08004320 	.word	0x08004320
 8001164:	20000008 	.word	0x20000008

08001168 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	607b      	str	r3, [r7, #4]
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	2300      	movs	r3, #0
 8001178:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800117a:	2300      	movs	r3, #0
 800117c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800117e:	4b50      	ldr	r3, [pc, #320]	; (80012c0 <HAL_RCC_GetSysClockFreq+0x158>)
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f003 030c 	and.w	r3, r3, #12
 8001186:	2b04      	cmp	r3, #4
 8001188:	d007      	beq.n	800119a <HAL_RCC_GetSysClockFreq+0x32>
 800118a:	2b08      	cmp	r3, #8
 800118c:	d008      	beq.n	80011a0 <HAL_RCC_GetSysClockFreq+0x38>
 800118e:	2b00      	cmp	r3, #0
 8001190:	f040 808d 	bne.w	80012ae <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001194:	4b4b      	ldr	r3, [pc, #300]	; (80012c4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001196:	60bb      	str	r3, [r7, #8]
       break;
 8001198:	e08c      	b.n	80012b4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800119a:	4b4b      	ldr	r3, [pc, #300]	; (80012c8 <HAL_RCC_GetSysClockFreq+0x160>)
 800119c:	60bb      	str	r3, [r7, #8]
      break;
 800119e:	e089      	b.n	80012b4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011a0:	4b47      	ldr	r3, [pc, #284]	; (80012c0 <HAL_RCC_GetSysClockFreq+0x158>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011a8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80011aa:	4b45      	ldr	r3, [pc, #276]	; (80012c0 <HAL_RCC_GetSysClockFreq+0x158>)
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d023      	beq.n	80011fe <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011b6:	4b42      	ldr	r3, [pc, #264]	; (80012c0 <HAL_RCC_GetSysClockFreq+0x158>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	099b      	lsrs	r3, r3, #6
 80011bc:	f04f 0400 	mov.w	r4, #0
 80011c0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80011c4:	f04f 0200 	mov.w	r2, #0
 80011c8:	ea03 0501 	and.w	r5, r3, r1
 80011cc:	ea04 0602 	and.w	r6, r4, r2
 80011d0:	4a3d      	ldr	r2, [pc, #244]	; (80012c8 <HAL_RCC_GetSysClockFreq+0x160>)
 80011d2:	fb02 f106 	mul.w	r1, r2, r6
 80011d6:	2200      	movs	r2, #0
 80011d8:	fb02 f205 	mul.w	r2, r2, r5
 80011dc:	440a      	add	r2, r1
 80011de:	493a      	ldr	r1, [pc, #232]	; (80012c8 <HAL_RCC_GetSysClockFreq+0x160>)
 80011e0:	fba5 0101 	umull	r0, r1, r5, r1
 80011e4:	1853      	adds	r3, r2, r1
 80011e6:	4619      	mov	r1, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f04f 0400 	mov.w	r4, #0
 80011ee:	461a      	mov	r2, r3
 80011f0:	4623      	mov	r3, r4
 80011f2:	f7ff f80d 	bl	8000210 <__aeabi_uldivmod>
 80011f6:	4603      	mov	r3, r0
 80011f8:	460c      	mov	r4, r1
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	e049      	b.n	8001292 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011fe:	4b30      	ldr	r3, [pc, #192]	; (80012c0 <HAL_RCC_GetSysClockFreq+0x158>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	099b      	lsrs	r3, r3, #6
 8001204:	f04f 0400 	mov.w	r4, #0
 8001208:	f240 11ff 	movw	r1, #511	; 0x1ff
 800120c:	f04f 0200 	mov.w	r2, #0
 8001210:	ea03 0501 	and.w	r5, r3, r1
 8001214:	ea04 0602 	and.w	r6, r4, r2
 8001218:	4629      	mov	r1, r5
 800121a:	4632      	mov	r2, r6
 800121c:	f04f 0300 	mov.w	r3, #0
 8001220:	f04f 0400 	mov.w	r4, #0
 8001224:	0154      	lsls	r4, r2, #5
 8001226:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800122a:	014b      	lsls	r3, r1, #5
 800122c:	4619      	mov	r1, r3
 800122e:	4622      	mov	r2, r4
 8001230:	1b49      	subs	r1, r1, r5
 8001232:	eb62 0206 	sbc.w	r2, r2, r6
 8001236:	f04f 0300 	mov.w	r3, #0
 800123a:	f04f 0400 	mov.w	r4, #0
 800123e:	0194      	lsls	r4, r2, #6
 8001240:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001244:	018b      	lsls	r3, r1, #6
 8001246:	1a5b      	subs	r3, r3, r1
 8001248:	eb64 0402 	sbc.w	r4, r4, r2
 800124c:	f04f 0100 	mov.w	r1, #0
 8001250:	f04f 0200 	mov.w	r2, #0
 8001254:	00e2      	lsls	r2, r4, #3
 8001256:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800125a:	00d9      	lsls	r1, r3, #3
 800125c:	460b      	mov	r3, r1
 800125e:	4614      	mov	r4, r2
 8001260:	195b      	adds	r3, r3, r5
 8001262:	eb44 0406 	adc.w	r4, r4, r6
 8001266:	f04f 0100 	mov.w	r1, #0
 800126a:	f04f 0200 	mov.w	r2, #0
 800126e:	02a2      	lsls	r2, r4, #10
 8001270:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001274:	0299      	lsls	r1, r3, #10
 8001276:	460b      	mov	r3, r1
 8001278:	4614      	mov	r4, r2
 800127a:	4618      	mov	r0, r3
 800127c:	4621      	mov	r1, r4
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f04f 0400 	mov.w	r4, #0
 8001284:	461a      	mov	r2, r3
 8001286:	4623      	mov	r3, r4
 8001288:	f7fe ffc2 	bl	8000210 <__aeabi_uldivmod>
 800128c:	4603      	mov	r3, r0
 800128e:	460c      	mov	r4, r1
 8001290:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8001292:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <HAL_RCC_GetSysClockFreq+0x158>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	0c1b      	lsrs	r3, r3, #16
 8001298:	f003 0303 	and.w	r3, r3, #3
 800129c:	3301      	adds	r3, #1
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80012a2:	68fa      	ldr	r2, [r7, #12]
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012aa:	60bb      	str	r3, [r7, #8]
      break;
 80012ac:	e002      	b.n	80012b4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80012ae:	4b05      	ldr	r3, [pc, #20]	; (80012c4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80012b0:	60bb      	str	r3, [r7, #8]
      break;
 80012b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012b4:	68bb      	ldr	r3, [r7, #8]
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3714      	adds	r7, #20
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012be:	bf00      	nop
 80012c0:	40023800 	.word	0x40023800
 80012c4:	00f42400 	.word	0x00f42400
 80012c8:	017d7840 	.word	0x017d7840

080012cc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012d0:	4b03      	ldr	r3, [pc, #12]	; (80012e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80012d2:	681b      	ldr	r3, [r3, #0]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	20000008 	.word	0x20000008

080012e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80012e8:	f7ff fff0 	bl	80012cc <HAL_RCC_GetHCLKFreq>
 80012ec:	4601      	mov	r1, r0
 80012ee:	4b05      	ldr	r3, [pc, #20]	; (8001304 <HAL_RCC_GetPCLK1Freq+0x20>)
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	0a9b      	lsrs	r3, r3, #10
 80012f4:	f003 0307 	and.w	r3, r3, #7
 80012f8:	4a03      	ldr	r2, [pc, #12]	; (8001308 <HAL_RCC_GetPCLK1Freq+0x24>)
 80012fa:	5cd3      	ldrb	r3, [r2, r3]
 80012fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001300:	4618      	mov	r0, r3
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40023800 	.word	0x40023800
 8001308:	08004330 	.word	0x08004330

0800130c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	220f      	movs	r2, #15
 800131a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800131c:	4b12      	ldr	r3, [pc, #72]	; (8001368 <HAL_RCC_GetClockConfig+0x5c>)
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	f003 0203 	and.w	r2, r3, #3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001328:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <HAL_RCC_GetClockConfig+0x5c>)
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001334:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <HAL_RCC_GetClockConfig+0x5c>)
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001340:	4b09      	ldr	r3, [pc, #36]	; (8001368 <HAL_RCC_GetClockConfig+0x5c>)
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	08db      	lsrs	r3, r3, #3
 8001346:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800134e:	4b07      	ldr	r3, [pc, #28]	; (800136c <HAL_RCC_GetClockConfig+0x60>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 020f 	and.w	r2, r3, #15
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	601a      	str	r2, [r3, #0]
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	40023800 	.word	0x40023800
 800136c:	40023c00 	.word	0x40023c00

08001370 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d101      	bne.n	8001382 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e01d      	b.n	80013be <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	d106      	bne.n	800139c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f000 f815 	bl	80013c6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2202      	movs	r2, #2
 80013a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3304      	adds	r3, #4
 80013ac:	4619      	mov	r1, r3
 80013ae:	4610      	mov	r0, r2
 80013b0:	f000 f986 	bl	80016c0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2201      	movs	r2, #1
 80013b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80013c6:	b480      	push	{r7}
 80013c8:	b083      	sub	sp, #12
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80013ce:	bf00      	nop
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
	...

080013dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	68da      	ldr	r2, [r3, #12]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f042 0201 	orr.w	r2, r2, #1
 80013f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	689a      	ldr	r2, [r3, #8]
 80013fa:	4b0c      	ldr	r3, [pc, #48]	; (800142c <HAL_TIM_Base_Start_IT+0x50>)
 80013fc:	4013      	ands	r3, r2
 80013fe:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2b06      	cmp	r3, #6
 8001404:	d00b      	beq.n	800141e <HAL_TIM_Base_Start_IT+0x42>
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800140c:	d007      	beq.n	800141e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f042 0201 	orr.w	r2, r2, #1
 800141c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800141e:	2300      	movs	r3, #0
}
 8001420:	4618      	mov	r0, r3
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	00010007 	.word	0x00010007

08001430 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	691b      	ldr	r3, [r3, #16]
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	2b02      	cmp	r3, #2
 8001444:	d122      	bne.n	800148c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	f003 0302 	and.w	r3, r3, #2
 8001450:	2b02      	cmp	r3, #2
 8001452:	d11b      	bne.n	800148c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f06f 0202 	mvn.w	r2, #2
 800145c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2201      	movs	r2, #1
 8001462:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	f003 0303 	and.w	r3, r3, #3
 800146e:	2b00      	cmp	r3, #0
 8001470:	d003      	beq.n	800147a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f000 f905 	bl	8001682 <HAL_TIM_IC_CaptureCallback>
 8001478:	e005      	b.n	8001486 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f000 f8f7 	bl	800166e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f000 f908 	bl	8001696 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	691b      	ldr	r3, [r3, #16]
 8001492:	f003 0304 	and.w	r3, r3, #4
 8001496:	2b04      	cmp	r3, #4
 8001498:	d122      	bne.n	80014e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	f003 0304 	and.w	r3, r3, #4
 80014a4:	2b04      	cmp	r3, #4
 80014a6:	d11b      	bne.n	80014e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f06f 0204 	mvn.w	r2, #4
 80014b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2202      	movs	r2, #2
 80014b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	699b      	ldr	r3, [r3, #24]
 80014be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d003      	beq.n	80014ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f000 f8db 	bl	8001682 <HAL_TIM_IC_CaptureCallback>
 80014cc:	e005      	b.n	80014da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f000 f8cd 	bl	800166e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f000 f8de 	bl	8001696 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	f003 0308 	and.w	r3, r3, #8
 80014ea:	2b08      	cmp	r3, #8
 80014ec:	d122      	bne.n	8001534 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	f003 0308 	and.w	r3, r3, #8
 80014f8:	2b08      	cmp	r3, #8
 80014fa:	d11b      	bne.n	8001534 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f06f 0208 	mvn.w	r2, #8
 8001504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2204      	movs	r2, #4
 800150a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	69db      	ldr	r3, [r3, #28]
 8001512:	f003 0303 	and.w	r3, r3, #3
 8001516:	2b00      	cmp	r3, #0
 8001518:	d003      	beq.n	8001522 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f000 f8b1 	bl	8001682 <HAL_TIM_IC_CaptureCallback>
 8001520:	e005      	b.n	800152e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f000 f8a3 	bl	800166e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f000 f8b4 	bl	8001696 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	691b      	ldr	r3, [r3, #16]
 800153a:	f003 0310 	and.w	r3, r3, #16
 800153e:	2b10      	cmp	r3, #16
 8001540:	d122      	bne.n	8001588 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	f003 0310 	and.w	r3, r3, #16
 800154c:	2b10      	cmp	r3, #16
 800154e:	d11b      	bne.n	8001588 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f06f 0210 	mvn.w	r2, #16
 8001558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2208      	movs	r2, #8
 800155e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800156a:	2b00      	cmp	r3, #0
 800156c:	d003      	beq.n	8001576 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f000 f887 	bl	8001682 <HAL_TIM_IC_CaptureCallback>
 8001574:	e005      	b.n	8001582 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f000 f879 	bl	800166e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f000 f88a 	bl	8001696 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	691b      	ldr	r3, [r3, #16]
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	2b01      	cmp	r3, #1
 8001594:	d10e      	bne.n	80015b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	f003 0301 	and.w	r3, r3, #1
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d107      	bne.n	80015b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f06f 0201 	mvn.w	r2, #1
 80015ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f002 fd24 	bl	8003ffc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	691b      	ldr	r3, [r3, #16]
 80015ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015be:	2b80      	cmp	r3, #128	; 0x80
 80015c0:	d10e      	bne.n	80015e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015cc:	2b80      	cmp	r3, #128	; 0x80
 80015ce:	d107      	bne.n	80015e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80015d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f000 f91a 	bl	8001814 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015ee:	d10e      	bne.n	800160e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015fa:	2b80      	cmp	r3, #128	; 0x80
 80015fc:	d107      	bne.n	800160e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001606:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f000 f90d 	bl	8001828 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	691b      	ldr	r3, [r3, #16]
 8001614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001618:	2b40      	cmp	r3, #64	; 0x40
 800161a:	d10e      	bne.n	800163a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001626:	2b40      	cmp	r3, #64	; 0x40
 8001628:	d107      	bne.n	800163a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001632:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f000 f838 	bl	80016aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	691b      	ldr	r3, [r3, #16]
 8001640:	f003 0320 	and.w	r3, r3, #32
 8001644:	2b20      	cmp	r3, #32
 8001646:	d10e      	bne.n	8001666 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	f003 0320 	and.w	r3, r3, #32
 8001652:	2b20      	cmp	r3, #32
 8001654:	d107      	bne.n	8001666 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f06f 0220 	mvn.w	r2, #32
 800165e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f000 f8cd 	bl	8001800 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001666:	bf00      	nop
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800166e:	b480      	push	{r7}
 8001670:	b083      	sub	sp, #12
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001696:	b480      	push	{r7}
 8001698:	b083      	sub	sp, #12
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80016aa:	b480      	push	{r7}
 80016ac:	b083      	sub	sp, #12
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
	...

080016c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4a40      	ldr	r2, [pc, #256]	; (80017d4 <TIM_Base_SetConfig+0x114>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d013      	beq.n	8001700 <TIM_Base_SetConfig+0x40>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016de:	d00f      	beq.n	8001700 <TIM_Base_SetConfig+0x40>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	4a3d      	ldr	r2, [pc, #244]	; (80017d8 <TIM_Base_SetConfig+0x118>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d00b      	beq.n	8001700 <TIM_Base_SetConfig+0x40>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4a3c      	ldr	r2, [pc, #240]	; (80017dc <TIM_Base_SetConfig+0x11c>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d007      	beq.n	8001700 <TIM_Base_SetConfig+0x40>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4a3b      	ldr	r2, [pc, #236]	; (80017e0 <TIM_Base_SetConfig+0x120>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d003      	beq.n	8001700 <TIM_Base_SetConfig+0x40>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4a3a      	ldr	r2, [pc, #232]	; (80017e4 <TIM_Base_SetConfig+0x124>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d108      	bne.n	8001712 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001706:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	68fa      	ldr	r2, [r7, #12]
 800170e:	4313      	orrs	r3, r2
 8001710:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a2f      	ldr	r2, [pc, #188]	; (80017d4 <TIM_Base_SetConfig+0x114>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d02b      	beq.n	8001772 <TIM_Base_SetConfig+0xb2>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001720:	d027      	beq.n	8001772 <TIM_Base_SetConfig+0xb2>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a2c      	ldr	r2, [pc, #176]	; (80017d8 <TIM_Base_SetConfig+0x118>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d023      	beq.n	8001772 <TIM_Base_SetConfig+0xb2>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a2b      	ldr	r2, [pc, #172]	; (80017dc <TIM_Base_SetConfig+0x11c>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d01f      	beq.n	8001772 <TIM_Base_SetConfig+0xb2>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a2a      	ldr	r2, [pc, #168]	; (80017e0 <TIM_Base_SetConfig+0x120>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d01b      	beq.n	8001772 <TIM_Base_SetConfig+0xb2>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a29      	ldr	r2, [pc, #164]	; (80017e4 <TIM_Base_SetConfig+0x124>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d017      	beq.n	8001772 <TIM_Base_SetConfig+0xb2>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a28      	ldr	r2, [pc, #160]	; (80017e8 <TIM_Base_SetConfig+0x128>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d013      	beq.n	8001772 <TIM_Base_SetConfig+0xb2>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a27      	ldr	r2, [pc, #156]	; (80017ec <TIM_Base_SetConfig+0x12c>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d00f      	beq.n	8001772 <TIM_Base_SetConfig+0xb2>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a26      	ldr	r2, [pc, #152]	; (80017f0 <TIM_Base_SetConfig+0x130>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d00b      	beq.n	8001772 <TIM_Base_SetConfig+0xb2>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a25      	ldr	r2, [pc, #148]	; (80017f4 <TIM_Base_SetConfig+0x134>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d007      	beq.n	8001772 <TIM_Base_SetConfig+0xb2>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a24      	ldr	r2, [pc, #144]	; (80017f8 <TIM_Base_SetConfig+0x138>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d003      	beq.n	8001772 <TIM_Base_SetConfig+0xb2>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a23      	ldr	r2, [pc, #140]	; (80017fc <TIM_Base_SetConfig+0x13c>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d108      	bne.n	8001784 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001778:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	4313      	orrs	r3, r2
 8001782:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	695b      	ldr	r3, [r3, #20]
 800178e:	4313      	orrs	r3, r2
 8001790:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	68fa      	ldr	r2, [r7, #12]
 8001796:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	689a      	ldr	r2, [r3, #8]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a0a      	ldr	r2, [pc, #40]	; (80017d4 <TIM_Base_SetConfig+0x114>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d003      	beq.n	80017b8 <TIM_Base_SetConfig+0xf8>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4a0c      	ldr	r2, [pc, #48]	; (80017e4 <TIM_Base_SetConfig+0x124>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d103      	bne.n	80017c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	691a      	ldr	r2, [r3, #16]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2201      	movs	r2, #1
 80017c4:	615a      	str	r2, [r3, #20]
}
 80017c6:	bf00      	nop
 80017c8:	3714      	adds	r7, #20
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	40010000 	.word	0x40010000
 80017d8:	40000400 	.word	0x40000400
 80017dc:	40000800 	.word	0x40000800
 80017e0:	40000c00 	.word	0x40000c00
 80017e4:	40010400 	.word	0x40010400
 80017e8:	40014000 	.word	0x40014000
 80017ec:	40014400 	.word	0x40014400
 80017f0:	40014800 	.word	0x40014800
 80017f4:	40001800 	.word	0x40001800
 80017f8:	40001c00 	.word	0x40001c00
 80017fc:	40002000 	.word	0x40002000

08001800 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800184a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800184e:	2b84      	cmp	r3, #132	; 0x84
 8001850:	d005      	beq.n	800185e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001852:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	4413      	add	r3, r2
 800185a:	3303      	adds	r3, #3
 800185c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800185e:	68fb      	ldr	r3, [r7, #12]
}
 8001860:	4618      	mov	r0, r3
 8001862:	3714      	adds	r7, #20
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001872:	f3ef 8305 	mrs	r3, IPSR
 8001876:	607b      	str	r3, [r7, #4]
  return(result);
 8001878:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800187a:	2b00      	cmp	r3, #0
 800187c:	bf14      	ite	ne
 800187e:	2301      	movne	r3, #1
 8001880:	2300      	moveq	r3, #0
 8001882:	b2db      	uxtb	r3, r3
}
 8001884:	4618      	mov	r0, r3
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001894:	f001 fc30 	bl	80030f8 <vTaskStartScheduler>
  
  return osOK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	bd80      	pop	{r7, pc}

0800189e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800189e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018a0:	b087      	sub	sp, #28
 80018a2:	af02      	add	r7, sp, #8
 80018a4:	6078      	str	r0, [r7, #4]
 80018a6:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685c      	ldr	r4, [r3, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80018b4:	b29e      	uxth	r6, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff ffbd 	bl	800183c <makeFreeRtosPriority>
 80018c2:	4602      	mov	r2, r0
 80018c4:	f107 030c 	add.w	r3, r7, #12
 80018c8:	9301      	str	r3, [sp, #4]
 80018ca:	9200      	str	r2, [sp, #0]
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	4632      	mov	r2, r6
 80018d0:	4629      	mov	r1, r5
 80018d2:	4620      	mov	r0, r4
 80018d4:	f001 faaf 	bl	8002e36 <xTaskCreate>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d001      	beq.n	80018e2 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	e000      	b.n	80018e4 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80018e2:	68fb      	ldr	r3, [r7, #12]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3714      	adds	r7, #20
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080018ec <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <osDelay+0x16>
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	e000      	b.n	8001904 <osDelay+0x18>
 8001902:	2301      	movs	r3, #1
 8001904:	4618      	mov	r0, r3
 8001906:	f001 fbc1 	bl	800308c <vTaskDelay>
  
  return osOK;
 800190a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800190c:	4618      	mov	r0, r3
 800190e:	3710      	adds	r7, #16
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 800191c:	2001      	movs	r0, #1
 800191e:	f000 fe23 	bl	8002568 <xQueueCreateMutex>
 8001922:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 8001924:	4618      	mov	r0, r3
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8001936:	2300      	movs	r3, #0
 8001938:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d101      	bne.n	8001944 <osMutexWait+0x18>
    return osErrorParameter;
 8001940:	2380      	movs	r3, #128	; 0x80
 8001942:	e03a      	b.n	80019ba <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8001944:	2300      	movs	r3, #0
 8001946:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800194e:	d103      	bne.n	8001958 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8001950:	f04f 33ff 	mov.w	r3, #4294967295
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	e009      	b.n	800196c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d006      	beq.n	800196c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d101      	bne.n	800196c <osMutexWait+0x40>
      ticks = 1;
 8001968:	2301      	movs	r3, #1
 800196a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800196c:	f7ff ff7e 	bl	800186c <inHandlerMode>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d017      	beq.n	80019a6 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8001976:	f107 0308 	add.w	r3, r7, #8
 800197a:	461a      	mov	r2, r3
 800197c:	2100      	movs	r1, #0
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f001 f8ae 	bl	8002ae0 <xQueueReceiveFromISR>
 8001984:	4603      	mov	r3, r0
 8001986:	2b01      	cmp	r3, #1
 8001988:	d001      	beq.n	800198e <osMutexWait+0x62>
      return osErrorOS;
 800198a:	23ff      	movs	r3, #255	; 0xff
 800198c:	e015      	b.n	80019ba <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d011      	beq.n	80019b8 <osMutexWait+0x8c>
 8001994:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <osMutexWait+0x98>)
 8001996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	f3bf 8f4f 	dsb	sy
 80019a0:	f3bf 8f6f 	isb	sy
 80019a4:	e008      	b.n	80019b8 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80019a6:	68f9      	ldr	r1, [r7, #12]
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f000 ff89 	bl	80028c0 <xQueueSemaphoreTake>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d001      	beq.n	80019b8 <osMutexWait+0x8c>
    return osErrorOS;
 80019b4:	23ff      	movs	r3, #255	; 0xff
 80019b6:	e000      	b.n	80019ba <osMutexWait+0x8e>
  }
  
  return osOK;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	e000ed04 	.word	0xe000ed04

080019c8 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80019d0:	2300      	movs	r3, #0
 80019d2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80019d4:	2300      	movs	r3, #0
 80019d6:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80019d8:	f7ff ff48 	bl	800186c <inHandlerMode>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d016      	beq.n	8001a10 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80019e2:	f107 0308 	add.w	r3, r7, #8
 80019e6:	4619      	mov	r1, r3
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f000 fed7 	bl	800279c <xQueueGiveFromISR>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d001      	beq.n	80019f8 <osMutexRelease+0x30>
      return osErrorOS;
 80019f4:	23ff      	movs	r3, #255	; 0xff
 80019f6:	e017      	b.n	8001a28 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d013      	beq.n	8001a26 <osMutexRelease+0x5e>
 80019fe:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <osMutexRelease+0x68>)
 8001a00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	f3bf 8f4f 	dsb	sy
 8001a0a:	f3bf 8f6f 	isb	sy
 8001a0e:	e00a      	b.n	8001a26 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8001a10:	2300      	movs	r3, #0
 8001a12:	2200      	movs	r2, #0
 8001a14:	2100      	movs	r1, #0
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f000 fdbe 	bl	8002598 <xQueueGenericSend>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d001      	beq.n	8001a26 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8001a22:	23ff      	movs	r3, #255	; 0xff
 8001a24:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8001a26:	68fb      	ldr	r3, [r7, #12]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3710      	adds	r7, #16
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	e000ed04 	.word	0xe000ed04

08001a34 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08a      	sub	sp, #40	; 0x28
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001a40:	f001 fba4 	bl	800318c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001a44:	4b5a      	ldr	r3, [pc, #360]	; (8001bb0 <pvPortMalloc+0x17c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d101      	bne.n	8001a50 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8001a4c:	f000 f916 	bl	8001c7c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001a50:	4b58      	ldr	r3, [pc, #352]	; (8001bb4 <pvPortMalloc+0x180>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4013      	ands	r3, r2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f040 8090 	bne.w	8001b7e <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d01e      	beq.n	8001aa2 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8001a64:	2208      	movs	r2, #8
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4413      	add	r3, r2
 8001a6a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d015      	beq.n	8001aa2 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f023 0307 	bic.w	r3, r3, #7
 8001a7c:	3308      	adds	r3, #8
 8001a7e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f003 0307 	and.w	r3, r3, #7
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d00b      	beq.n	8001aa2 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a8e:	b672      	cpsid	i
 8001a90:	f383 8811 	msr	BASEPRI, r3
 8001a94:	f3bf 8f6f 	isb	sy
 8001a98:	f3bf 8f4f 	dsb	sy
 8001a9c:	b662      	cpsie	i
 8001a9e:	617b      	str	r3, [r7, #20]
 8001aa0:	e7fe      	b.n	8001aa0 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d06a      	beq.n	8001b7e <pvPortMalloc+0x14a>
 8001aa8:	4b43      	ldr	r3, [pc, #268]	; (8001bb8 <pvPortMalloc+0x184>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d865      	bhi.n	8001b7e <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001ab2:	4b42      	ldr	r3, [pc, #264]	; (8001bbc <pvPortMalloc+0x188>)
 8001ab4:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001ab6:	4b41      	ldr	r3, [pc, #260]	; (8001bbc <pvPortMalloc+0x188>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001abc:	e004      	b.n	8001ac8 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8001abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac0:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d903      	bls.n	8001ada <pvPortMalloc+0xa6>
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1f1      	bne.n	8001abe <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001ada:	4b35      	ldr	r3, [pc, #212]	; (8001bb0 <pvPortMalloc+0x17c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d04c      	beq.n	8001b7e <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001ae4:	6a3b      	ldr	r3, [r7, #32]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2208      	movs	r2, #8
 8001aea:	4413      	add	r3, r2
 8001aec:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	6a3b      	ldr	r3, [r7, #32]
 8001af4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af8:	685a      	ldr	r2, [r3, #4]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	1ad2      	subs	r2, r2, r3
 8001afe:	2308      	movs	r3, #8
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d920      	bls.n	8001b48 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	f003 0307 	and.w	r3, r3, #7
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d00b      	beq.n	8001b30 <pvPortMalloc+0xfc>
 8001b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b1c:	b672      	cpsid	i
 8001b1e:	f383 8811 	msr	BASEPRI, r3
 8001b22:	f3bf 8f6f 	isb	sy
 8001b26:	f3bf 8f4f 	dsb	sy
 8001b2a:	b662      	cpsie	i
 8001b2c:	613b      	str	r3, [r7, #16]
 8001b2e:	e7fe      	b.n	8001b2e <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	1ad2      	subs	r2, r2, r3
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001b42:	69b8      	ldr	r0, [r7, #24]
 8001b44:	f000 f8fc 	bl	8001d40 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001b48:	4b1b      	ldr	r3, [pc, #108]	; (8001bb8 <pvPortMalloc+0x184>)
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	4a19      	ldr	r2, [pc, #100]	; (8001bb8 <pvPortMalloc+0x184>)
 8001b54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001b56:	4b18      	ldr	r3, [pc, #96]	; (8001bb8 <pvPortMalloc+0x184>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	4b19      	ldr	r3, [pc, #100]	; (8001bc0 <pvPortMalloc+0x18c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d203      	bcs.n	8001b6a <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001b62:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <pvPortMalloc+0x184>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a16      	ldr	r2, [pc, #88]	; (8001bc0 <pvPortMalloc+0x18c>)
 8001b68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6c:	685a      	ldr	r2, [r3, #4]
 8001b6e:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <pvPortMalloc+0x180>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	431a      	orrs	r2, r3
 8001b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001b7e:	f001 fb13 	bl	80031a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d00b      	beq.n	8001ba4 <pvPortMalloc+0x170>
 8001b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b90:	b672      	cpsid	i
 8001b92:	f383 8811 	msr	BASEPRI, r3
 8001b96:	f3bf 8f6f 	isb	sy
 8001b9a:	f3bf 8f4f 	dsb	sy
 8001b9e:	b662      	cpsie	i
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	e7fe      	b.n	8001ba2 <pvPortMalloc+0x16e>
	return pvReturn;
 8001ba4:	69fb      	ldr	r3, [r7, #28]
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3728      	adds	r7, #40	; 0x28
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	20003c30 	.word	0x20003c30
 8001bb4:	20003c3c 	.word	0x20003c3c
 8001bb8:	20003c34 	.word	0x20003c34
 8001bbc:	20003c28 	.word	0x20003c28
 8001bc0:	20003c38 	.word	0x20003c38

08001bc4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d04a      	beq.n	8001c6c <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001bd6:	2308      	movs	r3, #8
 8001bd8:	425b      	negs	r3, r3
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	4413      	add	r3, r2
 8001bde:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	685a      	ldr	r2, [r3, #4]
 8001be8:	4b22      	ldr	r3, [pc, #136]	; (8001c74 <vPortFree+0xb0>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4013      	ands	r3, r2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d10b      	bne.n	8001c0a <vPortFree+0x46>
 8001bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bf6:	b672      	cpsid	i
 8001bf8:	f383 8811 	msr	BASEPRI, r3
 8001bfc:	f3bf 8f6f 	isb	sy
 8001c00:	f3bf 8f4f 	dsb	sy
 8001c04:	b662      	cpsie	i
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	e7fe      	b.n	8001c08 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d00b      	beq.n	8001c2a <vPortFree+0x66>
 8001c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c16:	b672      	cpsid	i
 8001c18:	f383 8811 	msr	BASEPRI, r3
 8001c1c:	f3bf 8f6f 	isb	sy
 8001c20:	f3bf 8f4f 	dsb	sy
 8001c24:	b662      	cpsie	i
 8001c26:	60bb      	str	r3, [r7, #8]
 8001c28:	e7fe      	b.n	8001c28 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <vPortFree+0xb0>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4013      	ands	r3, r2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d019      	beq.n	8001c6c <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d115      	bne.n	8001c6c <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <vPortFree+0xb0>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	401a      	ands	r2, r3
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001c50:	f001 fa9c 	bl	800318c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <vPortFree+0xb4>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	4a06      	ldr	r2, [pc, #24]	; (8001c78 <vPortFree+0xb4>)
 8001c60:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001c62:	6938      	ldr	r0, [r7, #16]
 8001c64:	f000 f86c 	bl	8001d40 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001c68:	f001 fa9e 	bl	80031a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001c6c:	bf00      	nop
 8001c6e:	3718      	adds	r7, #24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20003c3c 	.word	0x20003c3c
 8001c78:	20003c34 	.word	0x20003c34

08001c7c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001c82:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001c86:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001c88:	4b27      	ldr	r3, [pc, #156]	; (8001d28 <prvHeapInit+0xac>)
 8001c8a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d00c      	beq.n	8001cb0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	3307      	adds	r3, #7
 8001c9a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f023 0307 	bic.w	r3, r3, #7
 8001ca2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001ca4:	68ba      	ldr	r2, [r7, #8]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	4a1f      	ldr	r2, [pc, #124]	; (8001d28 <prvHeapInit+0xac>)
 8001cac:	4413      	add	r3, r2
 8001cae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001cb4:	4a1d      	ldr	r2, [pc, #116]	; (8001d2c <prvHeapInit+0xb0>)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001cba:	4b1c      	ldr	r3, [pc, #112]	; (8001d2c <prvHeapInit+0xb0>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001cc8:	2208      	movs	r2, #8
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	1a9b      	subs	r3, r3, r2
 8001cce:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f023 0307 	bic.w	r3, r3, #7
 8001cd6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	4a15      	ldr	r2, [pc, #84]	; (8001d30 <prvHeapInit+0xb4>)
 8001cdc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001cde:	4b14      	ldr	r3, [pc, #80]	; (8001d30 <prvHeapInit+0xb4>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001ce6:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <prvHeapInit+0xb4>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	1ad2      	subs	r2, r2, r3
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <prvHeapInit+0xb4>)
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	4a0a      	ldr	r2, [pc, #40]	; (8001d34 <prvHeapInit+0xb8>)
 8001d0a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	4a09      	ldr	r2, [pc, #36]	; (8001d38 <prvHeapInit+0xbc>)
 8001d12:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001d14:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <prvHeapInit+0xc0>)
 8001d16:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001d1a:	601a      	str	r2, [r3, #0]
}
 8001d1c:	bf00      	nop
 8001d1e:	3714      	adds	r7, #20
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	20000028 	.word	0x20000028
 8001d2c:	20003c28 	.word	0x20003c28
 8001d30:	20003c30 	.word	0x20003c30
 8001d34:	20003c38 	.word	0x20003c38
 8001d38:	20003c34 	.word	0x20003c34
 8001d3c:	20003c3c 	.word	0x20003c3c

08001d40 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001d48:	4b28      	ldr	r3, [pc, #160]	; (8001dec <prvInsertBlockIntoFreeList+0xac>)
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	e002      	b.n	8001d54 <prvInsertBlockIntoFreeList+0x14>
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d8f7      	bhi.n	8001d4e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	68ba      	ldr	r2, [r7, #8]
 8001d68:	4413      	add	r3, r2
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d108      	bne.n	8001d82 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	441a      	add	r2, r3
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	68ba      	ldr	r2, [r7, #8]
 8001d8c:	441a      	add	r2, r3
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d118      	bne.n	8001dc8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	4b15      	ldr	r3, [pc, #84]	; (8001df0 <prvInsertBlockIntoFreeList+0xb0>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d00d      	beq.n	8001dbe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685a      	ldr	r2, [r3, #4]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	441a      	add	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	e008      	b.n	8001dd0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001dbe:	4b0c      	ldr	r3, [pc, #48]	; (8001df0 <prvInsertBlockIntoFreeList+0xb0>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	e003      	b.n	8001dd0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d002      	beq.n	8001dde <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001dde:	bf00      	nop
 8001de0:	3714      	adds	r7, #20
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	20003c28 	.word	0x20003c28
 8001df0:	20003c30 	.word	0x20003c30

08001df4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f103 0208 	add.w	r2, r3, #8
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f04f 32ff 	mov.w	r2, #4294967295
 8001e0c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f103 0208 	add.w	r2, r3, #8
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f103 0208 	add.w	r2, r3, #8
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001e42:	bf00      	nop
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001e4e:	b480      	push	{r7}
 8001e50:	b085      	sub	sp, #20
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
 8001e56:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	1c5a      	adds	r2, r3, #1
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	601a      	str	r2, [r3, #0]
}
 8001e8a:	bf00      	nop
 8001e8c:	3714      	adds	r7, #20
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001e96:	b480      	push	{r7}
 8001e98:	b085      	sub	sp, #20
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
 8001e9e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eac:	d103      	bne.n	8001eb6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	e00c      	b.n	8001ed0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	3308      	adds	r3, #8
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	e002      	b.n	8001ec4 <vListInsert+0x2e>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68ba      	ldr	r2, [r7, #8]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d2f6      	bcs.n	8001ebe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	1c5a      	adds	r2, r3, #1
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	601a      	str	r2, [r3, #0]
}
 8001efc:	bf00      	nop
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	6892      	ldr	r2, [r2, #8]
 8001f1e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	6852      	ldr	r2, [r2, #4]
 8001f28:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d103      	bne.n	8001f3c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689a      	ldr	r2, [r3, #8]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	1e5a      	subs	r2, r3, #1
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3714      	adds	r7, #20
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	3b04      	subs	r3, #4
 8001f6c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	3b04      	subs	r3, #4
 8001f7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	f023 0201 	bic.w	r2, r3, #1
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	3b04      	subs	r3, #4
 8001f8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001f8c:	4a0c      	ldr	r2, [pc, #48]	; (8001fc0 <pxPortInitialiseStack+0x64>)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	3b14      	subs	r3, #20
 8001f96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	3b04      	subs	r3, #4
 8001fa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f06f 0202 	mvn.w	r2, #2
 8001faa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	3b20      	subs	r3, #32
 8001fb0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3714      	adds	r7, #20
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	08001fc5 	.word	0x08001fc5

08001fc4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001fce:	4b13      	ldr	r3, [pc, #76]	; (800201c <prvTaskExitError+0x58>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd6:	d00b      	beq.n	8001ff0 <prvTaskExitError+0x2c>
 8001fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fdc:	b672      	cpsid	i
 8001fde:	f383 8811 	msr	BASEPRI, r3
 8001fe2:	f3bf 8f6f 	isb	sy
 8001fe6:	f3bf 8f4f 	dsb	sy
 8001fea:	b662      	cpsie	i
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	e7fe      	b.n	8001fee <prvTaskExitError+0x2a>
 8001ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ff4:	b672      	cpsid	i
 8001ff6:	f383 8811 	msr	BASEPRI, r3
 8001ffa:	f3bf 8f6f 	isb	sy
 8001ffe:	f3bf 8f4f 	dsb	sy
 8002002:	b662      	cpsie	i
 8002004:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002006:	bf00      	nop
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d0fc      	beq.n	8002008 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800200e:	bf00      	nop
 8002010:	3714      	adds	r7, #20
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	20000004 	.word	0x20000004

08002020 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002020:	4b07      	ldr	r3, [pc, #28]	; (8002040 <pxCurrentTCBConst2>)
 8002022:	6819      	ldr	r1, [r3, #0]
 8002024:	6808      	ldr	r0, [r1, #0]
 8002026:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800202a:	f380 8809 	msr	PSP, r0
 800202e:	f3bf 8f6f 	isb	sy
 8002032:	f04f 0000 	mov.w	r0, #0
 8002036:	f380 8811 	msr	BASEPRI, r0
 800203a:	4770      	bx	lr
 800203c:	f3af 8000 	nop.w

08002040 <pxCurrentTCBConst2>:
 8002040:	20003c48 	.word	0x20003c48
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002044:	bf00      	nop
 8002046:	bf00      	nop

08002048 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002048:	4808      	ldr	r0, [pc, #32]	; (800206c <prvPortStartFirstTask+0x24>)
 800204a:	6800      	ldr	r0, [r0, #0]
 800204c:	6800      	ldr	r0, [r0, #0]
 800204e:	f380 8808 	msr	MSP, r0
 8002052:	f04f 0000 	mov.w	r0, #0
 8002056:	f380 8814 	msr	CONTROL, r0
 800205a:	b662      	cpsie	i
 800205c:	b661      	cpsie	f
 800205e:	f3bf 8f4f 	dsb	sy
 8002062:	f3bf 8f6f 	isb	sy
 8002066:	df00      	svc	0
 8002068:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800206a:	bf00      	nop
 800206c:	e000ed08 	.word	0xe000ed08

08002070 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002076:	4b36      	ldr	r3, [pc, #216]	; (8002150 <xPortStartScheduler+0xe0>)
 8002078:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	b2db      	uxtb	r3, r3
 8002080:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	22ff      	movs	r2, #255	; 0xff
 8002086:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	b2db      	uxtb	r3, r3
 800208e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002090:	78fb      	ldrb	r3, [r7, #3]
 8002092:	b2db      	uxtb	r3, r3
 8002094:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002098:	b2da      	uxtb	r2, r3
 800209a:	4b2e      	ldr	r3, [pc, #184]	; (8002154 <xPortStartScheduler+0xe4>)
 800209c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800209e:	4b2e      	ldr	r3, [pc, #184]	; (8002158 <xPortStartScheduler+0xe8>)
 80020a0:	2207      	movs	r2, #7
 80020a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80020a4:	e009      	b.n	80020ba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80020a6:	4b2c      	ldr	r3, [pc, #176]	; (8002158 <xPortStartScheduler+0xe8>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	4a2a      	ldr	r2, [pc, #168]	; (8002158 <xPortStartScheduler+0xe8>)
 80020ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80020b0:	78fb      	ldrb	r3, [r7, #3]
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80020ba:	78fb      	ldrb	r3, [r7, #3]
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020c2:	2b80      	cmp	r3, #128	; 0x80
 80020c4:	d0ef      	beq.n	80020a6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80020c6:	4b24      	ldr	r3, [pc, #144]	; (8002158 <xPortStartScheduler+0xe8>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f1c3 0307 	rsb	r3, r3, #7
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	d00b      	beq.n	80020ea <xPortStartScheduler+0x7a>
 80020d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020d6:	b672      	cpsid	i
 80020d8:	f383 8811 	msr	BASEPRI, r3
 80020dc:	f3bf 8f6f 	isb	sy
 80020e0:	f3bf 8f4f 	dsb	sy
 80020e4:	b662      	cpsie	i
 80020e6:	60bb      	str	r3, [r7, #8]
 80020e8:	e7fe      	b.n	80020e8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80020ea:	4b1b      	ldr	r3, [pc, #108]	; (8002158 <xPortStartScheduler+0xe8>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	021b      	lsls	r3, r3, #8
 80020f0:	4a19      	ldr	r2, [pc, #100]	; (8002158 <xPortStartScheduler+0xe8>)
 80020f2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80020f4:	4b18      	ldr	r3, [pc, #96]	; (8002158 <xPortStartScheduler+0xe8>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80020fc:	4a16      	ldr	r2, [pc, #88]	; (8002158 <xPortStartScheduler+0xe8>)
 80020fe:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	b2da      	uxtb	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002108:	4b14      	ldr	r3, [pc, #80]	; (800215c <xPortStartScheduler+0xec>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a13      	ldr	r2, [pc, #76]	; (800215c <xPortStartScheduler+0xec>)
 800210e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002112:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002114:	4b11      	ldr	r3, [pc, #68]	; (800215c <xPortStartScheduler+0xec>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a10      	ldr	r2, [pc, #64]	; (800215c <xPortStartScheduler+0xec>)
 800211a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800211e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002120:	f000 f8d4 	bl	80022cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002124:	4b0e      	ldr	r3, [pc, #56]	; (8002160 <xPortStartScheduler+0xf0>)
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800212a:	f000 f8f3 	bl	8002314 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800212e:	4b0d      	ldr	r3, [pc, #52]	; (8002164 <xPortStartScheduler+0xf4>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a0c      	ldr	r2, [pc, #48]	; (8002164 <xPortStartScheduler+0xf4>)
 8002134:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002138:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800213a:	f7ff ff85 	bl	8002048 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800213e:	f001 f98f 	bl	8003460 <vTaskSwitchContext>
	prvTaskExitError();
 8002142:	f7ff ff3f 	bl	8001fc4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	e000e400 	.word	0xe000e400
 8002154:	20003c40 	.word	0x20003c40
 8002158:	20003c44 	.word	0x20003c44
 800215c:	e000ed20 	.word	0xe000ed20
 8002160:	20000004 	.word	0x20000004
 8002164:	e000ef34 	.word	0xe000ef34

08002168 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002172:	b672      	cpsid	i
 8002174:	f383 8811 	msr	BASEPRI, r3
 8002178:	f3bf 8f6f 	isb	sy
 800217c:	f3bf 8f4f 	dsb	sy
 8002180:	b662      	cpsie	i
 8002182:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002184:	4b0f      	ldr	r3, [pc, #60]	; (80021c4 <vPortEnterCritical+0x5c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	3301      	adds	r3, #1
 800218a:	4a0e      	ldr	r2, [pc, #56]	; (80021c4 <vPortEnterCritical+0x5c>)
 800218c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800218e:	4b0d      	ldr	r3, [pc, #52]	; (80021c4 <vPortEnterCritical+0x5c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d110      	bne.n	80021b8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002196:	4b0c      	ldr	r3, [pc, #48]	; (80021c8 <vPortEnterCritical+0x60>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	b2db      	uxtb	r3, r3
 800219c:	2b00      	cmp	r3, #0
 800219e:	d00b      	beq.n	80021b8 <vPortEnterCritical+0x50>
 80021a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021a4:	b672      	cpsid	i
 80021a6:	f383 8811 	msr	BASEPRI, r3
 80021aa:	f3bf 8f6f 	isb	sy
 80021ae:	f3bf 8f4f 	dsb	sy
 80021b2:	b662      	cpsie	i
 80021b4:	603b      	str	r3, [r7, #0]
 80021b6:	e7fe      	b.n	80021b6 <vPortEnterCritical+0x4e>
	}
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	20000004 	.word	0x20000004
 80021c8:	e000ed04 	.word	0xe000ed04

080021cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80021d2:	4b12      	ldr	r3, [pc, #72]	; (800221c <vPortExitCritical+0x50>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d10b      	bne.n	80021f2 <vPortExitCritical+0x26>
 80021da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021de:	b672      	cpsid	i
 80021e0:	f383 8811 	msr	BASEPRI, r3
 80021e4:	f3bf 8f6f 	isb	sy
 80021e8:	f3bf 8f4f 	dsb	sy
 80021ec:	b662      	cpsie	i
 80021ee:	607b      	str	r3, [r7, #4]
 80021f0:	e7fe      	b.n	80021f0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 80021f2:	4b0a      	ldr	r3, [pc, #40]	; (800221c <vPortExitCritical+0x50>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	3b01      	subs	r3, #1
 80021f8:	4a08      	ldr	r2, [pc, #32]	; (800221c <vPortExitCritical+0x50>)
 80021fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80021fc:	4b07      	ldr	r3, [pc, #28]	; (800221c <vPortExitCritical+0x50>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d104      	bne.n	800220e <vPortExitCritical+0x42>
 8002204:	2300      	movs	r3, #0
 8002206:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800220e:	bf00      	nop
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	20000004 	.word	0x20000004

08002220 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002220:	f3ef 8009 	mrs	r0, PSP
 8002224:	f3bf 8f6f 	isb	sy
 8002228:	4b15      	ldr	r3, [pc, #84]	; (8002280 <pxCurrentTCBConst>)
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	f01e 0f10 	tst.w	lr, #16
 8002230:	bf08      	it	eq
 8002232:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002236:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800223a:	6010      	str	r0, [r2, #0]
 800223c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002240:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002244:	b672      	cpsid	i
 8002246:	f380 8811 	msr	BASEPRI, r0
 800224a:	f3bf 8f4f 	dsb	sy
 800224e:	f3bf 8f6f 	isb	sy
 8002252:	b662      	cpsie	i
 8002254:	f001 f904 	bl	8003460 <vTaskSwitchContext>
 8002258:	f04f 0000 	mov.w	r0, #0
 800225c:	f380 8811 	msr	BASEPRI, r0
 8002260:	bc09      	pop	{r0, r3}
 8002262:	6819      	ldr	r1, [r3, #0]
 8002264:	6808      	ldr	r0, [r1, #0]
 8002266:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800226a:	f01e 0f10 	tst.w	lr, #16
 800226e:	bf08      	it	eq
 8002270:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002274:	f380 8809 	msr	PSP, r0
 8002278:	f3bf 8f6f 	isb	sy
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop

08002280 <pxCurrentTCBConst>:
 8002280:	20003c48 	.word	0x20003c48
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002284:	bf00      	nop
 8002286:	bf00      	nop

08002288 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
	__asm volatile
 800228e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002292:	b672      	cpsid	i
 8002294:	f383 8811 	msr	BASEPRI, r3
 8002298:	f3bf 8f6f 	isb	sy
 800229c:	f3bf 8f4f 	dsb	sy
 80022a0:	b662      	cpsie	i
 80022a2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80022a4:	f001 f81e 	bl	80032e4 <xTaskIncrementTick>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80022ae:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <SysTick_Handler+0x40>)
 80022b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022b4:	601a      	str	r2, [r3, #0]
 80022b6:	2300      	movs	r3, #0
 80022b8:	603b      	str	r3, [r7, #0]
	__asm volatile
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80022c0:	bf00      	nop
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	e000ed04 	.word	0xe000ed04

080022cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80022d0:	4b0b      	ldr	r3, [pc, #44]	; (8002300 <vPortSetupTimerInterrupt+0x34>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80022d6:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <vPortSetupTimerInterrupt+0x38>)
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80022dc:	4b0a      	ldr	r3, [pc, #40]	; (8002308 <vPortSetupTimerInterrupt+0x3c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a0a      	ldr	r2, [pc, #40]	; (800230c <vPortSetupTimerInterrupt+0x40>)
 80022e2:	fba2 2303 	umull	r2, r3, r2, r3
 80022e6:	099b      	lsrs	r3, r3, #6
 80022e8:	4a09      	ldr	r2, [pc, #36]	; (8002310 <vPortSetupTimerInterrupt+0x44>)
 80022ea:	3b01      	subs	r3, #1
 80022ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80022ee:	4b04      	ldr	r3, [pc, #16]	; (8002300 <vPortSetupTimerInterrupt+0x34>)
 80022f0:	2207      	movs	r2, #7
 80022f2:	601a      	str	r2, [r3, #0]
}
 80022f4:	bf00      	nop
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	e000e010 	.word	0xe000e010
 8002304:	e000e018 	.word	0xe000e018
 8002308:	20000008 	.word	0x20000008
 800230c:	10624dd3 	.word	0x10624dd3
 8002310:	e000e014 	.word	0xe000e014

08002314 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002314:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002324 <vPortEnableVFP+0x10>
 8002318:	6801      	ldr	r1, [r0, #0]
 800231a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800231e:	6001      	str	r1, [r0, #0]
 8002320:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002322:	bf00      	nop
 8002324:	e000ed88 	.word	0xe000ed88

08002328 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800232e:	f3ef 8305 	mrs	r3, IPSR
 8002332:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2b0f      	cmp	r3, #15
 8002338:	d915      	bls.n	8002366 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800233a:	4a18      	ldr	r2, [pc, #96]	; (800239c <vPortValidateInterruptPriority+0x74>)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	4413      	add	r3, r2
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002344:	4b16      	ldr	r3, [pc, #88]	; (80023a0 <vPortValidateInterruptPriority+0x78>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	7afa      	ldrb	r2, [r7, #11]
 800234a:	429a      	cmp	r2, r3
 800234c:	d20b      	bcs.n	8002366 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800234e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002352:	b672      	cpsid	i
 8002354:	f383 8811 	msr	BASEPRI, r3
 8002358:	f3bf 8f6f 	isb	sy
 800235c:	f3bf 8f4f 	dsb	sy
 8002360:	b662      	cpsie	i
 8002362:	607b      	str	r3, [r7, #4]
 8002364:	e7fe      	b.n	8002364 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002366:	4b0f      	ldr	r3, [pc, #60]	; (80023a4 <vPortValidateInterruptPriority+0x7c>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800236e:	4b0e      	ldr	r3, [pc, #56]	; (80023a8 <vPortValidateInterruptPriority+0x80>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	429a      	cmp	r2, r3
 8002374:	d90b      	bls.n	800238e <vPortValidateInterruptPriority+0x66>
 8002376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800237a:	b672      	cpsid	i
 800237c:	f383 8811 	msr	BASEPRI, r3
 8002380:	f3bf 8f6f 	isb	sy
 8002384:	f3bf 8f4f 	dsb	sy
 8002388:	b662      	cpsie	i
 800238a:	603b      	str	r3, [r7, #0]
 800238c:	e7fe      	b.n	800238c <vPortValidateInterruptPriority+0x64>
	}
 800238e:	bf00      	nop
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	e000e3f0 	.word	0xe000e3f0
 80023a0:	20003c40 	.word	0x20003c40
 80023a4:	e000ed0c 	.word	0xe000ed0c
 80023a8:	20003c44 	.word	0x20003c44

080023ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d10b      	bne.n	80023d8 <xQueueGenericReset+0x2c>
 80023c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023c4:	b672      	cpsid	i
 80023c6:	f383 8811 	msr	BASEPRI, r3
 80023ca:	f3bf 8f6f 	isb	sy
 80023ce:	f3bf 8f4f 	dsb	sy
 80023d2:	b662      	cpsie	i
 80023d4:	60bb      	str	r3, [r7, #8]
 80023d6:	e7fe      	b.n	80023d6 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 80023d8:	f7ff fec6 	bl	8002168 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e4:	68f9      	ldr	r1, [r7, #12]
 80023e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80023e8:	fb01 f303 	mul.w	r3, r1, r3
 80023ec:	441a      	add	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2200      	movs	r2, #0
 80023f6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002408:	3b01      	subs	r3, #1
 800240a:	68f9      	ldr	r1, [r7, #12]
 800240c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800240e:	fb01 f303 	mul.w	r3, r1, r3
 8002412:	441a      	add	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	22ff      	movs	r2, #255	; 0xff
 800241c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	22ff      	movs	r2, #255	; 0xff
 8002424:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d114      	bne.n	8002458 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d01a      	beq.n	800246c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	3310      	adds	r3, #16
 800243a:	4618      	mov	r0, r3
 800243c:	f001 f892 	bl	8003564 <xTaskRemoveFromEventList>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d012      	beq.n	800246c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002446:	4b0d      	ldr	r3, [pc, #52]	; (800247c <xQueueGenericReset+0xd0>)
 8002448:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	f3bf 8f4f 	dsb	sy
 8002452:	f3bf 8f6f 	isb	sy
 8002456:	e009      	b.n	800246c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	3310      	adds	r3, #16
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff fcc9 	bl	8001df4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	3324      	adds	r3, #36	; 0x24
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff fcc4 	bl	8001df4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800246c:	f7ff feae 	bl	80021cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002470:	2301      	movs	r3, #1
}
 8002472:	4618      	mov	r0, r3
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	e000ed04 	.word	0xe000ed04

08002480 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002480:	b580      	push	{r7, lr}
 8002482:	b08a      	sub	sp, #40	; 0x28
 8002484:	af02      	add	r7, sp, #8
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	4613      	mov	r3, r2
 800248c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d10b      	bne.n	80024ac <xQueueGenericCreate+0x2c>
 8002494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002498:	b672      	cpsid	i
 800249a:	f383 8811 	msr	BASEPRI, r3
 800249e:	f3bf 8f6f 	isb	sy
 80024a2:	f3bf 8f4f 	dsb	sy
 80024a6:	b662      	cpsie	i
 80024a8:	613b      	str	r3, [r7, #16]
 80024aa:	e7fe      	b.n	80024aa <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d102      	bne.n	80024b8 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80024b2:	2300      	movs	r3, #0
 80024b4:	61fb      	str	r3, [r7, #28]
 80024b6:	e004      	b.n	80024c2 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	fb02 f303 	mul.w	r3, r2, r3
 80024c0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	3348      	adds	r3, #72	; 0x48
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff fab4 	bl	8001a34 <pvPortMalloc>
 80024cc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00b      	beq.n	80024ec <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	3348      	adds	r3, #72	; 0x48
 80024d8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80024da:	79fa      	ldrb	r2, [r7, #7]
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	4613      	mov	r3, r2
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	68b9      	ldr	r1, [r7, #8]
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f000 f805 	bl	80024f6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80024ec:	69bb      	ldr	r3, [r7, #24]
	}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3720      	adds	r7, #32
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b084      	sub	sp, #16
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	60f8      	str	r0, [r7, #12]
 80024fe:	60b9      	str	r1, [r7, #8]
 8002500:	607a      	str	r2, [r7, #4]
 8002502:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d103      	bne.n	8002512 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	e002      	b.n	8002518 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	68ba      	ldr	r2, [r7, #8]
 8002522:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002524:	2101      	movs	r1, #1
 8002526:	69b8      	ldr	r0, [r7, #24]
 8002528:	f7ff ff40 	bl	80023ac <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800252c:	bf00      	nop
 800252e:	3710      	adds	r7, #16
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00e      	beq.n	8002560 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002554:	2300      	movs	r3, #0
 8002556:	2200      	movs	r2, #0
 8002558:	2100      	movs	r1, #0
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f81c 	bl	8002598 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002560:	bf00      	nop
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002572:	2301      	movs	r3, #1
 8002574:	617b      	str	r3, [r7, #20]
 8002576:	2300      	movs	r3, #0
 8002578:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800257a:	79fb      	ldrb	r3, [r7, #7]
 800257c:	461a      	mov	r2, r3
 800257e:	6939      	ldr	r1, [r7, #16]
 8002580:	6978      	ldr	r0, [r7, #20]
 8002582:	f7ff ff7d 	bl	8002480 <xQueueGenericCreate>
 8002586:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8002588:	68f8      	ldr	r0, [r7, #12]
 800258a:	f7ff ffd3 	bl	8002534 <prvInitialiseMutex>

		return pxNewQueue;
 800258e:	68fb      	ldr	r3, [r7, #12]
	}
 8002590:	4618      	mov	r0, r3
 8002592:	3718      	adds	r7, #24
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b08e      	sub	sp, #56	; 0x38
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
 80025a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80025a6:	2300      	movs	r3, #0
 80025a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80025ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d10b      	bne.n	80025cc <xQueueGenericSend+0x34>
 80025b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b8:	b672      	cpsid	i
 80025ba:	f383 8811 	msr	BASEPRI, r3
 80025be:	f3bf 8f6f 	isb	sy
 80025c2:	f3bf 8f4f 	dsb	sy
 80025c6:	b662      	cpsie	i
 80025c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80025ca:	e7fe      	b.n	80025ca <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d103      	bne.n	80025da <xQueueGenericSend+0x42>
 80025d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <xQueueGenericSend+0x46>
 80025da:	2301      	movs	r3, #1
 80025dc:	e000      	b.n	80025e0 <xQueueGenericSend+0x48>
 80025de:	2300      	movs	r3, #0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d10b      	bne.n	80025fc <xQueueGenericSend+0x64>
 80025e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e8:	b672      	cpsid	i
 80025ea:	f383 8811 	msr	BASEPRI, r3
 80025ee:	f3bf 8f6f 	isb	sy
 80025f2:	f3bf 8f4f 	dsb	sy
 80025f6:	b662      	cpsie	i
 80025f8:	627b      	str	r3, [r7, #36]	; 0x24
 80025fa:	e7fe      	b.n	80025fa <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d103      	bne.n	800260a <xQueueGenericSend+0x72>
 8002602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002606:	2b01      	cmp	r3, #1
 8002608:	d101      	bne.n	800260e <xQueueGenericSend+0x76>
 800260a:	2301      	movs	r3, #1
 800260c:	e000      	b.n	8002610 <xQueueGenericSend+0x78>
 800260e:	2300      	movs	r3, #0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d10b      	bne.n	800262c <xQueueGenericSend+0x94>
 8002614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002618:	b672      	cpsid	i
 800261a:	f383 8811 	msr	BASEPRI, r3
 800261e:	f3bf 8f6f 	isb	sy
 8002622:	f3bf 8f4f 	dsb	sy
 8002626:	b662      	cpsie	i
 8002628:	623b      	str	r3, [r7, #32]
 800262a:	e7fe      	b.n	800262a <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800262c:	f001 f93e 	bl	80038ac <xTaskGetSchedulerState>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d102      	bne.n	800263c <xQueueGenericSend+0xa4>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <xQueueGenericSend+0xa8>
 800263c:	2301      	movs	r3, #1
 800263e:	e000      	b.n	8002642 <xQueueGenericSend+0xaa>
 8002640:	2300      	movs	r3, #0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10b      	bne.n	800265e <xQueueGenericSend+0xc6>
 8002646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800264a:	b672      	cpsid	i
 800264c:	f383 8811 	msr	BASEPRI, r3
 8002650:	f3bf 8f6f 	isb	sy
 8002654:	f3bf 8f4f 	dsb	sy
 8002658:	b662      	cpsie	i
 800265a:	61fb      	str	r3, [r7, #28]
 800265c:	e7fe      	b.n	800265c <xQueueGenericSend+0xc4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800265e:	f7ff fd83 	bl	8002168 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002664:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800266a:	429a      	cmp	r2, r3
 800266c:	d302      	bcc.n	8002674 <xQueueGenericSend+0xdc>
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	2b02      	cmp	r3, #2
 8002672:	d129      	bne.n	80026c8 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	68b9      	ldr	r1, [r7, #8]
 8002678:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800267a:	f000 facc 	bl	8002c16 <prvCopyDataToQueue>
 800267e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002684:	2b00      	cmp	r3, #0
 8002686:	d010      	beq.n	80026aa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268a:	3324      	adds	r3, #36	; 0x24
 800268c:	4618      	mov	r0, r3
 800268e:	f000 ff69 	bl	8003564 <xTaskRemoveFromEventList>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d013      	beq.n	80026c0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002698:	4b3f      	ldr	r3, [pc, #252]	; (8002798 <xQueueGenericSend+0x200>)
 800269a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	f3bf 8f4f 	dsb	sy
 80026a4:	f3bf 8f6f 	isb	sy
 80026a8:	e00a      	b.n	80026c0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80026aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d007      	beq.n	80026c0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80026b0:	4b39      	ldr	r3, [pc, #228]	; (8002798 <xQueueGenericSend+0x200>)
 80026b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	f3bf 8f4f 	dsb	sy
 80026bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80026c0:	f7ff fd84 	bl	80021cc <vPortExitCritical>
				return pdPASS;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e063      	b.n	8002790 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d103      	bne.n	80026d6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80026ce:	f7ff fd7d 	bl	80021cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80026d2:	2300      	movs	r3, #0
 80026d4:	e05c      	b.n	8002790 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80026d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d106      	bne.n	80026ea <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80026dc:	f107 0314 	add.w	r3, r7, #20
 80026e0:	4618      	mov	r0, r3
 80026e2:	f000 ffa3 	bl	800362c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80026e6:	2301      	movs	r3, #1
 80026e8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80026ea:	f7ff fd6f 	bl	80021cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80026ee:	f000 fd4d 	bl	800318c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80026f2:	f7ff fd39 	bl	8002168 <vPortEnterCritical>
 80026f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80026fc:	b25b      	sxtb	r3, r3
 80026fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002702:	d103      	bne.n	800270c <xQueueGenericSend+0x174>
 8002704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002706:	2200      	movs	r2, #0
 8002708:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800270c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800270e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002712:	b25b      	sxtb	r3, r3
 8002714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002718:	d103      	bne.n	8002722 <xQueueGenericSend+0x18a>
 800271a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800271c:	2200      	movs	r2, #0
 800271e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002722:	f7ff fd53 	bl	80021cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002726:	1d3a      	adds	r2, r7, #4
 8002728:	f107 0314 	add.w	r3, r7, #20
 800272c:	4611      	mov	r1, r2
 800272e:	4618      	mov	r0, r3
 8002730:	f000 ff92 	bl	8003658 <xTaskCheckForTimeOut>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d124      	bne.n	8002784 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800273a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800273c:	f000 fb63 	bl	8002e06 <prvIsQueueFull>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d018      	beq.n	8002778 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002748:	3310      	adds	r3, #16
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	4611      	mov	r1, r2
 800274e:	4618      	mov	r0, r3
 8002750:	f000 fee2 	bl	8003518 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002754:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002756:	f000 faee 	bl	8002d36 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800275a:	f000 fd25 	bl	80031a8 <xTaskResumeAll>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	f47f af7c 	bne.w	800265e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002766:	4b0c      	ldr	r3, [pc, #48]	; (8002798 <xQueueGenericSend+0x200>)
 8002768:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	f3bf 8f4f 	dsb	sy
 8002772:	f3bf 8f6f 	isb	sy
 8002776:	e772      	b.n	800265e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002778:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800277a:	f000 fadc 	bl	8002d36 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800277e:	f000 fd13 	bl	80031a8 <xTaskResumeAll>
 8002782:	e76c      	b.n	800265e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002784:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002786:	f000 fad6 	bl	8002d36 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800278a:	f000 fd0d 	bl	80031a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800278e:	2300      	movs	r3, #0
		}
	}
}
 8002790:	4618      	mov	r0, r3
 8002792:	3738      	adds	r7, #56	; 0x38
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	e000ed04 	.word	0xe000ed04

0800279c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b08e      	sub	sp, #56	; 0x38
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80027aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d10b      	bne.n	80027c8 <xQueueGiveFromISR+0x2c>
 80027b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027b4:	b672      	cpsid	i
 80027b6:	f383 8811 	msr	BASEPRI, r3
 80027ba:	f3bf 8f6f 	isb	sy
 80027be:	f3bf 8f4f 	dsb	sy
 80027c2:	b662      	cpsie	i
 80027c4:	623b      	str	r3, [r7, #32]
 80027c6:	e7fe      	b.n	80027c6 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80027c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00b      	beq.n	80027e8 <xQueueGiveFromISR+0x4c>
 80027d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d4:	b672      	cpsid	i
 80027d6:	f383 8811 	msr	BASEPRI, r3
 80027da:	f3bf 8f6f 	isb	sy
 80027de:	f3bf 8f4f 	dsb	sy
 80027e2:	b662      	cpsie	i
 80027e4:	61fb      	str	r3, [r7, #28]
 80027e6:	e7fe      	b.n	80027e6 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80027e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d103      	bne.n	80027f8 <xQueueGiveFromISR+0x5c>
 80027f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <xQueueGiveFromISR+0x60>
 80027f8:	2301      	movs	r3, #1
 80027fa:	e000      	b.n	80027fe <xQueueGiveFromISR+0x62>
 80027fc:	2300      	movs	r3, #0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d10b      	bne.n	800281a <xQueueGiveFromISR+0x7e>
 8002802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002806:	b672      	cpsid	i
 8002808:	f383 8811 	msr	BASEPRI, r3
 800280c:	f3bf 8f6f 	isb	sy
 8002810:	f3bf 8f4f 	dsb	sy
 8002814:	b662      	cpsie	i
 8002816:	61bb      	str	r3, [r7, #24]
 8002818:	e7fe      	b.n	8002818 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800281a:	f7ff fd85 	bl	8002328 <vPortValidateInterruptPriority>
	__asm volatile
 800281e:	f3ef 8211 	mrs	r2, BASEPRI
 8002822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002826:	b672      	cpsid	i
 8002828:	f383 8811 	msr	BASEPRI, r3
 800282c:	f3bf 8f6f 	isb	sy
 8002830:	f3bf 8f4f 	dsb	sy
 8002834:	b662      	cpsie	i
 8002836:	617a      	str	r2, [r7, #20]
 8002838:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800283a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800283c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800283e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002842:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002848:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800284a:	429a      	cmp	r2, r3
 800284c:	d22b      	bcs.n	80028a6 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800284e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002850:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002854:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285a:	1c5a      	adds	r2, r3, #1
 800285c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800285e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002860:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002868:	d112      	bne.n	8002890 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800286a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	2b00      	cmp	r3, #0
 8002870:	d016      	beq.n	80028a0 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002874:	3324      	adds	r3, #36	; 0x24
 8002876:	4618      	mov	r0, r3
 8002878:	f000 fe74 	bl	8003564 <xTaskRemoveFromEventList>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00e      	beq.n	80028a0 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00b      	beq.n	80028a0 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	2201      	movs	r2, #1
 800288c:	601a      	str	r2, [r3, #0]
 800288e:	e007      	b.n	80028a0 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002890:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002894:	3301      	adds	r3, #1
 8002896:	b2db      	uxtb	r3, r3
 8002898:	b25a      	sxtb	r2, r3
 800289a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800289c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80028a0:	2301      	movs	r3, #1
 80028a2:	637b      	str	r3, [r7, #52]	; 0x34
 80028a4:	e001      	b.n	80028aa <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80028a6:	2300      	movs	r3, #0
 80028a8:	637b      	str	r3, [r7, #52]	; 0x34
 80028aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ac:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80028b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3738      	adds	r7, #56	; 0x38
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
	...

080028c0 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b08e      	sub	sp, #56	; 0x38
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80028ca:	2300      	movs	r3, #0
 80028cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80028d2:	2300      	movs	r3, #0
 80028d4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80028d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10b      	bne.n	80028f4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80028dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e0:	b672      	cpsid	i
 80028e2:	f383 8811 	msr	BASEPRI, r3
 80028e6:	f3bf 8f6f 	isb	sy
 80028ea:	f3bf 8f4f 	dsb	sy
 80028ee:	b662      	cpsie	i
 80028f0:	623b      	str	r3, [r7, #32]
 80028f2:	e7fe      	b.n	80028f2 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80028f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00b      	beq.n	8002914 <xQueueSemaphoreTake+0x54>
 80028fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002900:	b672      	cpsid	i
 8002902:	f383 8811 	msr	BASEPRI, r3
 8002906:	f3bf 8f6f 	isb	sy
 800290a:	f3bf 8f4f 	dsb	sy
 800290e:	b662      	cpsie	i
 8002910:	61fb      	str	r3, [r7, #28]
 8002912:	e7fe      	b.n	8002912 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002914:	f000 ffca 	bl	80038ac <xTaskGetSchedulerState>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d102      	bne.n	8002924 <xQueueSemaphoreTake+0x64>
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <xQueueSemaphoreTake+0x68>
 8002924:	2301      	movs	r3, #1
 8002926:	e000      	b.n	800292a <xQueueSemaphoreTake+0x6a>
 8002928:	2300      	movs	r3, #0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10b      	bne.n	8002946 <xQueueSemaphoreTake+0x86>
 800292e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002932:	b672      	cpsid	i
 8002934:	f383 8811 	msr	BASEPRI, r3
 8002938:	f3bf 8f6f 	isb	sy
 800293c:	f3bf 8f4f 	dsb	sy
 8002940:	b662      	cpsie	i
 8002942:	61bb      	str	r3, [r7, #24]
 8002944:	e7fe      	b.n	8002944 <xQueueSemaphoreTake+0x84>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002946:	f7ff fc0f 	bl	8002168 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800294a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800294c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800294e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002952:	2b00      	cmp	r3, #0
 8002954:	d024      	beq.n	80029a0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002958:	1e5a      	subs	r2, r3, #1
 800295a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800295e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d104      	bne.n	8002970 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8002966:	f001 f96f 	bl	8003c48 <pvTaskIncrementMutexHeldCount>
 800296a:	4602      	mov	r2, r0
 800296c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800296e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00f      	beq.n	8002998 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800297a:	3310      	adds	r3, #16
 800297c:	4618      	mov	r0, r3
 800297e:	f000 fdf1 	bl	8003564 <xTaskRemoveFromEventList>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d007      	beq.n	8002998 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002988:	4b54      	ldr	r3, [pc, #336]	; (8002adc <xQueueSemaphoreTake+0x21c>)
 800298a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	f3bf 8f4f 	dsb	sy
 8002994:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002998:	f7ff fc18 	bl	80021cc <vPortExitCritical>
				return pdPASS;
 800299c:	2301      	movs	r3, #1
 800299e:	e098      	b.n	8002ad2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d112      	bne.n	80029cc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80029a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00b      	beq.n	80029c4 <xQueueSemaphoreTake+0x104>
 80029ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b0:	b672      	cpsid	i
 80029b2:	f383 8811 	msr	BASEPRI, r3
 80029b6:	f3bf 8f6f 	isb	sy
 80029ba:	f3bf 8f4f 	dsb	sy
 80029be:	b662      	cpsie	i
 80029c0:	617b      	str	r3, [r7, #20]
 80029c2:	e7fe      	b.n	80029c2 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80029c4:	f7ff fc02 	bl	80021cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80029c8:	2300      	movs	r3, #0
 80029ca:	e082      	b.n	8002ad2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80029cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d106      	bne.n	80029e0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80029d2:	f107 030c 	add.w	r3, r7, #12
 80029d6:	4618      	mov	r0, r3
 80029d8:	f000 fe28 	bl	800362c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80029dc:	2301      	movs	r3, #1
 80029de:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80029e0:	f7ff fbf4 	bl	80021cc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80029e4:	f000 fbd2 	bl	800318c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80029e8:	f7ff fbbe 	bl	8002168 <vPortEnterCritical>
 80029ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029f2:	b25b      	sxtb	r3, r3
 80029f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f8:	d103      	bne.n	8002a02 <xQueueSemaphoreTake+0x142>
 80029fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a08:	b25b      	sxtb	r3, r3
 8002a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a0e:	d103      	bne.n	8002a18 <xQueueSemaphoreTake+0x158>
 8002a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a18:	f7ff fbd8 	bl	80021cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a1c:	463a      	mov	r2, r7
 8002a1e:	f107 030c 	add.w	r3, r7, #12
 8002a22:	4611      	mov	r1, r2
 8002a24:	4618      	mov	r0, r3
 8002a26:	f000 fe17 	bl	8003658 <xTaskCheckForTimeOut>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d132      	bne.n	8002a96 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a32:	f000 f9d2 	bl	8002dda <prvIsQueueEmpty>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d026      	beq.n	8002a8a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d109      	bne.n	8002a58 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8002a44:	f7ff fb90 	bl	8002168 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8002a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f000 ff4b 	bl	80038e8 <xTaskPriorityInherit>
 8002a52:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8002a54:	f7ff fbba 	bl	80021cc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a5a:	3324      	adds	r3, #36	; 0x24
 8002a5c:	683a      	ldr	r2, [r7, #0]
 8002a5e:	4611      	mov	r1, r2
 8002a60:	4618      	mov	r0, r3
 8002a62:	f000 fd59 	bl	8003518 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002a66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a68:	f000 f965 	bl	8002d36 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002a6c:	f000 fb9c 	bl	80031a8 <xTaskResumeAll>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f47f af67 	bne.w	8002946 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8002a78:	4b18      	ldr	r3, [pc, #96]	; (8002adc <xQueueSemaphoreTake+0x21c>)
 8002a7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	f3bf 8f4f 	dsb	sy
 8002a84:	f3bf 8f6f 	isb	sy
 8002a88:	e75d      	b.n	8002946 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002a8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a8c:	f000 f953 	bl	8002d36 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002a90:	f000 fb8a 	bl	80031a8 <xTaskResumeAll>
 8002a94:	e757      	b.n	8002946 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002a96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a98:	f000 f94d 	bl	8002d36 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002a9c:	f000 fb84 	bl	80031a8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002aa0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002aa2:	f000 f99a 	bl	8002dda <prvIsQueueEmpty>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f43f af4c 	beq.w	8002946 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00d      	beq.n	8002ad0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8002ab4:	f7ff fb58 	bl	8002168 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002ab8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002aba:	f000 f894 	bl	8002be6 <prvGetDisinheritPriorityAfterTimeout>
 8002abe:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8002ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f001 f81c 	bl	8003b04 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002acc:	f7ff fb7e 	bl	80021cc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002ad0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3738      	adds	r7, #56	; 0x38
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	e000ed04 	.word	0xe000ed04

08002ae0 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b08e      	sub	sp, #56	; 0x38
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10b      	bne.n	8002b0e <xQueueReceiveFromISR+0x2e>
 8002af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002afa:	b672      	cpsid	i
 8002afc:	f383 8811 	msr	BASEPRI, r3
 8002b00:	f3bf 8f6f 	isb	sy
 8002b04:	f3bf 8f4f 	dsb	sy
 8002b08:	b662      	cpsie	i
 8002b0a:	623b      	str	r3, [r7, #32]
 8002b0c:	e7fe      	b.n	8002b0c <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d103      	bne.n	8002b1c <xQueueReceiveFromISR+0x3c>
 8002b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d101      	bne.n	8002b20 <xQueueReceiveFromISR+0x40>
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e000      	b.n	8002b22 <xQueueReceiveFromISR+0x42>
 8002b20:	2300      	movs	r3, #0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10b      	bne.n	8002b3e <xQueueReceiveFromISR+0x5e>
 8002b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b2a:	b672      	cpsid	i
 8002b2c:	f383 8811 	msr	BASEPRI, r3
 8002b30:	f3bf 8f6f 	isb	sy
 8002b34:	f3bf 8f4f 	dsb	sy
 8002b38:	b662      	cpsie	i
 8002b3a:	61fb      	str	r3, [r7, #28]
 8002b3c:	e7fe      	b.n	8002b3c <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002b3e:	f7ff fbf3 	bl	8002328 <vPortValidateInterruptPriority>
	__asm volatile
 8002b42:	f3ef 8211 	mrs	r2, BASEPRI
 8002b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b4a:	b672      	cpsid	i
 8002b4c:	f383 8811 	msr	BASEPRI, r3
 8002b50:	f3bf 8f6f 	isb	sy
 8002b54:	f3bf 8f4f 	dsb	sy
 8002b58:	b662      	cpsie	i
 8002b5a:	61ba      	str	r2, [r7, #24]
 8002b5c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002b5e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002b60:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b66:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d02f      	beq.n	8002bce <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002b78:	68b9      	ldr	r1, [r7, #8]
 8002b7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b7c:	f000 f8b5 	bl	8002cea <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b82:	1e5a      	subs	r2, r3, #1
 8002b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b86:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002b88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b90:	d112      	bne.n	8002bb8 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d016      	beq.n	8002bc8 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9c:	3310      	adds	r3, #16
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 fce0 	bl	8003564 <xTaskRemoveFromEventList>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00e      	beq.n	8002bc8 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00b      	beq.n	8002bc8 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	601a      	str	r2, [r3, #0]
 8002bb6:	e007      	b.n	8002bc8 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002bb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	b25a      	sxtb	r2, r3
 8002bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	637b      	str	r3, [r7, #52]	; 0x34
 8002bcc:	e001      	b.n	8002bd2 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	637b      	str	r3, [r7, #52]	; 0x34
 8002bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3738      	adds	r7, #56	; 0x38
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002be6:	b480      	push	{r7}
 8002be8:	b085      	sub	sp, #20
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d006      	beq.n	8002c04 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f1c3 0307 	rsb	r3, r3, #7
 8002c00:	60fb      	str	r3, [r7, #12]
 8002c02:	e001      	b.n	8002c08 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002c04:	2300      	movs	r3, #0
 8002c06:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8002c08:	68fb      	ldr	r3, [r7, #12]
	}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3714      	adds	r7, #20
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b086      	sub	sp, #24
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	60f8      	str	r0, [r7, #12]
 8002c1e:	60b9      	str	r1, [r7, #8]
 8002c20:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002c22:	2300      	movs	r3, #0
 8002c24:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c2a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d10d      	bne.n	8002c50 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d14d      	bne.n	8002cd8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f000 fed7 	bl	80039f4 <xTaskPriorityDisinherit>
 8002c46:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	605a      	str	r2, [r3, #4]
 8002c4e:	e043      	b.n	8002cd8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d119      	bne.n	8002c8a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6898      	ldr	r0, [r3, #8]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	461a      	mov	r2, r3
 8002c60:	68b9      	ldr	r1, [r7, #8]
 8002c62:	f001 fb0d 	bl	8004280 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	689a      	ldr	r2, [r3, #8]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	441a      	add	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d32b      	bcc.n	8002cd8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	609a      	str	r2, [r3, #8]
 8002c88:	e026      	b.n	8002cd8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	68d8      	ldr	r0, [r3, #12]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c92:	461a      	mov	r2, r3
 8002c94:	68b9      	ldr	r1, [r7, #8]
 8002c96:	f001 faf3 	bl	8004280 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	68da      	ldr	r2, [r3, #12]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	425b      	negs	r3, r3
 8002ca4:	441a      	add	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	68da      	ldr	r2, [r3, #12]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d207      	bcs.n	8002cc6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	425b      	negs	r3, r3
 8002cc0:	441a      	add	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d105      	bne.n	8002cd8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d002      	beq.n	8002cd8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	1c5a      	adds	r2, r3, #1
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002ce0:	697b      	ldr	r3, [r7, #20]
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3718      	adds	r7, #24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b082      	sub	sp, #8
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
 8002cf2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d018      	beq.n	8002d2e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68da      	ldr	r2, [r3, #12]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d04:	441a      	add	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68da      	ldr	r2, [r3, #12]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d303      	bcc.n	8002d1e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68d9      	ldr	r1, [r3, #12]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	461a      	mov	r2, r3
 8002d28:	6838      	ldr	r0, [r7, #0]
 8002d2a:	f001 faa9 	bl	8004280 <memcpy>
	}
}
 8002d2e:	bf00      	nop
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b084      	sub	sp, #16
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002d3e:	f7ff fa13 	bl	8002168 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d48:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d4a:	e011      	b.n	8002d70 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d012      	beq.n	8002d7a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	3324      	adds	r3, #36	; 0x24
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f000 fc03 	bl	8003564 <xTaskRemoveFromEventList>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002d64:	f000 fcdc 	bl	8003720 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002d68:	7bfb      	ldrb	r3, [r7, #15]
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	dce9      	bgt.n	8002d4c <prvUnlockQueue+0x16>
 8002d78:	e000      	b.n	8002d7c <prvUnlockQueue+0x46>
					break;
 8002d7a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	22ff      	movs	r2, #255	; 0xff
 8002d80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002d84:	f7ff fa22 	bl	80021cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002d88:	f7ff f9ee 	bl	8002168 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d92:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d94:	e011      	b.n	8002dba <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d012      	beq.n	8002dc4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	3310      	adds	r3, #16
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 fbde 	bl	8003564 <xTaskRemoveFromEventList>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002dae:	f000 fcb7 	bl	8003720 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002db2:	7bbb      	ldrb	r3, [r7, #14]
 8002db4:	3b01      	subs	r3, #1
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002dba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	dce9      	bgt.n	8002d96 <prvUnlockQueue+0x60>
 8002dc2:	e000      	b.n	8002dc6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002dc4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	22ff      	movs	r2, #255	; 0xff
 8002dca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002dce:	f7ff f9fd 	bl	80021cc <vPortExitCritical>
}
 8002dd2:	bf00      	nop
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b084      	sub	sp, #16
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002de2:	f7ff f9c1 	bl	8002168 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d102      	bne.n	8002df4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002dee:	2301      	movs	r3, #1
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	e001      	b.n	8002df8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002df4:	2300      	movs	r3, #0
 8002df6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002df8:	f7ff f9e8 	bl	80021cc <vPortExitCritical>

	return xReturn;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b084      	sub	sp, #16
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002e0e:	f7ff f9ab 	bl	8002168 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d102      	bne.n	8002e24 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	60fb      	str	r3, [r7, #12]
 8002e22:	e001      	b.n	8002e28 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002e24:	2300      	movs	r3, #0
 8002e26:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002e28:	f7ff f9d0 	bl	80021cc <vPortExitCritical>

	return xReturn;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b08c      	sub	sp, #48	; 0x30
 8002e3a:	af04      	add	r7, sp, #16
 8002e3c:	60f8      	str	r0, [r7, #12]
 8002e3e:	60b9      	str	r1, [r7, #8]
 8002e40:	603b      	str	r3, [r7, #0]
 8002e42:	4613      	mov	r3, r2
 8002e44:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e46:	88fb      	ldrh	r3, [r7, #6]
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7fe fdf2 	bl	8001a34 <pvPortMalloc>
 8002e50:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00e      	beq.n	8002e76 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002e58:	2054      	movs	r0, #84	; 0x54
 8002e5a:	f7fe fdeb 	bl	8001a34 <pvPortMalloc>
 8002e5e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d003      	beq.n	8002e6e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	631a      	str	r2, [r3, #48]	; 0x30
 8002e6c:	e005      	b.n	8002e7a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002e6e:	6978      	ldr	r0, [r7, #20]
 8002e70:	f7fe fea8 	bl	8001bc4 <vPortFree>
 8002e74:	e001      	b.n	8002e7a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002e76:	2300      	movs	r3, #0
 8002e78:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d013      	beq.n	8002ea8 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e80:	88fa      	ldrh	r2, [r7, #6]
 8002e82:	2300      	movs	r3, #0
 8002e84:	9303      	str	r3, [sp, #12]
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	9302      	str	r3, [sp, #8]
 8002e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8c:	9301      	str	r3, [sp, #4]
 8002e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e90:	9300      	str	r3, [sp, #0]
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	68b9      	ldr	r1, [r7, #8]
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f000 f80e 	bl	8002eb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e9c:	69f8      	ldr	r0, [r7, #28]
 8002e9e:	f000 f88b 	bl	8002fb8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	61bb      	str	r3, [r7, #24]
 8002ea6:	e002      	b.n	8002eae <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8002eac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002eae:	69bb      	ldr	r3, [r7, #24]
	}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3720      	adds	r7, #32
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b088      	sub	sp, #32
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
 8002ec4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eca:	6879      	ldr	r1, [r7, #4]
 8002ecc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8002ed0:	440b      	add	r3, r1
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	4413      	add	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	f023 0307 	bic.w	r3, r3, #7
 8002ede:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	f003 0307 	and.w	r3, r3, #7
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00b      	beq.n	8002f02 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8002eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eee:	b672      	cpsid	i
 8002ef0:	f383 8811 	msr	BASEPRI, r3
 8002ef4:	f3bf 8f6f 	isb	sy
 8002ef8:	f3bf 8f4f 	dsb	sy
 8002efc:	b662      	cpsie	i
 8002efe:	617b      	str	r3, [r7, #20]
 8002f00:	e7fe      	b.n	8002f00 <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f02:	2300      	movs	r3, #0
 8002f04:	61fb      	str	r3, [r7, #28]
 8002f06:	e012      	b.n	8002f2e <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002f08:	68ba      	ldr	r2, [r7, #8]
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	7819      	ldrb	r1, [r3, #0]
 8002f10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	4413      	add	r3, r2
 8002f16:	3334      	adds	r3, #52	; 0x34
 8002f18:	460a      	mov	r2, r1
 8002f1a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002f1c:	68ba      	ldr	r2, [r7, #8]
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	4413      	add	r3, r2
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d006      	beq.n	8002f36 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	61fb      	str	r3, [r7, #28]
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	2b0f      	cmp	r3, #15
 8002f32:	d9e9      	bls.n	8002f08 <prvInitialiseNewTask+0x50>
 8002f34:	e000      	b.n	8002f38 <prvInitialiseNewTask+0x80>
		{
			break;
 8002f36:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f42:	2b06      	cmp	r3, #6
 8002f44:	d901      	bls.n	8002f4a <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002f46:	2306      	movs	r3, #6
 8002f48:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f4e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f54:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f58:	2200      	movs	r2, #0
 8002f5a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5e:	3304      	adds	r3, #4
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7fe ff67 	bl	8001e34 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f68:	3318      	adds	r3, #24
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7fe ff62 	bl	8001e34 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f74:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f78:	f1c3 0207 	rsb	r2, r3, #7
 8002f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f7e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f84:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f88:	2200      	movs	r2, #0
 8002f8a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	68f9      	ldr	r1, [r7, #12]
 8002f98:	69b8      	ldr	r0, [r7, #24]
 8002f9a:	f7fe ffdf 	bl	8001f5c <pxPortInitialiseStack>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d002      	beq.n	8002fb0 <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fae:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002fb0:	bf00      	nop
 8002fb2:	3720      	adds	r7, #32
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002fc0:	f7ff f8d2 	bl	8002168 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002fc4:	4b2a      	ldr	r3, [pc, #168]	; (8003070 <prvAddNewTaskToReadyList+0xb8>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	4a29      	ldr	r2, [pc, #164]	; (8003070 <prvAddNewTaskToReadyList+0xb8>)
 8002fcc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002fce:	4b29      	ldr	r3, [pc, #164]	; (8003074 <prvAddNewTaskToReadyList+0xbc>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d109      	bne.n	8002fea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002fd6:	4a27      	ldr	r2, [pc, #156]	; (8003074 <prvAddNewTaskToReadyList+0xbc>)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002fdc:	4b24      	ldr	r3, [pc, #144]	; (8003070 <prvAddNewTaskToReadyList+0xb8>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d110      	bne.n	8003006 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002fe4:	f000 fbc0 	bl	8003768 <prvInitialiseTaskLists>
 8002fe8:	e00d      	b.n	8003006 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002fea:	4b23      	ldr	r3, [pc, #140]	; (8003078 <prvAddNewTaskToReadyList+0xc0>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d109      	bne.n	8003006 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002ff2:	4b20      	ldr	r3, [pc, #128]	; (8003074 <prvAddNewTaskToReadyList+0xbc>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d802      	bhi.n	8003006 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003000:	4a1c      	ldr	r2, [pc, #112]	; (8003074 <prvAddNewTaskToReadyList+0xbc>)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003006:	4b1d      	ldr	r3, [pc, #116]	; (800307c <prvAddNewTaskToReadyList+0xc4>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	3301      	adds	r3, #1
 800300c:	4a1b      	ldr	r2, [pc, #108]	; (800307c <prvAddNewTaskToReadyList+0xc4>)
 800300e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003014:	2201      	movs	r2, #1
 8003016:	409a      	lsls	r2, r3
 8003018:	4b19      	ldr	r3, [pc, #100]	; (8003080 <prvAddNewTaskToReadyList+0xc8>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4313      	orrs	r3, r2
 800301e:	4a18      	ldr	r2, [pc, #96]	; (8003080 <prvAddNewTaskToReadyList+0xc8>)
 8003020:	6013      	str	r3, [r2, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003026:	4613      	mov	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	4413      	add	r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	4a15      	ldr	r2, [pc, #84]	; (8003084 <prvAddNewTaskToReadyList+0xcc>)
 8003030:	441a      	add	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	3304      	adds	r3, #4
 8003036:	4619      	mov	r1, r3
 8003038:	4610      	mov	r0, r2
 800303a:	f7fe ff08 	bl	8001e4e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800303e:	f7ff f8c5 	bl	80021cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003042:	4b0d      	ldr	r3, [pc, #52]	; (8003078 <prvAddNewTaskToReadyList+0xc0>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00e      	beq.n	8003068 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800304a:	4b0a      	ldr	r3, [pc, #40]	; (8003074 <prvAddNewTaskToReadyList+0xbc>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003054:	429a      	cmp	r2, r3
 8003056:	d207      	bcs.n	8003068 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003058:	4b0b      	ldr	r3, [pc, #44]	; (8003088 <prvAddNewTaskToReadyList+0xd0>)
 800305a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	f3bf 8f4f 	dsb	sy
 8003064:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003068:	bf00      	nop
 800306a:	3708      	adds	r7, #8
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	20003d48 	.word	0x20003d48
 8003074:	20003c48 	.word	0x20003c48
 8003078:	20003d54 	.word	0x20003d54
 800307c:	20003d64 	.word	0x20003d64
 8003080:	20003d50 	.word	0x20003d50
 8003084:	20003c4c 	.word	0x20003c4c
 8003088:	e000ed04 	.word	0xe000ed04

0800308c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003094:	2300      	movs	r3, #0
 8003096:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d018      	beq.n	80030d0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800309e:	4b14      	ldr	r3, [pc, #80]	; (80030f0 <vTaskDelay+0x64>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00b      	beq.n	80030be <vTaskDelay+0x32>
 80030a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030aa:	b672      	cpsid	i
 80030ac:	f383 8811 	msr	BASEPRI, r3
 80030b0:	f3bf 8f6f 	isb	sy
 80030b4:	f3bf 8f4f 	dsb	sy
 80030b8:	b662      	cpsie	i
 80030ba:	60bb      	str	r3, [r7, #8]
 80030bc:	e7fe      	b.n	80030bc <vTaskDelay+0x30>
			vTaskSuspendAll();
 80030be:	f000 f865 	bl	800318c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80030c2:	2100      	movs	r1, #0
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 fdd3 	bl	8003c70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80030ca:	f000 f86d 	bl	80031a8 <xTaskResumeAll>
 80030ce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d107      	bne.n	80030e6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80030d6:	4b07      	ldr	r3, [pc, #28]	; (80030f4 <vTaskDelay+0x68>)
 80030d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	f3bf 8f4f 	dsb	sy
 80030e2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80030e6:	bf00      	nop
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	20003d70 	.word	0x20003d70
 80030f4:	e000ed04 	.word	0xe000ed04

080030f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80030fe:	4b1d      	ldr	r3, [pc, #116]	; (8003174 <vTaskStartScheduler+0x7c>)
 8003100:	9301      	str	r3, [sp, #4]
 8003102:	2300      	movs	r3, #0
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	2300      	movs	r3, #0
 8003108:	2280      	movs	r2, #128	; 0x80
 800310a:	491b      	ldr	r1, [pc, #108]	; (8003178 <vTaskStartScheduler+0x80>)
 800310c:	481b      	ldr	r0, [pc, #108]	; (800317c <vTaskStartScheduler+0x84>)
 800310e:	f7ff fe92 	bl	8002e36 <xTaskCreate>
 8003112:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d117      	bne.n	800314a <vTaskStartScheduler+0x52>
 800311a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800311e:	b672      	cpsid	i
 8003120:	f383 8811 	msr	BASEPRI, r3
 8003124:	f3bf 8f6f 	isb	sy
 8003128:	f3bf 8f4f 	dsb	sy
 800312c:	b662      	cpsie	i
 800312e:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003130:	4b13      	ldr	r3, [pc, #76]	; (8003180 <vTaskStartScheduler+0x88>)
 8003132:	f04f 32ff 	mov.w	r2, #4294967295
 8003136:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003138:	4b12      	ldr	r3, [pc, #72]	; (8003184 <vTaskStartScheduler+0x8c>)
 800313a:	2201      	movs	r2, #1
 800313c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800313e:	4b12      	ldr	r3, [pc, #72]	; (8003188 <vTaskStartScheduler+0x90>)
 8003140:	2200      	movs	r2, #0
 8003142:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003144:	f7fe ff94 	bl	8002070 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003148:	e00f      	b.n	800316a <vTaskStartScheduler+0x72>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003150:	d10b      	bne.n	800316a <vTaskStartScheduler+0x72>
 8003152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003156:	b672      	cpsid	i
 8003158:	f383 8811 	msr	BASEPRI, r3
 800315c:	f3bf 8f6f 	isb	sy
 8003160:	f3bf 8f4f 	dsb	sy
 8003164:	b662      	cpsie	i
 8003166:	607b      	str	r3, [r7, #4]
 8003168:	e7fe      	b.n	8003168 <vTaskStartScheduler+0x70>
}
 800316a:	bf00      	nop
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	20003d6c 	.word	0x20003d6c
 8003178:	080042c0 	.word	0x080042c0
 800317c:	08003739 	.word	0x08003739
 8003180:	20003d68 	.word	0x20003d68
 8003184:	20003d54 	.word	0x20003d54
 8003188:	20003d4c 	.word	0x20003d4c

0800318c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003190:	4b04      	ldr	r3, [pc, #16]	; (80031a4 <vTaskSuspendAll+0x18>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	3301      	adds	r3, #1
 8003196:	4a03      	ldr	r2, [pc, #12]	; (80031a4 <vTaskSuspendAll+0x18>)
 8003198:	6013      	str	r3, [r2, #0]
}
 800319a:	bf00      	nop
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	20003d70 	.word	0x20003d70

080031a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80031ae:	2300      	movs	r3, #0
 80031b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80031b2:	2300      	movs	r3, #0
 80031b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80031b6:	4b42      	ldr	r3, [pc, #264]	; (80032c0 <xTaskResumeAll+0x118>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d10b      	bne.n	80031d6 <xTaskResumeAll+0x2e>
 80031be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c2:	b672      	cpsid	i
 80031c4:	f383 8811 	msr	BASEPRI, r3
 80031c8:	f3bf 8f6f 	isb	sy
 80031cc:	f3bf 8f4f 	dsb	sy
 80031d0:	b662      	cpsie	i
 80031d2:	603b      	str	r3, [r7, #0]
 80031d4:	e7fe      	b.n	80031d4 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80031d6:	f7fe ffc7 	bl	8002168 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80031da:	4b39      	ldr	r3, [pc, #228]	; (80032c0 <xTaskResumeAll+0x118>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	3b01      	subs	r3, #1
 80031e0:	4a37      	ldr	r2, [pc, #220]	; (80032c0 <xTaskResumeAll+0x118>)
 80031e2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031e4:	4b36      	ldr	r3, [pc, #216]	; (80032c0 <xTaskResumeAll+0x118>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d161      	bne.n	80032b0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80031ec:	4b35      	ldr	r3, [pc, #212]	; (80032c4 <xTaskResumeAll+0x11c>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d05d      	beq.n	80032b0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031f4:	e02e      	b.n	8003254 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80031f6:	4b34      	ldr	r3, [pc, #208]	; (80032c8 <xTaskResumeAll+0x120>)
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	3318      	adds	r3, #24
 8003202:	4618      	mov	r0, r3
 8003204:	f7fe fe80 	bl	8001f08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	3304      	adds	r3, #4
 800320c:	4618      	mov	r0, r3
 800320e:	f7fe fe7b 	bl	8001f08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003216:	2201      	movs	r2, #1
 8003218:	409a      	lsls	r2, r3
 800321a:	4b2c      	ldr	r3, [pc, #176]	; (80032cc <xTaskResumeAll+0x124>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4313      	orrs	r3, r2
 8003220:	4a2a      	ldr	r2, [pc, #168]	; (80032cc <xTaskResumeAll+0x124>)
 8003222:	6013      	str	r3, [r2, #0]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003228:	4613      	mov	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4413      	add	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4a27      	ldr	r2, [pc, #156]	; (80032d0 <xTaskResumeAll+0x128>)
 8003232:	441a      	add	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	3304      	adds	r3, #4
 8003238:	4619      	mov	r1, r3
 800323a:	4610      	mov	r0, r2
 800323c:	f7fe fe07 	bl	8001e4e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003244:	4b23      	ldr	r3, [pc, #140]	; (80032d4 <xTaskResumeAll+0x12c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324a:	429a      	cmp	r2, r3
 800324c:	d302      	bcc.n	8003254 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800324e:	4b22      	ldr	r3, [pc, #136]	; (80032d8 <xTaskResumeAll+0x130>)
 8003250:	2201      	movs	r2, #1
 8003252:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003254:	4b1c      	ldr	r3, [pc, #112]	; (80032c8 <xTaskResumeAll+0x120>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d1cc      	bne.n	80031f6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003262:	f000 fafd 	bl	8003860 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003266:	4b1d      	ldr	r3, [pc, #116]	; (80032dc <xTaskResumeAll+0x134>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d010      	beq.n	8003294 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003272:	f000 f837 	bl	80032e4 <xTaskIncrementTick>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d002      	beq.n	8003282 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800327c:	4b16      	ldr	r3, [pc, #88]	; (80032d8 <xTaskResumeAll+0x130>)
 800327e:	2201      	movs	r2, #1
 8003280:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	3b01      	subs	r3, #1
 8003286:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1f1      	bne.n	8003272 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800328e:	4b13      	ldr	r3, [pc, #76]	; (80032dc <xTaskResumeAll+0x134>)
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003294:	4b10      	ldr	r3, [pc, #64]	; (80032d8 <xTaskResumeAll+0x130>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d009      	beq.n	80032b0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800329c:	2301      	movs	r3, #1
 800329e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80032a0:	4b0f      	ldr	r3, [pc, #60]	; (80032e0 <xTaskResumeAll+0x138>)
 80032a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032a6:	601a      	str	r2, [r3, #0]
 80032a8:	f3bf 8f4f 	dsb	sy
 80032ac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80032b0:	f7fe ff8c 	bl	80021cc <vPortExitCritical>

	return xAlreadyYielded;
 80032b4:	68bb      	ldr	r3, [r7, #8]
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	20003d70 	.word	0x20003d70
 80032c4:	20003d48 	.word	0x20003d48
 80032c8:	20003d08 	.word	0x20003d08
 80032cc:	20003d50 	.word	0x20003d50
 80032d0:	20003c4c 	.word	0x20003c4c
 80032d4:	20003c48 	.word	0x20003c48
 80032d8:	20003d5c 	.word	0x20003d5c
 80032dc:	20003d58 	.word	0x20003d58
 80032e0:	e000ed04 	.word	0xe000ed04

080032e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80032ea:	2300      	movs	r3, #0
 80032ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032ee:	4b51      	ldr	r3, [pc, #324]	; (8003434 <xTaskIncrementTick+0x150>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f040 808e 	bne.w	8003414 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80032f8:	4b4f      	ldr	r3, [pc, #316]	; (8003438 <xTaskIncrementTick+0x154>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	3301      	adds	r3, #1
 80032fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003300:	4a4d      	ldr	r2, [pc, #308]	; (8003438 <xTaskIncrementTick+0x154>)
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d121      	bne.n	8003350 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800330c:	4b4b      	ldr	r3, [pc, #300]	; (800343c <xTaskIncrementTick+0x158>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00b      	beq.n	800332e <xTaskIncrementTick+0x4a>
 8003316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800331a:	b672      	cpsid	i
 800331c:	f383 8811 	msr	BASEPRI, r3
 8003320:	f3bf 8f6f 	isb	sy
 8003324:	f3bf 8f4f 	dsb	sy
 8003328:	b662      	cpsie	i
 800332a:	603b      	str	r3, [r7, #0]
 800332c:	e7fe      	b.n	800332c <xTaskIncrementTick+0x48>
 800332e:	4b43      	ldr	r3, [pc, #268]	; (800343c <xTaskIncrementTick+0x158>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	60fb      	str	r3, [r7, #12]
 8003334:	4b42      	ldr	r3, [pc, #264]	; (8003440 <xTaskIncrementTick+0x15c>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a40      	ldr	r2, [pc, #256]	; (800343c <xTaskIncrementTick+0x158>)
 800333a:	6013      	str	r3, [r2, #0]
 800333c:	4a40      	ldr	r2, [pc, #256]	; (8003440 <xTaskIncrementTick+0x15c>)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6013      	str	r3, [r2, #0]
 8003342:	4b40      	ldr	r3, [pc, #256]	; (8003444 <xTaskIncrementTick+0x160>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	3301      	adds	r3, #1
 8003348:	4a3e      	ldr	r2, [pc, #248]	; (8003444 <xTaskIncrementTick+0x160>)
 800334a:	6013      	str	r3, [r2, #0]
 800334c:	f000 fa88 	bl	8003860 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003350:	4b3d      	ldr	r3, [pc, #244]	; (8003448 <xTaskIncrementTick+0x164>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	429a      	cmp	r2, r3
 8003358:	d34d      	bcc.n	80033f6 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800335a:	4b38      	ldr	r3, [pc, #224]	; (800343c <xTaskIncrementTick+0x158>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d101      	bne.n	8003368 <xTaskIncrementTick+0x84>
 8003364:	2301      	movs	r3, #1
 8003366:	e000      	b.n	800336a <xTaskIncrementTick+0x86>
 8003368:	2300      	movs	r3, #0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d004      	beq.n	8003378 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800336e:	4b36      	ldr	r3, [pc, #216]	; (8003448 <xTaskIncrementTick+0x164>)
 8003370:	f04f 32ff 	mov.w	r2, #4294967295
 8003374:	601a      	str	r2, [r3, #0]
					break;
 8003376:	e03e      	b.n	80033f6 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003378:	4b30      	ldr	r3, [pc, #192]	; (800343c <xTaskIncrementTick+0x158>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	429a      	cmp	r2, r3
 800338e:	d203      	bcs.n	8003398 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003390:	4a2d      	ldr	r2, [pc, #180]	; (8003448 <xTaskIncrementTick+0x164>)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6013      	str	r3, [r2, #0]
						break;
 8003396:	e02e      	b.n	80033f6 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	3304      	adds	r3, #4
 800339c:	4618      	mov	r0, r3
 800339e:	f7fe fdb3 	bl	8001f08 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d004      	beq.n	80033b4 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	3318      	adds	r3, #24
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7fe fdaa 	bl	8001f08 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b8:	2201      	movs	r2, #1
 80033ba:	409a      	lsls	r2, r3
 80033bc:	4b23      	ldr	r3, [pc, #140]	; (800344c <xTaskIncrementTick+0x168>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	4a22      	ldr	r2, [pc, #136]	; (800344c <xTaskIncrementTick+0x168>)
 80033c4:	6013      	str	r3, [r2, #0]
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ca:	4613      	mov	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	4413      	add	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4a1f      	ldr	r2, [pc, #124]	; (8003450 <xTaskIncrementTick+0x16c>)
 80033d4:	441a      	add	r2, r3
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	3304      	adds	r3, #4
 80033da:	4619      	mov	r1, r3
 80033dc:	4610      	mov	r0, r2
 80033de:	f7fe fd36 	bl	8001e4e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033e6:	4b1b      	ldr	r3, [pc, #108]	; (8003454 <xTaskIncrementTick+0x170>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d3b4      	bcc.n	800335a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80033f0:	2301      	movs	r3, #1
 80033f2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033f4:	e7b1      	b.n	800335a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80033f6:	4b17      	ldr	r3, [pc, #92]	; (8003454 <xTaskIncrementTick+0x170>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033fc:	4914      	ldr	r1, [pc, #80]	; (8003450 <xTaskIncrementTick+0x16c>)
 80033fe:	4613      	mov	r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	4413      	add	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	440b      	add	r3, r1
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d907      	bls.n	800341e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800340e:	2301      	movs	r3, #1
 8003410:	617b      	str	r3, [r7, #20]
 8003412:	e004      	b.n	800341e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003414:	4b10      	ldr	r3, [pc, #64]	; (8003458 <xTaskIncrementTick+0x174>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	3301      	adds	r3, #1
 800341a:	4a0f      	ldr	r2, [pc, #60]	; (8003458 <xTaskIncrementTick+0x174>)
 800341c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800341e:	4b0f      	ldr	r3, [pc, #60]	; (800345c <xTaskIncrementTick+0x178>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8003426:	2301      	movs	r3, #1
 8003428:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800342a:	697b      	ldr	r3, [r7, #20]
}
 800342c:	4618      	mov	r0, r3
 800342e:	3718      	adds	r7, #24
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	20003d70 	.word	0x20003d70
 8003438:	20003d4c 	.word	0x20003d4c
 800343c:	20003d00 	.word	0x20003d00
 8003440:	20003d04 	.word	0x20003d04
 8003444:	20003d60 	.word	0x20003d60
 8003448:	20003d68 	.word	0x20003d68
 800344c:	20003d50 	.word	0x20003d50
 8003450:	20003c4c 	.word	0x20003c4c
 8003454:	20003c48 	.word	0x20003c48
 8003458:	20003d58 	.word	0x20003d58
 800345c:	20003d5c 	.word	0x20003d5c

08003460 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003460:	b480      	push	{r7}
 8003462:	b087      	sub	sp, #28
 8003464:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003466:	4b27      	ldr	r3, [pc, #156]	; (8003504 <vTaskSwitchContext+0xa4>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d003      	beq.n	8003476 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800346e:	4b26      	ldr	r3, [pc, #152]	; (8003508 <vTaskSwitchContext+0xa8>)
 8003470:	2201      	movs	r2, #1
 8003472:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003474:	e040      	b.n	80034f8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8003476:	4b24      	ldr	r3, [pc, #144]	; (8003508 <vTaskSwitchContext+0xa8>)
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800347c:	4b23      	ldr	r3, [pc, #140]	; (800350c <vTaskSwitchContext+0xac>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	fab3 f383 	clz	r3, r3
 8003488:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800348a:	7afb      	ldrb	r3, [r7, #11]
 800348c:	f1c3 031f 	rsb	r3, r3, #31
 8003490:	617b      	str	r3, [r7, #20]
 8003492:	491f      	ldr	r1, [pc, #124]	; (8003510 <vTaskSwitchContext+0xb0>)
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	4613      	mov	r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	4413      	add	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	440b      	add	r3, r1
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10b      	bne.n	80034be <vTaskSwitchContext+0x5e>
	__asm volatile
 80034a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034aa:	b672      	cpsid	i
 80034ac:	f383 8811 	msr	BASEPRI, r3
 80034b0:	f3bf 8f6f 	isb	sy
 80034b4:	f3bf 8f4f 	dsb	sy
 80034b8:	b662      	cpsie	i
 80034ba:	607b      	str	r3, [r7, #4]
 80034bc:	e7fe      	b.n	80034bc <vTaskSwitchContext+0x5c>
 80034be:	697a      	ldr	r2, [r7, #20]
 80034c0:	4613      	mov	r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	4413      	add	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	4a11      	ldr	r2, [pc, #68]	; (8003510 <vTaskSwitchContext+0xb0>)
 80034ca:	4413      	add	r3, r2
 80034cc:	613b      	str	r3, [r7, #16]
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	605a      	str	r2, [r3, #4]
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	3308      	adds	r3, #8
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d104      	bne.n	80034ee <vTaskSwitchContext+0x8e>
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	605a      	str	r2, [r3, #4]
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	4a07      	ldr	r2, [pc, #28]	; (8003514 <vTaskSwitchContext+0xb4>)
 80034f6:	6013      	str	r3, [r2, #0]
}
 80034f8:	bf00      	nop
 80034fa:	371c      	adds	r7, #28
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr
 8003504:	20003d70 	.word	0x20003d70
 8003508:	20003d5c 	.word	0x20003d5c
 800350c:	20003d50 	.word	0x20003d50
 8003510:	20003c4c 	.word	0x20003c4c
 8003514:	20003c48 	.word	0x20003c48

08003518 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10b      	bne.n	8003540 <vTaskPlaceOnEventList+0x28>
 8003528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800352c:	b672      	cpsid	i
 800352e:	f383 8811 	msr	BASEPRI, r3
 8003532:	f3bf 8f6f 	isb	sy
 8003536:	f3bf 8f4f 	dsb	sy
 800353a:	b662      	cpsie	i
 800353c:	60fb      	str	r3, [r7, #12]
 800353e:	e7fe      	b.n	800353e <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003540:	4b07      	ldr	r3, [pc, #28]	; (8003560 <vTaskPlaceOnEventList+0x48>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	3318      	adds	r3, #24
 8003546:	4619      	mov	r1, r3
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f7fe fca4 	bl	8001e96 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800354e:	2101      	movs	r1, #1
 8003550:	6838      	ldr	r0, [r7, #0]
 8003552:	f000 fb8d 	bl	8003c70 <prvAddCurrentTaskToDelayedList>
}
 8003556:	bf00      	nop
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	20003c48 	.word	0x20003c48

08003564 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b086      	sub	sp, #24
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10b      	bne.n	8003592 <xTaskRemoveFromEventList+0x2e>
 800357a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800357e:	b672      	cpsid	i
 8003580:	f383 8811 	msr	BASEPRI, r3
 8003584:	f3bf 8f6f 	isb	sy
 8003588:	f3bf 8f4f 	dsb	sy
 800358c:	b662      	cpsie	i
 800358e:	60fb      	str	r3, [r7, #12]
 8003590:	e7fe      	b.n	8003590 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	3318      	adds	r3, #24
 8003596:	4618      	mov	r0, r3
 8003598:	f7fe fcb6 	bl	8001f08 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800359c:	4b1d      	ldr	r3, [pc, #116]	; (8003614 <xTaskRemoveFromEventList+0xb0>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d11c      	bne.n	80035de <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	3304      	adds	r3, #4
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7fe fcad 	bl	8001f08 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b2:	2201      	movs	r2, #1
 80035b4:	409a      	lsls	r2, r3
 80035b6:	4b18      	ldr	r3, [pc, #96]	; (8003618 <xTaskRemoveFromEventList+0xb4>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	4a16      	ldr	r2, [pc, #88]	; (8003618 <xTaskRemoveFromEventList+0xb4>)
 80035be:	6013      	str	r3, [r2, #0]
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c4:	4613      	mov	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4413      	add	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4a13      	ldr	r2, [pc, #76]	; (800361c <xTaskRemoveFromEventList+0xb8>)
 80035ce:	441a      	add	r2, r3
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	3304      	adds	r3, #4
 80035d4:	4619      	mov	r1, r3
 80035d6:	4610      	mov	r0, r2
 80035d8:	f7fe fc39 	bl	8001e4e <vListInsertEnd>
 80035dc:	e005      	b.n	80035ea <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	3318      	adds	r3, #24
 80035e2:	4619      	mov	r1, r3
 80035e4:	480e      	ldr	r0, [pc, #56]	; (8003620 <xTaskRemoveFromEventList+0xbc>)
 80035e6:	f7fe fc32 	bl	8001e4e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ee:	4b0d      	ldr	r3, [pc, #52]	; (8003624 <xTaskRemoveFromEventList+0xc0>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d905      	bls.n	8003604 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80035f8:	2301      	movs	r3, #1
 80035fa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80035fc:	4b0a      	ldr	r3, [pc, #40]	; (8003628 <xTaskRemoveFromEventList+0xc4>)
 80035fe:	2201      	movs	r2, #1
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	e001      	b.n	8003608 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003604:	2300      	movs	r3, #0
 8003606:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003608:	697b      	ldr	r3, [r7, #20]
}
 800360a:	4618      	mov	r0, r3
 800360c:	3718      	adds	r7, #24
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	20003d70 	.word	0x20003d70
 8003618:	20003d50 	.word	0x20003d50
 800361c:	20003c4c 	.word	0x20003c4c
 8003620:	20003d08 	.word	0x20003d08
 8003624:	20003c48 	.word	0x20003c48
 8003628:	20003d5c 	.word	0x20003d5c

0800362c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003634:	4b06      	ldr	r3, [pc, #24]	; (8003650 <vTaskInternalSetTimeOutState+0x24>)
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800363c:	4b05      	ldr	r3, [pc, #20]	; (8003654 <vTaskInternalSetTimeOutState+0x28>)
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	605a      	str	r2, [r3, #4]
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr
 8003650:	20003d60 	.word	0x20003d60
 8003654:	20003d4c 	.word	0x20003d4c

08003658 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b088      	sub	sp, #32
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10b      	bne.n	8003680 <xTaskCheckForTimeOut+0x28>
 8003668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800366c:	b672      	cpsid	i
 800366e:	f383 8811 	msr	BASEPRI, r3
 8003672:	f3bf 8f6f 	isb	sy
 8003676:	f3bf 8f4f 	dsb	sy
 800367a:	b662      	cpsie	i
 800367c:	613b      	str	r3, [r7, #16]
 800367e:	e7fe      	b.n	800367e <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10b      	bne.n	800369e <xTaskCheckForTimeOut+0x46>
 8003686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800368a:	b672      	cpsid	i
 800368c:	f383 8811 	msr	BASEPRI, r3
 8003690:	f3bf 8f6f 	isb	sy
 8003694:	f3bf 8f4f 	dsb	sy
 8003698:	b662      	cpsie	i
 800369a:	60fb      	str	r3, [r7, #12]
 800369c:	e7fe      	b.n	800369c <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800369e:	f7fe fd63 	bl	8002168 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80036a2:	4b1d      	ldr	r3, [pc, #116]	; (8003718 <xTaskCheckForTimeOut+0xc0>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ba:	d102      	bne.n	80036c2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80036bc:	2300      	movs	r3, #0
 80036be:	61fb      	str	r3, [r7, #28]
 80036c0:	e023      	b.n	800370a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	4b15      	ldr	r3, [pc, #84]	; (800371c <xTaskCheckForTimeOut+0xc4>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d007      	beq.n	80036de <xTaskCheckForTimeOut+0x86>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	69ba      	ldr	r2, [r7, #24]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d302      	bcc.n	80036de <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80036d8:	2301      	movs	r3, #1
 80036da:	61fb      	str	r3, [r7, #28]
 80036dc:	e015      	b.n	800370a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d20b      	bcs.n	8003700 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	1ad2      	subs	r2, r2, r3
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f7ff ff99 	bl	800362c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80036fa:	2300      	movs	r3, #0
 80036fc:	61fb      	str	r3, [r7, #28]
 80036fe:	e004      	b.n	800370a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	2200      	movs	r2, #0
 8003704:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003706:	2301      	movs	r3, #1
 8003708:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800370a:	f7fe fd5f 	bl	80021cc <vPortExitCritical>

	return xReturn;
 800370e:	69fb      	ldr	r3, [r7, #28]
}
 8003710:	4618      	mov	r0, r3
 8003712:	3720      	adds	r7, #32
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	20003d4c 	.word	0x20003d4c
 800371c:	20003d60 	.word	0x20003d60

08003720 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003724:	4b03      	ldr	r3, [pc, #12]	; (8003734 <vTaskMissedYield+0x14>)
 8003726:	2201      	movs	r2, #1
 8003728:	601a      	str	r2, [r3, #0]
}
 800372a:	bf00      	nop
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	20003d5c 	.word	0x20003d5c

08003738 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003740:	f000 f852 	bl	80037e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003744:	4b06      	ldr	r3, [pc, #24]	; (8003760 <prvIdleTask+0x28>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d9f9      	bls.n	8003740 <prvIdleTask+0x8>
			{
				taskYIELD();
 800374c:	4b05      	ldr	r3, [pc, #20]	; (8003764 <prvIdleTask+0x2c>)
 800374e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003752:	601a      	str	r2, [r3, #0]
 8003754:	f3bf 8f4f 	dsb	sy
 8003758:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800375c:	e7f0      	b.n	8003740 <prvIdleTask+0x8>
 800375e:	bf00      	nop
 8003760:	20003c4c 	.word	0x20003c4c
 8003764:	e000ed04 	.word	0xe000ed04

08003768 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800376e:	2300      	movs	r3, #0
 8003770:	607b      	str	r3, [r7, #4]
 8003772:	e00c      	b.n	800378e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	4613      	mov	r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	4413      	add	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4a12      	ldr	r2, [pc, #72]	; (80037c8 <prvInitialiseTaskLists+0x60>)
 8003780:	4413      	add	r3, r2
 8003782:	4618      	mov	r0, r3
 8003784:	f7fe fb36 	bl	8001df4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	3301      	adds	r3, #1
 800378c:	607b      	str	r3, [r7, #4]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2b06      	cmp	r3, #6
 8003792:	d9ef      	bls.n	8003774 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003794:	480d      	ldr	r0, [pc, #52]	; (80037cc <prvInitialiseTaskLists+0x64>)
 8003796:	f7fe fb2d 	bl	8001df4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800379a:	480d      	ldr	r0, [pc, #52]	; (80037d0 <prvInitialiseTaskLists+0x68>)
 800379c:	f7fe fb2a 	bl	8001df4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80037a0:	480c      	ldr	r0, [pc, #48]	; (80037d4 <prvInitialiseTaskLists+0x6c>)
 80037a2:	f7fe fb27 	bl	8001df4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80037a6:	480c      	ldr	r0, [pc, #48]	; (80037d8 <prvInitialiseTaskLists+0x70>)
 80037a8:	f7fe fb24 	bl	8001df4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80037ac:	480b      	ldr	r0, [pc, #44]	; (80037dc <prvInitialiseTaskLists+0x74>)
 80037ae:	f7fe fb21 	bl	8001df4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80037b2:	4b0b      	ldr	r3, [pc, #44]	; (80037e0 <prvInitialiseTaskLists+0x78>)
 80037b4:	4a05      	ldr	r2, [pc, #20]	; (80037cc <prvInitialiseTaskLists+0x64>)
 80037b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80037b8:	4b0a      	ldr	r3, [pc, #40]	; (80037e4 <prvInitialiseTaskLists+0x7c>)
 80037ba:	4a05      	ldr	r2, [pc, #20]	; (80037d0 <prvInitialiseTaskLists+0x68>)
 80037bc:	601a      	str	r2, [r3, #0]
}
 80037be:	bf00      	nop
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	20003c4c 	.word	0x20003c4c
 80037cc:	20003cd8 	.word	0x20003cd8
 80037d0:	20003cec 	.word	0x20003cec
 80037d4:	20003d08 	.word	0x20003d08
 80037d8:	20003d1c 	.word	0x20003d1c
 80037dc:	20003d34 	.word	0x20003d34
 80037e0:	20003d00 	.word	0x20003d00
 80037e4:	20003d04 	.word	0x20003d04

080037e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037ee:	e019      	b.n	8003824 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80037f0:	f7fe fcba 	bl	8002168 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80037f4:	4b0f      	ldr	r3, [pc, #60]	; (8003834 <prvCheckTasksWaitingTermination+0x4c>)
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	3304      	adds	r3, #4
 8003800:	4618      	mov	r0, r3
 8003802:	f7fe fb81 	bl	8001f08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003806:	4b0c      	ldr	r3, [pc, #48]	; (8003838 <prvCheckTasksWaitingTermination+0x50>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	3b01      	subs	r3, #1
 800380c:	4a0a      	ldr	r2, [pc, #40]	; (8003838 <prvCheckTasksWaitingTermination+0x50>)
 800380e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003810:	4b0a      	ldr	r3, [pc, #40]	; (800383c <prvCheckTasksWaitingTermination+0x54>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	3b01      	subs	r3, #1
 8003816:	4a09      	ldr	r2, [pc, #36]	; (800383c <prvCheckTasksWaitingTermination+0x54>)
 8003818:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800381a:	f7fe fcd7 	bl	80021cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 f80e 	bl	8003840 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003824:	4b05      	ldr	r3, [pc, #20]	; (800383c <prvCheckTasksWaitingTermination+0x54>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1e1      	bne.n	80037f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800382c:	bf00      	nop
 800382e:	3708      	adds	r7, #8
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	20003d1c 	.word	0x20003d1c
 8003838:	20003d48 	.word	0x20003d48
 800383c:	20003d30 	.word	0x20003d30

08003840 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384c:	4618      	mov	r0, r3
 800384e:	f7fe f9b9 	bl	8001bc4 <vPortFree>
			vPortFree( pxTCB );
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7fe f9b6 	bl	8001bc4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003858:	bf00      	nop
 800385a:	3708      	adds	r7, #8
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003866:	4b0f      	ldr	r3, [pc, #60]	; (80038a4 <prvResetNextTaskUnblockTime+0x44>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <prvResetNextTaskUnblockTime+0x14>
 8003870:	2301      	movs	r3, #1
 8003872:	e000      	b.n	8003876 <prvResetNextTaskUnblockTime+0x16>
 8003874:	2300      	movs	r3, #0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d004      	beq.n	8003884 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800387a:	4b0b      	ldr	r3, [pc, #44]	; (80038a8 <prvResetNextTaskUnblockTime+0x48>)
 800387c:	f04f 32ff 	mov.w	r2, #4294967295
 8003880:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003882:	e008      	b.n	8003896 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003884:	4b07      	ldr	r3, [pc, #28]	; (80038a4 <prvResetNextTaskUnblockTime+0x44>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	4a05      	ldr	r2, [pc, #20]	; (80038a8 <prvResetNextTaskUnblockTime+0x48>)
 8003894:	6013      	str	r3, [r2, #0]
}
 8003896:	bf00      	nop
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	20003d00 	.word	0x20003d00
 80038a8:	20003d68 	.word	0x20003d68

080038ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80038b2:	4b0b      	ldr	r3, [pc, #44]	; (80038e0 <xTaskGetSchedulerState+0x34>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d102      	bne.n	80038c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80038ba:	2301      	movs	r3, #1
 80038bc:	607b      	str	r3, [r7, #4]
 80038be:	e008      	b.n	80038d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038c0:	4b08      	ldr	r3, [pc, #32]	; (80038e4 <xTaskGetSchedulerState+0x38>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d102      	bne.n	80038ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80038c8:	2302      	movs	r3, #2
 80038ca:	607b      	str	r3, [r7, #4]
 80038cc:	e001      	b.n	80038d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80038ce:	2300      	movs	r3, #0
 80038d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80038d2:	687b      	ldr	r3, [r7, #4]
	}
 80038d4:	4618      	mov	r0, r3
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr
 80038e0:	20003d54 	.word	0x20003d54
 80038e4:	20003d70 	.word	0x20003d70

080038e8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80038f4:	2300      	movs	r3, #0
 80038f6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d06e      	beq.n	80039dc <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003902:	4b39      	ldr	r3, [pc, #228]	; (80039e8 <xTaskPriorityInherit+0x100>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003908:	429a      	cmp	r2, r3
 800390a:	d25e      	bcs.n	80039ca <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	2b00      	cmp	r3, #0
 8003912:	db06      	blt.n	8003922 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003914:	4b34      	ldr	r3, [pc, #208]	; (80039e8 <xTaskPriorityInherit+0x100>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391a:	f1c3 0207 	rsb	r2, r3, #7
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	6959      	ldr	r1, [r3, #20]
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800392a:	4613      	mov	r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4413      	add	r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	4a2e      	ldr	r2, [pc, #184]	; (80039ec <xTaskPriorityInherit+0x104>)
 8003934:	4413      	add	r3, r2
 8003936:	4299      	cmp	r1, r3
 8003938:	d101      	bne.n	800393e <xTaskPriorityInherit+0x56>
 800393a:	2301      	movs	r3, #1
 800393c:	e000      	b.n	8003940 <xTaskPriorityInherit+0x58>
 800393e:	2300      	movs	r3, #0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d03a      	beq.n	80039ba <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	3304      	adds	r3, #4
 8003948:	4618      	mov	r0, r3
 800394a:	f7fe fadd 	bl	8001f08 <uxListRemove>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d115      	bne.n	8003980 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003958:	4924      	ldr	r1, [pc, #144]	; (80039ec <xTaskPriorityInherit+0x104>)
 800395a:	4613      	mov	r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	4413      	add	r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	440b      	add	r3, r1
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d10a      	bne.n	8003980 <xTaskPriorityInherit+0x98>
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396e:	2201      	movs	r2, #1
 8003970:	fa02 f303 	lsl.w	r3, r2, r3
 8003974:	43da      	mvns	r2, r3
 8003976:	4b1e      	ldr	r3, [pc, #120]	; (80039f0 <xTaskPriorityInherit+0x108>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4013      	ands	r3, r2
 800397c:	4a1c      	ldr	r2, [pc, #112]	; (80039f0 <xTaskPriorityInherit+0x108>)
 800397e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003980:	4b19      	ldr	r3, [pc, #100]	; (80039e8 <xTaskPriorityInherit+0x100>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398e:	2201      	movs	r2, #1
 8003990:	409a      	lsls	r2, r3
 8003992:	4b17      	ldr	r3, [pc, #92]	; (80039f0 <xTaskPriorityInherit+0x108>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4313      	orrs	r3, r2
 8003998:	4a15      	ldr	r2, [pc, #84]	; (80039f0 <xTaskPriorityInherit+0x108>)
 800399a:	6013      	str	r3, [r2, #0]
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a0:	4613      	mov	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	4413      	add	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4a10      	ldr	r2, [pc, #64]	; (80039ec <xTaskPriorityInherit+0x104>)
 80039aa:	441a      	add	r2, r3
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	3304      	adds	r3, #4
 80039b0:	4619      	mov	r1, r3
 80039b2:	4610      	mov	r0, r2
 80039b4:	f7fe fa4b 	bl	8001e4e <vListInsertEnd>
 80039b8:	e004      	b.n	80039c4 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80039ba:	4b0b      	ldr	r3, [pc, #44]	; (80039e8 <xTaskPriorityInherit+0x100>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80039c4:	2301      	movs	r3, #1
 80039c6:	60fb      	str	r3, [r7, #12]
 80039c8:	e008      	b.n	80039dc <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039ce:	4b06      	ldr	r3, [pc, #24]	; (80039e8 <xTaskPriorityInherit+0x100>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d201      	bcs.n	80039dc <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80039d8:	2301      	movs	r3, #1
 80039da:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80039dc:	68fb      	ldr	r3, [r7, #12]
	}
 80039de:	4618      	mov	r0, r3
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	20003c48 	.word	0x20003c48
 80039ec:	20003c4c 	.word	0x20003c4c
 80039f0:	20003d50 	.word	0x20003d50

080039f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003a00:	2300      	movs	r3, #0
 8003a02:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d070      	beq.n	8003aec <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003a0a:	4b3b      	ldr	r3, [pc, #236]	; (8003af8 <xTaskPriorityDisinherit+0x104>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d00b      	beq.n	8003a2c <xTaskPriorityDisinherit+0x38>
 8003a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a18:	b672      	cpsid	i
 8003a1a:	f383 8811 	msr	BASEPRI, r3
 8003a1e:	f3bf 8f6f 	isb	sy
 8003a22:	f3bf 8f4f 	dsb	sy
 8003a26:	b662      	cpsie	i
 8003a28:	60fb      	str	r3, [r7, #12]
 8003a2a:	e7fe      	b.n	8003a2a <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10b      	bne.n	8003a4c <xTaskPriorityDisinherit+0x58>
 8003a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a38:	b672      	cpsid	i
 8003a3a:	f383 8811 	msr	BASEPRI, r3
 8003a3e:	f3bf 8f6f 	isb	sy
 8003a42:	f3bf 8f4f 	dsb	sy
 8003a46:	b662      	cpsie	i
 8003a48:	60bb      	str	r3, [r7, #8]
 8003a4a:	e7fe      	b.n	8003a4a <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a50:	1e5a      	subs	r2, r3, #1
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d044      	beq.n	8003aec <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d140      	bne.n	8003aec <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7fe fa4a 	bl	8001f08 <uxListRemove>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d115      	bne.n	8003aa6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a7e:	491f      	ldr	r1, [pc, #124]	; (8003afc <xTaskPriorityDisinherit+0x108>)
 8003a80:	4613      	mov	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4413      	add	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	440b      	add	r3, r1
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d10a      	bne.n	8003aa6 <xTaskPriorityDisinherit+0xb2>
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a94:	2201      	movs	r2, #1
 8003a96:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9a:	43da      	mvns	r2, r3
 8003a9c:	4b18      	ldr	r3, [pc, #96]	; (8003b00 <xTaskPriorityDisinherit+0x10c>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	4a17      	ldr	r2, [pc, #92]	; (8003b00 <xTaskPriorityDisinherit+0x10c>)
 8003aa4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab2:	f1c3 0207 	rsb	r2, r3, #7
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003abe:	2201      	movs	r2, #1
 8003ac0:	409a      	lsls	r2, r3
 8003ac2:	4b0f      	ldr	r3, [pc, #60]	; (8003b00 <xTaskPriorityDisinherit+0x10c>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	4a0d      	ldr	r2, [pc, #52]	; (8003b00 <xTaskPriorityDisinherit+0x10c>)
 8003aca:	6013      	str	r3, [r2, #0]
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4413      	add	r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	4a08      	ldr	r2, [pc, #32]	; (8003afc <xTaskPriorityDisinherit+0x108>)
 8003ada:	441a      	add	r2, r3
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	3304      	adds	r3, #4
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	4610      	mov	r0, r2
 8003ae4:	f7fe f9b3 	bl	8001e4e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003aec:	697b      	ldr	r3, [r7, #20]
	}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3718      	adds	r7, #24
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	20003c48 	.word	0x20003c48
 8003afc:	20003c4c 	.word	0x20003c4c
 8003b00:	20003d50 	.word	0x20003d50

08003b04 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b088      	sub	sp, #32
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003b12:	2301      	movs	r3, #1
 8003b14:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f000 808a 	beq.w	8003c32 <vTaskPriorityDisinheritAfterTimeout+0x12e>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10b      	bne.n	8003b3e <vTaskPriorityDisinheritAfterTimeout+0x3a>
 8003b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b2a:	b672      	cpsid	i
 8003b2c:	f383 8811 	msr	BASEPRI, r3
 8003b30:	f3bf 8f6f 	isb	sy
 8003b34:	f3bf 8f4f 	dsb	sy
 8003b38:	b662      	cpsie	i
 8003b3a:	60fb      	str	r3, [r7, #12]
 8003b3c:	e7fe      	b.n	8003b3c <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b42:	683a      	ldr	r2, [r7, #0]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d902      	bls.n	8003b4e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	61fb      	str	r3, [r7, #28]
 8003b4c:	e002      	b.n	8003b54 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b52:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b58:	69fa      	ldr	r2, [r7, #28]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d069      	beq.n	8003c32 <vTaskPriorityDisinheritAfterTimeout+0x12e>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d164      	bne.n	8003c32 <vTaskPriorityDisinheritAfterTimeout+0x12e>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8003b68:	4b34      	ldr	r3, [pc, #208]	; (8003c3c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d10b      	bne.n	8003b8a <vTaskPriorityDisinheritAfterTimeout+0x86>
 8003b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b76:	b672      	cpsid	i
 8003b78:	f383 8811 	msr	BASEPRI, r3
 8003b7c:	f3bf 8f6f 	isb	sy
 8003b80:	f3bf 8f4f 	dsb	sy
 8003b84:	b662      	cpsie	i
 8003b86:	60bb      	str	r3, [r7, #8]
 8003b88:	e7fe      	b.n	8003b88 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	69fa      	ldr	r2, [r7, #28]
 8003b94:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	db04      	blt.n	8003ba8 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	f1c3 0207 	rsb	r2, r3, #7
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	6959      	ldr	r1, [r3, #20]
 8003bac:	693a      	ldr	r2, [r7, #16]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	4413      	add	r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4a22      	ldr	r2, [pc, #136]	; (8003c40 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8003bb8:	4413      	add	r3, r2
 8003bba:	4299      	cmp	r1, r3
 8003bbc:	d101      	bne.n	8003bc2 <vTaskPriorityDisinheritAfterTimeout+0xbe>
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e000      	b.n	8003bc4 <vTaskPriorityDisinheritAfterTimeout+0xc0>
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d034      	beq.n	8003c32 <vTaskPriorityDisinheritAfterTimeout+0x12e>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	3304      	adds	r3, #4
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7fe f99b 	bl	8001f08 <uxListRemove>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d115      	bne.n	8003c04 <vTaskPriorityDisinheritAfterTimeout+0x100>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bdc:	4918      	ldr	r1, [pc, #96]	; (8003c40 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8003bde:	4613      	mov	r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	4413      	add	r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	440b      	add	r3, r1
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10a      	bne.n	8003c04 <vTaskPriorityDisinheritAfterTimeout+0x100>
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	43da      	mvns	r2, r3
 8003bfa:	4b12      	ldr	r3, [pc, #72]	; (8003c44 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4013      	ands	r3, r2
 8003c00:	4a10      	ldr	r2, [pc, #64]	; (8003c44 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8003c02:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c08:	2201      	movs	r2, #1
 8003c0a:	409a      	lsls	r2, r3
 8003c0c:	4b0d      	ldr	r3, [pc, #52]	; (8003c44 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	4a0c      	ldr	r2, [pc, #48]	; (8003c44 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8003c14:	6013      	str	r3, [r2, #0]
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	4413      	add	r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	4a07      	ldr	r2, [pc, #28]	; (8003c40 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8003c24:	441a      	add	r2, r3
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	3304      	adds	r3, #4
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	4610      	mov	r0, r2
 8003c2e:	f7fe f90e 	bl	8001e4e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003c32:	bf00      	nop
 8003c34:	3720      	adds	r7, #32
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	20003c48 	.word	0x20003c48
 8003c40:	20003c4c 	.word	0x20003c4c
 8003c44:	20003d50 	.word	0x20003d50

08003c48 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8003c48:	b480      	push	{r7}
 8003c4a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003c4c:	4b07      	ldr	r3, [pc, #28]	; (8003c6c <pvTaskIncrementMutexHeldCount+0x24>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d004      	beq.n	8003c5e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003c54:	4b05      	ldr	r3, [pc, #20]	; (8003c6c <pvTaskIncrementMutexHeldCount+0x24>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c5a:	3201      	adds	r2, #1
 8003c5c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8003c5e:	4b03      	ldr	r3, [pc, #12]	; (8003c6c <pvTaskIncrementMutexHeldCount+0x24>)
 8003c60:	681b      	ldr	r3, [r3, #0]
	}
 8003c62:	4618      	mov	r0, r3
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr
 8003c6c:	20003c48 	.word	0x20003c48

08003c70 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003c7a:	4b29      	ldr	r3, [pc, #164]	; (8003d20 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c80:	4b28      	ldr	r3, [pc, #160]	; (8003d24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	3304      	adds	r3, #4
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7fe f93e 	bl	8001f08 <uxListRemove>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10b      	bne.n	8003caa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003c92:	4b24      	ldr	r3, [pc, #144]	; (8003d24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c98:	2201      	movs	r2, #1
 8003c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9e:	43da      	mvns	r2, r3
 8003ca0:	4b21      	ldr	r3, [pc, #132]	; (8003d28 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	4a20      	ldr	r2, [pc, #128]	; (8003d28 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003ca8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb0:	d10a      	bne.n	8003cc8 <prvAddCurrentTaskToDelayedList+0x58>
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d007      	beq.n	8003cc8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cb8:	4b1a      	ldr	r3, [pc, #104]	; (8003d24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	3304      	adds	r3, #4
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	481a      	ldr	r0, [pc, #104]	; (8003d2c <prvAddCurrentTaskToDelayedList+0xbc>)
 8003cc2:	f7fe f8c4 	bl	8001e4e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003cc6:	e026      	b.n	8003d16 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4413      	add	r3, r2
 8003cce:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003cd0:	4b14      	ldr	r3, [pc, #80]	; (8003d24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d209      	bcs.n	8003cf4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ce0:	4b13      	ldr	r3, [pc, #76]	; (8003d30 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	4b0f      	ldr	r3, [pc, #60]	; (8003d24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	3304      	adds	r3, #4
 8003cea:	4619      	mov	r1, r3
 8003cec:	4610      	mov	r0, r2
 8003cee:	f7fe f8d2 	bl	8001e96 <vListInsert>
}
 8003cf2:	e010      	b.n	8003d16 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cf4:	4b0f      	ldr	r3, [pc, #60]	; (8003d34 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	4b0a      	ldr	r3, [pc, #40]	; (8003d24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	3304      	adds	r3, #4
 8003cfe:	4619      	mov	r1, r3
 8003d00:	4610      	mov	r0, r2
 8003d02:	f7fe f8c8 	bl	8001e96 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003d06:	4b0c      	ldr	r3, [pc, #48]	; (8003d38 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68ba      	ldr	r2, [r7, #8]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d202      	bcs.n	8003d16 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003d10:	4a09      	ldr	r2, [pc, #36]	; (8003d38 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	6013      	str	r3, [r2, #0]
}
 8003d16:	bf00      	nop
 8003d18:	3710      	adds	r7, #16
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	20003d4c 	.word	0x20003d4c
 8003d24:	20003c48 	.word	0x20003c48
 8003d28:	20003d50 	.word	0x20003d50
 8003d2c:	20003d34 	.word	0x20003d34
 8003d30:	20003d04 	.word	0x20003d04
 8003d34:	20003d00 	.word	0x20003d00
 8003d38:	20003d68 	.word	0x20003d68

08003d3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003d3c:	b5b0      	push	{r4, r5, r7, lr}
 8003d3e:	b090      	sub	sp, #64	; 0x40
 8003d40:	af00      	add	r7, sp, #0


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003d42:	f7fc fbe5 	bl	8000510 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003d46:	f000 f84f 	bl	8003de8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003d4a:	f000 f8b5 	bl	8003eb8 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of LED_Mutex */
  osMutexDef(LED_Mutex);
 8003d4e:	2300      	movs	r3, #0
 8003d50:	63fb      	str	r3, [r7, #60]	; 0x3c
  LED_MutexHandle = osMutexCreate(osMutex(LED_Mutex));
 8003d52:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7fd fddc 	bl	8001914 <osMutexCreate>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	4b1b      	ldr	r3, [pc, #108]	; (8003dcc <main+0x90>)
 8003d60:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8003d62:	4b1b      	ldr	r3, [pc, #108]	; (8003dd0 <main+0x94>)
 8003d64:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003d68:	461d      	mov	r5, r3
 8003d6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d6e:	682b      	ldr	r3, [r5, #0]
 8003d70:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003d72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d76:	2100      	movs	r1, #0
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7fd fd90 	bl	800189e <osThreadCreate>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	4b14      	ldr	r3, [pc, #80]	; (8003dd4 <main+0x98>)
 8003d82:	601a      	str	r2, [r3, #0]

  /* definition and creation of TurnOn */
  osThreadDef(TurnOn, StartTurnOn, osPriorityNormal, 0, 128);
 8003d84:	4b14      	ldr	r3, [pc, #80]	; (8003dd8 <main+0x9c>)
 8003d86:	f107 0414 	add.w	r4, r7, #20
 8003d8a:	461d      	mov	r5, r3
 8003d8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d90:	682b      	ldr	r3, [r5, #0]
 8003d92:	6023      	str	r3, [r4, #0]
  TurnOnHandle = osThreadCreate(osThread(TurnOn), NULL);
 8003d94:	f107 0314 	add.w	r3, r7, #20
 8003d98:	2100      	movs	r1, #0
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7fd fd7f 	bl	800189e <osThreadCreate>
 8003da0:	4602      	mov	r2, r0
 8003da2:	4b0e      	ldr	r3, [pc, #56]	; (8003ddc <main+0xa0>)
 8003da4:	601a      	str	r2, [r3, #0]

  /* definition and creation of TurnOff */
  osThreadDef(TurnOff, StartTurnOff, osPriorityNormal, 0, 128);
 8003da6:	4b0e      	ldr	r3, [pc, #56]	; (8003de0 <main+0xa4>)
 8003da8:	463c      	mov	r4, r7
 8003daa:	461d      	mov	r5, r3
 8003dac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003dae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003db0:	682b      	ldr	r3, [r5, #0]
 8003db2:	6023      	str	r3, [r4, #0]
  TurnOffHandle = osThreadCreate(osThread(TurnOff), NULL);
 8003db4:	463b      	mov	r3, r7
 8003db6:	2100      	movs	r1, #0
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7fd fd70 	bl	800189e <osThreadCreate>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	4b08      	ldr	r3, [pc, #32]	; (8003de4 <main+0xa8>)
 8003dc2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8003dc4:	f7fd fd64 	bl	8001890 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003dc8:	e7fe      	b.n	8003dc8 <main+0x8c>
 8003dca:	bf00      	nop
 8003dcc:	20003d7c 	.word	0x20003d7c
 8003dd0:	080042d4 	.word	0x080042d4
 8003dd4:	20003d78 	.word	0x20003d78
 8003dd8:	080042f0 	.word	0x080042f0
 8003ddc:	20003d84 	.word	0x20003d84
 8003de0:	0800430c 	.word	0x0800430c
 8003de4:	20003d80 	.word	0x20003d80

08003de8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b094      	sub	sp, #80	; 0x50
 8003dec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003dee:	f107 0320 	add.w	r3, r7, #32
 8003df2:	2230      	movs	r2, #48	; 0x30
 8003df4:	2100      	movs	r1, #0
 8003df6:	4618      	mov	r0, r3
 8003df8:	f000 fa4d 	bl	8004296 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003dfc:	f107 030c 	add.w	r3, r7, #12
 8003e00:	2200      	movs	r2, #0
 8003e02:	601a      	str	r2, [r3, #0]
 8003e04:	605a      	str	r2, [r3, #4]
 8003e06:	609a      	str	r2, [r3, #8]
 8003e08:	60da      	str	r2, [r3, #12]
 8003e0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e0c:	4b28      	ldr	r3, [pc, #160]	; (8003eb0 <SystemClock_Config+0xc8>)
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e10:	4a27      	ldr	r2, [pc, #156]	; (8003eb0 <SystemClock_Config+0xc8>)
 8003e12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e16:	6413      	str	r3, [r2, #64]	; 0x40
 8003e18:	4b25      	ldr	r3, [pc, #148]	; (8003eb0 <SystemClock_Config+0xc8>)
 8003e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e20:	60bb      	str	r3, [r7, #8]
 8003e22:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e24:	4b23      	ldr	r3, [pc, #140]	; (8003eb4 <SystemClock_Config+0xcc>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003e2c:	4a21      	ldr	r2, [pc, #132]	; (8003eb4 <SystemClock_Config+0xcc>)
 8003e2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e32:	6013      	str	r3, [r2, #0]
 8003e34:	4b1f      	ldr	r3, [pc, #124]	; (8003eb4 <SystemClock_Config+0xcc>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003e3c:	607b      	str	r3, [r7, #4]
 8003e3e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003e40:	2302      	movs	r3, #2
 8003e42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003e44:	2301      	movs	r3, #1
 8003e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003e48:	2310      	movs	r3, #16
 8003e4a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003e50:	2300      	movs	r3, #0
 8003e52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 10;
 8003e54:	230a      	movs	r3, #10
 8003e56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 210;
 8003e58:	23d2      	movs	r3, #210	; 0xd2
 8003e5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003e60:	2302      	movs	r3, #2
 8003e62:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e64:	f107 0320 	add.w	r3, r7, #32
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7fc fe25 	bl	8000ab8 <HAL_RCC_OscConfig>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d001      	beq.n	8003e78 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8003e74:	f000 f8d4 	bl	8004020 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e78:	230f      	movs	r3, #15
 8003e7a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e80:	2300      	movs	r3, #0
 8003e82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003e84:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003e88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003e8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e8e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003e90:	f107 030c 	add.w	r3, r7, #12
 8003e94:	2105      	movs	r1, #5
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7fd f87e 	bl	8000f98 <HAL_RCC_ClockConfig>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d001      	beq.n	8003ea6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8003ea2:	f000 f8bd 	bl	8004020 <Error_Handler>
  }
}
 8003ea6:	bf00      	nop
 8003ea8:	3750      	adds	r7, #80	; 0x50
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	40023800 	.word	0x40023800
 8003eb4:	40007000 	.word	0x40007000

08003eb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b08a      	sub	sp, #40	; 0x28
 8003ebc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ebe:	f107 0314 	add.w	r3, r7, #20
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	601a      	str	r2, [r3, #0]
 8003ec6:	605a      	str	r2, [r3, #4]
 8003ec8:	609a      	str	r2, [r3, #8]
 8003eca:	60da      	str	r2, [r3, #12]
 8003ecc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ece:	4b23      	ldr	r3, [pc, #140]	; (8003f5c <MX_GPIO_Init+0xa4>)
 8003ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed2:	4a22      	ldr	r2, [pc, #136]	; (8003f5c <MX_GPIO_Init+0xa4>)
 8003ed4:	f043 0301 	orr.w	r3, r3, #1
 8003ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8003eda:	4b20      	ldr	r3, [pc, #128]	; (8003f5c <MX_GPIO_Init+0xa4>)
 8003edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	613b      	str	r3, [r7, #16]
 8003ee4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003ee6:	4b1d      	ldr	r3, [pc, #116]	; (8003f5c <MX_GPIO_Init+0xa4>)
 8003ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eea:	4a1c      	ldr	r2, [pc, #112]	; (8003f5c <MX_GPIO_Init+0xa4>)
 8003eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ef2:	4b1a      	ldr	r3, [pc, #104]	; (8003f5c <MX_GPIO_Init+0xa4>)
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003efa:	60fb      	str	r3, [r7, #12]
 8003efc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003efe:	4b17      	ldr	r3, [pc, #92]	; (8003f5c <MX_GPIO_Init+0xa4>)
 8003f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f02:	4a16      	ldr	r2, [pc, #88]	; (8003f5c <MX_GPIO_Init+0xa4>)
 8003f04:	f043 0304 	orr.w	r3, r3, #4
 8003f08:	6313      	str	r3, [r2, #48]	; 0x30
 8003f0a:	4b14      	ldr	r3, [pc, #80]	; (8003f5c <MX_GPIO_Init+0xa4>)
 8003f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0e:	f003 0304 	and.w	r3, r3, #4
 8003f12:	60bb      	str	r3, [r7, #8]
 8003f14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003f16:	4b11      	ldr	r3, [pc, #68]	; (8003f5c <MX_GPIO_Init+0xa4>)
 8003f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1a:	4a10      	ldr	r2, [pc, #64]	; (8003f5c <MX_GPIO_Init+0xa4>)
 8003f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f20:	6313      	str	r3, [r2, #48]	; 0x30
 8003f22:	4b0e      	ldr	r3, [pc, #56]	; (8003f5c <MX_GPIO_Init+0xa4>)
 8003f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f2a:	607b      	str	r3, [r7, #4]
 8003f2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8003f2e:	2200      	movs	r2, #0
 8003f30:	2102      	movs	r1, #2
 8003f32:	480b      	ldr	r0, [pc, #44]	; (8003f60 <MX_GPIO_Init+0xa8>)
 8003f34:	f7fc fda6 	bl	8000a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 8003f38:	2302      	movs	r3, #2
 8003f3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f40:	2300      	movs	r3, #0
 8003f42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f44:	2300      	movs	r3, #0
 8003f46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 8003f48:	f107 0314 	add.w	r3, r7, #20
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	4804      	ldr	r0, [pc, #16]	; (8003f60 <MX_GPIO_Init+0xa8>)
 8003f50:	f7fc fbee 	bl	8000730 <HAL_GPIO_Init>

}
 8003f54:	bf00      	nop
 8003f56:	3728      	adds	r7, #40	; 0x28
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	40023800 	.word	0x40023800
 8003f60:	40022000 	.word	0x40022000

08003f64 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8003f6c:	2001      	movs	r0, #1
 8003f6e:	f7fd fcbd 	bl	80018ec <osDelay>
 8003f72:	e7fb      	b.n	8003f6c <StartDefaultTask+0x8>

08003f74 <StartTurnOn>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTurnOn */
void StartTurnOn(void const * argument)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTurnOn */
  /* Infinite loop */
  for(;;)
  {

osMutexWait(LED_MutexHandle, osWaitForever);
 8003f7c:	4b0c      	ldr	r3, [pc, #48]	; (8003fb0 <StartTurnOn+0x3c>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f04f 31ff 	mov.w	r1, #4294967295
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7fd fcd1 	bl	800192c <osMutexWait>
osDelay(400);
 8003f8a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003f8e:	f7fd fcad 	bl	80018ec <osDelay>

	  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 1);
 8003f92:	2201      	movs	r2, #1
 8003f94:	2102      	movs	r1, #2
 8003f96:	4807      	ldr	r0, [pc, #28]	; (8003fb4 <StartTurnOn+0x40>)
 8003f98:	f7fc fd74 	bl	8000a84 <HAL_GPIO_WritePin>


    osMutexRelease(LED_MutexHandle);
 8003f9c:	4b04      	ldr	r3, [pc, #16]	; (8003fb0 <StartTurnOn+0x3c>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7fd fd11 	bl	80019c8 <osMutexRelease>
    osDelay(100);
 8003fa6:	2064      	movs	r0, #100	; 0x64
 8003fa8:	f7fd fca0 	bl	80018ec <osDelay>
osMutexWait(LED_MutexHandle, osWaitForever);
 8003fac:	e7e6      	b.n	8003f7c <StartTurnOn+0x8>
 8003fae:	bf00      	nop
 8003fb0:	20003d7c 	.word	0x20003d7c
 8003fb4:	40022000 	.word	0x40022000

08003fb8 <StartTurnOff>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTurnOff */
void StartTurnOff(void const * argument)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {


	  osMutexWait(LED_MutexHandle, osWaitForever);
 8003fc0:	4b0c      	ldr	r3, [pc, #48]	; (8003ff4 <StartTurnOff+0x3c>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7fd fcaf 	bl	800192c <osMutexWait>
      osDelay(400);
 8003fce:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003fd2:	f7fd fc8b 	bl	80018ec <osDelay>
	  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, 0);
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	2102      	movs	r1, #2
 8003fda:	4807      	ldr	r0, [pc, #28]	; (8003ff8 <StartTurnOff+0x40>)
 8003fdc:	f7fc fd52 	bl	8000a84 <HAL_GPIO_WritePin>
	      osMutexRelease(LED_MutexHandle);
 8003fe0:	4b04      	ldr	r3, [pc, #16]	; (8003ff4 <StartTurnOff+0x3c>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7fd fcef 	bl	80019c8 <osMutexRelease>
	      osDelay(100);
 8003fea:	2064      	movs	r0, #100	; 0x64
 8003fec:	f7fd fc7e 	bl	80018ec <osDelay>
	  osMutexWait(LED_MutexHandle, osWaitForever);
 8003ff0:	e7e6      	b.n	8003fc0 <StartTurnOff+0x8>
 8003ff2:	bf00      	nop
 8003ff4:	20003d7c 	.word	0x20003d7c
 8003ff8:	40022000 	.word	0x40022000

08003ffc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a04      	ldr	r2, [pc, #16]	; (800401c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d101      	bne.n	8004012 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800400e:	f7fc fa8d 	bl	800052c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004012:	bf00      	nop
 8004014:	3708      	adds	r7, #8
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	40002000 	.word	0x40002000

08004020 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004020:	b480      	push	{r7}
 8004022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004024:	bf00      	nop
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
	...

08004030 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004036:	4b11      	ldr	r3, [pc, #68]	; (800407c <HAL_MspInit+0x4c>)
 8004038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403a:	4a10      	ldr	r2, [pc, #64]	; (800407c <HAL_MspInit+0x4c>)
 800403c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004040:	6413      	str	r3, [r2, #64]	; 0x40
 8004042:	4b0e      	ldr	r3, [pc, #56]	; (800407c <HAL_MspInit+0x4c>)
 8004044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800404a:	607b      	str	r3, [r7, #4]
 800404c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800404e:	4b0b      	ldr	r3, [pc, #44]	; (800407c <HAL_MspInit+0x4c>)
 8004050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004052:	4a0a      	ldr	r2, [pc, #40]	; (800407c <HAL_MspInit+0x4c>)
 8004054:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004058:	6453      	str	r3, [r2, #68]	; 0x44
 800405a:	4b08      	ldr	r3, [pc, #32]	; (800407c <HAL_MspInit+0x4c>)
 800405c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800405e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004062:	603b      	str	r3, [r7, #0]
 8004064:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004066:	2200      	movs	r2, #0
 8004068:	210f      	movs	r1, #15
 800406a:	f06f 0001 	mvn.w	r0, #1
 800406e:	f7fc fb35 	bl	80006dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004072:	bf00      	nop
 8004074:	3708      	adds	r7, #8
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	40023800 	.word	0x40023800

08004080 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b08c      	sub	sp, #48	; 0x30
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004088:	2300      	movs	r3, #0
 800408a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800408c:	2300      	movs	r3, #0
 800408e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0); 
 8004090:	2200      	movs	r2, #0
 8004092:	6879      	ldr	r1, [r7, #4]
 8004094:	202d      	movs	r0, #45	; 0x2d
 8004096:	f7fc fb21 	bl	80006dc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn); 
 800409a:	202d      	movs	r0, #45	; 0x2d
 800409c:	f7fc fb3a 	bl	8000714 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80040a0:	4b1f      	ldr	r3, [pc, #124]	; (8004120 <HAL_InitTick+0xa0>)
 80040a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a4:	4a1e      	ldr	r2, [pc, #120]	; (8004120 <HAL_InitTick+0xa0>)
 80040a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040aa:	6413      	str	r3, [r2, #64]	; 0x40
 80040ac:	4b1c      	ldr	r3, [pc, #112]	; (8004120 <HAL_InitTick+0xa0>)
 80040ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b4:	60fb      	str	r3, [r7, #12]
 80040b6:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80040b8:	f107 0210 	add.w	r2, r7, #16
 80040bc:	f107 0314 	add.w	r3, r7, #20
 80040c0:	4611      	mov	r1, r2
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7fd f922 	bl	800130c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80040c8:	f7fd f90c 	bl	80012e4 <HAL_RCC_GetPCLK1Freq>
 80040cc:	4603      	mov	r3, r0
 80040ce:	005b      	lsls	r3, r3, #1
 80040d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80040d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d4:	4a13      	ldr	r2, [pc, #76]	; (8004124 <HAL_InitTick+0xa4>)
 80040d6:	fba2 2303 	umull	r2, r3, r2, r3
 80040da:	0c9b      	lsrs	r3, r3, #18
 80040dc:	3b01      	subs	r3, #1
 80040de:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80040e0:	4b11      	ldr	r3, [pc, #68]	; (8004128 <HAL_InitTick+0xa8>)
 80040e2:	4a12      	ldr	r2, [pc, #72]	; (800412c <HAL_InitTick+0xac>)
 80040e4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000 / 1000) - 1;
 80040e6:	4b10      	ldr	r3, [pc, #64]	; (8004128 <HAL_InitTick+0xa8>)
 80040e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80040ec:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80040ee:	4a0e      	ldr	r2, [pc, #56]	; (8004128 <HAL_InitTick+0xa8>)
 80040f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f2:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80040f4:	4b0c      	ldr	r3, [pc, #48]	; (8004128 <HAL_InitTick+0xa8>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040fa:	4b0b      	ldr	r3, [pc, #44]	; (8004128 <HAL_InitTick+0xa8>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8004100:	4809      	ldr	r0, [pc, #36]	; (8004128 <HAL_InitTick+0xa8>)
 8004102:	f7fd f935 	bl	8001370 <HAL_TIM_Base_Init>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d104      	bne.n	8004116 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 800410c:	4806      	ldr	r0, [pc, #24]	; (8004128 <HAL_InitTick+0xa8>)
 800410e:	f7fd f965 	bl	80013dc <HAL_TIM_Base_Start_IT>
 8004112:	4603      	mov	r3, r0
 8004114:	e000      	b.n	8004118 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
}
 8004118:	4618      	mov	r0, r3
 800411a:	3730      	adds	r7, #48	; 0x30
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	40023800 	.word	0x40023800
 8004124:	431bde83 	.word	0x431bde83
 8004128:	20003d88 	.word	0x20003d88
 800412c:	40002000 	.word	0x40002000

08004130 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004130:	b480      	push	{r7}
 8004132:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004134:	bf00      	nop
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr

0800413e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800413e:	b480      	push	{r7}
 8004140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004142:	e7fe      	b.n	8004142 <HardFault_Handler+0x4>

08004144 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004144:	b480      	push	{r7}
 8004146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004148:	e7fe      	b.n	8004148 <MemManage_Handler+0x4>

0800414a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800414a:	b480      	push	{r7}
 800414c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800414e:	e7fe      	b.n	800414e <BusFault_Handler+0x4>

08004150 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004150:	b480      	push	{r7}
 8004152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004154:	e7fe      	b.n	8004154 <UsageFault_Handler+0x4>

08004156 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004156:	b480      	push	{r7}
 8004158:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800415a:	bf00      	nop
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8004168:	4802      	ldr	r0, [pc, #8]	; (8004174 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800416a:	f7fd f961 	bl	8001430 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800416e:	bf00      	nop
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	20003d88 	.word	0x20003d88

08004178 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004178:	b480      	push	{r7}
 800417a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800417c:	4b15      	ldr	r3, [pc, #84]	; (80041d4 <SystemInit+0x5c>)
 800417e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004182:	4a14      	ldr	r2, [pc, #80]	; (80041d4 <SystemInit+0x5c>)
 8004184:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004188:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800418c:	4b12      	ldr	r3, [pc, #72]	; (80041d8 <SystemInit+0x60>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a11      	ldr	r2, [pc, #68]	; (80041d8 <SystemInit+0x60>)
 8004192:	f043 0301 	orr.w	r3, r3, #1
 8004196:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004198:	4b0f      	ldr	r3, [pc, #60]	; (80041d8 <SystemInit+0x60>)
 800419a:	2200      	movs	r2, #0
 800419c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800419e:	4b0e      	ldr	r3, [pc, #56]	; (80041d8 <SystemInit+0x60>)
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	490d      	ldr	r1, [pc, #52]	; (80041d8 <SystemInit+0x60>)
 80041a4:	4b0d      	ldr	r3, [pc, #52]	; (80041dc <SystemInit+0x64>)
 80041a6:	4013      	ands	r3, r2
 80041a8:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80041aa:	4b0b      	ldr	r3, [pc, #44]	; (80041d8 <SystemInit+0x60>)
 80041ac:	4a0c      	ldr	r2, [pc, #48]	; (80041e0 <SystemInit+0x68>)
 80041ae:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80041b0:	4b09      	ldr	r3, [pc, #36]	; (80041d8 <SystemInit+0x60>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a08      	ldr	r2, [pc, #32]	; (80041d8 <SystemInit+0x60>)
 80041b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041ba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80041bc:	4b06      	ldr	r3, [pc, #24]	; (80041d8 <SystemInit+0x60>)
 80041be:	2200      	movs	r2, #0
 80041c0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80041c2:	4b04      	ldr	r3, [pc, #16]	; (80041d4 <SystemInit+0x5c>)
 80041c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80041c8:	609a      	str	r2, [r3, #8]
#endif
}
 80041ca:	bf00      	nop
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr
 80041d4:	e000ed00 	.word	0xe000ed00
 80041d8:	40023800 	.word	0x40023800
 80041dc:	fef6ffff 	.word	0xfef6ffff
 80041e0:	24003010 	.word	0x24003010

080041e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80041e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800421c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80041e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80041ea:	e003      	b.n	80041f4 <LoopCopyDataInit>

080041ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80041ec:	4b0c      	ldr	r3, [pc, #48]	; (8004220 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80041ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80041f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80041f2:	3104      	adds	r1, #4

080041f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80041f4:	480b      	ldr	r0, [pc, #44]	; (8004224 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80041f6:	4b0c      	ldr	r3, [pc, #48]	; (8004228 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80041f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80041fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80041fc:	d3f6      	bcc.n	80041ec <CopyDataInit>
  ldr  r2, =_sbss
 80041fe:	4a0b      	ldr	r2, [pc, #44]	; (800422c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004200:	e002      	b.n	8004208 <LoopFillZerobss>

08004202 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004202:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004204:	f842 3b04 	str.w	r3, [r2], #4

08004208 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004208:	4b09      	ldr	r3, [pc, #36]	; (8004230 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800420a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800420c:	d3f9      	bcc.n	8004202 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800420e:	f7ff ffb3 	bl	8004178 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004212:	f000 f811 	bl	8004238 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004216:	f7ff fd91 	bl	8003d3c <main>
  bx  lr    
 800421a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800421c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8004220:	08004348 	.word	0x08004348
  ldr  r0, =_sdata
 8004224:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004228:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 800422c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8004230:	20003dc8 	.word	0x20003dc8

08004234 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004234:	e7fe      	b.n	8004234 <ADC_IRQHandler>
	...

08004238 <__libc_init_array>:
 8004238:	b570      	push	{r4, r5, r6, lr}
 800423a:	4e0d      	ldr	r6, [pc, #52]	; (8004270 <__libc_init_array+0x38>)
 800423c:	4c0d      	ldr	r4, [pc, #52]	; (8004274 <__libc_init_array+0x3c>)
 800423e:	1ba4      	subs	r4, r4, r6
 8004240:	10a4      	asrs	r4, r4, #2
 8004242:	2500      	movs	r5, #0
 8004244:	42a5      	cmp	r5, r4
 8004246:	d109      	bne.n	800425c <__libc_init_array+0x24>
 8004248:	4e0b      	ldr	r6, [pc, #44]	; (8004278 <__libc_init_array+0x40>)
 800424a:	4c0c      	ldr	r4, [pc, #48]	; (800427c <__libc_init_array+0x44>)
 800424c:	f000 f82c 	bl	80042a8 <_init>
 8004250:	1ba4      	subs	r4, r4, r6
 8004252:	10a4      	asrs	r4, r4, #2
 8004254:	2500      	movs	r5, #0
 8004256:	42a5      	cmp	r5, r4
 8004258:	d105      	bne.n	8004266 <__libc_init_array+0x2e>
 800425a:	bd70      	pop	{r4, r5, r6, pc}
 800425c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004260:	4798      	blx	r3
 8004262:	3501      	adds	r5, #1
 8004264:	e7ee      	b.n	8004244 <__libc_init_array+0xc>
 8004266:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800426a:	4798      	blx	r3
 800426c:	3501      	adds	r5, #1
 800426e:	e7f2      	b.n	8004256 <__libc_init_array+0x1e>
 8004270:	08004340 	.word	0x08004340
 8004274:	08004340 	.word	0x08004340
 8004278:	08004340 	.word	0x08004340
 800427c:	08004344 	.word	0x08004344

08004280 <memcpy>:
 8004280:	b510      	push	{r4, lr}
 8004282:	1e43      	subs	r3, r0, #1
 8004284:	440a      	add	r2, r1
 8004286:	4291      	cmp	r1, r2
 8004288:	d100      	bne.n	800428c <memcpy+0xc>
 800428a:	bd10      	pop	{r4, pc}
 800428c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004290:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004294:	e7f7      	b.n	8004286 <memcpy+0x6>

08004296 <memset>:
 8004296:	4402      	add	r2, r0
 8004298:	4603      	mov	r3, r0
 800429a:	4293      	cmp	r3, r2
 800429c:	d100      	bne.n	80042a0 <memset+0xa>
 800429e:	4770      	bx	lr
 80042a0:	f803 1b01 	strb.w	r1, [r3], #1
 80042a4:	e7f9      	b.n	800429a <memset+0x4>
	...

080042a8 <_init>:
 80042a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042aa:	bf00      	nop
 80042ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ae:	bc08      	pop	{r3}
 80042b0:	469e      	mov	lr, r3
 80042b2:	4770      	bx	lr

080042b4 <_fini>:
 80042b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042b6:	bf00      	nop
 80042b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ba:	bc08      	pop	{r3}
 80042bc:	469e      	mov	lr, r3
 80042be:	4770      	bx	lr
