
Constant_execution_frequency.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005270  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08005440  08005440  00015440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800557c  0800557c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800557c  0800557c  0001557c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005584  08005584  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005584  08005584  00015584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005588  08005588  00015588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800558c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003e48  20000074  08005600  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003ebc  08005600  00023ebc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000131b3  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a9a  00000000  00000000  00033257  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001110  00000000  00000000  00035cf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fc8  00000000  00000000  00036e08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027667  00000000  00000000  00037dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e13a  00000000  00000000  0005f437  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f2498  00000000  00000000  0006d571  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015fa09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dac  00000000  00000000  0015fa84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005428 	.word	0x08005428

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08005428 	.word	0x08005428

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b4:	2003      	movs	r0, #3
 80005b6:	f000 f8d6 	bl	8000766 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ba:	2000      	movs	r0, #0
 80005bc:	f003 fe44 	bl	8004248 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80005c0:	f003 fdb8 	bl	8004134 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80005c4:	2300      	movs	r3, #0
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	bd80      	pop	{r7, pc}
	...

080005cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005d0:	4b06      	ldr	r3, [pc, #24]	; (80005ec <HAL_IncTick+0x20>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	461a      	mov	r2, r3
 80005d6:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <HAL_IncTick+0x24>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4413      	add	r3, r2
 80005dc:	4a04      	ldr	r2, [pc, #16]	; (80005f0 <HAL_IncTick+0x24>)
 80005de:	6013      	str	r3, [r2, #0]
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	20000000 	.word	0x20000000
 80005f0:	20003de8 	.word	0x20003de8

080005f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  return uwTick;
 80005f8:	4b03      	ldr	r3, [pc, #12]	; (8000608 <HAL_GetTick+0x14>)
 80005fa:	681b      	ldr	r3, [r3, #0]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	20003de8 	.word	0x20003de8

0800060c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	f003 0307 	and.w	r3, r3, #7
 800061a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800061c:	4b0b      	ldr	r3, [pc, #44]	; (800064c <__NVIC_SetPriorityGrouping+0x40>)
 800061e:	68db      	ldr	r3, [r3, #12]
 8000620:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000622:	68ba      	ldr	r2, [r7, #8]
 8000624:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000628:	4013      	ands	r3, r2
 800062a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000634:	4b06      	ldr	r3, [pc, #24]	; (8000650 <__NVIC_SetPriorityGrouping+0x44>)
 8000636:	4313      	orrs	r3, r2
 8000638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800063a:	4a04      	ldr	r2, [pc, #16]	; (800064c <__NVIC_SetPriorityGrouping+0x40>)
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	60d3      	str	r3, [r2, #12]
}
 8000640:	bf00      	nop
 8000642:	3714      	adds	r7, #20
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr
 800064c:	e000ed00 	.word	0xe000ed00
 8000650:	05fa0000 	.word	0x05fa0000

08000654 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000658:	4b04      	ldr	r3, [pc, #16]	; (800066c <__NVIC_GetPriorityGrouping+0x18>)
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	0a1b      	lsrs	r3, r3, #8
 800065e:	f003 0307 	and.w	r3, r3, #7
}
 8000662:	4618      	mov	r0, r3
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	e000ed00 	.word	0xe000ed00

08000670 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800067a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067e:	2b00      	cmp	r3, #0
 8000680:	db0b      	blt.n	800069a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	f003 021f 	and.w	r2, r3, #31
 8000688:	4907      	ldr	r1, [pc, #28]	; (80006a8 <__NVIC_EnableIRQ+0x38>)
 800068a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068e:	095b      	lsrs	r3, r3, #5
 8000690:	2001      	movs	r0, #1
 8000692:	fa00 f202 	lsl.w	r2, r0, r2
 8000696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800069a:	bf00      	nop
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	e000e100 	.word	0xe000e100

080006ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	6039      	str	r1, [r7, #0]
 80006b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	db0a      	blt.n	80006d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	b2da      	uxtb	r2, r3
 80006c4:	490c      	ldr	r1, [pc, #48]	; (80006f8 <__NVIC_SetPriority+0x4c>)
 80006c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ca:	0112      	lsls	r2, r2, #4
 80006cc:	b2d2      	uxtb	r2, r2
 80006ce:	440b      	add	r3, r1
 80006d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006d4:	e00a      	b.n	80006ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	b2da      	uxtb	r2, r3
 80006da:	4908      	ldr	r1, [pc, #32]	; (80006fc <__NVIC_SetPriority+0x50>)
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	f003 030f 	and.w	r3, r3, #15
 80006e2:	3b04      	subs	r3, #4
 80006e4:	0112      	lsls	r2, r2, #4
 80006e6:	b2d2      	uxtb	r2, r2
 80006e8:	440b      	add	r3, r1
 80006ea:	761a      	strb	r2, [r3, #24]
}
 80006ec:	bf00      	nop
 80006ee:	370c      	adds	r7, #12
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	e000e100 	.word	0xe000e100
 80006fc:	e000ed00 	.word	0xe000ed00

08000700 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000700:	b480      	push	{r7}
 8000702:	b089      	sub	sp, #36	; 0x24
 8000704:	af00      	add	r7, sp, #0
 8000706:	60f8      	str	r0, [r7, #12]
 8000708:	60b9      	str	r1, [r7, #8]
 800070a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	f003 0307 	and.w	r3, r3, #7
 8000712:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000714:	69fb      	ldr	r3, [r7, #28]
 8000716:	f1c3 0307 	rsb	r3, r3, #7
 800071a:	2b04      	cmp	r3, #4
 800071c:	bf28      	it	cs
 800071e:	2304      	movcs	r3, #4
 8000720:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	3304      	adds	r3, #4
 8000726:	2b06      	cmp	r3, #6
 8000728:	d902      	bls.n	8000730 <NVIC_EncodePriority+0x30>
 800072a:	69fb      	ldr	r3, [r7, #28]
 800072c:	3b03      	subs	r3, #3
 800072e:	e000      	b.n	8000732 <NVIC_EncodePriority+0x32>
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000734:	f04f 32ff 	mov.w	r2, #4294967295
 8000738:	69bb      	ldr	r3, [r7, #24]
 800073a:	fa02 f303 	lsl.w	r3, r2, r3
 800073e:	43da      	mvns	r2, r3
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	401a      	ands	r2, r3
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000748:	f04f 31ff 	mov.w	r1, #4294967295
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	fa01 f303 	lsl.w	r3, r1, r3
 8000752:	43d9      	mvns	r1, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000758:	4313      	orrs	r3, r2
         );
}
 800075a:	4618      	mov	r0, r3
 800075c:	3724      	adds	r7, #36	; 0x24
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr

08000766 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	b082      	sub	sp, #8
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f7ff ff4c 	bl	800060c <__NVIC_SetPriorityGrouping>
}
 8000774:	bf00      	nop
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}

0800077c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	60b9      	str	r1, [r7, #8]
 8000786:	607a      	str	r2, [r7, #4]
 8000788:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800078e:	f7ff ff61 	bl	8000654 <__NVIC_GetPriorityGrouping>
 8000792:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000794:	687a      	ldr	r2, [r7, #4]
 8000796:	68b9      	ldr	r1, [r7, #8]
 8000798:	6978      	ldr	r0, [r7, #20]
 800079a:	f7ff ffb1 	bl	8000700 <NVIC_EncodePriority>
 800079e:	4602      	mov	r2, r0
 80007a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007a4:	4611      	mov	r1, r2
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff ff80 	bl	80006ac <__NVIC_SetPriority>
}
 80007ac:	bf00      	nop
 80007ae:	3718      	adds	r7, #24
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff ff54 	bl	8000670 <__NVIC_EnableIRQ>
}
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b089      	sub	sp, #36	; 0x24
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80007da:	2300      	movs	r3, #0
 80007dc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80007ea:	2300      	movs	r3, #0
 80007ec:	61fb      	str	r3, [r7, #28]
 80007ee:	e175      	b.n	8000adc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80007f0:	2201      	movs	r2, #1
 80007f2:	69fb      	ldr	r3, [r7, #28]
 80007f4:	fa02 f303 	lsl.w	r3, r2, r3
 80007f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	697a      	ldr	r2, [r7, #20]
 8000800:	4013      	ands	r3, r2
 8000802:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000804:	693a      	ldr	r2, [r7, #16]
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	429a      	cmp	r2, r3
 800080a:	f040 8164 	bne.w	8000ad6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	685b      	ldr	r3, [r3, #4]
 8000812:	2b02      	cmp	r3, #2
 8000814:	d003      	beq.n	800081e <HAL_GPIO_Init+0x4e>
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	685b      	ldr	r3, [r3, #4]
 800081a:	2b12      	cmp	r3, #18
 800081c:	d123      	bne.n	8000866 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800081e:	69fb      	ldr	r3, [r7, #28]
 8000820:	08da      	lsrs	r2, r3, #3
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	3208      	adds	r2, #8
 8000826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800082a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800082c:	69fb      	ldr	r3, [r7, #28]
 800082e:	f003 0307 	and.w	r3, r3, #7
 8000832:	009b      	lsls	r3, r3, #2
 8000834:	220f      	movs	r2, #15
 8000836:	fa02 f303 	lsl.w	r3, r2, r3
 800083a:	43db      	mvns	r3, r3
 800083c:	69ba      	ldr	r2, [r7, #24]
 800083e:	4013      	ands	r3, r2
 8000840:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	691a      	ldr	r2, [r3, #16]
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	f003 0307 	and.w	r3, r3, #7
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	fa02 f303 	lsl.w	r3, r2, r3
 8000852:	69ba      	ldr	r2, [r7, #24]
 8000854:	4313      	orrs	r3, r2
 8000856:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000858:	69fb      	ldr	r3, [r7, #28]
 800085a:	08da      	lsrs	r2, r3, #3
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	3208      	adds	r2, #8
 8000860:	69b9      	ldr	r1, [r7, #24]
 8000862:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800086c:	69fb      	ldr	r3, [r7, #28]
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	2203      	movs	r2, #3
 8000872:	fa02 f303 	lsl.w	r3, r2, r3
 8000876:	43db      	mvns	r3, r3
 8000878:	69ba      	ldr	r2, [r7, #24]
 800087a:	4013      	ands	r3, r2
 800087c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	685b      	ldr	r3, [r3, #4]
 8000882:	f003 0203 	and.w	r2, r3, #3
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	fa02 f303 	lsl.w	r3, r2, r3
 800088e:	69ba      	ldr	r2, [r7, #24]
 8000890:	4313      	orrs	r3, r2
 8000892:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	69ba      	ldr	r2, [r7, #24]
 8000898:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d00b      	beq.n	80008ba <HAL_GPIO_Init+0xea>
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	2b02      	cmp	r3, #2
 80008a8:	d007      	beq.n	80008ba <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008ae:	2b11      	cmp	r3, #17
 80008b0:	d003      	beq.n	80008ba <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	2b12      	cmp	r3, #18
 80008b8:	d130      	bne.n	800091c <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	689b      	ldr	r3, [r3, #8]
 80008be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80008c0:	69fb      	ldr	r3, [r7, #28]
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	2203      	movs	r2, #3
 80008c6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ca:	43db      	mvns	r3, r3
 80008cc:	69ba      	ldr	r2, [r7, #24]
 80008ce:	4013      	ands	r3, r2
 80008d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	68da      	ldr	r2, [r3, #12]
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	fa02 f303 	lsl.w	r3, r2, r3
 80008de:	69ba      	ldr	r2, [r7, #24]
 80008e0:	4313      	orrs	r3, r2
 80008e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	69ba      	ldr	r2, [r7, #24]
 80008e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008f0:	2201      	movs	r2, #1
 80008f2:	69fb      	ldr	r3, [r7, #28]
 80008f4:	fa02 f303 	lsl.w	r3, r2, r3
 80008f8:	43db      	mvns	r3, r3
 80008fa:	69ba      	ldr	r2, [r7, #24]
 80008fc:	4013      	ands	r3, r2
 80008fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	091b      	lsrs	r3, r3, #4
 8000906:	f003 0201 	and.w	r2, r3, #1
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	fa02 f303 	lsl.w	r3, r2, r3
 8000910:	69ba      	ldr	r2, [r7, #24]
 8000912:	4313      	orrs	r3, r2
 8000914:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	69ba      	ldr	r2, [r7, #24]
 800091a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000922:	69fb      	ldr	r3, [r7, #28]
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	2203      	movs	r2, #3
 8000928:	fa02 f303 	lsl.w	r3, r2, r3
 800092c:	43db      	mvns	r3, r3
 800092e:	69ba      	ldr	r2, [r7, #24]
 8000930:	4013      	ands	r3, r2
 8000932:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	689a      	ldr	r2, [r3, #8]
 8000938:	69fb      	ldr	r3, [r7, #28]
 800093a:	005b      	lsls	r3, r3, #1
 800093c:	fa02 f303 	lsl.w	r3, r2, r3
 8000940:	69ba      	ldr	r2, [r7, #24]
 8000942:	4313      	orrs	r3, r2
 8000944:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	69ba      	ldr	r2, [r7, #24]
 800094a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	685b      	ldr	r3, [r3, #4]
 8000950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000954:	2b00      	cmp	r3, #0
 8000956:	f000 80be 	beq.w	8000ad6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095a:	4b65      	ldr	r3, [pc, #404]	; (8000af0 <HAL_GPIO_Init+0x320>)
 800095c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095e:	4a64      	ldr	r2, [pc, #400]	; (8000af0 <HAL_GPIO_Init+0x320>)
 8000960:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000964:	6453      	str	r3, [r2, #68]	; 0x44
 8000966:	4b62      	ldr	r3, [pc, #392]	; (8000af0 <HAL_GPIO_Init+0x320>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000972:	4a60      	ldr	r2, [pc, #384]	; (8000af4 <HAL_GPIO_Init+0x324>)
 8000974:	69fb      	ldr	r3, [r7, #28]
 8000976:	089b      	lsrs	r3, r3, #2
 8000978:	3302      	adds	r3, #2
 800097a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800097e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000980:	69fb      	ldr	r3, [r7, #28]
 8000982:	f003 0303 	and.w	r3, r3, #3
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	220f      	movs	r2, #15
 800098a:	fa02 f303 	lsl.w	r3, r2, r3
 800098e:	43db      	mvns	r3, r3
 8000990:	69ba      	ldr	r2, [r7, #24]
 8000992:	4013      	ands	r3, r2
 8000994:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4a57      	ldr	r2, [pc, #348]	; (8000af8 <HAL_GPIO_Init+0x328>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d037      	beq.n	8000a0e <HAL_GPIO_Init+0x23e>
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4a56      	ldr	r2, [pc, #344]	; (8000afc <HAL_GPIO_Init+0x32c>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d031      	beq.n	8000a0a <HAL_GPIO_Init+0x23a>
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4a55      	ldr	r2, [pc, #340]	; (8000b00 <HAL_GPIO_Init+0x330>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d02b      	beq.n	8000a06 <HAL_GPIO_Init+0x236>
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4a54      	ldr	r2, [pc, #336]	; (8000b04 <HAL_GPIO_Init+0x334>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d025      	beq.n	8000a02 <HAL_GPIO_Init+0x232>
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4a53      	ldr	r2, [pc, #332]	; (8000b08 <HAL_GPIO_Init+0x338>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d01f      	beq.n	80009fe <HAL_GPIO_Init+0x22e>
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4a52      	ldr	r2, [pc, #328]	; (8000b0c <HAL_GPIO_Init+0x33c>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d019      	beq.n	80009fa <HAL_GPIO_Init+0x22a>
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4a51      	ldr	r2, [pc, #324]	; (8000b10 <HAL_GPIO_Init+0x340>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d013      	beq.n	80009f6 <HAL_GPIO_Init+0x226>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4a50      	ldr	r2, [pc, #320]	; (8000b14 <HAL_GPIO_Init+0x344>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d00d      	beq.n	80009f2 <HAL_GPIO_Init+0x222>
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a4f      	ldr	r2, [pc, #316]	; (8000b18 <HAL_GPIO_Init+0x348>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d007      	beq.n	80009ee <HAL_GPIO_Init+0x21e>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a4e      	ldr	r2, [pc, #312]	; (8000b1c <HAL_GPIO_Init+0x34c>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d101      	bne.n	80009ea <HAL_GPIO_Init+0x21a>
 80009e6:	2309      	movs	r3, #9
 80009e8:	e012      	b.n	8000a10 <HAL_GPIO_Init+0x240>
 80009ea:	230a      	movs	r3, #10
 80009ec:	e010      	b.n	8000a10 <HAL_GPIO_Init+0x240>
 80009ee:	2308      	movs	r3, #8
 80009f0:	e00e      	b.n	8000a10 <HAL_GPIO_Init+0x240>
 80009f2:	2307      	movs	r3, #7
 80009f4:	e00c      	b.n	8000a10 <HAL_GPIO_Init+0x240>
 80009f6:	2306      	movs	r3, #6
 80009f8:	e00a      	b.n	8000a10 <HAL_GPIO_Init+0x240>
 80009fa:	2305      	movs	r3, #5
 80009fc:	e008      	b.n	8000a10 <HAL_GPIO_Init+0x240>
 80009fe:	2304      	movs	r3, #4
 8000a00:	e006      	b.n	8000a10 <HAL_GPIO_Init+0x240>
 8000a02:	2303      	movs	r3, #3
 8000a04:	e004      	b.n	8000a10 <HAL_GPIO_Init+0x240>
 8000a06:	2302      	movs	r3, #2
 8000a08:	e002      	b.n	8000a10 <HAL_GPIO_Init+0x240>
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	e000      	b.n	8000a10 <HAL_GPIO_Init+0x240>
 8000a0e:	2300      	movs	r3, #0
 8000a10:	69fa      	ldr	r2, [r7, #28]
 8000a12:	f002 0203 	and.w	r2, r2, #3
 8000a16:	0092      	lsls	r2, r2, #2
 8000a18:	4093      	lsls	r3, r2
 8000a1a:	69ba      	ldr	r2, [r7, #24]
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000a20:	4934      	ldr	r1, [pc, #208]	; (8000af4 <HAL_GPIO_Init+0x324>)
 8000a22:	69fb      	ldr	r3, [r7, #28]
 8000a24:	089b      	lsrs	r3, r3, #2
 8000a26:	3302      	adds	r3, #2
 8000a28:	69ba      	ldr	r2, [r7, #24]
 8000a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a2e:	4b3c      	ldr	r3, [pc, #240]	; (8000b20 <HAL_GPIO_Init+0x350>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	43db      	mvns	r3, r3
 8000a38:	69ba      	ldr	r2, [r7, #24]
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d003      	beq.n	8000a52 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000a4a:	69ba      	ldr	r2, [r7, #24]
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a52:	4a33      	ldr	r2, [pc, #204]	; (8000b20 <HAL_GPIO_Init+0x350>)
 8000a54:	69bb      	ldr	r3, [r7, #24]
 8000a56:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a58:	4b31      	ldr	r3, [pc, #196]	; (8000b20 <HAL_GPIO_Init+0x350>)
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a5e:	693b      	ldr	r3, [r7, #16]
 8000a60:	43db      	mvns	r3, r3
 8000a62:	69ba      	ldr	r2, [r7, #24]
 8000a64:	4013      	ands	r3, r2
 8000a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d003      	beq.n	8000a7c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000a74:	69ba      	ldr	r2, [r7, #24]
 8000a76:	693b      	ldr	r3, [r7, #16]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a7c:	4a28      	ldr	r2, [pc, #160]	; (8000b20 <HAL_GPIO_Init+0x350>)
 8000a7e:	69bb      	ldr	r3, [r7, #24]
 8000a80:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a82:	4b27      	ldr	r3, [pc, #156]	; (8000b20 <HAL_GPIO_Init+0x350>)
 8000a84:	689b      	ldr	r3, [r3, #8]
 8000a86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a88:	693b      	ldr	r3, [r7, #16]
 8000a8a:	43db      	mvns	r3, r3
 8000a8c:	69ba      	ldr	r2, [r7, #24]
 8000a8e:	4013      	ands	r3, r2
 8000a90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d003      	beq.n	8000aa6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000a9e:	69ba      	ldr	r2, [r7, #24]
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000aa6:	4a1e      	ldr	r2, [pc, #120]	; (8000b20 <HAL_GPIO_Init+0x350>)
 8000aa8:	69bb      	ldr	r3, [r7, #24]
 8000aaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000aac:	4b1c      	ldr	r3, [pc, #112]	; (8000b20 <HAL_GPIO_Init+0x350>)
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	43db      	mvns	r3, r3
 8000ab6:	69ba      	ldr	r2, [r7, #24]
 8000ab8:	4013      	ands	r3, r2
 8000aba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d003      	beq.n	8000ad0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000ac8:	69ba      	ldr	r2, [r7, #24]
 8000aca:	693b      	ldr	r3, [r7, #16]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ad0:	4a13      	ldr	r2, [pc, #76]	; (8000b20 <HAL_GPIO_Init+0x350>)
 8000ad2:	69bb      	ldr	r3, [r7, #24]
 8000ad4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	61fb      	str	r3, [r7, #28]
 8000adc:	69fb      	ldr	r3, [r7, #28]
 8000ade:	2b0f      	cmp	r3, #15
 8000ae0:	f67f ae86 	bls.w	80007f0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000ae4:	bf00      	nop
 8000ae6:	3724      	adds	r7, #36	; 0x24
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40013800 	.word	0x40013800
 8000af8:	40020000 	.word	0x40020000
 8000afc:	40020400 	.word	0x40020400
 8000b00:	40020800 	.word	0x40020800
 8000b04:	40020c00 	.word	0x40020c00
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	40021400 	.word	0x40021400
 8000b10:	40021800 	.word	0x40021800
 8000b14:	40021c00 	.word	0x40021c00
 8000b18:	40022000 	.word	0x40022000
 8000b1c:	40022400 	.word	0x40022400
 8000b20:	40013c00 	.word	0x40013c00

08000b24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d101      	bne.n	8000b3a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	e25c      	b.n	8000ff4 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	f000 8087 	beq.w	8000c56 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b48:	4b96      	ldr	r3, [pc, #600]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	f003 030c 	and.w	r3, r3, #12
 8000b50:	2b04      	cmp	r3, #4
 8000b52:	d00c      	beq.n	8000b6e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b54:	4b93      	ldr	r3, [pc, #588]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000b56:	689b      	ldr	r3, [r3, #8]
 8000b58:	f003 030c 	and.w	r3, r3, #12
 8000b5c:	2b08      	cmp	r3, #8
 8000b5e:	d112      	bne.n	8000b86 <HAL_RCC_OscConfig+0x62>
 8000b60:	4b90      	ldr	r3, [pc, #576]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000b6c:	d10b      	bne.n	8000b86 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b6e:	4b8d      	ldr	r3, [pc, #564]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d06c      	beq.n	8000c54 <HAL_RCC_OscConfig+0x130>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d168      	bne.n	8000c54 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
 8000b84:	e236      	b.n	8000ff4 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b8e:	d106      	bne.n	8000b9e <HAL_RCC_OscConfig+0x7a>
 8000b90:	4b84      	ldr	r3, [pc, #528]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a83      	ldr	r2, [pc, #524]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000b96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b9a:	6013      	str	r3, [r2, #0]
 8000b9c:	e02e      	b.n	8000bfc <HAL_RCC_OscConfig+0xd8>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d10c      	bne.n	8000bc0 <HAL_RCC_OscConfig+0x9c>
 8000ba6:	4b7f      	ldr	r3, [pc, #508]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4a7e      	ldr	r2, [pc, #504]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000bac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bb0:	6013      	str	r3, [r2, #0]
 8000bb2:	4b7c      	ldr	r3, [pc, #496]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a7b      	ldr	r2, [pc, #492]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000bb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bbc:	6013      	str	r3, [r2, #0]
 8000bbe:	e01d      	b.n	8000bfc <HAL_RCC_OscConfig+0xd8>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000bc8:	d10c      	bne.n	8000be4 <HAL_RCC_OscConfig+0xc0>
 8000bca:	4b76      	ldr	r3, [pc, #472]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a75      	ldr	r2, [pc, #468]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000bd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bd4:	6013      	str	r3, [r2, #0]
 8000bd6:	4b73      	ldr	r3, [pc, #460]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a72      	ldr	r2, [pc, #456]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000be0:	6013      	str	r3, [r2, #0]
 8000be2:	e00b      	b.n	8000bfc <HAL_RCC_OscConfig+0xd8>
 8000be4:	4b6f      	ldr	r3, [pc, #444]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a6e      	ldr	r2, [pc, #440]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000bea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bee:	6013      	str	r3, [r2, #0]
 8000bf0:	4b6c      	ldr	r3, [pc, #432]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a6b      	ldr	r2, [pc, #428]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000bf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d013      	beq.n	8000c2c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c04:	f7ff fcf6 	bl	80005f4 <HAL_GetTick>
 8000c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c0a:	e008      	b.n	8000c1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c0c:	f7ff fcf2 	bl	80005f4 <HAL_GetTick>
 8000c10:	4602      	mov	r2, r0
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	2b64      	cmp	r3, #100	; 0x64
 8000c18:	d901      	bls.n	8000c1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	e1ea      	b.n	8000ff4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c1e:	4b61      	ldr	r3, [pc, #388]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d0f0      	beq.n	8000c0c <HAL_RCC_OscConfig+0xe8>
 8000c2a:	e014      	b.n	8000c56 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c2c:	f7ff fce2 	bl	80005f4 <HAL_GetTick>
 8000c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c32:	e008      	b.n	8000c46 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c34:	f7ff fcde 	bl	80005f4 <HAL_GetTick>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	2b64      	cmp	r3, #100	; 0x64
 8000c40:	d901      	bls.n	8000c46 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000c42:	2303      	movs	r3, #3
 8000c44:	e1d6      	b.n	8000ff4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c46:	4b57      	ldr	r3, [pc, #348]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d1f0      	bne.n	8000c34 <HAL_RCC_OscConfig+0x110>
 8000c52:	e000      	b.n	8000c56 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f003 0302 	and.w	r3, r3, #2
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d069      	beq.n	8000d36 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c62:	4b50      	ldr	r3, [pc, #320]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000c64:	689b      	ldr	r3, [r3, #8]
 8000c66:	f003 030c 	and.w	r3, r3, #12
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d00b      	beq.n	8000c86 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c6e:	4b4d      	ldr	r3, [pc, #308]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	f003 030c 	and.w	r3, r3, #12
 8000c76:	2b08      	cmp	r3, #8
 8000c78:	d11c      	bne.n	8000cb4 <HAL_RCC_OscConfig+0x190>
 8000c7a:	4b4a      	ldr	r3, [pc, #296]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d116      	bne.n	8000cb4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c86:	4b47      	ldr	r3, [pc, #284]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f003 0302 	and.w	r3, r3, #2
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d005      	beq.n	8000c9e <HAL_RCC_OscConfig+0x17a>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	68db      	ldr	r3, [r3, #12]
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d001      	beq.n	8000c9e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e1aa      	b.n	8000ff4 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c9e:	4b41      	ldr	r3, [pc, #260]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	691b      	ldr	r3, [r3, #16]
 8000caa:	00db      	lsls	r3, r3, #3
 8000cac:	493d      	ldr	r1, [pc, #244]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cb2:	e040      	b.n	8000d36 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d023      	beq.n	8000d04 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cbc:	4b39      	ldr	r3, [pc, #228]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a38      	ldr	r2, [pc, #224]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000cc2:	f043 0301 	orr.w	r3, r3, #1
 8000cc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cc8:	f7ff fc94 	bl	80005f4 <HAL_GetTick>
 8000ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cce:	e008      	b.n	8000ce2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cd0:	f7ff fc90 	bl	80005f4 <HAL_GetTick>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	2b02      	cmp	r3, #2
 8000cdc:	d901      	bls.n	8000ce2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	e188      	b.n	8000ff4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ce2:	4b30      	ldr	r3, [pc, #192]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f003 0302 	and.w	r3, r3, #2
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d0f0      	beq.n	8000cd0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cee:	4b2d      	ldr	r3, [pc, #180]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	691b      	ldr	r3, [r3, #16]
 8000cfa:	00db      	lsls	r3, r3, #3
 8000cfc:	4929      	ldr	r1, [pc, #164]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	600b      	str	r3, [r1, #0]
 8000d02:	e018      	b.n	8000d36 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d04:	4b27      	ldr	r3, [pc, #156]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a26      	ldr	r2, [pc, #152]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000d0a:	f023 0301 	bic.w	r3, r3, #1
 8000d0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d10:	f7ff fc70 	bl	80005f4 <HAL_GetTick>
 8000d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d16:	e008      	b.n	8000d2a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d18:	f7ff fc6c 	bl	80005f4 <HAL_GetTick>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	2b02      	cmp	r3, #2
 8000d24:	d901      	bls.n	8000d2a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8000d26:	2303      	movs	r3, #3
 8000d28:	e164      	b.n	8000ff4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d2a:	4b1e      	ldr	r3, [pc, #120]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f003 0302 	and.w	r3, r3, #2
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d1f0      	bne.n	8000d18 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f003 0308 	and.w	r3, r3, #8
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d038      	beq.n	8000db4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	695b      	ldr	r3, [r3, #20]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d019      	beq.n	8000d7e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d4a:	4b16      	ldr	r3, [pc, #88]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000d4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d4e:	4a15      	ldr	r2, [pc, #84]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d56:	f7ff fc4d 	bl	80005f4 <HAL_GetTick>
 8000d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d5c:	e008      	b.n	8000d70 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d5e:	f7ff fc49 	bl	80005f4 <HAL_GetTick>
 8000d62:	4602      	mov	r2, r0
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	1ad3      	subs	r3, r2, r3
 8000d68:	2b02      	cmp	r3, #2
 8000d6a:	d901      	bls.n	8000d70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	e141      	b.n	8000ff4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d70:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000d72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d74:	f003 0302 	and.w	r3, r3, #2
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d0f0      	beq.n	8000d5e <HAL_RCC_OscConfig+0x23a>
 8000d7c:	e01a      	b.n	8000db4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d7e:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000d80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d82:	4a08      	ldr	r2, [pc, #32]	; (8000da4 <HAL_RCC_OscConfig+0x280>)
 8000d84:	f023 0301 	bic.w	r3, r3, #1
 8000d88:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d8a:	f7ff fc33 	bl	80005f4 <HAL_GetTick>
 8000d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d90:	e00a      	b.n	8000da8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d92:	f7ff fc2f 	bl	80005f4 <HAL_GetTick>
 8000d96:	4602      	mov	r2, r0
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	1ad3      	subs	r3, r2, r3
 8000d9c:	2b02      	cmp	r3, #2
 8000d9e:	d903      	bls.n	8000da8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8000da0:	2303      	movs	r3, #3
 8000da2:	e127      	b.n	8000ff4 <HAL_RCC_OscConfig+0x4d0>
 8000da4:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000da8:	4b94      	ldr	r3, [pc, #592]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000daa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000dac:	f003 0302 	and.w	r3, r3, #2
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d1ee      	bne.n	8000d92 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f003 0304 	and.w	r3, r3, #4
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	f000 80a4 	beq.w	8000f0a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dc2:	4b8e      	ldr	r3, [pc, #568]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d10d      	bne.n	8000dea <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dce:	4b8b      	ldr	r3, [pc, #556]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	4a8a      	ldr	r2, [pc, #552]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dda:	4b88      	ldr	r3, [pc, #544]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000de6:	2301      	movs	r3, #1
 8000de8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000dea:	4b85      	ldr	r3, [pc, #532]	; (8001000 <HAL_RCC_OscConfig+0x4dc>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d118      	bne.n	8000e28 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8000df6:	4b82      	ldr	r3, [pc, #520]	; (8001000 <HAL_RCC_OscConfig+0x4dc>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a81      	ldr	r2, [pc, #516]	; (8001000 <HAL_RCC_OscConfig+0x4dc>)
 8000dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e02:	f7ff fbf7 	bl	80005f4 <HAL_GetTick>
 8000e06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e08:	e008      	b.n	8000e1c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000e0a:	f7ff fbf3 	bl	80005f4 <HAL_GetTick>
 8000e0e:	4602      	mov	r2, r0
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	1ad3      	subs	r3, r2, r3
 8000e14:	2b64      	cmp	r3, #100	; 0x64
 8000e16:	d901      	bls.n	8000e1c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	e0eb      	b.n	8000ff4 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e1c:	4b78      	ldr	r3, [pc, #480]	; (8001000 <HAL_RCC_OscConfig+0x4dc>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d0f0      	beq.n	8000e0a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d106      	bne.n	8000e3e <HAL_RCC_OscConfig+0x31a>
 8000e30:	4b72      	ldr	r3, [pc, #456]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e34:	4a71      	ldr	r2, [pc, #452]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000e36:	f043 0301 	orr.w	r3, r3, #1
 8000e3a:	6713      	str	r3, [r2, #112]	; 0x70
 8000e3c:	e02d      	b.n	8000e9a <HAL_RCC_OscConfig+0x376>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d10c      	bne.n	8000e60 <HAL_RCC_OscConfig+0x33c>
 8000e46:	4b6d      	ldr	r3, [pc, #436]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e4a:	4a6c      	ldr	r2, [pc, #432]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000e4c:	f023 0301 	bic.w	r3, r3, #1
 8000e50:	6713      	str	r3, [r2, #112]	; 0x70
 8000e52:	4b6a      	ldr	r3, [pc, #424]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e56:	4a69      	ldr	r2, [pc, #420]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000e58:	f023 0304 	bic.w	r3, r3, #4
 8000e5c:	6713      	str	r3, [r2, #112]	; 0x70
 8000e5e:	e01c      	b.n	8000e9a <HAL_RCC_OscConfig+0x376>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	2b05      	cmp	r3, #5
 8000e66:	d10c      	bne.n	8000e82 <HAL_RCC_OscConfig+0x35e>
 8000e68:	4b64      	ldr	r3, [pc, #400]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e6c:	4a63      	ldr	r2, [pc, #396]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000e6e:	f043 0304 	orr.w	r3, r3, #4
 8000e72:	6713      	str	r3, [r2, #112]	; 0x70
 8000e74:	4b61      	ldr	r3, [pc, #388]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e78:	4a60      	ldr	r2, [pc, #384]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000e7a:	f043 0301 	orr.w	r3, r3, #1
 8000e7e:	6713      	str	r3, [r2, #112]	; 0x70
 8000e80:	e00b      	b.n	8000e9a <HAL_RCC_OscConfig+0x376>
 8000e82:	4b5e      	ldr	r3, [pc, #376]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e86:	4a5d      	ldr	r2, [pc, #372]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000e88:	f023 0301 	bic.w	r3, r3, #1
 8000e8c:	6713      	str	r3, [r2, #112]	; 0x70
 8000e8e:	4b5b      	ldr	r3, [pc, #364]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e92:	4a5a      	ldr	r2, [pc, #360]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000e94:	f023 0304 	bic.w	r3, r3, #4
 8000e98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d015      	beq.n	8000ece <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ea2:	f7ff fba7 	bl	80005f4 <HAL_GetTick>
 8000ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ea8:	e00a      	b.n	8000ec0 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000eaa:	f7ff fba3 	bl	80005f4 <HAL_GetTick>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d901      	bls.n	8000ec0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	e099      	b.n	8000ff4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ec0:	4b4e      	ldr	r3, [pc, #312]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ec4:	f003 0302 	and.w	r3, r3, #2
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d0ee      	beq.n	8000eaa <HAL_RCC_OscConfig+0x386>
 8000ecc:	e014      	b.n	8000ef8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ece:	f7ff fb91 	bl	80005f4 <HAL_GetTick>
 8000ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ed4:	e00a      	b.n	8000eec <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ed6:	f7ff fb8d 	bl	80005f4 <HAL_GetTick>
 8000eda:	4602      	mov	r2, r0
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d901      	bls.n	8000eec <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	e083      	b.n	8000ff4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000eec:	4b43      	ldr	r3, [pc, #268]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ef0:	f003 0302 	and.w	r3, r3, #2
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d1ee      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000ef8:	7dfb      	ldrb	r3, [r7, #23]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d105      	bne.n	8000f0a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000efe:	4b3f      	ldr	r3, [pc, #252]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	4a3e      	ldr	r2, [pc, #248]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000f04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f08:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	699b      	ldr	r3, [r3, #24]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d06f      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f12:	4b3a      	ldr	r3, [pc, #232]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	f003 030c 	and.w	r3, r3, #12
 8000f1a:	2b08      	cmp	r3, #8
 8000f1c:	d067      	beq.n	8000fee <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	699b      	ldr	r3, [r3, #24]
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d149      	bne.n	8000fba <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f26:	4b35      	ldr	r3, [pc, #212]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a34      	ldr	r2, [pc, #208]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000f2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f32:	f7ff fb5f 	bl	80005f4 <HAL_GetTick>
 8000f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f38:	e008      	b.n	8000f4c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f3a:	f7ff fb5b 	bl	80005f4 <HAL_GetTick>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d901      	bls.n	8000f4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	e053      	b.n	8000ff4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f4c:	4b2b      	ldr	r3, [pc, #172]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d1f0      	bne.n	8000f3a <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	69da      	ldr	r2, [r3, #28]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6a1b      	ldr	r3, [r3, #32]
 8000f60:	431a      	orrs	r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f66:	019b      	lsls	r3, r3, #6
 8000f68:	431a      	orrs	r2, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f6e:	085b      	lsrs	r3, r3, #1
 8000f70:	3b01      	subs	r3, #1
 8000f72:	041b      	lsls	r3, r3, #16
 8000f74:	431a      	orrs	r2, r3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f7a:	061b      	lsls	r3, r3, #24
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	4a1f      	ldr	r2, [pc, #124]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000f80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000f84:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f86:	4b1d      	ldr	r3, [pc, #116]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a1c      	ldr	r2, [pc, #112]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000f8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f92:	f7ff fb2f 	bl	80005f4 <HAL_GetTick>
 8000f96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f98:	e008      	b.n	8000fac <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f9a:	f7ff fb2b 	bl	80005f4 <HAL_GetTick>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	1ad3      	subs	r3, r2, r3
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d901      	bls.n	8000fac <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	e023      	b.n	8000ff4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fac:	4b13      	ldr	r3, [pc, #76]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d0f0      	beq.n	8000f9a <HAL_RCC_OscConfig+0x476>
 8000fb8:	e01b      	b.n	8000ff2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fba:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a0f      	ldr	r2, [pc, #60]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000fc0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000fc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fc6:	f7ff fb15 	bl	80005f4 <HAL_GetTick>
 8000fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fcc:	e008      	b.n	8000fe0 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fce:	f7ff fb11 	bl	80005f4 <HAL_GetTick>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d901      	bls.n	8000fe0 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	e009      	b.n	8000ff4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_RCC_OscConfig+0x4d8>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d1f0      	bne.n	8000fce <HAL_RCC_OscConfig+0x4aa>
 8000fec:	e001      	b.n	8000ff2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e000      	b.n	8000ff4 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8000ff2:	2300      	movs	r3, #0
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3718      	adds	r7, #24
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40007000 	.word	0x40007000

08001004 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d101      	bne.n	800101c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	e0ce      	b.n	80011ba <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800101c:	4b69      	ldr	r3, [pc, #420]	; (80011c4 <HAL_RCC_ClockConfig+0x1c0>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f003 030f 	and.w	r3, r3, #15
 8001024:	683a      	ldr	r2, [r7, #0]
 8001026:	429a      	cmp	r2, r3
 8001028:	d910      	bls.n	800104c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800102a:	4b66      	ldr	r3, [pc, #408]	; (80011c4 <HAL_RCC_ClockConfig+0x1c0>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f023 020f 	bic.w	r2, r3, #15
 8001032:	4964      	ldr	r1, [pc, #400]	; (80011c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	4313      	orrs	r3, r2
 8001038:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800103a:	4b62      	ldr	r3, [pc, #392]	; (80011c4 <HAL_RCC_ClockConfig+0x1c0>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 030f 	and.w	r3, r3, #15
 8001042:	683a      	ldr	r2, [r7, #0]
 8001044:	429a      	cmp	r2, r3
 8001046:	d001      	beq.n	800104c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	e0b6      	b.n	80011ba <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 0302 	and.w	r3, r3, #2
 8001054:	2b00      	cmp	r3, #0
 8001056:	d020      	beq.n	800109a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 0304 	and.w	r3, r3, #4
 8001060:	2b00      	cmp	r3, #0
 8001062:	d005      	beq.n	8001070 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001064:	4b58      	ldr	r3, [pc, #352]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	4a57      	ldr	r2, [pc, #348]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 800106a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800106e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 0308 	and.w	r3, r3, #8
 8001078:	2b00      	cmp	r3, #0
 800107a:	d005      	beq.n	8001088 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800107c:	4b52      	ldr	r3, [pc, #328]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	4a51      	ldr	r2, [pc, #324]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001082:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001086:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001088:	4b4f      	ldr	r3, [pc, #316]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	494c      	ldr	r1, [pc, #304]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001096:	4313      	orrs	r3, r2
 8001098:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d040      	beq.n	8001128 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d107      	bne.n	80010be <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ae:	4b46      	ldr	r3, [pc, #280]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d115      	bne.n	80010e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e07d      	b.n	80011ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d107      	bne.n	80010d6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010c6:	4b40      	ldr	r3, [pc, #256]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d109      	bne.n	80010e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e071      	b.n	80011ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d6:	4b3c      	ldr	r3, [pc, #240]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d101      	bne.n	80010e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e069      	b.n	80011ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010e6:	4b38      	ldr	r3, [pc, #224]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	f023 0203 	bic.w	r2, r3, #3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	4935      	ldr	r1, [pc, #212]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 80010f4:	4313      	orrs	r3, r2
 80010f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80010f8:	f7ff fa7c 	bl	80005f4 <HAL_GetTick>
 80010fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010fe:	e00a      	b.n	8001116 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001100:	f7ff fa78 	bl	80005f4 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	f241 3288 	movw	r2, #5000	; 0x1388
 800110e:	4293      	cmp	r3, r2
 8001110:	d901      	bls.n	8001116 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e051      	b.n	80011ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001116:	4b2c      	ldr	r3, [pc, #176]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	f003 020c 	and.w	r2, r3, #12
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	429a      	cmp	r2, r3
 8001126:	d1eb      	bne.n	8001100 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001128:	4b26      	ldr	r3, [pc, #152]	; (80011c4 <HAL_RCC_ClockConfig+0x1c0>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 030f 	and.w	r3, r3, #15
 8001130:	683a      	ldr	r2, [r7, #0]
 8001132:	429a      	cmp	r2, r3
 8001134:	d210      	bcs.n	8001158 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001136:	4b23      	ldr	r3, [pc, #140]	; (80011c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f023 020f 	bic.w	r2, r3, #15
 800113e:	4921      	ldr	r1, [pc, #132]	; (80011c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	4313      	orrs	r3, r2
 8001144:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001146:	4b1f      	ldr	r3, [pc, #124]	; (80011c4 <HAL_RCC_ClockConfig+0x1c0>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 030f 	and.w	r3, r3, #15
 800114e:	683a      	ldr	r2, [r7, #0]
 8001150:	429a      	cmp	r2, r3
 8001152:	d001      	beq.n	8001158 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e030      	b.n	80011ba <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0304 	and.w	r3, r3, #4
 8001160:	2b00      	cmp	r3, #0
 8001162:	d008      	beq.n	8001176 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001164:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	4915      	ldr	r1, [pc, #84]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001172:	4313      	orrs	r3, r2
 8001174:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0308 	and.w	r3, r3, #8
 800117e:	2b00      	cmp	r3, #0
 8001180:	d009      	beq.n	8001196 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001182:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	00db      	lsls	r3, r3, #3
 8001190:	490d      	ldr	r1, [pc, #52]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 8001192:	4313      	orrs	r3, r2
 8001194:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001196:	f000 f81d 	bl	80011d4 <HAL_RCC_GetSysClockFreq>
 800119a:	4601      	mov	r1, r0
 800119c:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	091b      	lsrs	r3, r3, #4
 80011a2:	f003 030f 	and.w	r3, r3, #15
 80011a6:	4a09      	ldr	r2, [pc, #36]	; (80011cc <HAL_RCC_ClockConfig+0x1c8>)
 80011a8:	5cd3      	ldrb	r3, [r2, r3]
 80011aa:	fa21 f303 	lsr.w	r3, r1, r3
 80011ae:	4a08      	ldr	r2, [pc, #32]	; (80011d0 <HAL_RCC_ClockConfig+0x1cc>)
 80011b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80011b2:	2000      	movs	r0, #0
 80011b4:	f003 f848 	bl	8004248 <HAL_InitTick>

  return HAL_OK;
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40023c00 	.word	0x40023c00
 80011c8:	40023800 	.word	0x40023800
 80011cc:	080054cc 	.word	0x080054cc
 80011d0:	2000000c 	.word	0x2000000c

080011d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	607b      	str	r3, [r7, #4]
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	2300      	movs	r3, #0
 80011e4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011ea:	4b50      	ldr	r3, [pc, #320]	; (800132c <HAL_RCC_GetSysClockFreq+0x158>)
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f003 030c 	and.w	r3, r3, #12
 80011f2:	2b04      	cmp	r3, #4
 80011f4:	d007      	beq.n	8001206 <HAL_RCC_GetSysClockFreq+0x32>
 80011f6:	2b08      	cmp	r3, #8
 80011f8:	d008      	beq.n	800120c <HAL_RCC_GetSysClockFreq+0x38>
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	f040 808d 	bne.w	800131a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001200:	4b4b      	ldr	r3, [pc, #300]	; (8001330 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001202:	60bb      	str	r3, [r7, #8]
       break;
 8001204:	e08c      	b.n	8001320 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001206:	4b4b      	ldr	r3, [pc, #300]	; (8001334 <HAL_RCC_GetSysClockFreq+0x160>)
 8001208:	60bb      	str	r3, [r7, #8]
      break;
 800120a:	e089      	b.n	8001320 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800120c:	4b47      	ldr	r3, [pc, #284]	; (800132c <HAL_RCC_GetSysClockFreq+0x158>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001214:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001216:	4b45      	ldr	r3, [pc, #276]	; (800132c <HAL_RCC_GetSysClockFreq+0x158>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d023      	beq.n	800126a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001222:	4b42      	ldr	r3, [pc, #264]	; (800132c <HAL_RCC_GetSysClockFreq+0x158>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	099b      	lsrs	r3, r3, #6
 8001228:	f04f 0400 	mov.w	r4, #0
 800122c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001230:	f04f 0200 	mov.w	r2, #0
 8001234:	ea03 0501 	and.w	r5, r3, r1
 8001238:	ea04 0602 	and.w	r6, r4, r2
 800123c:	4a3d      	ldr	r2, [pc, #244]	; (8001334 <HAL_RCC_GetSysClockFreq+0x160>)
 800123e:	fb02 f106 	mul.w	r1, r2, r6
 8001242:	2200      	movs	r2, #0
 8001244:	fb02 f205 	mul.w	r2, r2, r5
 8001248:	440a      	add	r2, r1
 800124a:	493a      	ldr	r1, [pc, #232]	; (8001334 <HAL_RCC_GetSysClockFreq+0x160>)
 800124c:	fba5 0101 	umull	r0, r1, r5, r1
 8001250:	1853      	adds	r3, r2, r1
 8001252:	4619      	mov	r1, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f04f 0400 	mov.w	r4, #0
 800125a:	461a      	mov	r2, r3
 800125c:	4623      	mov	r3, r4
 800125e:	f7ff f827 	bl	80002b0 <__aeabi_uldivmod>
 8001262:	4603      	mov	r3, r0
 8001264:	460c      	mov	r4, r1
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	e049      	b.n	80012fe <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800126a:	4b30      	ldr	r3, [pc, #192]	; (800132c <HAL_RCC_GetSysClockFreq+0x158>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	099b      	lsrs	r3, r3, #6
 8001270:	f04f 0400 	mov.w	r4, #0
 8001274:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001278:	f04f 0200 	mov.w	r2, #0
 800127c:	ea03 0501 	and.w	r5, r3, r1
 8001280:	ea04 0602 	and.w	r6, r4, r2
 8001284:	4629      	mov	r1, r5
 8001286:	4632      	mov	r2, r6
 8001288:	f04f 0300 	mov.w	r3, #0
 800128c:	f04f 0400 	mov.w	r4, #0
 8001290:	0154      	lsls	r4, r2, #5
 8001292:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001296:	014b      	lsls	r3, r1, #5
 8001298:	4619      	mov	r1, r3
 800129a:	4622      	mov	r2, r4
 800129c:	1b49      	subs	r1, r1, r5
 800129e:	eb62 0206 	sbc.w	r2, r2, r6
 80012a2:	f04f 0300 	mov.w	r3, #0
 80012a6:	f04f 0400 	mov.w	r4, #0
 80012aa:	0194      	lsls	r4, r2, #6
 80012ac:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80012b0:	018b      	lsls	r3, r1, #6
 80012b2:	1a5b      	subs	r3, r3, r1
 80012b4:	eb64 0402 	sbc.w	r4, r4, r2
 80012b8:	f04f 0100 	mov.w	r1, #0
 80012bc:	f04f 0200 	mov.w	r2, #0
 80012c0:	00e2      	lsls	r2, r4, #3
 80012c2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80012c6:	00d9      	lsls	r1, r3, #3
 80012c8:	460b      	mov	r3, r1
 80012ca:	4614      	mov	r4, r2
 80012cc:	195b      	adds	r3, r3, r5
 80012ce:	eb44 0406 	adc.w	r4, r4, r6
 80012d2:	f04f 0100 	mov.w	r1, #0
 80012d6:	f04f 0200 	mov.w	r2, #0
 80012da:	02a2      	lsls	r2, r4, #10
 80012dc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80012e0:	0299      	lsls	r1, r3, #10
 80012e2:	460b      	mov	r3, r1
 80012e4:	4614      	mov	r4, r2
 80012e6:	4618      	mov	r0, r3
 80012e8:	4621      	mov	r1, r4
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f04f 0400 	mov.w	r4, #0
 80012f0:	461a      	mov	r2, r3
 80012f2:	4623      	mov	r3, r4
 80012f4:	f7fe ffdc 	bl	80002b0 <__aeabi_uldivmod>
 80012f8:	4603      	mov	r3, r0
 80012fa:	460c      	mov	r4, r1
 80012fc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80012fe:	4b0b      	ldr	r3, [pc, #44]	; (800132c <HAL_RCC_GetSysClockFreq+0x158>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	0c1b      	lsrs	r3, r3, #16
 8001304:	f003 0303 	and.w	r3, r3, #3
 8001308:	3301      	adds	r3, #1
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800130e:	68fa      	ldr	r2, [r7, #12]
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	fbb2 f3f3 	udiv	r3, r2, r3
 8001316:	60bb      	str	r3, [r7, #8]
      break;
 8001318:	e002      	b.n	8001320 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800131a:	4b05      	ldr	r3, [pc, #20]	; (8001330 <HAL_RCC_GetSysClockFreq+0x15c>)
 800131c:	60bb      	str	r3, [r7, #8]
      break;
 800131e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001320:	68bb      	ldr	r3, [r7, #8]
}
 8001322:	4618      	mov	r0, r3
 8001324:	3714      	adds	r7, #20
 8001326:	46bd      	mov	sp, r7
 8001328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800132a:	bf00      	nop
 800132c:	40023800 	.word	0x40023800
 8001330:	00f42400 	.word	0x00f42400
 8001334:	017d7840 	.word	0x017d7840

08001338 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800133c:	4b03      	ldr	r3, [pc, #12]	; (800134c <HAL_RCC_GetHCLKFreq+0x14>)
 800133e:	681b      	ldr	r3, [r3, #0]
}
 8001340:	4618      	mov	r0, r3
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	2000000c 	.word	0x2000000c

08001350 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001354:	f7ff fff0 	bl	8001338 <HAL_RCC_GetHCLKFreq>
 8001358:	4601      	mov	r1, r0
 800135a:	4b05      	ldr	r3, [pc, #20]	; (8001370 <HAL_RCC_GetPCLK1Freq+0x20>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	0a9b      	lsrs	r3, r3, #10
 8001360:	f003 0307 	and.w	r3, r3, #7
 8001364:	4a03      	ldr	r2, [pc, #12]	; (8001374 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001366:	5cd3      	ldrb	r3, [r2, r3]
 8001368:	fa21 f303 	lsr.w	r3, r1, r3
}
 800136c:	4618      	mov	r0, r3
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40023800 	.word	0x40023800
 8001374:	080054dc 	.word	0x080054dc

08001378 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800137c:	f7ff ffdc 	bl	8001338 <HAL_RCC_GetHCLKFreq>
 8001380:	4601      	mov	r1, r0
 8001382:	4b05      	ldr	r3, [pc, #20]	; (8001398 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	0b5b      	lsrs	r3, r3, #13
 8001388:	f003 0307 	and.w	r3, r3, #7
 800138c:	4a03      	ldr	r2, [pc, #12]	; (800139c <HAL_RCC_GetPCLK2Freq+0x24>)
 800138e:	5cd3      	ldrb	r3, [r2, r3]
 8001390:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001394:	4618      	mov	r0, r3
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40023800 	.word	0x40023800
 800139c:	080054dc 	.word	0x080054dc

080013a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	220f      	movs	r2, #15
 80013ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80013b0:	4b12      	ldr	r3, [pc, #72]	; (80013fc <HAL_RCC_GetClockConfig+0x5c>)
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f003 0203 	and.w	r2, r3, #3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80013bc:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <HAL_RCC_GetClockConfig+0x5c>)
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80013c8:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <HAL_RCC_GetClockConfig+0x5c>)
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80013d4:	4b09      	ldr	r3, [pc, #36]	; (80013fc <HAL_RCC_GetClockConfig+0x5c>)
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	08db      	lsrs	r3, r3, #3
 80013da:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80013e2:	4b07      	ldr	r3, [pc, #28]	; (8001400 <HAL_RCC_GetClockConfig+0x60>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 020f 	and.w	r2, r3, #15
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	601a      	str	r2, [r3, #0]
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	40023800 	.word	0x40023800
 8001400:	40023c00 	.word	0x40023c00

08001404 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b088      	sub	sp, #32
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001418:	2300      	movs	r3, #0
 800141a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	2b00      	cmp	r3, #0
 800142a:	d012      	beq.n	8001452 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800142c:	4b69      	ldr	r3, [pc, #420]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	4a68      	ldr	r2, [pc, #416]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001432:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001436:	6093      	str	r3, [r2, #8]
 8001438:	4b66      	ldr	r3, [pc, #408]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001440:	4964      	ldr	r1, [pc, #400]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001442:	4313      	orrs	r3, r2
 8001444:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800144a:	2b00      	cmp	r3, #0
 800144c:	d101      	bne.n	8001452 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800144e:	2301      	movs	r3, #1
 8001450:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d017      	beq.n	800148e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800145e:	4b5d      	ldr	r3, [pc, #372]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001460:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001464:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800146c:	4959      	ldr	r1, [pc, #356]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800146e:	4313      	orrs	r3, r2
 8001470:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001478:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800147c:	d101      	bne.n	8001482 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800147e:	2301      	movs	r3, #1
 8001480:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001486:	2b00      	cmp	r3, #0
 8001488:	d101      	bne.n	800148e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800148a:	2301      	movs	r3, #1
 800148c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d017      	beq.n	80014ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800149a:	4b4e      	ldr	r3, [pc, #312]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800149c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80014a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a8:	494a      	ldr	r1, [pc, #296]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80014aa:	4313      	orrs	r3, r2
 80014ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014b8:	d101      	bne.n	80014be <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80014ba:	2301      	movs	r3, #1
 80014bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d101      	bne.n	80014ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80014c6:	2301      	movs	r3, #1
 80014c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80014d6:	2301      	movs	r3, #1
 80014d8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0320 	and.w	r3, r3, #32
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	f000 808b 	beq.w	80015fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80014e8:	4b3a      	ldr	r3, [pc, #232]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80014ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ec:	4a39      	ldr	r2, [pc, #228]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80014ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f2:	6413      	str	r3, [r2, #64]	; 0x40
 80014f4:	4b37      	ldr	r3, [pc, #220]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80014f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fc:	60bb      	str	r3, [r7, #8]
 80014fe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001500:	4b35      	ldr	r3, [pc, #212]	; (80015d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a34      	ldr	r2, [pc, #208]	; (80015d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800150a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800150c:	f7ff f872 	bl	80005f4 <HAL_GetTick>
 8001510:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001512:	e008      	b.n	8001526 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001514:	f7ff f86e 	bl	80005f4 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b64      	cmp	r3, #100	; 0x64
 8001520:	d901      	bls.n	8001526 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e355      	b.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001526:	4b2c      	ldr	r3, [pc, #176]	; (80015d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800152e:	2b00      	cmp	r3, #0
 8001530:	d0f0      	beq.n	8001514 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001532:	4b28      	ldr	r3, [pc, #160]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800153a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d035      	beq.n	80015ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	429a      	cmp	r2, r3
 800154e:	d02e      	beq.n	80015ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001550:	4b20      	ldr	r3, [pc, #128]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001554:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001558:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800155a:	4b1e      	ldr	r3, [pc, #120]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800155c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800155e:	4a1d      	ldr	r2, [pc, #116]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001564:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001566:	4b1b      	ldr	r3, [pc, #108]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800156a:	4a1a      	ldr	r2, [pc, #104]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800156c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001570:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001572:	4a18      	ldr	r2, [pc, #96]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001578:	4b16      	ldr	r3, [pc, #88]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800157a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800157c:	f003 0301 	and.w	r3, r3, #1
 8001580:	2b01      	cmp	r3, #1
 8001582:	d114      	bne.n	80015ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001584:	f7ff f836 	bl	80005f4 <HAL_GetTick>
 8001588:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800158a:	e00a      	b.n	80015a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800158c:	f7ff f832 	bl	80005f4 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	f241 3288 	movw	r2, #5000	; 0x1388
 800159a:	4293      	cmp	r3, r2
 800159c:	d901      	bls.n	80015a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e317      	b.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015a2:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80015a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d0ee      	beq.n	800158c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80015ba:	d111      	bne.n	80015e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80015bc:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015c8:	4b04      	ldr	r3, [pc, #16]	; (80015dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80015ca:	400b      	ands	r3, r1
 80015cc:	4901      	ldr	r1, [pc, #4]	; (80015d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80015ce:	4313      	orrs	r3, r2
 80015d0:	608b      	str	r3, [r1, #8]
 80015d2:	e00b      	b.n	80015ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80015d4:	40023800 	.word	0x40023800
 80015d8:	40007000 	.word	0x40007000
 80015dc:	0ffffcff 	.word	0x0ffffcff
 80015e0:	4bb0      	ldr	r3, [pc, #704]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	4aaf      	ldr	r2, [pc, #700]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80015e6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80015ea:	6093      	str	r3, [r2, #8]
 80015ec:	4bad      	ldr	r3, [pc, #692]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80015ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015f8:	49aa      	ldr	r1, [pc, #680]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0310 	and.w	r3, r3, #16
 8001606:	2b00      	cmp	r3, #0
 8001608:	d010      	beq.n	800162c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800160a:	4ba6      	ldr	r3, [pc, #664]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800160c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001610:	4aa4      	ldr	r2, [pc, #656]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001612:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001616:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800161a:	4ba2      	ldr	r3, [pc, #648]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800161c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001624:	499f      	ldr	r1, [pc, #636]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001626:	4313      	orrs	r3, r2
 8001628:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d00a      	beq.n	800164e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001638:	4b9a      	ldr	r3, [pc, #616]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800163a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800163e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001646:	4997      	ldr	r1, [pc, #604]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001648:	4313      	orrs	r3, r2
 800164a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d00a      	beq.n	8001670 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800165a:	4b92      	ldr	r3, [pc, #584]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800165c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001660:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001668:	498e      	ldr	r1, [pc, #568]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800166a:	4313      	orrs	r3, r2
 800166c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d00a      	beq.n	8001692 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800167c:	4b89      	ldr	r3, [pc, #548]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800167e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001682:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800168a:	4986      	ldr	r1, [pc, #536]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800168c:	4313      	orrs	r3, r2
 800168e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d00a      	beq.n	80016b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800169e:	4b81      	ldr	r3, [pc, #516]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80016a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ac:	497d      	ldr	r1, [pc, #500]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80016ae:	4313      	orrs	r3, r2
 80016b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d00a      	beq.n	80016d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80016c0:	4b78      	ldr	r3, [pc, #480]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80016c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016c6:	f023 0203 	bic.w	r2, r3, #3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ce:	4975      	ldr	r1, [pc, #468]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80016d0:	4313      	orrs	r3, r2
 80016d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d00a      	beq.n	80016f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80016e2:	4b70      	ldr	r3, [pc, #448]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80016e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016e8:	f023 020c 	bic.w	r2, r3, #12
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016f0:	496c      	ldr	r1, [pc, #432]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80016f2:	4313      	orrs	r3, r2
 80016f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001700:	2b00      	cmp	r3, #0
 8001702:	d00a      	beq.n	800171a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001704:	4b67      	ldr	r3, [pc, #412]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800170a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001712:	4964      	ldr	r1, [pc, #400]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001714:	4313      	orrs	r3, r2
 8001716:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001722:	2b00      	cmp	r3, #0
 8001724:	d00a      	beq.n	800173c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001726:	4b5f      	ldr	r3, [pc, #380]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800172c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001734:	495b      	ldr	r1, [pc, #364]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001736:	4313      	orrs	r3, r2
 8001738:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001744:	2b00      	cmp	r3, #0
 8001746:	d00a      	beq.n	800175e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001748:	4b56      	ldr	r3, [pc, #344]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800174a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800174e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001756:	4953      	ldr	r1, [pc, #332]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001758:	4313      	orrs	r3, r2
 800175a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001766:	2b00      	cmp	r3, #0
 8001768:	d00a      	beq.n	8001780 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800176a:	4b4e      	ldr	r3, [pc, #312]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800176c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001770:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001778:	494a      	ldr	r1, [pc, #296]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800177a:	4313      	orrs	r3, r2
 800177c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d00a      	beq.n	80017a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800178c:	4b45      	ldr	r3, [pc, #276]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800178e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001792:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800179a:	4942      	ldr	r1, [pc, #264]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800179c:	4313      	orrs	r3, r2
 800179e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d00a      	beq.n	80017c4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80017ae:	4b3d      	ldr	r3, [pc, #244]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80017b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017bc:	4939      	ldr	r1, [pc, #228]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80017be:	4313      	orrs	r3, r2
 80017c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d00a      	beq.n	80017e6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80017d0:	4b34      	ldr	r3, [pc, #208]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80017d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017d6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80017de:	4931      	ldr	r1, [pc, #196]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80017e0:	4313      	orrs	r3, r2
 80017e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d011      	beq.n	8001816 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80017f2:	4b2c      	ldr	r3, [pc, #176]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80017f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017f8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001800:	4928      	ldr	r1, [pc, #160]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001802:	4313      	orrs	r3, r2
 8001804:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800180c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001810:	d101      	bne.n	8001816 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001812:	2301      	movs	r3, #1
 8001814:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0308 	and.w	r3, r3, #8
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001822:	2301      	movs	r3, #1
 8001824:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00a      	beq.n	8001848 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001832:	4b1c      	ldr	r3, [pc, #112]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001838:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001840:	4918      	ldr	r1, [pc, #96]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001842:	4313      	orrs	r3, r2
 8001844:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d00b      	beq.n	800186c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001854:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800185a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001864:	490f      	ldr	r1, [pc, #60]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001866:	4313      	orrs	r3, r2
 8001868:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d005      	beq.n	800187e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800187a:	f040 80d8 	bne.w	8001a2e <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800187e:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a08      	ldr	r2, [pc, #32]	; (80018a4 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001884:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001888:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800188a:	f7fe feb3 	bl	80005f4 <HAL_GetTick>
 800188e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001890:	e00a      	b.n	80018a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001892:	f7fe feaf 	bl	80005f4 <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b64      	cmp	r3, #100	; 0x64
 800189e:	d903      	bls.n	80018a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e196      	b.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80018a4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80018a8:	4b6c      	ldr	r3, [pc, #432]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d1ee      	bne.n	8001892 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0301 	and.w	r3, r3, #1
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d021      	beq.n	8001904 <HAL_RCCEx_PeriphCLKConfig+0x500>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d11d      	bne.n	8001904 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80018c8:	4b64      	ldr	r3, [pc, #400]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80018ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018ce:	0c1b      	lsrs	r3, r3, #16
 80018d0:	f003 0303 	and.w	r3, r3, #3
 80018d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80018d6:	4b61      	ldr	r3, [pc, #388]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80018d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018dc:	0e1b      	lsrs	r3, r3, #24
 80018de:	f003 030f 	and.w	r3, r3, #15
 80018e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	019a      	lsls	r2, r3, #6
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	041b      	lsls	r3, r3, #16
 80018ee:	431a      	orrs	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	061b      	lsls	r3, r3, #24
 80018f4:	431a      	orrs	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	071b      	lsls	r3, r3, #28
 80018fc:	4957      	ldr	r1, [pc, #348]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80018fe:	4313      	orrs	r3, r2
 8001900:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d004      	beq.n	800191a <HAL_RCCEx_PeriphCLKConfig+0x516>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001914:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001918:	d00a      	beq.n	8001930 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001922:	2b00      	cmp	r3, #0
 8001924:	d02e      	beq.n	8001984 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800192e:	d129      	bne.n	8001984 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001930:	4b4a      	ldr	r3, [pc, #296]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001932:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001936:	0c1b      	lsrs	r3, r3, #16
 8001938:	f003 0303 	and.w	r3, r3, #3
 800193c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800193e:	4b47      	ldr	r3, [pc, #284]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001940:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001944:	0f1b      	lsrs	r3, r3, #28
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	019a      	lsls	r2, r3, #6
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	041b      	lsls	r3, r3, #16
 8001956:	431a      	orrs	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	061b      	lsls	r3, r3, #24
 800195e:	431a      	orrs	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	071b      	lsls	r3, r3, #28
 8001964:	493d      	ldr	r1, [pc, #244]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001966:	4313      	orrs	r3, r2
 8001968:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800196c:	4b3b      	ldr	r3, [pc, #236]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800196e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001972:	f023 021f 	bic.w	r2, r3, #31
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197a:	3b01      	subs	r3, #1
 800197c:	4937      	ldr	r1, [pc, #220]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800197e:	4313      	orrs	r3, r2
 8001980:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d01d      	beq.n	80019cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001990:	4b32      	ldr	r3, [pc, #200]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001992:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001996:	0e1b      	lsrs	r3, r3, #24
 8001998:	f003 030f 	and.w	r3, r3, #15
 800199c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800199e:	4b2f      	ldr	r3, [pc, #188]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80019a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019a4:	0f1b      	lsrs	r3, r3, #28
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	019a      	lsls	r2, r3, #6
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	041b      	lsls	r3, r3, #16
 80019b8:	431a      	orrs	r2, r3
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	061b      	lsls	r3, r3, #24
 80019be:	431a      	orrs	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	071b      	lsls	r3, r3, #28
 80019c4:	4925      	ldr	r1, [pc, #148]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d011      	beq.n	80019fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	019a      	lsls	r2, r3, #6
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	041b      	lsls	r3, r3, #16
 80019e4:	431a      	orrs	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	061b      	lsls	r3, r3, #24
 80019ec:	431a      	orrs	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	071b      	lsls	r3, r3, #28
 80019f4:	4919      	ldr	r1, [pc, #100]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80019fc:	4b17      	ldr	r3, [pc, #92]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a16      	ldr	r2, [pc, #88]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001a02:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a08:	f7fe fdf4 	bl	80005f4 <HAL_GetTick>
 8001a0c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001a10:	f7fe fdf0 	bl	80005f4 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b64      	cmp	r3, #100	; 0x64
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e0d7      	b.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001a22:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d0f0      	beq.n	8001a10 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	f040 80cd 	bne.w	8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001a36:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a08      	ldr	r2, [pc, #32]	; (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001a3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a42:	f7fe fdd7 	bl	80005f4 <HAL_GetTick>
 8001a46:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001a48:	e00a      	b.n	8001a60 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001a4a:	f7fe fdd3 	bl	80005f4 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b64      	cmp	r3, #100	; 0x64
 8001a56:	d903      	bls.n	8001a60 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e0ba      	b.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8001a5c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001a60:	4b5e      	ldr	r3, [pc, #376]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a6c:	d0ed      	beq.n	8001a4a <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d009      	beq.n	8001a96 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d02e      	beq.n	8001aec <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d12a      	bne.n	8001aec <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001a96:	4b51      	ldr	r3, [pc, #324]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a9c:	0c1b      	lsrs	r3, r3, #16
 8001a9e:	f003 0303 	and.w	r3, r3, #3
 8001aa2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001aa4:	4b4d      	ldr	r3, [pc, #308]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aaa:	0f1b      	lsrs	r3, r3, #28
 8001aac:	f003 0307 	and.w	r3, r3, #7
 8001ab0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	019a      	lsls	r2, r3, #6
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	041b      	lsls	r3, r3, #16
 8001abc:	431a      	orrs	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	061b      	lsls	r3, r3, #24
 8001ac4:	431a      	orrs	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	071b      	lsls	r3, r3, #28
 8001aca:	4944      	ldr	r1, [pc, #272]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001acc:	4313      	orrs	r3, r2
 8001ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001ad2:	4b42      	ldr	r3, [pc, #264]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001ad4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ad8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	021b      	lsls	r3, r3, #8
 8001ae4:	493d      	ldr	r1, [pc, #244]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d022      	beq.n	8001b3e <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001afc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001b00:	d11d      	bne.n	8001b3e <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001b02:	4b36      	ldr	r3, [pc, #216]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b08:	0e1b      	lsrs	r3, r3, #24
 8001b0a:	f003 030f 	and.w	r3, r3, #15
 8001b0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001b10:	4b32      	ldr	r3, [pc, #200]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b16:	0f1b      	lsrs	r3, r3, #28
 8001b18:	f003 0307 	and.w	r3, r3, #7
 8001b1c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	019a      	lsls	r2, r3, #6
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a1b      	ldr	r3, [r3, #32]
 8001b28:	041b      	lsls	r3, r3, #16
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	061b      	lsls	r3, r3, #24
 8001b30:	431a      	orrs	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	071b      	lsls	r3, r3, #28
 8001b36:	4929      	ldr	r1, [pc, #164]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0308 	and.w	r3, r3, #8
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d028      	beq.n	8001b9c <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001b4a:	4b24      	ldr	r3, [pc, #144]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b50:	0e1b      	lsrs	r3, r3, #24
 8001b52:	f003 030f 	and.w	r3, r3, #15
 8001b56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001b58:	4b20      	ldr	r3, [pc, #128]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b5e:	0c1b      	lsrs	r3, r3, #16
 8001b60:	f003 0303 	and.w	r3, r3, #3
 8001b64:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	019a      	lsls	r2, r3, #6
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	041b      	lsls	r3, r3, #16
 8001b70:	431a      	orrs	r2, r3
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	061b      	lsls	r3, r3, #24
 8001b76:	431a      	orrs	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	69db      	ldr	r3, [r3, #28]
 8001b7c:	071b      	lsls	r3, r3, #28
 8001b7e:	4917      	ldr	r1, [pc, #92]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001b80:	4313      	orrs	r3, r2
 8001b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001b86:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b94:	4911      	ldr	r1, [pc, #68]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001b96:	4313      	orrs	r3, r2
 8001b98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a0e      	ldr	r2, [pc, #56]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ba8:	f7fe fd24 	bl	80005f4 <HAL_GetTick>
 8001bac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001bb0:	f7fe fd20 	bl	80005f4 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b64      	cmp	r3, #100	; 0x64
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e007      	b.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001bc2:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001bca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bce:	d1ef      	bne.n	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3720      	adds	r7, #32
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40023800 	.word	0x40023800

08001be0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e01d      	b.n	8001c2e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d106      	bne.n	8001c0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f815 	bl	8001c36 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2202      	movs	r2, #2
 8001c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3304      	adds	r3, #4
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4610      	mov	r0, r2
 8001c20:	f000 f986 	bl	8001f30 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
	...

08001c4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	68da      	ldr	r2, [r3, #12]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f042 0201 	orr.w	r2, r2, #1
 8001c62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <HAL_TIM_Base_Start_IT+0x50>)
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2b06      	cmp	r3, #6
 8001c74:	d00b      	beq.n	8001c8e <HAL_TIM_Base_Start_IT+0x42>
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c7c:	d007      	beq.n	8001c8e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f042 0201 	orr.w	r2, r2, #1
 8001c8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	00010007 	.word	0x00010007

08001ca0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d122      	bne.n	8001cfc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d11b      	bne.n	8001cfc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f06f 0202 	mvn.w	r2, #2
 8001ccc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	f003 0303 	and.w	r3, r3, #3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 f905 	bl	8001ef2 <HAL_TIM_IC_CaptureCallback>
 8001ce8:	e005      	b.n	8001cf6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 f8f7 	bl	8001ede <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 f908 	bl	8001f06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	f003 0304 	and.w	r3, r3, #4
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	d122      	bne.n	8001d50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	f003 0304 	and.w	r3, r3, #4
 8001d14:	2b04      	cmp	r3, #4
 8001d16:	d11b      	bne.n	8001d50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f06f 0204 	mvn.w	r2, #4
 8001d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2202      	movs	r2, #2
 8001d26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 f8db 	bl	8001ef2 <HAL_TIM_IC_CaptureCallback>
 8001d3c:	e005      	b.n	8001d4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 f8cd 	bl	8001ede <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 f8de 	bl	8001f06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	f003 0308 	and.w	r3, r3, #8
 8001d5a:	2b08      	cmp	r3, #8
 8001d5c:	d122      	bne.n	8001da4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	f003 0308 	and.w	r3, r3, #8
 8001d68:	2b08      	cmp	r3, #8
 8001d6a:	d11b      	bne.n	8001da4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f06f 0208 	mvn.w	r2, #8
 8001d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2204      	movs	r2, #4
 8001d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	f003 0303 	and.w	r3, r3, #3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f8b1 	bl	8001ef2 <HAL_TIM_IC_CaptureCallback>
 8001d90:	e005      	b.n	8001d9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 f8a3 	bl	8001ede <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 f8b4 	bl	8001f06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	f003 0310 	and.w	r3, r3, #16
 8001dae:	2b10      	cmp	r3, #16
 8001db0:	d122      	bne.n	8001df8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	f003 0310 	and.w	r3, r3, #16
 8001dbc:	2b10      	cmp	r3, #16
 8001dbe:	d11b      	bne.n	8001df8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f06f 0210 	mvn.w	r2, #16
 8001dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2208      	movs	r2, #8
 8001dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f887 	bl	8001ef2 <HAL_TIM_IC_CaptureCallback>
 8001de4:	e005      	b.n	8001df2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f879 	bl	8001ede <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 f88a 	bl	8001f06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d10e      	bne.n	8001e24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d107      	bne.n	8001e24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f06f 0201 	mvn.w	r2, #1
 8001e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f002 f96e 	bl	8004100 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e2e:	2b80      	cmp	r3, #128	; 0x80
 8001e30:	d10e      	bne.n	8001e50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e3c:	2b80      	cmp	r3, #128	; 0x80
 8001e3e:	d107      	bne.n	8001e50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 f91a 	bl	8002084 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e5e:	d10e      	bne.n	8001e7e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e6a:	2b80      	cmp	r3, #128	; 0x80
 8001e6c:	d107      	bne.n	8001e7e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001e76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f000 f90d 	bl	8002098 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e88:	2b40      	cmp	r3, #64	; 0x40
 8001e8a:	d10e      	bne.n	8001eaa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e96:	2b40      	cmp	r3, #64	; 0x40
 8001e98:	d107      	bne.n	8001eaa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ea2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 f838 	bl	8001f1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	f003 0320 	and.w	r3, r3, #32
 8001eb4:	2b20      	cmp	r3, #32
 8001eb6:	d10e      	bne.n	8001ed6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	f003 0320 	and.w	r3, r3, #32
 8001ec2:	2b20      	cmp	r3, #32
 8001ec4:	d107      	bne.n	8001ed6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f06f 0220 	mvn.w	r2, #32
 8001ece:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f000 f8cd 	bl	8002070 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b083      	sub	sp, #12
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f06:	b480      	push	{r7}
 8001f08:	b083      	sub	sp, #12
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
	...

08001f30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a40      	ldr	r2, [pc, #256]	; (8002044 <TIM_Base_SetConfig+0x114>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d013      	beq.n	8001f70 <TIM_Base_SetConfig+0x40>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f4e:	d00f      	beq.n	8001f70 <TIM_Base_SetConfig+0x40>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a3d      	ldr	r2, [pc, #244]	; (8002048 <TIM_Base_SetConfig+0x118>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d00b      	beq.n	8001f70 <TIM_Base_SetConfig+0x40>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a3c      	ldr	r2, [pc, #240]	; (800204c <TIM_Base_SetConfig+0x11c>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d007      	beq.n	8001f70 <TIM_Base_SetConfig+0x40>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a3b      	ldr	r2, [pc, #236]	; (8002050 <TIM_Base_SetConfig+0x120>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d003      	beq.n	8001f70 <TIM_Base_SetConfig+0x40>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a3a      	ldr	r2, [pc, #232]	; (8002054 <TIM_Base_SetConfig+0x124>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d108      	bne.n	8001f82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a2f      	ldr	r2, [pc, #188]	; (8002044 <TIM_Base_SetConfig+0x114>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d02b      	beq.n	8001fe2 <TIM_Base_SetConfig+0xb2>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f90:	d027      	beq.n	8001fe2 <TIM_Base_SetConfig+0xb2>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a2c      	ldr	r2, [pc, #176]	; (8002048 <TIM_Base_SetConfig+0x118>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d023      	beq.n	8001fe2 <TIM_Base_SetConfig+0xb2>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a2b      	ldr	r2, [pc, #172]	; (800204c <TIM_Base_SetConfig+0x11c>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d01f      	beq.n	8001fe2 <TIM_Base_SetConfig+0xb2>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a2a      	ldr	r2, [pc, #168]	; (8002050 <TIM_Base_SetConfig+0x120>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d01b      	beq.n	8001fe2 <TIM_Base_SetConfig+0xb2>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a29      	ldr	r2, [pc, #164]	; (8002054 <TIM_Base_SetConfig+0x124>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d017      	beq.n	8001fe2 <TIM_Base_SetConfig+0xb2>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a28      	ldr	r2, [pc, #160]	; (8002058 <TIM_Base_SetConfig+0x128>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d013      	beq.n	8001fe2 <TIM_Base_SetConfig+0xb2>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a27      	ldr	r2, [pc, #156]	; (800205c <TIM_Base_SetConfig+0x12c>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d00f      	beq.n	8001fe2 <TIM_Base_SetConfig+0xb2>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a26      	ldr	r2, [pc, #152]	; (8002060 <TIM_Base_SetConfig+0x130>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d00b      	beq.n	8001fe2 <TIM_Base_SetConfig+0xb2>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a25      	ldr	r2, [pc, #148]	; (8002064 <TIM_Base_SetConfig+0x134>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d007      	beq.n	8001fe2 <TIM_Base_SetConfig+0xb2>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a24      	ldr	r2, [pc, #144]	; (8002068 <TIM_Base_SetConfig+0x138>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d003      	beq.n	8001fe2 <TIM_Base_SetConfig+0xb2>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a23      	ldr	r2, [pc, #140]	; (800206c <TIM_Base_SetConfig+0x13c>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d108      	bne.n	8001ff4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fe8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	689a      	ldr	r2, [r3, #8]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a0a      	ldr	r2, [pc, #40]	; (8002044 <TIM_Base_SetConfig+0x114>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d003      	beq.n	8002028 <TIM_Base_SetConfig+0xf8>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a0c      	ldr	r2, [pc, #48]	; (8002054 <TIM_Base_SetConfig+0x124>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d103      	bne.n	8002030 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	691a      	ldr	r2, [r3, #16]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	615a      	str	r2, [r3, #20]
}
 8002036:	bf00      	nop
 8002038:	3714      	adds	r7, #20
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	40010000 	.word	0x40010000
 8002048:	40000400 	.word	0x40000400
 800204c:	40000800 	.word	0x40000800
 8002050:	40000c00 	.word	0x40000c00
 8002054:	40010400 	.word	0x40010400
 8002058:	40014000 	.word	0x40014000
 800205c:	40014400 	.word	0x40014400
 8002060:	40014800 	.word	0x40014800
 8002064:	40001800 	.word	0x40001800
 8002068:	40001c00 	.word	0x40001c00
 800206c:	40002000 	.word	0x40002000

08002070 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e040      	b.n	8002140 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d106      	bne.n	80020d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f002 f858 	bl	8004184 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2224      	movs	r2, #36	; 0x24
 80020d8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f022 0201 	bic.w	r2, r2, #1
 80020e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 f8be 	bl	800226c <UART_SetConfig>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d101      	bne.n	80020fa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e022      	b.n	8002140 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d002      	beq.n	8002108 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 fb56 	bl	80027b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	685a      	ldr	r2, [r3, #4]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002116:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689a      	ldr	r2, [r3, #8]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002126:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f042 0201 	orr.w	r2, r2, #1
 8002136:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 fbdd 	bl	80028f8 <UART_CheckIdleState>
 800213e:	4603      	mov	r3, r0
}
 8002140:	4618      	mov	r0, r3
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b08a      	sub	sp, #40	; 0x28
 800214c:	af02      	add	r7, sp, #8
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	603b      	str	r3, [r7, #0]
 8002154:	4613      	mov	r3, r2
 8002156:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800215c:	2b20      	cmp	r3, #32
 800215e:	d17f      	bne.n	8002260 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d002      	beq.n	800216c <HAL_UART_Transmit+0x24>
 8002166:	88fb      	ldrh	r3, [r7, #6]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d101      	bne.n	8002170 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e078      	b.n	8002262 <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002176:	2b01      	cmp	r3, #1
 8002178:	d101      	bne.n	800217e <HAL_UART_Transmit+0x36>
 800217a:	2302      	movs	r3, #2
 800217c:	e071      	b.n	8002262 <HAL_UART_Transmit+0x11a>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2201      	movs	r2, #1
 8002182:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2200      	movs	r2, #0
 800218a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2221      	movs	r2, #33	; 0x21
 8002190:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002192:	f7fe fa2f 	bl	80005f4 <HAL_GetTick>
 8002196:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	88fa      	ldrh	r2, [r7, #6]
 800219c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	88fa      	ldrh	r2, [r7, #6]
 80021a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021b0:	d108      	bne.n	80021c4 <HAL_UART_Transmit+0x7c>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d104      	bne.n	80021c4 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	61bb      	str	r3, [r7, #24]
 80021c2:	e003      	b.n	80021cc <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80021cc:	e02c      	b.n	8002228 <HAL_UART_Transmit+0xe0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	9300      	str	r3, [sp, #0]
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	2200      	movs	r2, #0
 80021d6:	2180      	movs	r1, #128	; 0x80
 80021d8:	68f8      	ldr	r0, [r7, #12]
 80021da:	f000 fbbc 	bl	8002956 <UART_WaitOnFlagUntilTimeout>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <HAL_UART_Transmit+0xa0>
      {
        return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e03c      	b.n	8002262 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10b      	bne.n	8002206 <HAL_UART_Transmit+0xbe>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	881b      	ldrh	r3, [r3, #0]
 80021f2:	461a      	mov	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021fc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	3302      	adds	r3, #2
 8002202:	61bb      	str	r3, [r7, #24]
 8002204:	e007      	b.n	8002216 <HAL_UART_Transmit+0xce>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	781a      	ldrb	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	3301      	adds	r3, #1
 8002214:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800221c:	b29b      	uxth	r3, r3
 800221e:	3b01      	subs	r3, #1
 8002220:	b29a      	uxth	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800222e:	b29b      	uxth	r3, r3
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1cc      	bne.n	80021ce <HAL_UART_Transmit+0x86>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	2200      	movs	r2, #0
 800223c:	2140      	movs	r1, #64	; 0x40
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	f000 fb89 	bl	8002956 <UART_WaitOnFlagUntilTimeout>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <HAL_UART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e009      	b.n	8002262 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2220      	movs	r2, #32
 8002252:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 800225c:	2300      	movs	r3, #0
 800225e:	e000      	b.n	8002262 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8002260:	2302      	movs	r3, #2
  }
}
 8002262:	4618      	mov	r0, r3
 8002264:	3720      	adds	r7, #32
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b088      	sub	sp, #32
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002274:	2300      	movs	r3, #0
 8002276:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002278:	2300      	movs	r3, #0
 800227a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	431a      	orrs	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	431a      	orrs	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	69db      	ldr	r3, [r3, #28]
 8002290:	4313      	orrs	r3, r2
 8002292:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	4bb1      	ldr	r3, [pc, #708]	; (8002560 <UART_SetConfig+0x2f4>)
 800229c:	4013      	ands	r3, r2
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	6812      	ldr	r2, [r2, #0]
 80022a2:	6939      	ldr	r1, [r7, #16]
 80022a4:	430b      	orrs	r3, r1
 80022a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	68da      	ldr	r2, [r3, #12]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	430a      	orrs	r2, r1
 80022bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	430a      	orrs	r2, r1
 80022e0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a9f      	ldr	r2, [pc, #636]	; (8002564 <UART_SetConfig+0x2f8>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d121      	bne.n	8002330 <UART_SetConfig+0xc4>
 80022ec:	4b9e      	ldr	r3, [pc, #632]	; (8002568 <UART_SetConfig+0x2fc>)
 80022ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f2:	f003 0303 	and.w	r3, r3, #3
 80022f6:	2b03      	cmp	r3, #3
 80022f8:	d816      	bhi.n	8002328 <UART_SetConfig+0xbc>
 80022fa:	a201      	add	r2, pc, #4	; (adr r2, 8002300 <UART_SetConfig+0x94>)
 80022fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002300:	08002311 	.word	0x08002311
 8002304:	0800231d 	.word	0x0800231d
 8002308:	08002317 	.word	0x08002317
 800230c:	08002323 	.word	0x08002323
 8002310:	2301      	movs	r3, #1
 8002312:	77fb      	strb	r3, [r7, #31]
 8002314:	e151      	b.n	80025ba <UART_SetConfig+0x34e>
 8002316:	2302      	movs	r3, #2
 8002318:	77fb      	strb	r3, [r7, #31]
 800231a:	e14e      	b.n	80025ba <UART_SetConfig+0x34e>
 800231c:	2304      	movs	r3, #4
 800231e:	77fb      	strb	r3, [r7, #31]
 8002320:	e14b      	b.n	80025ba <UART_SetConfig+0x34e>
 8002322:	2308      	movs	r3, #8
 8002324:	77fb      	strb	r3, [r7, #31]
 8002326:	e148      	b.n	80025ba <UART_SetConfig+0x34e>
 8002328:	2310      	movs	r3, #16
 800232a:	77fb      	strb	r3, [r7, #31]
 800232c:	bf00      	nop
 800232e:	e144      	b.n	80025ba <UART_SetConfig+0x34e>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a8d      	ldr	r2, [pc, #564]	; (800256c <UART_SetConfig+0x300>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d134      	bne.n	80023a4 <UART_SetConfig+0x138>
 800233a:	4b8b      	ldr	r3, [pc, #556]	; (8002568 <UART_SetConfig+0x2fc>)
 800233c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002340:	f003 030c 	and.w	r3, r3, #12
 8002344:	2b0c      	cmp	r3, #12
 8002346:	d829      	bhi.n	800239c <UART_SetConfig+0x130>
 8002348:	a201      	add	r2, pc, #4	; (adr r2, 8002350 <UART_SetConfig+0xe4>)
 800234a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800234e:	bf00      	nop
 8002350:	08002385 	.word	0x08002385
 8002354:	0800239d 	.word	0x0800239d
 8002358:	0800239d 	.word	0x0800239d
 800235c:	0800239d 	.word	0x0800239d
 8002360:	08002391 	.word	0x08002391
 8002364:	0800239d 	.word	0x0800239d
 8002368:	0800239d 	.word	0x0800239d
 800236c:	0800239d 	.word	0x0800239d
 8002370:	0800238b 	.word	0x0800238b
 8002374:	0800239d 	.word	0x0800239d
 8002378:	0800239d 	.word	0x0800239d
 800237c:	0800239d 	.word	0x0800239d
 8002380:	08002397 	.word	0x08002397
 8002384:	2300      	movs	r3, #0
 8002386:	77fb      	strb	r3, [r7, #31]
 8002388:	e117      	b.n	80025ba <UART_SetConfig+0x34e>
 800238a:	2302      	movs	r3, #2
 800238c:	77fb      	strb	r3, [r7, #31]
 800238e:	e114      	b.n	80025ba <UART_SetConfig+0x34e>
 8002390:	2304      	movs	r3, #4
 8002392:	77fb      	strb	r3, [r7, #31]
 8002394:	e111      	b.n	80025ba <UART_SetConfig+0x34e>
 8002396:	2308      	movs	r3, #8
 8002398:	77fb      	strb	r3, [r7, #31]
 800239a:	e10e      	b.n	80025ba <UART_SetConfig+0x34e>
 800239c:	2310      	movs	r3, #16
 800239e:	77fb      	strb	r3, [r7, #31]
 80023a0:	bf00      	nop
 80023a2:	e10a      	b.n	80025ba <UART_SetConfig+0x34e>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a71      	ldr	r2, [pc, #452]	; (8002570 <UART_SetConfig+0x304>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d120      	bne.n	80023f0 <UART_SetConfig+0x184>
 80023ae:	4b6e      	ldr	r3, [pc, #440]	; (8002568 <UART_SetConfig+0x2fc>)
 80023b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80023b8:	2b10      	cmp	r3, #16
 80023ba:	d00f      	beq.n	80023dc <UART_SetConfig+0x170>
 80023bc:	2b10      	cmp	r3, #16
 80023be:	d802      	bhi.n	80023c6 <UART_SetConfig+0x15a>
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d005      	beq.n	80023d0 <UART_SetConfig+0x164>
 80023c4:	e010      	b.n	80023e8 <UART_SetConfig+0x17c>
 80023c6:	2b20      	cmp	r3, #32
 80023c8:	d005      	beq.n	80023d6 <UART_SetConfig+0x16a>
 80023ca:	2b30      	cmp	r3, #48	; 0x30
 80023cc:	d009      	beq.n	80023e2 <UART_SetConfig+0x176>
 80023ce:	e00b      	b.n	80023e8 <UART_SetConfig+0x17c>
 80023d0:	2300      	movs	r3, #0
 80023d2:	77fb      	strb	r3, [r7, #31]
 80023d4:	e0f1      	b.n	80025ba <UART_SetConfig+0x34e>
 80023d6:	2302      	movs	r3, #2
 80023d8:	77fb      	strb	r3, [r7, #31]
 80023da:	e0ee      	b.n	80025ba <UART_SetConfig+0x34e>
 80023dc:	2304      	movs	r3, #4
 80023de:	77fb      	strb	r3, [r7, #31]
 80023e0:	e0eb      	b.n	80025ba <UART_SetConfig+0x34e>
 80023e2:	2308      	movs	r3, #8
 80023e4:	77fb      	strb	r3, [r7, #31]
 80023e6:	e0e8      	b.n	80025ba <UART_SetConfig+0x34e>
 80023e8:	2310      	movs	r3, #16
 80023ea:	77fb      	strb	r3, [r7, #31]
 80023ec:	bf00      	nop
 80023ee:	e0e4      	b.n	80025ba <UART_SetConfig+0x34e>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a5f      	ldr	r2, [pc, #380]	; (8002574 <UART_SetConfig+0x308>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d120      	bne.n	800243c <UART_SetConfig+0x1d0>
 80023fa:	4b5b      	ldr	r3, [pc, #364]	; (8002568 <UART_SetConfig+0x2fc>)
 80023fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002400:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002404:	2b40      	cmp	r3, #64	; 0x40
 8002406:	d00f      	beq.n	8002428 <UART_SetConfig+0x1bc>
 8002408:	2b40      	cmp	r3, #64	; 0x40
 800240a:	d802      	bhi.n	8002412 <UART_SetConfig+0x1a6>
 800240c:	2b00      	cmp	r3, #0
 800240e:	d005      	beq.n	800241c <UART_SetConfig+0x1b0>
 8002410:	e010      	b.n	8002434 <UART_SetConfig+0x1c8>
 8002412:	2b80      	cmp	r3, #128	; 0x80
 8002414:	d005      	beq.n	8002422 <UART_SetConfig+0x1b6>
 8002416:	2bc0      	cmp	r3, #192	; 0xc0
 8002418:	d009      	beq.n	800242e <UART_SetConfig+0x1c2>
 800241a:	e00b      	b.n	8002434 <UART_SetConfig+0x1c8>
 800241c:	2300      	movs	r3, #0
 800241e:	77fb      	strb	r3, [r7, #31]
 8002420:	e0cb      	b.n	80025ba <UART_SetConfig+0x34e>
 8002422:	2302      	movs	r3, #2
 8002424:	77fb      	strb	r3, [r7, #31]
 8002426:	e0c8      	b.n	80025ba <UART_SetConfig+0x34e>
 8002428:	2304      	movs	r3, #4
 800242a:	77fb      	strb	r3, [r7, #31]
 800242c:	e0c5      	b.n	80025ba <UART_SetConfig+0x34e>
 800242e:	2308      	movs	r3, #8
 8002430:	77fb      	strb	r3, [r7, #31]
 8002432:	e0c2      	b.n	80025ba <UART_SetConfig+0x34e>
 8002434:	2310      	movs	r3, #16
 8002436:	77fb      	strb	r3, [r7, #31]
 8002438:	bf00      	nop
 800243a:	e0be      	b.n	80025ba <UART_SetConfig+0x34e>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a4d      	ldr	r2, [pc, #308]	; (8002578 <UART_SetConfig+0x30c>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d124      	bne.n	8002490 <UART_SetConfig+0x224>
 8002446:	4b48      	ldr	r3, [pc, #288]	; (8002568 <UART_SetConfig+0x2fc>)
 8002448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800244c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002450:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002454:	d012      	beq.n	800247c <UART_SetConfig+0x210>
 8002456:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800245a:	d802      	bhi.n	8002462 <UART_SetConfig+0x1f6>
 800245c:	2b00      	cmp	r3, #0
 800245e:	d007      	beq.n	8002470 <UART_SetConfig+0x204>
 8002460:	e012      	b.n	8002488 <UART_SetConfig+0x21c>
 8002462:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002466:	d006      	beq.n	8002476 <UART_SetConfig+0x20a>
 8002468:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800246c:	d009      	beq.n	8002482 <UART_SetConfig+0x216>
 800246e:	e00b      	b.n	8002488 <UART_SetConfig+0x21c>
 8002470:	2300      	movs	r3, #0
 8002472:	77fb      	strb	r3, [r7, #31]
 8002474:	e0a1      	b.n	80025ba <UART_SetConfig+0x34e>
 8002476:	2302      	movs	r3, #2
 8002478:	77fb      	strb	r3, [r7, #31]
 800247a:	e09e      	b.n	80025ba <UART_SetConfig+0x34e>
 800247c:	2304      	movs	r3, #4
 800247e:	77fb      	strb	r3, [r7, #31]
 8002480:	e09b      	b.n	80025ba <UART_SetConfig+0x34e>
 8002482:	2308      	movs	r3, #8
 8002484:	77fb      	strb	r3, [r7, #31]
 8002486:	e098      	b.n	80025ba <UART_SetConfig+0x34e>
 8002488:	2310      	movs	r3, #16
 800248a:	77fb      	strb	r3, [r7, #31]
 800248c:	bf00      	nop
 800248e:	e094      	b.n	80025ba <UART_SetConfig+0x34e>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a39      	ldr	r2, [pc, #228]	; (800257c <UART_SetConfig+0x310>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d124      	bne.n	80024e4 <UART_SetConfig+0x278>
 800249a:	4b33      	ldr	r3, [pc, #204]	; (8002568 <UART_SetConfig+0x2fc>)
 800249c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80024a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024a8:	d012      	beq.n	80024d0 <UART_SetConfig+0x264>
 80024aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024ae:	d802      	bhi.n	80024b6 <UART_SetConfig+0x24a>
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d007      	beq.n	80024c4 <UART_SetConfig+0x258>
 80024b4:	e012      	b.n	80024dc <UART_SetConfig+0x270>
 80024b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024ba:	d006      	beq.n	80024ca <UART_SetConfig+0x25e>
 80024bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80024c0:	d009      	beq.n	80024d6 <UART_SetConfig+0x26a>
 80024c2:	e00b      	b.n	80024dc <UART_SetConfig+0x270>
 80024c4:	2301      	movs	r3, #1
 80024c6:	77fb      	strb	r3, [r7, #31]
 80024c8:	e077      	b.n	80025ba <UART_SetConfig+0x34e>
 80024ca:	2302      	movs	r3, #2
 80024cc:	77fb      	strb	r3, [r7, #31]
 80024ce:	e074      	b.n	80025ba <UART_SetConfig+0x34e>
 80024d0:	2304      	movs	r3, #4
 80024d2:	77fb      	strb	r3, [r7, #31]
 80024d4:	e071      	b.n	80025ba <UART_SetConfig+0x34e>
 80024d6:	2308      	movs	r3, #8
 80024d8:	77fb      	strb	r3, [r7, #31]
 80024da:	e06e      	b.n	80025ba <UART_SetConfig+0x34e>
 80024dc:	2310      	movs	r3, #16
 80024de:	77fb      	strb	r3, [r7, #31]
 80024e0:	bf00      	nop
 80024e2:	e06a      	b.n	80025ba <UART_SetConfig+0x34e>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a25      	ldr	r2, [pc, #148]	; (8002580 <UART_SetConfig+0x314>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d124      	bne.n	8002538 <UART_SetConfig+0x2cc>
 80024ee:	4b1e      	ldr	r3, [pc, #120]	; (8002568 <UART_SetConfig+0x2fc>)
 80024f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80024f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024fc:	d012      	beq.n	8002524 <UART_SetConfig+0x2b8>
 80024fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002502:	d802      	bhi.n	800250a <UART_SetConfig+0x29e>
 8002504:	2b00      	cmp	r3, #0
 8002506:	d007      	beq.n	8002518 <UART_SetConfig+0x2ac>
 8002508:	e012      	b.n	8002530 <UART_SetConfig+0x2c4>
 800250a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800250e:	d006      	beq.n	800251e <UART_SetConfig+0x2b2>
 8002510:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002514:	d009      	beq.n	800252a <UART_SetConfig+0x2be>
 8002516:	e00b      	b.n	8002530 <UART_SetConfig+0x2c4>
 8002518:	2300      	movs	r3, #0
 800251a:	77fb      	strb	r3, [r7, #31]
 800251c:	e04d      	b.n	80025ba <UART_SetConfig+0x34e>
 800251e:	2302      	movs	r3, #2
 8002520:	77fb      	strb	r3, [r7, #31]
 8002522:	e04a      	b.n	80025ba <UART_SetConfig+0x34e>
 8002524:	2304      	movs	r3, #4
 8002526:	77fb      	strb	r3, [r7, #31]
 8002528:	e047      	b.n	80025ba <UART_SetConfig+0x34e>
 800252a:	2308      	movs	r3, #8
 800252c:	77fb      	strb	r3, [r7, #31]
 800252e:	e044      	b.n	80025ba <UART_SetConfig+0x34e>
 8002530:	2310      	movs	r3, #16
 8002532:	77fb      	strb	r3, [r7, #31]
 8002534:	bf00      	nop
 8002536:	e040      	b.n	80025ba <UART_SetConfig+0x34e>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a11      	ldr	r2, [pc, #68]	; (8002584 <UART_SetConfig+0x318>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d139      	bne.n	80025b6 <UART_SetConfig+0x34a>
 8002542:	4b09      	ldr	r3, [pc, #36]	; (8002568 <UART_SetConfig+0x2fc>)
 8002544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002548:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800254c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002550:	d027      	beq.n	80025a2 <UART_SetConfig+0x336>
 8002552:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002556:	d817      	bhi.n	8002588 <UART_SetConfig+0x31c>
 8002558:	2b00      	cmp	r3, #0
 800255a:	d01c      	beq.n	8002596 <UART_SetConfig+0x32a>
 800255c:	e027      	b.n	80025ae <UART_SetConfig+0x342>
 800255e:	bf00      	nop
 8002560:	efff69f3 	.word	0xefff69f3
 8002564:	40011000 	.word	0x40011000
 8002568:	40023800 	.word	0x40023800
 800256c:	40004400 	.word	0x40004400
 8002570:	40004800 	.word	0x40004800
 8002574:	40004c00 	.word	0x40004c00
 8002578:	40005000 	.word	0x40005000
 800257c:	40011400 	.word	0x40011400
 8002580:	40007800 	.word	0x40007800
 8002584:	40007c00 	.word	0x40007c00
 8002588:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800258c:	d006      	beq.n	800259c <UART_SetConfig+0x330>
 800258e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002592:	d009      	beq.n	80025a8 <UART_SetConfig+0x33c>
 8002594:	e00b      	b.n	80025ae <UART_SetConfig+0x342>
 8002596:	2300      	movs	r3, #0
 8002598:	77fb      	strb	r3, [r7, #31]
 800259a:	e00e      	b.n	80025ba <UART_SetConfig+0x34e>
 800259c:	2302      	movs	r3, #2
 800259e:	77fb      	strb	r3, [r7, #31]
 80025a0:	e00b      	b.n	80025ba <UART_SetConfig+0x34e>
 80025a2:	2304      	movs	r3, #4
 80025a4:	77fb      	strb	r3, [r7, #31]
 80025a6:	e008      	b.n	80025ba <UART_SetConfig+0x34e>
 80025a8:	2308      	movs	r3, #8
 80025aa:	77fb      	strb	r3, [r7, #31]
 80025ac:	e005      	b.n	80025ba <UART_SetConfig+0x34e>
 80025ae:	2310      	movs	r3, #16
 80025b0:	77fb      	strb	r3, [r7, #31]
 80025b2:	bf00      	nop
 80025b4:	e001      	b.n	80025ba <UART_SetConfig+0x34e>
 80025b6:	2310      	movs	r3, #16
 80025b8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	69db      	ldr	r3, [r3, #28]
 80025be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025c2:	d17c      	bne.n	80026be <UART_SetConfig+0x452>
  {
    switch (clocksource)
 80025c4:	7ffb      	ldrb	r3, [r7, #31]
 80025c6:	2b08      	cmp	r3, #8
 80025c8:	d859      	bhi.n	800267e <UART_SetConfig+0x412>
 80025ca:	a201      	add	r2, pc, #4	; (adr r2, 80025d0 <UART_SetConfig+0x364>)
 80025cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025d0:	080025f5 	.word	0x080025f5
 80025d4:	08002613 	.word	0x08002613
 80025d8:	08002631 	.word	0x08002631
 80025dc:	0800267f 	.word	0x0800267f
 80025e0:	08002649 	.word	0x08002649
 80025e4:	0800267f 	.word	0x0800267f
 80025e8:	0800267f 	.word	0x0800267f
 80025ec:	0800267f 	.word	0x0800267f
 80025f0:	08002667 	.word	0x08002667
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80025f4:	f7fe feac 	bl	8001350 <HAL_RCC_GetPCLK1Freq>
 80025f8:	4603      	mov	r3, r0
 80025fa:	005a      	lsls	r2, r3, #1
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	085b      	lsrs	r3, r3, #1
 8002602:	441a      	add	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	fbb2 f3f3 	udiv	r3, r2, r3
 800260c:	b29b      	uxth	r3, r3
 800260e:	61bb      	str	r3, [r7, #24]
        break;
 8002610:	e038      	b.n	8002684 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002612:	f7fe feb1 	bl	8001378 <HAL_RCC_GetPCLK2Freq>
 8002616:	4603      	mov	r3, r0
 8002618:	005a      	lsls	r2, r3, #1
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	085b      	lsrs	r3, r3, #1
 8002620:	441a      	add	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	fbb2 f3f3 	udiv	r3, r2, r3
 800262a:	b29b      	uxth	r3, r3
 800262c:	61bb      	str	r3, [r7, #24]
        break;
 800262e:	e029      	b.n	8002684 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	085a      	lsrs	r2, r3, #1
 8002636:	4b5d      	ldr	r3, [pc, #372]	; (80027ac <UART_SetConfig+0x540>)
 8002638:	4413      	add	r3, r2
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6852      	ldr	r2, [r2, #4]
 800263e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002642:	b29b      	uxth	r3, r3
 8002644:	61bb      	str	r3, [r7, #24]
        break;
 8002646:	e01d      	b.n	8002684 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002648:	f7fe fdc4 	bl	80011d4 <HAL_RCC_GetSysClockFreq>
 800264c:	4603      	mov	r3, r0
 800264e:	005a      	lsls	r2, r3, #1
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	085b      	lsrs	r3, r3, #1
 8002656:	441a      	add	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002660:	b29b      	uxth	r3, r3
 8002662:	61bb      	str	r3, [r7, #24]
        break;
 8002664:	e00e      	b.n	8002684 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	085b      	lsrs	r3, r3, #1
 800266c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	fbb2 f3f3 	udiv	r3, r2, r3
 8002678:	b29b      	uxth	r3, r3
 800267a:	61bb      	str	r3, [r7, #24]
        break;
 800267c:	e002      	b.n	8002684 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	75fb      	strb	r3, [r7, #23]
        break;
 8002682:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	2b0f      	cmp	r3, #15
 8002688:	d916      	bls.n	80026b8 <UART_SetConfig+0x44c>
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002690:	d212      	bcs.n	80026b8 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	b29b      	uxth	r3, r3
 8002696:	f023 030f 	bic.w	r3, r3, #15
 800269a:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	085b      	lsrs	r3, r3, #1
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	f003 0307 	and.w	r3, r3, #7
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	89fb      	ldrh	r3, [r7, #14]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	89fa      	ldrh	r2, [r7, #14]
 80026b4:	60da      	str	r2, [r3, #12]
 80026b6:	e06e      	b.n	8002796 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	75fb      	strb	r3, [r7, #23]
 80026bc:	e06b      	b.n	8002796 <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 80026be:	7ffb      	ldrb	r3, [r7, #31]
 80026c0:	2b08      	cmp	r3, #8
 80026c2:	d857      	bhi.n	8002774 <UART_SetConfig+0x508>
 80026c4:	a201      	add	r2, pc, #4	; (adr r2, 80026cc <UART_SetConfig+0x460>)
 80026c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ca:	bf00      	nop
 80026cc:	080026f1 	.word	0x080026f1
 80026d0:	0800270d 	.word	0x0800270d
 80026d4:	08002729 	.word	0x08002729
 80026d8:	08002775 	.word	0x08002775
 80026dc:	08002741 	.word	0x08002741
 80026e0:	08002775 	.word	0x08002775
 80026e4:	08002775 	.word	0x08002775
 80026e8:	08002775 	.word	0x08002775
 80026ec:	0800275d 	.word	0x0800275d
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80026f0:	f7fe fe2e 	bl	8001350 <HAL_RCC_GetPCLK1Freq>
 80026f4:	4602      	mov	r2, r0
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	085b      	lsrs	r3, r3, #1
 80026fc:	441a      	add	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	fbb2 f3f3 	udiv	r3, r2, r3
 8002706:	b29b      	uxth	r3, r3
 8002708:	61bb      	str	r3, [r7, #24]
        break;
 800270a:	e036      	b.n	800277a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800270c:	f7fe fe34 	bl	8001378 <HAL_RCC_GetPCLK2Freq>
 8002710:	4602      	mov	r2, r0
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	085b      	lsrs	r3, r3, #1
 8002718:	441a      	add	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002722:	b29b      	uxth	r3, r3
 8002724:	61bb      	str	r3, [r7, #24]
        break;
 8002726:	e028      	b.n	800277a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	085a      	lsrs	r2, r3, #1
 800272e:	4b20      	ldr	r3, [pc, #128]	; (80027b0 <UART_SetConfig+0x544>)
 8002730:	4413      	add	r3, r2
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	6852      	ldr	r2, [r2, #4]
 8002736:	fbb3 f3f2 	udiv	r3, r3, r2
 800273a:	b29b      	uxth	r3, r3
 800273c:	61bb      	str	r3, [r7, #24]
        break;
 800273e:	e01c      	b.n	800277a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002740:	f7fe fd48 	bl	80011d4 <HAL_RCC_GetSysClockFreq>
 8002744:	4602      	mov	r2, r0
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	085b      	lsrs	r3, r3, #1
 800274c:	441a      	add	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	fbb2 f3f3 	udiv	r3, r2, r3
 8002756:	b29b      	uxth	r3, r3
 8002758:	61bb      	str	r3, [r7, #24]
        break;
 800275a:	e00e      	b.n	800277a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	085b      	lsrs	r3, r3, #1
 8002762:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	fbb2 f3f3 	udiv	r3, r2, r3
 800276e:	b29b      	uxth	r3, r3
 8002770:	61bb      	str	r3, [r7, #24]
        break;
 8002772:	e002      	b.n	800277a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	75fb      	strb	r3, [r7, #23]
        break;
 8002778:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	2b0f      	cmp	r3, #15
 800277e:	d908      	bls.n	8002792 <UART_SetConfig+0x526>
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002786:	d204      	bcs.n	8002792 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	60da      	str	r2, [r3, #12]
 8002790:	e001      	b.n	8002796 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80027a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3720      	adds	r7, #32
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	01e84800 	.word	0x01e84800
 80027b0:	00f42400 	.word	0x00f42400

080027b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00a      	beq.n	80027de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	430a      	orrs	r2, r1
 80027dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00a      	beq.n	8002800 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	430a      	orrs	r2, r1
 80027fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002804:	f003 0304 	and.w	r3, r3, #4
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00a      	beq.n	8002822 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	430a      	orrs	r2, r1
 8002820:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002826:	f003 0308 	and.w	r3, r3, #8
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00a      	beq.n	8002844 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	430a      	orrs	r2, r1
 8002842:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002848:	f003 0310 	and.w	r3, r3, #16
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00a      	beq.n	8002866 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	430a      	orrs	r2, r1
 8002864:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286a:	f003 0320 	and.w	r3, r3, #32
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00a      	beq.n	8002888 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	430a      	orrs	r2, r1
 8002886:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002890:	2b00      	cmp	r3, #0
 8002892:	d01a      	beq.n	80028ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028b2:	d10a      	bne.n	80028ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00a      	beq.n	80028ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	605a      	str	r2, [r3, #4]
  }
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af02      	add	r7, sp, #8
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002906:	f7fd fe75 	bl	80005f4 <HAL_GetTick>
 800290a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0308 	and.w	r3, r3, #8
 8002916:	2b08      	cmp	r3, #8
 8002918:	d10e      	bne.n	8002938 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800291a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800291e:	9300      	str	r3, [sp, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 f814 	bl	8002956 <UART_WaitOnFlagUntilTimeout>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e00a      	b.n	800294e <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2220      	movs	r2, #32
 800293c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2220      	movs	r2, #32
 8002942:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b084      	sub	sp, #16
 800295a:	af00      	add	r7, sp, #0
 800295c:	60f8      	str	r0, [r7, #12]
 800295e:	60b9      	str	r1, [r7, #8]
 8002960:	603b      	str	r3, [r7, #0]
 8002962:	4613      	mov	r3, r2
 8002964:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002966:	e02a      	b.n	80029be <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800296e:	d026      	beq.n	80029be <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002970:	f7fd fe40 	bl	80005f4 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	429a      	cmp	r2, r3
 800297e:	d302      	bcc.n	8002986 <UART_WaitOnFlagUntilTimeout+0x30>
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d11b      	bne.n	80029be <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002994:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 0201 	bic.w	r2, r2, #1
 80029a4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2220      	movs	r2, #32
 80029aa:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2220      	movs	r2, #32
 80029b0:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e00f      	b.n	80029de <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	69da      	ldr	r2, [r3, #28]
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	4013      	ands	r3, r2
 80029c8:	68ba      	ldr	r2, [r7, #8]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	bf0c      	ite	eq
 80029ce:	2301      	moveq	r3, #1
 80029d0:	2300      	movne	r3, #0
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	461a      	mov	r2, r3
 80029d6:	79fb      	ldrb	r3, [r7, #7]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d0c5      	beq.n	8002968 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80029e6:	b480      	push	{r7}
 80029e8:	b085      	sub	sp, #20
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	4603      	mov	r3, r0
 80029ee:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80029f0:	2300      	movs	r3, #0
 80029f2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80029f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029f8:	2b84      	cmp	r3, #132	; 0x84
 80029fa:	d005      	beq.n	8002a08 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80029fc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	4413      	add	r3, r2
 8002a04:	3303      	adds	r3, #3
 8002a06:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002a08:	68fb      	ldr	r3, [r7, #12]
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3714      	adds	r7, #20
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr

08002a16 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002a1a:	f000 feb7 	bl	800378c <vTaskStartScheduler>
  
  return osOK;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a26:	b087      	sub	sp, #28
 8002a28:	af02      	add	r7, sp, #8
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685c      	ldr	r4, [r3, #4]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a3a:	b29e      	uxth	r6, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff ffcf 	bl	80029e6 <makeFreeRtosPriority>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	f107 030c 	add.w	r3, r7, #12
 8002a4e:	9301      	str	r3, [sp, #4]
 8002a50:	9200      	str	r2, [sp, #0]
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	4632      	mov	r2, r6
 8002a56:	4629      	mov	r1, r5
 8002a58:	4620      	mov	r0, r4
 8002a5a:	f000 fca5 	bl	80033a8 <xTaskCreate>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d001      	beq.n	8002a68 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8002a64:	2300      	movs	r3, #0
 8002a66:	e000      	b.n	8002a6a <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8002a68:	68fb      	ldr	r3, [r7, #12]
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3714      	adds	r7, #20
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a72 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b082      	sub	sp, #8
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 fdc0 	bl	8003600 <vTaskDelete>
  return osOK;
 8002a80:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b084      	sub	sp, #16
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <osDelay+0x16>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	e000      	b.n	8002aa2 <osDelay+0x18>
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f000 fe3c 	bl	8003720 <vTaskDelay>
  
  return osOK;
 8002aa8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
	...

08002ab4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b08a      	sub	sp, #40	; 0x28
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002abc:	2300      	movs	r3, #0
 8002abe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002ac0:	f000 feae 	bl	8003820 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002ac4:	4b5a      	ldr	r3, [pc, #360]	; (8002c30 <pvPortMalloc+0x17c>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d101      	bne.n	8002ad0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002acc:	f000 f916 	bl	8002cfc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002ad0:	4b58      	ldr	r3, [pc, #352]	; (8002c34 <pvPortMalloc+0x180>)
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f040 8090 	bne.w	8002bfe <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d01e      	beq.n	8002b22 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8002ae4:	2208      	movs	r2, #8
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4413      	add	r3, r2
 8002aea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f003 0307 	and.w	r3, r3, #7
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d015      	beq.n	8002b22 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f023 0307 	bic.w	r3, r3, #7
 8002afc:	3308      	adds	r3, #8
 8002afe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00b      	beq.n	8002b22 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b0e:	b672      	cpsid	i
 8002b10:	f383 8811 	msr	BASEPRI, r3
 8002b14:	f3bf 8f6f 	isb	sy
 8002b18:	f3bf 8f4f 	dsb	sy
 8002b1c:	b662      	cpsie	i
 8002b1e:	617b      	str	r3, [r7, #20]
 8002b20:	e7fe      	b.n	8002b20 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d06a      	beq.n	8002bfe <pvPortMalloc+0x14a>
 8002b28:	4b43      	ldr	r3, [pc, #268]	; (8002c38 <pvPortMalloc+0x184>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d865      	bhi.n	8002bfe <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002b32:	4b42      	ldr	r3, [pc, #264]	; (8002c3c <pvPortMalloc+0x188>)
 8002b34:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002b36:	4b41      	ldr	r3, [pc, #260]	; (8002c3c <pvPortMalloc+0x188>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002b3c:	e004      	b.n	8002b48 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b40:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d903      	bls.n	8002b5a <pvPortMalloc+0xa6>
 8002b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1f1      	bne.n	8002b3e <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002b5a:	4b35      	ldr	r3, [pc, #212]	; (8002c30 <pvPortMalloc+0x17c>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d04c      	beq.n	8002bfe <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002b64:	6a3b      	ldr	r3, [r7, #32]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2208      	movs	r2, #8
 8002b6a:	4413      	add	r3, r2
 8002b6c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	6a3b      	ldr	r3, [r7, #32]
 8002b74:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	685a      	ldr	r2, [r3, #4]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	1ad2      	subs	r2, r2, r3
 8002b7e:	2308      	movs	r3, #8
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d920      	bls.n	8002bc8 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	f003 0307 	and.w	r3, r3, #7
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d00b      	beq.n	8002bb0 <pvPortMalloc+0xfc>
 8002b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b9c:	b672      	cpsid	i
 8002b9e:	f383 8811 	msr	BASEPRI, r3
 8002ba2:	f3bf 8f6f 	isb	sy
 8002ba6:	f3bf 8f4f 	dsb	sy
 8002baa:	b662      	cpsie	i
 8002bac:	613b      	str	r3, [r7, #16]
 8002bae:	e7fe      	b.n	8002bae <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	1ad2      	subs	r2, r2, r3
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002bc2:	69b8      	ldr	r0, [r7, #24]
 8002bc4:	f000 f8fc 	bl	8002dc0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002bc8:	4b1b      	ldr	r3, [pc, #108]	; (8002c38 <pvPortMalloc+0x184>)
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	4a19      	ldr	r2, [pc, #100]	; (8002c38 <pvPortMalloc+0x184>)
 8002bd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002bd6:	4b18      	ldr	r3, [pc, #96]	; (8002c38 <pvPortMalloc+0x184>)
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	4b19      	ldr	r3, [pc, #100]	; (8002c40 <pvPortMalloc+0x18c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d203      	bcs.n	8002bea <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002be2:	4b15      	ldr	r3, [pc, #84]	; (8002c38 <pvPortMalloc+0x184>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a16      	ldr	r2, [pc, #88]	; (8002c40 <pvPortMalloc+0x18c>)
 8002be8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bec:	685a      	ldr	r2, [r3, #4]
 8002bee:	4b11      	ldr	r3, [pc, #68]	; (8002c34 <pvPortMalloc+0x180>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002bfe:	f000 fe1d 	bl	800383c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00b      	beq.n	8002c24 <pvPortMalloc+0x170>
 8002c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c10:	b672      	cpsid	i
 8002c12:	f383 8811 	msr	BASEPRI, r3
 8002c16:	f3bf 8f6f 	isb	sy
 8002c1a:	f3bf 8f4f 	dsb	sy
 8002c1e:	b662      	cpsie	i
 8002c20:	60fb      	str	r3, [r7, #12]
 8002c22:	e7fe      	b.n	8002c22 <pvPortMalloc+0x16e>
	return pvReturn;
 8002c24:	69fb      	ldr	r3, [r7, #28]
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3728      	adds	r7, #40	; 0x28
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	20003c98 	.word	0x20003c98
 8002c34:	20003ca4 	.word	0x20003ca4
 8002c38:	20003c9c 	.word	0x20003c9c
 8002c3c:	20003c90 	.word	0x20003c90
 8002c40:	20003ca0 	.word	0x20003ca0

08002c44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d04a      	beq.n	8002cec <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002c56:	2308      	movs	r3, #8
 8002c58:	425b      	negs	r3, r3
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	685a      	ldr	r2, [r3, #4]
 8002c68:	4b22      	ldr	r3, [pc, #136]	; (8002cf4 <vPortFree+0xb0>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10b      	bne.n	8002c8a <vPortFree+0x46>
 8002c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c76:	b672      	cpsid	i
 8002c78:	f383 8811 	msr	BASEPRI, r3
 8002c7c:	f3bf 8f6f 	isb	sy
 8002c80:	f3bf 8f4f 	dsb	sy
 8002c84:	b662      	cpsie	i
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	e7fe      	b.n	8002c88 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00b      	beq.n	8002caa <vPortFree+0x66>
 8002c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c96:	b672      	cpsid	i
 8002c98:	f383 8811 	msr	BASEPRI, r3
 8002c9c:	f3bf 8f6f 	isb	sy
 8002ca0:	f3bf 8f4f 	dsb	sy
 8002ca4:	b662      	cpsie	i
 8002ca6:	60bb      	str	r3, [r7, #8]
 8002ca8:	e7fe      	b.n	8002ca8 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	4b11      	ldr	r3, [pc, #68]	; (8002cf4 <vPortFree+0xb0>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d019      	beq.n	8002cec <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d115      	bne.n	8002cec <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	4b0b      	ldr	r3, [pc, #44]	; (8002cf4 <vPortFree+0xb0>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	401a      	ands	r2, r3
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002cd0:	f000 fda6 	bl	8003820 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	4b07      	ldr	r3, [pc, #28]	; (8002cf8 <vPortFree+0xb4>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4413      	add	r3, r2
 8002cde:	4a06      	ldr	r2, [pc, #24]	; (8002cf8 <vPortFree+0xb4>)
 8002ce0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002ce2:	6938      	ldr	r0, [r7, #16]
 8002ce4:	f000 f86c 	bl	8002dc0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002ce8:	f000 fda8 	bl	800383c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002cec:	bf00      	nop
 8002cee:	3718      	adds	r7, #24
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	20003ca4 	.word	0x20003ca4
 8002cf8:	20003c9c 	.word	0x20003c9c

08002cfc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002d02:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002d06:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002d08:	4b27      	ldr	r3, [pc, #156]	; (8002da8 <prvHeapInit+0xac>)
 8002d0a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00c      	beq.n	8002d30 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	3307      	adds	r3, #7
 8002d1a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f023 0307 	bic.w	r3, r3, #7
 8002d22:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002d24:	68ba      	ldr	r2, [r7, #8]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	4a1f      	ldr	r2, [pc, #124]	; (8002da8 <prvHeapInit+0xac>)
 8002d2c:	4413      	add	r3, r2
 8002d2e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002d34:	4a1d      	ldr	r2, [pc, #116]	; (8002dac <prvHeapInit+0xb0>)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002d3a:	4b1c      	ldr	r3, [pc, #112]	; (8002dac <prvHeapInit+0xb0>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	4413      	add	r3, r2
 8002d46:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002d48:	2208      	movs	r2, #8
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	1a9b      	subs	r3, r3, r2
 8002d4e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f023 0307 	bic.w	r3, r3, #7
 8002d56:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	4a15      	ldr	r2, [pc, #84]	; (8002db0 <prvHeapInit+0xb4>)
 8002d5c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002d5e:	4b14      	ldr	r3, [pc, #80]	; (8002db0 <prvHeapInit+0xb4>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2200      	movs	r2, #0
 8002d64:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002d66:	4b12      	ldr	r3, [pc, #72]	; (8002db0 <prvHeapInit+0xb4>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	1ad2      	subs	r2, r2, r3
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002d7c:	4b0c      	ldr	r3, [pc, #48]	; (8002db0 <prvHeapInit+0xb4>)
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	4a0a      	ldr	r2, [pc, #40]	; (8002db4 <prvHeapInit+0xb8>)
 8002d8a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	4a09      	ldr	r2, [pc, #36]	; (8002db8 <prvHeapInit+0xbc>)
 8002d92:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002d94:	4b09      	ldr	r3, [pc, #36]	; (8002dbc <prvHeapInit+0xc0>)
 8002d96:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002d9a:	601a      	str	r2, [r3, #0]
}
 8002d9c:	bf00      	nop
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	20000090 	.word	0x20000090
 8002dac:	20003c90 	.word	0x20003c90
 8002db0:	20003c98 	.word	0x20003c98
 8002db4:	20003ca0 	.word	0x20003ca0
 8002db8:	20003c9c 	.word	0x20003c9c
 8002dbc:	20003ca4 	.word	0x20003ca4

08002dc0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002dc8:	4b28      	ldr	r3, [pc, #160]	; (8002e6c <prvInsertBlockIntoFreeList+0xac>)
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	e002      	b.n	8002dd4 <prvInsertBlockIntoFreeList+0x14>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d8f7      	bhi.n	8002dce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	68ba      	ldr	r2, [r7, #8]
 8002de8:	4413      	add	r3, r2
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d108      	bne.n	8002e02 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	441a      	add	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	441a      	add	r2, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d118      	bne.n	8002e48 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	4b15      	ldr	r3, [pc, #84]	; (8002e70 <prvInsertBlockIntoFreeList+0xb0>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d00d      	beq.n	8002e3e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	441a      	add	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	e008      	b.n	8002e50 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002e3e:	4b0c      	ldr	r3, [pc, #48]	; (8002e70 <prvInsertBlockIntoFreeList+0xb0>)
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	601a      	str	r2, [r3, #0]
 8002e46:	e003      	b.n	8002e50 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d002      	beq.n	8002e5e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e5e:	bf00      	nop
 8002e60:	3714      	adds	r7, #20
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	20003c90 	.word	0x20003c90
 8002e70:	20003c98 	.word	0x20003c98

08002e74 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f103 0208 	add.w	r2, r3, #8
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f04f 32ff 	mov.w	r2, #4294967295
 8002e8c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f103 0208 	add.w	r2, r3, #8
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f103 0208 	add.w	r2, r3, #8
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002ec2:	bf00      	nop
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr

08002ece <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b085      	sub	sp, #20
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
 8002ed6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	683a      	ldr	r2, [r7, #0]
 8002ef2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	1c5a      	adds	r2, r3, #1
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	601a      	str	r2, [r3, #0]
}
 8002f0a:	bf00      	nop
 8002f0c:	3714      	adds	r7, #20
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr

08002f16 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f16:	b480      	push	{r7}
 8002f18:	b085      	sub	sp, #20
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
 8002f1e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f2c:	d103      	bne.n	8002f36 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	60fb      	str	r3, [r7, #12]
 8002f34:	e00c      	b.n	8002f50 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	3308      	adds	r3, #8
 8002f3a:	60fb      	str	r3, [r7, #12]
 8002f3c:	e002      	b.n	8002f44 <vListInsert+0x2e>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	60fb      	str	r3, [r7, #12]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68ba      	ldr	r2, [r7, #8]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d2f6      	bcs.n	8002f3e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	1c5a      	adds	r2, r3, #1
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	601a      	str	r2, [r3, #0]
}
 8002f7c:	bf00      	nop
 8002f7e:	3714      	adds	r7, #20
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	6892      	ldr	r2, [r2, #8]
 8002f9e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	6852      	ldr	r2, [r2, #4]
 8002fa8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d103      	bne.n	8002fbc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	1e5a      	subs	r2, r3, #1
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3714      	adds	r7, #20
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	3b04      	subs	r3, #4
 8002fec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ff4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	3b04      	subs	r3, #4
 8002ffa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	f023 0201 	bic.w	r2, r3, #1
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	3b04      	subs	r3, #4
 800300a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800300c:	4a0c      	ldr	r2, [pc, #48]	; (8003040 <pxPortInitialiseStack+0x64>)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	3b14      	subs	r3, #20
 8003016:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	3b04      	subs	r3, #4
 8003022:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f06f 0202 	mvn.w	r2, #2
 800302a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	3b20      	subs	r3, #32
 8003030:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003032:	68fb      	ldr	r3, [r7, #12]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3714      	adds	r7, #20
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	08003045 	.word	0x08003045

08003044 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800304a:	2300      	movs	r3, #0
 800304c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800304e:	4b13      	ldr	r3, [pc, #76]	; (800309c <prvTaskExitError+0x58>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003056:	d00b      	beq.n	8003070 <prvTaskExitError+0x2c>
 8003058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800305c:	b672      	cpsid	i
 800305e:	f383 8811 	msr	BASEPRI, r3
 8003062:	f3bf 8f6f 	isb	sy
 8003066:	f3bf 8f4f 	dsb	sy
 800306a:	b662      	cpsie	i
 800306c:	60fb      	str	r3, [r7, #12]
 800306e:	e7fe      	b.n	800306e <prvTaskExitError+0x2a>
 8003070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003074:	b672      	cpsid	i
 8003076:	f383 8811 	msr	BASEPRI, r3
 800307a:	f3bf 8f6f 	isb	sy
 800307e:	f3bf 8f4f 	dsb	sy
 8003082:	b662      	cpsie	i
 8003084:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003086:	bf00      	nop
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d0fc      	beq.n	8003088 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800308e:	bf00      	nop
 8003090:	3714      	adds	r7, #20
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	20000004 	.word	0x20000004

080030a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80030a0:	4b07      	ldr	r3, [pc, #28]	; (80030c0 <pxCurrentTCBConst2>)
 80030a2:	6819      	ldr	r1, [r3, #0]
 80030a4:	6808      	ldr	r0, [r1, #0]
 80030a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030aa:	f380 8809 	msr	PSP, r0
 80030ae:	f3bf 8f6f 	isb	sy
 80030b2:	f04f 0000 	mov.w	r0, #0
 80030b6:	f380 8811 	msr	BASEPRI, r0
 80030ba:	4770      	bx	lr
 80030bc:	f3af 8000 	nop.w

080030c0 <pxCurrentTCBConst2>:
 80030c0:	20003cb0 	.word	0x20003cb0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80030c4:	bf00      	nop
 80030c6:	bf00      	nop

080030c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80030c8:	4808      	ldr	r0, [pc, #32]	; (80030ec <prvPortStartFirstTask+0x24>)
 80030ca:	6800      	ldr	r0, [r0, #0]
 80030cc:	6800      	ldr	r0, [r0, #0]
 80030ce:	f380 8808 	msr	MSP, r0
 80030d2:	f04f 0000 	mov.w	r0, #0
 80030d6:	f380 8814 	msr	CONTROL, r0
 80030da:	b662      	cpsie	i
 80030dc:	b661      	cpsie	f
 80030de:	f3bf 8f4f 	dsb	sy
 80030e2:	f3bf 8f6f 	isb	sy
 80030e6:	df00      	svc	0
 80030e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80030ea:	bf00      	nop
 80030ec:	e000ed08 	.word	0xe000ed08

080030f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80030f6:	4b36      	ldr	r3, [pc, #216]	; (80031d0 <xPortStartScheduler+0xe0>)
 80030f8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	22ff      	movs	r2, #255	; 0xff
 8003106:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	b2db      	uxtb	r3, r3
 800310e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003110:	78fb      	ldrb	r3, [r7, #3]
 8003112:	b2db      	uxtb	r3, r3
 8003114:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003118:	b2da      	uxtb	r2, r3
 800311a:	4b2e      	ldr	r3, [pc, #184]	; (80031d4 <xPortStartScheduler+0xe4>)
 800311c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800311e:	4b2e      	ldr	r3, [pc, #184]	; (80031d8 <xPortStartScheduler+0xe8>)
 8003120:	2207      	movs	r2, #7
 8003122:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003124:	e009      	b.n	800313a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003126:	4b2c      	ldr	r3, [pc, #176]	; (80031d8 <xPortStartScheduler+0xe8>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	3b01      	subs	r3, #1
 800312c:	4a2a      	ldr	r2, [pc, #168]	; (80031d8 <xPortStartScheduler+0xe8>)
 800312e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003130:	78fb      	ldrb	r3, [r7, #3]
 8003132:	b2db      	uxtb	r3, r3
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	b2db      	uxtb	r3, r3
 8003138:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800313a:	78fb      	ldrb	r3, [r7, #3]
 800313c:	b2db      	uxtb	r3, r3
 800313e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003142:	2b80      	cmp	r3, #128	; 0x80
 8003144:	d0ef      	beq.n	8003126 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003146:	4b24      	ldr	r3, [pc, #144]	; (80031d8 <xPortStartScheduler+0xe8>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f1c3 0307 	rsb	r3, r3, #7
 800314e:	2b04      	cmp	r3, #4
 8003150:	d00b      	beq.n	800316a <xPortStartScheduler+0x7a>
 8003152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003156:	b672      	cpsid	i
 8003158:	f383 8811 	msr	BASEPRI, r3
 800315c:	f3bf 8f6f 	isb	sy
 8003160:	f3bf 8f4f 	dsb	sy
 8003164:	b662      	cpsie	i
 8003166:	60bb      	str	r3, [r7, #8]
 8003168:	e7fe      	b.n	8003168 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800316a:	4b1b      	ldr	r3, [pc, #108]	; (80031d8 <xPortStartScheduler+0xe8>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	021b      	lsls	r3, r3, #8
 8003170:	4a19      	ldr	r2, [pc, #100]	; (80031d8 <xPortStartScheduler+0xe8>)
 8003172:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003174:	4b18      	ldr	r3, [pc, #96]	; (80031d8 <xPortStartScheduler+0xe8>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800317c:	4a16      	ldr	r2, [pc, #88]	; (80031d8 <xPortStartScheduler+0xe8>)
 800317e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	b2da      	uxtb	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003188:	4b14      	ldr	r3, [pc, #80]	; (80031dc <xPortStartScheduler+0xec>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a13      	ldr	r2, [pc, #76]	; (80031dc <xPortStartScheduler+0xec>)
 800318e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003192:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003194:	4b11      	ldr	r3, [pc, #68]	; (80031dc <xPortStartScheduler+0xec>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a10      	ldr	r2, [pc, #64]	; (80031dc <xPortStartScheduler+0xec>)
 800319a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800319e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80031a0:	f000 f8d4 	bl	800334c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80031a4:	4b0e      	ldr	r3, [pc, #56]	; (80031e0 <xPortStartScheduler+0xf0>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80031aa:	f000 f8f3 	bl	8003394 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80031ae:	4b0d      	ldr	r3, [pc, #52]	; (80031e4 <xPortStartScheduler+0xf4>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a0c      	ldr	r2, [pc, #48]	; (80031e4 <xPortStartScheduler+0xf4>)
 80031b4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80031b8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80031ba:	f7ff ff85 	bl	80030c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80031be:	f000 fc99 	bl	8003af4 <vTaskSwitchContext>
	prvTaskExitError();
 80031c2:	f7ff ff3f 	bl	8003044 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	e000e400 	.word	0xe000e400
 80031d4:	20003ca8 	.word	0x20003ca8
 80031d8:	20003cac 	.word	0x20003cac
 80031dc:	e000ed20 	.word	0xe000ed20
 80031e0:	20000004 	.word	0x20000004
 80031e4:	e000ef34 	.word	0xe000ef34

080031e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f2:	b672      	cpsid	i
 80031f4:	f383 8811 	msr	BASEPRI, r3
 80031f8:	f3bf 8f6f 	isb	sy
 80031fc:	f3bf 8f4f 	dsb	sy
 8003200:	b662      	cpsie	i
 8003202:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003204:	4b0f      	ldr	r3, [pc, #60]	; (8003244 <vPortEnterCritical+0x5c>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	3301      	adds	r3, #1
 800320a:	4a0e      	ldr	r2, [pc, #56]	; (8003244 <vPortEnterCritical+0x5c>)
 800320c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800320e:	4b0d      	ldr	r3, [pc, #52]	; (8003244 <vPortEnterCritical+0x5c>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d110      	bne.n	8003238 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003216:	4b0c      	ldr	r3, [pc, #48]	; (8003248 <vPortEnterCritical+0x60>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00b      	beq.n	8003238 <vPortEnterCritical+0x50>
 8003220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003224:	b672      	cpsid	i
 8003226:	f383 8811 	msr	BASEPRI, r3
 800322a:	f3bf 8f6f 	isb	sy
 800322e:	f3bf 8f4f 	dsb	sy
 8003232:	b662      	cpsie	i
 8003234:	603b      	str	r3, [r7, #0]
 8003236:	e7fe      	b.n	8003236 <vPortEnterCritical+0x4e>
	}
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr
 8003244:	20000004 	.word	0x20000004
 8003248:	e000ed04 	.word	0xe000ed04

0800324c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003252:	4b12      	ldr	r3, [pc, #72]	; (800329c <vPortExitCritical+0x50>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10b      	bne.n	8003272 <vPortExitCritical+0x26>
 800325a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800325e:	b672      	cpsid	i
 8003260:	f383 8811 	msr	BASEPRI, r3
 8003264:	f3bf 8f6f 	isb	sy
 8003268:	f3bf 8f4f 	dsb	sy
 800326c:	b662      	cpsie	i
 800326e:	607b      	str	r3, [r7, #4]
 8003270:	e7fe      	b.n	8003270 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8003272:	4b0a      	ldr	r3, [pc, #40]	; (800329c <vPortExitCritical+0x50>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	3b01      	subs	r3, #1
 8003278:	4a08      	ldr	r2, [pc, #32]	; (800329c <vPortExitCritical+0x50>)
 800327a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800327c:	4b07      	ldr	r3, [pc, #28]	; (800329c <vPortExitCritical+0x50>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d104      	bne.n	800328e <vPortExitCritical+0x42>
 8003284:	2300      	movs	r3, #0
 8003286:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800328e:	bf00      	nop
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	20000004 	.word	0x20000004

080032a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80032a0:	f3ef 8009 	mrs	r0, PSP
 80032a4:	f3bf 8f6f 	isb	sy
 80032a8:	4b15      	ldr	r3, [pc, #84]	; (8003300 <pxCurrentTCBConst>)
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	f01e 0f10 	tst.w	lr, #16
 80032b0:	bf08      	it	eq
 80032b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80032b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032ba:	6010      	str	r0, [r2, #0]
 80032bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80032c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80032c4:	b672      	cpsid	i
 80032c6:	f380 8811 	msr	BASEPRI, r0
 80032ca:	f3bf 8f4f 	dsb	sy
 80032ce:	f3bf 8f6f 	isb	sy
 80032d2:	b662      	cpsie	i
 80032d4:	f000 fc0e 	bl	8003af4 <vTaskSwitchContext>
 80032d8:	f04f 0000 	mov.w	r0, #0
 80032dc:	f380 8811 	msr	BASEPRI, r0
 80032e0:	bc09      	pop	{r0, r3}
 80032e2:	6819      	ldr	r1, [r3, #0]
 80032e4:	6808      	ldr	r0, [r1, #0]
 80032e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032ea:	f01e 0f10 	tst.w	lr, #16
 80032ee:	bf08      	it	eq
 80032f0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80032f4:	f380 8809 	msr	PSP, r0
 80032f8:	f3bf 8f6f 	isb	sy
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop

08003300 <pxCurrentTCBConst>:
 8003300:	20003cb0 	.word	0x20003cb0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003304:	bf00      	nop
 8003306:	bf00      	nop

08003308 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
	__asm volatile
 800330e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003312:	b672      	cpsid	i
 8003314:	f383 8811 	msr	BASEPRI, r3
 8003318:	f3bf 8f6f 	isb	sy
 800331c:	f3bf 8f4f 	dsb	sy
 8003320:	b662      	cpsie	i
 8003322:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003324:	f000 fb28 	bl	8003978 <xTaskIncrementTick>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d003      	beq.n	8003336 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800332e:	4b06      	ldr	r3, [pc, #24]	; (8003348 <SysTick_Handler+0x40>)
 8003330:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003334:	601a      	str	r2, [r3, #0]
 8003336:	2300      	movs	r3, #0
 8003338:	603b      	str	r3, [r7, #0]
	__asm volatile
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8003340:	bf00      	nop
 8003342:	3708      	adds	r7, #8
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	e000ed04 	.word	0xe000ed04

0800334c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003350:	4b0b      	ldr	r3, [pc, #44]	; (8003380 <vPortSetupTimerInterrupt+0x34>)
 8003352:	2200      	movs	r2, #0
 8003354:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003356:	4b0b      	ldr	r3, [pc, #44]	; (8003384 <vPortSetupTimerInterrupt+0x38>)
 8003358:	2200      	movs	r2, #0
 800335a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800335c:	4b0a      	ldr	r3, [pc, #40]	; (8003388 <vPortSetupTimerInterrupt+0x3c>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a0a      	ldr	r2, [pc, #40]	; (800338c <vPortSetupTimerInterrupt+0x40>)
 8003362:	fba2 2303 	umull	r2, r3, r2, r3
 8003366:	099b      	lsrs	r3, r3, #6
 8003368:	4a09      	ldr	r2, [pc, #36]	; (8003390 <vPortSetupTimerInterrupt+0x44>)
 800336a:	3b01      	subs	r3, #1
 800336c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800336e:	4b04      	ldr	r3, [pc, #16]	; (8003380 <vPortSetupTimerInterrupt+0x34>)
 8003370:	2207      	movs	r2, #7
 8003372:	601a      	str	r2, [r3, #0]
}
 8003374:	bf00      	nop
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	e000e010 	.word	0xe000e010
 8003384:	e000e018 	.word	0xe000e018
 8003388:	2000000c 	.word	0x2000000c
 800338c:	10624dd3 	.word	0x10624dd3
 8003390:	e000e014 	.word	0xe000e014

08003394 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003394:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80033a4 <vPortEnableVFP+0x10>
 8003398:	6801      	ldr	r1, [r0, #0]
 800339a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800339e:	6001      	str	r1, [r0, #0]
 80033a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80033a2:	bf00      	nop
 80033a4:	e000ed88 	.word	0xe000ed88

080033a8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b08c      	sub	sp, #48	; 0x30
 80033ac:	af04      	add	r7, sp, #16
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	603b      	str	r3, [r7, #0]
 80033b4:	4613      	mov	r3, r2
 80033b6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033b8:	88fb      	ldrh	r3, [r7, #6]
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4618      	mov	r0, r3
 80033be:	f7ff fb79 	bl	8002ab4 <pvPortMalloc>
 80033c2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00e      	beq.n	80033e8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80033ca:	2054      	movs	r0, #84	; 0x54
 80033cc:	f7ff fb72 	bl	8002ab4 <pvPortMalloc>
 80033d0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d003      	beq.n	80033e0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	631a      	str	r2, [r3, #48]	; 0x30
 80033de:	e005      	b.n	80033ec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80033e0:	6978      	ldr	r0, [r7, #20]
 80033e2:	f7ff fc2f 	bl	8002c44 <vPortFree>
 80033e6:	e001      	b.n	80033ec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80033e8:	2300      	movs	r3, #0
 80033ea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d013      	beq.n	800341a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80033f2:	88fa      	ldrh	r2, [r7, #6]
 80033f4:	2300      	movs	r3, #0
 80033f6:	9303      	str	r3, [sp, #12]
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	9302      	str	r3, [sp, #8]
 80033fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033fe:	9301      	str	r3, [sp, #4]
 8003400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003402:	9300      	str	r3, [sp, #0]
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	68b9      	ldr	r1, [r7, #8]
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f000 f80e 	bl	800342a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800340e:	69f8      	ldr	r0, [r7, #28]
 8003410:	f000 f88c 	bl	800352c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003414:	2301      	movs	r3, #1
 8003416:	61bb      	str	r3, [r7, #24]
 8003418:	e002      	b.n	8003420 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800341a:	f04f 33ff 	mov.w	r3, #4294967295
 800341e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003420:	69bb      	ldr	r3, [r7, #24]
	}
 8003422:	4618      	mov	r0, r3
 8003424:	3720      	adds	r7, #32
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800342a:	b580      	push	{r7, lr}
 800342c:	b088      	sub	sp, #32
 800342e:	af00      	add	r7, sp, #0
 8003430:	60f8      	str	r0, [r7, #12]
 8003432:	60b9      	str	r1, [r7, #8]
 8003434:	607a      	str	r2, [r7, #4]
 8003436:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800343c:	6879      	ldr	r1, [r7, #4]
 800343e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8003442:	440b      	add	r3, r1
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	f023 0307 	bic.w	r3, r3, #7
 8003450:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	f003 0307 	and.w	r3, r3, #7
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00b      	beq.n	8003474 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800345c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003460:	b672      	cpsid	i
 8003462:	f383 8811 	msr	BASEPRI, r3
 8003466:	f3bf 8f6f 	isb	sy
 800346a:	f3bf 8f4f 	dsb	sy
 800346e:	b662      	cpsie	i
 8003470:	617b      	str	r3, [r7, #20]
 8003472:	e7fe      	b.n	8003472 <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003474:	2300      	movs	r3, #0
 8003476:	61fb      	str	r3, [r7, #28]
 8003478:	e012      	b.n	80034a0 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	4413      	add	r3, r2
 8003480:	7819      	ldrb	r1, [r3, #0]
 8003482:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	4413      	add	r3, r2
 8003488:	3334      	adds	r3, #52	; 0x34
 800348a:	460a      	mov	r2, r1
 800348c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	4413      	add	r3, r2
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d006      	beq.n	80034a8 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	3301      	adds	r3, #1
 800349e:	61fb      	str	r3, [r7, #28]
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	2b0f      	cmp	r3, #15
 80034a4:	d9e9      	bls.n	800347a <prvInitialiseNewTask+0x50>
 80034a6:	e000      	b.n	80034aa <prvInitialiseNewTask+0x80>
		{
			break;
 80034a8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80034aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80034b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b4:	2b06      	cmp	r3, #6
 80034b6:	d901      	bls.n	80034bc <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80034b8:	2306      	movs	r3, #6
 80034ba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80034bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80034c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034c6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80034c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ca:	2200      	movs	r2, #0
 80034cc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80034ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d0:	3304      	adds	r3, #4
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7ff fcee 	bl	8002eb4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80034d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034da:	3318      	adds	r3, #24
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff fce9 	bl	8002eb4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80034e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ea:	f1c3 0207 	rsb	r2, r3, #7
 80034ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80034f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80034f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fa:	2200      	movs	r2, #0
 80034fc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80034fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003506:	683a      	ldr	r2, [r7, #0]
 8003508:	68f9      	ldr	r1, [r7, #12]
 800350a:	69b8      	ldr	r0, [r7, #24]
 800350c:	f7ff fd66 	bl	8002fdc <pxPortInitialiseStack>
 8003510:	4602      	mov	r2, r0
 8003512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003514:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003518:	2b00      	cmp	r3, #0
 800351a:	d002      	beq.n	8003522 <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800351c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800351e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003520:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003522:	bf00      	nop
 8003524:	3720      	adds	r7, #32
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
	...

0800352c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003534:	f7ff fe58 	bl	80031e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003538:	4b2a      	ldr	r3, [pc, #168]	; (80035e4 <prvAddNewTaskToReadyList+0xb8>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	3301      	adds	r3, #1
 800353e:	4a29      	ldr	r2, [pc, #164]	; (80035e4 <prvAddNewTaskToReadyList+0xb8>)
 8003540:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003542:	4b29      	ldr	r3, [pc, #164]	; (80035e8 <prvAddNewTaskToReadyList+0xbc>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d109      	bne.n	800355e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800354a:	4a27      	ldr	r2, [pc, #156]	; (80035e8 <prvAddNewTaskToReadyList+0xbc>)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003550:	4b24      	ldr	r3, [pc, #144]	; (80035e4 <prvAddNewTaskToReadyList+0xb8>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d110      	bne.n	800357a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003558:	f000 fb40 	bl	8003bdc <prvInitialiseTaskLists>
 800355c:	e00d      	b.n	800357a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800355e:	4b23      	ldr	r3, [pc, #140]	; (80035ec <prvAddNewTaskToReadyList+0xc0>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d109      	bne.n	800357a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003566:	4b20      	ldr	r3, [pc, #128]	; (80035e8 <prvAddNewTaskToReadyList+0xbc>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003570:	429a      	cmp	r2, r3
 8003572:	d802      	bhi.n	800357a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003574:	4a1c      	ldr	r2, [pc, #112]	; (80035e8 <prvAddNewTaskToReadyList+0xbc>)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800357a:	4b1d      	ldr	r3, [pc, #116]	; (80035f0 <prvAddNewTaskToReadyList+0xc4>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	3301      	adds	r3, #1
 8003580:	4a1b      	ldr	r2, [pc, #108]	; (80035f0 <prvAddNewTaskToReadyList+0xc4>)
 8003582:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003588:	2201      	movs	r2, #1
 800358a:	409a      	lsls	r2, r3
 800358c:	4b19      	ldr	r3, [pc, #100]	; (80035f4 <prvAddNewTaskToReadyList+0xc8>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4313      	orrs	r3, r2
 8003592:	4a18      	ldr	r2, [pc, #96]	; (80035f4 <prvAddNewTaskToReadyList+0xc8>)
 8003594:	6013      	str	r3, [r2, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800359a:	4613      	mov	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4413      	add	r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	4a15      	ldr	r2, [pc, #84]	; (80035f8 <prvAddNewTaskToReadyList+0xcc>)
 80035a4:	441a      	add	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	3304      	adds	r3, #4
 80035aa:	4619      	mov	r1, r3
 80035ac:	4610      	mov	r0, r2
 80035ae:	f7ff fc8e 	bl	8002ece <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80035b2:	f7ff fe4b 	bl	800324c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80035b6:	4b0d      	ldr	r3, [pc, #52]	; (80035ec <prvAddNewTaskToReadyList+0xc0>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00e      	beq.n	80035dc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80035be:	4b0a      	ldr	r3, [pc, #40]	; (80035e8 <prvAddNewTaskToReadyList+0xbc>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d207      	bcs.n	80035dc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80035cc:	4b0b      	ldr	r3, [pc, #44]	; (80035fc <prvAddNewTaskToReadyList+0xd0>)
 80035ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035d2:	601a      	str	r2, [r3, #0]
 80035d4:	f3bf 8f4f 	dsb	sy
 80035d8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80035dc:	bf00      	nop
 80035de:	3708      	adds	r7, #8
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	20003db0 	.word	0x20003db0
 80035e8:	20003cb0 	.word	0x20003cb0
 80035ec:	20003dbc 	.word	0x20003dbc
 80035f0:	20003dcc 	.word	0x20003dcc
 80035f4:	20003db8 	.word	0x20003db8
 80035f8:	20003cb4 	.word	0x20003cb4
 80035fc:	e000ed04 	.word	0xe000ed04

08003600 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003608:	f7ff fdee 	bl	80031e8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d102      	bne.n	8003618 <vTaskDelete+0x18>
 8003612:	4b39      	ldr	r3, [pc, #228]	; (80036f8 <vTaskDelete+0xf8>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	e000      	b.n	800361a <vTaskDelete+0x1a>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	3304      	adds	r3, #4
 8003620:	4618      	mov	r0, r3
 8003622:	f7ff fcb1 	bl	8002f88 <uxListRemove>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d115      	bne.n	8003658 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003630:	4932      	ldr	r1, [pc, #200]	; (80036fc <vTaskDelete+0xfc>)
 8003632:	4613      	mov	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	4413      	add	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	440b      	add	r3, r1
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10a      	bne.n	8003658 <vTaskDelete+0x58>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003646:	2201      	movs	r2, #1
 8003648:	fa02 f303 	lsl.w	r3, r2, r3
 800364c:	43da      	mvns	r2, r3
 800364e:	4b2c      	ldr	r3, [pc, #176]	; (8003700 <vTaskDelete+0x100>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4013      	ands	r3, r2
 8003654:	4a2a      	ldr	r2, [pc, #168]	; (8003700 <vTaskDelete+0x100>)
 8003656:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365c:	2b00      	cmp	r3, #0
 800365e:	d004      	beq.n	800366a <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	3318      	adds	r3, #24
 8003664:	4618      	mov	r0, r3
 8003666:	f7ff fc8f 	bl	8002f88 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800366a:	4b26      	ldr	r3, [pc, #152]	; (8003704 <vTaskDelete+0x104>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	3301      	adds	r3, #1
 8003670:	4a24      	ldr	r2, [pc, #144]	; (8003704 <vTaskDelete+0x104>)
 8003672:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8003674:	4b20      	ldr	r3, [pc, #128]	; (80036f8 <vTaskDelete+0xf8>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	429a      	cmp	r2, r3
 800367c:	d10b      	bne.n	8003696 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	3304      	adds	r3, #4
 8003682:	4619      	mov	r1, r3
 8003684:	4820      	ldr	r0, [pc, #128]	; (8003708 <vTaskDelete+0x108>)
 8003686:	f7ff fc22 	bl	8002ece <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800368a:	4b20      	ldr	r3, [pc, #128]	; (800370c <vTaskDelete+0x10c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	3301      	adds	r3, #1
 8003690:	4a1e      	ldr	r2, [pc, #120]	; (800370c <vTaskDelete+0x10c>)
 8003692:	6013      	str	r3, [r2, #0]
 8003694:	e009      	b.n	80036aa <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8003696:	4b1e      	ldr	r3, [pc, #120]	; (8003710 <vTaskDelete+0x110>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	3b01      	subs	r3, #1
 800369c:	4a1c      	ldr	r2, [pc, #112]	; (8003710 <vTaskDelete+0x110>)
 800369e:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f000 fb07 	bl	8003cb4 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80036a6:	f000 fb15 	bl	8003cd4 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 80036aa:	f7ff fdcf 	bl	800324c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80036ae:	4b19      	ldr	r3, [pc, #100]	; (8003714 <vTaskDelete+0x114>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d01c      	beq.n	80036f0 <vTaskDelete+0xf0>
		{
			if( pxTCB == pxCurrentTCB )
 80036b6:	4b10      	ldr	r3, [pc, #64]	; (80036f8 <vTaskDelete+0xf8>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d117      	bne.n	80036f0 <vTaskDelete+0xf0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80036c0:	4b15      	ldr	r3, [pc, #84]	; (8003718 <vTaskDelete+0x118>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00b      	beq.n	80036e0 <vTaskDelete+0xe0>
 80036c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036cc:	b672      	cpsid	i
 80036ce:	f383 8811 	msr	BASEPRI, r3
 80036d2:	f3bf 8f6f 	isb	sy
 80036d6:	f3bf 8f4f 	dsb	sy
 80036da:	b662      	cpsie	i
 80036dc:	60bb      	str	r3, [r7, #8]
 80036de:	e7fe      	b.n	80036de <vTaskDelete+0xde>
				portYIELD_WITHIN_API();
 80036e0:	4b0e      	ldr	r3, [pc, #56]	; (800371c <vTaskDelete+0x11c>)
 80036e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	f3bf 8f4f 	dsb	sy
 80036ec:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80036f0:	bf00      	nop
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	20003cb0 	.word	0x20003cb0
 80036fc:	20003cb4 	.word	0x20003cb4
 8003700:	20003db8 	.word	0x20003db8
 8003704:	20003dcc 	.word	0x20003dcc
 8003708:	20003d84 	.word	0x20003d84
 800370c:	20003d98 	.word	0x20003d98
 8003710:	20003db0 	.word	0x20003db0
 8003714:	20003dbc 	.word	0x20003dbc
 8003718:	20003dd8 	.word	0x20003dd8
 800371c:	e000ed04 	.word	0xe000ed04

08003720 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003728:	2300      	movs	r3, #0
 800372a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d018      	beq.n	8003764 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003732:	4b14      	ldr	r3, [pc, #80]	; (8003784 <vTaskDelay+0x64>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00b      	beq.n	8003752 <vTaskDelay+0x32>
 800373a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800373e:	b672      	cpsid	i
 8003740:	f383 8811 	msr	BASEPRI, r3
 8003744:	f3bf 8f6f 	isb	sy
 8003748:	f3bf 8f4f 	dsb	sy
 800374c:	b662      	cpsie	i
 800374e:	60bb      	str	r3, [r7, #8]
 8003750:	e7fe      	b.n	8003750 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8003752:	f000 f865 	bl	8003820 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003756:	2100      	movs	r1, #0
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 fae1 	bl	8003d20 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800375e:	f000 f86d 	bl	800383c <xTaskResumeAll>
 8003762:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d107      	bne.n	800377a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800376a:	4b07      	ldr	r3, [pc, #28]	; (8003788 <vTaskDelay+0x68>)
 800376c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003770:	601a      	str	r2, [r3, #0]
 8003772:	f3bf 8f4f 	dsb	sy
 8003776:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800377a:	bf00      	nop
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	20003dd8 	.word	0x20003dd8
 8003788:	e000ed04 	.word	0xe000ed04

0800378c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8003792:	4b1d      	ldr	r3, [pc, #116]	; (8003808 <vTaskStartScheduler+0x7c>)
 8003794:	9301      	str	r3, [sp, #4]
 8003796:	2300      	movs	r3, #0
 8003798:	9300      	str	r3, [sp, #0]
 800379a:	2300      	movs	r3, #0
 800379c:	2280      	movs	r2, #128	; 0x80
 800379e:	491b      	ldr	r1, [pc, #108]	; (800380c <vTaskStartScheduler+0x80>)
 80037a0:	481b      	ldr	r0, [pc, #108]	; (8003810 <vTaskStartScheduler+0x84>)
 80037a2:	f7ff fe01 	bl	80033a8 <xTaskCreate>
 80037a6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d117      	bne.n	80037de <vTaskStartScheduler+0x52>
 80037ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b2:	b672      	cpsid	i
 80037b4:	f383 8811 	msr	BASEPRI, r3
 80037b8:	f3bf 8f6f 	isb	sy
 80037bc:	f3bf 8f4f 	dsb	sy
 80037c0:	b662      	cpsie	i
 80037c2:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80037c4:	4b13      	ldr	r3, [pc, #76]	; (8003814 <vTaskStartScheduler+0x88>)
 80037c6:	f04f 32ff 	mov.w	r2, #4294967295
 80037ca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80037cc:	4b12      	ldr	r3, [pc, #72]	; (8003818 <vTaskStartScheduler+0x8c>)
 80037ce:	2201      	movs	r2, #1
 80037d0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80037d2:	4b12      	ldr	r3, [pc, #72]	; (800381c <vTaskStartScheduler+0x90>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80037d8:	f7ff fc8a 	bl	80030f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80037dc:	e00f      	b.n	80037fe <vTaskStartScheduler+0x72>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e4:	d10b      	bne.n	80037fe <vTaskStartScheduler+0x72>
 80037e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ea:	b672      	cpsid	i
 80037ec:	f383 8811 	msr	BASEPRI, r3
 80037f0:	f3bf 8f6f 	isb	sy
 80037f4:	f3bf 8f4f 	dsb	sy
 80037f8:	b662      	cpsie	i
 80037fa:	607b      	str	r3, [r7, #4]
 80037fc:	e7fe      	b.n	80037fc <vTaskStartScheduler+0x70>
}
 80037fe:	bf00      	nop
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	20003dd4 	.word	0x20003dd4
 800380c:	08005440 	.word	0x08005440
 8003810:	08003bad 	.word	0x08003bad
 8003814:	20003dd0 	.word	0x20003dd0
 8003818:	20003dbc 	.word	0x20003dbc
 800381c:	20003db4 	.word	0x20003db4

08003820 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003824:	4b04      	ldr	r3, [pc, #16]	; (8003838 <vTaskSuspendAll+0x18>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	3301      	adds	r3, #1
 800382a:	4a03      	ldr	r2, [pc, #12]	; (8003838 <vTaskSuspendAll+0x18>)
 800382c:	6013      	str	r3, [r2, #0]
}
 800382e:	bf00      	nop
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr
 8003838:	20003dd8 	.word	0x20003dd8

0800383c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003842:	2300      	movs	r3, #0
 8003844:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003846:	2300      	movs	r3, #0
 8003848:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800384a:	4b42      	ldr	r3, [pc, #264]	; (8003954 <xTaskResumeAll+0x118>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10b      	bne.n	800386a <xTaskResumeAll+0x2e>
 8003852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003856:	b672      	cpsid	i
 8003858:	f383 8811 	msr	BASEPRI, r3
 800385c:	f3bf 8f6f 	isb	sy
 8003860:	f3bf 8f4f 	dsb	sy
 8003864:	b662      	cpsie	i
 8003866:	603b      	str	r3, [r7, #0]
 8003868:	e7fe      	b.n	8003868 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800386a:	f7ff fcbd 	bl	80031e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800386e:	4b39      	ldr	r3, [pc, #228]	; (8003954 <xTaskResumeAll+0x118>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	3b01      	subs	r3, #1
 8003874:	4a37      	ldr	r2, [pc, #220]	; (8003954 <xTaskResumeAll+0x118>)
 8003876:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003878:	4b36      	ldr	r3, [pc, #216]	; (8003954 <xTaskResumeAll+0x118>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d161      	bne.n	8003944 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003880:	4b35      	ldr	r3, [pc, #212]	; (8003958 <xTaskResumeAll+0x11c>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d05d      	beq.n	8003944 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003888:	e02e      	b.n	80038e8 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800388a:	4b34      	ldr	r3, [pc, #208]	; (800395c <xTaskResumeAll+0x120>)
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	3318      	adds	r3, #24
 8003896:	4618      	mov	r0, r3
 8003898:	f7ff fb76 	bl	8002f88 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	3304      	adds	r3, #4
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7ff fb71 	bl	8002f88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038aa:	2201      	movs	r2, #1
 80038ac:	409a      	lsls	r2, r3
 80038ae:	4b2c      	ldr	r3, [pc, #176]	; (8003960 <xTaskResumeAll+0x124>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	4a2a      	ldr	r2, [pc, #168]	; (8003960 <xTaskResumeAll+0x124>)
 80038b6:	6013      	str	r3, [r2, #0]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038bc:	4613      	mov	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4413      	add	r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	4a27      	ldr	r2, [pc, #156]	; (8003964 <xTaskResumeAll+0x128>)
 80038c6:	441a      	add	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	3304      	adds	r3, #4
 80038cc:	4619      	mov	r1, r3
 80038ce:	4610      	mov	r0, r2
 80038d0:	f7ff fafd 	bl	8002ece <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d8:	4b23      	ldr	r3, [pc, #140]	; (8003968 <xTaskResumeAll+0x12c>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038de:	429a      	cmp	r2, r3
 80038e0:	d302      	bcc.n	80038e8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80038e2:	4b22      	ldr	r3, [pc, #136]	; (800396c <xTaskResumeAll+0x130>)
 80038e4:	2201      	movs	r2, #1
 80038e6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80038e8:	4b1c      	ldr	r3, [pc, #112]	; (800395c <xTaskResumeAll+0x120>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1cc      	bne.n	800388a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80038f6:	f000 f9ed 	bl	8003cd4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80038fa:	4b1d      	ldr	r3, [pc, #116]	; (8003970 <xTaskResumeAll+0x134>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d010      	beq.n	8003928 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003906:	f000 f837 	bl	8003978 <xTaskIncrementTick>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d002      	beq.n	8003916 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003910:	4b16      	ldr	r3, [pc, #88]	; (800396c <xTaskResumeAll+0x130>)
 8003912:	2201      	movs	r2, #1
 8003914:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	3b01      	subs	r3, #1
 800391a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1f1      	bne.n	8003906 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003922:	4b13      	ldr	r3, [pc, #76]	; (8003970 <xTaskResumeAll+0x134>)
 8003924:	2200      	movs	r2, #0
 8003926:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003928:	4b10      	ldr	r3, [pc, #64]	; (800396c <xTaskResumeAll+0x130>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d009      	beq.n	8003944 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003930:	2301      	movs	r3, #1
 8003932:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003934:	4b0f      	ldr	r3, [pc, #60]	; (8003974 <xTaskResumeAll+0x138>)
 8003936:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800393a:	601a      	str	r2, [r3, #0]
 800393c:	f3bf 8f4f 	dsb	sy
 8003940:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003944:	f7ff fc82 	bl	800324c <vPortExitCritical>

	return xAlreadyYielded;
 8003948:	68bb      	ldr	r3, [r7, #8]
}
 800394a:	4618      	mov	r0, r3
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	20003dd8 	.word	0x20003dd8
 8003958:	20003db0 	.word	0x20003db0
 800395c:	20003d70 	.word	0x20003d70
 8003960:	20003db8 	.word	0x20003db8
 8003964:	20003cb4 	.word	0x20003cb4
 8003968:	20003cb0 	.word	0x20003cb0
 800396c:	20003dc4 	.word	0x20003dc4
 8003970:	20003dc0 	.word	0x20003dc0
 8003974:	e000ed04 	.word	0xe000ed04

08003978 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800397e:	2300      	movs	r3, #0
 8003980:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003982:	4b51      	ldr	r3, [pc, #324]	; (8003ac8 <xTaskIncrementTick+0x150>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	f040 808e 	bne.w	8003aa8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800398c:	4b4f      	ldr	r3, [pc, #316]	; (8003acc <xTaskIncrementTick+0x154>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	3301      	adds	r3, #1
 8003992:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003994:	4a4d      	ldr	r2, [pc, #308]	; (8003acc <xTaskIncrementTick+0x154>)
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d121      	bne.n	80039e4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80039a0:	4b4b      	ldr	r3, [pc, #300]	; (8003ad0 <xTaskIncrementTick+0x158>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00b      	beq.n	80039c2 <xTaskIncrementTick+0x4a>
 80039aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ae:	b672      	cpsid	i
 80039b0:	f383 8811 	msr	BASEPRI, r3
 80039b4:	f3bf 8f6f 	isb	sy
 80039b8:	f3bf 8f4f 	dsb	sy
 80039bc:	b662      	cpsie	i
 80039be:	603b      	str	r3, [r7, #0]
 80039c0:	e7fe      	b.n	80039c0 <xTaskIncrementTick+0x48>
 80039c2:	4b43      	ldr	r3, [pc, #268]	; (8003ad0 <xTaskIncrementTick+0x158>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	60fb      	str	r3, [r7, #12]
 80039c8:	4b42      	ldr	r3, [pc, #264]	; (8003ad4 <xTaskIncrementTick+0x15c>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a40      	ldr	r2, [pc, #256]	; (8003ad0 <xTaskIncrementTick+0x158>)
 80039ce:	6013      	str	r3, [r2, #0]
 80039d0:	4a40      	ldr	r2, [pc, #256]	; (8003ad4 <xTaskIncrementTick+0x15c>)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6013      	str	r3, [r2, #0]
 80039d6:	4b40      	ldr	r3, [pc, #256]	; (8003ad8 <xTaskIncrementTick+0x160>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	3301      	adds	r3, #1
 80039dc:	4a3e      	ldr	r2, [pc, #248]	; (8003ad8 <xTaskIncrementTick+0x160>)
 80039de:	6013      	str	r3, [r2, #0]
 80039e0:	f000 f978 	bl	8003cd4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80039e4:	4b3d      	ldr	r3, [pc, #244]	; (8003adc <xTaskIncrementTick+0x164>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d34d      	bcc.n	8003a8a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039ee:	4b38      	ldr	r3, [pc, #224]	; (8003ad0 <xTaskIncrementTick+0x158>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <xTaskIncrementTick+0x84>
 80039f8:	2301      	movs	r3, #1
 80039fa:	e000      	b.n	80039fe <xTaskIncrementTick+0x86>
 80039fc:	2300      	movs	r3, #0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d004      	beq.n	8003a0c <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a02:	4b36      	ldr	r3, [pc, #216]	; (8003adc <xTaskIncrementTick+0x164>)
 8003a04:	f04f 32ff 	mov.w	r2, #4294967295
 8003a08:	601a      	str	r2, [r3, #0]
					break;
 8003a0a:	e03e      	b.n	8003a8a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003a0c:	4b30      	ldr	r3, [pc, #192]	; (8003ad0 <xTaskIncrementTick+0x158>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d203      	bcs.n	8003a2c <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003a24:	4a2d      	ldr	r2, [pc, #180]	; (8003adc <xTaskIncrementTick+0x164>)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6013      	str	r3, [r2, #0]
						break;
 8003a2a:	e02e      	b.n	8003a8a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	3304      	adds	r3, #4
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7ff faa9 	bl	8002f88 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d004      	beq.n	8003a48 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	3318      	adds	r3, #24
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7ff faa0 	bl	8002f88 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	409a      	lsls	r2, r3
 8003a50:	4b23      	ldr	r3, [pc, #140]	; (8003ae0 <xTaskIncrementTick+0x168>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	4a22      	ldr	r2, [pc, #136]	; (8003ae0 <xTaskIncrementTick+0x168>)
 8003a58:	6013      	str	r3, [r2, #0]
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a5e:	4613      	mov	r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	4413      	add	r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	4a1f      	ldr	r2, [pc, #124]	; (8003ae4 <xTaskIncrementTick+0x16c>)
 8003a68:	441a      	add	r2, r3
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	4619      	mov	r1, r3
 8003a70:	4610      	mov	r0, r2
 8003a72:	f7ff fa2c 	bl	8002ece <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a7a:	4b1b      	ldr	r3, [pc, #108]	; (8003ae8 <xTaskIncrementTick+0x170>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d3b4      	bcc.n	80039ee <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003a84:	2301      	movs	r3, #1
 8003a86:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a88:	e7b1      	b.n	80039ee <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003a8a:	4b17      	ldr	r3, [pc, #92]	; (8003ae8 <xTaskIncrementTick+0x170>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a90:	4914      	ldr	r1, [pc, #80]	; (8003ae4 <xTaskIncrementTick+0x16c>)
 8003a92:	4613      	mov	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	4413      	add	r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	440b      	add	r3, r1
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d907      	bls.n	8003ab2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	617b      	str	r3, [r7, #20]
 8003aa6:	e004      	b.n	8003ab2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003aa8:	4b10      	ldr	r3, [pc, #64]	; (8003aec <xTaskIncrementTick+0x174>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	3301      	adds	r3, #1
 8003aae:	4a0f      	ldr	r2, [pc, #60]	; (8003aec <xTaskIncrementTick+0x174>)
 8003ab0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003ab2:	4b0f      	ldr	r3, [pc, #60]	; (8003af0 <xTaskIncrementTick+0x178>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d001      	beq.n	8003abe <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8003aba:	2301      	movs	r3, #1
 8003abc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003abe:	697b      	ldr	r3, [r7, #20]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3718      	adds	r7, #24
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	20003dd8 	.word	0x20003dd8
 8003acc:	20003db4 	.word	0x20003db4
 8003ad0:	20003d68 	.word	0x20003d68
 8003ad4:	20003d6c 	.word	0x20003d6c
 8003ad8:	20003dc8 	.word	0x20003dc8
 8003adc:	20003dd0 	.word	0x20003dd0
 8003ae0:	20003db8 	.word	0x20003db8
 8003ae4:	20003cb4 	.word	0x20003cb4
 8003ae8:	20003cb0 	.word	0x20003cb0
 8003aec:	20003dc0 	.word	0x20003dc0
 8003af0:	20003dc4 	.word	0x20003dc4

08003af4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003af4:	b480      	push	{r7}
 8003af6:	b087      	sub	sp, #28
 8003af8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003afa:	4b27      	ldr	r3, [pc, #156]	; (8003b98 <vTaskSwitchContext+0xa4>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003b02:	4b26      	ldr	r3, [pc, #152]	; (8003b9c <vTaskSwitchContext+0xa8>)
 8003b04:	2201      	movs	r2, #1
 8003b06:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003b08:	e040      	b.n	8003b8c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8003b0a:	4b24      	ldr	r3, [pc, #144]	; (8003b9c <vTaskSwitchContext+0xa8>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003b10:	4b23      	ldr	r3, [pc, #140]	; (8003ba0 <vTaskSwitchContext+0xac>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	fab3 f383 	clz	r3, r3
 8003b1c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003b1e:	7afb      	ldrb	r3, [r7, #11]
 8003b20:	f1c3 031f 	rsb	r3, r3, #31
 8003b24:	617b      	str	r3, [r7, #20]
 8003b26:	491f      	ldr	r1, [pc, #124]	; (8003ba4 <vTaskSwitchContext+0xb0>)
 8003b28:	697a      	ldr	r2, [r7, #20]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	4413      	add	r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	440b      	add	r3, r1
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10b      	bne.n	8003b52 <vTaskSwitchContext+0x5e>
	__asm volatile
 8003b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b3e:	b672      	cpsid	i
 8003b40:	f383 8811 	msr	BASEPRI, r3
 8003b44:	f3bf 8f6f 	isb	sy
 8003b48:	f3bf 8f4f 	dsb	sy
 8003b4c:	b662      	cpsie	i
 8003b4e:	607b      	str	r3, [r7, #4]
 8003b50:	e7fe      	b.n	8003b50 <vTaskSwitchContext+0x5c>
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	4613      	mov	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	4413      	add	r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	4a11      	ldr	r2, [pc, #68]	; (8003ba4 <vTaskSwitchContext+0xb0>)
 8003b5e:	4413      	add	r3, r2
 8003b60:	613b      	str	r3, [r7, #16]
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	685a      	ldr	r2, [r3, #4]
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	605a      	str	r2, [r3, #4]
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	685a      	ldr	r2, [r3, #4]
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	3308      	adds	r3, #8
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d104      	bne.n	8003b82 <vTaskSwitchContext+0x8e>
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	685a      	ldr	r2, [r3, #4]
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	605a      	str	r2, [r3, #4]
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	4a07      	ldr	r2, [pc, #28]	; (8003ba8 <vTaskSwitchContext+0xb4>)
 8003b8a:	6013      	str	r3, [r2, #0]
}
 8003b8c:	bf00      	nop
 8003b8e:	371c      	adds	r7, #28
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr
 8003b98:	20003dd8 	.word	0x20003dd8
 8003b9c:	20003dc4 	.word	0x20003dc4
 8003ba0:	20003db8 	.word	0x20003db8
 8003ba4:	20003cb4 	.word	0x20003cb4
 8003ba8:	20003cb0 	.word	0x20003cb0

08003bac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003bb4:	f000 f852 	bl	8003c5c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003bb8:	4b06      	ldr	r3, [pc, #24]	; (8003bd4 <prvIdleTask+0x28>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d9f9      	bls.n	8003bb4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003bc0:	4b05      	ldr	r3, [pc, #20]	; (8003bd8 <prvIdleTask+0x2c>)
 8003bc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bc6:	601a      	str	r2, [r3, #0]
 8003bc8:	f3bf 8f4f 	dsb	sy
 8003bcc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003bd0:	e7f0      	b.n	8003bb4 <prvIdleTask+0x8>
 8003bd2:	bf00      	nop
 8003bd4:	20003cb4 	.word	0x20003cb4
 8003bd8:	e000ed04 	.word	0xe000ed04

08003bdc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003be2:	2300      	movs	r3, #0
 8003be4:	607b      	str	r3, [r7, #4]
 8003be6:	e00c      	b.n	8003c02 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	4613      	mov	r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4413      	add	r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	4a12      	ldr	r2, [pc, #72]	; (8003c3c <prvInitialiseTaskLists+0x60>)
 8003bf4:	4413      	add	r3, r2
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7ff f93c 	bl	8002e74 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	3301      	adds	r3, #1
 8003c00:	607b      	str	r3, [r7, #4]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2b06      	cmp	r3, #6
 8003c06:	d9ef      	bls.n	8003be8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003c08:	480d      	ldr	r0, [pc, #52]	; (8003c40 <prvInitialiseTaskLists+0x64>)
 8003c0a:	f7ff f933 	bl	8002e74 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003c0e:	480d      	ldr	r0, [pc, #52]	; (8003c44 <prvInitialiseTaskLists+0x68>)
 8003c10:	f7ff f930 	bl	8002e74 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003c14:	480c      	ldr	r0, [pc, #48]	; (8003c48 <prvInitialiseTaskLists+0x6c>)
 8003c16:	f7ff f92d 	bl	8002e74 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003c1a:	480c      	ldr	r0, [pc, #48]	; (8003c4c <prvInitialiseTaskLists+0x70>)
 8003c1c:	f7ff f92a 	bl	8002e74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003c20:	480b      	ldr	r0, [pc, #44]	; (8003c50 <prvInitialiseTaskLists+0x74>)
 8003c22:	f7ff f927 	bl	8002e74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003c26:	4b0b      	ldr	r3, [pc, #44]	; (8003c54 <prvInitialiseTaskLists+0x78>)
 8003c28:	4a05      	ldr	r2, [pc, #20]	; (8003c40 <prvInitialiseTaskLists+0x64>)
 8003c2a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003c2c:	4b0a      	ldr	r3, [pc, #40]	; (8003c58 <prvInitialiseTaskLists+0x7c>)
 8003c2e:	4a05      	ldr	r2, [pc, #20]	; (8003c44 <prvInitialiseTaskLists+0x68>)
 8003c30:	601a      	str	r2, [r3, #0]
}
 8003c32:	bf00      	nop
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	20003cb4 	.word	0x20003cb4
 8003c40:	20003d40 	.word	0x20003d40
 8003c44:	20003d54 	.word	0x20003d54
 8003c48:	20003d70 	.word	0x20003d70
 8003c4c:	20003d84 	.word	0x20003d84
 8003c50:	20003d9c 	.word	0x20003d9c
 8003c54:	20003d68 	.word	0x20003d68
 8003c58:	20003d6c 	.word	0x20003d6c

08003c5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c62:	e019      	b.n	8003c98 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003c64:	f7ff fac0 	bl	80031e8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003c68:	4b0f      	ldr	r3, [pc, #60]	; (8003ca8 <prvCheckTasksWaitingTermination+0x4c>)
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	3304      	adds	r3, #4
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7ff f987 	bl	8002f88 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003c7a:	4b0c      	ldr	r3, [pc, #48]	; (8003cac <prvCheckTasksWaitingTermination+0x50>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	4a0a      	ldr	r2, [pc, #40]	; (8003cac <prvCheckTasksWaitingTermination+0x50>)
 8003c82:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003c84:	4b0a      	ldr	r3, [pc, #40]	; (8003cb0 <prvCheckTasksWaitingTermination+0x54>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	4a09      	ldr	r2, [pc, #36]	; (8003cb0 <prvCheckTasksWaitingTermination+0x54>)
 8003c8c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003c8e:	f7ff fadd 	bl	800324c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 f80e 	bl	8003cb4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c98:	4b05      	ldr	r3, [pc, #20]	; (8003cb0 <prvCheckTasksWaitingTermination+0x54>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1e1      	bne.n	8003c64 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003ca0:	bf00      	nop
 8003ca2:	3708      	adds	r7, #8
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	20003d84 	.word	0x20003d84
 8003cac:	20003db0 	.word	0x20003db0
 8003cb0:	20003d98 	.word	0x20003d98

08003cb4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7fe ffbf 	bl	8002c44 <vPortFree>
			vPortFree( pxTCB );
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f7fe ffbc 	bl	8002c44 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003ccc:	bf00      	nop
 8003cce:	3708      	adds	r7, #8
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cda:	4b0f      	ldr	r3, [pc, #60]	; (8003d18 <prvResetNextTaskUnblockTime+0x44>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d101      	bne.n	8003ce8 <prvResetNextTaskUnblockTime+0x14>
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e000      	b.n	8003cea <prvResetNextTaskUnblockTime+0x16>
 8003ce8:	2300      	movs	r3, #0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d004      	beq.n	8003cf8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003cee:	4b0b      	ldr	r3, [pc, #44]	; (8003d1c <prvResetNextTaskUnblockTime+0x48>)
 8003cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8003cf4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003cf6:	e008      	b.n	8003d0a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003cf8:	4b07      	ldr	r3, [pc, #28]	; (8003d18 <prvResetNextTaskUnblockTime+0x44>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	4a05      	ldr	r2, [pc, #20]	; (8003d1c <prvResetNextTaskUnblockTime+0x48>)
 8003d08:	6013      	str	r3, [r2, #0]
}
 8003d0a:	bf00      	nop
 8003d0c:	370c      	adds	r7, #12
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	20003d68 	.word	0x20003d68
 8003d1c:	20003dd0 	.word	0x20003dd0

08003d20 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003d2a:	4b29      	ldr	r3, [pc, #164]	; (8003dd0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d30:	4b28      	ldr	r3, [pc, #160]	; (8003dd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	3304      	adds	r3, #4
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7ff f926 	bl	8002f88 <uxListRemove>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10b      	bne.n	8003d5a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003d42:	4b24      	ldr	r3, [pc, #144]	; (8003dd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d48:	2201      	movs	r2, #1
 8003d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4e:	43da      	mvns	r2, r3
 8003d50:	4b21      	ldr	r3, [pc, #132]	; (8003dd8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4013      	ands	r3, r2
 8003d56:	4a20      	ldr	r2, [pc, #128]	; (8003dd8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003d58:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d60:	d10a      	bne.n	8003d78 <prvAddCurrentTaskToDelayedList+0x58>
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d007      	beq.n	8003d78 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d68:	4b1a      	ldr	r3, [pc, #104]	; (8003dd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	4619      	mov	r1, r3
 8003d70:	481a      	ldr	r0, [pc, #104]	; (8003ddc <prvAddCurrentTaskToDelayedList+0xbc>)
 8003d72:	f7ff f8ac 	bl	8002ece <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003d76:	e026      	b.n	8003dc6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003d80:	4b14      	ldr	r3, [pc, #80]	; (8003dd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68ba      	ldr	r2, [r7, #8]
 8003d86:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003d88:	68ba      	ldr	r2, [r7, #8]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d209      	bcs.n	8003da4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d90:	4b13      	ldr	r3, [pc, #76]	; (8003de0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	4b0f      	ldr	r3, [pc, #60]	; (8003dd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	3304      	adds	r3, #4
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	4610      	mov	r0, r2
 8003d9e:	f7ff f8ba 	bl	8002f16 <vListInsert>
}
 8003da2:	e010      	b.n	8003dc6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003da4:	4b0f      	ldr	r3, [pc, #60]	; (8003de4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	4b0a      	ldr	r3, [pc, #40]	; (8003dd4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	3304      	adds	r3, #4
 8003dae:	4619      	mov	r1, r3
 8003db0:	4610      	mov	r0, r2
 8003db2:	f7ff f8b0 	bl	8002f16 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003db6:	4b0c      	ldr	r3, [pc, #48]	; (8003de8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68ba      	ldr	r2, [r7, #8]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d202      	bcs.n	8003dc6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003dc0:	4a09      	ldr	r2, [pc, #36]	; (8003de8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	6013      	str	r3, [r2, #0]
}
 8003dc6:	bf00      	nop
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	20003db4 	.word	0x20003db4
 8003dd4:	20003cb0 	.word	0x20003cb0
 8003dd8:	20003db8 	.word	0x20003db8
 8003ddc:	20003d9c 	.word	0x20003d9c
 8003de0:	20003d6c 	.word	0x20003d6c
 8003de4:	20003d68 	.word	0x20003d68
 8003de8:	20003dd0 	.word	0x20003dd0

08003dec <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8003dec:	b5b0      	push	{r4, r5, r7, lr}
 8003dee:	b090      	sub	sp, #64	; 0x40
 8003df0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003df2:	f7fc fbdd 	bl	80005b0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003df6:	f000 f845 	bl	8003e84 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003dfa:	f000 f8fd 	bl	8003ff8 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8003dfe:	f000 f8cb 	bl	8003f98 <MX_USART1_UART_Init>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8003e02:	4b1a      	ldr	r3, [pc, #104]	; (8003e6c <main+0x80>)
 8003e04:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8003e08:	461d      	mov	r5, r3
 8003e0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e0e:	682b      	ldr	r3, [r5, #0]
 8003e10:	6023      	str	r3, [r4, #0]
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003e12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e16:	2100      	movs	r1, #0
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7fe fe03 	bl	8002a24 <osThreadCreate>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	4b13      	ldr	r3, [pc, #76]	; (8003e70 <main+0x84>)
 8003e22:	601a      	str	r2, [r3, #0]

	/* definition and creation of CountDownTask */
	osThreadDef(CountDownTask, StartCounterDown, osPriorityNormal, 0, 128);
 8003e24:	4b13      	ldr	r3, [pc, #76]	; (8003e74 <main+0x88>)
 8003e26:	f107 0418 	add.w	r4, r7, #24
 8003e2a:	461d      	mov	r5, r3
 8003e2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e30:	682b      	ldr	r3, [r5, #0]
 8003e32:	6023      	str	r3, [r4, #0]
	CountDownTaskHandle = osThreadCreate(osThread(CountDownTask), NULL);
 8003e34:	f107 0318 	add.w	r3, r7, #24
 8003e38:	2100      	movs	r1, #0
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7fe fdf2 	bl	8002a24 <osThreadCreate>
 8003e40:	4602      	mov	r2, r0
 8003e42:	4b0d      	ldr	r3, [pc, #52]	; (8003e78 <main+0x8c>)
 8003e44:	601a      	str	r2, [r3, #0]

	/* definition and creation of TotallyUnnecces */
	osThreadDef(TotallyUnnecces, StartTotallyUnneccessaryTask, osPriorityIdle,
 8003e46:	4b0d      	ldr	r3, [pc, #52]	; (8003e7c <main+0x90>)
 8003e48:	1d3c      	adds	r4, r7, #4
 8003e4a:	461d      	mov	r5, r3
 8003e4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e50:	682b      	ldr	r3, [r5, #0]
 8003e52:	6023      	str	r3, [r4, #0]
			0, 128);
	TotallyUnneccesHandle = osThreadCreate(osThread(TotallyUnnecces), NULL);
 8003e54:	1d3b      	adds	r3, r7, #4
 8003e56:	2100      	movs	r1, #0
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7fe fde3 	bl	8002a24 <osThreadCreate>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	4b07      	ldr	r3, [pc, #28]	; (8003e80 <main+0x94>)
 8003e62:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8003e64:	f7fe fdd7 	bl	8002a16 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8003e68:	e7fe      	b.n	8003e68 <main+0x7c>
 8003e6a:	bf00      	nop
 8003e6c:	08005454 	.word	0x08005454
 8003e70:	20003dec 	.word	0x20003dec
 8003e74:	08005478 	.word	0x08005478
 8003e78:	20003df4 	.word	0x20003df4
 8003e7c:	0800549c 	.word	0x0800549c
 8003e80:	20003df0 	.word	0x20003df0

08003e84 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b0b4      	sub	sp, #208	; 0xd0
 8003e88:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003e8a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003e8e:	2230      	movs	r2, #48	; 0x30
 8003e90:	2100      	movs	r1, #0
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 fb78 	bl	8004588 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003e98:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	605a      	str	r2, [r3, #4]
 8003ea2:	609a      	str	r2, [r3, #8]
 8003ea4:	60da      	str	r2, [r3, #12]
 8003ea6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8003ea8:	f107 0308 	add.w	r3, r7, #8
 8003eac:	2284      	movs	r2, #132	; 0x84
 8003eae:	2100      	movs	r1, #0
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f000 fb69 	bl	8004588 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE()
 8003eb6:	4b36      	ldr	r3, [pc, #216]	; (8003f90 <SystemClock_Config+0x10c>)
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	4a35      	ldr	r2, [pc, #212]	; (8003f90 <SystemClock_Config+0x10c>)
 8003ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ec2:	4b33      	ldr	r3, [pc, #204]	; (8003f90 <SystemClock_Config+0x10c>)
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eca:	607b      	str	r3, [r7, #4]
 8003ecc:	687b      	ldr	r3, [r7, #4]
	;
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003ece:	4b31      	ldr	r3, [pc, #196]	; (8003f94 <SystemClock_Config+0x110>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003ed6:	4a2f      	ldr	r2, [pc, #188]	; (8003f94 <SystemClock_Config+0x110>)
 8003ed8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003edc:	6013      	str	r3, [r2, #0]
 8003ede:	4b2d      	ldr	r3, [pc, #180]	; (8003f94 <SystemClock_Config+0x110>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003ee6:	603b      	str	r3, [r7, #0]
 8003ee8:	683b      	ldr	r3, [r7, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003eea:	2302      	movs	r3, #2
 8003eec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003ef6:	2310      	movs	r3, #16
 8003ef8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003efc:	2302      	movs	r3, #2
 8003efe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003f02:	2300      	movs	r3, #0
 8003f04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLM = 10;
 8003f08:	230a      	movs	r3, #10
 8003f0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	RCC_OscInitStruct.PLL.PLLN = 210;
 8003f0e:	23d2      	movs	r3, #210	; 0xd2
 8003f10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003f14:	2302      	movs	r3, #2
 8003f16:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003f20:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7fc fdfd 	bl	8000b24 <HAL_RCC_OscConfig>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d001      	beq.n	8003f34 <SystemClock_Config+0xb0>
		Error_Handler();
 8003f30:	f000 f8f8 	bl	8004124 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003f34:	230f      	movs	r3, #15
 8003f36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003f3a:	2302      	movs	r3, #2
 8003f3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f40:	2300      	movs	r3, #0
 8003f42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003f46:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003f4a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003f4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8003f56:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003f5a:	2105      	movs	r1, #5
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7fd f851 	bl	8001004 <HAL_RCC_ClockConfig>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d001      	beq.n	8003f6c <SystemClock_Config+0xe8>
		Error_Handler();
 8003f68:	f000 f8dc 	bl	8004124 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003f6c:	2340      	movs	r3, #64	; 0x40
 8003f6e:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003f70:	2300      	movs	r3, #0
 8003f72:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8003f74:	f107 0308 	add.w	r3, r7, #8
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7fd fa43 	bl	8001404 <HAL_RCCEx_PeriphCLKConfig>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d001      	beq.n	8003f88 <SystemClock_Config+0x104>
		Error_Handler();
 8003f84:	f000 f8ce 	bl	8004124 <Error_Handler>
	}
}
 8003f88:	bf00      	nop
 8003f8a:	37d0      	adds	r7, #208	; 0xd0
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	40023800 	.word	0x40023800
 8003f94:	40007000 	.word	0x40007000

08003f98 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8003f9c:	4b14      	ldr	r3, [pc, #80]	; (8003ff0 <MX_USART1_UART_Init+0x58>)
 8003f9e:	4a15      	ldr	r2, [pc, #84]	; (8003ff4 <MX_USART1_UART_Init+0x5c>)
 8003fa0:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8003fa2:	4b13      	ldr	r3, [pc, #76]	; (8003ff0 <MX_USART1_UART_Init+0x58>)
 8003fa4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003fa8:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003faa:	4b11      	ldr	r3, [pc, #68]	; (8003ff0 <MX_USART1_UART_Init+0x58>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8003fb0:	4b0f      	ldr	r3, [pc, #60]	; (8003ff0 <MX_USART1_UART_Init+0x58>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8003fb6:	4b0e      	ldr	r3, [pc, #56]	; (8003ff0 <MX_USART1_UART_Init+0x58>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8003fbc:	4b0c      	ldr	r3, [pc, #48]	; (8003ff0 <MX_USART1_UART_Init+0x58>)
 8003fbe:	220c      	movs	r2, #12
 8003fc0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003fc2:	4b0b      	ldr	r3, [pc, #44]	; (8003ff0 <MX_USART1_UART_Init+0x58>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003fc8:	4b09      	ldr	r3, [pc, #36]	; (8003ff0 <MX_USART1_UART_Init+0x58>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003fce:	4b08      	ldr	r3, [pc, #32]	; (8003ff0 <MX_USART1_UART_Init+0x58>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003fd4:	4b06      	ldr	r3, [pc, #24]	; (8003ff0 <MX_USART1_UART_Init+0x58>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8003fda:	4805      	ldr	r0, [pc, #20]	; (8003ff0 <MX_USART1_UART_Init+0x58>)
 8003fdc:	f7fe f866 	bl	80020ac <HAL_UART_Init>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <MX_USART1_UART_Init+0x52>
		Error_Handler();
 8003fe6:	f000 f89d 	bl	8004124 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8003fea:	bf00      	nop
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	20003df8 	.word	0x20003df8
 8003ff4:	40011000 	.word	0x40011000

08003ff8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8003ff8:	b480      	push	{r7}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8003ffe:	4b1b      	ldr	r3, [pc, #108]	; (800406c <MX_GPIO_Init+0x74>)
 8004000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004002:	4a1a      	ldr	r2, [pc, #104]	; (800406c <MX_GPIO_Init+0x74>)
 8004004:	f043 0301 	orr.w	r3, r3, #1
 8004008:	6313      	str	r3, [r2, #48]	; 0x30
 800400a:	4b18      	ldr	r3, [pc, #96]	; (800406c <MX_GPIO_Init+0x74>)
 800400c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	60fb      	str	r3, [r7, #12]
 8004014:	68fb      	ldr	r3, [r7, #12]
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8004016:	4b15      	ldr	r3, [pc, #84]	; (800406c <MX_GPIO_Init+0x74>)
 8004018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401a:	4a14      	ldr	r2, [pc, #80]	; (800406c <MX_GPIO_Init+0x74>)
 800401c:	f043 0302 	orr.w	r3, r3, #2
 8004020:	6313      	str	r3, [r2, #48]	; 0x30
 8004022:	4b12      	ldr	r3, [pc, #72]	; (800406c <MX_GPIO_Init+0x74>)
 8004024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	60bb      	str	r3, [r7, #8]
 800402c:	68bb      	ldr	r3, [r7, #8]
	;
	__HAL_RCC_GPIOC_CLK_ENABLE()
 800402e:	4b0f      	ldr	r3, [pc, #60]	; (800406c <MX_GPIO_Init+0x74>)
 8004030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004032:	4a0e      	ldr	r2, [pc, #56]	; (800406c <MX_GPIO_Init+0x74>)
 8004034:	f043 0304 	orr.w	r3, r3, #4
 8004038:	6313      	str	r3, [r2, #48]	; 0x30
 800403a:	4b0c      	ldr	r3, [pc, #48]	; (800406c <MX_GPIO_Init+0x74>)
 800403c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403e:	f003 0304 	and.w	r3, r3, #4
 8004042:	607b      	str	r3, [r7, #4]
 8004044:	687b      	ldr	r3, [r7, #4]
	;
	__HAL_RCC_GPIOH_CLK_ENABLE()
 8004046:	4b09      	ldr	r3, [pc, #36]	; (800406c <MX_GPIO_Init+0x74>)
 8004048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404a:	4a08      	ldr	r2, [pc, #32]	; (800406c <MX_GPIO_Init+0x74>)
 800404c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004050:	6313      	str	r3, [r2, #48]	; 0x30
 8004052:	4b06      	ldr	r3, [pc, #24]	; (800406c <MX_GPIO_Init+0x74>)
 8004054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800405a:	603b      	str	r3, [r7, #0]
 800405c:	683b      	ldr	r3, [r7, #0]
	;

}
 800405e:	bf00      	nop
 8004060:	3714      	adds	r7, #20
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	40023800 	.word	0x40023800

08004070 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch) {
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 0xFFFF);
 8004078:	1d39      	adds	r1, r7, #4
 800407a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800407e:	2201      	movs	r2, #1
 8004080:	4803      	ldr	r0, [pc, #12]	; (8004090 <__io_putchar+0x20>)
 8004082:	f7fe f861 	bl	8002148 <HAL_UART_Transmit>
	return ch;
 8004086:	687b      	ldr	r3, [r7, #4]
}
 8004088:	4618      	mov	r0, r3
 800408a:	3708      	adds	r7, #8
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	20003df8 	.word	0x20003df8

08004094 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument) {
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]

	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

		counter--;
 800409c:	4b0b      	ldr	r3, [pc, #44]	; (80040cc <StartDefaultTask+0x38>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	3b01      	subs	r3, #1
 80040a2:	4a0a      	ldr	r2, [pc, #40]	; (80040cc <StartDefaultTask+0x38>)
 80040a4:	6013      	str	r3, [r2, #0]
		printf("%d\n", counter);
 80040a6:	4b09      	ldr	r3, [pc, #36]	; (80040cc <StartDefaultTask+0x38>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4619      	mov	r1, r3
 80040ac:	4808      	ldr	r0, [pc, #32]	; (80040d0 <StartDefaultTask+0x3c>)
 80040ae:	f000 fa73 	bl	8004598 <iprintf>
		osDelay(1000);
 80040b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80040b6:	f7fe fce8 	bl	8002a8a <osDelay>
		if (counter <= 1) {
 80040ba:	4b04      	ldr	r3, [pc, #16]	; (80040cc <StartDefaultTask+0x38>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	dcec      	bgt.n	800409c <StartDefaultTask+0x8>
			osThreadTerminate(NULL);
 80040c2:	2000      	movs	r0, #0
 80040c4:	f7fe fcd5 	bl	8002a72 <osThreadTerminate>
		counter--;
 80040c8:	e7e8      	b.n	800409c <StartDefaultTask+0x8>
 80040ca:	bf00      	nop
 80040cc:	20000008 	.word	0x20000008
 80040d0:	080054b0 	.word	0x080054b0

080040d4 <StartCounterDown>:
 * @brief Function implementing the CountDownTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCounterDown */
void StartCounterDown(void const * argument) {
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartCounterDown */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 80040dc:	2001      	movs	r0, #1
 80040de:	f7fe fcd4 	bl	8002a8a <osDelay>
 80040e2:	e7fb      	b.n	80040dc <StartCounterDown+0x8>

080040e4 <StartTotallyUnneccessaryTask>:
 * @brief Function implementing the TotallyUnnecces thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTotallyUnneccessaryTask */
void StartTotallyUnneccessaryTask(void const * argument) {
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
		//char text[12];
		//sprintf(text, "%d", counter);
		//HAL_UART_Transmit(&huart1, text, sizeof(text), 1000);
		//tester--;

		printf("I'm just running here\n");
 80040ec:	4803      	ldr	r0, [pc, #12]	; (80040fc <StartTotallyUnneccessaryTask+0x18>)
 80040ee:	f000 fac7 	bl	8004680 <puts>

		osDelay(280);
 80040f2:	f44f 708c 	mov.w	r0, #280	; 0x118
 80040f6:	f7fe fcc8 	bl	8002a8a <osDelay>
		printf("I'm just running here\n");
 80040fa:	e7f7      	b.n	80040ec <StartTotallyUnneccessaryTask+0x8>
 80040fc:	080054b4 	.word	0x080054b4

08004100 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM14) {
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a04      	ldr	r2, [pc, #16]	; (8004120 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d101      	bne.n	8004116 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8004112:	f7fc fa5b 	bl	80005cc <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8004116:	bf00      	nop
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	40002000 	.word	0x40002000

08004124 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8004124:	b480      	push	{r7}
 8004126:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8004128:	bf00      	nop
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
	...

08004134 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800413a:	4b11      	ldr	r3, [pc, #68]	; (8004180 <HAL_MspInit+0x4c>)
 800413c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413e:	4a10      	ldr	r2, [pc, #64]	; (8004180 <HAL_MspInit+0x4c>)
 8004140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004144:	6413      	str	r3, [r2, #64]	; 0x40
 8004146:	4b0e      	ldr	r3, [pc, #56]	; (8004180 <HAL_MspInit+0x4c>)
 8004148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800414e:	607b      	str	r3, [r7, #4]
 8004150:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004152:	4b0b      	ldr	r3, [pc, #44]	; (8004180 <HAL_MspInit+0x4c>)
 8004154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004156:	4a0a      	ldr	r2, [pc, #40]	; (8004180 <HAL_MspInit+0x4c>)
 8004158:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800415c:	6453      	str	r3, [r2, #68]	; 0x44
 800415e:	4b08      	ldr	r3, [pc, #32]	; (8004180 <HAL_MspInit+0x4c>)
 8004160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004166:	603b      	str	r3, [r7, #0]
 8004168:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800416a:	2200      	movs	r2, #0
 800416c:	210f      	movs	r1, #15
 800416e:	f06f 0001 	mvn.w	r0, #1
 8004172:	f7fc fb03 	bl	800077c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004176:	bf00      	nop
 8004178:	3708      	adds	r7, #8
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	40023800 	.word	0x40023800

08004184 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b08a      	sub	sp, #40	; 0x28
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800418c:	f107 0314 	add.w	r3, r7, #20
 8004190:	2200      	movs	r2, #0
 8004192:	601a      	str	r2, [r3, #0]
 8004194:	605a      	str	r2, [r3, #4]
 8004196:	609a      	str	r2, [r3, #8]
 8004198:	60da      	str	r2, [r3, #12]
 800419a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a25      	ldr	r2, [pc, #148]	; (8004238 <HAL_UART_MspInit+0xb4>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d144      	bne.n	8004230 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80041a6:	4b25      	ldr	r3, [pc, #148]	; (800423c <HAL_UART_MspInit+0xb8>)
 80041a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041aa:	4a24      	ldr	r2, [pc, #144]	; (800423c <HAL_UART_MspInit+0xb8>)
 80041ac:	f043 0310 	orr.w	r3, r3, #16
 80041b0:	6453      	str	r3, [r2, #68]	; 0x44
 80041b2:	4b22      	ldr	r3, [pc, #136]	; (800423c <HAL_UART_MspInit+0xb8>)
 80041b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b6:	f003 0310 	and.w	r3, r3, #16
 80041ba:	613b      	str	r3, [r7, #16]
 80041bc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041be:	4b1f      	ldr	r3, [pc, #124]	; (800423c <HAL_UART_MspInit+0xb8>)
 80041c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c2:	4a1e      	ldr	r2, [pc, #120]	; (800423c <HAL_UART_MspInit+0xb8>)
 80041c4:	f043 0302 	orr.w	r3, r3, #2
 80041c8:	6313      	str	r3, [r2, #48]	; 0x30
 80041ca:	4b1c      	ldr	r3, [pc, #112]	; (800423c <HAL_UART_MspInit+0xb8>)
 80041cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	60fb      	str	r3, [r7, #12]
 80041d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041d6:	4b19      	ldr	r3, [pc, #100]	; (800423c <HAL_UART_MspInit+0xb8>)
 80041d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041da:	4a18      	ldr	r2, [pc, #96]	; (800423c <HAL_UART_MspInit+0xb8>)
 80041dc:	f043 0301 	orr.w	r3, r3, #1
 80041e0:	6313      	str	r3, [r2, #48]	; 0x30
 80041e2:	4b16      	ldr	r3, [pc, #88]	; (800423c <HAL_UART_MspInit+0xb8>)
 80041e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	60bb      	str	r3, [r7, #8]
 80041ec:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80041ee:	2380      	movs	r3, #128	; 0x80
 80041f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041f2:	2302      	movs	r3, #2
 80041f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041f6:	2300      	movs	r3, #0
 80041f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041fa:	2303      	movs	r3, #3
 80041fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80041fe:	2307      	movs	r3, #7
 8004200:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004202:	f107 0314 	add.w	r3, r7, #20
 8004206:	4619      	mov	r1, r3
 8004208:	480d      	ldr	r0, [pc, #52]	; (8004240 <HAL_UART_MspInit+0xbc>)
 800420a:	f7fc fae1 	bl	80007d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800420e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004212:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004214:	2302      	movs	r3, #2
 8004216:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004218:	2300      	movs	r3, #0
 800421a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800421c:	2303      	movs	r3, #3
 800421e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004220:	2307      	movs	r3, #7
 8004222:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004224:	f107 0314 	add.w	r3, r7, #20
 8004228:	4619      	mov	r1, r3
 800422a:	4806      	ldr	r0, [pc, #24]	; (8004244 <HAL_UART_MspInit+0xc0>)
 800422c:	f7fc fad0 	bl	80007d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004230:	bf00      	nop
 8004232:	3728      	adds	r7, #40	; 0x28
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	40011000 	.word	0x40011000
 800423c:	40023800 	.word	0x40023800
 8004240:	40020400 	.word	0x40020400
 8004244:	40020000 	.word	0x40020000

08004248 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b08c      	sub	sp, #48	; 0x30
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004250:	2300      	movs	r3, #0
 8004252:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004254:	2300      	movs	r3, #0
 8004256:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0); 
 8004258:	2200      	movs	r2, #0
 800425a:	6879      	ldr	r1, [r7, #4]
 800425c:	202d      	movs	r0, #45	; 0x2d
 800425e:	f7fc fa8d 	bl	800077c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn); 
 8004262:	202d      	movs	r0, #45	; 0x2d
 8004264:	f7fc faa6 	bl	80007b4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8004268:	4b1f      	ldr	r3, [pc, #124]	; (80042e8 <HAL_InitTick+0xa0>)
 800426a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426c:	4a1e      	ldr	r2, [pc, #120]	; (80042e8 <HAL_InitTick+0xa0>)
 800426e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004272:	6413      	str	r3, [r2, #64]	; 0x40
 8004274:	4b1c      	ldr	r3, [pc, #112]	; (80042e8 <HAL_InitTick+0xa0>)
 8004276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800427c:	60fb      	str	r3, [r7, #12]
 800427e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004280:	f107 0210 	add.w	r2, r7, #16
 8004284:	f107 0314 	add.w	r3, r7, #20
 8004288:	4611      	mov	r1, r2
 800428a:	4618      	mov	r0, r3
 800428c:	f7fd f888 	bl	80013a0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004290:	f7fd f85e 	bl	8001350 <HAL_RCC_GetPCLK1Freq>
 8004294:	4603      	mov	r3, r0
 8004296:	005b      	lsls	r3, r3, #1
 8004298:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800429a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429c:	4a13      	ldr	r2, [pc, #76]	; (80042ec <HAL_InitTick+0xa4>)
 800429e:	fba2 2303 	umull	r2, r3, r2, r3
 80042a2:	0c9b      	lsrs	r3, r3, #18
 80042a4:	3b01      	subs	r3, #1
 80042a6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80042a8:	4b11      	ldr	r3, [pc, #68]	; (80042f0 <HAL_InitTick+0xa8>)
 80042aa:	4a12      	ldr	r2, [pc, #72]	; (80042f4 <HAL_InitTick+0xac>)
 80042ac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000 / 1000) - 1;
 80042ae:	4b10      	ldr	r3, [pc, #64]	; (80042f0 <HAL_InitTick+0xa8>)
 80042b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80042b4:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80042b6:	4a0e      	ldr	r2, [pc, #56]	; (80042f0 <HAL_InitTick+0xa8>)
 80042b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ba:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80042bc:	4b0c      	ldr	r3, [pc, #48]	; (80042f0 <HAL_InitTick+0xa8>)
 80042be:	2200      	movs	r2, #0
 80042c0:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042c2:	4b0b      	ldr	r3, [pc, #44]	; (80042f0 <HAL_InitTick+0xa8>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 80042c8:	4809      	ldr	r0, [pc, #36]	; (80042f0 <HAL_InitTick+0xa8>)
 80042ca:	f7fd fc89 	bl	8001be0 <HAL_TIM_Base_Init>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d104      	bne.n	80042de <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 80042d4:	4806      	ldr	r0, [pc, #24]	; (80042f0 <HAL_InitTick+0xa8>)
 80042d6:	f7fd fcb9 	bl	8001c4c <HAL_TIM_Base_Start_IT>
 80042da:	4603      	mov	r3, r0
 80042dc:	e000      	b.n	80042e0 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3730      	adds	r7, #48	; 0x30
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	40023800 	.word	0x40023800
 80042ec:	431bde83 	.word	0x431bde83
 80042f0:	20003e78 	.word	0x20003e78
 80042f4:	40002000 	.word	0x40002000

080042f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80042f8:	b480      	push	{r7}
 80042fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80042fc:	bf00      	nop
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004306:	b480      	push	{r7}
 8004308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800430a:	e7fe      	b.n	800430a <HardFault_Handler+0x4>

0800430c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800430c:	b480      	push	{r7}
 800430e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004310:	e7fe      	b.n	8004310 <MemManage_Handler+0x4>

08004312 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004312:	b480      	push	{r7}
 8004314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004316:	e7fe      	b.n	8004316 <BusFault_Handler+0x4>

08004318 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004318:	b480      	push	{r7}
 800431a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800431c:	e7fe      	b.n	800431c <UsageFault_Handler+0x4>

0800431e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800431e:	b480      	push	{r7}
 8004320:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004322:	bf00      	nop
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8004330:	4802      	ldr	r0, [pc, #8]	; (800433c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8004332:	f7fd fcb5 	bl	8001ca0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8004336:	bf00      	nop
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	20003e78 	.word	0x20003e78

08004340 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800434c:	2300      	movs	r3, #0
 800434e:	617b      	str	r3, [r7, #20]
 8004350:	e00a      	b.n	8004368 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004352:	f3af 8000 	nop.w
 8004356:	4601      	mov	r1, r0
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	1c5a      	adds	r2, r3, #1
 800435c:	60ba      	str	r2, [r7, #8]
 800435e:	b2ca      	uxtb	r2, r1
 8004360:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	3301      	adds	r3, #1
 8004366:	617b      	str	r3, [r7, #20]
 8004368:	697a      	ldr	r2, [r7, #20]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	429a      	cmp	r2, r3
 800436e:	dbf0      	blt.n	8004352 <_read+0x12>
	}

return len;
 8004370:	687b      	ldr	r3, [r7, #4]
}
 8004372:	4618      	mov	r0, r3
 8004374:	3718      	adds	r7, #24
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b086      	sub	sp, #24
 800437e:	af00      	add	r7, sp, #0
 8004380:	60f8      	str	r0, [r7, #12]
 8004382:	60b9      	str	r1, [r7, #8]
 8004384:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004386:	2300      	movs	r3, #0
 8004388:	617b      	str	r3, [r7, #20]
 800438a:	e009      	b.n	80043a0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	1c5a      	adds	r2, r3, #1
 8004390:	60ba      	str	r2, [r7, #8]
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	4618      	mov	r0, r3
 8004396:	f7ff fe6b 	bl	8004070 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	3301      	adds	r3, #1
 800439e:	617b      	str	r3, [r7, #20]
 80043a0:	697a      	ldr	r2, [r7, #20]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	dbf1      	blt.n	800438c <_write+0x12>
	}
	return len;
 80043a8:	687b      	ldr	r3, [r7, #4]
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3718      	adds	r7, #24
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <_close>:

int _close(int file)
{
 80043b2:	b480      	push	{r7}
 80043b4:	b083      	sub	sp, #12
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
	return -1;
 80043ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80043be:	4618      	mov	r0, r3
 80043c0:	370c      	adds	r7, #12
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr

080043ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80043ca:	b480      	push	{r7}
 80043cc:	b083      	sub	sp, #12
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
 80043d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80043da:	605a      	str	r2, [r3, #4]
	return 0;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	370c      	adds	r7, #12
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr

080043ea <_isatty>:

int _isatty(int file)
{
 80043ea:	b480      	push	{r7}
 80043ec:	b083      	sub	sp, #12
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
	return 1;
 80043f2:	2301      	movs	r3, #1
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
	return 0;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3714      	adds	r7, #20
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
	...

0800441c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004424:	4b11      	ldr	r3, [pc, #68]	; (800446c <_sbrk+0x50>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d102      	bne.n	8004432 <_sbrk+0x16>
		heap_end = &end;
 800442c:	4b0f      	ldr	r3, [pc, #60]	; (800446c <_sbrk+0x50>)
 800442e:	4a10      	ldr	r2, [pc, #64]	; (8004470 <_sbrk+0x54>)
 8004430:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004432:	4b0e      	ldr	r3, [pc, #56]	; (800446c <_sbrk+0x50>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004438:	4b0c      	ldr	r3, [pc, #48]	; (800446c <_sbrk+0x50>)
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4413      	add	r3, r2
 8004440:	466a      	mov	r2, sp
 8004442:	4293      	cmp	r3, r2
 8004444:	d907      	bls.n	8004456 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004446:	f000 f875 	bl	8004534 <__errno>
 800444a:	4602      	mov	r2, r0
 800444c:	230c      	movs	r3, #12
 800444e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004450:	f04f 33ff 	mov.w	r3, #4294967295
 8004454:	e006      	b.n	8004464 <_sbrk+0x48>
	}

	heap_end += incr;
 8004456:	4b05      	ldr	r3, [pc, #20]	; (800446c <_sbrk+0x50>)
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4413      	add	r3, r2
 800445e:	4a03      	ldr	r2, [pc, #12]	; (800446c <_sbrk+0x50>)
 8004460:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004462:	68fb      	ldr	r3, [r7, #12]
}
 8004464:	4618      	mov	r0, r3
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	20003ddc 	.word	0x20003ddc
 8004470:	20003ec0 	.word	0x20003ec0

08004474 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004474:	b480      	push	{r7}
 8004476:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004478:	4b15      	ldr	r3, [pc, #84]	; (80044d0 <SystemInit+0x5c>)
 800447a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800447e:	4a14      	ldr	r2, [pc, #80]	; (80044d0 <SystemInit+0x5c>)
 8004480:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004484:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004488:	4b12      	ldr	r3, [pc, #72]	; (80044d4 <SystemInit+0x60>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a11      	ldr	r2, [pc, #68]	; (80044d4 <SystemInit+0x60>)
 800448e:	f043 0301 	orr.w	r3, r3, #1
 8004492:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004494:	4b0f      	ldr	r3, [pc, #60]	; (80044d4 <SystemInit+0x60>)
 8004496:	2200      	movs	r2, #0
 8004498:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800449a:	4b0e      	ldr	r3, [pc, #56]	; (80044d4 <SystemInit+0x60>)
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	490d      	ldr	r1, [pc, #52]	; (80044d4 <SystemInit+0x60>)
 80044a0:	4b0d      	ldr	r3, [pc, #52]	; (80044d8 <SystemInit+0x64>)
 80044a2:	4013      	ands	r3, r2
 80044a4:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80044a6:	4b0b      	ldr	r3, [pc, #44]	; (80044d4 <SystemInit+0x60>)
 80044a8:	4a0c      	ldr	r2, [pc, #48]	; (80044dc <SystemInit+0x68>)
 80044aa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80044ac:	4b09      	ldr	r3, [pc, #36]	; (80044d4 <SystemInit+0x60>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a08      	ldr	r2, [pc, #32]	; (80044d4 <SystemInit+0x60>)
 80044b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044b6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80044b8:	4b06      	ldr	r3, [pc, #24]	; (80044d4 <SystemInit+0x60>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80044be:	4b04      	ldr	r3, [pc, #16]	; (80044d0 <SystemInit+0x5c>)
 80044c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80044c4:	609a      	str	r2, [r3, #8]
#endif
}
 80044c6:	bf00      	nop
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	e000ed00 	.word	0xe000ed00
 80044d4:	40023800 	.word	0x40023800
 80044d8:	fef6ffff 	.word	0xfef6ffff
 80044dc:	24003010 	.word	0x24003010

080044e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80044e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004518 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80044e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80044e6:	e003      	b.n	80044f0 <LoopCopyDataInit>

080044e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80044e8:	4b0c      	ldr	r3, [pc, #48]	; (800451c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80044ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80044ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80044ee:	3104      	adds	r1, #4

080044f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80044f0:	480b      	ldr	r0, [pc, #44]	; (8004520 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80044f2:	4b0c      	ldr	r3, [pc, #48]	; (8004524 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80044f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80044f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80044f8:	d3f6      	bcc.n	80044e8 <CopyDataInit>
  ldr  r2, =_sbss
 80044fa:	4a0b      	ldr	r2, [pc, #44]	; (8004528 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80044fc:	e002      	b.n	8004504 <LoopFillZerobss>

080044fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80044fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004500:	f842 3b04 	str.w	r3, [r2], #4

08004504 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004504:	4b09      	ldr	r3, [pc, #36]	; (800452c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004506:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004508:	d3f9      	bcc.n	80044fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800450a:	f7ff ffb3 	bl	8004474 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800450e:	f000 f817 	bl	8004540 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004512:	f7ff fc6b 	bl	8003dec <main>
  bx  lr    
 8004516:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004518:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800451c:	0800558c 	.word	0x0800558c
  ldr  r0, =_sdata
 8004520:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004524:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8004528:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 800452c:	20003ebc 	.word	0x20003ebc

08004530 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004530:	e7fe      	b.n	8004530 <ADC_IRQHandler>
	...

08004534 <__errno>:
 8004534:	4b01      	ldr	r3, [pc, #4]	; (800453c <__errno+0x8>)
 8004536:	6818      	ldr	r0, [r3, #0]
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	20000010 	.word	0x20000010

08004540 <__libc_init_array>:
 8004540:	b570      	push	{r4, r5, r6, lr}
 8004542:	4e0d      	ldr	r6, [pc, #52]	; (8004578 <__libc_init_array+0x38>)
 8004544:	4c0d      	ldr	r4, [pc, #52]	; (800457c <__libc_init_array+0x3c>)
 8004546:	1ba4      	subs	r4, r4, r6
 8004548:	10a4      	asrs	r4, r4, #2
 800454a:	2500      	movs	r5, #0
 800454c:	42a5      	cmp	r5, r4
 800454e:	d109      	bne.n	8004564 <__libc_init_array+0x24>
 8004550:	4e0b      	ldr	r6, [pc, #44]	; (8004580 <__libc_init_array+0x40>)
 8004552:	4c0c      	ldr	r4, [pc, #48]	; (8004584 <__libc_init_array+0x44>)
 8004554:	f000 ff68 	bl	8005428 <_init>
 8004558:	1ba4      	subs	r4, r4, r6
 800455a:	10a4      	asrs	r4, r4, #2
 800455c:	2500      	movs	r5, #0
 800455e:	42a5      	cmp	r5, r4
 8004560:	d105      	bne.n	800456e <__libc_init_array+0x2e>
 8004562:	bd70      	pop	{r4, r5, r6, pc}
 8004564:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004568:	4798      	blx	r3
 800456a:	3501      	adds	r5, #1
 800456c:	e7ee      	b.n	800454c <__libc_init_array+0xc>
 800456e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004572:	4798      	blx	r3
 8004574:	3501      	adds	r5, #1
 8004576:	e7f2      	b.n	800455e <__libc_init_array+0x1e>
 8004578:	08005584 	.word	0x08005584
 800457c:	08005584 	.word	0x08005584
 8004580:	08005584 	.word	0x08005584
 8004584:	08005588 	.word	0x08005588

08004588 <memset>:
 8004588:	4402      	add	r2, r0
 800458a:	4603      	mov	r3, r0
 800458c:	4293      	cmp	r3, r2
 800458e:	d100      	bne.n	8004592 <memset+0xa>
 8004590:	4770      	bx	lr
 8004592:	f803 1b01 	strb.w	r1, [r3], #1
 8004596:	e7f9      	b.n	800458c <memset+0x4>

08004598 <iprintf>:
 8004598:	b40f      	push	{r0, r1, r2, r3}
 800459a:	4b0a      	ldr	r3, [pc, #40]	; (80045c4 <iprintf+0x2c>)
 800459c:	b513      	push	{r0, r1, r4, lr}
 800459e:	681c      	ldr	r4, [r3, #0]
 80045a0:	b124      	cbz	r4, 80045ac <iprintf+0x14>
 80045a2:	69a3      	ldr	r3, [r4, #24]
 80045a4:	b913      	cbnz	r3, 80045ac <iprintf+0x14>
 80045a6:	4620      	mov	r0, r4
 80045a8:	f000 fa22 	bl	80049f0 <__sinit>
 80045ac:	ab05      	add	r3, sp, #20
 80045ae:	9a04      	ldr	r2, [sp, #16]
 80045b0:	68a1      	ldr	r1, [r4, #8]
 80045b2:	9301      	str	r3, [sp, #4]
 80045b4:	4620      	mov	r0, r4
 80045b6:	f000 fbdb 	bl	8004d70 <_vfiprintf_r>
 80045ba:	b002      	add	sp, #8
 80045bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045c0:	b004      	add	sp, #16
 80045c2:	4770      	bx	lr
 80045c4:	20000010 	.word	0x20000010

080045c8 <_puts_r>:
 80045c8:	b570      	push	{r4, r5, r6, lr}
 80045ca:	460e      	mov	r6, r1
 80045cc:	4605      	mov	r5, r0
 80045ce:	b118      	cbz	r0, 80045d8 <_puts_r+0x10>
 80045d0:	6983      	ldr	r3, [r0, #24]
 80045d2:	b90b      	cbnz	r3, 80045d8 <_puts_r+0x10>
 80045d4:	f000 fa0c 	bl	80049f0 <__sinit>
 80045d8:	69ab      	ldr	r3, [r5, #24]
 80045da:	68ac      	ldr	r4, [r5, #8]
 80045dc:	b913      	cbnz	r3, 80045e4 <_puts_r+0x1c>
 80045de:	4628      	mov	r0, r5
 80045e0:	f000 fa06 	bl	80049f0 <__sinit>
 80045e4:	4b23      	ldr	r3, [pc, #140]	; (8004674 <_puts_r+0xac>)
 80045e6:	429c      	cmp	r4, r3
 80045e8:	d117      	bne.n	800461a <_puts_r+0x52>
 80045ea:	686c      	ldr	r4, [r5, #4]
 80045ec:	89a3      	ldrh	r3, [r4, #12]
 80045ee:	071b      	lsls	r3, r3, #28
 80045f0:	d51d      	bpl.n	800462e <_puts_r+0x66>
 80045f2:	6923      	ldr	r3, [r4, #16]
 80045f4:	b1db      	cbz	r3, 800462e <_puts_r+0x66>
 80045f6:	3e01      	subs	r6, #1
 80045f8:	68a3      	ldr	r3, [r4, #8]
 80045fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80045fe:	3b01      	subs	r3, #1
 8004600:	60a3      	str	r3, [r4, #8]
 8004602:	b9e9      	cbnz	r1, 8004640 <_puts_r+0x78>
 8004604:	2b00      	cmp	r3, #0
 8004606:	da2e      	bge.n	8004666 <_puts_r+0x9e>
 8004608:	4622      	mov	r2, r4
 800460a:	210a      	movs	r1, #10
 800460c:	4628      	mov	r0, r5
 800460e:	f000 f83f 	bl	8004690 <__swbuf_r>
 8004612:	3001      	adds	r0, #1
 8004614:	d011      	beq.n	800463a <_puts_r+0x72>
 8004616:	200a      	movs	r0, #10
 8004618:	e011      	b.n	800463e <_puts_r+0x76>
 800461a:	4b17      	ldr	r3, [pc, #92]	; (8004678 <_puts_r+0xb0>)
 800461c:	429c      	cmp	r4, r3
 800461e:	d101      	bne.n	8004624 <_puts_r+0x5c>
 8004620:	68ac      	ldr	r4, [r5, #8]
 8004622:	e7e3      	b.n	80045ec <_puts_r+0x24>
 8004624:	4b15      	ldr	r3, [pc, #84]	; (800467c <_puts_r+0xb4>)
 8004626:	429c      	cmp	r4, r3
 8004628:	bf08      	it	eq
 800462a:	68ec      	ldreq	r4, [r5, #12]
 800462c:	e7de      	b.n	80045ec <_puts_r+0x24>
 800462e:	4621      	mov	r1, r4
 8004630:	4628      	mov	r0, r5
 8004632:	f000 f87f 	bl	8004734 <__swsetup_r>
 8004636:	2800      	cmp	r0, #0
 8004638:	d0dd      	beq.n	80045f6 <_puts_r+0x2e>
 800463a:	f04f 30ff 	mov.w	r0, #4294967295
 800463e:	bd70      	pop	{r4, r5, r6, pc}
 8004640:	2b00      	cmp	r3, #0
 8004642:	da04      	bge.n	800464e <_puts_r+0x86>
 8004644:	69a2      	ldr	r2, [r4, #24]
 8004646:	429a      	cmp	r2, r3
 8004648:	dc06      	bgt.n	8004658 <_puts_r+0x90>
 800464a:	290a      	cmp	r1, #10
 800464c:	d004      	beq.n	8004658 <_puts_r+0x90>
 800464e:	6823      	ldr	r3, [r4, #0]
 8004650:	1c5a      	adds	r2, r3, #1
 8004652:	6022      	str	r2, [r4, #0]
 8004654:	7019      	strb	r1, [r3, #0]
 8004656:	e7cf      	b.n	80045f8 <_puts_r+0x30>
 8004658:	4622      	mov	r2, r4
 800465a:	4628      	mov	r0, r5
 800465c:	f000 f818 	bl	8004690 <__swbuf_r>
 8004660:	3001      	adds	r0, #1
 8004662:	d1c9      	bne.n	80045f8 <_puts_r+0x30>
 8004664:	e7e9      	b.n	800463a <_puts_r+0x72>
 8004666:	6823      	ldr	r3, [r4, #0]
 8004668:	200a      	movs	r0, #10
 800466a:	1c5a      	adds	r2, r3, #1
 800466c:	6022      	str	r2, [r4, #0]
 800466e:	7018      	strb	r0, [r3, #0]
 8004670:	e7e5      	b.n	800463e <_puts_r+0x76>
 8004672:	bf00      	nop
 8004674:	08005508 	.word	0x08005508
 8004678:	08005528 	.word	0x08005528
 800467c:	080054e8 	.word	0x080054e8

08004680 <puts>:
 8004680:	4b02      	ldr	r3, [pc, #8]	; (800468c <puts+0xc>)
 8004682:	4601      	mov	r1, r0
 8004684:	6818      	ldr	r0, [r3, #0]
 8004686:	f7ff bf9f 	b.w	80045c8 <_puts_r>
 800468a:	bf00      	nop
 800468c:	20000010 	.word	0x20000010

08004690 <__swbuf_r>:
 8004690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004692:	460e      	mov	r6, r1
 8004694:	4614      	mov	r4, r2
 8004696:	4605      	mov	r5, r0
 8004698:	b118      	cbz	r0, 80046a2 <__swbuf_r+0x12>
 800469a:	6983      	ldr	r3, [r0, #24]
 800469c:	b90b      	cbnz	r3, 80046a2 <__swbuf_r+0x12>
 800469e:	f000 f9a7 	bl	80049f0 <__sinit>
 80046a2:	4b21      	ldr	r3, [pc, #132]	; (8004728 <__swbuf_r+0x98>)
 80046a4:	429c      	cmp	r4, r3
 80046a6:	d12a      	bne.n	80046fe <__swbuf_r+0x6e>
 80046a8:	686c      	ldr	r4, [r5, #4]
 80046aa:	69a3      	ldr	r3, [r4, #24]
 80046ac:	60a3      	str	r3, [r4, #8]
 80046ae:	89a3      	ldrh	r3, [r4, #12]
 80046b0:	071a      	lsls	r2, r3, #28
 80046b2:	d52e      	bpl.n	8004712 <__swbuf_r+0x82>
 80046b4:	6923      	ldr	r3, [r4, #16]
 80046b6:	b363      	cbz	r3, 8004712 <__swbuf_r+0x82>
 80046b8:	6923      	ldr	r3, [r4, #16]
 80046ba:	6820      	ldr	r0, [r4, #0]
 80046bc:	1ac0      	subs	r0, r0, r3
 80046be:	6963      	ldr	r3, [r4, #20]
 80046c0:	b2f6      	uxtb	r6, r6
 80046c2:	4283      	cmp	r3, r0
 80046c4:	4637      	mov	r7, r6
 80046c6:	dc04      	bgt.n	80046d2 <__swbuf_r+0x42>
 80046c8:	4621      	mov	r1, r4
 80046ca:	4628      	mov	r0, r5
 80046cc:	f000 f926 	bl	800491c <_fflush_r>
 80046d0:	bb28      	cbnz	r0, 800471e <__swbuf_r+0x8e>
 80046d2:	68a3      	ldr	r3, [r4, #8]
 80046d4:	3b01      	subs	r3, #1
 80046d6:	60a3      	str	r3, [r4, #8]
 80046d8:	6823      	ldr	r3, [r4, #0]
 80046da:	1c5a      	adds	r2, r3, #1
 80046dc:	6022      	str	r2, [r4, #0]
 80046de:	701e      	strb	r6, [r3, #0]
 80046e0:	6963      	ldr	r3, [r4, #20]
 80046e2:	3001      	adds	r0, #1
 80046e4:	4283      	cmp	r3, r0
 80046e6:	d004      	beq.n	80046f2 <__swbuf_r+0x62>
 80046e8:	89a3      	ldrh	r3, [r4, #12]
 80046ea:	07db      	lsls	r3, r3, #31
 80046ec:	d519      	bpl.n	8004722 <__swbuf_r+0x92>
 80046ee:	2e0a      	cmp	r6, #10
 80046f0:	d117      	bne.n	8004722 <__swbuf_r+0x92>
 80046f2:	4621      	mov	r1, r4
 80046f4:	4628      	mov	r0, r5
 80046f6:	f000 f911 	bl	800491c <_fflush_r>
 80046fa:	b190      	cbz	r0, 8004722 <__swbuf_r+0x92>
 80046fc:	e00f      	b.n	800471e <__swbuf_r+0x8e>
 80046fe:	4b0b      	ldr	r3, [pc, #44]	; (800472c <__swbuf_r+0x9c>)
 8004700:	429c      	cmp	r4, r3
 8004702:	d101      	bne.n	8004708 <__swbuf_r+0x78>
 8004704:	68ac      	ldr	r4, [r5, #8]
 8004706:	e7d0      	b.n	80046aa <__swbuf_r+0x1a>
 8004708:	4b09      	ldr	r3, [pc, #36]	; (8004730 <__swbuf_r+0xa0>)
 800470a:	429c      	cmp	r4, r3
 800470c:	bf08      	it	eq
 800470e:	68ec      	ldreq	r4, [r5, #12]
 8004710:	e7cb      	b.n	80046aa <__swbuf_r+0x1a>
 8004712:	4621      	mov	r1, r4
 8004714:	4628      	mov	r0, r5
 8004716:	f000 f80d 	bl	8004734 <__swsetup_r>
 800471a:	2800      	cmp	r0, #0
 800471c:	d0cc      	beq.n	80046b8 <__swbuf_r+0x28>
 800471e:	f04f 37ff 	mov.w	r7, #4294967295
 8004722:	4638      	mov	r0, r7
 8004724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004726:	bf00      	nop
 8004728:	08005508 	.word	0x08005508
 800472c:	08005528 	.word	0x08005528
 8004730:	080054e8 	.word	0x080054e8

08004734 <__swsetup_r>:
 8004734:	4b32      	ldr	r3, [pc, #200]	; (8004800 <__swsetup_r+0xcc>)
 8004736:	b570      	push	{r4, r5, r6, lr}
 8004738:	681d      	ldr	r5, [r3, #0]
 800473a:	4606      	mov	r6, r0
 800473c:	460c      	mov	r4, r1
 800473e:	b125      	cbz	r5, 800474a <__swsetup_r+0x16>
 8004740:	69ab      	ldr	r3, [r5, #24]
 8004742:	b913      	cbnz	r3, 800474a <__swsetup_r+0x16>
 8004744:	4628      	mov	r0, r5
 8004746:	f000 f953 	bl	80049f0 <__sinit>
 800474a:	4b2e      	ldr	r3, [pc, #184]	; (8004804 <__swsetup_r+0xd0>)
 800474c:	429c      	cmp	r4, r3
 800474e:	d10f      	bne.n	8004770 <__swsetup_r+0x3c>
 8004750:	686c      	ldr	r4, [r5, #4]
 8004752:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004756:	b29a      	uxth	r2, r3
 8004758:	0715      	lsls	r5, r2, #28
 800475a:	d42c      	bmi.n	80047b6 <__swsetup_r+0x82>
 800475c:	06d0      	lsls	r0, r2, #27
 800475e:	d411      	bmi.n	8004784 <__swsetup_r+0x50>
 8004760:	2209      	movs	r2, #9
 8004762:	6032      	str	r2, [r6, #0]
 8004764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004768:	81a3      	strh	r3, [r4, #12]
 800476a:	f04f 30ff 	mov.w	r0, #4294967295
 800476e:	e03e      	b.n	80047ee <__swsetup_r+0xba>
 8004770:	4b25      	ldr	r3, [pc, #148]	; (8004808 <__swsetup_r+0xd4>)
 8004772:	429c      	cmp	r4, r3
 8004774:	d101      	bne.n	800477a <__swsetup_r+0x46>
 8004776:	68ac      	ldr	r4, [r5, #8]
 8004778:	e7eb      	b.n	8004752 <__swsetup_r+0x1e>
 800477a:	4b24      	ldr	r3, [pc, #144]	; (800480c <__swsetup_r+0xd8>)
 800477c:	429c      	cmp	r4, r3
 800477e:	bf08      	it	eq
 8004780:	68ec      	ldreq	r4, [r5, #12]
 8004782:	e7e6      	b.n	8004752 <__swsetup_r+0x1e>
 8004784:	0751      	lsls	r1, r2, #29
 8004786:	d512      	bpl.n	80047ae <__swsetup_r+0x7a>
 8004788:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800478a:	b141      	cbz	r1, 800479e <__swsetup_r+0x6a>
 800478c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004790:	4299      	cmp	r1, r3
 8004792:	d002      	beq.n	800479a <__swsetup_r+0x66>
 8004794:	4630      	mov	r0, r6
 8004796:	f000 fa19 	bl	8004bcc <_free_r>
 800479a:	2300      	movs	r3, #0
 800479c:	6363      	str	r3, [r4, #52]	; 0x34
 800479e:	89a3      	ldrh	r3, [r4, #12]
 80047a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80047a4:	81a3      	strh	r3, [r4, #12]
 80047a6:	2300      	movs	r3, #0
 80047a8:	6063      	str	r3, [r4, #4]
 80047aa:	6923      	ldr	r3, [r4, #16]
 80047ac:	6023      	str	r3, [r4, #0]
 80047ae:	89a3      	ldrh	r3, [r4, #12]
 80047b0:	f043 0308 	orr.w	r3, r3, #8
 80047b4:	81a3      	strh	r3, [r4, #12]
 80047b6:	6923      	ldr	r3, [r4, #16]
 80047b8:	b94b      	cbnz	r3, 80047ce <__swsetup_r+0x9a>
 80047ba:	89a3      	ldrh	r3, [r4, #12]
 80047bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80047c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047c4:	d003      	beq.n	80047ce <__swsetup_r+0x9a>
 80047c6:	4621      	mov	r1, r4
 80047c8:	4630      	mov	r0, r6
 80047ca:	f000 f9bf 	bl	8004b4c <__smakebuf_r>
 80047ce:	89a2      	ldrh	r2, [r4, #12]
 80047d0:	f012 0301 	ands.w	r3, r2, #1
 80047d4:	d00c      	beq.n	80047f0 <__swsetup_r+0xbc>
 80047d6:	2300      	movs	r3, #0
 80047d8:	60a3      	str	r3, [r4, #8]
 80047da:	6963      	ldr	r3, [r4, #20]
 80047dc:	425b      	negs	r3, r3
 80047de:	61a3      	str	r3, [r4, #24]
 80047e0:	6923      	ldr	r3, [r4, #16]
 80047e2:	b953      	cbnz	r3, 80047fa <__swsetup_r+0xc6>
 80047e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047e8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80047ec:	d1ba      	bne.n	8004764 <__swsetup_r+0x30>
 80047ee:	bd70      	pop	{r4, r5, r6, pc}
 80047f0:	0792      	lsls	r2, r2, #30
 80047f2:	bf58      	it	pl
 80047f4:	6963      	ldrpl	r3, [r4, #20]
 80047f6:	60a3      	str	r3, [r4, #8]
 80047f8:	e7f2      	b.n	80047e0 <__swsetup_r+0xac>
 80047fa:	2000      	movs	r0, #0
 80047fc:	e7f7      	b.n	80047ee <__swsetup_r+0xba>
 80047fe:	bf00      	nop
 8004800:	20000010 	.word	0x20000010
 8004804:	08005508 	.word	0x08005508
 8004808:	08005528 	.word	0x08005528
 800480c:	080054e8 	.word	0x080054e8

08004810 <__sflush_r>:
 8004810:	898a      	ldrh	r2, [r1, #12]
 8004812:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004816:	4605      	mov	r5, r0
 8004818:	0710      	lsls	r0, r2, #28
 800481a:	460c      	mov	r4, r1
 800481c:	d458      	bmi.n	80048d0 <__sflush_r+0xc0>
 800481e:	684b      	ldr	r3, [r1, #4]
 8004820:	2b00      	cmp	r3, #0
 8004822:	dc05      	bgt.n	8004830 <__sflush_r+0x20>
 8004824:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004826:	2b00      	cmp	r3, #0
 8004828:	dc02      	bgt.n	8004830 <__sflush_r+0x20>
 800482a:	2000      	movs	r0, #0
 800482c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004830:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004832:	2e00      	cmp	r6, #0
 8004834:	d0f9      	beq.n	800482a <__sflush_r+0x1a>
 8004836:	2300      	movs	r3, #0
 8004838:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800483c:	682f      	ldr	r7, [r5, #0]
 800483e:	6a21      	ldr	r1, [r4, #32]
 8004840:	602b      	str	r3, [r5, #0]
 8004842:	d032      	beq.n	80048aa <__sflush_r+0x9a>
 8004844:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004846:	89a3      	ldrh	r3, [r4, #12]
 8004848:	075a      	lsls	r2, r3, #29
 800484a:	d505      	bpl.n	8004858 <__sflush_r+0x48>
 800484c:	6863      	ldr	r3, [r4, #4]
 800484e:	1ac0      	subs	r0, r0, r3
 8004850:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004852:	b10b      	cbz	r3, 8004858 <__sflush_r+0x48>
 8004854:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004856:	1ac0      	subs	r0, r0, r3
 8004858:	2300      	movs	r3, #0
 800485a:	4602      	mov	r2, r0
 800485c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800485e:	6a21      	ldr	r1, [r4, #32]
 8004860:	4628      	mov	r0, r5
 8004862:	47b0      	blx	r6
 8004864:	1c43      	adds	r3, r0, #1
 8004866:	89a3      	ldrh	r3, [r4, #12]
 8004868:	d106      	bne.n	8004878 <__sflush_r+0x68>
 800486a:	6829      	ldr	r1, [r5, #0]
 800486c:	291d      	cmp	r1, #29
 800486e:	d848      	bhi.n	8004902 <__sflush_r+0xf2>
 8004870:	4a29      	ldr	r2, [pc, #164]	; (8004918 <__sflush_r+0x108>)
 8004872:	40ca      	lsrs	r2, r1
 8004874:	07d6      	lsls	r6, r2, #31
 8004876:	d544      	bpl.n	8004902 <__sflush_r+0xf2>
 8004878:	2200      	movs	r2, #0
 800487a:	6062      	str	r2, [r4, #4]
 800487c:	04d9      	lsls	r1, r3, #19
 800487e:	6922      	ldr	r2, [r4, #16]
 8004880:	6022      	str	r2, [r4, #0]
 8004882:	d504      	bpl.n	800488e <__sflush_r+0x7e>
 8004884:	1c42      	adds	r2, r0, #1
 8004886:	d101      	bne.n	800488c <__sflush_r+0x7c>
 8004888:	682b      	ldr	r3, [r5, #0]
 800488a:	b903      	cbnz	r3, 800488e <__sflush_r+0x7e>
 800488c:	6560      	str	r0, [r4, #84]	; 0x54
 800488e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004890:	602f      	str	r7, [r5, #0]
 8004892:	2900      	cmp	r1, #0
 8004894:	d0c9      	beq.n	800482a <__sflush_r+0x1a>
 8004896:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800489a:	4299      	cmp	r1, r3
 800489c:	d002      	beq.n	80048a4 <__sflush_r+0x94>
 800489e:	4628      	mov	r0, r5
 80048a0:	f000 f994 	bl	8004bcc <_free_r>
 80048a4:	2000      	movs	r0, #0
 80048a6:	6360      	str	r0, [r4, #52]	; 0x34
 80048a8:	e7c0      	b.n	800482c <__sflush_r+0x1c>
 80048aa:	2301      	movs	r3, #1
 80048ac:	4628      	mov	r0, r5
 80048ae:	47b0      	blx	r6
 80048b0:	1c41      	adds	r1, r0, #1
 80048b2:	d1c8      	bne.n	8004846 <__sflush_r+0x36>
 80048b4:	682b      	ldr	r3, [r5, #0]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d0c5      	beq.n	8004846 <__sflush_r+0x36>
 80048ba:	2b1d      	cmp	r3, #29
 80048bc:	d001      	beq.n	80048c2 <__sflush_r+0xb2>
 80048be:	2b16      	cmp	r3, #22
 80048c0:	d101      	bne.n	80048c6 <__sflush_r+0xb6>
 80048c2:	602f      	str	r7, [r5, #0]
 80048c4:	e7b1      	b.n	800482a <__sflush_r+0x1a>
 80048c6:	89a3      	ldrh	r3, [r4, #12]
 80048c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048cc:	81a3      	strh	r3, [r4, #12]
 80048ce:	e7ad      	b.n	800482c <__sflush_r+0x1c>
 80048d0:	690f      	ldr	r7, [r1, #16]
 80048d2:	2f00      	cmp	r7, #0
 80048d4:	d0a9      	beq.n	800482a <__sflush_r+0x1a>
 80048d6:	0793      	lsls	r3, r2, #30
 80048d8:	680e      	ldr	r6, [r1, #0]
 80048da:	bf08      	it	eq
 80048dc:	694b      	ldreq	r3, [r1, #20]
 80048de:	600f      	str	r7, [r1, #0]
 80048e0:	bf18      	it	ne
 80048e2:	2300      	movne	r3, #0
 80048e4:	eba6 0807 	sub.w	r8, r6, r7
 80048e8:	608b      	str	r3, [r1, #8]
 80048ea:	f1b8 0f00 	cmp.w	r8, #0
 80048ee:	dd9c      	ble.n	800482a <__sflush_r+0x1a>
 80048f0:	4643      	mov	r3, r8
 80048f2:	463a      	mov	r2, r7
 80048f4:	6a21      	ldr	r1, [r4, #32]
 80048f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80048f8:	4628      	mov	r0, r5
 80048fa:	47b0      	blx	r6
 80048fc:	2800      	cmp	r0, #0
 80048fe:	dc06      	bgt.n	800490e <__sflush_r+0xfe>
 8004900:	89a3      	ldrh	r3, [r4, #12]
 8004902:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004906:	81a3      	strh	r3, [r4, #12]
 8004908:	f04f 30ff 	mov.w	r0, #4294967295
 800490c:	e78e      	b.n	800482c <__sflush_r+0x1c>
 800490e:	4407      	add	r7, r0
 8004910:	eba8 0800 	sub.w	r8, r8, r0
 8004914:	e7e9      	b.n	80048ea <__sflush_r+0xda>
 8004916:	bf00      	nop
 8004918:	20400001 	.word	0x20400001

0800491c <_fflush_r>:
 800491c:	b538      	push	{r3, r4, r5, lr}
 800491e:	690b      	ldr	r3, [r1, #16]
 8004920:	4605      	mov	r5, r0
 8004922:	460c      	mov	r4, r1
 8004924:	b1db      	cbz	r3, 800495e <_fflush_r+0x42>
 8004926:	b118      	cbz	r0, 8004930 <_fflush_r+0x14>
 8004928:	6983      	ldr	r3, [r0, #24]
 800492a:	b90b      	cbnz	r3, 8004930 <_fflush_r+0x14>
 800492c:	f000 f860 	bl	80049f0 <__sinit>
 8004930:	4b0c      	ldr	r3, [pc, #48]	; (8004964 <_fflush_r+0x48>)
 8004932:	429c      	cmp	r4, r3
 8004934:	d109      	bne.n	800494a <_fflush_r+0x2e>
 8004936:	686c      	ldr	r4, [r5, #4]
 8004938:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800493c:	b17b      	cbz	r3, 800495e <_fflush_r+0x42>
 800493e:	4621      	mov	r1, r4
 8004940:	4628      	mov	r0, r5
 8004942:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004946:	f7ff bf63 	b.w	8004810 <__sflush_r>
 800494a:	4b07      	ldr	r3, [pc, #28]	; (8004968 <_fflush_r+0x4c>)
 800494c:	429c      	cmp	r4, r3
 800494e:	d101      	bne.n	8004954 <_fflush_r+0x38>
 8004950:	68ac      	ldr	r4, [r5, #8]
 8004952:	e7f1      	b.n	8004938 <_fflush_r+0x1c>
 8004954:	4b05      	ldr	r3, [pc, #20]	; (800496c <_fflush_r+0x50>)
 8004956:	429c      	cmp	r4, r3
 8004958:	bf08      	it	eq
 800495a:	68ec      	ldreq	r4, [r5, #12]
 800495c:	e7ec      	b.n	8004938 <_fflush_r+0x1c>
 800495e:	2000      	movs	r0, #0
 8004960:	bd38      	pop	{r3, r4, r5, pc}
 8004962:	bf00      	nop
 8004964:	08005508 	.word	0x08005508
 8004968:	08005528 	.word	0x08005528
 800496c:	080054e8 	.word	0x080054e8

08004970 <std>:
 8004970:	2300      	movs	r3, #0
 8004972:	b510      	push	{r4, lr}
 8004974:	4604      	mov	r4, r0
 8004976:	e9c0 3300 	strd	r3, r3, [r0]
 800497a:	6083      	str	r3, [r0, #8]
 800497c:	8181      	strh	r1, [r0, #12]
 800497e:	6643      	str	r3, [r0, #100]	; 0x64
 8004980:	81c2      	strh	r2, [r0, #14]
 8004982:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004986:	6183      	str	r3, [r0, #24]
 8004988:	4619      	mov	r1, r3
 800498a:	2208      	movs	r2, #8
 800498c:	305c      	adds	r0, #92	; 0x5c
 800498e:	f7ff fdfb 	bl	8004588 <memset>
 8004992:	4b05      	ldr	r3, [pc, #20]	; (80049a8 <std+0x38>)
 8004994:	6263      	str	r3, [r4, #36]	; 0x24
 8004996:	4b05      	ldr	r3, [pc, #20]	; (80049ac <std+0x3c>)
 8004998:	62a3      	str	r3, [r4, #40]	; 0x28
 800499a:	4b05      	ldr	r3, [pc, #20]	; (80049b0 <std+0x40>)
 800499c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800499e:	4b05      	ldr	r3, [pc, #20]	; (80049b4 <std+0x44>)
 80049a0:	6224      	str	r4, [r4, #32]
 80049a2:	6323      	str	r3, [r4, #48]	; 0x30
 80049a4:	bd10      	pop	{r4, pc}
 80049a6:	bf00      	nop
 80049a8:	080052cd 	.word	0x080052cd
 80049ac:	080052ef 	.word	0x080052ef
 80049b0:	08005327 	.word	0x08005327
 80049b4:	0800534b 	.word	0x0800534b

080049b8 <_cleanup_r>:
 80049b8:	4901      	ldr	r1, [pc, #4]	; (80049c0 <_cleanup_r+0x8>)
 80049ba:	f000 b885 	b.w	8004ac8 <_fwalk_reent>
 80049be:	bf00      	nop
 80049c0:	0800491d 	.word	0x0800491d

080049c4 <__sfmoreglue>:
 80049c4:	b570      	push	{r4, r5, r6, lr}
 80049c6:	1e4a      	subs	r2, r1, #1
 80049c8:	2568      	movs	r5, #104	; 0x68
 80049ca:	4355      	muls	r5, r2
 80049cc:	460e      	mov	r6, r1
 80049ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80049d2:	f000 f949 	bl	8004c68 <_malloc_r>
 80049d6:	4604      	mov	r4, r0
 80049d8:	b140      	cbz	r0, 80049ec <__sfmoreglue+0x28>
 80049da:	2100      	movs	r1, #0
 80049dc:	e9c0 1600 	strd	r1, r6, [r0]
 80049e0:	300c      	adds	r0, #12
 80049e2:	60a0      	str	r0, [r4, #8]
 80049e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80049e8:	f7ff fdce 	bl	8004588 <memset>
 80049ec:	4620      	mov	r0, r4
 80049ee:	bd70      	pop	{r4, r5, r6, pc}

080049f0 <__sinit>:
 80049f0:	6983      	ldr	r3, [r0, #24]
 80049f2:	b510      	push	{r4, lr}
 80049f4:	4604      	mov	r4, r0
 80049f6:	bb33      	cbnz	r3, 8004a46 <__sinit+0x56>
 80049f8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80049fc:	6503      	str	r3, [r0, #80]	; 0x50
 80049fe:	4b12      	ldr	r3, [pc, #72]	; (8004a48 <__sinit+0x58>)
 8004a00:	4a12      	ldr	r2, [pc, #72]	; (8004a4c <__sinit+0x5c>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	6282      	str	r2, [r0, #40]	; 0x28
 8004a06:	4298      	cmp	r0, r3
 8004a08:	bf04      	itt	eq
 8004a0a:	2301      	moveq	r3, #1
 8004a0c:	6183      	streq	r3, [r0, #24]
 8004a0e:	f000 f81f 	bl	8004a50 <__sfp>
 8004a12:	6060      	str	r0, [r4, #4]
 8004a14:	4620      	mov	r0, r4
 8004a16:	f000 f81b 	bl	8004a50 <__sfp>
 8004a1a:	60a0      	str	r0, [r4, #8]
 8004a1c:	4620      	mov	r0, r4
 8004a1e:	f000 f817 	bl	8004a50 <__sfp>
 8004a22:	2200      	movs	r2, #0
 8004a24:	60e0      	str	r0, [r4, #12]
 8004a26:	2104      	movs	r1, #4
 8004a28:	6860      	ldr	r0, [r4, #4]
 8004a2a:	f7ff ffa1 	bl	8004970 <std>
 8004a2e:	2201      	movs	r2, #1
 8004a30:	2109      	movs	r1, #9
 8004a32:	68a0      	ldr	r0, [r4, #8]
 8004a34:	f7ff ff9c 	bl	8004970 <std>
 8004a38:	2202      	movs	r2, #2
 8004a3a:	2112      	movs	r1, #18
 8004a3c:	68e0      	ldr	r0, [r4, #12]
 8004a3e:	f7ff ff97 	bl	8004970 <std>
 8004a42:	2301      	movs	r3, #1
 8004a44:	61a3      	str	r3, [r4, #24]
 8004a46:	bd10      	pop	{r4, pc}
 8004a48:	080054e4 	.word	0x080054e4
 8004a4c:	080049b9 	.word	0x080049b9

08004a50 <__sfp>:
 8004a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a52:	4b1b      	ldr	r3, [pc, #108]	; (8004ac0 <__sfp+0x70>)
 8004a54:	681e      	ldr	r6, [r3, #0]
 8004a56:	69b3      	ldr	r3, [r6, #24]
 8004a58:	4607      	mov	r7, r0
 8004a5a:	b913      	cbnz	r3, 8004a62 <__sfp+0x12>
 8004a5c:	4630      	mov	r0, r6
 8004a5e:	f7ff ffc7 	bl	80049f0 <__sinit>
 8004a62:	3648      	adds	r6, #72	; 0x48
 8004a64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	d503      	bpl.n	8004a74 <__sfp+0x24>
 8004a6c:	6833      	ldr	r3, [r6, #0]
 8004a6e:	b133      	cbz	r3, 8004a7e <__sfp+0x2e>
 8004a70:	6836      	ldr	r6, [r6, #0]
 8004a72:	e7f7      	b.n	8004a64 <__sfp+0x14>
 8004a74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004a78:	b16d      	cbz	r5, 8004a96 <__sfp+0x46>
 8004a7a:	3468      	adds	r4, #104	; 0x68
 8004a7c:	e7f4      	b.n	8004a68 <__sfp+0x18>
 8004a7e:	2104      	movs	r1, #4
 8004a80:	4638      	mov	r0, r7
 8004a82:	f7ff ff9f 	bl	80049c4 <__sfmoreglue>
 8004a86:	6030      	str	r0, [r6, #0]
 8004a88:	2800      	cmp	r0, #0
 8004a8a:	d1f1      	bne.n	8004a70 <__sfp+0x20>
 8004a8c:	230c      	movs	r3, #12
 8004a8e:	603b      	str	r3, [r7, #0]
 8004a90:	4604      	mov	r4, r0
 8004a92:	4620      	mov	r0, r4
 8004a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a96:	4b0b      	ldr	r3, [pc, #44]	; (8004ac4 <__sfp+0x74>)
 8004a98:	6665      	str	r5, [r4, #100]	; 0x64
 8004a9a:	e9c4 5500 	strd	r5, r5, [r4]
 8004a9e:	60a5      	str	r5, [r4, #8]
 8004aa0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004aa4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004aa8:	2208      	movs	r2, #8
 8004aaa:	4629      	mov	r1, r5
 8004aac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004ab0:	f7ff fd6a 	bl	8004588 <memset>
 8004ab4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004ab8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004abc:	e7e9      	b.n	8004a92 <__sfp+0x42>
 8004abe:	bf00      	nop
 8004ac0:	080054e4 	.word	0x080054e4
 8004ac4:	ffff0001 	.word	0xffff0001

08004ac8 <_fwalk_reent>:
 8004ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004acc:	4680      	mov	r8, r0
 8004ace:	4689      	mov	r9, r1
 8004ad0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004ad4:	2600      	movs	r6, #0
 8004ad6:	b914      	cbnz	r4, 8004ade <_fwalk_reent+0x16>
 8004ad8:	4630      	mov	r0, r6
 8004ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ade:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004ae2:	3f01      	subs	r7, #1
 8004ae4:	d501      	bpl.n	8004aea <_fwalk_reent+0x22>
 8004ae6:	6824      	ldr	r4, [r4, #0]
 8004ae8:	e7f5      	b.n	8004ad6 <_fwalk_reent+0xe>
 8004aea:	89ab      	ldrh	r3, [r5, #12]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d907      	bls.n	8004b00 <_fwalk_reent+0x38>
 8004af0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004af4:	3301      	adds	r3, #1
 8004af6:	d003      	beq.n	8004b00 <_fwalk_reent+0x38>
 8004af8:	4629      	mov	r1, r5
 8004afa:	4640      	mov	r0, r8
 8004afc:	47c8      	blx	r9
 8004afe:	4306      	orrs	r6, r0
 8004b00:	3568      	adds	r5, #104	; 0x68
 8004b02:	e7ee      	b.n	8004ae2 <_fwalk_reent+0x1a>

08004b04 <__swhatbuf_r>:
 8004b04:	b570      	push	{r4, r5, r6, lr}
 8004b06:	460e      	mov	r6, r1
 8004b08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b0c:	2900      	cmp	r1, #0
 8004b0e:	b096      	sub	sp, #88	; 0x58
 8004b10:	4614      	mov	r4, r2
 8004b12:	461d      	mov	r5, r3
 8004b14:	da07      	bge.n	8004b26 <__swhatbuf_r+0x22>
 8004b16:	2300      	movs	r3, #0
 8004b18:	602b      	str	r3, [r5, #0]
 8004b1a:	89b3      	ldrh	r3, [r6, #12]
 8004b1c:	061a      	lsls	r2, r3, #24
 8004b1e:	d410      	bmi.n	8004b42 <__swhatbuf_r+0x3e>
 8004b20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b24:	e00e      	b.n	8004b44 <__swhatbuf_r+0x40>
 8004b26:	466a      	mov	r2, sp
 8004b28:	f000 fc36 	bl	8005398 <_fstat_r>
 8004b2c:	2800      	cmp	r0, #0
 8004b2e:	dbf2      	blt.n	8004b16 <__swhatbuf_r+0x12>
 8004b30:	9a01      	ldr	r2, [sp, #4]
 8004b32:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004b36:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004b3a:	425a      	negs	r2, r3
 8004b3c:	415a      	adcs	r2, r3
 8004b3e:	602a      	str	r2, [r5, #0]
 8004b40:	e7ee      	b.n	8004b20 <__swhatbuf_r+0x1c>
 8004b42:	2340      	movs	r3, #64	; 0x40
 8004b44:	2000      	movs	r0, #0
 8004b46:	6023      	str	r3, [r4, #0]
 8004b48:	b016      	add	sp, #88	; 0x58
 8004b4a:	bd70      	pop	{r4, r5, r6, pc}

08004b4c <__smakebuf_r>:
 8004b4c:	898b      	ldrh	r3, [r1, #12]
 8004b4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004b50:	079d      	lsls	r5, r3, #30
 8004b52:	4606      	mov	r6, r0
 8004b54:	460c      	mov	r4, r1
 8004b56:	d507      	bpl.n	8004b68 <__smakebuf_r+0x1c>
 8004b58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004b5c:	6023      	str	r3, [r4, #0]
 8004b5e:	6123      	str	r3, [r4, #16]
 8004b60:	2301      	movs	r3, #1
 8004b62:	6163      	str	r3, [r4, #20]
 8004b64:	b002      	add	sp, #8
 8004b66:	bd70      	pop	{r4, r5, r6, pc}
 8004b68:	ab01      	add	r3, sp, #4
 8004b6a:	466a      	mov	r2, sp
 8004b6c:	f7ff ffca 	bl	8004b04 <__swhatbuf_r>
 8004b70:	9900      	ldr	r1, [sp, #0]
 8004b72:	4605      	mov	r5, r0
 8004b74:	4630      	mov	r0, r6
 8004b76:	f000 f877 	bl	8004c68 <_malloc_r>
 8004b7a:	b948      	cbnz	r0, 8004b90 <__smakebuf_r+0x44>
 8004b7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b80:	059a      	lsls	r2, r3, #22
 8004b82:	d4ef      	bmi.n	8004b64 <__smakebuf_r+0x18>
 8004b84:	f023 0303 	bic.w	r3, r3, #3
 8004b88:	f043 0302 	orr.w	r3, r3, #2
 8004b8c:	81a3      	strh	r3, [r4, #12]
 8004b8e:	e7e3      	b.n	8004b58 <__smakebuf_r+0xc>
 8004b90:	4b0d      	ldr	r3, [pc, #52]	; (8004bc8 <__smakebuf_r+0x7c>)
 8004b92:	62b3      	str	r3, [r6, #40]	; 0x28
 8004b94:	89a3      	ldrh	r3, [r4, #12]
 8004b96:	6020      	str	r0, [r4, #0]
 8004b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b9c:	81a3      	strh	r3, [r4, #12]
 8004b9e:	9b00      	ldr	r3, [sp, #0]
 8004ba0:	6163      	str	r3, [r4, #20]
 8004ba2:	9b01      	ldr	r3, [sp, #4]
 8004ba4:	6120      	str	r0, [r4, #16]
 8004ba6:	b15b      	cbz	r3, 8004bc0 <__smakebuf_r+0x74>
 8004ba8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bac:	4630      	mov	r0, r6
 8004bae:	f000 fc05 	bl	80053bc <_isatty_r>
 8004bb2:	b128      	cbz	r0, 8004bc0 <__smakebuf_r+0x74>
 8004bb4:	89a3      	ldrh	r3, [r4, #12]
 8004bb6:	f023 0303 	bic.w	r3, r3, #3
 8004bba:	f043 0301 	orr.w	r3, r3, #1
 8004bbe:	81a3      	strh	r3, [r4, #12]
 8004bc0:	89a3      	ldrh	r3, [r4, #12]
 8004bc2:	431d      	orrs	r5, r3
 8004bc4:	81a5      	strh	r5, [r4, #12]
 8004bc6:	e7cd      	b.n	8004b64 <__smakebuf_r+0x18>
 8004bc8:	080049b9 	.word	0x080049b9

08004bcc <_free_r>:
 8004bcc:	b538      	push	{r3, r4, r5, lr}
 8004bce:	4605      	mov	r5, r0
 8004bd0:	2900      	cmp	r1, #0
 8004bd2:	d045      	beq.n	8004c60 <_free_r+0x94>
 8004bd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bd8:	1f0c      	subs	r4, r1, #4
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	bfb8      	it	lt
 8004bde:	18e4      	addlt	r4, r4, r3
 8004be0:	f000 fc0e 	bl	8005400 <__malloc_lock>
 8004be4:	4a1f      	ldr	r2, [pc, #124]	; (8004c64 <_free_r+0x98>)
 8004be6:	6813      	ldr	r3, [r2, #0]
 8004be8:	4610      	mov	r0, r2
 8004bea:	b933      	cbnz	r3, 8004bfa <_free_r+0x2e>
 8004bec:	6063      	str	r3, [r4, #4]
 8004bee:	6014      	str	r4, [r2, #0]
 8004bf0:	4628      	mov	r0, r5
 8004bf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004bf6:	f000 bc04 	b.w	8005402 <__malloc_unlock>
 8004bfa:	42a3      	cmp	r3, r4
 8004bfc:	d90c      	bls.n	8004c18 <_free_r+0x4c>
 8004bfe:	6821      	ldr	r1, [r4, #0]
 8004c00:	1862      	adds	r2, r4, r1
 8004c02:	4293      	cmp	r3, r2
 8004c04:	bf04      	itt	eq
 8004c06:	681a      	ldreq	r2, [r3, #0]
 8004c08:	685b      	ldreq	r3, [r3, #4]
 8004c0a:	6063      	str	r3, [r4, #4]
 8004c0c:	bf04      	itt	eq
 8004c0e:	1852      	addeq	r2, r2, r1
 8004c10:	6022      	streq	r2, [r4, #0]
 8004c12:	6004      	str	r4, [r0, #0]
 8004c14:	e7ec      	b.n	8004bf0 <_free_r+0x24>
 8004c16:	4613      	mov	r3, r2
 8004c18:	685a      	ldr	r2, [r3, #4]
 8004c1a:	b10a      	cbz	r2, 8004c20 <_free_r+0x54>
 8004c1c:	42a2      	cmp	r2, r4
 8004c1e:	d9fa      	bls.n	8004c16 <_free_r+0x4a>
 8004c20:	6819      	ldr	r1, [r3, #0]
 8004c22:	1858      	adds	r0, r3, r1
 8004c24:	42a0      	cmp	r0, r4
 8004c26:	d10b      	bne.n	8004c40 <_free_r+0x74>
 8004c28:	6820      	ldr	r0, [r4, #0]
 8004c2a:	4401      	add	r1, r0
 8004c2c:	1858      	adds	r0, r3, r1
 8004c2e:	4282      	cmp	r2, r0
 8004c30:	6019      	str	r1, [r3, #0]
 8004c32:	d1dd      	bne.n	8004bf0 <_free_r+0x24>
 8004c34:	6810      	ldr	r0, [r2, #0]
 8004c36:	6852      	ldr	r2, [r2, #4]
 8004c38:	605a      	str	r2, [r3, #4]
 8004c3a:	4401      	add	r1, r0
 8004c3c:	6019      	str	r1, [r3, #0]
 8004c3e:	e7d7      	b.n	8004bf0 <_free_r+0x24>
 8004c40:	d902      	bls.n	8004c48 <_free_r+0x7c>
 8004c42:	230c      	movs	r3, #12
 8004c44:	602b      	str	r3, [r5, #0]
 8004c46:	e7d3      	b.n	8004bf0 <_free_r+0x24>
 8004c48:	6820      	ldr	r0, [r4, #0]
 8004c4a:	1821      	adds	r1, r4, r0
 8004c4c:	428a      	cmp	r2, r1
 8004c4e:	bf04      	itt	eq
 8004c50:	6811      	ldreq	r1, [r2, #0]
 8004c52:	6852      	ldreq	r2, [r2, #4]
 8004c54:	6062      	str	r2, [r4, #4]
 8004c56:	bf04      	itt	eq
 8004c58:	1809      	addeq	r1, r1, r0
 8004c5a:	6021      	streq	r1, [r4, #0]
 8004c5c:	605c      	str	r4, [r3, #4]
 8004c5e:	e7c7      	b.n	8004bf0 <_free_r+0x24>
 8004c60:	bd38      	pop	{r3, r4, r5, pc}
 8004c62:	bf00      	nop
 8004c64:	20003de0 	.word	0x20003de0

08004c68 <_malloc_r>:
 8004c68:	b570      	push	{r4, r5, r6, lr}
 8004c6a:	1ccd      	adds	r5, r1, #3
 8004c6c:	f025 0503 	bic.w	r5, r5, #3
 8004c70:	3508      	adds	r5, #8
 8004c72:	2d0c      	cmp	r5, #12
 8004c74:	bf38      	it	cc
 8004c76:	250c      	movcc	r5, #12
 8004c78:	2d00      	cmp	r5, #0
 8004c7a:	4606      	mov	r6, r0
 8004c7c:	db01      	blt.n	8004c82 <_malloc_r+0x1a>
 8004c7e:	42a9      	cmp	r1, r5
 8004c80:	d903      	bls.n	8004c8a <_malloc_r+0x22>
 8004c82:	230c      	movs	r3, #12
 8004c84:	6033      	str	r3, [r6, #0]
 8004c86:	2000      	movs	r0, #0
 8004c88:	bd70      	pop	{r4, r5, r6, pc}
 8004c8a:	f000 fbb9 	bl	8005400 <__malloc_lock>
 8004c8e:	4a21      	ldr	r2, [pc, #132]	; (8004d14 <_malloc_r+0xac>)
 8004c90:	6814      	ldr	r4, [r2, #0]
 8004c92:	4621      	mov	r1, r4
 8004c94:	b991      	cbnz	r1, 8004cbc <_malloc_r+0x54>
 8004c96:	4c20      	ldr	r4, [pc, #128]	; (8004d18 <_malloc_r+0xb0>)
 8004c98:	6823      	ldr	r3, [r4, #0]
 8004c9a:	b91b      	cbnz	r3, 8004ca4 <_malloc_r+0x3c>
 8004c9c:	4630      	mov	r0, r6
 8004c9e:	f000 fb05 	bl	80052ac <_sbrk_r>
 8004ca2:	6020      	str	r0, [r4, #0]
 8004ca4:	4629      	mov	r1, r5
 8004ca6:	4630      	mov	r0, r6
 8004ca8:	f000 fb00 	bl	80052ac <_sbrk_r>
 8004cac:	1c43      	adds	r3, r0, #1
 8004cae:	d124      	bne.n	8004cfa <_malloc_r+0x92>
 8004cb0:	230c      	movs	r3, #12
 8004cb2:	6033      	str	r3, [r6, #0]
 8004cb4:	4630      	mov	r0, r6
 8004cb6:	f000 fba4 	bl	8005402 <__malloc_unlock>
 8004cba:	e7e4      	b.n	8004c86 <_malloc_r+0x1e>
 8004cbc:	680b      	ldr	r3, [r1, #0]
 8004cbe:	1b5b      	subs	r3, r3, r5
 8004cc0:	d418      	bmi.n	8004cf4 <_malloc_r+0x8c>
 8004cc2:	2b0b      	cmp	r3, #11
 8004cc4:	d90f      	bls.n	8004ce6 <_malloc_r+0x7e>
 8004cc6:	600b      	str	r3, [r1, #0]
 8004cc8:	50cd      	str	r5, [r1, r3]
 8004cca:	18cc      	adds	r4, r1, r3
 8004ccc:	4630      	mov	r0, r6
 8004cce:	f000 fb98 	bl	8005402 <__malloc_unlock>
 8004cd2:	f104 000b 	add.w	r0, r4, #11
 8004cd6:	1d23      	adds	r3, r4, #4
 8004cd8:	f020 0007 	bic.w	r0, r0, #7
 8004cdc:	1ac3      	subs	r3, r0, r3
 8004cde:	d0d3      	beq.n	8004c88 <_malloc_r+0x20>
 8004ce0:	425a      	negs	r2, r3
 8004ce2:	50e2      	str	r2, [r4, r3]
 8004ce4:	e7d0      	b.n	8004c88 <_malloc_r+0x20>
 8004ce6:	428c      	cmp	r4, r1
 8004ce8:	684b      	ldr	r3, [r1, #4]
 8004cea:	bf16      	itet	ne
 8004cec:	6063      	strne	r3, [r4, #4]
 8004cee:	6013      	streq	r3, [r2, #0]
 8004cf0:	460c      	movne	r4, r1
 8004cf2:	e7eb      	b.n	8004ccc <_malloc_r+0x64>
 8004cf4:	460c      	mov	r4, r1
 8004cf6:	6849      	ldr	r1, [r1, #4]
 8004cf8:	e7cc      	b.n	8004c94 <_malloc_r+0x2c>
 8004cfa:	1cc4      	adds	r4, r0, #3
 8004cfc:	f024 0403 	bic.w	r4, r4, #3
 8004d00:	42a0      	cmp	r0, r4
 8004d02:	d005      	beq.n	8004d10 <_malloc_r+0xa8>
 8004d04:	1a21      	subs	r1, r4, r0
 8004d06:	4630      	mov	r0, r6
 8004d08:	f000 fad0 	bl	80052ac <_sbrk_r>
 8004d0c:	3001      	adds	r0, #1
 8004d0e:	d0cf      	beq.n	8004cb0 <_malloc_r+0x48>
 8004d10:	6025      	str	r5, [r4, #0]
 8004d12:	e7db      	b.n	8004ccc <_malloc_r+0x64>
 8004d14:	20003de0 	.word	0x20003de0
 8004d18:	20003de4 	.word	0x20003de4

08004d1c <__sfputc_r>:
 8004d1c:	6893      	ldr	r3, [r2, #8]
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	b410      	push	{r4}
 8004d24:	6093      	str	r3, [r2, #8]
 8004d26:	da08      	bge.n	8004d3a <__sfputc_r+0x1e>
 8004d28:	6994      	ldr	r4, [r2, #24]
 8004d2a:	42a3      	cmp	r3, r4
 8004d2c:	db01      	blt.n	8004d32 <__sfputc_r+0x16>
 8004d2e:	290a      	cmp	r1, #10
 8004d30:	d103      	bne.n	8004d3a <__sfputc_r+0x1e>
 8004d32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d36:	f7ff bcab 	b.w	8004690 <__swbuf_r>
 8004d3a:	6813      	ldr	r3, [r2, #0]
 8004d3c:	1c58      	adds	r0, r3, #1
 8004d3e:	6010      	str	r0, [r2, #0]
 8004d40:	7019      	strb	r1, [r3, #0]
 8004d42:	4608      	mov	r0, r1
 8004d44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d48:	4770      	bx	lr

08004d4a <__sfputs_r>:
 8004d4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d4c:	4606      	mov	r6, r0
 8004d4e:	460f      	mov	r7, r1
 8004d50:	4614      	mov	r4, r2
 8004d52:	18d5      	adds	r5, r2, r3
 8004d54:	42ac      	cmp	r4, r5
 8004d56:	d101      	bne.n	8004d5c <__sfputs_r+0x12>
 8004d58:	2000      	movs	r0, #0
 8004d5a:	e007      	b.n	8004d6c <__sfputs_r+0x22>
 8004d5c:	463a      	mov	r2, r7
 8004d5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d62:	4630      	mov	r0, r6
 8004d64:	f7ff ffda 	bl	8004d1c <__sfputc_r>
 8004d68:	1c43      	adds	r3, r0, #1
 8004d6a:	d1f3      	bne.n	8004d54 <__sfputs_r+0xa>
 8004d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004d70 <_vfiprintf_r>:
 8004d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d74:	460c      	mov	r4, r1
 8004d76:	b09d      	sub	sp, #116	; 0x74
 8004d78:	4617      	mov	r7, r2
 8004d7a:	461d      	mov	r5, r3
 8004d7c:	4606      	mov	r6, r0
 8004d7e:	b118      	cbz	r0, 8004d88 <_vfiprintf_r+0x18>
 8004d80:	6983      	ldr	r3, [r0, #24]
 8004d82:	b90b      	cbnz	r3, 8004d88 <_vfiprintf_r+0x18>
 8004d84:	f7ff fe34 	bl	80049f0 <__sinit>
 8004d88:	4b7c      	ldr	r3, [pc, #496]	; (8004f7c <_vfiprintf_r+0x20c>)
 8004d8a:	429c      	cmp	r4, r3
 8004d8c:	d158      	bne.n	8004e40 <_vfiprintf_r+0xd0>
 8004d8e:	6874      	ldr	r4, [r6, #4]
 8004d90:	89a3      	ldrh	r3, [r4, #12]
 8004d92:	0718      	lsls	r0, r3, #28
 8004d94:	d55e      	bpl.n	8004e54 <_vfiprintf_r+0xe4>
 8004d96:	6923      	ldr	r3, [r4, #16]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d05b      	beq.n	8004e54 <_vfiprintf_r+0xe4>
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	9309      	str	r3, [sp, #36]	; 0x24
 8004da0:	2320      	movs	r3, #32
 8004da2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004da6:	2330      	movs	r3, #48	; 0x30
 8004da8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004dac:	9503      	str	r5, [sp, #12]
 8004dae:	f04f 0b01 	mov.w	fp, #1
 8004db2:	46b8      	mov	r8, r7
 8004db4:	4645      	mov	r5, r8
 8004db6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004dba:	b10b      	cbz	r3, 8004dc0 <_vfiprintf_r+0x50>
 8004dbc:	2b25      	cmp	r3, #37	; 0x25
 8004dbe:	d154      	bne.n	8004e6a <_vfiprintf_r+0xfa>
 8004dc0:	ebb8 0a07 	subs.w	sl, r8, r7
 8004dc4:	d00b      	beq.n	8004dde <_vfiprintf_r+0x6e>
 8004dc6:	4653      	mov	r3, sl
 8004dc8:	463a      	mov	r2, r7
 8004dca:	4621      	mov	r1, r4
 8004dcc:	4630      	mov	r0, r6
 8004dce:	f7ff ffbc 	bl	8004d4a <__sfputs_r>
 8004dd2:	3001      	adds	r0, #1
 8004dd4:	f000 80c2 	beq.w	8004f5c <_vfiprintf_r+0x1ec>
 8004dd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dda:	4453      	add	r3, sl
 8004ddc:	9309      	str	r3, [sp, #36]	; 0x24
 8004dde:	f898 3000 	ldrb.w	r3, [r8]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	f000 80ba 	beq.w	8004f5c <_vfiprintf_r+0x1ec>
 8004de8:	2300      	movs	r3, #0
 8004dea:	f04f 32ff 	mov.w	r2, #4294967295
 8004dee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004df2:	9304      	str	r3, [sp, #16]
 8004df4:	9307      	str	r3, [sp, #28]
 8004df6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004dfa:	931a      	str	r3, [sp, #104]	; 0x68
 8004dfc:	46a8      	mov	r8, r5
 8004dfe:	2205      	movs	r2, #5
 8004e00:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004e04:	485e      	ldr	r0, [pc, #376]	; (8004f80 <_vfiprintf_r+0x210>)
 8004e06:	f7fb fa03 	bl	8000210 <memchr>
 8004e0a:	9b04      	ldr	r3, [sp, #16]
 8004e0c:	bb78      	cbnz	r0, 8004e6e <_vfiprintf_r+0xfe>
 8004e0e:	06d9      	lsls	r1, r3, #27
 8004e10:	bf44      	itt	mi
 8004e12:	2220      	movmi	r2, #32
 8004e14:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004e18:	071a      	lsls	r2, r3, #28
 8004e1a:	bf44      	itt	mi
 8004e1c:	222b      	movmi	r2, #43	; 0x2b
 8004e1e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004e22:	782a      	ldrb	r2, [r5, #0]
 8004e24:	2a2a      	cmp	r2, #42	; 0x2a
 8004e26:	d02a      	beq.n	8004e7e <_vfiprintf_r+0x10e>
 8004e28:	9a07      	ldr	r2, [sp, #28]
 8004e2a:	46a8      	mov	r8, r5
 8004e2c:	2000      	movs	r0, #0
 8004e2e:	250a      	movs	r5, #10
 8004e30:	4641      	mov	r1, r8
 8004e32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e36:	3b30      	subs	r3, #48	; 0x30
 8004e38:	2b09      	cmp	r3, #9
 8004e3a:	d969      	bls.n	8004f10 <_vfiprintf_r+0x1a0>
 8004e3c:	b360      	cbz	r0, 8004e98 <_vfiprintf_r+0x128>
 8004e3e:	e024      	b.n	8004e8a <_vfiprintf_r+0x11a>
 8004e40:	4b50      	ldr	r3, [pc, #320]	; (8004f84 <_vfiprintf_r+0x214>)
 8004e42:	429c      	cmp	r4, r3
 8004e44:	d101      	bne.n	8004e4a <_vfiprintf_r+0xda>
 8004e46:	68b4      	ldr	r4, [r6, #8]
 8004e48:	e7a2      	b.n	8004d90 <_vfiprintf_r+0x20>
 8004e4a:	4b4f      	ldr	r3, [pc, #316]	; (8004f88 <_vfiprintf_r+0x218>)
 8004e4c:	429c      	cmp	r4, r3
 8004e4e:	bf08      	it	eq
 8004e50:	68f4      	ldreq	r4, [r6, #12]
 8004e52:	e79d      	b.n	8004d90 <_vfiprintf_r+0x20>
 8004e54:	4621      	mov	r1, r4
 8004e56:	4630      	mov	r0, r6
 8004e58:	f7ff fc6c 	bl	8004734 <__swsetup_r>
 8004e5c:	2800      	cmp	r0, #0
 8004e5e:	d09d      	beq.n	8004d9c <_vfiprintf_r+0x2c>
 8004e60:	f04f 30ff 	mov.w	r0, #4294967295
 8004e64:	b01d      	add	sp, #116	; 0x74
 8004e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e6a:	46a8      	mov	r8, r5
 8004e6c:	e7a2      	b.n	8004db4 <_vfiprintf_r+0x44>
 8004e6e:	4a44      	ldr	r2, [pc, #272]	; (8004f80 <_vfiprintf_r+0x210>)
 8004e70:	1a80      	subs	r0, r0, r2
 8004e72:	fa0b f000 	lsl.w	r0, fp, r0
 8004e76:	4318      	orrs	r0, r3
 8004e78:	9004      	str	r0, [sp, #16]
 8004e7a:	4645      	mov	r5, r8
 8004e7c:	e7be      	b.n	8004dfc <_vfiprintf_r+0x8c>
 8004e7e:	9a03      	ldr	r2, [sp, #12]
 8004e80:	1d11      	adds	r1, r2, #4
 8004e82:	6812      	ldr	r2, [r2, #0]
 8004e84:	9103      	str	r1, [sp, #12]
 8004e86:	2a00      	cmp	r2, #0
 8004e88:	db01      	blt.n	8004e8e <_vfiprintf_r+0x11e>
 8004e8a:	9207      	str	r2, [sp, #28]
 8004e8c:	e004      	b.n	8004e98 <_vfiprintf_r+0x128>
 8004e8e:	4252      	negs	r2, r2
 8004e90:	f043 0302 	orr.w	r3, r3, #2
 8004e94:	9207      	str	r2, [sp, #28]
 8004e96:	9304      	str	r3, [sp, #16]
 8004e98:	f898 3000 	ldrb.w	r3, [r8]
 8004e9c:	2b2e      	cmp	r3, #46	; 0x2e
 8004e9e:	d10e      	bne.n	8004ebe <_vfiprintf_r+0x14e>
 8004ea0:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004ea4:	2b2a      	cmp	r3, #42	; 0x2a
 8004ea6:	d138      	bne.n	8004f1a <_vfiprintf_r+0x1aa>
 8004ea8:	9b03      	ldr	r3, [sp, #12]
 8004eaa:	1d1a      	adds	r2, r3, #4
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	9203      	str	r2, [sp, #12]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	bfb8      	it	lt
 8004eb4:	f04f 33ff 	movlt.w	r3, #4294967295
 8004eb8:	f108 0802 	add.w	r8, r8, #2
 8004ebc:	9305      	str	r3, [sp, #20]
 8004ebe:	4d33      	ldr	r5, [pc, #204]	; (8004f8c <_vfiprintf_r+0x21c>)
 8004ec0:	f898 1000 	ldrb.w	r1, [r8]
 8004ec4:	2203      	movs	r2, #3
 8004ec6:	4628      	mov	r0, r5
 8004ec8:	f7fb f9a2 	bl	8000210 <memchr>
 8004ecc:	b140      	cbz	r0, 8004ee0 <_vfiprintf_r+0x170>
 8004ece:	2340      	movs	r3, #64	; 0x40
 8004ed0:	1b40      	subs	r0, r0, r5
 8004ed2:	fa03 f000 	lsl.w	r0, r3, r0
 8004ed6:	9b04      	ldr	r3, [sp, #16]
 8004ed8:	4303      	orrs	r3, r0
 8004eda:	f108 0801 	add.w	r8, r8, #1
 8004ede:	9304      	str	r3, [sp, #16]
 8004ee0:	f898 1000 	ldrb.w	r1, [r8]
 8004ee4:	482a      	ldr	r0, [pc, #168]	; (8004f90 <_vfiprintf_r+0x220>)
 8004ee6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004eea:	2206      	movs	r2, #6
 8004eec:	f108 0701 	add.w	r7, r8, #1
 8004ef0:	f7fb f98e 	bl	8000210 <memchr>
 8004ef4:	2800      	cmp	r0, #0
 8004ef6:	d037      	beq.n	8004f68 <_vfiprintf_r+0x1f8>
 8004ef8:	4b26      	ldr	r3, [pc, #152]	; (8004f94 <_vfiprintf_r+0x224>)
 8004efa:	bb1b      	cbnz	r3, 8004f44 <_vfiprintf_r+0x1d4>
 8004efc:	9b03      	ldr	r3, [sp, #12]
 8004efe:	3307      	adds	r3, #7
 8004f00:	f023 0307 	bic.w	r3, r3, #7
 8004f04:	3308      	adds	r3, #8
 8004f06:	9303      	str	r3, [sp, #12]
 8004f08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f0a:	444b      	add	r3, r9
 8004f0c:	9309      	str	r3, [sp, #36]	; 0x24
 8004f0e:	e750      	b.n	8004db2 <_vfiprintf_r+0x42>
 8004f10:	fb05 3202 	mla	r2, r5, r2, r3
 8004f14:	2001      	movs	r0, #1
 8004f16:	4688      	mov	r8, r1
 8004f18:	e78a      	b.n	8004e30 <_vfiprintf_r+0xc0>
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	f108 0801 	add.w	r8, r8, #1
 8004f20:	9305      	str	r3, [sp, #20]
 8004f22:	4619      	mov	r1, r3
 8004f24:	250a      	movs	r5, #10
 8004f26:	4640      	mov	r0, r8
 8004f28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f2c:	3a30      	subs	r2, #48	; 0x30
 8004f2e:	2a09      	cmp	r2, #9
 8004f30:	d903      	bls.n	8004f3a <_vfiprintf_r+0x1ca>
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d0c3      	beq.n	8004ebe <_vfiprintf_r+0x14e>
 8004f36:	9105      	str	r1, [sp, #20]
 8004f38:	e7c1      	b.n	8004ebe <_vfiprintf_r+0x14e>
 8004f3a:	fb05 2101 	mla	r1, r5, r1, r2
 8004f3e:	2301      	movs	r3, #1
 8004f40:	4680      	mov	r8, r0
 8004f42:	e7f0      	b.n	8004f26 <_vfiprintf_r+0x1b6>
 8004f44:	ab03      	add	r3, sp, #12
 8004f46:	9300      	str	r3, [sp, #0]
 8004f48:	4622      	mov	r2, r4
 8004f4a:	4b13      	ldr	r3, [pc, #76]	; (8004f98 <_vfiprintf_r+0x228>)
 8004f4c:	a904      	add	r1, sp, #16
 8004f4e:	4630      	mov	r0, r6
 8004f50:	f3af 8000 	nop.w
 8004f54:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004f58:	4681      	mov	r9, r0
 8004f5a:	d1d5      	bne.n	8004f08 <_vfiprintf_r+0x198>
 8004f5c:	89a3      	ldrh	r3, [r4, #12]
 8004f5e:	065b      	lsls	r3, r3, #25
 8004f60:	f53f af7e 	bmi.w	8004e60 <_vfiprintf_r+0xf0>
 8004f64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f66:	e77d      	b.n	8004e64 <_vfiprintf_r+0xf4>
 8004f68:	ab03      	add	r3, sp, #12
 8004f6a:	9300      	str	r3, [sp, #0]
 8004f6c:	4622      	mov	r2, r4
 8004f6e:	4b0a      	ldr	r3, [pc, #40]	; (8004f98 <_vfiprintf_r+0x228>)
 8004f70:	a904      	add	r1, sp, #16
 8004f72:	4630      	mov	r0, r6
 8004f74:	f000 f888 	bl	8005088 <_printf_i>
 8004f78:	e7ec      	b.n	8004f54 <_vfiprintf_r+0x1e4>
 8004f7a:	bf00      	nop
 8004f7c:	08005508 	.word	0x08005508
 8004f80:	08005548 	.word	0x08005548
 8004f84:	08005528 	.word	0x08005528
 8004f88:	080054e8 	.word	0x080054e8
 8004f8c:	0800554e 	.word	0x0800554e
 8004f90:	08005552 	.word	0x08005552
 8004f94:	00000000 	.word	0x00000000
 8004f98:	08004d4b 	.word	0x08004d4b

08004f9c <_printf_common>:
 8004f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fa0:	4691      	mov	r9, r2
 8004fa2:	461f      	mov	r7, r3
 8004fa4:	688a      	ldr	r2, [r1, #8]
 8004fa6:	690b      	ldr	r3, [r1, #16]
 8004fa8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004fac:	4293      	cmp	r3, r2
 8004fae:	bfb8      	it	lt
 8004fb0:	4613      	movlt	r3, r2
 8004fb2:	f8c9 3000 	str.w	r3, [r9]
 8004fb6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004fba:	4606      	mov	r6, r0
 8004fbc:	460c      	mov	r4, r1
 8004fbe:	b112      	cbz	r2, 8004fc6 <_printf_common+0x2a>
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	f8c9 3000 	str.w	r3, [r9]
 8004fc6:	6823      	ldr	r3, [r4, #0]
 8004fc8:	0699      	lsls	r1, r3, #26
 8004fca:	bf42      	ittt	mi
 8004fcc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004fd0:	3302      	addmi	r3, #2
 8004fd2:	f8c9 3000 	strmi.w	r3, [r9]
 8004fd6:	6825      	ldr	r5, [r4, #0]
 8004fd8:	f015 0506 	ands.w	r5, r5, #6
 8004fdc:	d107      	bne.n	8004fee <_printf_common+0x52>
 8004fde:	f104 0a19 	add.w	sl, r4, #25
 8004fe2:	68e3      	ldr	r3, [r4, #12]
 8004fe4:	f8d9 2000 	ldr.w	r2, [r9]
 8004fe8:	1a9b      	subs	r3, r3, r2
 8004fea:	42ab      	cmp	r3, r5
 8004fec:	dc28      	bgt.n	8005040 <_printf_common+0xa4>
 8004fee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004ff2:	6822      	ldr	r2, [r4, #0]
 8004ff4:	3300      	adds	r3, #0
 8004ff6:	bf18      	it	ne
 8004ff8:	2301      	movne	r3, #1
 8004ffa:	0692      	lsls	r2, r2, #26
 8004ffc:	d42d      	bmi.n	800505a <_printf_common+0xbe>
 8004ffe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005002:	4639      	mov	r1, r7
 8005004:	4630      	mov	r0, r6
 8005006:	47c0      	blx	r8
 8005008:	3001      	adds	r0, #1
 800500a:	d020      	beq.n	800504e <_printf_common+0xb2>
 800500c:	6823      	ldr	r3, [r4, #0]
 800500e:	68e5      	ldr	r5, [r4, #12]
 8005010:	f8d9 2000 	ldr.w	r2, [r9]
 8005014:	f003 0306 	and.w	r3, r3, #6
 8005018:	2b04      	cmp	r3, #4
 800501a:	bf08      	it	eq
 800501c:	1aad      	subeq	r5, r5, r2
 800501e:	68a3      	ldr	r3, [r4, #8]
 8005020:	6922      	ldr	r2, [r4, #16]
 8005022:	bf0c      	ite	eq
 8005024:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005028:	2500      	movne	r5, #0
 800502a:	4293      	cmp	r3, r2
 800502c:	bfc4      	itt	gt
 800502e:	1a9b      	subgt	r3, r3, r2
 8005030:	18ed      	addgt	r5, r5, r3
 8005032:	f04f 0900 	mov.w	r9, #0
 8005036:	341a      	adds	r4, #26
 8005038:	454d      	cmp	r5, r9
 800503a:	d11a      	bne.n	8005072 <_printf_common+0xd6>
 800503c:	2000      	movs	r0, #0
 800503e:	e008      	b.n	8005052 <_printf_common+0xb6>
 8005040:	2301      	movs	r3, #1
 8005042:	4652      	mov	r2, sl
 8005044:	4639      	mov	r1, r7
 8005046:	4630      	mov	r0, r6
 8005048:	47c0      	blx	r8
 800504a:	3001      	adds	r0, #1
 800504c:	d103      	bne.n	8005056 <_printf_common+0xba>
 800504e:	f04f 30ff 	mov.w	r0, #4294967295
 8005052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005056:	3501      	adds	r5, #1
 8005058:	e7c3      	b.n	8004fe2 <_printf_common+0x46>
 800505a:	18e1      	adds	r1, r4, r3
 800505c:	1c5a      	adds	r2, r3, #1
 800505e:	2030      	movs	r0, #48	; 0x30
 8005060:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005064:	4422      	add	r2, r4
 8005066:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800506a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800506e:	3302      	adds	r3, #2
 8005070:	e7c5      	b.n	8004ffe <_printf_common+0x62>
 8005072:	2301      	movs	r3, #1
 8005074:	4622      	mov	r2, r4
 8005076:	4639      	mov	r1, r7
 8005078:	4630      	mov	r0, r6
 800507a:	47c0      	blx	r8
 800507c:	3001      	adds	r0, #1
 800507e:	d0e6      	beq.n	800504e <_printf_common+0xb2>
 8005080:	f109 0901 	add.w	r9, r9, #1
 8005084:	e7d8      	b.n	8005038 <_printf_common+0x9c>
	...

08005088 <_printf_i>:
 8005088:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800508c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005090:	460c      	mov	r4, r1
 8005092:	7e09      	ldrb	r1, [r1, #24]
 8005094:	b085      	sub	sp, #20
 8005096:	296e      	cmp	r1, #110	; 0x6e
 8005098:	4617      	mov	r7, r2
 800509a:	4606      	mov	r6, r0
 800509c:	4698      	mov	r8, r3
 800509e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80050a0:	f000 80b3 	beq.w	800520a <_printf_i+0x182>
 80050a4:	d822      	bhi.n	80050ec <_printf_i+0x64>
 80050a6:	2963      	cmp	r1, #99	; 0x63
 80050a8:	d036      	beq.n	8005118 <_printf_i+0x90>
 80050aa:	d80a      	bhi.n	80050c2 <_printf_i+0x3a>
 80050ac:	2900      	cmp	r1, #0
 80050ae:	f000 80b9 	beq.w	8005224 <_printf_i+0x19c>
 80050b2:	2958      	cmp	r1, #88	; 0x58
 80050b4:	f000 8083 	beq.w	80051be <_printf_i+0x136>
 80050b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050bc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80050c0:	e032      	b.n	8005128 <_printf_i+0xa0>
 80050c2:	2964      	cmp	r1, #100	; 0x64
 80050c4:	d001      	beq.n	80050ca <_printf_i+0x42>
 80050c6:	2969      	cmp	r1, #105	; 0x69
 80050c8:	d1f6      	bne.n	80050b8 <_printf_i+0x30>
 80050ca:	6820      	ldr	r0, [r4, #0]
 80050cc:	6813      	ldr	r3, [r2, #0]
 80050ce:	0605      	lsls	r5, r0, #24
 80050d0:	f103 0104 	add.w	r1, r3, #4
 80050d4:	d52a      	bpl.n	800512c <_printf_i+0xa4>
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	6011      	str	r1, [r2, #0]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	da03      	bge.n	80050e6 <_printf_i+0x5e>
 80050de:	222d      	movs	r2, #45	; 0x2d
 80050e0:	425b      	negs	r3, r3
 80050e2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80050e6:	486f      	ldr	r0, [pc, #444]	; (80052a4 <_printf_i+0x21c>)
 80050e8:	220a      	movs	r2, #10
 80050ea:	e039      	b.n	8005160 <_printf_i+0xd8>
 80050ec:	2973      	cmp	r1, #115	; 0x73
 80050ee:	f000 809d 	beq.w	800522c <_printf_i+0x1a4>
 80050f2:	d808      	bhi.n	8005106 <_printf_i+0x7e>
 80050f4:	296f      	cmp	r1, #111	; 0x6f
 80050f6:	d020      	beq.n	800513a <_printf_i+0xb2>
 80050f8:	2970      	cmp	r1, #112	; 0x70
 80050fa:	d1dd      	bne.n	80050b8 <_printf_i+0x30>
 80050fc:	6823      	ldr	r3, [r4, #0]
 80050fe:	f043 0320 	orr.w	r3, r3, #32
 8005102:	6023      	str	r3, [r4, #0]
 8005104:	e003      	b.n	800510e <_printf_i+0x86>
 8005106:	2975      	cmp	r1, #117	; 0x75
 8005108:	d017      	beq.n	800513a <_printf_i+0xb2>
 800510a:	2978      	cmp	r1, #120	; 0x78
 800510c:	d1d4      	bne.n	80050b8 <_printf_i+0x30>
 800510e:	2378      	movs	r3, #120	; 0x78
 8005110:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005114:	4864      	ldr	r0, [pc, #400]	; (80052a8 <_printf_i+0x220>)
 8005116:	e055      	b.n	80051c4 <_printf_i+0x13c>
 8005118:	6813      	ldr	r3, [r2, #0]
 800511a:	1d19      	adds	r1, r3, #4
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	6011      	str	r1, [r2, #0]
 8005120:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005124:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005128:	2301      	movs	r3, #1
 800512a:	e08c      	b.n	8005246 <_printf_i+0x1be>
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	6011      	str	r1, [r2, #0]
 8005130:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005134:	bf18      	it	ne
 8005136:	b21b      	sxthne	r3, r3
 8005138:	e7cf      	b.n	80050da <_printf_i+0x52>
 800513a:	6813      	ldr	r3, [r2, #0]
 800513c:	6825      	ldr	r5, [r4, #0]
 800513e:	1d18      	adds	r0, r3, #4
 8005140:	6010      	str	r0, [r2, #0]
 8005142:	0628      	lsls	r0, r5, #24
 8005144:	d501      	bpl.n	800514a <_printf_i+0xc2>
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	e002      	b.n	8005150 <_printf_i+0xc8>
 800514a:	0668      	lsls	r0, r5, #25
 800514c:	d5fb      	bpl.n	8005146 <_printf_i+0xbe>
 800514e:	881b      	ldrh	r3, [r3, #0]
 8005150:	4854      	ldr	r0, [pc, #336]	; (80052a4 <_printf_i+0x21c>)
 8005152:	296f      	cmp	r1, #111	; 0x6f
 8005154:	bf14      	ite	ne
 8005156:	220a      	movne	r2, #10
 8005158:	2208      	moveq	r2, #8
 800515a:	2100      	movs	r1, #0
 800515c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005160:	6865      	ldr	r5, [r4, #4]
 8005162:	60a5      	str	r5, [r4, #8]
 8005164:	2d00      	cmp	r5, #0
 8005166:	f2c0 8095 	blt.w	8005294 <_printf_i+0x20c>
 800516a:	6821      	ldr	r1, [r4, #0]
 800516c:	f021 0104 	bic.w	r1, r1, #4
 8005170:	6021      	str	r1, [r4, #0]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d13d      	bne.n	80051f2 <_printf_i+0x16a>
 8005176:	2d00      	cmp	r5, #0
 8005178:	f040 808e 	bne.w	8005298 <_printf_i+0x210>
 800517c:	4665      	mov	r5, ip
 800517e:	2a08      	cmp	r2, #8
 8005180:	d10b      	bne.n	800519a <_printf_i+0x112>
 8005182:	6823      	ldr	r3, [r4, #0]
 8005184:	07db      	lsls	r3, r3, #31
 8005186:	d508      	bpl.n	800519a <_printf_i+0x112>
 8005188:	6923      	ldr	r3, [r4, #16]
 800518a:	6862      	ldr	r2, [r4, #4]
 800518c:	429a      	cmp	r2, r3
 800518e:	bfde      	ittt	le
 8005190:	2330      	movle	r3, #48	; 0x30
 8005192:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005196:	f105 35ff 	addle.w	r5, r5, #4294967295
 800519a:	ebac 0305 	sub.w	r3, ip, r5
 800519e:	6123      	str	r3, [r4, #16]
 80051a0:	f8cd 8000 	str.w	r8, [sp]
 80051a4:	463b      	mov	r3, r7
 80051a6:	aa03      	add	r2, sp, #12
 80051a8:	4621      	mov	r1, r4
 80051aa:	4630      	mov	r0, r6
 80051ac:	f7ff fef6 	bl	8004f9c <_printf_common>
 80051b0:	3001      	adds	r0, #1
 80051b2:	d14d      	bne.n	8005250 <_printf_i+0x1c8>
 80051b4:	f04f 30ff 	mov.w	r0, #4294967295
 80051b8:	b005      	add	sp, #20
 80051ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80051be:	4839      	ldr	r0, [pc, #228]	; (80052a4 <_printf_i+0x21c>)
 80051c0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80051c4:	6813      	ldr	r3, [r2, #0]
 80051c6:	6821      	ldr	r1, [r4, #0]
 80051c8:	1d1d      	adds	r5, r3, #4
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	6015      	str	r5, [r2, #0]
 80051ce:	060a      	lsls	r2, r1, #24
 80051d0:	d50b      	bpl.n	80051ea <_printf_i+0x162>
 80051d2:	07ca      	lsls	r2, r1, #31
 80051d4:	bf44      	itt	mi
 80051d6:	f041 0120 	orrmi.w	r1, r1, #32
 80051da:	6021      	strmi	r1, [r4, #0]
 80051dc:	b91b      	cbnz	r3, 80051e6 <_printf_i+0x15e>
 80051de:	6822      	ldr	r2, [r4, #0]
 80051e0:	f022 0220 	bic.w	r2, r2, #32
 80051e4:	6022      	str	r2, [r4, #0]
 80051e6:	2210      	movs	r2, #16
 80051e8:	e7b7      	b.n	800515a <_printf_i+0xd2>
 80051ea:	064d      	lsls	r5, r1, #25
 80051ec:	bf48      	it	mi
 80051ee:	b29b      	uxthmi	r3, r3
 80051f0:	e7ef      	b.n	80051d2 <_printf_i+0x14a>
 80051f2:	4665      	mov	r5, ip
 80051f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80051f8:	fb02 3311 	mls	r3, r2, r1, r3
 80051fc:	5cc3      	ldrb	r3, [r0, r3]
 80051fe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005202:	460b      	mov	r3, r1
 8005204:	2900      	cmp	r1, #0
 8005206:	d1f5      	bne.n	80051f4 <_printf_i+0x16c>
 8005208:	e7b9      	b.n	800517e <_printf_i+0xf6>
 800520a:	6813      	ldr	r3, [r2, #0]
 800520c:	6825      	ldr	r5, [r4, #0]
 800520e:	6961      	ldr	r1, [r4, #20]
 8005210:	1d18      	adds	r0, r3, #4
 8005212:	6010      	str	r0, [r2, #0]
 8005214:	0628      	lsls	r0, r5, #24
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	d501      	bpl.n	800521e <_printf_i+0x196>
 800521a:	6019      	str	r1, [r3, #0]
 800521c:	e002      	b.n	8005224 <_printf_i+0x19c>
 800521e:	066a      	lsls	r2, r5, #25
 8005220:	d5fb      	bpl.n	800521a <_printf_i+0x192>
 8005222:	8019      	strh	r1, [r3, #0]
 8005224:	2300      	movs	r3, #0
 8005226:	6123      	str	r3, [r4, #16]
 8005228:	4665      	mov	r5, ip
 800522a:	e7b9      	b.n	80051a0 <_printf_i+0x118>
 800522c:	6813      	ldr	r3, [r2, #0]
 800522e:	1d19      	adds	r1, r3, #4
 8005230:	6011      	str	r1, [r2, #0]
 8005232:	681d      	ldr	r5, [r3, #0]
 8005234:	6862      	ldr	r2, [r4, #4]
 8005236:	2100      	movs	r1, #0
 8005238:	4628      	mov	r0, r5
 800523a:	f7fa ffe9 	bl	8000210 <memchr>
 800523e:	b108      	cbz	r0, 8005244 <_printf_i+0x1bc>
 8005240:	1b40      	subs	r0, r0, r5
 8005242:	6060      	str	r0, [r4, #4]
 8005244:	6863      	ldr	r3, [r4, #4]
 8005246:	6123      	str	r3, [r4, #16]
 8005248:	2300      	movs	r3, #0
 800524a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800524e:	e7a7      	b.n	80051a0 <_printf_i+0x118>
 8005250:	6923      	ldr	r3, [r4, #16]
 8005252:	462a      	mov	r2, r5
 8005254:	4639      	mov	r1, r7
 8005256:	4630      	mov	r0, r6
 8005258:	47c0      	blx	r8
 800525a:	3001      	adds	r0, #1
 800525c:	d0aa      	beq.n	80051b4 <_printf_i+0x12c>
 800525e:	6823      	ldr	r3, [r4, #0]
 8005260:	079b      	lsls	r3, r3, #30
 8005262:	d413      	bmi.n	800528c <_printf_i+0x204>
 8005264:	68e0      	ldr	r0, [r4, #12]
 8005266:	9b03      	ldr	r3, [sp, #12]
 8005268:	4298      	cmp	r0, r3
 800526a:	bfb8      	it	lt
 800526c:	4618      	movlt	r0, r3
 800526e:	e7a3      	b.n	80051b8 <_printf_i+0x130>
 8005270:	2301      	movs	r3, #1
 8005272:	464a      	mov	r2, r9
 8005274:	4639      	mov	r1, r7
 8005276:	4630      	mov	r0, r6
 8005278:	47c0      	blx	r8
 800527a:	3001      	adds	r0, #1
 800527c:	d09a      	beq.n	80051b4 <_printf_i+0x12c>
 800527e:	3501      	adds	r5, #1
 8005280:	68e3      	ldr	r3, [r4, #12]
 8005282:	9a03      	ldr	r2, [sp, #12]
 8005284:	1a9b      	subs	r3, r3, r2
 8005286:	42ab      	cmp	r3, r5
 8005288:	dcf2      	bgt.n	8005270 <_printf_i+0x1e8>
 800528a:	e7eb      	b.n	8005264 <_printf_i+0x1dc>
 800528c:	2500      	movs	r5, #0
 800528e:	f104 0919 	add.w	r9, r4, #25
 8005292:	e7f5      	b.n	8005280 <_printf_i+0x1f8>
 8005294:	2b00      	cmp	r3, #0
 8005296:	d1ac      	bne.n	80051f2 <_printf_i+0x16a>
 8005298:	7803      	ldrb	r3, [r0, #0]
 800529a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800529e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052a2:	e76c      	b.n	800517e <_printf_i+0xf6>
 80052a4:	08005559 	.word	0x08005559
 80052a8:	0800556a 	.word	0x0800556a

080052ac <_sbrk_r>:
 80052ac:	b538      	push	{r3, r4, r5, lr}
 80052ae:	4c06      	ldr	r4, [pc, #24]	; (80052c8 <_sbrk_r+0x1c>)
 80052b0:	2300      	movs	r3, #0
 80052b2:	4605      	mov	r5, r0
 80052b4:	4608      	mov	r0, r1
 80052b6:	6023      	str	r3, [r4, #0]
 80052b8:	f7ff f8b0 	bl	800441c <_sbrk>
 80052bc:	1c43      	adds	r3, r0, #1
 80052be:	d102      	bne.n	80052c6 <_sbrk_r+0x1a>
 80052c0:	6823      	ldr	r3, [r4, #0]
 80052c2:	b103      	cbz	r3, 80052c6 <_sbrk_r+0x1a>
 80052c4:	602b      	str	r3, [r5, #0]
 80052c6:	bd38      	pop	{r3, r4, r5, pc}
 80052c8:	20003eb8 	.word	0x20003eb8

080052cc <__sread>:
 80052cc:	b510      	push	{r4, lr}
 80052ce:	460c      	mov	r4, r1
 80052d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052d4:	f000 f896 	bl	8005404 <_read_r>
 80052d8:	2800      	cmp	r0, #0
 80052da:	bfab      	itete	ge
 80052dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80052de:	89a3      	ldrhlt	r3, [r4, #12]
 80052e0:	181b      	addge	r3, r3, r0
 80052e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80052e6:	bfac      	ite	ge
 80052e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80052ea:	81a3      	strhlt	r3, [r4, #12]
 80052ec:	bd10      	pop	{r4, pc}

080052ee <__swrite>:
 80052ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052f2:	461f      	mov	r7, r3
 80052f4:	898b      	ldrh	r3, [r1, #12]
 80052f6:	05db      	lsls	r3, r3, #23
 80052f8:	4605      	mov	r5, r0
 80052fa:	460c      	mov	r4, r1
 80052fc:	4616      	mov	r6, r2
 80052fe:	d505      	bpl.n	800530c <__swrite+0x1e>
 8005300:	2302      	movs	r3, #2
 8005302:	2200      	movs	r2, #0
 8005304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005308:	f000 f868 	bl	80053dc <_lseek_r>
 800530c:	89a3      	ldrh	r3, [r4, #12]
 800530e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005312:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005316:	81a3      	strh	r3, [r4, #12]
 8005318:	4632      	mov	r2, r6
 800531a:	463b      	mov	r3, r7
 800531c:	4628      	mov	r0, r5
 800531e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005322:	f000 b817 	b.w	8005354 <_write_r>

08005326 <__sseek>:
 8005326:	b510      	push	{r4, lr}
 8005328:	460c      	mov	r4, r1
 800532a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800532e:	f000 f855 	bl	80053dc <_lseek_r>
 8005332:	1c43      	adds	r3, r0, #1
 8005334:	89a3      	ldrh	r3, [r4, #12]
 8005336:	bf15      	itete	ne
 8005338:	6560      	strne	r0, [r4, #84]	; 0x54
 800533a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800533e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005342:	81a3      	strheq	r3, [r4, #12]
 8005344:	bf18      	it	ne
 8005346:	81a3      	strhne	r3, [r4, #12]
 8005348:	bd10      	pop	{r4, pc}

0800534a <__sclose>:
 800534a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800534e:	f000 b813 	b.w	8005378 <_close_r>
	...

08005354 <_write_r>:
 8005354:	b538      	push	{r3, r4, r5, lr}
 8005356:	4c07      	ldr	r4, [pc, #28]	; (8005374 <_write_r+0x20>)
 8005358:	4605      	mov	r5, r0
 800535a:	4608      	mov	r0, r1
 800535c:	4611      	mov	r1, r2
 800535e:	2200      	movs	r2, #0
 8005360:	6022      	str	r2, [r4, #0]
 8005362:	461a      	mov	r2, r3
 8005364:	f7ff f809 	bl	800437a <_write>
 8005368:	1c43      	adds	r3, r0, #1
 800536a:	d102      	bne.n	8005372 <_write_r+0x1e>
 800536c:	6823      	ldr	r3, [r4, #0]
 800536e:	b103      	cbz	r3, 8005372 <_write_r+0x1e>
 8005370:	602b      	str	r3, [r5, #0]
 8005372:	bd38      	pop	{r3, r4, r5, pc}
 8005374:	20003eb8 	.word	0x20003eb8

08005378 <_close_r>:
 8005378:	b538      	push	{r3, r4, r5, lr}
 800537a:	4c06      	ldr	r4, [pc, #24]	; (8005394 <_close_r+0x1c>)
 800537c:	2300      	movs	r3, #0
 800537e:	4605      	mov	r5, r0
 8005380:	4608      	mov	r0, r1
 8005382:	6023      	str	r3, [r4, #0]
 8005384:	f7ff f815 	bl	80043b2 <_close>
 8005388:	1c43      	adds	r3, r0, #1
 800538a:	d102      	bne.n	8005392 <_close_r+0x1a>
 800538c:	6823      	ldr	r3, [r4, #0]
 800538e:	b103      	cbz	r3, 8005392 <_close_r+0x1a>
 8005390:	602b      	str	r3, [r5, #0]
 8005392:	bd38      	pop	{r3, r4, r5, pc}
 8005394:	20003eb8 	.word	0x20003eb8

08005398 <_fstat_r>:
 8005398:	b538      	push	{r3, r4, r5, lr}
 800539a:	4c07      	ldr	r4, [pc, #28]	; (80053b8 <_fstat_r+0x20>)
 800539c:	2300      	movs	r3, #0
 800539e:	4605      	mov	r5, r0
 80053a0:	4608      	mov	r0, r1
 80053a2:	4611      	mov	r1, r2
 80053a4:	6023      	str	r3, [r4, #0]
 80053a6:	f7ff f810 	bl	80043ca <_fstat>
 80053aa:	1c43      	adds	r3, r0, #1
 80053ac:	d102      	bne.n	80053b4 <_fstat_r+0x1c>
 80053ae:	6823      	ldr	r3, [r4, #0]
 80053b0:	b103      	cbz	r3, 80053b4 <_fstat_r+0x1c>
 80053b2:	602b      	str	r3, [r5, #0]
 80053b4:	bd38      	pop	{r3, r4, r5, pc}
 80053b6:	bf00      	nop
 80053b8:	20003eb8 	.word	0x20003eb8

080053bc <_isatty_r>:
 80053bc:	b538      	push	{r3, r4, r5, lr}
 80053be:	4c06      	ldr	r4, [pc, #24]	; (80053d8 <_isatty_r+0x1c>)
 80053c0:	2300      	movs	r3, #0
 80053c2:	4605      	mov	r5, r0
 80053c4:	4608      	mov	r0, r1
 80053c6:	6023      	str	r3, [r4, #0]
 80053c8:	f7ff f80f 	bl	80043ea <_isatty>
 80053cc:	1c43      	adds	r3, r0, #1
 80053ce:	d102      	bne.n	80053d6 <_isatty_r+0x1a>
 80053d0:	6823      	ldr	r3, [r4, #0]
 80053d2:	b103      	cbz	r3, 80053d6 <_isatty_r+0x1a>
 80053d4:	602b      	str	r3, [r5, #0]
 80053d6:	bd38      	pop	{r3, r4, r5, pc}
 80053d8:	20003eb8 	.word	0x20003eb8

080053dc <_lseek_r>:
 80053dc:	b538      	push	{r3, r4, r5, lr}
 80053de:	4c07      	ldr	r4, [pc, #28]	; (80053fc <_lseek_r+0x20>)
 80053e0:	4605      	mov	r5, r0
 80053e2:	4608      	mov	r0, r1
 80053e4:	4611      	mov	r1, r2
 80053e6:	2200      	movs	r2, #0
 80053e8:	6022      	str	r2, [r4, #0]
 80053ea:	461a      	mov	r2, r3
 80053ec:	f7ff f808 	bl	8004400 <_lseek>
 80053f0:	1c43      	adds	r3, r0, #1
 80053f2:	d102      	bne.n	80053fa <_lseek_r+0x1e>
 80053f4:	6823      	ldr	r3, [r4, #0]
 80053f6:	b103      	cbz	r3, 80053fa <_lseek_r+0x1e>
 80053f8:	602b      	str	r3, [r5, #0]
 80053fa:	bd38      	pop	{r3, r4, r5, pc}
 80053fc:	20003eb8 	.word	0x20003eb8

08005400 <__malloc_lock>:
 8005400:	4770      	bx	lr

08005402 <__malloc_unlock>:
 8005402:	4770      	bx	lr

08005404 <_read_r>:
 8005404:	b538      	push	{r3, r4, r5, lr}
 8005406:	4c07      	ldr	r4, [pc, #28]	; (8005424 <_read_r+0x20>)
 8005408:	4605      	mov	r5, r0
 800540a:	4608      	mov	r0, r1
 800540c:	4611      	mov	r1, r2
 800540e:	2200      	movs	r2, #0
 8005410:	6022      	str	r2, [r4, #0]
 8005412:	461a      	mov	r2, r3
 8005414:	f7fe ff94 	bl	8004340 <_read>
 8005418:	1c43      	adds	r3, r0, #1
 800541a:	d102      	bne.n	8005422 <_read_r+0x1e>
 800541c:	6823      	ldr	r3, [r4, #0]
 800541e:	b103      	cbz	r3, 8005422 <_read_r+0x1e>
 8005420:	602b      	str	r3, [r5, #0]
 8005422:	bd38      	pop	{r3, r4, r5, pc}
 8005424:	20003eb8 	.word	0x20003eb8

08005428 <_init>:
 8005428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800542a:	bf00      	nop
 800542c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800542e:	bc08      	pop	{r3}
 8005430:	469e      	mov	lr, r3
 8005432:	4770      	bx	lr

08005434 <_fini>:
 8005434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005436:	bf00      	nop
 8005438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800543a:	bc08      	pop	{r3}
 800543c:	469e      	mov	lr, r3
 800543e:	4770      	bx	lr
