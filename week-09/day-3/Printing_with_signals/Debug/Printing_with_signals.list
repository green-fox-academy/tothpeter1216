
Printing_with_signals.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c40  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08004e10  08004e10  00014e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e6c  08004e6c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004e6c  08004e6c  00014e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e74  08004e74  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e74  08004e74  00014e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e78  08004e78  00014e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004e7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003f3c  2000000c  08004e88  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003f48  08004e88  00023f48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011e1c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002829  00000000  00000000  00031e58  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010d8  00000000  00000000  00034688  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fa0  00000000  00000000  00035760  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002638a  00000000  00000000  00036700  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dd7c  00000000  00000000  0005ca8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f0656  00000000  00000000  0006a806  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015ae5c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045f4  00000000  00000000  0015aed8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000000c 	.word	0x2000000c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004df8 	.word	0x08004df8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000010 	.word	0x20000010
 800020c:	08004df8 	.word	0x08004df8

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b972 	b.w	800050c <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	4688      	mov	r8, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14b      	bne.n	80002e6 <__udivmoddi4+0xa6>
 800024e:	428a      	cmp	r2, r1
 8000250:	4615      	mov	r5, r2
 8000252:	d967      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0720 	rsb	r7, r2, #32
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	fa20 f707 	lsr.w	r7, r0, r7
 8000266:	4095      	lsls	r5, r2
 8000268:	ea47 0803 	orr.w	r8, r7, r3
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbb8 f7fe 	udiv	r7, r8, lr
 8000278:	fa1f fc85 	uxth.w	ip, r5
 800027c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000280:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000284:	fb07 f10c 	mul.w	r1, r7, ip
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18eb      	adds	r3, r5, r3
 800028e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000292:	f080 811b 	bcs.w	80004cc <__udivmoddi4+0x28c>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8118 	bls.w	80004cc <__udivmoddi4+0x28c>
 800029c:	3f02      	subs	r7, #2
 800029e:	442b      	add	r3, r5
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b4:	45a4      	cmp	ip, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	192c      	adds	r4, r5, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8107 	bcs.w	80004d0 <__udivmoddi4+0x290>
 80002c2:	45a4      	cmp	ip, r4
 80002c4:	f240 8104 	bls.w	80004d0 <__udivmoddi4+0x290>
 80002c8:	3802      	subs	r0, #2
 80002ca:	442c      	add	r4, r5
 80002cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d0:	eba4 040c 	sub.w	r4, r4, ip
 80002d4:	2700      	movs	r7, #0
 80002d6:	b11e      	cbz	r6, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c6 4300 	strd	r4, r3, [r6]
 80002e0:	4639      	mov	r1, r7
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0xbe>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80eb 	beq.w	80004c6 <__udivmoddi4+0x286>
 80002f0:	2700      	movs	r7, #0
 80002f2:	e9c6 0100 	strd	r0, r1, [r6]
 80002f6:	4638      	mov	r0, r7
 80002f8:	4639      	mov	r1, r7
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	fab3 f783 	clz	r7, r3
 8000302:	2f00      	cmp	r7, #0
 8000304:	d147      	bne.n	8000396 <__udivmoddi4+0x156>
 8000306:	428b      	cmp	r3, r1
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xd0>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2c4>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb61 0303 	sbc.w	r3, r1, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4698      	mov	r8, r3
 800031a:	2e00      	cmp	r6, #0
 800031c:	d0e0      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800031e:	e9c6 4800 	strd	r4, r8, [r6]
 8000322:	e7dd      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000324:	b902      	cbnz	r2, 8000328 <__udivmoddi4+0xe8>
 8000326:	deff      	udf	#255	; 0xff
 8000328:	fab2 f282 	clz	r2, r2
 800032c:	2a00      	cmp	r2, #0
 800032e:	f040 808f 	bne.w	8000450 <__udivmoddi4+0x210>
 8000332:	1b49      	subs	r1, r1, r5
 8000334:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000338:	fa1f f885 	uxth.w	r8, r5
 800033c:	2701      	movs	r7, #1
 800033e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fb0e 111c 	mls	r1, lr, ip, r1
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb08 f10c 	mul.w	r1, r8, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x124>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f10c 30ff 	add.w	r0, ip, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4299      	cmp	r1, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 8000362:	4684      	mov	ip, r0
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb1 f0fe 	udiv	r0, r1, lr
 800036c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000370:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000374:	fb08 f800 	mul.w	r8, r8, r0
 8000378:	45a0      	cmp	r8, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x14c>
 800037c:	192c      	adds	r4, r5, r4
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x14a>
 8000384:	45a0      	cmp	r8, r4
 8000386:	f200 80b6 	bhi.w	80004f6 <__udivmoddi4+0x2b6>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 0408 	sub.w	r4, r4, r8
 8000390:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000394:	e79f      	b.n	80002d6 <__udivmoddi4+0x96>
 8000396:	f1c7 0c20 	rsb	ip, r7, #32
 800039a:	40bb      	lsls	r3, r7
 800039c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a4:	fa01 f407 	lsl.w	r4, r1, r7
 80003a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b4:	4325      	orrs	r5, r4
 80003b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ba:	0c2c      	lsrs	r4, r5, #16
 80003bc:	fb08 3319 	mls	r3, r8, r9, r3
 80003c0:	fa1f fa8e 	uxth.w	sl, lr
 80003c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c8:	fb09 f40a 	mul.w	r4, r9, sl
 80003cc:	429c      	cmp	r4, r3
 80003ce:	fa02 f207 	lsl.w	r2, r2, r7
 80003d2:	fa00 f107 	lsl.w	r1, r0, r7
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1e 0303 	adds.w	r3, lr, r3
 80003dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e0:	f080 8087 	bcs.w	80004f2 <__udivmoddi4+0x2b2>
 80003e4:	429c      	cmp	r4, r3
 80003e6:	f240 8084 	bls.w	80004f2 <__udivmoddi4+0x2b2>
 80003ea:	f1a9 0902 	sub.w	r9, r9, #2
 80003ee:	4473      	add	r3, lr
 80003f0:	1b1b      	subs	r3, r3, r4
 80003f2:	b2ad      	uxth	r5, r5
 80003f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f8:	fb08 3310 	mls	r3, r8, r0, r3
 80003fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000400:	fb00 fa0a 	mul.w	sl, r0, sl
 8000404:	45a2      	cmp	sl, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1e 0404 	adds.w	r4, lr, r4
 800040c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000410:	d26b      	bcs.n	80004ea <__udivmoddi4+0x2aa>
 8000412:	45a2      	cmp	sl, r4
 8000414:	d969      	bls.n	80004ea <__udivmoddi4+0x2aa>
 8000416:	3802      	subs	r0, #2
 8000418:	4474      	add	r4, lr
 800041a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800041e:	fba0 8902 	umull	r8, r9, r0, r2
 8000422:	eba4 040a 	sub.w	r4, r4, sl
 8000426:	454c      	cmp	r4, r9
 8000428:	46c2      	mov	sl, r8
 800042a:	464b      	mov	r3, r9
 800042c:	d354      	bcc.n	80004d8 <__udivmoddi4+0x298>
 800042e:	d051      	beq.n	80004d4 <__udivmoddi4+0x294>
 8000430:	2e00      	cmp	r6, #0
 8000432:	d069      	beq.n	8000508 <__udivmoddi4+0x2c8>
 8000434:	ebb1 050a 	subs.w	r5, r1, sl
 8000438:	eb64 0403 	sbc.w	r4, r4, r3
 800043c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000440:	40fd      	lsrs	r5, r7
 8000442:	40fc      	lsrs	r4, r7
 8000444:	ea4c 0505 	orr.w	r5, ip, r5
 8000448:	e9c6 5400 	strd	r5, r4, [r6]
 800044c:	2700      	movs	r7, #0
 800044e:	e747      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000450:	f1c2 0320 	rsb	r3, r2, #32
 8000454:	fa20 f703 	lsr.w	r7, r0, r3
 8000458:	4095      	lsls	r5, r2
 800045a:	fa01 f002 	lsl.w	r0, r1, r2
 800045e:	fa21 f303 	lsr.w	r3, r1, r3
 8000462:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000466:	4338      	orrs	r0, r7
 8000468:	0c01      	lsrs	r1, r0, #16
 800046a:	fbb3 f7fe 	udiv	r7, r3, lr
 800046e:	fa1f f885 	uxth.w	r8, r5
 8000472:	fb0e 3317 	mls	r3, lr, r7, r3
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb07 f308 	mul.w	r3, r7, r8
 800047e:	428b      	cmp	r3, r1
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x256>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f107 3cff 	add.w	ip, r7, #4294967295
 800048c:	d22f      	bcs.n	80004ee <__udivmoddi4+0x2ae>
 800048e:	428b      	cmp	r3, r1
 8000490:	d92d      	bls.n	80004ee <__udivmoddi4+0x2ae>
 8000492:	3f02      	subs	r7, #2
 8000494:	4429      	add	r1, r5
 8000496:	1acb      	subs	r3, r1, r3
 8000498:	b281      	uxth	r1, r0
 800049a:	fbb3 f0fe 	udiv	r0, r3, lr
 800049e:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a6:	fb00 f308 	mul.w	r3, r0, r8
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x27e>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b4:	d217      	bcs.n	80004e6 <__udivmoddi4+0x2a6>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d915      	bls.n	80004e6 <__udivmoddi4+0x2a6>
 80004ba:	3802      	subs	r0, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c4:	e73b      	b.n	800033e <__udivmoddi4+0xfe>
 80004c6:	4637      	mov	r7, r6
 80004c8:	4630      	mov	r0, r6
 80004ca:	e709      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004cc:	4607      	mov	r7, r0
 80004ce:	e6e7      	b.n	80002a0 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fb      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d4:	4541      	cmp	r1, r8
 80004d6:	d2ab      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004dc:	eb69 020e 	sbc.w	r2, r9, lr
 80004e0:	3801      	subs	r0, #1
 80004e2:	4613      	mov	r3, r2
 80004e4:	e7a4      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e6:	4660      	mov	r0, ip
 80004e8:	e7e9      	b.n	80004be <__udivmoddi4+0x27e>
 80004ea:	4618      	mov	r0, r3
 80004ec:	e795      	b.n	800041a <__udivmoddi4+0x1da>
 80004ee:	4667      	mov	r7, ip
 80004f0:	e7d1      	b.n	8000496 <__udivmoddi4+0x256>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e77c      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	442c      	add	r4, r5
 80004fa:	e747      	b.n	800038c <__udivmoddi4+0x14c>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	442b      	add	r3, r5
 8000502:	e72f      	b.n	8000364 <__udivmoddi4+0x124>
 8000504:	4638      	mov	r0, r7
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xda>
 8000508:	4637      	mov	r7, r6
 800050a:	e6e9      	b.n	80002e0 <__udivmoddi4+0xa0>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000514:	2003      	movs	r0, #3
 8000516:	f000 f8d6 	bl	80006c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800051a:	2000      	movs	r0, #0
 800051c:	f004 fb5a 	bl	8004bd4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000520:	f004 fac6 	bl	8004ab0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000524:	2300      	movs	r3, #0
}
 8000526:	4618      	mov	r0, r3
 8000528:	bd80      	pop	{r7, pc}
	...

0800052c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000530:	4b06      	ldr	r3, [pc, #24]	; (800054c <HAL_IncTick+0x20>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	461a      	mov	r2, r3
 8000536:	4b06      	ldr	r3, [pc, #24]	; (8000550 <HAL_IncTick+0x24>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4413      	add	r3, r2
 800053c:	4a04      	ldr	r2, [pc, #16]	; (8000550 <HAL_IncTick+0x24>)
 800053e:	6013      	str	r3, [r2, #0]
}
 8000540:	bf00      	nop
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	20000000 	.word	0x20000000
 8000550:	20003d78 	.word	0x20003d78

08000554 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  return uwTick;
 8000558:	4b03      	ldr	r3, [pc, #12]	; (8000568 <HAL_GetTick+0x14>)
 800055a:	681b      	ldr	r3, [r3, #0]
}
 800055c:	4618      	mov	r0, r3
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	20003d78 	.word	0x20003d78

0800056c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	f003 0307 	and.w	r3, r3, #7
 800057a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800057c:	4b0b      	ldr	r3, [pc, #44]	; (80005ac <__NVIC_SetPriorityGrouping+0x40>)
 800057e:	68db      	ldr	r3, [r3, #12]
 8000580:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000582:	68ba      	ldr	r2, [r7, #8]
 8000584:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000588:	4013      	ands	r3, r2
 800058a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000590:	68bb      	ldr	r3, [r7, #8]
 8000592:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000594:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <__NVIC_SetPriorityGrouping+0x44>)
 8000596:	4313      	orrs	r3, r2
 8000598:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800059a:	4a04      	ldr	r2, [pc, #16]	; (80005ac <__NVIC_SetPriorityGrouping+0x40>)
 800059c:	68bb      	ldr	r3, [r7, #8]
 800059e:	60d3      	str	r3, [r2, #12]
}
 80005a0:	bf00      	nop
 80005a2:	3714      	adds	r7, #20
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr
 80005ac:	e000ed00 	.word	0xe000ed00
 80005b0:	05fa0000 	.word	0x05fa0000

080005b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005b8:	4b04      	ldr	r3, [pc, #16]	; (80005cc <__NVIC_GetPriorityGrouping+0x18>)
 80005ba:	68db      	ldr	r3, [r3, #12]
 80005bc:	0a1b      	lsrs	r3, r3, #8
 80005be:	f003 0307 	and.w	r3, r3, #7
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr
 80005cc:	e000ed00 	.word	0xe000ed00

080005d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	db0b      	blt.n	80005fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	f003 021f 	and.w	r2, r3, #31
 80005e8:	4907      	ldr	r1, [pc, #28]	; (8000608 <__NVIC_EnableIRQ+0x38>)
 80005ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ee:	095b      	lsrs	r3, r3, #5
 80005f0:	2001      	movs	r0, #1
 80005f2:	fa00 f202 	lsl.w	r2, r0, r2
 80005f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005fa:	bf00      	nop
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	e000e100 	.word	0xe000e100

0800060c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	6039      	str	r1, [r7, #0]
 8000616:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061c:	2b00      	cmp	r3, #0
 800061e:	db0a      	blt.n	8000636 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	b2da      	uxtb	r2, r3
 8000624:	490c      	ldr	r1, [pc, #48]	; (8000658 <__NVIC_SetPriority+0x4c>)
 8000626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062a:	0112      	lsls	r2, r2, #4
 800062c:	b2d2      	uxtb	r2, r2
 800062e:	440b      	add	r3, r1
 8000630:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000634:	e00a      	b.n	800064c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	b2da      	uxtb	r2, r3
 800063a:	4908      	ldr	r1, [pc, #32]	; (800065c <__NVIC_SetPriority+0x50>)
 800063c:	79fb      	ldrb	r3, [r7, #7]
 800063e:	f003 030f 	and.w	r3, r3, #15
 8000642:	3b04      	subs	r3, #4
 8000644:	0112      	lsls	r2, r2, #4
 8000646:	b2d2      	uxtb	r2, r2
 8000648:	440b      	add	r3, r1
 800064a:	761a      	strb	r2, [r3, #24]
}
 800064c:	bf00      	nop
 800064e:	370c      	adds	r7, #12
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr
 8000658:	e000e100 	.word	0xe000e100
 800065c:	e000ed00 	.word	0xe000ed00

08000660 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000660:	b480      	push	{r7}
 8000662:	b089      	sub	sp, #36	; 0x24
 8000664:	af00      	add	r7, sp, #0
 8000666:	60f8      	str	r0, [r7, #12]
 8000668:	60b9      	str	r1, [r7, #8]
 800066a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	f003 0307 	and.w	r3, r3, #7
 8000672:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000674:	69fb      	ldr	r3, [r7, #28]
 8000676:	f1c3 0307 	rsb	r3, r3, #7
 800067a:	2b04      	cmp	r3, #4
 800067c:	bf28      	it	cs
 800067e:	2304      	movcs	r3, #4
 8000680:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000682:	69fb      	ldr	r3, [r7, #28]
 8000684:	3304      	adds	r3, #4
 8000686:	2b06      	cmp	r3, #6
 8000688:	d902      	bls.n	8000690 <NVIC_EncodePriority+0x30>
 800068a:	69fb      	ldr	r3, [r7, #28]
 800068c:	3b03      	subs	r3, #3
 800068e:	e000      	b.n	8000692 <NVIC_EncodePriority+0x32>
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000694:	f04f 32ff 	mov.w	r2, #4294967295
 8000698:	69bb      	ldr	r3, [r7, #24]
 800069a:	fa02 f303 	lsl.w	r3, r2, r3
 800069e:	43da      	mvns	r2, r3
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	401a      	ands	r2, r3
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006a8:	f04f 31ff 	mov.w	r1, #4294967295
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	fa01 f303 	lsl.w	r3, r1, r3
 80006b2:	43d9      	mvns	r1, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b8:	4313      	orrs	r3, r2
         );
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3724      	adds	r7, #36	; 0x24
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr

080006c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b082      	sub	sp, #8
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006ce:	6878      	ldr	r0, [r7, #4]
 80006d0:	f7ff ff4c 	bl	800056c <__NVIC_SetPriorityGrouping>
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
 80006e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80006ee:	f7ff ff61 	bl	80005b4 <__NVIC_GetPriorityGrouping>
 80006f2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006f4:	687a      	ldr	r2, [r7, #4]
 80006f6:	68b9      	ldr	r1, [r7, #8]
 80006f8:	6978      	ldr	r0, [r7, #20]
 80006fa:	f7ff ffb1 	bl	8000660 <NVIC_EncodePriority>
 80006fe:	4602      	mov	r2, r0
 8000700:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000704:	4611      	mov	r1, r2
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff ff80 	bl	800060c <__NVIC_SetPriority>
}
 800070c:	bf00      	nop
 800070e:	3718      	adds	r7, #24
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800071e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000722:	4618      	mov	r0, r3
 8000724:	f7ff ff54 	bl	80005d0 <__NVIC_EnableIRQ>
}
 8000728:	bf00      	nop
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800073e:	b2db      	uxtb	r3, r3
 8000740:	2b02      	cmp	r3, #2
 8000742:	d004      	beq.n	800074e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	2280      	movs	r2, #128	; 0x80
 8000748:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800074a:	2301      	movs	r3, #1
 800074c:	e00c      	b.n	8000768 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2205      	movs	r2, #5
 8000752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f022 0201 	bic.w	r2, r2, #1
 8000764:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000766:	2300      	movs	r3, #0
}
 8000768:	4618      	mov	r0, r3
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr

08000774 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000774:	b480      	push	{r7}
 8000776:	b089      	sub	sp, #36	; 0x24
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800077e:	2300      	movs	r3, #0
 8000780:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000786:	2300      	movs	r3, #0
 8000788:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800078a:	2300      	movs	r3, #0
 800078c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800078e:	2300      	movs	r3, #0
 8000790:	61fb      	str	r3, [r7, #28]
 8000792:	e175      	b.n	8000a80 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000794:	2201      	movs	r2, #1
 8000796:	69fb      	ldr	r3, [r7, #28]
 8000798:	fa02 f303 	lsl.w	r3, r2, r3
 800079c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	697a      	ldr	r2, [r7, #20]
 80007a4:	4013      	ands	r3, r2
 80007a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80007a8:	693a      	ldr	r2, [r7, #16]
 80007aa:	697b      	ldr	r3, [r7, #20]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	f040 8164 	bne.w	8000a7a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	2b02      	cmp	r3, #2
 80007b8:	d003      	beq.n	80007c2 <HAL_GPIO_Init+0x4e>
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	685b      	ldr	r3, [r3, #4]
 80007be:	2b12      	cmp	r3, #18
 80007c0:	d123      	bne.n	800080a <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	08da      	lsrs	r2, r3, #3
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	3208      	adds	r2, #8
 80007ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80007d0:	69fb      	ldr	r3, [r7, #28]
 80007d2:	f003 0307 	and.w	r3, r3, #7
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	220f      	movs	r2, #15
 80007da:	fa02 f303 	lsl.w	r3, r2, r3
 80007de:	43db      	mvns	r3, r3
 80007e0:	69ba      	ldr	r2, [r7, #24]
 80007e2:	4013      	ands	r3, r2
 80007e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	691a      	ldr	r2, [r3, #16]
 80007ea:	69fb      	ldr	r3, [r7, #28]
 80007ec:	f003 0307 	and.w	r3, r3, #7
 80007f0:	009b      	lsls	r3, r3, #2
 80007f2:	fa02 f303 	lsl.w	r3, r2, r3
 80007f6:	69ba      	ldr	r2, [r7, #24]
 80007f8:	4313      	orrs	r3, r2
 80007fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80007fc:	69fb      	ldr	r3, [r7, #28]
 80007fe:	08da      	lsrs	r2, r3, #3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	3208      	adds	r2, #8
 8000804:	69b9      	ldr	r1, [r7, #24]
 8000806:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000810:	69fb      	ldr	r3, [r7, #28]
 8000812:	005b      	lsls	r3, r3, #1
 8000814:	2203      	movs	r2, #3
 8000816:	fa02 f303 	lsl.w	r3, r2, r3
 800081a:	43db      	mvns	r3, r3
 800081c:	69ba      	ldr	r2, [r7, #24]
 800081e:	4013      	ands	r3, r2
 8000820:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	685b      	ldr	r3, [r3, #4]
 8000826:	f003 0203 	and.w	r2, r3, #3
 800082a:	69fb      	ldr	r3, [r7, #28]
 800082c:	005b      	lsls	r3, r3, #1
 800082e:	fa02 f303 	lsl.w	r3, r2, r3
 8000832:	69ba      	ldr	r2, [r7, #24]
 8000834:	4313      	orrs	r3, r2
 8000836:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	69ba      	ldr	r2, [r7, #24]
 800083c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d00b      	beq.n	800085e <HAL_GPIO_Init+0xea>
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	2b02      	cmp	r3, #2
 800084c:	d007      	beq.n	800085e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000852:	2b11      	cmp	r3, #17
 8000854:	d003      	beq.n	800085e <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	2b12      	cmp	r3, #18
 800085c:	d130      	bne.n	80008c0 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	689b      	ldr	r3, [r3, #8]
 8000862:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	2203      	movs	r2, #3
 800086a:	fa02 f303 	lsl.w	r3, r2, r3
 800086e:	43db      	mvns	r3, r3
 8000870:	69ba      	ldr	r2, [r7, #24]
 8000872:	4013      	ands	r3, r2
 8000874:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	68da      	ldr	r2, [r3, #12]
 800087a:	69fb      	ldr	r3, [r7, #28]
 800087c:	005b      	lsls	r3, r3, #1
 800087e:	fa02 f303 	lsl.w	r3, r2, r3
 8000882:	69ba      	ldr	r2, [r7, #24]
 8000884:	4313      	orrs	r3, r2
 8000886:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	69ba      	ldr	r2, [r7, #24]
 800088c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000894:	2201      	movs	r2, #1
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	fa02 f303 	lsl.w	r3, r2, r3
 800089c:	43db      	mvns	r3, r3
 800089e:	69ba      	ldr	r2, [r7, #24]
 80008a0:	4013      	ands	r3, r2
 80008a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	091b      	lsrs	r3, r3, #4
 80008aa:	f003 0201 	and.w	r2, r3, #1
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	fa02 f303 	lsl.w	r3, r2, r3
 80008b4:	69ba      	ldr	r2, [r7, #24]
 80008b6:	4313      	orrs	r3, r2
 80008b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	69ba      	ldr	r2, [r7, #24]
 80008be:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	2203      	movs	r2, #3
 80008cc:	fa02 f303 	lsl.w	r3, r2, r3
 80008d0:	43db      	mvns	r3, r3
 80008d2:	69ba      	ldr	r2, [r7, #24]
 80008d4:	4013      	ands	r3, r2
 80008d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	689a      	ldr	r2, [r3, #8]
 80008dc:	69fb      	ldr	r3, [r7, #28]
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	fa02 f303 	lsl.w	r3, r2, r3
 80008e4:	69ba      	ldr	r2, [r7, #24]
 80008e6:	4313      	orrs	r3, r2
 80008e8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	69ba      	ldr	r2, [r7, #24]
 80008ee:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	f000 80be 	beq.w	8000a7a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fe:	4b65      	ldr	r3, [pc, #404]	; (8000a94 <HAL_GPIO_Init+0x320>)
 8000900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000902:	4a64      	ldr	r2, [pc, #400]	; (8000a94 <HAL_GPIO_Init+0x320>)
 8000904:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000908:	6453      	str	r3, [r2, #68]	; 0x44
 800090a:	4b62      	ldr	r3, [pc, #392]	; (8000a94 <HAL_GPIO_Init+0x320>)
 800090c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000916:	4a60      	ldr	r2, [pc, #384]	; (8000a98 <HAL_GPIO_Init+0x324>)
 8000918:	69fb      	ldr	r3, [r7, #28]
 800091a:	089b      	lsrs	r3, r3, #2
 800091c:	3302      	adds	r3, #2
 800091e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000922:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000924:	69fb      	ldr	r3, [r7, #28]
 8000926:	f003 0303 	and.w	r3, r3, #3
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	220f      	movs	r2, #15
 800092e:	fa02 f303 	lsl.w	r3, r2, r3
 8000932:	43db      	mvns	r3, r3
 8000934:	69ba      	ldr	r2, [r7, #24]
 8000936:	4013      	ands	r3, r2
 8000938:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4a57      	ldr	r2, [pc, #348]	; (8000a9c <HAL_GPIO_Init+0x328>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d037      	beq.n	80009b2 <HAL_GPIO_Init+0x23e>
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4a56      	ldr	r2, [pc, #344]	; (8000aa0 <HAL_GPIO_Init+0x32c>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d031      	beq.n	80009ae <HAL_GPIO_Init+0x23a>
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4a55      	ldr	r2, [pc, #340]	; (8000aa4 <HAL_GPIO_Init+0x330>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d02b      	beq.n	80009aa <HAL_GPIO_Init+0x236>
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4a54      	ldr	r2, [pc, #336]	; (8000aa8 <HAL_GPIO_Init+0x334>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d025      	beq.n	80009a6 <HAL_GPIO_Init+0x232>
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4a53      	ldr	r2, [pc, #332]	; (8000aac <HAL_GPIO_Init+0x338>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d01f      	beq.n	80009a2 <HAL_GPIO_Init+0x22e>
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4a52      	ldr	r2, [pc, #328]	; (8000ab0 <HAL_GPIO_Init+0x33c>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d019      	beq.n	800099e <HAL_GPIO_Init+0x22a>
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4a51      	ldr	r2, [pc, #324]	; (8000ab4 <HAL_GPIO_Init+0x340>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d013      	beq.n	800099a <HAL_GPIO_Init+0x226>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4a50      	ldr	r2, [pc, #320]	; (8000ab8 <HAL_GPIO_Init+0x344>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d00d      	beq.n	8000996 <HAL_GPIO_Init+0x222>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4a4f      	ldr	r2, [pc, #316]	; (8000abc <HAL_GPIO_Init+0x348>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d007      	beq.n	8000992 <HAL_GPIO_Init+0x21e>
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4a4e      	ldr	r2, [pc, #312]	; (8000ac0 <HAL_GPIO_Init+0x34c>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d101      	bne.n	800098e <HAL_GPIO_Init+0x21a>
 800098a:	2309      	movs	r3, #9
 800098c:	e012      	b.n	80009b4 <HAL_GPIO_Init+0x240>
 800098e:	230a      	movs	r3, #10
 8000990:	e010      	b.n	80009b4 <HAL_GPIO_Init+0x240>
 8000992:	2308      	movs	r3, #8
 8000994:	e00e      	b.n	80009b4 <HAL_GPIO_Init+0x240>
 8000996:	2307      	movs	r3, #7
 8000998:	e00c      	b.n	80009b4 <HAL_GPIO_Init+0x240>
 800099a:	2306      	movs	r3, #6
 800099c:	e00a      	b.n	80009b4 <HAL_GPIO_Init+0x240>
 800099e:	2305      	movs	r3, #5
 80009a0:	e008      	b.n	80009b4 <HAL_GPIO_Init+0x240>
 80009a2:	2304      	movs	r3, #4
 80009a4:	e006      	b.n	80009b4 <HAL_GPIO_Init+0x240>
 80009a6:	2303      	movs	r3, #3
 80009a8:	e004      	b.n	80009b4 <HAL_GPIO_Init+0x240>
 80009aa:	2302      	movs	r3, #2
 80009ac:	e002      	b.n	80009b4 <HAL_GPIO_Init+0x240>
 80009ae:	2301      	movs	r3, #1
 80009b0:	e000      	b.n	80009b4 <HAL_GPIO_Init+0x240>
 80009b2:	2300      	movs	r3, #0
 80009b4:	69fa      	ldr	r2, [r7, #28]
 80009b6:	f002 0203 	and.w	r2, r2, #3
 80009ba:	0092      	lsls	r2, r2, #2
 80009bc:	4093      	lsls	r3, r2
 80009be:	69ba      	ldr	r2, [r7, #24]
 80009c0:	4313      	orrs	r3, r2
 80009c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80009c4:	4934      	ldr	r1, [pc, #208]	; (8000a98 <HAL_GPIO_Init+0x324>)
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	089b      	lsrs	r3, r3, #2
 80009ca:	3302      	adds	r3, #2
 80009cc:	69ba      	ldr	r2, [r7, #24]
 80009ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009d2:	4b3c      	ldr	r3, [pc, #240]	; (8000ac4 <HAL_GPIO_Init+0x350>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009d8:	693b      	ldr	r3, [r7, #16]
 80009da:	43db      	mvns	r3, r3
 80009dc:	69ba      	ldr	r2, [r7, #24]
 80009de:	4013      	ands	r3, r2
 80009e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d003      	beq.n	80009f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80009ee:	69ba      	ldr	r2, [r7, #24]
 80009f0:	693b      	ldr	r3, [r7, #16]
 80009f2:	4313      	orrs	r3, r2
 80009f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80009f6:	4a33      	ldr	r2, [pc, #204]	; (8000ac4 <HAL_GPIO_Init+0x350>)
 80009f8:	69bb      	ldr	r3, [r7, #24]
 80009fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80009fc:	4b31      	ldr	r3, [pc, #196]	; (8000ac4 <HAL_GPIO_Init+0x350>)
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a02:	693b      	ldr	r3, [r7, #16]
 8000a04:	43db      	mvns	r3, r3
 8000a06:	69ba      	ldr	r2, [r7, #24]
 8000a08:	4013      	ands	r3, r2
 8000a0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d003      	beq.n	8000a20 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000a18:	69ba      	ldr	r2, [r7, #24]
 8000a1a:	693b      	ldr	r3, [r7, #16]
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a20:	4a28      	ldr	r2, [pc, #160]	; (8000ac4 <HAL_GPIO_Init+0x350>)
 8000a22:	69bb      	ldr	r3, [r7, #24]
 8000a24:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a26:	4b27      	ldr	r3, [pc, #156]	; (8000ac4 <HAL_GPIO_Init+0x350>)
 8000a28:	689b      	ldr	r3, [r3, #8]
 8000a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a2c:	693b      	ldr	r3, [r7, #16]
 8000a2e:	43db      	mvns	r3, r3
 8000a30:	69ba      	ldr	r2, [r7, #24]
 8000a32:	4013      	ands	r3, r2
 8000a34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d003      	beq.n	8000a4a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000a42:	69ba      	ldr	r2, [r7, #24]
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	4313      	orrs	r3, r2
 8000a48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a4a:	4a1e      	ldr	r2, [pc, #120]	; (8000ac4 <HAL_GPIO_Init+0x350>)
 8000a4c:	69bb      	ldr	r3, [r7, #24]
 8000a4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a50:	4b1c      	ldr	r3, [pc, #112]	; (8000ac4 <HAL_GPIO_Init+0x350>)
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a56:	693b      	ldr	r3, [r7, #16]
 8000a58:	43db      	mvns	r3, r3
 8000a5a:	69ba      	ldr	r2, [r7, #24]
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d003      	beq.n	8000a74 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000a6c:	69ba      	ldr	r2, [r7, #24]
 8000a6e:	693b      	ldr	r3, [r7, #16]
 8000a70:	4313      	orrs	r3, r2
 8000a72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000a74:	4a13      	ldr	r2, [pc, #76]	; (8000ac4 <HAL_GPIO_Init+0x350>)
 8000a76:	69bb      	ldr	r3, [r7, #24]
 8000a78:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	61fb      	str	r3, [r7, #28]
 8000a80:	69fb      	ldr	r3, [r7, #28]
 8000a82:	2b0f      	cmp	r3, #15
 8000a84:	f67f ae86 	bls.w	8000794 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000a88:	bf00      	nop
 8000a8a:	3724      	adds	r7, #36	; 0x24
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40013800 	.word	0x40013800
 8000a9c:	40020000 	.word	0x40020000
 8000aa0:	40020400 	.word	0x40020400
 8000aa4:	40020800 	.word	0x40020800
 8000aa8:	40020c00 	.word	0x40020c00
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	40021400 	.word	0x40021400
 8000ab4:	40021800 	.word	0x40021800
 8000ab8:	40021c00 	.word	0x40021c00
 8000abc:	40022000 	.word	0x40022000
 8000ac0:	40022400 	.word	0x40022400
 8000ac4:	40013c00 	.word	0x40013c00

08000ac8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d101      	bne.n	8000ade <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
 8000adc:	e25c      	b.n	8000f98 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	f000 8087 	beq.w	8000bfa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000aec:	4b96      	ldr	r3, [pc, #600]	; (8000d48 <HAL_RCC_OscConfig+0x280>)
 8000aee:	689b      	ldr	r3, [r3, #8]
 8000af0:	f003 030c 	and.w	r3, r3, #12
 8000af4:	2b04      	cmp	r3, #4
 8000af6:	d00c      	beq.n	8000b12 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000af8:	4b93      	ldr	r3, [pc, #588]	; (8000d48 <HAL_RCC_OscConfig+0x280>)
 8000afa:	689b      	ldr	r3, [r3, #8]
 8000afc:	f003 030c 	and.w	r3, r3, #12
 8000b00:	2b08      	cmp	r3, #8
 8000b02:	d112      	bne.n	8000b2a <HAL_RCC_OscConfig+0x62>
 8000b04:	4b90      	ldr	r3, [pc, #576]	; (8000d48 <HAL_RCC_OscConfig+0x280>)
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000b10:	d10b      	bne.n	8000b2a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b12:	4b8d      	ldr	r3, [pc, #564]	; (8000d48 <HAL_RCC_OscConfig+0x280>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d06c      	beq.n	8000bf8 <HAL_RCC_OscConfig+0x130>
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d168      	bne.n	8000bf8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
 8000b28:	e236      	b.n	8000f98 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b32:	d106      	bne.n	8000b42 <HAL_RCC_OscConfig+0x7a>
 8000b34:	4b84      	ldr	r3, [pc, #528]	; (8000d48 <HAL_RCC_OscConfig+0x280>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a83      	ldr	r2, [pc, #524]	; (8000d48 <HAL_RCC_OscConfig+0x280>)
 8000b3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b3e:	6013      	str	r3, [r2, #0]
 8000b40:	e02e      	b.n	8000ba0 <HAL_RCC_OscConfig+0xd8>
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d10c      	bne.n	8000b64 <HAL_RCC_OscConfig+0x9c>
 8000b4a:	4b7f      	ldr	r3, [pc, #508]	; (8000d48 <HAL_RCC_OscConfig+0x280>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a7e      	ldr	r2, [pc, #504]	; (8000d48 <HAL_RCC_OscConfig+0x280>)
 8000b50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b54:	6013      	str	r3, [r2, #0]
 8000b56:	4b7c      	ldr	r3, [pc, #496]	; (8000d48 <HAL_RCC_OscConfig+0x280>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a7b      	ldr	r2, [pc, #492]	; (8000d48 <HAL_RCC_OscConfig+0x280>)
 8000b5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b60:	6013      	str	r3, [r2, #0]
 8000b62:	e01d      	b.n	8000ba0 <HAL_RCC_OscConfig+0xd8>
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b6c:	d10c      	bne.n	8000b88 <HAL_RCC_OscConfig+0xc0>
 8000b6e:	4b76      	ldr	r3, [pc, #472]	; (8000d48 <HAL_RCC_OscConfig+0x280>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a75      	ldr	r2, [pc, #468]	; (8000d48 <HAL_RCC_OscConfig+0x280>)
 8000b74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b78:	6013      	str	r3, [r2, #0]
 8000b7a:	4b73      	ldr	r3, [pc, #460]	; (8000d48 <HAL_RCC_OscConfig+0x280>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a72      	ldr	r2, [pc, #456]	; (8000d48 <HAL_RCC_OscConfig+0x280>)
 8000b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b84:	6013      	str	r3, [r2, #0]
 8000b86:	e00b      	b.n	8000ba0 <HAL_RCC_OscConfig+0xd8>
 8000b88:	4b6f      	ldr	r3, [pc, #444]	; (8000d48 <HAL_RCC_OscConfig+0x280>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a6e      	ldr	r2, [pc, #440]	; (8000d48 <HAL_RCC_OscConfig+0x280>)
 8000b8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b92:	6013      	str	r3, [r2, #0]
 8000b94:	4b6c      	ldr	r3, [pc, #432]	; (8000d48 <HAL_RCC_OscConfig+0x280>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a6b      	ldr	r2, [pc, #428]	; (8000d48 <HAL_RCC_OscConfig+0x280>)
 8000b9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d013      	beq.n	8000bd0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ba8:	f7ff fcd4 	bl	8000554 <HAL_GetTick>
 8000bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bae:	e008      	b.n	8000bc2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bb0:	f7ff fcd0 	bl	8000554 <HAL_GetTick>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	2b64      	cmp	r3, #100	; 0x64
 8000bbc:	d901      	bls.n	8000bc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	e1ea      	b.n	8000f98 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bc2:	4b61      	ldr	r3, [pc, #388]	; (8000d48 <HAL_RCC_OscConfig+0x280>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d0f0      	beq.n	8000bb0 <HAL_RCC_OscConfig+0xe8>
 8000bce:	e014      	b.n	8000bfa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000bd0:	f7ff fcc0 	bl	8000554 <HAL_GetTick>
 8000bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bd6:	e008      	b.n	8000bea <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bd8:	f7ff fcbc 	bl	8000554 <HAL_GetTick>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	2b64      	cmp	r3, #100	; 0x64
 8000be4:	d901      	bls.n	8000bea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000be6:	2303      	movs	r3, #3
 8000be8:	e1d6      	b.n	8000f98 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bea:	4b57      	ldr	r3, [pc, #348]	; (8000d48 <HAL_RCC_OscConfig+0x280>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d1f0      	bne.n	8000bd8 <HAL_RCC_OscConfig+0x110>
 8000bf6:	e000      	b.n	8000bfa <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f003 0302 	and.w	r3, r3, #2
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d069      	beq.n	8000cda <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c06:	4b50      	ldr	r3, [pc, #320]	; (8000d48 <HAL_RCC_OscConfig+0x280>)
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	f003 030c 	and.w	r3, r3, #12
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d00b      	beq.n	8000c2a <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c12:	4b4d      	ldr	r3, [pc, #308]	; (8000d48 <HAL_RCC_OscConfig+0x280>)
 8000c14:	689b      	ldr	r3, [r3, #8]
 8000c16:	f003 030c 	and.w	r3, r3, #12
 8000c1a:	2b08      	cmp	r3, #8
 8000c1c:	d11c      	bne.n	8000c58 <HAL_RCC_OscConfig+0x190>
 8000c1e:	4b4a      	ldr	r3, [pc, #296]	; (8000d48 <HAL_RCC_OscConfig+0x280>)
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d116      	bne.n	8000c58 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c2a:	4b47      	ldr	r3, [pc, #284]	; (8000d48 <HAL_RCC_OscConfig+0x280>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f003 0302 	and.w	r3, r3, #2
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d005      	beq.n	8000c42 <HAL_RCC_OscConfig+0x17a>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	68db      	ldr	r3, [r3, #12]
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d001      	beq.n	8000c42 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e1aa      	b.n	8000f98 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c42:	4b41      	ldr	r3, [pc, #260]	; (8000d48 <HAL_RCC_OscConfig+0x280>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	691b      	ldr	r3, [r3, #16]
 8000c4e:	00db      	lsls	r3, r3, #3
 8000c50:	493d      	ldr	r1, [pc, #244]	; (8000d48 <HAL_RCC_OscConfig+0x280>)
 8000c52:	4313      	orrs	r3, r2
 8000c54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c56:	e040      	b.n	8000cda <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d023      	beq.n	8000ca8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c60:	4b39      	ldr	r3, [pc, #228]	; (8000d48 <HAL_RCC_OscConfig+0x280>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a38      	ldr	r2, [pc, #224]	; (8000d48 <HAL_RCC_OscConfig+0x280>)
 8000c66:	f043 0301 	orr.w	r3, r3, #1
 8000c6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c6c:	f7ff fc72 	bl	8000554 <HAL_GetTick>
 8000c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c72:	e008      	b.n	8000c86 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c74:	f7ff fc6e 	bl	8000554 <HAL_GetTick>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	d901      	bls.n	8000c86 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8000c82:	2303      	movs	r3, #3
 8000c84:	e188      	b.n	8000f98 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c86:	4b30      	ldr	r3, [pc, #192]	; (8000d48 <HAL_RCC_OscConfig+0x280>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f003 0302 	and.w	r3, r3, #2
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d0f0      	beq.n	8000c74 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c92:	4b2d      	ldr	r3, [pc, #180]	; (8000d48 <HAL_RCC_OscConfig+0x280>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	691b      	ldr	r3, [r3, #16]
 8000c9e:	00db      	lsls	r3, r3, #3
 8000ca0:	4929      	ldr	r1, [pc, #164]	; (8000d48 <HAL_RCC_OscConfig+0x280>)
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	600b      	str	r3, [r1, #0]
 8000ca6:	e018      	b.n	8000cda <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ca8:	4b27      	ldr	r3, [pc, #156]	; (8000d48 <HAL_RCC_OscConfig+0x280>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a26      	ldr	r2, [pc, #152]	; (8000d48 <HAL_RCC_OscConfig+0x280>)
 8000cae:	f023 0301 	bic.w	r3, r3, #1
 8000cb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cb4:	f7ff fc4e 	bl	8000554 <HAL_GetTick>
 8000cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cba:	e008      	b.n	8000cce <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cbc:	f7ff fc4a 	bl	8000554 <HAL_GetTick>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	693b      	ldr	r3, [r7, #16]
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	2b02      	cmp	r3, #2
 8000cc8:	d901      	bls.n	8000cce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8000cca:	2303      	movs	r3, #3
 8000ccc:	e164      	b.n	8000f98 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cce:	4b1e      	ldr	r3, [pc, #120]	; (8000d48 <HAL_RCC_OscConfig+0x280>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f003 0302 	and.w	r3, r3, #2
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d1f0      	bne.n	8000cbc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f003 0308 	and.w	r3, r3, #8
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d038      	beq.n	8000d58 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	695b      	ldr	r3, [r3, #20]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d019      	beq.n	8000d22 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000cee:	4b16      	ldr	r3, [pc, #88]	; (8000d48 <HAL_RCC_OscConfig+0x280>)
 8000cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000cf2:	4a15      	ldr	r2, [pc, #84]	; (8000d48 <HAL_RCC_OscConfig+0x280>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000cfa:	f7ff fc2b 	bl	8000554 <HAL_GetTick>
 8000cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d00:	e008      	b.n	8000d14 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d02:	f7ff fc27 	bl	8000554 <HAL_GetTick>
 8000d06:	4602      	mov	r2, r0
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	1ad3      	subs	r3, r2, r3
 8000d0c:	2b02      	cmp	r3, #2
 8000d0e:	d901      	bls.n	8000d14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000d10:	2303      	movs	r3, #3
 8000d12:	e141      	b.n	8000f98 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <HAL_RCC_OscConfig+0x280>)
 8000d16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d18:	f003 0302 	and.w	r3, r3, #2
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d0f0      	beq.n	8000d02 <HAL_RCC_OscConfig+0x23a>
 8000d20:	e01a      	b.n	8000d58 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d22:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <HAL_RCC_OscConfig+0x280>)
 8000d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d26:	4a08      	ldr	r2, [pc, #32]	; (8000d48 <HAL_RCC_OscConfig+0x280>)
 8000d28:	f023 0301 	bic.w	r3, r3, #1
 8000d2c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d2e:	f7ff fc11 	bl	8000554 <HAL_GetTick>
 8000d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d34:	e00a      	b.n	8000d4c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d36:	f7ff fc0d 	bl	8000554 <HAL_GetTick>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	1ad3      	subs	r3, r2, r3
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	d903      	bls.n	8000d4c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8000d44:	2303      	movs	r3, #3
 8000d46:	e127      	b.n	8000f98 <HAL_RCC_OscConfig+0x4d0>
 8000d48:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d4c:	4b94      	ldr	r3, [pc, #592]	; (8000fa0 <HAL_RCC_OscConfig+0x4d8>)
 8000d4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d50:	f003 0302 	and.w	r3, r3, #2
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d1ee      	bne.n	8000d36 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f003 0304 	and.w	r3, r3, #4
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	f000 80a4 	beq.w	8000eae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d66:	4b8e      	ldr	r3, [pc, #568]	; (8000fa0 <HAL_RCC_OscConfig+0x4d8>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d10d      	bne.n	8000d8e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d72:	4b8b      	ldr	r3, [pc, #556]	; (8000fa0 <HAL_RCC_OscConfig+0x4d8>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	4a8a      	ldr	r2, [pc, #552]	; (8000fa0 <HAL_RCC_OscConfig+0x4d8>)
 8000d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d7e:	4b88      	ldr	r3, [pc, #544]	; (8000fa0 <HAL_RCC_OscConfig+0x4d8>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000d8e:	4b85      	ldr	r3, [pc, #532]	; (8000fa4 <HAL_RCC_OscConfig+0x4dc>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d118      	bne.n	8000dcc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8000d9a:	4b82      	ldr	r3, [pc, #520]	; (8000fa4 <HAL_RCC_OscConfig+0x4dc>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a81      	ldr	r2, [pc, #516]	; (8000fa4 <HAL_RCC_OscConfig+0x4dc>)
 8000da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000da4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000da6:	f7ff fbd5 	bl	8000554 <HAL_GetTick>
 8000daa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000dac:	e008      	b.n	8000dc0 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000dae:	f7ff fbd1 	bl	8000554 <HAL_GetTick>
 8000db2:	4602      	mov	r2, r0
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	1ad3      	subs	r3, r2, r3
 8000db8:	2b64      	cmp	r3, #100	; 0x64
 8000dba:	d901      	bls.n	8000dc0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	e0eb      	b.n	8000f98 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000dc0:	4b78      	ldr	r3, [pc, #480]	; (8000fa4 <HAL_RCC_OscConfig+0x4dc>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d0f0      	beq.n	8000dae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	689b      	ldr	r3, [r3, #8]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d106      	bne.n	8000de2 <HAL_RCC_OscConfig+0x31a>
 8000dd4:	4b72      	ldr	r3, [pc, #456]	; (8000fa0 <HAL_RCC_OscConfig+0x4d8>)
 8000dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dd8:	4a71      	ldr	r2, [pc, #452]	; (8000fa0 <HAL_RCC_OscConfig+0x4d8>)
 8000dda:	f043 0301 	orr.w	r3, r3, #1
 8000dde:	6713      	str	r3, [r2, #112]	; 0x70
 8000de0:	e02d      	b.n	8000e3e <HAL_RCC_OscConfig+0x376>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d10c      	bne.n	8000e04 <HAL_RCC_OscConfig+0x33c>
 8000dea:	4b6d      	ldr	r3, [pc, #436]	; (8000fa0 <HAL_RCC_OscConfig+0x4d8>)
 8000dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dee:	4a6c      	ldr	r2, [pc, #432]	; (8000fa0 <HAL_RCC_OscConfig+0x4d8>)
 8000df0:	f023 0301 	bic.w	r3, r3, #1
 8000df4:	6713      	str	r3, [r2, #112]	; 0x70
 8000df6:	4b6a      	ldr	r3, [pc, #424]	; (8000fa0 <HAL_RCC_OscConfig+0x4d8>)
 8000df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dfa:	4a69      	ldr	r2, [pc, #420]	; (8000fa0 <HAL_RCC_OscConfig+0x4d8>)
 8000dfc:	f023 0304 	bic.w	r3, r3, #4
 8000e00:	6713      	str	r3, [r2, #112]	; 0x70
 8000e02:	e01c      	b.n	8000e3e <HAL_RCC_OscConfig+0x376>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	2b05      	cmp	r3, #5
 8000e0a:	d10c      	bne.n	8000e26 <HAL_RCC_OscConfig+0x35e>
 8000e0c:	4b64      	ldr	r3, [pc, #400]	; (8000fa0 <HAL_RCC_OscConfig+0x4d8>)
 8000e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e10:	4a63      	ldr	r2, [pc, #396]	; (8000fa0 <HAL_RCC_OscConfig+0x4d8>)
 8000e12:	f043 0304 	orr.w	r3, r3, #4
 8000e16:	6713      	str	r3, [r2, #112]	; 0x70
 8000e18:	4b61      	ldr	r3, [pc, #388]	; (8000fa0 <HAL_RCC_OscConfig+0x4d8>)
 8000e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e1c:	4a60      	ldr	r2, [pc, #384]	; (8000fa0 <HAL_RCC_OscConfig+0x4d8>)
 8000e1e:	f043 0301 	orr.w	r3, r3, #1
 8000e22:	6713      	str	r3, [r2, #112]	; 0x70
 8000e24:	e00b      	b.n	8000e3e <HAL_RCC_OscConfig+0x376>
 8000e26:	4b5e      	ldr	r3, [pc, #376]	; (8000fa0 <HAL_RCC_OscConfig+0x4d8>)
 8000e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e2a:	4a5d      	ldr	r2, [pc, #372]	; (8000fa0 <HAL_RCC_OscConfig+0x4d8>)
 8000e2c:	f023 0301 	bic.w	r3, r3, #1
 8000e30:	6713      	str	r3, [r2, #112]	; 0x70
 8000e32:	4b5b      	ldr	r3, [pc, #364]	; (8000fa0 <HAL_RCC_OscConfig+0x4d8>)
 8000e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e36:	4a5a      	ldr	r2, [pc, #360]	; (8000fa0 <HAL_RCC_OscConfig+0x4d8>)
 8000e38:	f023 0304 	bic.w	r3, r3, #4
 8000e3c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d015      	beq.n	8000e72 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e46:	f7ff fb85 	bl	8000554 <HAL_GetTick>
 8000e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e4c:	e00a      	b.n	8000e64 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e4e:	f7ff fb81 	bl	8000554 <HAL_GetTick>
 8000e52:	4602      	mov	r2, r0
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d901      	bls.n	8000e64 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8000e60:	2303      	movs	r3, #3
 8000e62:	e099      	b.n	8000f98 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e64:	4b4e      	ldr	r3, [pc, #312]	; (8000fa0 <HAL_RCC_OscConfig+0x4d8>)
 8000e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e68:	f003 0302 	and.w	r3, r3, #2
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d0ee      	beq.n	8000e4e <HAL_RCC_OscConfig+0x386>
 8000e70:	e014      	b.n	8000e9c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e72:	f7ff fb6f 	bl	8000554 <HAL_GetTick>
 8000e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e78:	e00a      	b.n	8000e90 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e7a:	f7ff fb6b 	bl	8000554 <HAL_GetTick>
 8000e7e:	4602      	mov	r2, r0
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	1ad3      	subs	r3, r2, r3
 8000e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d901      	bls.n	8000e90 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	e083      	b.n	8000f98 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e90:	4b43      	ldr	r3, [pc, #268]	; (8000fa0 <HAL_RCC_OscConfig+0x4d8>)
 8000e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e94:	f003 0302 	and.w	r3, r3, #2
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d1ee      	bne.n	8000e7a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000e9c:	7dfb      	ldrb	r3, [r7, #23]
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d105      	bne.n	8000eae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ea2:	4b3f      	ldr	r3, [pc, #252]	; (8000fa0 <HAL_RCC_OscConfig+0x4d8>)
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea6:	4a3e      	ldr	r2, [pc, #248]	; (8000fa0 <HAL_RCC_OscConfig+0x4d8>)
 8000ea8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000eac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	699b      	ldr	r3, [r3, #24]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d06f      	beq.n	8000f96 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000eb6:	4b3a      	ldr	r3, [pc, #232]	; (8000fa0 <HAL_RCC_OscConfig+0x4d8>)
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	f003 030c 	and.w	r3, r3, #12
 8000ebe:	2b08      	cmp	r3, #8
 8000ec0:	d067      	beq.n	8000f92 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	699b      	ldr	r3, [r3, #24]
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d149      	bne.n	8000f5e <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000eca:	4b35      	ldr	r3, [pc, #212]	; (8000fa0 <HAL_RCC_OscConfig+0x4d8>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a34      	ldr	r2, [pc, #208]	; (8000fa0 <HAL_RCC_OscConfig+0x4d8>)
 8000ed0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000ed4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ed6:	f7ff fb3d 	bl	8000554 <HAL_GetTick>
 8000eda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000edc:	e008      	b.n	8000ef0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ede:	f7ff fb39 	bl	8000554 <HAL_GetTick>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	1ad3      	subs	r3, r2, r3
 8000ee8:	2b02      	cmp	r3, #2
 8000eea:	d901      	bls.n	8000ef0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8000eec:	2303      	movs	r3, #3
 8000eee:	e053      	b.n	8000f98 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ef0:	4b2b      	ldr	r3, [pc, #172]	; (8000fa0 <HAL_RCC_OscConfig+0x4d8>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d1f0      	bne.n	8000ede <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	69da      	ldr	r2, [r3, #28]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6a1b      	ldr	r3, [r3, #32]
 8000f04:	431a      	orrs	r2, r3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f0a:	019b      	lsls	r3, r3, #6
 8000f0c:	431a      	orrs	r2, r3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f12:	085b      	lsrs	r3, r3, #1
 8000f14:	3b01      	subs	r3, #1
 8000f16:	041b      	lsls	r3, r3, #16
 8000f18:	431a      	orrs	r2, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f1e:	061b      	lsls	r3, r3, #24
 8000f20:	4313      	orrs	r3, r2
 8000f22:	4a1f      	ldr	r2, [pc, #124]	; (8000fa0 <HAL_RCC_OscConfig+0x4d8>)
 8000f24:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000f28:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f2a:	4b1d      	ldr	r3, [pc, #116]	; (8000fa0 <HAL_RCC_OscConfig+0x4d8>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a1c      	ldr	r2, [pc, #112]	; (8000fa0 <HAL_RCC_OscConfig+0x4d8>)
 8000f30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f36:	f7ff fb0d 	bl	8000554 <HAL_GetTick>
 8000f3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f3c:	e008      	b.n	8000f50 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f3e:	f7ff fb09 	bl	8000554 <HAL_GetTick>
 8000f42:	4602      	mov	r2, r0
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d901      	bls.n	8000f50 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	e023      	b.n	8000f98 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f50:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <HAL_RCC_OscConfig+0x4d8>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d0f0      	beq.n	8000f3e <HAL_RCC_OscConfig+0x476>
 8000f5c:	e01b      	b.n	8000f96 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f5e:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <HAL_RCC_OscConfig+0x4d8>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a0f      	ldr	r2, [pc, #60]	; (8000fa0 <HAL_RCC_OscConfig+0x4d8>)
 8000f64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f6a:	f7ff faf3 	bl	8000554 <HAL_GetTick>
 8000f6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f70:	e008      	b.n	8000f84 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f72:	f7ff faef 	bl	8000554 <HAL_GetTick>
 8000f76:	4602      	mov	r2, r0
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	d901      	bls.n	8000f84 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8000f80:	2303      	movs	r3, #3
 8000f82:	e009      	b.n	8000f98 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f84:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <HAL_RCC_OscConfig+0x4d8>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d1f0      	bne.n	8000f72 <HAL_RCC_OscConfig+0x4aa>
 8000f90:	e001      	b.n	8000f96 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e000      	b.n	8000f98 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8000f96:	2300      	movs	r3, #0
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3718      	adds	r7, #24
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40007000 	.word	0x40007000

08000fa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d101      	bne.n	8000fc0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	e0ce      	b.n	800115e <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000fc0:	4b69      	ldr	r3, [pc, #420]	; (8001168 <HAL_RCC_ClockConfig+0x1c0>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f003 030f 	and.w	r3, r3, #15
 8000fc8:	683a      	ldr	r2, [r7, #0]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	d910      	bls.n	8000ff0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fce:	4b66      	ldr	r3, [pc, #408]	; (8001168 <HAL_RCC_ClockConfig+0x1c0>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f023 020f 	bic.w	r2, r3, #15
 8000fd6:	4964      	ldr	r1, [pc, #400]	; (8001168 <HAL_RCC_ClockConfig+0x1c0>)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fde:	4b62      	ldr	r3, [pc, #392]	; (8001168 <HAL_RCC_ClockConfig+0x1c0>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f003 030f 	and.w	r3, r3, #15
 8000fe6:	683a      	ldr	r2, [r7, #0]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d001      	beq.n	8000ff0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	e0b6      	b.n	800115e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f003 0302 	and.w	r3, r3, #2
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d020      	beq.n	800103e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f003 0304 	and.w	r3, r3, #4
 8001004:	2b00      	cmp	r3, #0
 8001006:	d005      	beq.n	8001014 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001008:	4b58      	ldr	r3, [pc, #352]	; (800116c <HAL_RCC_ClockConfig+0x1c4>)
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	4a57      	ldr	r2, [pc, #348]	; (800116c <HAL_RCC_ClockConfig+0x1c4>)
 800100e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001012:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f003 0308 	and.w	r3, r3, #8
 800101c:	2b00      	cmp	r3, #0
 800101e:	d005      	beq.n	800102c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001020:	4b52      	ldr	r3, [pc, #328]	; (800116c <HAL_RCC_ClockConfig+0x1c4>)
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	4a51      	ldr	r2, [pc, #324]	; (800116c <HAL_RCC_ClockConfig+0x1c4>)
 8001026:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800102a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800102c:	4b4f      	ldr	r3, [pc, #316]	; (800116c <HAL_RCC_ClockConfig+0x1c4>)
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	494c      	ldr	r1, [pc, #304]	; (800116c <HAL_RCC_ClockConfig+0x1c4>)
 800103a:	4313      	orrs	r3, r2
 800103c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	2b00      	cmp	r3, #0
 8001048:	d040      	beq.n	80010cc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d107      	bne.n	8001062 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001052:	4b46      	ldr	r3, [pc, #280]	; (800116c <HAL_RCC_ClockConfig+0x1c4>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d115      	bne.n	800108a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e07d      	b.n	800115e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2b02      	cmp	r3, #2
 8001068:	d107      	bne.n	800107a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800106a:	4b40      	ldr	r3, [pc, #256]	; (800116c <HAL_RCC_ClockConfig+0x1c4>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d109      	bne.n	800108a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e071      	b.n	800115e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800107a:	4b3c      	ldr	r3, [pc, #240]	; (800116c <HAL_RCC_ClockConfig+0x1c4>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 0302 	and.w	r3, r3, #2
 8001082:	2b00      	cmp	r3, #0
 8001084:	d101      	bne.n	800108a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e069      	b.n	800115e <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800108a:	4b38      	ldr	r3, [pc, #224]	; (800116c <HAL_RCC_ClockConfig+0x1c4>)
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	f023 0203 	bic.w	r2, r3, #3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	4935      	ldr	r1, [pc, #212]	; (800116c <HAL_RCC_ClockConfig+0x1c4>)
 8001098:	4313      	orrs	r3, r2
 800109a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800109c:	f7ff fa5a 	bl	8000554 <HAL_GetTick>
 80010a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010a2:	e00a      	b.n	80010ba <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010a4:	f7ff fa56 	bl	8000554 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d901      	bls.n	80010ba <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80010b6:	2303      	movs	r3, #3
 80010b8:	e051      	b.n	800115e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010ba:	4b2c      	ldr	r3, [pc, #176]	; (800116c <HAL_RCC_ClockConfig+0x1c4>)
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	f003 020c 	and.w	r2, r3, #12
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d1eb      	bne.n	80010a4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80010cc:	4b26      	ldr	r3, [pc, #152]	; (8001168 <HAL_RCC_ClockConfig+0x1c0>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 030f 	and.w	r3, r3, #15
 80010d4:	683a      	ldr	r2, [r7, #0]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d210      	bcs.n	80010fc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010da:	4b23      	ldr	r3, [pc, #140]	; (8001168 <HAL_RCC_ClockConfig+0x1c0>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f023 020f 	bic.w	r2, r3, #15
 80010e2:	4921      	ldr	r1, [pc, #132]	; (8001168 <HAL_RCC_ClockConfig+0x1c0>)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010ea:	4b1f      	ldr	r3, [pc, #124]	; (8001168 <HAL_RCC_ClockConfig+0x1c0>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 030f 	and.w	r3, r3, #15
 80010f2:	683a      	ldr	r2, [r7, #0]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d001      	beq.n	80010fc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e030      	b.n	800115e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 0304 	and.w	r3, r3, #4
 8001104:	2b00      	cmp	r3, #0
 8001106:	d008      	beq.n	800111a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001108:	4b18      	ldr	r3, [pc, #96]	; (800116c <HAL_RCC_ClockConfig+0x1c4>)
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	4915      	ldr	r1, [pc, #84]	; (800116c <HAL_RCC_ClockConfig+0x1c4>)
 8001116:	4313      	orrs	r3, r2
 8001118:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 0308 	and.w	r3, r3, #8
 8001122:	2b00      	cmp	r3, #0
 8001124:	d009      	beq.n	800113a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001126:	4b11      	ldr	r3, [pc, #68]	; (800116c <HAL_RCC_ClockConfig+0x1c4>)
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	691b      	ldr	r3, [r3, #16]
 8001132:	00db      	lsls	r3, r3, #3
 8001134:	490d      	ldr	r1, [pc, #52]	; (800116c <HAL_RCC_ClockConfig+0x1c4>)
 8001136:	4313      	orrs	r3, r2
 8001138:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800113a:	f000 f81d 	bl	8001178 <HAL_RCC_GetSysClockFreq>
 800113e:	4601      	mov	r1, r0
 8001140:	4b0a      	ldr	r3, [pc, #40]	; (800116c <HAL_RCC_ClockConfig+0x1c4>)
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	091b      	lsrs	r3, r3, #4
 8001146:	f003 030f 	and.w	r3, r3, #15
 800114a:	4a09      	ldr	r2, [pc, #36]	; (8001170 <HAL_RCC_ClockConfig+0x1c8>)
 800114c:	5cd3      	ldrb	r3, [r2, r3]
 800114e:	fa21 f303 	lsr.w	r3, r1, r3
 8001152:	4a08      	ldr	r2, [pc, #32]	; (8001174 <HAL_RCC_ClockConfig+0x1cc>)
 8001154:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001156:	2000      	movs	r0, #0
 8001158:	f003 fd3c 	bl	8004bd4 <HAL_InitTick>

  return HAL_OK;
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40023c00 	.word	0x40023c00
 800116c:	40023800 	.word	0x40023800
 8001170:	08004e54 	.word	0x08004e54
 8001174:	20000008 	.word	0x20000008

08001178 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	2300      	movs	r3, #0
 8001188:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800118e:	4b50      	ldr	r3, [pc, #320]	; (80012d0 <HAL_RCC_GetSysClockFreq+0x158>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	f003 030c 	and.w	r3, r3, #12
 8001196:	2b04      	cmp	r3, #4
 8001198:	d007      	beq.n	80011aa <HAL_RCC_GetSysClockFreq+0x32>
 800119a:	2b08      	cmp	r3, #8
 800119c:	d008      	beq.n	80011b0 <HAL_RCC_GetSysClockFreq+0x38>
 800119e:	2b00      	cmp	r3, #0
 80011a0:	f040 808d 	bne.w	80012be <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80011a4:	4b4b      	ldr	r3, [pc, #300]	; (80012d4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80011a6:	60bb      	str	r3, [r7, #8]
       break;
 80011a8:	e08c      	b.n	80012c4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80011aa:	4b4b      	ldr	r3, [pc, #300]	; (80012d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80011ac:	60bb      	str	r3, [r7, #8]
      break;
 80011ae:	e089      	b.n	80012c4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011b0:	4b47      	ldr	r3, [pc, #284]	; (80012d0 <HAL_RCC_GetSysClockFreq+0x158>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011b8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80011ba:	4b45      	ldr	r3, [pc, #276]	; (80012d0 <HAL_RCC_GetSysClockFreq+0x158>)
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d023      	beq.n	800120e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011c6:	4b42      	ldr	r3, [pc, #264]	; (80012d0 <HAL_RCC_GetSysClockFreq+0x158>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	099b      	lsrs	r3, r3, #6
 80011cc:	f04f 0400 	mov.w	r4, #0
 80011d0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80011d4:	f04f 0200 	mov.w	r2, #0
 80011d8:	ea03 0501 	and.w	r5, r3, r1
 80011dc:	ea04 0602 	and.w	r6, r4, r2
 80011e0:	4a3d      	ldr	r2, [pc, #244]	; (80012d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80011e2:	fb02 f106 	mul.w	r1, r2, r6
 80011e6:	2200      	movs	r2, #0
 80011e8:	fb02 f205 	mul.w	r2, r2, r5
 80011ec:	440a      	add	r2, r1
 80011ee:	493a      	ldr	r1, [pc, #232]	; (80012d8 <HAL_RCC_GetSysClockFreq+0x160>)
 80011f0:	fba5 0101 	umull	r0, r1, r5, r1
 80011f4:	1853      	adds	r3, r2, r1
 80011f6:	4619      	mov	r1, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f04f 0400 	mov.w	r4, #0
 80011fe:	461a      	mov	r2, r3
 8001200:	4623      	mov	r3, r4
 8001202:	f7ff f805 	bl	8000210 <__aeabi_uldivmod>
 8001206:	4603      	mov	r3, r0
 8001208:	460c      	mov	r4, r1
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	e049      	b.n	80012a2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800120e:	4b30      	ldr	r3, [pc, #192]	; (80012d0 <HAL_RCC_GetSysClockFreq+0x158>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	099b      	lsrs	r3, r3, #6
 8001214:	f04f 0400 	mov.w	r4, #0
 8001218:	f240 11ff 	movw	r1, #511	; 0x1ff
 800121c:	f04f 0200 	mov.w	r2, #0
 8001220:	ea03 0501 	and.w	r5, r3, r1
 8001224:	ea04 0602 	and.w	r6, r4, r2
 8001228:	4629      	mov	r1, r5
 800122a:	4632      	mov	r2, r6
 800122c:	f04f 0300 	mov.w	r3, #0
 8001230:	f04f 0400 	mov.w	r4, #0
 8001234:	0154      	lsls	r4, r2, #5
 8001236:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800123a:	014b      	lsls	r3, r1, #5
 800123c:	4619      	mov	r1, r3
 800123e:	4622      	mov	r2, r4
 8001240:	1b49      	subs	r1, r1, r5
 8001242:	eb62 0206 	sbc.w	r2, r2, r6
 8001246:	f04f 0300 	mov.w	r3, #0
 800124a:	f04f 0400 	mov.w	r4, #0
 800124e:	0194      	lsls	r4, r2, #6
 8001250:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001254:	018b      	lsls	r3, r1, #6
 8001256:	1a5b      	subs	r3, r3, r1
 8001258:	eb64 0402 	sbc.w	r4, r4, r2
 800125c:	f04f 0100 	mov.w	r1, #0
 8001260:	f04f 0200 	mov.w	r2, #0
 8001264:	00e2      	lsls	r2, r4, #3
 8001266:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800126a:	00d9      	lsls	r1, r3, #3
 800126c:	460b      	mov	r3, r1
 800126e:	4614      	mov	r4, r2
 8001270:	195b      	adds	r3, r3, r5
 8001272:	eb44 0406 	adc.w	r4, r4, r6
 8001276:	f04f 0100 	mov.w	r1, #0
 800127a:	f04f 0200 	mov.w	r2, #0
 800127e:	02a2      	lsls	r2, r4, #10
 8001280:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001284:	0299      	lsls	r1, r3, #10
 8001286:	460b      	mov	r3, r1
 8001288:	4614      	mov	r4, r2
 800128a:	4618      	mov	r0, r3
 800128c:	4621      	mov	r1, r4
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f04f 0400 	mov.w	r4, #0
 8001294:	461a      	mov	r2, r3
 8001296:	4623      	mov	r3, r4
 8001298:	f7fe ffba 	bl	8000210 <__aeabi_uldivmod>
 800129c:	4603      	mov	r3, r0
 800129e:	460c      	mov	r4, r1
 80012a0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80012a2:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <HAL_RCC_GetSysClockFreq+0x158>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	0c1b      	lsrs	r3, r3, #16
 80012a8:	f003 0303 	and.w	r3, r3, #3
 80012ac:	3301      	adds	r3, #1
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80012b2:	68fa      	ldr	r2, [r7, #12]
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ba:	60bb      	str	r3, [r7, #8]
      break;
 80012bc:	e002      	b.n	80012c4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80012be:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80012c0:	60bb      	str	r3, [r7, #8]
      break;
 80012c2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012c4:	68bb      	ldr	r3, [r7, #8]
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3714      	adds	r7, #20
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40023800 	.word	0x40023800
 80012d4:	00f42400 	.word	0x00f42400
 80012d8:	017d7840 	.word	0x017d7840

080012dc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012e0:	4b03      	ldr	r3, [pc, #12]	; (80012f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80012e2:	681b      	ldr	r3, [r3, #0]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	20000008 	.word	0x20000008

080012f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80012f8:	f7ff fff0 	bl	80012dc <HAL_RCC_GetHCLKFreq>
 80012fc:	4601      	mov	r1, r0
 80012fe:	4b05      	ldr	r3, [pc, #20]	; (8001314 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	0a9b      	lsrs	r3, r3, #10
 8001304:	f003 0307 	and.w	r3, r3, #7
 8001308:	4a03      	ldr	r2, [pc, #12]	; (8001318 <HAL_RCC_GetPCLK1Freq+0x24>)
 800130a:	5cd3      	ldrb	r3, [r2, r3]
 800130c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001310:	4618      	mov	r0, r3
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40023800 	.word	0x40023800
 8001318:	08004e64 	.word	0x08004e64

0800131c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001320:	f7ff ffdc 	bl	80012dc <HAL_RCC_GetHCLKFreq>
 8001324:	4601      	mov	r1, r0
 8001326:	4b05      	ldr	r3, [pc, #20]	; (800133c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	0b5b      	lsrs	r3, r3, #13
 800132c:	f003 0307 	and.w	r3, r3, #7
 8001330:	4a03      	ldr	r2, [pc, #12]	; (8001340 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001332:	5cd3      	ldrb	r3, [r2, r3]
 8001334:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001338:	4618      	mov	r0, r3
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40023800 	.word	0x40023800
 8001340:	08004e64 	.word	0x08004e64

08001344 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	220f      	movs	r2, #15
 8001352:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001354:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <HAL_RCC_GetClockConfig+0x5c>)
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f003 0203 	and.w	r2, r3, #3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001360:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <HAL_RCC_GetClockConfig+0x5c>)
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <HAL_RCC_GetClockConfig+0x5c>)
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001378:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <HAL_RCC_GetClockConfig+0x5c>)
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	08db      	lsrs	r3, r3, #3
 800137e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001386:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <HAL_RCC_GetClockConfig+0x60>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 020f 	and.w	r2, r3, #15
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	601a      	str	r2, [r3, #0]
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40023c00 	.word	0x40023c00

080013a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b088      	sub	sp, #32
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d012      	beq.n	80013f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80013d0:	4b69      	ldr	r3, [pc, #420]	; (8001578 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	4a68      	ldr	r2, [pc, #416]	; (8001578 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80013d6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80013da:	6093      	str	r3, [r2, #8]
 80013dc:	4b66      	ldr	r3, [pc, #408]	; (8001578 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80013de:	689a      	ldr	r2, [r3, #8]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013e4:	4964      	ldr	r1, [pc, #400]	; (8001578 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80013e6:	4313      	orrs	r3, r2
 80013e8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d101      	bne.n	80013f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80013f2:	2301      	movs	r3, #1
 80013f4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d017      	beq.n	8001432 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001402:	4b5d      	ldr	r3, [pc, #372]	; (8001578 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001404:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001408:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001410:	4959      	ldr	r1, [pc, #356]	; (8001578 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001412:	4313      	orrs	r3, r2
 8001414:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800141c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001420:	d101      	bne.n	8001426 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001422:	2301      	movs	r3, #1
 8001424:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800142e:	2301      	movs	r3, #1
 8001430:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d017      	beq.n	800146e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800143e:	4b4e      	ldr	r3, [pc, #312]	; (8001578 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001440:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001444:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144c:	494a      	ldr	r1, [pc, #296]	; (8001578 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800144e:	4313      	orrs	r3, r2
 8001450:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001458:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800145c:	d101      	bne.n	8001462 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800145e:	2301      	movs	r3, #1
 8001460:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	2b00      	cmp	r3, #0
 8001468:	d101      	bne.n	800146e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800146a:	2301      	movs	r3, #1
 800146c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800147a:	2301      	movs	r3, #1
 800147c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0320 	and.w	r3, r3, #32
 8001486:	2b00      	cmp	r3, #0
 8001488:	f000 808b 	beq.w	80015a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800148c:	4b3a      	ldr	r3, [pc, #232]	; (8001578 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800148e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001490:	4a39      	ldr	r2, [pc, #228]	; (8001578 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001492:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001496:	6413      	str	r3, [r2, #64]	; 0x40
 8001498:	4b37      	ldr	r3, [pc, #220]	; (8001578 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800149a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80014a4:	4b35      	ldr	r3, [pc, #212]	; (800157c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a34      	ldr	r2, [pc, #208]	; (800157c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80014aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80014b0:	f7ff f850 	bl	8000554 <HAL_GetTick>
 80014b4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80014b6:	e008      	b.n	80014ca <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014b8:	f7ff f84c 	bl	8000554 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b64      	cmp	r3, #100	; 0x64
 80014c4:	d901      	bls.n	80014ca <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e355      	b.n	8001b76 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80014ca:	4b2c      	ldr	r3, [pc, #176]	; (800157c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d0f0      	beq.n	80014b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80014d6:	4b28      	ldr	r3, [pc, #160]	; (8001578 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80014d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80014de:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d035      	beq.n	8001552 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d02e      	beq.n	8001552 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80014f4:	4b20      	ldr	r3, [pc, #128]	; (8001578 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80014f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80014fc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80014fe:	4b1e      	ldr	r3, [pc, #120]	; (8001578 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001502:	4a1d      	ldr	r2, [pc, #116]	; (8001578 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001508:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800150a:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800150c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800150e:	4a1a      	ldr	r2, [pc, #104]	; (8001578 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001510:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001514:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001516:	4a18      	ldr	r2, [pc, #96]	; (8001578 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800151c:	4b16      	ldr	r3, [pc, #88]	; (8001578 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800151e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001520:	f003 0301 	and.w	r3, r3, #1
 8001524:	2b01      	cmp	r3, #1
 8001526:	d114      	bne.n	8001552 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001528:	f7ff f814 	bl	8000554 <HAL_GetTick>
 800152c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800152e:	e00a      	b.n	8001546 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001530:	f7ff f810 	bl	8000554 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	f241 3288 	movw	r2, #5000	; 0x1388
 800153e:	4293      	cmp	r3, r2
 8001540:	d901      	bls.n	8001546 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e317      	b.n	8001b76 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001546:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d0ee      	beq.n	8001530 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800155a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800155e:	d111      	bne.n	8001584 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001560:	4b05      	ldr	r3, [pc, #20]	; (8001578 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800156c:	4b04      	ldr	r3, [pc, #16]	; (8001580 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800156e:	400b      	ands	r3, r1
 8001570:	4901      	ldr	r1, [pc, #4]	; (8001578 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001572:	4313      	orrs	r3, r2
 8001574:	608b      	str	r3, [r1, #8]
 8001576:	e00b      	b.n	8001590 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001578:	40023800 	.word	0x40023800
 800157c:	40007000 	.word	0x40007000
 8001580:	0ffffcff 	.word	0x0ffffcff
 8001584:	4bb0      	ldr	r3, [pc, #704]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	4aaf      	ldr	r2, [pc, #700]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800158a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800158e:	6093      	str	r3, [r2, #8]
 8001590:	4bad      	ldr	r3, [pc, #692]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001592:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800159c:	49aa      	ldr	r1, [pc, #680]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800159e:	4313      	orrs	r3, r2
 80015a0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0310 	and.w	r3, r3, #16
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d010      	beq.n	80015d0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80015ae:	4ba6      	ldr	r3, [pc, #664]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80015b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015b4:	4aa4      	ldr	r2, [pc, #656]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80015b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015ba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80015be:	4ba2      	ldr	r3, [pc, #648]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80015c0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015c8:	499f      	ldr	r1, [pc, #636]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80015ca:	4313      	orrs	r3, r2
 80015cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d00a      	beq.n	80015f2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80015dc:	4b9a      	ldr	r3, [pc, #616]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80015de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80015ea:	4997      	ldr	r1, [pc, #604]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80015ec:	4313      	orrs	r3, r2
 80015ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d00a      	beq.n	8001614 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80015fe:	4b92      	ldr	r3, [pc, #584]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001604:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800160c:	498e      	ldr	r1, [pc, #568]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800160e:	4313      	orrs	r3, r2
 8001610:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d00a      	beq.n	8001636 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001620:	4b89      	ldr	r3, [pc, #548]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001626:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800162e:	4986      	ldr	r1, [pc, #536]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001630:	4313      	orrs	r3, r2
 8001632:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d00a      	beq.n	8001658 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001642:	4b81      	ldr	r3, [pc, #516]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001648:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001650:	497d      	ldr	r1, [pc, #500]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001652:	4313      	orrs	r3, r2
 8001654:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001660:	2b00      	cmp	r3, #0
 8001662:	d00a      	beq.n	800167a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001664:	4b78      	ldr	r3, [pc, #480]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800166a:	f023 0203 	bic.w	r2, r3, #3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001672:	4975      	ldr	r1, [pc, #468]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001674:	4313      	orrs	r3, r2
 8001676:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001682:	2b00      	cmp	r3, #0
 8001684:	d00a      	beq.n	800169c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001686:	4b70      	ldr	r3, [pc, #448]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800168c:	f023 020c 	bic.w	r2, r3, #12
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001694:	496c      	ldr	r1, [pc, #432]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001696:	4313      	orrs	r3, r2
 8001698:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d00a      	beq.n	80016be <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80016a8:	4b67      	ldr	r3, [pc, #412]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80016aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b6:	4964      	ldr	r1, [pc, #400]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80016b8:	4313      	orrs	r3, r2
 80016ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d00a      	beq.n	80016e0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80016ca:	4b5f      	ldr	r3, [pc, #380]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80016cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016d0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016d8:	495b      	ldr	r1, [pc, #364]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80016da:	4313      	orrs	r3, r2
 80016dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d00a      	beq.n	8001702 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80016ec:	4b56      	ldr	r3, [pc, #344]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80016ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016fa:	4953      	ldr	r1, [pc, #332]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80016fc:	4313      	orrs	r3, r2
 80016fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800170a:	2b00      	cmp	r3, #0
 800170c:	d00a      	beq.n	8001724 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800170e:	4b4e      	ldr	r3, [pc, #312]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001714:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800171c:	494a      	ldr	r1, [pc, #296]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800171e:	4313      	orrs	r3, r2
 8001720:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d00a      	beq.n	8001746 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001730:	4b45      	ldr	r3, [pc, #276]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001736:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800173e:	4942      	ldr	r1, [pc, #264]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001740:	4313      	orrs	r3, r2
 8001742:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d00a      	beq.n	8001768 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001752:	4b3d      	ldr	r3, [pc, #244]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001758:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001760:	4939      	ldr	r1, [pc, #228]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001762:	4313      	orrs	r3, r2
 8001764:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d00a      	beq.n	800178a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001774:	4b34      	ldr	r3, [pc, #208]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800177a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001782:	4931      	ldr	r1, [pc, #196]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001784:	4313      	orrs	r3, r2
 8001786:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d011      	beq.n	80017ba <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001796:	4b2c      	ldr	r3, [pc, #176]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800179c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80017a4:	4928      	ldr	r1, [pc, #160]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80017a6:	4313      	orrs	r3, r2
 80017a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80017b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80017b4:	d101      	bne.n	80017ba <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80017b6:	2301      	movs	r3, #1
 80017b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0308 	and.w	r3, r3, #8
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80017c6:	2301      	movs	r3, #1
 80017c8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d00a      	beq.n	80017ec <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80017d6:	4b1c      	ldr	r3, [pc, #112]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80017d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017dc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017e4:	4918      	ldr	r1, [pc, #96]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80017e6:	4313      	orrs	r3, r2
 80017e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d00b      	beq.n	8001810 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80017f8:	4b13      	ldr	r3, [pc, #76]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80017fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017fe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001808:	490f      	ldr	r1, [pc, #60]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800180a:	4313      	orrs	r3, r2
 800180c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d005      	beq.n	8001822 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800181e:	f040 80d8 	bne.w	80019d2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001822:	4b09      	ldr	r3, [pc, #36]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a08      	ldr	r2, [pc, #32]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001828:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800182c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800182e:	f7fe fe91 	bl	8000554 <HAL_GetTick>
 8001832:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001834:	e00a      	b.n	800184c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001836:	f7fe fe8d 	bl	8000554 <HAL_GetTick>
 800183a:	4602      	mov	r2, r0
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b64      	cmp	r3, #100	; 0x64
 8001842:	d903      	bls.n	800184c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e196      	b.n	8001b76 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8001848:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800184c:	4b6c      	ldr	r3, [pc, #432]	; (8001a00 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d1ee      	bne.n	8001836 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	2b00      	cmp	r3, #0
 8001862:	d021      	beq.n	80018a8 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001868:	2b00      	cmp	r3, #0
 800186a:	d11d      	bne.n	80018a8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800186c:	4b64      	ldr	r3, [pc, #400]	; (8001a00 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800186e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001872:	0c1b      	lsrs	r3, r3, #16
 8001874:	f003 0303 	and.w	r3, r3, #3
 8001878:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800187a:	4b61      	ldr	r3, [pc, #388]	; (8001a00 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800187c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001880:	0e1b      	lsrs	r3, r3, #24
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	019a      	lsls	r2, r3, #6
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	041b      	lsls	r3, r3, #16
 8001892:	431a      	orrs	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	061b      	lsls	r3, r3, #24
 8001898:	431a      	orrs	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	071b      	lsls	r3, r3, #28
 80018a0:	4957      	ldr	r1, [pc, #348]	; (8001a00 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d004      	beq.n	80018be <HAL_RCCEx_PeriphCLKConfig+0x516>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018bc:	d00a      	beq.n	80018d4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d02e      	beq.n	8001928 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018d2:	d129      	bne.n	8001928 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80018d4:	4b4a      	ldr	r3, [pc, #296]	; (8001a00 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80018d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018da:	0c1b      	lsrs	r3, r3, #16
 80018dc:	f003 0303 	and.w	r3, r3, #3
 80018e0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80018e2:	4b47      	ldr	r3, [pc, #284]	; (8001a00 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80018e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018e8:	0f1b      	lsrs	r3, r3, #28
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	019a      	lsls	r2, r3, #6
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	041b      	lsls	r3, r3, #16
 80018fa:	431a      	orrs	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	061b      	lsls	r3, r3, #24
 8001902:	431a      	orrs	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	071b      	lsls	r3, r3, #28
 8001908:	493d      	ldr	r1, [pc, #244]	; (8001a00 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800190a:	4313      	orrs	r3, r2
 800190c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001910:	4b3b      	ldr	r3, [pc, #236]	; (8001a00 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001912:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001916:	f023 021f 	bic.w	r2, r3, #31
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191e:	3b01      	subs	r3, #1
 8001920:	4937      	ldr	r1, [pc, #220]	; (8001a00 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001922:	4313      	orrs	r3, r2
 8001924:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d01d      	beq.n	8001970 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001934:	4b32      	ldr	r3, [pc, #200]	; (8001a00 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001936:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800193a:	0e1b      	lsrs	r3, r3, #24
 800193c:	f003 030f 	and.w	r3, r3, #15
 8001940:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001942:	4b2f      	ldr	r3, [pc, #188]	; (8001a00 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001944:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001948:	0f1b      	lsrs	r3, r3, #28
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	019a      	lsls	r2, r3, #6
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	041b      	lsls	r3, r3, #16
 800195c:	431a      	orrs	r2, r3
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	061b      	lsls	r3, r3, #24
 8001962:	431a      	orrs	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	071b      	lsls	r3, r3, #28
 8001968:	4925      	ldr	r1, [pc, #148]	; (8001a00 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800196a:	4313      	orrs	r3, r2
 800196c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d011      	beq.n	80019a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	019a      	lsls	r2, r3, #6
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	041b      	lsls	r3, r3, #16
 8001988:	431a      	orrs	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	061b      	lsls	r3, r3, #24
 8001990:	431a      	orrs	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	071b      	lsls	r3, r3, #28
 8001998:	4919      	ldr	r1, [pc, #100]	; (8001a00 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800199a:	4313      	orrs	r3, r2
 800199c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80019a0:	4b17      	ldr	r3, [pc, #92]	; (8001a00 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a16      	ldr	r2, [pc, #88]	; (8001a00 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80019a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80019aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019ac:	f7fe fdd2 	bl	8000554 <HAL_GetTick>
 80019b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80019b2:	e008      	b.n	80019c6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80019b4:	f7fe fdce 	bl	8000554 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b64      	cmp	r3, #100	; 0x64
 80019c0:	d901      	bls.n	80019c6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e0d7      	b.n	8001b76 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80019c6:	4b0e      	ldr	r3, [pc, #56]	; (8001a00 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d0f0      	beq.n	80019b4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	f040 80cd 	bne.w	8001b74 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80019da:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a08      	ldr	r2, [pc, #32]	; (8001a00 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80019e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019e6:	f7fe fdb5 	bl	8000554 <HAL_GetTick>
 80019ea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80019ec:	e00a      	b.n	8001a04 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80019ee:	f7fe fdb1 	bl	8000554 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b64      	cmp	r3, #100	; 0x64
 80019fa:	d903      	bls.n	8001a04 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e0ba      	b.n	8001b76 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8001a00:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001a04:	4b5e      	ldr	r3, [pc, #376]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a10:	d0ed      	beq.n	80019ee <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d003      	beq.n	8001a26 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d009      	beq.n	8001a3a <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d02e      	beq.n	8001a90 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d12a      	bne.n	8001a90 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001a3a:	4b51      	ldr	r3, [pc, #324]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a40:	0c1b      	lsrs	r3, r3, #16
 8001a42:	f003 0303 	and.w	r3, r3, #3
 8001a46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001a48:	4b4d      	ldr	r3, [pc, #308]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a4e:	0f1b      	lsrs	r3, r3, #28
 8001a50:	f003 0307 	and.w	r3, r3, #7
 8001a54:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	695b      	ldr	r3, [r3, #20]
 8001a5a:	019a      	lsls	r2, r3, #6
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	041b      	lsls	r3, r3, #16
 8001a60:	431a      	orrs	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	061b      	lsls	r3, r3, #24
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	071b      	lsls	r3, r3, #28
 8001a6e:	4944      	ldr	r1, [pc, #272]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001a76:	4b42      	ldr	r3, [pc, #264]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001a78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a7c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a84:	3b01      	subs	r3, #1
 8001a86:	021b      	lsls	r3, r3, #8
 8001a88:	493d      	ldr	r1, [pc, #244]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d022      	beq.n	8001ae2 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001aa0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001aa4:	d11d      	bne.n	8001ae2 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001aa6:	4b36      	ldr	r3, [pc, #216]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aac:	0e1b      	lsrs	r3, r3, #24
 8001aae:	f003 030f 	and.w	r3, r3, #15
 8001ab2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001ab4:	4b32      	ldr	r3, [pc, #200]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aba:	0f1b      	lsrs	r3, r3, #28
 8001abc:	f003 0307 	and.w	r3, r3, #7
 8001ac0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	019a      	lsls	r2, r3, #6
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a1b      	ldr	r3, [r3, #32]
 8001acc:	041b      	lsls	r3, r3, #16
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	061b      	lsls	r3, r3, #24
 8001ad4:	431a      	orrs	r2, r3
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	071b      	lsls	r3, r3, #28
 8001ada:	4929      	ldr	r1, [pc, #164]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0308 	and.w	r3, r3, #8
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d028      	beq.n	8001b40 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001aee:	4b24      	ldr	r3, [pc, #144]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001af4:	0e1b      	lsrs	r3, r3, #24
 8001af6:	f003 030f 	and.w	r3, r3, #15
 8001afa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001afc:	4b20      	ldr	r3, [pc, #128]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b02:	0c1b      	lsrs	r3, r3, #16
 8001b04:	f003 0303 	and.w	r3, r3, #3
 8001b08:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	019a      	lsls	r2, r3, #6
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	041b      	lsls	r3, r3, #16
 8001b14:	431a      	orrs	r2, r3
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	061b      	lsls	r3, r3, #24
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	69db      	ldr	r3, [r3, #28]
 8001b20:	071b      	lsls	r3, r3, #28
 8001b22:	4917      	ldr	r1, [pc, #92]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001b24:	4313      	orrs	r3, r2
 8001b26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001b2a:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001b2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b38:	4911      	ldr	r1, [pc, #68]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001b40:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a0e      	ldr	r2, [pc, #56]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001b46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b4c:	f7fe fd02 	bl	8000554 <HAL_GetTick>
 8001b50:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001b52:	e008      	b.n	8001b66 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001b54:	f7fe fcfe 	bl	8000554 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b64      	cmp	r3, #100	; 0x64
 8001b60:	d901      	bls.n	8001b66 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e007      	b.n	8001b76 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001b66:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b72:	d1ef      	bne.n	8001b54 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3720      	adds	r7, #32
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40023800 	.word	0x40023800

08001b84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e01d      	b.n	8001bd2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d106      	bne.n	8001bb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 f815 	bl	8001bda <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2202      	movs	r2, #2
 8001bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3304      	adds	r3, #4
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4610      	mov	r0, r2
 8001bc4:	f000 f986 	bl	8001ed4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
	...

08001bf0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	68da      	ldr	r2, [r3, #12]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f042 0201 	orr.w	r2, r2, #1
 8001c06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	689a      	ldr	r2, [r3, #8]
 8001c0e:	4b0c      	ldr	r3, [pc, #48]	; (8001c40 <HAL_TIM_Base_Start_IT+0x50>)
 8001c10:	4013      	ands	r3, r2
 8001c12:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2b06      	cmp	r3, #6
 8001c18:	d00b      	beq.n	8001c32 <HAL_TIM_Base_Start_IT+0x42>
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c20:	d007      	beq.n	8001c32 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f042 0201 	orr.w	r2, r2, #1
 8001c30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	00010007 	.word	0x00010007

08001c44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d122      	bne.n	8001ca0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d11b      	bne.n	8001ca0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f06f 0202 	mvn.w	r2, #2
 8001c70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2201      	movs	r2, #1
 8001c76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	f003 0303 	and.w	r3, r3, #3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f905 	bl	8001e96 <HAL_TIM_IC_CaptureCallback>
 8001c8c:	e005      	b.n	8001c9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 f8f7 	bl	8001e82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 f908 	bl	8001eaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	f003 0304 	and.w	r3, r3, #4
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	d122      	bne.n	8001cf4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	2b04      	cmp	r3, #4
 8001cba:	d11b      	bne.n	8001cf4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f06f 0204 	mvn.w	r2, #4
 8001cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2202      	movs	r2, #2
 8001cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 f8db 	bl	8001e96 <HAL_TIM_IC_CaptureCallback>
 8001ce0:	e005      	b.n	8001cee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 f8cd 	bl	8001e82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 f8de 	bl	8001eaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	f003 0308 	and.w	r3, r3, #8
 8001cfe:	2b08      	cmp	r3, #8
 8001d00:	d122      	bne.n	8001d48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	f003 0308 	and.w	r3, r3, #8
 8001d0c:	2b08      	cmp	r3, #8
 8001d0e:	d11b      	bne.n	8001d48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f06f 0208 	mvn.w	r2, #8
 8001d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2204      	movs	r2, #4
 8001d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	f003 0303 	and.w	r3, r3, #3
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f8b1 	bl	8001e96 <HAL_TIM_IC_CaptureCallback>
 8001d34:	e005      	b.n	8001d42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 f8a3 	bl	8001e82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 f8b4 	bl	8001eaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	f003 0310 	and.w	r3, r3, #16
 8001d52:	2b10      	cmp	r3, #16
 8001d54:	d122      	bne.n	8001d9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	f003 0310 	and.w	r3, r3, #16
 8001d60:	2b10      	cmp	r3, #16
 8001d62:	d11b      	bne.n	8001d9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f06f 0210 	mvn.w	r2, #16
 8001d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2208      	movs	r2, #8
 8001d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f887 	bl	8001e96 <HAL_TIM_IC_CaptureCallback>
 8001d88:	e005      	b.n	8001d96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f879 	bl	8001e82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 f88a 	bl	8001eaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d10e      	bne.n	8001dc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d107      	bne.n	8001dc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f06f 0201 	mvn.w	r2, #1
 8001dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f002 fe5a 	bl	8004a7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dd2:	2b80      	cmp	r3, #128	; 0x80
 8001dd4:	d10e      	bne.n	8001df4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de0:	2b80      	cmp	r3, #128	; 0x80
 8001de2:	d107      	bne.n	8001df4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f91a 	bl	8002028 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e02:	d10e      	bne.n	8001e22 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e0e:	2b80      	cmp	r3, #128	; 0x80
 8001e10:	d107      	bne.n	8001e22 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001e1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f000 f90d 	bl	800203c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e2c:	2b40      	cmp	r3, #64	; 0x40
 8001e2e:	d10e      	bne.n	8001e4e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e3a:	2b40      	cmp	r3, #64	; 0x40
 8001e3c:	d107      	bne.n	8001e4e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 f838 	bl	8001ebe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	f003 0320 	and.w	r3, r3, #32
 8001e58:	2b20      	cmp	r3, #32
 8001e5a:	d10e      	bne.n	8001e7a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	f003 0320 	and.w	r3, r3, #32
 8001e66:	2b20      	cmp	r3, #32
 8001e68:	d107      	bne.n	8001e7a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f06f 0220 	mvn.w	r2, #32
 8001e72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 f8cd 	bl	8002014 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e7a:	bf00      	nop
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e82:	b480      	push	{r7}
 8001e84:	b083      	sub	sp, #12
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b083      	sub	sp, #12
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e9e:	bf00      	nop
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	b083      	sub	sp, #12
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr

08001ebe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b083      	sub	sp, #12
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ec6:	bf00      	nop
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
	...

08001ed4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a40      	ldr	r2, [pc, #256]	; (8001fe8 <TIM_Base_SetConfig+0x114>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d013      	beq.n	8001f14 <TIM_Base_SetConfig+0x40>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ef2:	d00f      	beq.n	8001f14 <TIM_Base_SetConfig+0x40>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a3d      	ldr	r2, [pc, #244]	; (8001fec <TIM_Base_SetConfig+0x118>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d00b      	beq.n	8001f14 <TIM_Base_SetConfig+0x40>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a3c      	ldr	r2, [pc, #240]	; (8001ff0 <TIM_Base_SetConfig+0x11c>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d007      	beq.n	8001f14 <TIM_Base_SetConfig+0x40>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a3b      	ldr	r2, [pc, #236]	; (8001ff4 <TIM_Base_SetConfig+0x120>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d003      	beq.n	8001f14 <TIM_Base_SetConfig+0x40>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a3a      	ldr	r2, [pc, #232]	; (8001ff8 <TIM_Base_SetConfig+0x124>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d108      	bne.n	8001f26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	68fa      	ldr	r2, [r7, #12]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a2f      	ldr	r2, [pc, #188]	; (8001fe8 <TIM_Base_SetConfig+0x114>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d02b      	beq.n	8001f86 <TIM_Base_SetConfig+0xb2>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f34:	d027      	beq.n	8001f86 <TIM_Base_SetConfig+0xb2>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a2c      	ldr	r2, [pc, #176]	; (8001fec <TIM_Base_SetConfig+0x118>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d023      	beq.n	8001f86 <TIM_Base_SetConfig+0xb2>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a2b      	ldr	r2, [pc, #172]	; (8001ff0 <TIM_Base_SetConfig+0x11c>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d01f      	beq.n	8001f86 <TIM_Base_SetConfig+0xb2>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a2a      	ldr	r2, [pc, #168]	; (8001ff4 <TIM_Base_SetConfig+0x120>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d01b      	beq.n	8001f86 <TIM_Base_SetConfig+0xb2>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a29      	ldr	r2, [pc, #164]	; (8001ff8 <TIM_Base_SetConfig+0x124>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d017      	beq.n	8001f86 <TIM_Base_SetConfig+0xb2>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a28      	ldr	r2, [pc, #160]	; (8001ffc <TIM_Base_SetConfig+0x128>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d013      	beq.n	8001f86 <TIM_Base_SetConfig+0xb2>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a27      	ldr	r2, [pc, #156]	; (8002000 <TIM_Base_SetConfig+0x12c>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d00f      	beq.n	8001f86 <TIM_Base_SetConfig+0xb2>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a26      	ldr	r2, [pc, #152]	; (8002004 <TIM_Base_SetConfig+0x130>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d00b      	beq.n	8001f86 <TIM_Base_SetConfig+0xb2>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a25      	ldr	r2, [pc, #148]	; (8002008 <TIM_Base_SetConfig+0x134>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d007      	beq.n	8001f86 <TIM_Base_SetConfig+0xb2>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a24      	ldr	r2, [pc, #144]	; (800200c <TIM_Base_SetConfig+0x138>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d003      	beq.n	8001f86 <TIM_Base_SetConfig+0xb2>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a23      	ldr	r2, [pc, #140]	; (8002010 <TIM_Base_SetConfig+0x13c>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d108      	bne.n	8001f98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	695b      	ldr	r3, [r3, #20]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a0a      	ldr	r2, [pc, #40]	; (8001fe8 <TIM_Base_SetConfig+0x114>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d003      	beq.n	8001fcc <TIM_Base_SetConfig+0xf8>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a0c      	ldr	r2, [pc, #48]	; (8001ff8 <TIM_Base_SetConfig+0x124>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d103      	bne.n	8001fd4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	691a      	ldr	r2, [r3, #16]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	615a      	str	r2, [r3, #20]
}
 8001fda:	bf00      	nop
 8001fdc:	3714      	adds	r7, #20
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	40010000 	.word	0x40010000
 8001fec:	40000400 	.word	0x40000400
 8001ff0:	40000800 	.word	0x40000800
 8001ff4:	40000c00 	.word	0x40000c00
 8001ff8:	40010400 	.word	0x40010400
 8001ffc:	40014000 	.word	0x40014000
 8002000:	40014400 	.word	0x40014400
 8002004:	40014800 	.word	0x40014800
 8002008:	40001800 	.word	0x40001800
 800200c:	40001c00 	.word	0x40001c00
 8002010:	40002000 	.word	0x40002000

08002014 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e040      	b.n	80020e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002066:	2b00      	cmp	r3, #0
 8002068:	d106      	bne.n	8002078 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f002 fd44 	bl	8004b00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2224      	movs	r2, #36	; 0x24
 800207c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f022 0201 	bic.w	r2, r2, #1
 800208c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 fa90 	bl	80025b4 <UART_SetConfig>
 8002094:	4603      	mov	r3, r0
 8002096:	2b01      	cmp	r3, #1
 8002098:	d101      	bne.n	800209e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e022      	b.n	80020e4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d002      	beq.n	80020ac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 fd28 	bl	8002afc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689a      	ldr	r2, [r3, #8]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020ca:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f042 0201 	orr.w	r2, r2, #1
 80020da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 fdaf 	bl	8002c40 <UART_CheckIdleState>
 80020e2:	4603      	mov	r3, r0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b08a      	sub	sp, #40	; 0x28
 80020f0:	af02      	add	r7, sp, #8
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	603b      	str	r3, [r7, #0]
 80020f8:	4613      	mov	r3, r2
 80020fa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002100:	2b20      	cmp	r3, #32
 8002102:	d17f      	bne.n	8002204 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d002      	beq.n	8002110 <HAL_UART_Transmit+0x24>
 800210a:	88fb      	ldrh	r3, [r7, #6]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d101      	bne.n	8002114 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e078      	b.n	8002206 <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800211a:	2b01      	cmp	r3, #1
 800211c:	d101      	bne.n	8002122 <HAL_UART_Transmit+0x36>
 800211e:	2302      	movs	r3, #2
 8002120:	e071      	b.n	8002206 <HAL_UART_Transmit+0x11a>
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2201      	movs	r2, #1
 8002126:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2200      	movs	r2, #0
 800212e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2221      	movs	r2, #33	; 0x21
 8002134:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002136:	f7fe fa0d 	bl	8000554 <HAL_GetTick>
 800213a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	88fa      	ldrh	r2, [r7, #6]
 8002140:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	88fa      	ldrh	r2, [r7, #6]
 8002148:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002154:	d108      	bne.n	8002168 <HAL_UART_Transmit+0x7c>
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d104      	bne.n	8002168 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800215e:	2300      	movs	r3, #0
 8002160:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	61bb      	str	r3, [r7, #24]
 8002166:	e003      	b.n	8002170 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800216c:	2300      	movs	r3, #0
 800216e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002170:	e02c      	b.n	80021cc <HAL_UART_Transmit+0xe0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	9300      	str	r3, [sp, #0]
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	2200      	movs	r2, #0
 800217a:	2180      	movs	r1, #128	; 0x80
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	f000 fd8e 	bl	8002c9e <UART_WaitOnFlagUntilTimeout>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <HAL_UART_Transmit+0xa0>
      {
        return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e03c      	b.n	8002206 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d10b      	bne.n	80021aa <HAL_UART_Transmit+0xbe>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	881b      	ldrh	r3, [r3, #0]
 8002196:	461a      	mov	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021a0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	3302      	adds	r3, #2
 80021a6:	61bb      	str	r3, [r7, #24]
 80021a8:	e007      	b.n	80021ba <HAL_UART_Transmit+0xce>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	781a      	ldrb	r2, [r3, #0]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	3301      	adds	r3, #1
 80021b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	3b01      	subs	r3, #1
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1cc      	bne.n	8002172 <HAL_UART_Transmit+0x86>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	2200      	movs	r2, #0
 80021e0:	2140      	movs	r1, #64	; 0x40
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f000 fd5b 	bl	8002c9e <UART_WaitOnFlagUntilTimeout>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <HAL_UART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e009      	b.n	8002206 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2220      	movs	r2, #32
 80021f6:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8002200:	2300      	movs	r3, #0
 8002202:	e000      	b.n	8002206 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8002204:	2302      	movs	r3, #2
  }
}
 8002206:	4618      	mov	r0, r3
 8002208:	3720      	adds	r7, #32
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
	...

08002210 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	4613      	mov	r3, r2
 800221c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002222:	2b20      	cmp	r3, #32
 8002224:	f040 808a 	bne.w	800233c <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d002      	beq.n	8002234 <HAL_UART_Receive_IT+0x24>
 800222e:	88fb      	ldrh	r3, [r7, #6]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d101      	bne.n	8002238 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e082      	b.n	800233e <HAL_UART_Receive_IT+0x12e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800223e:	2b01      	cmp	r3, #1
 8002240:	d101      	bne.n	8002246 <HAL_UART_Receive_IT+0x36>
 8002242:	2302      	movs	r3, #2
 8002244:	e07b      	b.n	800233e <HAL_UART_Receive_IT+0x12e>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	68ba      	ldr	r2, [r7, #8]
 8002252:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	88fa      	ldrh	r2, [r7, #6]
 8002258:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	88fa      	ldrh	r2, [r7, #6]
 8002260:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2200      	movs	r2, #0
 8002268:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002272:	d10e      	bne.n	8002292 <HAL_UART_Receive_IT+0x82>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d105      	bne.n	8002288 <HAL_UART_Receive_IT+0x78>
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002282:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002286:	e02d      	b.n	80022e4 <HAL_UART_Receive_IT+0xd4>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	22ff      	movs	r2, #255	; 0xff
 800228c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002290:	e028      	b.n	80022e4 <HAL_UART_Receive_IT+0xd4>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d10d      	bne.n	80022b6 <HAL_UART_Receive_IT+0xa6>
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d104      	bne.n	80022ac <HAL_UART_Receive_IT+0x9c>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	22ff      	movs	r2, #255	; 0xff
 80022a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80022aa:	e01b      	b.n	80022e4 <HAL_UART_Receive_IT+0xd4>
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	227f      	movs	r2, #127	; 0x7f
 80022b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80022b4:	e016      	b.n	80022e4 <HAL_UART_Receive_IT+0xd4>
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022be:	d10d      	bne.n	80022dc <HAL_UART_Receive_IT+0xcc>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d104      	bne.n	80022d2 <HAL_UART_Receive_IT+0xc2>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	227f      	movs	r2, #127	; 0x7f
 80022cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80022d0:	e008      	b.n	80022e4 <HAL_UART_Receive_IT+0xd4>
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	223f      	movs	r2, #63	; 0x3f
 80022d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80022da:	e003      	b.n	80022e4 <HAL_UART_Receive_IT+0xd4>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2200      	movs	r2, #0
 80022e8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2222      	movs	r2, #34	; 0x22
 80022ee:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	689a      	ldr	r2, [r3, #8]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f042 0201 	orr.w	r2, r2, #1
 80022fe:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002308:	d107      	bne.n	800231a <HAL_UART_Receive_IT+0x10a>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d103      	bne.n	800231a <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	4a0d      	ldr	r2, [pc, #52]	; (800234c <HAL_UART_Receive_IT+0x13c>)
 8002316:	661a      	str	r2, [r3, #96]	; 0x60
 8002318:	e002      	b.n	8002320 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	4a0c      	ldr	r2, [pc, #48]	; (8002350 <HAL_UART_Receive_IT+0x140>)
 800231e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8002336:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002338:	2300      	movs	r3, #0
 800233a:	e000      	b.n	800233e <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800233c:	2302      	movs	r3, #2
  }
}
 800233e:	4618      	mov	r0, r3
 8002340:	3714      	adds	r7, #20
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	08002e73 	.word	0x08002e73
 8002350:	08002dcd 	.word	0x08002dcd

08002354 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b088      	sub	sp, #32
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	f003 030f 	and.w	r3, r3, #15
 800237a:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d113      	bne.n	80023aa <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	f003 0320 	and.w	r3, r3, #32
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00e      	beq.n	80023aa <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	f003 0320 	and.w	r3, r3, #32
 8002392:	2b00      	cmp	r3, #0
 8002394:	d009      	beq.n	80023aa <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800239a:	2b00      	cmp	r3, #0
 800239c:	f000 80eb 	beq.w	8002576 <HAL_UART_IRQHandler+0x222>
      {
        huart->RxISR(huart);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	4798      	blx	r3
      }
      return;
 80023a8:	e0e5      	b.n	8002576 <HAL_UART_IRQHandler+0x222>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 80c0 	beq.w	8002532 <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	f003 0301 	and.w	r3, r3, #1
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d105      	bne.n	80023c8 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f000 80b5 	beq.w	8002532 <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00e      	beq.n	80023f0 <HAL_UART_IRQHandler+0x9c>
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d009      	beq.n	80023f0 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2201      	movs	r2, #1
 80023e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023e8:	f043 0201 	orr.w	r2, r3, #1
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00e      	beq.n	8002418 <HAL_UART_IRQHandler+0xc4>
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	2b00      	cmp	r3, #0
 8002402:	d009      	beq.n	8002418 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2202      	movs	r2, #2
 800240a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002410:	f043 0204 	orr.w	r2, r3, #4
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	f003 0304 	and.w	r3, r3, #4
 800241e:	2b00      	cmp	r3, #0
 8002420:	d00e      	beq.n	8002440 <HAL_UART_IRQHandler+0xec>
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	2b00      	cmp	r3, #0
 800242a:	d009      	beq.n	8002440 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2204      	movs	r2, #4
 8002432:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002438:	f043 0202 	orr.w	r2, r3, #2
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	f003 0308 	and.w	r3, r3, #8
 8002446:	2b00      	cmp	r3, #0
 8002448:	d013      	beq.n	8002472 <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	f003 0320 	and.w	r3, r3, #32
 8002450:	2b00      	cmp	r3, #0
 8002452:	d104      	bne.n	800245e <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800245a:	2b00      	cmp	r3, #0
 800245c:	d009      	beq.n	8002472 <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2208      	movs	r2, #8
 8002464:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800246a:	f043 0208 	orr.w	r2, r3, #8
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002476:	2b00      	cmp	r3, #0
 8002478:	d07f      	beq.n	800257a <HAL_UART_IRQHandler+0x226>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	f003 0320 	and.w	r3, r3, #32
 8002480:	2b00      	cmp	r3, #0
 8002482:	d00c      	beq.n	800249e <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	f003 0320 	and.w	r3, r3, #32
 800248a:	2b00      	cmp	r3, #0
 800248c:	d007      	beq.n	800249e <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024a2:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ae:	2b40      	cmp	r3, #64	; 0x40
 80024b0:	d004      	beq.n	80024bc <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d031      	beq.n	8002520 <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 fc36 	bl	8002d2e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024cc:	2b40      	cmp	r3, #64	; 0x40
 80024ce:	d123      	bne.n	8002518 <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	689a      	ldr	r2, [r3, #8]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024de:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d013      	beq.n	8002510 <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024ec:	4a26      	ldr	r2, [pc, #152]	; (8002588 <HAL_UART_IRQHandler+0x234>)
 80024ee:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7fe f91b 	bl	8000730 <HAL_DMA_Abort_IT>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d016      	beq.n	800252e <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800250a:	4610      	mov	r0, r2
 800250c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800250e:	e00e      	b.n	800252e <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f000 f845 	bl	80025a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002516:	e00a      	b.n	800252e <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 f841 	bl	80025a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800251e:	e006      	b.n	800252e <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 f83d 	bl	80025a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800252c:	e025      	b.n	800257a <HAL_UART_IRQHandler+0x226>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800252e:	bf00      	nop
    return;
 8002530:	e023      	b.n	800257a <HAL_UART_IRQHandler+0x226>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002538:	2b00      	cmp	r3, #0
 800253a:	d00d      	beq.n	8002558 <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002542:	2b00      	cmp	r3, #0
 8002544:	d008      	beq.n	8002558 <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800254a:	2b00      	cmp	r3, #0
 800254c:	d017      	beq.n	800257e <HAL_UART_IRQHandler+0x22a>
    {
      huart->TxISR(huart);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	4798      	blx	r3
    }
    return;
 8002556:	e012      	b.n	800257e <HAL_UART_IRQHandler+0x22a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00e      	beq.n	8002580 <HAL_UART_IRQHandler+0x22c>
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002568:	2b00      	cmp	r3, #0
 800256a:	d009      	beq.n	8002580 <HAL_UART_IRQHandler+0x22c>
  {
    UART_EndTransmit_IT(huart);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f000 fc14 	bl	8002d9a <UART_EndTransmit_IT>
    return;
 8002572:	bf00      	nop
 8002574:	e004      	b.n	8002580 <HAL_UART_IRQHandler+0x22c>
      return;
 8002576:	bf00      	nop
 8002578:	e002      	b.n	8002580 <HAL_UART_IRQHandler+0x22c>
    return;
 800257a:	bf00      	nop
 800257c:	e000      	b.n	8002580 <HAL_UART_IRQHandler+0x22c>
    return;
 800257e:	bf00      	nop
  }

}
 8002580:	3720      	adds	r7, #32
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	08002d6f 	.word	0x08002d6f

0800258c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b088      	sub	sp, #32
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80025bc:	2300      	movs	r3, #0
 80025be:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80025c0:	2300      	movs	r3, #0
 80025c2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	431a      	orrs	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	431a      	orrs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	69db      	ldr	r3, [r3, #28]
 80025d8:	4313      	orrs	r3, r2
 80025da:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	4bb1      	ldr	r3, [pc, #708]	; (80028a8 <UART_SetConfig+0x2f4>)
 80025e4:	4013      	ands	r3, r2
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6812      	ldr	r2, [r2, #0]
 80025ea:	6939      	ldr	r1, [r7, #16]
 80025ec:	430b      	orrs	r3, r1
 80025ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	68da      	ldr	r2, [r3, #12]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	4313      	orrs	r3, r2
 8002614:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	430a      	orrs	r2, r1
 8002628:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a9f      	ldr	r2, [pc, #636]	; (80028ac <UART_SetConfig+0x2f8>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d121      	bne.n	8002678 <UART_SetConfig+0xc4>
 8002634:	4b9e      	ldr	r3, [pc, #632]	; (80028b0 <UART_SetConfig+0x2fc>)
 8002636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800263a:	f003 0303 	and.w	r3, r3, #3
 800263e:	2b03      	cmp	r3, #3
 8002640:	d816      	bhi.n	8002670 <UART_SetConfig+0xbc>
 8002642:	a201      	add	r2, pc, #4	; (adr r2, 8002648 <UART_SetConfig+0x94>)
 8002644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002648:	08002659 	.word	0x08002659
 800264c:	08002665 	.word	0x08002665
 8002650:	0800265f 	.word	0x0800265f
 8002654:	0800266b 	.word	0x0800266b
 8002658:	2301      	movs	r3, #1
 800265a:	77fb      	strb	r3, [r7, #31]
 800265c:	e151      	b.n	8002902 <UART_SetConfig+0x34e>
 800265e:	2302      	movs	r3, #2
 8002660:	77fb      	strb	r3, [r7, #31]
 8002662:	e14e      	b.n	8002902 <UART_SetConfig+0x34e>
 8002664:	2304      	movs	r3, #4
 8002666:	77fb      	strb	r3, [r7, #31]
 8002668:	e14b      	b.n	8002902 <UART_SetConfig+0x34e>
 800266a:	2308      	movs	r3, #8
 800266c:	77fb      	strb	r3, [r7, #31]
 800266e:	e148      	b.n	8002902 <UART_SetConfig+0x34e>
 8002670:	2310      	movs	r3, #16
 8002672:	77fb      	strb	r3, [r7, #31]
 8002674:	bf00      	nop
 8002676:	e144      	b.n	8002902 <UART_SetConfig+0x34e>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a8d      	ldr	r2, [pc, #564]	; (80028b4 <UART_SetConfig+0x300>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d134      	bne.n	80026ec <UART_SetConfig+0x138>
 8002682:	4b8b      	ldr	r3, [pc, #556]	; (80028b0 <UART_SetConfig+0x2fc>)
 8002684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002688:	f003 030c 	and.w	r3, r3, #12
 800268c:	2b0c      	cmp	r3, #12
 800268e:	d829      	bhi.n	80026e4 <UART_SetConfig+0x130>
 8002690:	a201      	add	r2, pc, #4	; (adr r2, 8002698 <UART_SetConfig+0xe4>)
 8002692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002696:	bf00      	nop
 8002698:	080026cd 	.word	0x080026cd
 800269c:	080026e5 	.word	0x080026e5
 80026a0:	080026e5 	.word	0x080026e5
 80026a4:	080026e5 	.word	0x080026e5
 80026a8:	080026d9 	.word	0x080026d9
 80026ac:	080026e5 	.word	0x080026e5
 80026b0:	080026e5 	.word	0x080026e5
 80026b4:	080026e5 	.word	0x080026e5
 80026b8:	080026d3 	.word	0x080026d3
 80026bc:	080026e5 	.word	0x080026e5
 80026c0:	080026e5 	.word	0x080026e5
 80026c4:	080026e5 	.word	0x080026e5
 80026c8:	080026df 	.word	0x080026df
 80026cc:	2300      	movs	r3, #0
 80026ce:	77fb      	strb	r3, [r7, #31]
 80026d0:	e117      	b.n	8002902 <UART_SetConfig+0x34e>
 80026d2:	2302      	movs	r3, #2
 80026d4:	77fb      	strb	r3, [r7, #31]
 80026d6:	e114      	b.n	8002902 <UART_SetConfig+0x34e>
 80026d8:	2304      	movs	r3, #4
 80026da:	77fb      	strb	r3, [r7, #31]
 80026dc:	e111      	b.n	8002902 <UART_SetConfig+0x34e>
 80026de:	2308      	movs	r3, #8
 80026e0:	77fb      	strb	r3, [r7, #31]
 80026e2:	e10e      	b.n	8002902 <UART_SetConfig+0x34e>
 80026e4:	2310      	movs	r3, #16
 80026e6:	77fb      	strb	r3, [r7, #31]
 80026e8:	bf00      	nop
 80026ea:	e10a      	b.n	8002902 <UART_SetConfig+0x34e>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a71      	ldr	r2, [pc, #452]	; (80028b8 <UART_SetConfig+0x304>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d120      	bne.n	8002738 <UART_SetConfig+0x184>
 80026f6:	4b6e      	ldr	r3, [pc, #440]	; (80028b0 <UART_SetConfig+0x2fc>)
 80026f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026fc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002700:	2b10      	cmp	r3, #16
 8002702:	d00f      	beq.n	8002724 <UART_SetConfig+0x170>
 8002704:	2b10      	cmp	r3, #16
 8002706:	d802      	bhi.n	800270e <UART_SetConfig+0x15a>
 8002708:	2b00      	cmp	r3, #0
 800270a:	d005      	beq.n	8002718 <UART_SetConfig+0x164>
 800270c:	e010      	b.n	8002730 <UART_SetConfig+0x17c>
 800270e:	2b20      	cmp	r3, #32
 8002710:	d005      	beq.n	800271e <UART_SetConfig+0x16a>
 8002712:	2b30      	cmp	r3, #48	; 0x30
 8002714:	d009      	beq.n	800272a <UART_SetConfig+0x176>
 8002716:	e00b      	b.n	8002730 <UART_SetConfig+0x17c>
 8002718:	2300      	movs	r3, #0
 800271a:	77fb      	strb	r3, [r7, #31]
 800271c:	e0f1      	b.n	8002902 <UART_SetConfig+0x34e>
 800271e:	2302      	movs	r3, #2
 8002720:	77fb      	strb	r3, [r7, #31]
 8002722:	e0ee      	b.n	8002902 <UART_SetConfig+0x34e>
 8002724:	2304      	movs	r3, #4
 8002726:	77fb      	strb	r3, [r7, #31]
 8002728:	e0eb      	b.n	8002902 <UART_SetConfig+0x34e>
 800272a:	2308      	movs	r3, #8
 800272c:	77fb      	strb	r3, [r7, #31]
 800272e:	e0e8      	b.n	8002902 <UART_SetConfig+0x34e>
 8002730:	2310      	movs	r3, #16
 8002732:	77fb      	strb	r3, [r7, #31]
 8002734:	bf00      	nop
 8002736:	e0e4      	b.n	8002902 <UART_SetConfig+0x34e>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a5f      	ldr	r2, [pc, #380]	; (80028bc <UART_SetConfig+0x308>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d120      	bne.n	8002784 <UART_SetConfig+0x1d0>
 8002742:	4b5b      	ldr	r3, [pc, #364]	; (80028b0 <UART_SetConfig+0x2fc>)
 8002744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002748:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800274c:	2b40      	cmp	r3, #64	; 0x40
 800274e:	d00f      	beq.n	8002770 <UART_SetConfig+0x1bc>
 8002750:	2b40      	cmp	r3, #64	; 0x40
 8002752:	d802      	bhi.n	800275a <UART_SetConfig+0x1a6>
 8002754:	2b00      	cmp	r3, #0
 8002756:	d005      	beq.n	8002764 <UART_SetConfig+0x1b0>
 8002758:	e010      	b.n	800277c <UART_SetConfig+0x1c8>
 800275a:	2b80      	cmp	r3, #128	; 0x80
 800275c:	d005      	beq.n	800276a <UART_SetConfig+0x1b6>
 800275e:	2bc0      	cmp	r3, #192	; 0xc0
 8002760:	d009      	beq.n	8002776 <UART_SetConfig+0x1c2>
 8002762:	e00b      	b.n	800277c <UART_SetConfig+0x1c8>
 8002764:	2300      	movs	r3, #0
 8002766:	77fb      	strb	r3, [r7, #31]
 8002768:	e0cb      	b.n	8002902 <UART_SetConfig+0x34e>
 800276a:	2302      	movs	r3, #2
 800276c:	77fb      	strb	r3, [r7, #31]
 800276e:	e0c8      	b.n	8002902 <UART_SetConfig+0x34e>
 8002770:	2304      	movs	r3, #4
 8002772:	77fb      	strb	r3, [r7, #31]
 8002774:	e0c5      	b.n	8002902 <UART_SetConfig+0x34e>
 8002776:	2308      	movs	r3, #8
 8002778:	77fb      	strb	r3, [r7, #31]
 800277a:	e0c2      	b.n	8002902 <UART_SetConfig+0x34e>
 800277c:	2310      	movs	r3, #16
 800277e:	77fb      	strb	r3, [r7, #31]
 8002780:	bf00      	nop
 8002782:	e0be      	b.n	8002902 <UART_SetConfig+0x34e>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a4d      	ldr	r2, [pc, #308]	; (80028c0 <UART_SetConfig+0x30c>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d124      	bne.n	80027d8 <UART_SetConfig+0x224>
 800278e:	4b48      	ldr	r3, [pc, #288]	; (80028b0 <UART_SetConfig+0x2fc>)
 8002790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002794:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002798:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800279c:	d012      	beq.n	80027c4 <UART_SetConfig+0x210>
 800279e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027a2:	d802      	bhi.n	80027aa <UART_SetConfig+0x1f6>
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d007      	beq.n	80027b8 <UART_SetConfig+0x204>
 80027a8:	e012      	b.n	80027d0 <UART_SetConfig+0x21c>
 80027aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027ae:	d006      	beq.n	80027be <UART_SetConfig+0x20a>
 80027b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027b4:	d009      	beq.n	80027ca <UART_SetConfig+0x216>
 80027b6:	e00b      	b.n	80027d0 <UART_SetConfig+0x21c>
 80027b8:	2300      	movs	r3, #0
 80027ba:	77fb      	strb	r3, [r7, #31]
 80027bc:	e0a1      	b.n	8002902 <UART_SetConfig+0x34e>
 80027be:	2302      	movs	r3, #2
 80027c0:	77fb      	strb	r3, [r7, #31]
 80027c2:	e09e      	b.n	8002902 <UART_SetConfig+0x34e>
 80027c4:	2304      	movs	r3, #4
 80027c6:	77fb      	strb	r3, [r7, #31]
 80027c8:	e09b      	b.n	8002902 <UART_SetConfig+0x34e>
 80027ca:	2308      	movs	r3, #8
 80027cc:	77fb      	strb	r3, [r7, #31]
 80027ce:	e098      	b.n	8002902 <UART_SetConfig+0x34e>
 80027d0:	2310      	movs	r3, #16
 80027d2:	77fb      	strb	r3, [r7, #31]
 80027d4:	bf00      	nop
 80027d6:	e094      	b.n	8002902 <UART_SetConfig+0x34e>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a39      	ldr	r2, [pc, #228]	; (80028c4 <UART_SetConfig+0x310>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d124      	bne.n	800282c <UART_SetConfig+0x278>
 80027e2:	4b33      	ldr	r3, [pc, #204]	; (80028b0 <UART_SetConfig+0x2fc>)
 80027e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80027ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027f0:	d012      	beq.n	8002818 <UART_SetConfig+0x264>
 80027f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027f6:	d802      	bhi.n	80027fe <UART_SetConfig+0x24a>
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d007      	beq.n	800280c <UART_SetConfig+0x258>
 80027fc:	e012      	b.n	8002824 <UART_SetConfig+0x270>
 80027fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002802:	d006      	beq.n	8002812 <UART_SetConfig+0x25e>
 8002804:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002808:	d009      	beq.n	800281e <UART_SetConfig+0x26a>
 800280a:	e00b      	b.n	8002824 <UART_SetConfig+0x270>
 800280c:	2301      	movs	r3, #1
 800280e:	77fb      	strb	r3, [r7, #31]
 8002810:	e077      	b.n	8002902 <UART_SetConfig+0x34e>
 8002812:	2302      	movs	r3, #2
 8002814:	77fb      	strb	r3, [r7, #31]
 8002816:	e074      	b.n	8002902 <UART_SetConfig+0x34e>
 8002818:	2304      	movs	r3, #4
 800281a:	77fb      	strb	r3, [r7, #31]
 800281c:	e071      	b.n	8002902 <UART_SetConfig+0x34e>
 800281e:	2308      	movs	r3, #8
 8002820:	77fb      	strb	r3, [r7, #31]
 8002822:	e06e      	b.n	8002902 <UART_SetConfig+0x34e>
 8002824:	2310      	movs	r3, #16
 8002826:	77fb      	strb	r3, [r7, #31]
 8002828:	bf00      	nop
 800282a:	e06a      	b.n	8002902 <UART_SetConfig+0x34e>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a25      	ldr	r2, [pc, #148]	; (80028c8 <UART_SetConfig+0x314>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d124      	bne.n	8002880 <UART_SetConfig+0x2cc>
 8002836:	4b1e      	ldr	r3, [pc, #120]	; (80028b0 <UART_SetConfig+0x2fc>)
 8002838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800283c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002840:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002844:	d012      	beq.n	800286c <UART_SetConfig+0x2b8>
 8002846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800284a:	d802      	bhi.n	8002852 <UART_SetConfig+0x29e>
 800284c:	2b00      	cmp	r3, #0
 800284e:	d007      	beq.n	8002860 <UART_SetConfig+0x2ac>
 8002850:	e012      	b.n	8002878 <UART_SetConfig+0x2c4>
 8002852:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002856:	d006      	beq.n	8002866 <UART_SetConfig+0x2b2>
 8002858:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800285c:	d009      	beq.n	8002872 <UART_SetConfig+0x2be>
 800285e:	e00b      	b.n	8002878 <UART_SetConfig+0x2c4>
 8002860:	2300      	movs	r3, #0
 8002862:	77fb      	strb	r3, [r7, #31]
 8002864:	e04d      	b.n	8002902 <UART_SetConfig+0x34e>
 8002866:	2302      	movs	r3, #2
 8002868:	77fb      	strb	r3, [r7, #31]
 800286a:	e04a      	b.n	8002902 <UART_SetConfig+0x34e>
 800286c:	2304      	movs	r3, #4
 800286e:	77fb      	strb	r3, [r7, #31]
 8002870:	e047      	b.n	8002902 <UART_SetConfig+0x34e>
 8002872:	2308      	movs	r3, #8
 8002874:	77fb      	strb	r3, [r7, #31]
 8002876:	e044      	b.n	8002902 <UART_SetConfig+0x34e>
 8002878:	2310      	movs	r3, #16
 800287a:	77fb      	strb	r3, [r7, #31]
 800287c:	bf00      	nop
 800287e:	e040      	b.n	8002902 <UART_SetConfig+0x34e>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a11      	ldr	r2, [pc, #68]	; (80028cc <UART_SetConfig+0x318>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d139      	bne.n	80028fe <UART_SetConfig+0x34a>
 800288a:	4b09      	ldr	r3, [pc, #36]	; (80028b0 <UART_SetConfig+0x2fc>)
 800288c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002890:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002894:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002898:	d027      	beq.n	80028ea <UART_SetConfig+0x336>
 800289a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800289e:	d817      	bhi.n	80028d0 <UART_SetConfig+0x31c>
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d01c      	beq.n	80028de <UART_SetConfig+0x32a>
 80028a4:	e027      	b.n	80028f6 <UART_SetConfig+0x342>
 80028a6:	bf00      	nop
 80028a8:	efff69f3 	.word	0xefff69f3
 80028ac:	40011000 	.word	0x40011000
 80028b0:	40023800 	.word	0x40023800
 80028b4:	40004400 	.word	0x40004400
 80028b8:	40004800 	.word	0x40004800
 80028bc:	40004c00 	.word	0x40004c00
 80028c0:	40005000 	.word	0x40005000
 80028c4:	40011400 	.word	0x40011400
 80028c8:	40007800 	.word	0x40007800
 80028cc:	40007c00 	.word	0x40007c00
 80028d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028d4:	d006      	beq.n	80028e4 <UART_SetConfig+0x330>
 80028d6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80028da:	d009      	beq.n	80028f0 <UART_SetConfig+0x33c>
 80028dc:	e00b      	b.n	80028f6 <UART_SetConfig+0x342>
 80028de:	2300      	movs	r3, #0
 80028e0:	77fb      	strb	r3, [r7, #31]
 80028e2:	e00e      	b.n	8002902 <UART_SetConfig+0x34e>
 80028e4:	2302      	movs	r3, #2
 80028e6:	77fb      	strb	r3, [r7, #31]
 80028e8:	e00b      	b.n	8002902 <UART_SetConfig+0x34e>
 80028ea:	2304      	movs	r3, #4
 80028ec:	77fb      	strb	r3, [r7, #31]
 80028ee:	e008      	b.n	8002902 <UART_SetConfig+0x34e>
 80028f0:	2308      	movs	r3, #8
 80028f2:	77fb      	strb	r3, [r7, #31]
 80028f4:	e005      	b.n	8002902 <UART_SetConfig+0x34e>
 80028f6:	2310      	movs	r3, #16
 80028f8:	77fb      	strb	r3, [r7, #31]
 80028fa:	bf00      	nop
 80028fc:	e001      	b.n	8002902 <UART_SetConfig+0x34e>
 80028fe:	2310      	movs	r3, #16
 8002900:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69db      	ldr	r3, [r3, #28]
 8002906:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800290a:	d17c      	bne.n	8002a06 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 800290c:	7ffb      	ldrb	r3, [r7, #31]
 800290e:	2b08      	cmp	r3, #8
 8002910:	d859      	bhi.n	80029c6 <UART_SetConfig+0x412>
 8002912:	a201      	add	r2, pc, #4	; (adr r2, 8002918 <UART_SetConfig+0x364>)
 8002914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002918:	0800293d 	.word	0x0800293d
 800291c:	0800295b 	.word	0x0800295b
 8002920:	08002979 	.word	0x08002979
 8002924:	080029c7 	.word	0x080029c7
 8002928:	08002991 	.word	0x08002991
 800292c:	080029c7 	.word	0x080029c7
 8002930:	080029c7 	.word	0x080029c7
 8002934:	080029c7 	.word	0x080029c7
 8002938:	080029af 	.word	0x080029af
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800293c:	f7fe fcda 	bl	80012f4 <HAL_RCC_GetPCLK1Freq>
 8002940:	4603      	mov	r3, r0
 8002942:	005a      	lsls	r2, r3, #1
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	085b      	lsrs	r3, r3, #1
 800294a:	441a      	add	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	fbb2 f3f3 	udiv	r3, r2, r3
 8002954:	b29b      	uxth	r3, r3
 8002956:	61bb      	str	r3, [r7, #24]
        break;
 8002958:	e038      	b.n	80029cc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800295a:	f7fe fcdf 	bl	800131c <HAL_RCC_GetPCLK2Freq>
 800295e:	4603      	mov	r3, r0
 8002960:	005a      	lsls	r2, r3, #1
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	085b      	lsrs	r3, r3, #1
 8002968:	441a      	add	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002972:	b29b      	uxth	r3, r3
 8002974:	61bb      	str	r3, [r7, #24]
        break;
 8002976:	e029      	b.n	80029cc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	085a      	lsrs	r2, r3, #1
 800297e:	4b5d      	ldr	r3, [pc, #372]	; (8002af4 <UART_SetConfig+0x540>)
 8002980:	4413      	add	r3, r2
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6852      	ldr	r2, [r2, #4]
 8002986:	fbb3 f3f2 	udiv	r3, r3, r2
 800298a:	b29b      	uxth	r3, r3
 800298c:	61bb      	str	r3, [r7, #24]
        break;
 800298e:	e01d      	b.n	80029cc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002990:	f7fe fbf2 	bl	8001178 <HAL_RCC_GetSysClockFreq>
 8002994:	4603      	mov	r3, r0
 8002996:	005a      	lsls	r2, r3, #1
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	085b      	lsrs	r3, r3, #1
 800299e:	441a      	add	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	61bb      	str	r3, [r7, #24]
        break;
 80029ac:	e00e      	b.n	80029cc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	085b      	lsrs	r3, r3, #1
 80029b4:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	61bb      	str	r3, [r7, #24]
        break;
 80029c4:	e002      	b.n	80029cc <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	75fb      	strb	r3, [r7, #23]
        break;
 80029ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	2b0f      	cmp	r3, #15
 80029d0:	d916      	bls.n	8002a00 <UART_SetConfig+0x44c>
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029d8:	d212      	bcs.n	8002a00 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	b29b      	uxth	r3, r3
 80029de:	f023 030f 	bic.w	r3, r3, #15
 80029e2:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	085b      	lsrs	r3, r3, #1
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	f003 0307 	and.w	r3, r3, #7
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	89fb      	ldrh	r3, [r7, #14]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	89fa      	ldrh	r2, [r7, #14]
 80029fc:	60da      	str	r2, [r3, #12]
 80029fe:	e06e      	b.n	8002ade <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	75fb      	strb	r3, [r7, #23]
 8002a04:	e06b      	b.n	8002ade <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8002a06:	7ffb      	ldrb	r3, [r7, #31]
 8002a08:	2b08      	cmp	r3, #8
 8002a0a:	d857      	bhi.n	8002abc <UART_SetConfig+0x508>
 8002a0c:	a201      	add	r2, pc, #4	; (adr r2, 8002a14 <UART_SetConfig+0x460>)
 8002a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a12:	bf00      	nop
 8002a14:	08002a39 	.word	0x08002a39
 8002a18:	08002a55 	.word	0x08002a55
 8002a1c:	08002a71 	.word	0x08002a71
 8002a20:	08002abd 	.word	0x08002abd
 8002a24:	08002a89 	.word	0x08002a89
 8002a28:	08002abd 	.word	0x08002abd
 8002a2c:	08002abd 	.word	0x08002abd
 8002a30:	08002abd 	.word	0x08002abd
 8002a34:	08002aa5 	.word	0x08002aa5
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002a38:	f7fe fc5c 	bl	80012f4 <HAL_RCC_GetPCLK1Freq>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	085b      	lsrs	r3, r3, #1
 8002a44:	441a      	add	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	61bb      	str	r3, [r7, #24]
        break;
 8002a52:	e036      	b.n	8002ac2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002a54:	f7fe fc62 	bl	800131c <HAL_RCC_GetPCLK2Freq>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	085b      	lsrs	r3, r3, #1
 8002a60:	441a      	add	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	61bb      	str	r3, [r7, #24]
        break;
 8002a6e:	e028      	b.n	8002ac2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	085a      	lsrs	r2, r3, #1
 8002a76:	4b20      	ldr	r3, [pc, #128]	; (8002af8 <UART_SetConfig+0x544>)
 8002a78:	4413      	add	r3, r2
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	6852      	ldr	r2, [r2, #4]
 8002a7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	61bb      	str	r3, [r7, #24]
        break;
 8002a86:	e01c      	b.n	8002ac2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002a88:	f7fe fb76 	bl	8001178 <HAL_RCC_GetSysClockFreq>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	085b      	lsrs	r3, r3, #1
 8002a94:	441a      	add	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	61bb      	str	r3, [r7, #24]
        break;
 8002aa2:	e00e      	b.n	8002ac2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	085b      	lsrs	r3, r3, #1
 8002aaa:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	61bb      	str	r3, [r7, #24]
        break;
 8002aba:	e002      	b.n	8002ac2 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	75fb      	strb	r3, [r7, #23]
        break;
 8002ac0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	2b0f      	cmp	r3, #15
 8002ac6:	d908      	bls.n	8002ada <UART_SetConfig+0x526>
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ace:	d204      	bcs.n	8002ada <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	60da      	str	r2, [r3, #12]
 8002ad8:	e001      	b.n	8002ade <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002aea:	7dfb      	ldrb	r3, [r7, #23]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3720      	adds	r7, #32
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	01e84800 	.word	0x01e84800
 8002af8:	00f42400 	.word	0x00f42400

08002afc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b08:	f003 0301 	and.w	r3, r3, #1
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d00a      	beq.n	8002b26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	430a      	orrs	r2, r1
 8002b24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00a      	beq.n	8002b48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	430a      	orrs	r2, r1
 8002b46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d00a      	beq.n	8002b6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	430a      	orrs	r2, r1
 8002b68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6e:	f003 0308 	and.w	r3, r3, #8
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d00a      	beq.n	8002b8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b90:	f003 0310 	and.w	r3, r3, #16
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d00a      	beq.n	8002bae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	430a      	orrs	r2, r1
 8002bac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb2:	f003 0320 	and.w	r3, r3, #32
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00a      	beq.n	8002bd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d01a      	beq.n	8002c12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bfa:	d10a      	bne.n	8002c12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00a      	beq.n	8002c34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	430a      	orrs	r2, r1
 8002c32:	605a      	str	r2, [r3, #4]
  }
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af02      	add	r7, sp, #8
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002c4e:	f7fd fc81 	bl	8000554 <HAL_GetTick>
 8002c52:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0308 	and.w	r3, r3, #8
 8002c5e:	2b08      	cmp	r3, #8
 8002c60:	d10e      	bne.n	8002c80 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c62:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 f814 	bl	8002c9e <UART_WaitOnFlagUntilTimeout>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e00a      	b.n	8002c96 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2220      	movs	r2, #32
 8002c84:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2220      	movs	r2, #32
 8002c8a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b084      	sub	sp, #16
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	60f8      	str	r0, [r7, #12]
 8002ca6:	60b9      	str	r1, [r7, #8]
 8002ca8:	603b      	str	r3, [r7, #0]
 8002caa:	4613      	mov	r3, r2
 8002cac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cae:	e02a      	b.n	8002d06 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb6:	d026      	beq.n	8002d06 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cb8:	f7fd fc4c 	bl	8000554 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d302      	bcc.n	8002cce <UART_WaitOnFlagUntilTimeout+0x30>
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d11b      	bne.n	8002d06 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002cdc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 0201 	bic.w	r2, r2, #1
 8002cec:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2220      	movs	r2, #32
 8002cf2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e00f      	b.n	8002d26 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	69da      	ldr	r2, [r3, #28]
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	68ba      	ldr	r2, [r7, #8]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	bf0c      	ite	eq
 8002d16:	2301      	moveq	r3, #1
 8002d18:	2300      	movne	r3, #0
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	79fb      	ldrb	r3, [r7, #7]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d0c5      	beq.n	8002cb0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b083      	sub	sp, #12
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002d44:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f022 0201 	bic.w	r2, r2, #1
 8002d54:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2220      	movs	r2, #32
 8002d5a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	661a      	str	r2, [r3, #96]	; 0x60
}
 8002d62:	bf00      	nop
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr

08002d6e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b084      	sub	sp, #16
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f7ff fc07 	bl	80025a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d92:	bf00      	nop
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b082      	sub	sp, #8
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002db0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2220      	movs	r2, #32
 8002db6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7ff fbe4 	bl	800258c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002dc4:	bf00      	nop
 8002dc6:	3708      	adds	r7, #8
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002dda:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002de0:	2b22      	cmp	r3, #34	; 0x22
 8002de2:	d13a      	bne.n	8002e5a <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dea:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002dec:	89bb      	ldrh	r3, [r7, #12]
 8002dee:	b2d9      	uxtb	r1, r3
 8002df0:	89fb      	ldrh	r3, [r7, #14]
 8002df2:	b2da      	uxtb	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df8:	400a      	ands	r2, r1
 8002dfa:	b2d2      	uxtb	r2, r2
 8002dfc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e02:	1c5a      	adds	r2, r3, #1
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	3b01      	subs	r3, #1
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d121      	bne.n	8002e6a <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002e34:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	689a      	ldr	r2, [r3, #8]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 0201 	bic.w	r2, r2, #1
 8002e44:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f001 fdac 	bl	80049b0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002e58:	e007      	b.n	8002e6a <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	699a      	ldr	r2, [r3, #24]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f042 0208 	orr.w	r2, r2, #8
 8002e68:	619a      	str	r2, [r3, #24]
}
 8002e6a:	bf00      	nop
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b084      	sub	sp, #16
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002e80:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e86:	2b22      	cmp	r3, #34	; 0x22
 8002e88:	d13a      	bne.n	8002f00 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e90:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e96:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8002e98:	89ba      	ldrh	r2, [r7, #12]
 8002e9a:	89fb      	ldrh	r3, [r7, #14]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea8:	1c9a      	adds	r2, r3, #2
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d121      	bne.n	8002f10 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002eda:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689a      	ldr	r2, [r3, #8]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 0201 	bic.w	r2, r2, #1
 8002eea:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2220      	movs	r2, #32
 8002ef0:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f001 fd59 	bl	80049b0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002efe:	e007      	b.n	8002f10 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	699a      	ldr	r2, [r3, #24]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 0208 	orr.w	r2, r2, #8
 8002f0e:	619a      	str	r2, [r3, #24]
}
 8002f10:	bf00      	nop
 8002f12:	3710      	adds	r7, #16
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	4603      	mov	r3, r0
 8002f20:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002f22:	2300      	movs	r3, #0
 8002f24:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002f26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f2a:	2b84      	cmp	r3, #132	; 0x84
 8002f2c:	d005      	beq.n	8002f3a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002f2e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	4413      	add	r3, r2
 8002f36:	3303      	adds	r3, #3
 8002f38:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3714      	adds	r7, #20
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f4e:	f3ef 8305 	mrs	r3, IPSR
 8002f52:	607b      	str	r3, [r7, #4]
  return(result);
 8002f54:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	bf14      	ite	ne
 8002f5a:	2301      	movne	r3, #1
 8002f5c:	2300      	moveq	r3, #0
 8002f5e:	b2db      	uxtb	r3, r3
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002f70:	f000 feee 	bl	8003d50 <vTaskStartScheduler>
  
  return osOK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002f7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f7c:	b087      	sub	sp, #28
 8002f7e:	af02      	add	r7, sp, #8
 8002f80:	6078      	str	r0, [r7, #4]
 8002f82:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685c      	ldr	r4, [r3, #4]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002f90:	b29e      	uxth	r6, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff ffbd 	bl	8002f18 <makeFreeRtosPriority>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	f107 030c 	add.w	r3, r7, #12
 8002fa4:	9301      	str	r3, [sp, #4]
 8002fa6:	9200      	str	r2, [sp, #0]
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	4632      	mov	r2, r6
 8002fac:	4629      	mov	r1, r5
 8002fae:	4620      	mov	r0, r4
 8002fb0:	f000 fd6c 	bl	8003a8c <xTaskCreate>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d001      	beq.n	8002fbe <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	e000      	b.n	8002fc0 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3714      	adds	r7, #20
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002fc8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <osDelay+0x16>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	e000      	b.n	8002fe0 <osDelay+0x18>
 8002fde:	2301      	movs	r3, #1
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f000 fe7f 	bl	8003ce4 <vTaskDelay>
  
  return osOK;
 8002fe6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b086      	sub	sp, #24
 8002ff4:	af02      	add	r7, sp, #8
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8002ffe:	2300      	movs	r3, #0
 8003000:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8003002:	f7ff ffa1 	bl	8002f48 <inHandlerMode>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d01c      	beq.n	8003046 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 800300c:	6839      	ldr	r1, [r7, #0]
 800300e:	f107 0208 	add.w	r2, r7, #8
 8003012:	f107 030c 	add.w	r3, r7, #12
 8003016:	9300      	str	r3, [sp, #0]
 8003018:	4613      	mov	r3, r2
 800301a:	2201      	movs	r2, #1
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f001 fa5f 	bl	80044e0 <xTaskGenericNotifyFromISR>
 8003022:	4603      	mov	r3, r0
 8003024:	2b01      	cmp	r3, #1
 8003026:	d002      	beq.n	800302e <osSignalSet+0x3e>
      return 0x80000000;
 8003028:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800302c:	e019      	b.n	8003062 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d015      	beq.n	8003060 <osSignalSet+0x70>
 8003034:	4b0d      	ldr	r3, [pc, #52]	; (800306c <osSignalSet+0x7c>)
 8003036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800303a:	601a      	str	r2, [r3, #0]
 800303c:	f3bf 8f4f 	dsb	sy
 8003040:	f3bf 8f6f 	isb	sy
 8003044:	e00c      	b.n	8003060 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8003046:	6839      	ldr	r1, [r7, #0]
 8003048:	f107 0308 	add.w	r3, r7, #8
 800304c:	2201      	movs	r2, #1
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f001 f9a2 	bl	8004398 <xTaskGenericNotify>
 8003054:	4603      	mov	r3, r0
 8003056:	2b01      	cmp	r3, #1
 8003058:	d002      	beq.n	8003060 <osSignalSet+0x70>
    return 0x80000000;
 800305a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800305e:	e000      	b.n	8003062 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8003060:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8003062:	4618      	mov	r0, r3
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	e000ed04 	.word	0xe000ed04

08003070 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8003070:	b590      	push	{r4, r7, lr}
 8003072:	b089      	sub	sp, #36	; 0x24
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 800307c:	2300      	movs	r3, #0
 800307e:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8003080:	2300      	movs	r3, #0
 8003082:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800308a:	d103      	bne.n	8003094 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 800308c:	f04f 33ff 	mov.w	r3, #4294967295
 8003090:	61fb      	str	r3, [r7, #28]
 8003092:	e009      	b.n	80030a8 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d006      	beq.n	80030a8 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d101      	bne.n	80030a8 <osSignalWait+0x38>
      ticks = 1;
 80030a4:	2301      	movs	r3, #1
 80030a6:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 80030a8:	f7ff ff4e 	bl	8002f48 <inHandlerMode>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d002      	beq.n	80030b8 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 80030b2:	2382      	movs	r3, #130	; 0x82
 80030b4:	613b      	str	r3, [r7, #16]
 80030b6:	e01b      	b.n	80030f0 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 80030b8:	68b9      	ldr	r1, [r7, #8]
 80030ba:	f107 0310 	add.w	r3, r7, #16
 80030be:	1d1a      	adds	r2, r3, #4
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	2000      	movs	r0, #0
 80030c4:	f001 f90e 	bl	80042e4 <xTaskNotifyWait>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d008      	beq.n	80030e0 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d102      	bne.n	80030da <osSignalWait+0x6a>
 80030d4:	2300      	movs	r3, #0
 80030d6:	613b      	str	r3, [r7, #16]
 80030d8:	e00a      	b.n	80030f0 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 80030da:	2340      	movs	r3, #64	; 0x40
 80030dc:	613b      	str	r3, [r7, #16]
 80030de:	e007      	b.n	80030f0 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	da02      	bge.n	80030ec <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 80030e6:	2386      	movs	r3, #134	; 0x86
 80030e8:	613b      	str	r3, [r7, #16]
 80030ea:	e001      	b.n	80030f0 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 80030ec:	2308      	movs	r3, #8
 80030ee:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	461c      	mov	r4, r3
 80030f4:	f107 0310 	add.w	r3, r7, #16
 80030f8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80030fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	3724      	adds	r7, #36	; 0x24
 8003104:	46bd      	mov	sp, r7
 8003106:	bd90      	pop	{r4, r7, pc}

08003108 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b08a      	sub	sp, #40	; 0x28
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003110:	2300      	movs	r3, #0
 8003112:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003114:	f000 fe66 	bl	8003de4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003118:	4b5a      	ldr	r3, [pc, #360]	; (8003284 <pvPortMalloc+0x17c>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d101      	bne.n	8003124 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003120:	f000 f916 	bl	8003350 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003124:	4b58      	ldr	r3, [pc, #352]	; (8003288 <pvPortMalloc+0x180>)
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4013      	ands	r3, r2
 800312c:	2b00      	cmp	r3, #0
 800312e:	f040 8090 	bne.w	8003252 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d01e      	beq.n	8003176 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003138:	2208      	movs	r2, #8
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4413      	add	r3, r2
 800313e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f003 0307 	and.w	r3, r3, #7
 8003146:	2b00      	cmp	r3, #0
 8003148:	d015      	beq.n	8003176 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f023 0307 	bic.w	r3, r3, #7
 8003150:	3308      	adds	r3, #8
 8003152:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f003 0307 	and.w	r3, r3, #7
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00b      	beq.n	8003176 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800315e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003162:	b672      	cpsid	i
 8003164:	f383 8811 	msr	BASEPRI, r3
 8003168:	f3bf 8f6f 	isb	sy
 800316c:	f3bf 8f4f 	dsb	sy
 8003170:	b662      	cpsie	i
 8003172:	617b      	str	r3, [r7, #20]
 8003174:	e7fe      	b.n	8003174 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d06a      	beq.n	8003252 <pvPortMalloc+0x14a>
 800317c:	4b43      	ldr	r3, [pc, #268]	; (800328c <pvPortMalloc+0x184>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	429a      	cmp	r2, r3
 8003184:	d865      	bhi.n	8003252 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003186:	4b42      	ldr	r3, [pc, #264]	; (8003290 <pvPortMalloc+0x188>)
 8003188:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800318a:	4b41      	ldr	r3, [pc, #260]	; (8003290 <pvPortMalloc+0x188>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003190:	e004      	b.n	800319c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003194:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800319c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d903      	bls.n	80031ae <pvPortMalloc+0xa6>
 80031a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1f1      	bne.n	8003192 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80031ae:	4b35      	ldr	r3, [pc, #212]	; (8003284 <pvPortMalloc+0x17c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d04c      	beq.n	8003252 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80031b8:	6a3b      	ldr	r3, [r7, #32]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2208      	movs	r2, #8
 80031be:	4413      	add	r3, r2
 80031c0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	6a3b      	ldr	r3, [r7, #32]
 80031c8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80031ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	1ad2      	subs	r2, r2, r3
 80031d2:	2308      	movs	r3, #8
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d920      	bls.n	800321c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80031da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4413      	add	r3, r2
 80031e0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00b      	beq.n	8003204 <pvPortMalloc+0xfc>
 80031ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f0:	b672      	cpsid	i
 80031f2:	f383 8811 	msr	BASEPRI, r3
 80031f6:	f3bf 8f6f 	isb	sy
 80031fa:	f3bf 8f4f 	dsb	sy
 80031fe:	b662      	cpsie	i
 8003200:	613b      	str	r3, [r7, #16]
 8003202:	e7fe      	b.n	8003202 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	1ad2      	subs	r2, r2, r3
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003216:	69b8      	ldr	r0, [r7, #24]
 8003218:	f000 f8fc 	bl	8003414 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800321c:	4b1b      	ldr	r3, [pc, #108]	; (800328c <pvPortMalloc+0x184>)
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	4a19      	ldr	r2, [pc, #100]	; (800328c <pvPortMalloc+0x184>)
 8003228:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800322a:	4b18      	ldr	r3, [pc, #96]	; (800328c <pvPortMalloc+0x184>)
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	4b19      	ldr	r3, [pc, #100]	; (8003294 <pvPortMalloc+0x18c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	429a      	cmp	r2, r3
 8003234:	d203      	bcs.n	800323e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003236:	4b15      	ldr	r3, [pc, #84]	; (800328c <pvPortMalloc+0x184>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a16      	ldr	r2, [pc, #88]	; (8003294 <pvPortMalloc+0x18c>)
 800323c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800323e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003240:	685a      	ldr	r2, [r3, #4]
 8003242:	4b11      	ldr	r3, [pc, #68]	; (8003288 <pvPortMalloc+0x180>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	431a      	orrs	r2, r3
 8003248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324e:	2200      	movs	r2, #0
 8003250:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003252:	f000 fdd5 	bl	8003e00 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	f003 0307 	and.w	r3, r3, #7
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00b      	beq.n	8003278 <pvPortMalloc+0x170>
 8003260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003264:	b672      	cpsid	i
 8003266:	f383 8811 	msr	BASEPRI, r3
 800326a:	f3bf 8f6f 	isb	sy
 800326e:	f3bf 8f4f 	dsb	sy
 8003272:	b662      	cpsie	i
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	e7fe      	b.n	8003276 <pvPortMalloc+0x16e>
	return pvReturn;
 8003278:	69fb      	ldr	r3, [r7, #28]
}
 800327a:	4618      	mov	r0, r3
 800327c:	3728      	adds	r7, #40	; 0x28
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	20003c30 	.word	0x20003c30
 8003288:	20003c3c 	.word	0x20003c3c
 800328c:	20003c34 	.word	0x20003c34
 8003290:	20003c28 	.word	0x20003c28
 8003294:	20003c38 	.word	0x20003c38

08003298 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d04a      	beq.n	8003340 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80032aa:	2308      	movs	r3, #8
 80032ac:	425b      	negs	r3, r3
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	4413      	add	r3, r2
 80032b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	685a      	ldr	r2, [r3, #4]
 80032bc:	4b22      	ldr	r3, [pc, #136]	; (8003348 <vPortFree+0xb0>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4013      	ands	r3, r2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10b      	bne.n	80032de <vPortFree+0x46>
 80032c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ca:	b672      	cpsid	i
 80032cc:	f383 8811 	msr	BASEPRI, r3
 80032d0:	f3bf 8f6f 	isb	sy
 80032d4:	f3bf 8f4f 	dsb	sy
 80032d8:	b662      	cpsie	i
 80032da:	60fb      	str	r3, [r7, #12]
 80032dc:	e7fe      	b.n	80032dc <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00b      	beq.n	80032fe <vPortFree+0x66>
 80032e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ea:	b672      	cpsid	i
 80032ec:	f383 8811 	msr	BASEPRI, r3
 80032f0:	f3bf 8f6f 	isb	sy
 80032f4:	f3bf 8f4f 	dsb	sy
 80032f8:	b662      	cpsie	i
 80032fa:	60bb      	str	r3, [r7, #8]
 80032fc:	e7fe      	b.n	80032fc <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	4b11      	ldr	r3, [pc, #68]	; (8003348 <vPortFree+0xb0>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4013      	ands	r3, r2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d019      	beq.n	8003340 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d115      	bne.n	8003340 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	685a      	ldr	r2, [r3, #4]
 8003318:	4b0b      	ldr	r3, [pc, #44]	; (8003348 <vPortFree+0xb0>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	43db      	mvns	r3, r3
 800331e:	401a      	ands	r2, r3
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003324:	f000 fd5e 	bl	8003de4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	4b07      	ldr	r3, [pc, #28]	; (800334c <vPortFree+0xb4>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4413      	add	r3, r2
 8003332:	4a06      	ldr	r2, [pc, #24]	; (800334c <vPortFree+0xb4>)
 8003334:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003336:	6938      	ldr	r0, [r7, #16]
 8003338:	f000 f86c 	bl	8003414 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800333c:	f000 fd60 	bl	8003e00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003340:	bf00      	nop
 8003342:	3718      	adds	r7, #24
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	20003c3c 	.word	0x20003c3c
 800334c:	20003c34 	.word	0x20003c34

08003350 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003356:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800335a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800335c:	4b27      	ldr	r3, [pc, #156]	; (80033fc <prvHeapInit+0xac>)
 800335e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f003 0307 	and.w	r3, r3, #7
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00c      	beq.n	8003384 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	3307      	adds	r3, #7
 800336e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f023 0307 	bic.w	r3, r3, #7
 8003376:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003378:	68ba      	ldr	r2, [r7, #8]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	4a1f      	ldr	r2, [pc, #124]	; (80033fc <prvHeapInit+0xac>)
 8003380:	4413      	add	r3, r2
 8003382:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003388:	4a1d      	ldr	r2, [pc, #116]	; (8003400 <prvHeapInit+0xb0>)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800338e:	4b1c      	ldr	r3, [pc, #112]	; (8003400 <prvHeapInit+0xb0>)
 8003390:	2200      	movs	r2, #0
 8003392:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68ba      	ldr	r2, [r7, #8]
 8003398:	4413      	add	r3, r2
 800339a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800339c:	2208      	movs	r2, #8
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	1a9b      	subs	r3, r3, r2
 80033a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f023 0307 	bic.w	r3, r3, #7
 80033aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	4a15      	ldr	r2, [pc, #84]	; (8003404 <prvHeapInit+0xb4>)
 80033b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80033b2:	4b14      	ldr	r3, [pc, #80]	; (8003404 <prvHeapInit+0xb4>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2200      	movs	r2, #0
 80033b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80033ba:	4b12      	ldr	r3, [pc, #72]	; (8003404 <prvHeapInit+0xb4>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2200      	movs	r2, #0
 80033c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	1ad2      	subs	r2, r2, r3
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80033d0:	4b0c      	ldr	r3, [pc, #48]	; (8003404 <prvHeapInit+0xb4>)
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	4a0a      	ldr	r2, [pc, #40]	; (8003408 <prvHeapInit+0xb8>)
 80033de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	4a09      	ldr	r2, [pc, #36]	; (800340c <prvHeapInit+0xbc>)
 80033e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80033e8:	4b09      	ldr	r3, [pc, #36]	; (8003410 <prvHeapInit+0xc0>)
 80033ea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80033ee:	601a      	str	r2, [r3, #0]
}
 80033f0:	bf00      	nop
 80033f2:	3714      	adds	r7, #20
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr
 80033fc:	20000028 	.word	0x20000028
 8003400:	20003c28 	.word	0x20003c28
 8003404:	20003c30 	.word	0x20003c30
 8003408:	20003c38 	.word	0x20003c38
 800340c:	20003c34 	.word	0x20003c34
 8003410:	20003c3c 	.word	0x20003c3c

08003414 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800341c:	4b28      	ldr	r3, [pc, #160]	; (80034c0 <prvInsertBlockIntoFreeList+0xac>)
 800341e:	60fb      	str	r3, [r7, #12]
 8003420:	e002      	b.n	8003428 <prvInsertBlockIntoFreeList+0x14>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	60fb      	str	r3, [r7, #12]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	429a      	cmp	r2, r3
 8003430:	d8f7      	bhi.n	8003422 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	68ba      	ldr	r2, [r7, #8]
 800343c:	4413      	add	r3, r2
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	429a      	cmp	r2, r3
 8003442:	d108      	bne.n	8003456 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	685a      	ldr	r2, [r3, #4]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	441a      	add	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	68ba      	ldr	r2, [r7, #8]
 8003460:	441a      	add	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	429a      	cmp	r2, r3
 8003468:	d118      	bne.n	800349c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	4b15      	ldr	r3, [pc, #84]	; (80034c4 <prvInsertBlockIntoFreeList+0xb0>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	429a      	cmp	r2, r3
 8003474:	d00d      	beq.n	8003492 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	441a      	add	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	601a      	str	r2, [r3, #0]
 8003490:	e008      	b.n	80034a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003492:	4b0c      	ldr	r3, [pc, #48]	; (80034c4 <prvInsertBlockIntoFreeList+0xb0>)
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	601a      	str	r2, [r3, #0]
 800349a:	e003      	b.n	80034a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d002      	beq.n	80034b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80034b2:	bf00      	nop
 80034b4:	3714      	adds	r7, #20
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	20003c28 	.word	0x20003c28
 80034c4:	20003c30 	.word	0x20003c30

080034c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f103 0208 	add.w	r2, r3, #8
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f04f 32ff 	mov.w	r2, #4294967295
 80034e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f103 0208 	add.w	r2, r3, #8
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f103 0208 	add.w	r2, r3, #8
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003516:	bf00      	nop
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003522:	b480      	push	{r7}
 8003524:	b085      	sub	sp, #20
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
 800352a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	683a      	ldr	r2, [r7, #0]
 8003546:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	1c5a      	adds	r2, r3, #1
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	601a      	str	r2, [r3, #0]
}
 800355e:	bf00      	nop
 8003560:	3714      	adds	r7, #20
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800356a:	b480      	push	{r7}
 800356c:	b085      	sub	sp, #20
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
 8003572:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003580:	d103      	bne.n	800358a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	60fb      	str	r3, [r7, #12]
 8003588:	e00c      	b.n	80035a4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	3308      	adds	r3, #8
 800358e:	60fb      	str	r3, [r7, #12]
 8003590:	e002      	b.n	8003598 <vListInsert+0x2e>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	60fb      	str	r3, [r7, #12]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68ba      	ldr	r2, [r7, #8]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d2f6      	bcs.n	8003592 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	685a      	ldr	r2, [r3, #4]
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	1c5a      	adds	r2, r3, #1
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	601a      	str	r2, [r3, #0]
}
 80035d0:	bf00      	nop
 80035d2:	3714      	adds	r7, #20
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80035dc:	b480      	push	{r7}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	6892      	ldr	r2, [r2, #8]
 80035f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	6852      	ldr	r2, [r2, #4]
 80035fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	429a      	cmp	r2, r3
 8003606:	d103      	bne.n	8003610 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689a      	ldr	r2, [r3, #8]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	1e5a      	subs	r2, r3, #1
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
}
 8003624:	4618      	mov	r0, r3
 8003626:	3714      	adds	r7, #20
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	3b04      	subs	r3, #4
 8003640:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003648:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	3b04      	subs	r3, #4
 800364e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	f023 0201 	bic.w	r2, r3, #1
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	3b04      	subs	r3, #4
 800365e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003660:	4a0c      	ldr	r2, [pc, #48]	; (8003694 <pxPortInitialiseStack+0x64>)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	3b14      	subs	r3, #20
 800366a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	3b04      	subs	r3, #4
 8003676:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f06f 0202 	mvn.w	r2, #2
 800367e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	3b20      	subs	r3, #32
 8003684:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003686:	68fb      	ldr	r3, [r7, #12]
}
 8003688:	4618      	mov	r0, r3
 800368a:	3714      	adds	r7, #20
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr
 8003694:	08003699 	.word	0x08003699

08003698 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800369e:	2300      	movs	r3, #0
 80036a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80036a2:	4b13      	ldr	r3, [pc, #76]	; (80036f0 <prvTaskExitError+0x58>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036aa:	d00b      	beq.n	80036c4 <prvTaskExitError+0x2c>
 80036ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b0:	b672      	cpsid	i
 80036b2:	f383 8811 	msr	BASEPRI, r3
 80036b6:	f3bf 8f6f 	isb	sy
 80036ba:	f3bf 8f4f 	dsb	sy
 80036be:	b662      	cpsie	i
 80036c0:	60fb      	str	r3, [r7, #12]
 80036c2:	e7fe      	b.n	80036c2 <prvTaskExitError+0x2a>
 80036c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c8:	b672      	cpsid	i
 80036ca:	f383 8811 	msr	BASEPRI, r3
 80036ce:	f3bf 8f6f 	isb	sy
 80036d2:	f3bf 8f4f 	dsb	sy
 80036d6:	b662      	cpsie	i
 80036d8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80036da:	bf00      	nop
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d0fc      	beq.n	80036dc <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80036e2:	bf00      	nop
 80036e4:	3714      	adds	r7, #20
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	20000004 	.word	0x20000004
	...

08003700 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003700:	4b07      	ldr	r3, [pc, #28]	; (8003720 <pxCurrentTCBConst2>)
 8003702:	6819      	ldr	r1, [r3, #0]
 8003704:	6808      	ldr	r0, [r1, #0]
 8003706:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800370a:	f380 8809 	msr	PSP, r0
 800370e:	f3bf 8f6f 	isb	sy
 8003712:	f04f 0000 	mov.w	r0, #0
 8003716:	f380 8811 	msr	BASEPRI, r0
 800371a:	4770      	bx	lr
 800371c:	f3af 8000 	nop.w

08003720 <pxCurrentTCBConst2>:
 8003720:	20003c48 	.word	0x20003c48
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003724:	bf00      	nop
 8003726:	bf00      	nop

08003728 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003728:	4808      	ldr	r0, [pc, #32]	; (800374c <prvPortStartFirstTask+0x24>)
 800372a:	6800      	ldr	r0, [r0, #0]
 800372c:	6800      	ldr	r0, [r0, #0]
 800372e:	f380 8808 	msr	MSP, r0
 8003732:	f04f 0000 	mov.w	r0, #0
 8003736:	f380 8814 	msr	CONTROL, r0
 800373a:	b662      	cpsie	i
 800373c:	b661      	cpsie	f
 800373e:	f3bf 8f4f 	dsb	sy
 8003742:	f3bf 8f6f 	isb	sy
 8003746:	df00      	svc	0
 8003748:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800374a:	bf00      	nop
 800374c:	e000ed08 	.word	0xe000ed08

08003750 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003756:	4b36      	ldr	r3, [pc, #216]	; (8003830 <xPortStartScheduler+0xe0>)
 8003758:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	b2db      	uxtb	r3, r3
 8003760:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	22ff      	movs	r2, #255	; 0xff
 8003766:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	b2db      	uxtb	r3, r3
 800376e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003770:	78fb      	ldrb	r3, [r7, #3]
 8003772:	b2db      	uxtb	r3, r3
 8003774:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003778:	b2da      	uxtb	r2, r3
 800377a:	4b2e      	ldr	r3, [pc, #184]	; (8003834 <xPortStartScheduler+0xe4>)
 800377c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800377e:	4b2e      	ldr	r3, [pc, #184]	; (8003838 <xPortStartScheduler+0xe8>)
 8003780:	2207      	movs	r2, #7
 8003782:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003784:	e009      	b.n	800379a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003786:	4b2c      	ldr	r3, [pc, #176]	; (8003838 <xPortStartScheduler+0xe8>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	3b01      	subs	r3, #1
 800378c:	4a2a      	ldr	r2, [pc, #168]	; (8003838 <xPortStartScheduler+0xe8>)
 800378e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003790:	78fb      	ldrb	r3, [r7, #3]
 8003792:	b2db      	uxtb	r3, r3
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	b2db      	uxtb	r3, r3
 8003798:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800379a:	78fb      	ldrb	r3, [r7, #3]
 800379c:	b2db      	uxtb	r3, r3
 800379e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a2:	2b80      	cmp	r3, #128	; 0x80
 80037a4:	d0ef      	beq.n	8003786 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80037a6:	4b24      	ldr	r3, [pc, #144]	; (8003838 <xPortStartScheduler+0xe8>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f1c3 0307 	rsb	r3, r3, #7
 80037ae:	2b04      	cmp	r3, #4
 80037b0:	d00b      	beq.n	80037ca <xPortStartScheduler+0x7a>
 80037b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b6:	b672      	cpsid	i
 80037b8:	f383 8811 	msr	BASEPRI, r3
 80037bc:	f3bf 8f6f 	isb	sy
 80037c0:	f3bf 8f4f 	dsb	sy
 80037c4:	b662      	cpsie	i
 80037c6:	60bb      	str	r3, [r7, #8]
 80037c8:	e7fe      	b.n	80037c8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80037ca:	4b1b      	ldr	r3, [pc, #108]	; (8003838 <xPortStartScheduler+0xe8>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	021b      	lsls	r3, r3, #8
 80037d0:	4a19      	ldr	r2, [pc, #100]	; (8003838 <xPortStartScheduler+0xe8>)
 80037d2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80037d4:	4b18      	ldr	r3, [pc, #96]	; (8003838 <xPortStartScheduler+0xe8>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80037dc:	4a16      	ldr	r2, [pc, #88]	; (8003838 <xPortStartScheduler+0xe8>)
 80037de:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	b2da      	uxtb	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80037e8:	4b14      	ldr	r3, [pc, #80]	; (800383c <xPortStartScheduler+0xec>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a13      	ldr	r2, [pc, #76]	; (800383c <xPortStartScheduler+0xec>)
 80037ee:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80037f2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80037f4:	4b11      	ldr	r3, [pc, #68]	; (800383c <xPortStartScheduler+0xec>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a10      	ldr	r2, [pc, #64]	; (800383c <xPortStartScheduler+0xec>)
 80037fa:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80037fe:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003800:	f000 f8d4 	bl	80039ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003804:	4b0e      	ldr	r3, [pc, #56]	; (8003840 <xPortStartScheduler+0xf0>)
 8003806:	2200      	movs	r2, #0
 8003808:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800380a:	f000 f8f3 	bl	80039f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800380e:	4b0d      	ldr	r3, [pc, #52]	; (8003844 <xPortStartScheduler+0xf4>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a0c      	ldr	r2, [pc, #48]	; (8003844 <xPortStartScheduler+0xf4>)
 8003814:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003818:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800381a:	f7ff ff85 	bl	8003728 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800381e:	f000 fc4b 	bl	80040b8 <vTaskSwitchContext>
	prvTaskExitError();
 8003822:	f7ff ff39 	bl	8003698 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	e000e400 	.word	0xe000e400
 8003834:	20003c40 	.word	0x20003c40
 8003838:	20003c44 	.word	0x20003c44
 800383c:	e000ed20 	.word	0xe000ed20
 8003840:	20000004 	.word	0x20000004
 8003844:	e000ef34 	.word	0xe000ef34

08003848 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003852:	b672      	cpsid	i
 8003854:	f383 8811 	msr	BASEPRI, r3
 8003858:	f3bf 8f6f 	isb	sy
 800385c:	f3bf 8f4f 	dsb	sy
 8003860:	b662      	cpsie	i
 8003862:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003864:	4b0f      	ldr	r3, [pc, #60]	; (80038a4 <vPortEnterCritical+0x5c>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	3301      	adds	r3, #1
 800386a:	4a0e      	ldr	r2, [pc, #56]	; (80038a4 <vPortEnterCritical+0x5c>)
 800386c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800386e:	4b0d      	ldr	r3, [pc, #52]	; (80038a4 <vPortEnterCritical+0x5c>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d110      	bne.n	8003898 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003876:	4b0c      	ldr	r3, [pc, #48]	; (80038a8 <vPortEnterCritical+0x60>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	b2db      	uxtb	r3, r3
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00b      	beq.n	8003898 <vPortEnterCritical+0x50>
 8003880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003884:	b672      	cpsid	i
 8003886:	f383 8811 	msr	BASEPRI, r3
 800388a:	f3bf 8f6f 	isb	sy
 800388e:	f3bf 8f4f 	dsb	sy
 8003892:	b662      	cpsie	i
 8003894:	603b      	str	r3, [r7, #0]
 8003896:	e7fe      	b.n	8003896 <vPortEnterCritical+0x4e>
	}
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	20000004 	.word	0x20000004
 80038a8:	e000ed04 	.word	0xe000ed04

080038ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80038b2:	4b12      	ldr	r3, [pc, #72]	; (80038fc <vPortExitCritical+0x50>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10b      	bne.n	80038d2 <vPortExitCritical+0x26>
 80038ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038be:	b672      	cpsid	i
 80038c0:	f383 8811 	msr	BASEPRI, r3
 80038c4:	f3bf 8f6f 	isb	sy
 80038c8:	f3bf 8f4f 	dsb	sy
 80038cc:	b662      	cpsie	i
 80038ce:	607b      	str	r3, [r7, #4]
 80038d0:	e7fe      	b.n	80038d0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 80038d2:	4b0a      	ldr	r3, [pc, #40]	; (80038fc <vPortExitCritical+0x50>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	3b01      	subs	r3, #1
 80038d8:	4a08      	ldr	r2, [pc, #32]	; (80038fc <vPortExitCritical+0x50>)
 80038da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80038dc:	4b07      	ldr	r3, [pc, #28]	; (80038fc <vPortExitCritical+0x50>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d104      	bne.n	80038ee <vPortExitCritical+0x42>
 80038e4:	2300      	movs	r3, #0
 80038e6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80038ee:	bf00      	nop
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	20000004 	.word	0x20000004

08003900 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003900:	f3ef 8009 	mrs	r0, PSP
 8003904:	f3bf 8f6f 	isb	sy
 8003908:	4b15      	ldr	r3, [pc, #84]	; (8003960 <pxCurrentTCBConst>)
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	f01e 0f10 	tst.w	lr, #16
 8003910:	bf08      	it	eq
 8003912:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003916:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800391a:	6010      	str	r0, [r2, #0]
 800391c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003920:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003924:	b672      	cpsid	i
 8003926:	f380 8811 	msr	BASEPRI, r0
 800392a:	f3bf 8f4f 	dsb	sy
 800392e:	f3bf 8f6f 	isb	sy
 8003932:	b662      	cpsie	i
 8003934:	f000 fbc0 	bl	80040b8 <vTaskSwitchContext>
 8003938:	f04f 0000 	mov.w	r0, #0
 800393c:	f380 8811 	msr	BASEPRI, r0
 8003940:	bc09      	pop	{r0, r3}
 8003942:	6819      	ldr	r1, [r3, #0]
 8003944:	6808      	ldr	r0, [r1, #0]
 8003946:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800394a:	f01e 0f10 	tst.w	lr, #16
 800394e:	bf08      	it	eq
 8003950:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003954:	f380 8809 	msr	PSP, r0
 8003958:	f3bf 8f6f 	isb	sy
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop

08003960 <pxCurrentTCBConst>:
 8003960:	20003c48 	.word	0x20003c48
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003964:	bf00      	nop
 8003966:	bf00      	nop

08003968 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
	__asm volatile
 800396e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003972:	b672      	cpsid	i
 8003974:	f383 8811 	msr	BASEPRI, r3
 8003978:	f3bf 8f6f 	isb	sy
 800397c:	f3bf 8f4f 	dsb	sy
 8003980:	b662      	cpsie	i
 8003982:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003984:	f000 fada 	bl	8003f3c <xTaskIncrementTick>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d003      	beq.n	8003996 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800398e:	4b06      	ldr	r3, [pc, #24]	; (80039a8 <SysTick_Handler+0x40>)
 8003990:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003994:	601a      	str	r2, [r3, #0]
 8003996:	2300      	movs	r3, #0
 8003998:	603b      	str	r3, [r7, #0]
	__asm volatile
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80039a0:	bf00      	nop
 80039a2:	3708      	adds	r7, #8
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	e000ed04 	.word	0xe000ed04

080039ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80039b0:	4b0b      	ldr	r3, [pc, #44]	; (80039e0 <vPortSetupTimerInterrupt+0x34>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80039b6:	4b0b      	ldr	r3, [pc, #44]	; (80039e4 <vPortSetupTimerInterrupt+0x38>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80039bc:	4b0a      	ldr	r3, [pc, #40]	; (80039e8 <vPortSetupTimerInterrupt+0x3c>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a0a      	ldr	r2, [pc, #40]	; (80039ec <vPortSetupTimerInterrupt+0x40>)
 80039c2:	fba2 2303 	umull	r2, r3, r2, r3
 80039c6:	099b      	lsrs	r3, r3, #6
 80039c8:	4a09      	ldr	r2, [pc, #36]	; (80039f0 <vPortSetupTimerInterrupt+0x44>)
 80039ca:	3b01      	subs	r3, #1
 80039cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80039ce:	4b04      	ldr	r3, [pc, #16]	; (80039e0 <vPortSetupTimerInterrupt+0x34>)
 80039d0:	2207      	movs	r2, #7
 80039d2:	601a      	str	r2, [r3, #0]
}
 80039d4:	bf00      	nop
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	e000e010 	.word	0xe000e010
 80039e4:	e000e018 	.word	0xe000e018
 80039e8:	20000008 	.word	0x20000008
 80039ec:	10624dd3 	.word	0x10624dd3
 80039f0:	e000e014 	.word	0xe000e014

080039f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80039f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003a04 <vPortEnableVFP+0x10>
 80039f8:	6801      	ldr	r1, [r0, #0]
 80039fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80039fe:	6001      	str	r1, [r0, #0]
 8003a00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003a02:	bf00      	nop
 8003a04:	e000ed88 	.word	0xe000ed88

08003a08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003a0e:	f3ef 8305 	mrs	r3, IPSR
 8003a12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2b0f      	cmp	r3, #15
 8003a18:	d915      	bls.n	8003a46 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003a1a:	4a18      	ldr	r2, [pc, #96]	; (8003a7c <vPortValidateInterruptPriority+0x74>)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	4413      	add	r3, r2
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003a24:	4b16      	ldr	r3, [pc, #88]	; (8003a80 <vPortValidateInterruptPriority+0x78>)
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	7afa      	ldrb	r2, [r7, #11]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d20b      	bcs.n	8003a46 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8003a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a32:	b672      	cpsid	i
 8003a34:	f383 8811 	msr	BASEPRI, r3
 8003a38:	f3bf 8f6f 	isb	sy
 8003a3c:	f3bf 8f4f 	dsb	sy
 8003a40:	b662      	cpsie	i
 8003a42:	607b      	str	r3, [r7, #4]
 8003a44:	e7fe      	b.n	8003a44 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003a46:	4b0f      	ldr	r3, [pc, #60]	; (8003a84 <vPortValidateInterruptPriority+0x7c>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003a4e:	4b0e      	ldr	r3, [pc, #56]	; (8003a88 <vPortValidateInterruptPriority+0x80>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d90b      	bls.n	8003a6e <vPortValidateInterruptPriority+0x66>
 8003a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a5a:	b672      	cpsid	i
 8003a5c:	f383 8811 	msr	BASEPRI, r3
 8003a60:	f3bf 8f6f 	isb	sy
 8003a64:	f3bf 8f4f 	dsb	sy
 8003a68:	b662      	cpsie	i
 8003a6a:	603b      	str	r3, [r7, #0]
 8003a6c:	e7fe      	b.n	8003a6c <vPortValidateInterruptPriority+0x64>
	}
 8003a6e:	bf00      	nop
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	e000e3f0 	.word	0xe000e3f0
 8003a80:	20003c40 	.word	0x20003c40
 8003a84:	e000ed0c 	.word	0xe000ed0c
 8003a88:	20003c44 	.word	0x20003c44

08003a8c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b08c      	sub	sp, #48	; 0x30
 8003a90:	af04      	add	r7, sp, #16
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	603b      	str	r3, [r7, #0]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a9c:	88fb      	ldrh	r3, [r7, #6]
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7ff fb31 	bl	8003108 <pvPortMalloc>
 8003aa6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00e      	beq.n	8003acc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003aae:	2054      	movs	r0, #84	; 0x54
 8003ab0:	f7ff fb2a 	bl	8003108 <pvPortMalloc>
 8003ab4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d003      	beq.n	8003ac4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	697a      	ldr	r2, [r7, #20]
 8003ac0:	631a      	str	r2, [r3, #48]	; 0x30
 8003ac2:	e005      	b.n	8003ad0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003ac4:	6978      	ldr	r0, [r7, #20]
 8003ac6:	f7ff fbe7 	bl	8003298 <vPortFree>
 8003aca:	e001      	b.n	8003ad0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003acc:	2300      	movs	r3, #0
 8003ace:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d013      	beq.n	8003afe <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003ad6:	88fa      	ldrh	r2, [r7, #6]
 8003ad8:	2300      	movs	r3, #0
 8003ada:	9303      	str	r3, [sp, #12]
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	9302      	str	r3, [sp, #8]
 8003ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae2:	9301      	str	r3, [sp, #4]
 8003ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae6:	9300      	str	r3, [sp, #0]
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	68b9      	ldr	r1, [r7, #8]
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f000 f80e 	bl	8003b0e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003af2:	69f8      	ldr	r0, [r7, #28]
 8003af4:	f000 f88c 	bl	8003c10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003af8:	2301      	movs	r3, #1
 8003afa:	61bb      	str	r3, [r7, #24]
 8003afc:	e002      	b.n	8003b04 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003afe:	f04f 33ff 	mov.w	r3, #4294967295
 8003b02:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003b04:	69bb      	ldr	r3, [r7, #24]
	}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3720      	adds	r7, #32
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b088      	sub	sp, #32
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	60f8      	str	r0, [r7, #12]
 8003b16:	60b9      	str	r1, [r7, #8]
 8003b18:	607a      	str	r2, [r7, #4]
 8003b1a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b20:	6879      	ldr	r1, [r7, #4]
 8003b22:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8003b26:	440b      	add	r3, r1
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	4413      	add	r3, r2
 8003b2c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	f023 0307 	bic.w	r3, r3, #7
 8003b34:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	f003 0307 	and.w	r3, r3, #7
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00b      	beq.n	8003b58 <prvInitialiseNewTask+0x4a>
 8003b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b44:	b672      	cpsid	i
 8003b46:	f383 8811 	msr	BASEPRI, r3
 8003b4a:	f3bf 8f6f 	isb	sy
 8003b4e:	f3bf 8f4f 	dsb	sy
 8003b52:	b662      	cpsie	i
 8003b54:	617b      	str	r3, [r7, #20]
 8003b56:	e7fe      	b.n	8003b56 <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b58:	2300      	movs	r3, #0
 8003b5a:	61fb      	str	r3, [r7, #28]
 8003b5c:	e012      	b.n	8003b84 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003b5e:	68ba      	ldr	r2, [r7, #8]
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	4413      	add	r3, r2
 8003b64:	7819      	ldrb	r1, [r3, #0]
 8003b66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	3334      	adds	r3, #52	; 0x34
 8003b6e:	460a      	mov	r2, r1
 8003b70:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003b72:	68ba      	ldr	r2, [r7, #8]
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	4413      	add	r3, r2
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d006      	beq.n	8003b8c <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	3301      	adds	r3, #1
 8003b82:	61fb      	str	r3, [r7, #28]
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	2b0f      	cmp	r3, #15
 8003b88:	d9e9      	bls.n	8003b5e <prvInitialiseNewTask+0x50>
 8003b8a:	e000      	b.n	8003b8e <prvInitialiseNewTask+0x80>
		{
			break;
 8003b8c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b98:	2b06      	cmp	r3, #6
 8003b9a:	d901      	bls.n	8003ba0 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b9c:	2306      	movs	r3, #6
 8003b9e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ba4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003baa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bae:	2200      	movs	r2, #0
 8003bb0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb4:	3304      	adds	r3, #4
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7ff fca6 	bl	8003508 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bbe:	3318      	adds	r3, #24
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7ff fca1 	bl	8003508 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bce:	f1c3 0207 	rsb	r2, r3, #7
 8003bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bda:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bde:	2200      	movs	r2, #0
 8003be0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	68f9      	ldr	r1, [r7, #12]
 8003bee:	69b8      	ldr	r0, [r7, #24]
 8003bf0:	f7ff fd1e 	bl	8003630 <pxPortInitialiseStack>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf8:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d002      	beq.n	8003c06 <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c06:	bf00      	nop
 8003c08:	3720      	adds	r7, #32
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
	...

08003c10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003c18:	f7ff fe16 	bl	8003848 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003c1c:	4b2a      	ldr	r3, [pc, #168]	; (8003cc8 <prvAddNewTaskToReadyList+0xb8>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	3301      	adds	r3, #1
 8003c22:	4a29      	ldr	r2, [pc, #164]	; (8003cc8 <prvAddNewTaskToReadyList+0xb8>)
 8003c24:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003c26:	4b29      	ldr	r3, [pc, #164]	; (8003ccc <prvAddNewTaskToReadyList+0xbc>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d109      	bne.n	8003c42 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003c2e:	4a27      	ldr	r2, [pc, #156]	; (8003ccc <prvAddNewTaskToReadyList+0xbc>)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003c34:	4b24      	ldr	r3, [pc, #144]	; (8003cc8 <prvAddNewTaskToReadyList+0xb8>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d110      	bne.n	8003c5e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003c3c:	f000 fab0 	bl	80041a0 <prvInitialiseTaskLists>
 8003c40:	e00d      	b.n	8003c5e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003c42:	4b23      	ldr	r3, [pc, #140]	; (8003cd0 <prvAddNewTaskToReadyList+0xc0>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d109      	bne.n	8003c5e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003c4a:	4b20      	ldr	r3, [pc, #128]	; (8003ccc <prvAddNewTaskToReadyList+0xbc>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d802      	bhi.n	8003c5e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003c58:	4a1c      	ldr	r2, [pc, #112]	; (8003ccc <prvAddNewTaskToReadyList+0xbc>)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003c5e:	4b1d      	ldr	r3, [pc, #116]	; (8003cd4 <prvAddNewTaskToReadyList+0xc4>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	3301      	adds	r3, #1
 8003c64:	4a1b      	ldr	r2, [pc, #108]	; (8003cd4 <prvAddNewTaskToReadyList+0xc4>)
 8003c66:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	409a      	lsls	r2, r3
 8003c70:	4b19      	ldr	r3, [pc, #100]	; (8003cd8 <prvAddNewTaskToReadyList+0xc8>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	4a18      	ldr	r2, [pc, #96]	; (8003cd8 <prvAddNewTaskToReadyList+0xc8>)
 8003c78:	6013      	str	r3, [r2, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c7e:	4613      	mov	r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	4413      	add	r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	4a15      	ldr	r2, [pc, #84]	; (8003cdc <prvAddNewTaskToReadyList+0xcc>)
 8003c88:	441a      	add	r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	3304      	adds	r3, #4
 8003c8e:	4619      	mov	r1, r3
 8003c90:	4610      	mov	r0, r2
 8003c92:	f7ff fc46 	bl	8003522 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c96:	f7ff fe09 	bl	80038ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c9a:	4b0d      	ldr	r3, [pc, #52]	; (8003cd0 <prvAddNewTaskToReadyList+0xc0>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00e      	beq.n	8003cc0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003ca2:	4b0a      	ldr	r3, [pc, #40]	; (8003ccc <prvAddNewTaskToReadyList+0xbc>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d207      	bcs.n	8003cc0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003cb0:	4b0b      	ldr	r3, [pc, #44]	; (8003ce0 <prvAddNewTaskToReadyList+0xd0>)
 8003cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cb6:	601a      	str	r2, [r3, #0]
 8003cb8:	f3bf 8f4f 	dsb	sy
 8003cbc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003cc0:	bf00      	nop
 8003cc2:	3708      	adds	r7, #8
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	20003d48 	.word	0x20003d48
 8003ccc:	20003c48 	.word	0x20003c48
 8003cd0:	20003d54 	.word	0x20003d54
 8003cd4:	20003d64 	.word	0x20003d64
 8003cd8:	20003d50 	.word	0x20003d50
 8003cdc:	20003c4c 	.word	0x20003c4c
 8003ce0:	e000ed04 	.word	0xe000ed04

08003ce4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003cec:	2300      	movs	r3, #0
 8003cee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d018      	beq.n	8003d28 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003cf6:	4b14      	ldr	r3, [pc, #80]	; (8003d48 <vTaskDelay+0x64>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00b      	beq.n	8003d16 <vTaskDelay+0x32>
 8003cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d02:	b672      	cpsid	i
 8003d04:	f383 8811 	msr	BASEPRI, r3
 8003d08:	f3bf 8f6f 	isb	sy
 8003d0c:	f3bf 8f4f 	dsb	sy
 8003d10:	b662      	cpsie	i
 8003d12:	60bb      	str	r3, [r7, #8]
 8003d14:	e7fe      	b.n	8003d14 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8003d16:	f000 f865 	bl	8003de4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003d1a:	2100      	movs	r1, #0
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 fcab 	bl	8004678 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003d22:	f000 f86d 	bl	8003e00 <xTaskResumeAll>
 8003d26:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d107      	bne.n	8003d3e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003d2e:	4b07      	ldr	r3, [pc, #28]	; (8003d4c <vTaskDelay+0x68>)
 8003d30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d34:	601a      	str	r2, [r3, #0]
 8003d36:	f3bf 8f4f 	dsb	sy
 8003d3a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003d3e:	bf00      	nop
 8003d40:	3710      	adds	r7, #16
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	20003d70 	.word	0x20003d70
 8003d4c:	e000ed04 	.word	0xe000ed04

08003d50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8003d56:	4b1d      	ldr	r3, [pc, #116]	; (8003dcc <vTaskStartScheduler+0x7c>)
 8003d58:	9301      	str	r3, [sp, #4]
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	9300      	str	r3, [sp, #0]
 8003d5e:	2300      	movs	r3, #0
 8003d60:	2280      	movs	r2, #128	; 0x80
 8003d62:	491b      	ldr	r1, [pc, #108]	; (8003dd0 <vTaskStartScheduler+0x80>)
 8003d64:	481b      	ldr	r0, [pc, #108]	; (8003dd4 <vTaskStartScheduler+0x84>)
 8003d66:	f7ff fe91 	bl	8003a8c <xTaskCreate>
 8003d6a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d117      	bne.n	8003da2 <vTaskStartScheduler+0x52>
 8003d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d76:	b672      	cpsid	i
 8003d78:	f383 8811 	msr	BASEPRI, r3
 8003d7c:	f3bf 8f6f 	isb	sy
 8003d80:	f3bf 8f4f 	dsb	sy
 8003d84:	b662      	cpsie	i
 8003d86:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d88:	4b13      	ldr	r3, [pc, #76]	; (8003dd8 <vTaskStartScheduler+0x88>)
 8003d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8003d8e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d90:	4b12      	ldr	r3, [pc, #72]	; (8003ddc <vTaskStartScheduler+0x8c>)
 8003d92:	2201      	movs	r2, #1
 8003d94:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003d96:	4b12      	ldr	r3, [pc, #72]	; (8003de0 <vTaskStartScheduler+0x90>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d9c:	f7ff fcd8 	bl	8003750 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003da0:	e00f      	b.n	8003dc2 <vTaskStartScheduler+0x72>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da8:	d10b      	bne.n	8003dc2 <vTaskStartScheduler+0x72>
 8003daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dae:	b672      	cpsid	i
 8003db0:	f383 8811 	msr	BASEPRI, r3
 8003db4:	f3bf 8f6f 	isb	sy
 8003db8:	f3bf 8f4f 	dsb	sy
 8003dbc:	b662      	cpsie	i
 8003dbe:	607b      	str	r3, [r7, #4]
 8003dc0:	e7fe      	b.n	8003dc0 <vTaskStartScheduler+0x70>
}
 8003dc2:	bf00      	nop
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	20003d6c 	.word	0x20003d6c
 8003dd0:	08004e10 	.word	0x08004e10
 8003dd4:	08004171 	.word	0x08004171
 8003dd8:	20003d68 	.word	0x20003d68
 8003ddc:	20003d54 	.word	0x20003d54
 8003de0:	20003d4c 	.word	0x20003d4c

08003de4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003de4:	b480      	push	{r7}
 8003de6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003de8:	4b04      	ldr	r3, [pc, #16]	; (8003dfc <vTaskSuspendAll+0x18>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	3301      	adds	r3, #1
 8003dee:	4a03      	ldr	r2, [pc, #12]	; (8003dfc <vTaskSuspendAll+0x18>)
 8003df0:	6013      	str	r3, [r2, #0]
}
 8003df2:	bf00      	nop
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr
 8003dfc:	20003d70 	.word	0x20003d70

08003e00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003e06:	2300      	movs	r3, #0
 8003e08:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003e0e:	4b42      	ldr	r3, [pc, #264]	; (8003f18 <xTaskResumeAll+0x118>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10b      	bne.n	8003e2e <xTaskResumeAll+0x2e>
 8003e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e1a:	b672      	cpsid	i
 8003e1c:	f383 8811 	msr	BASEPRI, r3
 8003e20:	f3bf 8f6f 	isb	sy
 8003e24:	f3bf 8f4f 	dsb	sy
 8003e28:	b662      	cpsie	i
 8003e2a:	603b      	str	r3, [r7, #0]
 8003e2c:	e7fe      	b.n	8003e2c <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003e2e:	f7ff fd0b 	bl	8003848 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003e32:	4b39      	ldr	r3, [pc, #228]	; (8003f18 <xTaskResumeAll+0x118>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	3b01      	subs	r3, #1
 8003e38:	4a37      	ldr	r2, [pc, #220]	; (8003f18 <xTaskResumeAll+0x118>)
 8003e3a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e3c:	4b36      	ldr	r3, [pc, #216]	; (8003f18 <xTaskResumeAll+0x118>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d161      	bne.n	8003f08 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e44:	4b35      	ldr	r3, [pc, #212]	; (8003f1c <xTaskResumeAll+0x11c>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d05d      	beq.n	8003f08 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e4c:	e02e      	b.n	8003eac <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003e4e:	4b34      	ldr	r3, [pc, #208]	; (8003f20 <xTaskResumeAll+0x120>)
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	3318      	adds	r3, #24
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7ff fbbe 	bl	80035dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	3304      	adds	r3, #4
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7ff fbb9 	bl	80035dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6e:	2201      	movs	r2, #1
 8003e70:	409a      	lsls	r2, r3
 8003e72:	4b2c      	ldr	r3, [pc, #176]	; (8003f24 <xTaskResumeAll+0x124>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	4a2a      	ldr	r2, [pc, #168]	; (8003f24 <xTaskResumeAll+0x124>)
 8003e7a:	6013      	str	r3, [r2, #0]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e80:	4613      	mov	r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	4413      	add	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4a27      	ldr	r2, [pc, #156]	; (8003f28 <xTaskResumeAll+0x128>)
 8003e8a:	441a      	add	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	3304      	adds	r3, #4
 8003e90:	4619      	mov	r1, r3
 8003e92:	4610      	mov	r0, r2
 8003e94:	f7ff fb45 	bl	8003522 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e9c:	4b23      	ldr	r3, [pc, #140]	; (8003f2c <xTaskResumeAll+0x12c>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d302      	bcc.n	8003eac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003ea6:	4b22      	ldr	r3, [pc, #136]	; (8003f30 <xTaskResumeAll+0x130>)
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003eac:	4b1c      	ldr	r3, [pc, #112]	; (8003f20 <xTaskResumeAll+0x120>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1cc      	bne.n	8003e4e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003eba:	f000 f9ed 	bl	8004298 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003ebe:	4b1d      	ldr	r3, [pc, #116]	; (8003f34 <xTaskResumeAll+0x134>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d010      	beq.n	8003eec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003eca:	f000 f837 	bl	8003f3c <xTaskIncrementTick>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d002      	beq.n	8003eda <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003ed4:	4b16      	ldr	r3, [pc, #88]	; (8003f30 <xTaskResumeAll+0x130>)
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	3b01      	subs	r3, #1
 8003ede:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1f1      	bne.n	8003eca <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003ee6:	4b13      	ldr	r3, [pc, #76]	; (8003f34 <xTaskResumeAll+0x134>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003eec:	4b10      	ldr	r3, [pc, #64]	; (8003f30 <xTaskResumeAll+0x130>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d009      	beq.n	8003f08 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003ef8:	4b0f      	ldr	r3, [pc, #60]	; (8003f38 <xTaskResumeAll+0x138>)
 8003efa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003efe:	601a      	str	r2, [r3, #0]
 8003f00:	f3bf 8f4f 	dsb	sy
 8003f04:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f08:	f7ff fcd0 	bl	80038ac <vPortExitCritical>

	return xAlreadyYielded;
 8003f0c:	68bb      	ldr	r3, [r7, #8]
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	20003d70 	.word	0x20003d70
 8003f1c:	20003d48 	.word	0x20003d48
 8003f20:	20003d08 	.word	0x20003d08
 8003f24:	20003d50 	.word	0x20003d50
 8003f28:	20003c4c 	.word	0x20003c4c
 8003f2c:	20003c48 	.word	0x20003c48
 8003f30:	20003d5c 	.word	0x20003d5c
 8003f34:	20003d58 	.word	0x20003d58
 8003f38:	e000ed04 	.word	0xe000ed04

08003f3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003f42:	2300      	movs	r3, #0
 8003f44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f46:	4b51      	ldr	r3, [pc, #324]	; (800408c <xTaskIncrementTick+0x150>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f040 808e 	bne.w	800406c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f50:	4b4f      	ldr	r3, [pc, #316]	; (8004090 <xTaskIncrementTick+0x154>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	3301      	adds	r3, #1
 8003f56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003f58:	4a4d      	ldr	r2, [pc, #308]	; (8004090 <xTaskIncrementTick+0x154>)
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d121      	bne.n	8003fa8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f64:	4b4b      	ldr	r3, [pc, #300]	; (8004094 <xTaskIncrementTick+0x158>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00b      	beq.n	8003f86 <xTaskIncrementTick+0x4a>
 8003f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f72:	b672      	cpsid	i
 8003f74:	f383 8811 	msr	BASEPRI, r3
 8003f78:	f3bf 8f6f 	isb	sy
 8003f7c:	f3bf 8f4f 	dsb	sy
 8003f80:	b662      	cpsie	i
 8003f82:	603b      	str	r3, [r7, #0]
 8003f84:	e7fe      	b.n	8003f84 <xTaskIncrementTick+0x48>
 8003f86:	4b43      	ldr	r3, [pc, #268]	; (8004094 <xTaskIncrementTick+0x158>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	60fb      	str	r3, [r7, #12]
 8003f8c:	4b42      	ldr	r3, [pc, #264]	; (8004098 <xTaskIncrementTick+0x15c>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a40      	ldr	r2, [pc, #256]	; (8004094 <xTaskIncrementTick+0x158>)
 8003f92:	6013      	str	r3, [r2, #0]
 8003f94:	4a40      	ldr	r2, [pc, #256]	; (8004098 <xTaskIncrementTick+0x15c>)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6013      	str	r3, [r2, #0]
 8003f9a:	4b40      	ldr	r3, [pc, #256]	; (800409c <xTaskIncrementTick+0x160>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	4a3e      	ldr	r2, [pc, #248]	; (800409c <xTaskIncrementTick+0x160>)
 8003fa2:	6013      	str	r3, [r2, #0]
 8003fa4:	f000 f978 	bl	8004298 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003fa8:	4b3d      	ldr	r3, [pc, #244]	; (80040a0 <xTaskIncrementTick+0x164>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d34d      	bcc.n	800404e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fb2:	4b38      	ldr	r3, [pc, #224]	; (8004094 <xTaskIncrementTick+0x158>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d101      	bne.n	8003fc0 <xTaskIncrementTick+0x84>
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e000      	b.n	8003fc2 <xTaskIncrementTick+0x86>
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d004      	beq.n	8003fd0 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fc6:	4b36      	ldr	r3, [pc, #216]	; (80040a0 <xTaskIncrementTick+0x164>)
 8003fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8003fcc:	601a      	str	r2, [r3, #0]
					break;
 8003fce:	e03e      	b.n	800404e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003fd0:	4b30      	ldr	r3, [pc, #192]	; (8004094 <xTaskIncrementTick+0x158>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d203      	bcs.n	8003ff0 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003fe8:	4a2d      	ldr	r2, [pc, #180]	; (80040a0 <xTaskIncrementTick+0x164>)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6013      	str	r3, [r2, #0]
						break;
 8003fee:	e02e      	b.n	800404e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	3304      	adds	r3, #4
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7ff faf1 	bl	80035dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d004      	beq.n	800400c <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	3318      	adds	r3, #24
 8004006:	4618      	mov	r0, r3
 8004008:	f7ff fae8 	bl	80035dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004010:	2201      	movs	r2, #1
 8004012:	409a      	lsls	r2, r3
 8004014:	4b23      	ldr	r3, [pc, #140]	; (80040a4 <xTaskIncrementTick+0x168>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4313      	orrs	r3, r2
 800401a:	4a22      	ldr	r2, [pc, #136]	; (80040a4 <xTaskIncrementTick+0x168>)
 800401c:	6013      	str	r3, [r2, #0]
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004022:	4613      	mov	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	4413      	add	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4a1f      	ldr	r2, [pc, #124]	; (80040a8 <xTaskIncrementTick+0x16c>)
 800402c:	441a      	add	r2, r3
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	3304      	adds	r3, #4
 8004032:	4619      	mov	r1, r3
 8004034:	4610      	mov	r0, r2
 8004036:	f7ff fa74 	bl	8003522 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800403e:	4b1b      	ldr	r3, [pc, #108]	; (80040ac <xTaskIncrementTick+0x170>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004044:	429a      	cmp	r2, r3
 8004046:	d3b4      	bcc.n	8003fb2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004048:	2301      	movs	r3, #1
 800404a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800404c:	e7b1      	b.n	8003fb2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800404e:	4b17      	ldr	r3, [pc, #92]	; (80040ac <xTaskIncrementTick+0x170>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004054:	4914      	ldr	r1, [pc, #80]	; (80040a8 <xTaskIncrementTick+0x16c>)
 8004056:	4613      	mov	r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	4413      	add	r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	440b      	add	r3, r1
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d907      	bls.n	8004076 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004066:	2301      	movs	r3, #1
 8004068:	617b      	str	r3, [r7, #20]
 800406a:	e004      	b.n	8004076 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800406c:	4b10      	ldr	r3, [pc, #64]	; (80040b0 <xTaskIncrementTick+0x174>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	3301      	adds	r3, #1
 8004072:	4a0f      	ldr	r2, [pc, #60]	; (80040b0 <xTaskIncrementTick+0x174>)
 8004074:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004076:	4b0f      	ldr	r3, [pc, #60]	; (80040b4 <xTaskIncrementTick+0x178>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800407e:	2301      	movs	r3, #1
 8004080:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004082:	697b      	ldr	r3, [r7, #20]
}
 8004084:	4618      	mov	r0, r3
 8004086:	3718      	adds	r7, #24
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	20003d70 	.word	0x20003d70
 8004090:	20003d4c 	.word	0x20003d4c
 8004094:	20003d00 	.word	0x20003d00
 8004098:	20003d04 	.word	0x20003d04
 800409c:	20003d60 	.word	0x20003d60
 80040a0:	20003d68 	.word	0x20003d68
 80040a4:	20003d50 	.word	0x20003d50
 80040a8:	20003c4c 	.word	0x20003c4c
 80040ac:	20003c48 	.word	0x20003c48
 80040b0:	20003d58 	.word	0x20003d58
 80040b4:	20003d5c 	.word	0x20003d5c

080040b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80040b8:	b480      	push	{r7}
 80040ba:	b087      	sub	sp, #28
 80040bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80040be:	4b27      	ldr	r3, [pc, #156]	; (800415c <vTaskSwitchContext+0xa4>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d003      	beq.n	80040ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80040c6:	4b26      	ldr	r3, [pc, #152]	; (8004160 <vTaskSwitchContext+0xa8>)
 80040c8:	2201      	movs	r2, #1
 80040ca:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80040cc:	e040      	b.n	8004150 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80040ce:	4b24      	ldr	r3, [pc, #144]	; (8004160 <vTaskSwitchContext+0xa8>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80040d4:	4b23      	ldr	r3, [pc, #140]	; (8004164 <vTaskSwitchContext+0xac>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	fab3 f383 	clz	r3, r3
 80040e0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80040e2:	7afb      	ldrb	r3, [r7, #11]
 80040e4:	f1c3 031f 	rsb	r3, r3, #31
 80040e8:	617b      	str	r3, [r7, #20]
 80040ea:	491f      	ldr	r1, [pc, #124]	; (8004168 <vTaskSwitchContext+0xb0>)
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	4613      	mov	r3, r2
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	4413      	add	r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	440b      	add	r3, r1
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d10b      	bne.n	8004116 <vTaskSwitchContext+0x5e>
	__asm volatile
 80040fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004102:	b672      	cpsid	i
 8004104:	f383 8811 	msr	BASEPRI, r3
 8004108:	f3bf 8f6f 	isb	sy
 800410c:	f3bf 8f4f 	dsb	sy
 8004110:	b662      	cpsie	i
 8004112:	607b      	str	r3, [r7, #4]
 8004114:	e7fe      	b.n	8004114 <vTaskSwitchContext+0x5c>
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	4613      	mov	r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	4413      	add	r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	4a11      	ldr	r2, [pc, #68]	; (8004168 <vTaskSwitchContext+0xb0>)
 8004122:	4413      	add	r3, r2
 8004124:	613b      	str	r3, [r7, #16]
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	605a      	str	r2, [r3, #4]
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	3308      	adds	r3, #8
 8004138:	429a      	cmp	r2, r3
 800413a:	d104      	bne.n	8004146 <vTaskSwitchContext+0x8e>
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	685a      	ldr	r2, [r3, #4]
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	605a      	str	r2, [r3, #4]
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	4a07      	ldr	r2, [pc, #28]	; (800416c <vTaskSwitchContext+0xb4>)
 800414e:	6013      	str	r3, [r2, #0]
}
 8004150:	bf00      	nop
 8004152:	371c      	adds	r7, #28
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr
 800415c:	20003d70 	.word	0x20003d70
 8004160:	20003d5c 	.word	0x20003d5c
 8004164:	20003d50 	.word	0x20003d50
 8004168:	20003c4c 	.word	0x20003c4c
 800416c:	20003c48 	.word	0x20003c48

08004170 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004178:	f000 f852 	bl	8004220 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800417c:	4b06      	ldr	r3, [pc, #24]	; (8004198 <prvIdleTask+0x28>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d9f9      	bls.n	8004178 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004184:	4b05      	ldr	r3, [pc, #20]	; (800419c <prvIdleTask+0x2c>)
 8004186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800418a:	601a      	str	r2, [r3, #0]
 800418c:	f3bf 8f4f 	dsb	sy
 8004190:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004194:	e7f0      	b.n	8004178 <prvIdleTask+0x8>
 8004196:	bf00      	nop
 8004198:	20003c4c 	.word	0x20003c4c
 800419c:	e000ed04 	.word	0xe000ed04

080041a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80041a6:	2300      	movs	r3, #0
 80041a8:	607b      	str	r3, [r7, #4]
 80041aa:	e00c      	b.n	80041c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	4613      	mov	r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4413      	add	r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	4a12      	ldr	r2, [pc, #72]	; (8004200 <prvInitialiseTaskLists+0x60>)
 80041b8:	4413      	add	r3, r2
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7ff f984 	bl	80034c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	3301      	adds	r3, #1
 80041c4:	607b      	str	r3, [r7, #4]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2b06      	cmp	r3, #6
 80041ca:	d9ef      	bls.n	80041ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80041cc:	480d      	ldr	r0, [pc, #52]	; (8004204 <prvInitialiseTaskLists+0x64>)
 80041ce:	f7ff f97b 	bl	80034c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80041d2:	480d      	ldr	r0, [pc, #52]	; (8004208 <prvInitialiseTaskLists+0x68>)
 80041d4:	f7ff f978 	bl	80034c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80041d8:	480c      	ldr	r0, [pc, #48]	; (800420c <prvInitialiseTaskLists+0x6c>)
 80041da:	f7ff f975 	bl	80034c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80041de:	480c      	ldr	r0, [pc, #48]	; (8004210 <prvInitialiseTaskLists+0x70>)
 80041e0:	f7ff f972 	bl	80034c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80041e4:	480b      	ldr	r0, [pc, #44]	; (8004214 <prvInitialiseTaskLists+0x74>)
 80041e6:	f7ff f96f 	bl	80034c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80041ea:	4b0b      	ldr	r3, [pc, #44]	; (8004218 <prvInitialiseTaskLists+0x78>)
 80041ec:	4a05      	ldr	r2, [pc, #20]	; (8004204 <prvInitialiseTaskLists+0x64>)
 80041ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80041f0:	4b0a      	ldr	r3, [pc, #40]	; (800421c <prvInitialiseTaskLists+0x7c>)
 80041f2:	4a05      	ldr	r2, [pc, #20]	; (8004208 <prvInitialiseTaskLists+0x68>)
 80041f4:	601a      	str	r2, [r3, #0]
}
 80041f6:	bf00      	nop
 80041f8:	3708      	adds	r7, #8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	20003c4c 	.word	0x20003c4c
 8004204:	20003cd8 	.word	0x20003cd8
 8004208:	20003cec 	.word	0x20003cec
 800420c:	20003d08 	.word	0x20003d08
 8004210:	20003d1c 	.word	0x20003d1c
 8004214:	20003d34 	.word	0x20003d34
 8004218:	20003d00 	.word	0x20003d00
 800421c:	20003d04 	.word	0x20003d04

08004220 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004226:	e019      	b.n	800425c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004228:	f7ff fb0e 	bl	8003848 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800422c:	4b0f      	ldr	r3, [pc, #60]	; (800426c <prvCheckTasksWaitingTermination+0x4c>)
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	3304      	adds	r3, #4
 8004238:	4618      	mov	r0, r3
 800423a:	f7ff f9cf 	bl	80035dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800423e:	4b0c      	ldr	r3, [pc, #48]	; (8004270 <prvCheckTasksWaitingTermination+0x50>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	3b01      	subs	r3, #1
 8004244:	4a0a      	ldr	r2, [pc, #40]	; (8004270 <prvCheckTasksWaitingTermination+0x50>)
 8004246:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004248:	4b0a      	ldr	r3, [pc, #40]	; (8004274 <prvCheckTasksWaitingTermination+0x54>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	3b01      	subs	r3, #1
 800424e:	4a09      	ldr	r2, [pc, #36]	; (8004274 <prvCheckTasksWaitingTermination+0x54>)
 8004250:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004252:	f7ff fb2b 	bl	80038ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f80e 	bl	8004278 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800425c:	4b05      	ldr	r3, [pc, #20]	; (8004274 <prvCheckTasksWaitingTermination+0x54>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1e1      	bne.n	8004228 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004264:	bf00      	nop
 8004266:	3708      	adds	r7, #8
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	20003d1c 	.word	0x20003d1c
 8004270:	20003d48 	.word	0x20003d48
 8004274:	20003d30 	.word	0x20003d30

08004278 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004284:	4618      	mov	r0, r3
 8004286:	f7ff f807 	bl	8003298 <vPortFree>
			vPortFree( pxTCB );
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f7ff f804 	bl	8003298 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004290:	bf00      	nop
 8004292:	3708      	adds	r7, #8
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800429e:	4b0f      	ldr	r3, [pc, #60]	; (80042dc <prvResetNextTaskUnblockTime+0x44>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d101      	bne.n	80042ac <prvResetNextTaskUnblockTime+0x14>
 80042a8:	2301      	movs	r3, #1
 80042aa:	e000      	b.n	80042ae <prvResetNextTaskUnblockTime+0x16>
 80042ac:	2300      	movs	r3, #0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d004      	beq.n	80042bc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80042b2:	4b0b      	ldr	r3, [pc, #44]	; (80042e0 <prvResetNextTaskUnblockTime+0x48>)
 80042b4:	f04f 32ff 	mov.w	r2, #4294967295
 80042b8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80042ba:	e008      	b.n	80042ce <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80042bc:	4b07      	ldr	r3, [pc, #28]	; (80042dc <prvResetNextTaskUnblockTime+0x44>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	4a05      	ldr	r2, [pc, #20]	; (80042e0 <prvResetNextTaskUnblockTime+0x48>)
 80042cc:	6013      	str	r3, [r2, #0]
}
 80042ce:	bf00      	nop
 80042d0:	370c      	adds	r7, #12
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	20003d00 	.word	0x20003d00
 80042e0:	20003d68 	.word	0x20003d68

080042e4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b086      	sub	sp, #24
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
 80042f0:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80042f2:	f7ff faa9 	bl	8003848 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80042f6:	4b26      	ldr	r3, [pc, #152]	; (8004390 <xTaskNotifyWait+0xac>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	2b02      	cmp	r3, #2
 8004302:	d01a      	beq.n	800433a <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8004304:	4b22      	ldr	r3, [pc, #136]	; (8004390 <xTaskNotifyWait+0xac>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	43d2      	mvns	r2, r2
 800430e:	400a      	ands	r2, r1
 8004310:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8004312:	4b1f      	ldr	r3, [pc, #124]	; (8004390 <xTaskNotifyWait+0xac>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00b      	beq.n	800433a <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004322:	2101      	movs	r1, #1
 8004324:	6838      	ldr	r0, [r7, #0]
 8004326:	f000 f9a7 	bl	8004678 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800432a:	4b1a      	ldr	r3, [pc, #104]	; (8004394 <xTaskNotifyWait+0xb0>)
 800432c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004330:	601a      	str	r2, [r3, #0]
 8004332:	f3bf 8f4f 	dsb	sy
 8004336:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800433a:	f7ff fab7 	bl	80038ac <vPortExitCritical>

		taskENTER_CRITICAL();
 800433e:	f7ff fa83 	bl	8003848 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d004      	beq.n	8004352 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8004348:	4b11      	ldr	r3, [pc, #68]	; (8004390 <xTaskNotifyWait+0xac>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8004352:	4b0f      	ldr	r3, [pc, #60]	; (8004390 <xTaskNotifyWait+0xac>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800435a:	b2db      	uxtb	r3, r3
 800435c:	2b02      	cmp	r3, #2
 800435e:	d002      	beq.n	8004366 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8004360:	2300      	movs	r3, #0
 8004362:	617b      	str	r3, [r7, #20]
 8004364:	e008      	b.n	8004378 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8004366:	4b0a      	ldr	r3, [pc, #40]	; (8004390 <xTaskNotifyWait+0xac>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800436c:	68ba      	ldr	r2, [r7, #8]
 800436e:	43d2      	mvns	r2, r2
 8004370:	400a      	ands	r2, r1
 8004372:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 8004374:	2301      	movs	r3, #1
 8004376:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004378:	4b05      	ldr	r3, [pc, #20]	; (8004390 <xTaskNotifyWait+0xac>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8004382:	f7ff fa93 	bl	80038ac <vPortExitCritical>

		return xReturn;
 8004386:	697b      	ldr	r3, [r7, #20]
	}
 8004388:	4618      	mov	r0, r3
 800438a:	3718      	adds	r7, #24
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	20003c48 	.word	0x20003c48
 8004394:	e000ed04 	.word	0xe000ed04

08004398 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8004398:	b580      	push	{r7, lr}
 800439a:	b08a      	sub	sp, #40	; 0x28
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	603b      	str	r3, [r7, #0]
 80043a4:	4613      	mov	r3, r2
 80043a6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80043a8:	2301      	movs	r3, #1
 80043aa:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10b      	bne.n	80043ca <xTaskGenericNotify+0x32>
 80043b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b6:	b672      	cpsid	i
 80043b8:	f383 8811 	msr	BASEPRI, r3
 80043bc:	f3bf 8f6f 	isb	sy
 80043c0:	f3bf 8f4f 	dsb	sy
 80043c4:	b662      	cpsie	i
 80043c6:	61bb      	str	r3, [r7, #24]
 80043c8:	e7fe      	b.n	80043c8 <xTaskGenericNotify+0x30>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80043ce:	f7ff fa3b 	bl	8003848 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d003      	beq.n	80043e0 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80043d8:	6a3b      	ldr	r3, [r7, #32]
 80043da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80043e0:	6a3b      	ldr	r3, [r7, #32]
 80043e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80043e6:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80043e8:	6a3b      	ldr	r3, [r7, #32]
 80043ea:	2202      	movs	r2, #2
 80043ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 80043f0:	79fb      	ldrb	r3, [r7, #7]
 80043f2:	2b04      	cmp	r3, #4
 80043f4:	d827      	bhi.n	8004446 <xTaskGenericNotify+0xae>
 80043f6:	a201      	add	r2, pc, #4	; (adr r2, 80043fc <xTaskGenericNotify+0x64>)
 80043f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043fc:	08004447 	.word	0x08004447
 8004400:	08004411 	.word	0x08004411
 8004404:	0800441f 	.word	0x0800441f
 8004408:	0800442b 	.word	0x0800442b
 800440c:	08004433 	.word	0x08004433
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8004410:	6a3b      	ldr	r3, [r7, #32]
 8004412:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	431a      	orrs	r2, r3
 8004418:	6a3b      	ldr	r3, [r7, #32]
 800441a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800441c:	e013      	b.n	8004446 <xTaskGenericNotify+0xae>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800441e:	6a3b      	ldr	r3, [r7, #32]
 8004420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004422:	1c5a      	adds	r2, r3, #1
 8004424:	6a3b      	ldr	r3, [r7, #32]
 8004426:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8004428:	e00d      	b.n	8004446 <xTaskGenericNotify+0xae>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800442a:	6a3b      	ldr	r3, [r7, #32]
 800442c:	68ba      	ldr	r2, [r7, #8]
 800442e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8004430:	e009      	b.n	8004446 <xTaskGenericNotify+0xae>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004432:	7ffb      	ldrb	r3, [r7, #31]
 8004434:	2b02      	cmp	r3, #2
 8004436:	d003      	beq.n	8004440 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8004438:	6a3b      	ldr	r3, [r7, #32]
 800443a:	68ba      	ldr	r2, [r7, #8]
 800443c:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800443e:	e001      	b.n	8004444 <xTaskGenericNotify+0xac>
						xReturn = pdFAIL;
 8004440:	2300      	movs	r3, #0
 8004442:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8004444:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004446:	7ffb      	ldrb	r3, [r7, #31]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d13a      	bne.n	80044c2 <xTaskGenericNotify+0x12a>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800444c:	6a3b      	ldr	r3, [r7, #32]
 800444e:	3304      	adds	r3, #4
 8004450:	4618      	mov	r0, r3
 8004452:	f7ff f8c3 	bl	80035dc <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8004456:	6a3b      	ldr	r3, [r7, #32]
 8004458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445a:	2201      	movs	r2, #1
 800445c:	409a      	lsls	r2, r3
 800445e:	4b1c      	ldr	r3, [pc, #112]	; (80044d0 <xTaskGenericNotify+0x138>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4313      	orrs	r3, r2
 8004464:	4a1a      	ldr	r2, [pc, #104]	; (80044d0 <xTaskGenericNotify+0x138>)
 8004466:	6013      	str	r3, [r2, #0]
 8004468:	6a3b      	ldr	r3, [r7, #32]
 800446a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800446c:	4613      	mov	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	4413      	add	r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4a17      	ldr	r2, [pc, #92]	; (80044d4 <xTaskGenericNotify+0x13c>)
 8004476:	441a      	add	r2, r3
 8004478:	6a3b      	ldr	r3, [r7, #32]
 800447a:	3304      	adds	r3, #4
 800447c:	4619      	mov	r1, r3
 800447e:	4610      	mov	r0, r2
 8004480:	f7ff f84f 	bl	8003522 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004484:	6a3b      	ldr	r3, [r7, #32]
 8004486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00b      	beq.n	80044a4 <xTaskGenericNotify+0x10c>
 800448c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004490:	b672      	cpsid	i
 8004492:	f383 8811 	msr	BASEPRI, r3
 8004496:	f3bf 8f6f 	isb	sy
 800449a:	f3bf 8f4f 	dsb	sy
 800449e:	b662      	cpsie	i
 80044a0:	617b      	str	r3, [r7, #20]
 80044a2:	e7fe      	b.n	80044a2 <xTaskGenericNotify+0x10a>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80044a4:	6a3b      	ldr	r3, [r7, #32]
 80044a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a8:	4b0b      	ldr	r3, [pc, #44]	; (80044d8 <xTaskGenericNotify+0x140>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d907      	bls.n	80044c2 <xTaskGenericNotify+0x12a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80044b2:	4b0a      	ldr	r3, [pc, #40]	; (80044dc <xTaskGenericNotify+0x144>)
 80044b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044b8:	601a      	str	r2, [r3, #0]
 80044ba:	f3bf 8f4f 	dsb	sy
 80044be:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80044c2:	f7ff f9f3 	bl	80038ac <vPortExitCritical>

		return xReturn;
 80044c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3728      	adds	r7, #40	; 0x28
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	20003d50 	.word	0x20003d50
 80044d4:	20003c4c 	.word	0x20003c4c
 80044d8:	20003c48 	.word	0x20003c48
 80044dc:	e000ed04 	.word	0xe000ed04

080044e0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b08e      	sub	sp, #56	; 0x38
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	603b      	str	r3, [r7, #0]
 80044ec:	4613      	mov	r3, r2
 80044ee:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80044f0:	2301      	movs	r3, #1
 80044f2:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10b      	bne.n	8004512 <xTaskGenericNotifyFromISR+0x32>
 80044fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044fe:	b672      	cpsid	i
 8004500:	f383 8811 	msr	BASEPRI, r3
 8004504:	f3bf 8f6f 	isb	sy
 8004508:	f3bf 8f4f 	dsb	sy
 800450c:	b662      	cpsie	i
 800450e:	627b      	str	r3, [r7, #36]	; 0x24
 8004510:	e7fe      	b.n	8004510 <xTaskGenericNotifyFromISR+0x30>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004512:	f7ff fa79 	bl	8003a08 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800451a:	f3ef 8211 	mrs	r2, BASEPRI
 800451e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004522:	b672      	cpsid	i
 8004524:	f383 8811 	msr	BASEPRI, r3
 8004528:	f3bf 8f6f 	isb	sy
 800452c:	f3bf 8f4f 	dsb	sy
 8004530:	b662      	cpsie	i
 8004532:	623a      	str	r2, [r7, #32]
 8004534:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8004536:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004538:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d003      	beq.n	8004548 <xTaskGenericNotifyFromISR+0x68>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8004540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004542:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8004548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800454e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004554:	2202      	movs	r2, #2
 8004556:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 800455a:	79fb      	ldrb	r3, [r7, #7]
 800455c:	2b04      	cmp	r3, #4
 800455e:	d829      	bhi.n	80045b4 <xTaskGenericNotifyFromISR+0xd4>
 8004560:	a201      	add	r2, pc, #4	; (adr r2, 8004568 <xTaskGenericNotifyFromISR+0x88>)
 8004562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004566:	bf00      	nop
 8004568:	080045b5 	.word	0x080045b5
 800456c:	0800457d 	.word	0x0800457d
 8004570:	0800458b 	.word	0x0800458b
 8004574:	08004597 	.word	0x08004597
 8004578:	0800459f 	.word	0x0800459f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800457c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	431a      	orrs	r2, r3
 8004584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004586:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8004588:	e014      	b.n	80045b4 <xTaskGenericNotifyFromISR+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800458a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800458e:	1c5a      	adds	r2, r3, #1
 8004590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004592:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8004594:	e00e      	b.n	80045b4 <xTaskGenericNotifyFromISR+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8004596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004598:	68ba      	ldr	r2, [r7, #8]
 800459a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800459c:	e00a      	b.n	80045b4 <xTaskGenericNotifyFromISR+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800459e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d003      	beq.n	80045ae <xTaskGenericNotifyFromISR+0xce>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80045a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a8:	68ba      	ldr	r2, [r7, #8]
 80045aa:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80045ac:	e001      	b.n	80045b2 <xTaskGenericNotifyFromISR+0xd2>
						xReturn = pdFAIL;
 80045ae:	2300      	movs	r3, #0
 80045b0:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80045b2:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80045b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d147      	bne.n	800464c <xTaskGenericNotifyFromISR+0x16c>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80045bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00b      	beq.n	80045dc <xTaskGenericNotifyFromISR+0xfc>
	__asm volatile
 80045c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c8:	b672      	cpsid	i
 80045ca:	f383 8811 	msr	BASEPRI, r3
 80045ce:	f3bf 8f6f 	isb	sy
 80045d2:	f3bf 8f4f 	dsb	sy
 80045d6:	b662      	cpsie	i
 80045d8:	61bb      	str	r3, [r7, #24]
 80045da:	e7fe      	b.n	80045da <xTaskGenericNotifyFromISR+0xfa>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045dc:	4b20      	ldr	r3, [pc, #128]	; (8004660 <xTaskGenericNotifyFromISR+0x180>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d11c      	bne.n	800461e <xTaskGenericNotifyFromISR+0x13e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e6:	3304      	adds	r3, #4
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7fe fff7 	bl	80035dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80045ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f2:	2201      	movs	r2, #1
 80045f4:	409a      	lsls	r2, r3
 80045f6:	4b1b      	ldr	r3, [pc, #108]	; (8004664 <xTaskGenericNotifyFromISR+0x184>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	4a19      	ldr	r2, [pc, #100]	; (8004664 <xTaskGenericNotifyFromISR+0x184>)
 80045fe:	6013      	str	r3, [r2, #0]
 8004600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004604:	4613      	mov	r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	4413      	add	r3, r2
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	4a16      	ldr	r2, [pc, #88]	; (8004668 <xTaskGenericNotifyFromISR+0x188>)
 800460e:	441a      	add	r2, r3
 8004610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004612:	3304      	adds	r3, #4
 8004614:	4619      	mov	r1, r3
 8004616:	4610      	mov	r0, r2
 8004618:	f7fe ff83 	bl	8003522 <vListInsertEnd>
 800461c:	e005      	b.n	800462a <xTaskGenericNotifyFromISR+0x14a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800461e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004620:	3318      	adds	r3, #24
 8004622:	4619      	mov	r1, r3
 8004624:	4811      	ldr	r0, [pc, #68]	; (800466c <xTaskGenericNotifyFromISR+0x18c>)
 8004626:	f7fe ff7c 	bl	8003522 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800462a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800462e:	4b10      	ldr	r3, [pc, #64]	; (8004670 <xTaskGenericNotifyFromISR+0x190>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004634:	429a      	cmp	r2, r3
 8004636:	d909      	bls.n	800464c <xTaskGenericNotifyFromISR+0x16c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8004638:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800463a:	2b00      	cmp	r3, #0
 800463c:	d003      	beq.n	8004646 <xTaskGenericNotifyFromISR+0x166>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800463e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004640:	2201      	movs	r2, #1
 8004642:	601a      	str	r2, [r3, #0]
 8004644:	e002      	b.n	800464c <xTaskGenericNotifyFromISR+0x16c>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8004646:	4b0b      	ldr	r3, [pc, #44]	; (8004674 <xTaskGenericNotifyFromISR+0x194>)
 8004648:	2201      	movs	r2, #1
 800464a:	601a      	str	r2, [r3, #0]
 800464c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800464e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8004656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8004658:	4618      	mov	r0, r3
 800465a:	3738      	adds	r7, #56	; 0x38
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	20003d70 	.word	0x20003d70
 8004664:	20003d50 	.word	0x20003d50
 8004668:	20003c4c 	.word	0x20003c4c
 800466c:	20003d08 	.word	0x20003d08
 8004670:	20003c48 	.word	0x20003c48
 8004674:	20003d5c 	.word	0x20003d5c

08004678 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004682:	4b29      	ldr	r3, [pc, #164]	; (8004728 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004688:	4b28      	ldr	r3, [pc, #160]	; (800472c <prvAddCurrentTaskToDelayedList+0xb4>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	3304      	adds	r3, #4
 800468e:	4618      	mov	r0, r3
 8004690:	f7fe ffa4 	bl	80035dc <uxListRemove>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d10b      	bne.n	80046b2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800469a:	4b24      	ldr	r3, [pc, #144]	; (800472c <prvAddCurrentTaskToDelayedList+0xb4>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a0:	2201      	movs	r2, #1
 80046a2:	fa02 f303 	lsl.w	r3, r2, r3
 80046a6:	43da      	mvns	r2, r3
 80046a8:	4b21      	ldr	r3, [pc, #132]	; (8004730 <prvAddCurrentTaskToDelayedList+0xb8>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4013      	ands	r3, r2
 80046ae:	4a20      	ldr	r2, [pc, #128]	; (8004730 <prvAddCurrentTaskToDelayedList+0xb8>)
 80046b0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b8:	d10a      	bne.n	80046d0 <prvAddCurrentTaskToDelayedList+0x58>
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d007      	beq.n	80046d0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046c0:	4b1a      	ldr	r3, [pc, #104]	; (800472c <prvAddCurrentTaskToDelayedList+0xb4>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	3304      	adds	r3, #4
 80046c6:	4619      	mov	r1, r3
 80046c8:	481a      	ldr	r0, [pc, #104]	; (8004734 <prvAddCurrentTaskToDelayedList+0xbc>)
 80046ca:	f7fe ff2a 	bl	8003522 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80046ce:	e026      	b.n	800471e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4413      	add	r3, r2
 80046d6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80046d8:	4b14      	ldr	r3, [pc, #80]	; (800472c <prvAddCurrentTaskToDelayedList+0xb4>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68ba      	ldr	r2, [r7, #8]
 80046de:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d209      	bcs.n	80046fc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046e8:	4b13      	ldr	r3, [pc, #76]	; (8004738 <prvAddCurrentTaskToDelayedList+0xc0>)
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	4b0f      	ldr	r3, [pc, #60]	; (800472c <prvAddCurrentTaskToDelayedList+0xb4>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	3304      	adds	r3, #4
 80046f2:	4619      	mov	r1, r3
 80046f4:	4610      	mov	r0, r2
 80046f6:	f7fe ff38 	bl	800356a <vListInsert>
}
 80046fa:	e010      	b.n	800471e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046fc:	4b0f      	ldr	r3, [pc, #60]	; (800473c <prvAddCurrentTaskToDelayedList+0xc4>)
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	4b0a      	ldr	r3, [pc, #40]	; (800472c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	3304      	adds	r3, #4
 8004706:	4619      	mov	r1, r3
 8004708:	4610      	mov	r0, r2
 800470a:	f7fe ff2e 	bl	800356a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800470e:	4b0c      	ldr	r3, [pc, #48]	; (8004740 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68ba      	ldr	r2, [r7, #8]
 8004714:	429a      	cmp	r2, r3
 8004716:	d202      	bcs.n	800471e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004718:	4a09      	ldr	r2, [pc, #36]	; (8004740 <prvAddCurrentTaskToDelayedList+0xc8>)
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	6013      	str	r3, [r2, #0]
}
 800471e:	bf00      	nop
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	20003d4c 	.word	0x20003d4c
 800472c:	20003c48 	.word	0x20003c48
 8004730:	20003d50 	.word	0x20003d50
 8004734:	20003d34 	.word	0x20003d34
 8004738:	20003d04 	.word	0x20003d04
 800473c:	20003d00 	.word	0x20003d00
 8004740:	20003d68 	.word	0x20003d68

08004744 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004744:	b5b0      	push	{r4, r5, r7, lr}
 8004746:	b08a      	sub	sp, #40	; 0x28
 8004748:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800474a:	f7fb fee1 	bl	8000510 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800474e:	f000 f839 	bl	80047c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004752:	f000 f8f1 	bl	8004938 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8004756:	f000 f8bf 	bl	80048d8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &character, 1);
 800475a:	2201      	movs	r2, #1
 800475c:	4913      	ldr	r1, [pc, #76]	; (80047ac <main+0x68>)
 800475e:	4814      	ldr	r0, [pc, #80]	; (80047b0 <main+0x6c>)
 8004760:	f7fd fd56 	bl	8002210 <HAL_UART_Receive_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8004764:	4b13      	ldr	r3, [pc, #76]	; (80047b4 <main+0x70>)
 8004766:	f107 0414 	add.w	r4, r7, #20
 800476a:	461d      	mov	r5, r3
 800476c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800476e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004770:	682b      	ldr	r3, [r5, #0]
 8004772:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8004774:	f107 0314 	add.w	r3, r7, #20
 8004778:	2100      	movs	r1, #0
 800477a:	4618      	mov	r0, r3
 800477c:	f7fe fbfd 	bl	8002f7a <osThreadCreate>
 8004780:	4602      	mov	r2, r0
 8004782:	4b0d      	ldr	r3, [pc, #52]	; (80047b8 <main+0x74>)
 8004784:	601a      	str	r2, [r3, #0]

  /* definition and creation of Printer */
  osThreadDef(Printer, StartPrinter, osPriorityIdle, 0, 256);
 8004786:	4b0d      	ldr	r3, [pc, #52]	; (80047bc <main+0x78>)
 8004788:	463c      	mov	r4, r7
 800478a:	461d      	mov	r5, r3
 800478c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800478e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004790:	682b      	ldr	r3, [r5, #0]
 8004792:	6023      	str	r3, [r4, #0]
  PrinterHandle = osThreadCreate(osThread(Printer), NULL);
 8004794:	463b      	mov	r3, r7
 8004796:	2100      	movs	r1, #0
 8004798:	4618      	mov	r0, r3
 800479a:	f7fe fbee 	bl	8002f7a <osThreadCreate>
 800479e:	4602      	mov	r2, r0
 80047a0:	4b07      	ldr	r3, [pc, #28]	; (80047c0 <main+0x7c>)
 80047a2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80047a4:	f7fe fbe2 	bl	8002f6c <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80047a8:	e7fe      	b.n	80047a8 <main+0x64>
 80047aa:	bf00      	nop
 80047ac:	20003d84 	.word	0x20003d84
 80047b0:	20003e88 	.word	0x20003e88
 80047b4:	08004e24 	.word	0x08004e24
 80047b8:	20003d80 	.word	0x20003d80
 80047bc:	08004e40 	.word	0x08004e40
 80047c0:	20003d7c 	.word	0x20003d7c

080047c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b0b4      	sub	sp, #208	; 0xd0
 80047c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80047ca:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80047ce:	2230      	movs	r2, #48	; 0x30
 80047d0:	2100      	movs	r1, #0
 80047d2:	4618      	mov	r0, r3
 80047d4:	f000 fb08 	bl	8004de8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80047d8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80047dc:	2200      	movs	r2, #0
 80047de:	601a      	str	r2, [r3, #0]
 80047e0:	605a      	str	r2, [r3, #4]
 80047e2:	609a      	str	r2, [r3, #8]
 80047e4:	60da      	str	r2, [r3, #12]
 80047e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80047e8:	f107 0308 	add.w	r3, r7, #8
 80047ec:	2284      	movs	r2, #132	; 0x84
 80047ee:	2100      	movs	r1, #0
 80047f0:	4618      	mov	r0, r3
 80047f2:	f000 faf9 	bl	8004de8 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80047f6:	4b36      	ldr	r3, [pc, #216]	; (80048d0 <SystemClock_Config+0x10c>)
 80047f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fa:	4a35      	ldr	r2, [pc, #212]	; (80048d0 <SystemClock_Config+0x10c>)
 80047fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004800:	6413      	str	r3, [r2, #64]	; 0x40
 8004802:	4b33      	ldr	r3, [pc, #204]	; (80048d0 <SystemClock_Config+0x10c>)
 8004804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800480a:	607b      	str	r3, [r7, #4]
 800480c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800480e:	4b31      	ldr	r3, [pc, #196]	; (80048d4 <SystemClock_Config+0x110>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004816:	4a2f      	ldr	r2, [pc, #188]	; (80048d4 <SystemClock_Config+0x110>)
 8004818:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800481c:	6013      	str	r3, [r2, #0]
 800481e:	4b2d      	ldr	r3, [pc, #180]	; (80048d4 <SystemClock_Config+0x110>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004826:	603b      	str	r3, [r7, #0]
 8004828:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800482a:	2302      	movs	r3, #2
 800482c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004830:	2301      	movs	r3, #1
 8004832:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004836:	2310      	movs	r3, #16
 8004838:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800483c:	2302      	movs	r3, #2
 800483e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004842:	2300      	movs	r3, #0
 8004844:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 10;
 8004848:	230a      	movs	r3, #10
 800484a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 210;
 800484e:	23d2      	movs	r3, #210	; 0xd2
 8004850:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004854:	2302      	movs	r3, #2
 8004856:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800485a:	2302      	movs	r3, #2
 800485c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004860:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004864:	4618      	mov	r0, r3
 8004866:	f7fc f92f 	bl	8000ac8 <HAL_RCC_OscConfig>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d001      	beq.n	8004874 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8004870:	f000 f916 	bl	8004aa0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004874:	230f      	movs	r3, #15
 8004876:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800487a:	2302      	movs	r3, #2
 800487c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004880:	2300      	movs	r3, #0
 8004882:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004886:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800488a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800488e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004892:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004896:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800489a:	2105      	movs	r1, #5
 800489c:	4618      	mov	r0, r3
 800489e:	f7fc fb83 	bl	8000fa8 <HAL_RCC_ClockConfig>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d001      	beq.n	80048ac <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80048a8:	f000 f8fa 	bl	8004aa0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80048ac:	2340      	movs	r3, #64	; 0x40
 80048ae:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80048b0:	2300      	movs	r3, #0
 80048b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80048b4:	f107 0308 	add.w	r3, r7, #8
 80048b8:	4618      	mov	r0, r3
 80048ba:	f7fc fd75 	bl	80013a8 <HAL_RCCEx_PeriphCLKConfig>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d001      	beq.n	80048c8 <SystemClock_Config+0x104>
  {
    Error_Handler();
 80048c4:	f000 f8ec 	bl	8004aa0 <Error_Handler>
  }
}
 80048c8:	bf00      	nop
 80048ca:	37d0      	adds	r7, #208	; 0xd0
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	40023800 	.word	0x40023800
 80048d4:	40007000 	.word	0x40007000

080048d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80048dc:	4b14      	ldr	r3, [pc, #80]	; (8004930 <MX_USART1_UART_Init+0x58>)
 80048de:	4a15      	ldr	r2, [pc, #84]	; (8004934 <MX_USART1_UART_Init+0x5c>)
 80048e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80048e2:	4b13      	ldr	r3, [pc, #76]	; (8004930 <MX_USART1_UART_Init+0x58>)
 80048e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80048e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80048ea:	4b11      	ldr	r3, [pc, #68]	; (8004930 <MX_USART1_UART_Init+0x58>)
 80048ec:	2200      	movs	r2, #0
 80048ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80048f0:	4b0f      	ldr	r3, [pc, #60]	; (8004930 <MX_USART1_UART_Init+0x58>)
 80048f2:	2200      	movs	r2, #0
 80048f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80048f6:	4b0e      	ldr	r3, [pc, #56]	; (8004930 <MX_USART1_UART_Init+0x58>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80048fc:	4b0c      	ldr	r3, [pc, #48]	; (8004930 <MX_USART1_UART_Init+0x58>)
 80048fe:	220c      	movs	r2, #12
 8004900:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004902:	4b0b      	ldr	r3, [pc, #44]	; (8004930 <MX_USART1_UART_Init+0x58>)
 8004904:	2200      	movs	r2, #0
 8004906:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004908:	4b09      	ldr	r3, [pc, #36]	; (8004930 <MX_USART1_UART_Init+0x58>)
 800490a:	2200      	movs	r2, #0
 800490c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800490e:	4b08      	ldr	r3, [pc, #32]	; (8004930 <MX_USART1_UART_Init+0x58>)
 8004910:	2200      	movs	r2, #0
 8004912:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004914:	4b06      	ldr	r3, [pc, #24]	; (8004930 <MX_USART1_UART_Init+0x58>)
 8004916:	2200      	movs	r2, #0
 8004918:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800491a:	4805      	ldr	r0, [pc, #20]	; (8004930 <MX_USART1_UART_Init+0x58>)
 800491c:	f7fd fb98 	bl	8002050 <HAL_UART_Init>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d001      	beq.n	800492a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8004926:	f000 f8bb 	bl	8004aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800492a:	bf00      	nop
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	20003e88 	.word	0x20003e88
 8004934:	40011000 	.word	0x40011000

08004938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800493e:	4b1b      	ldr	r3, [pc, #108]	; (80049ac <MX_GPIO_Init+0x74>)
 8004940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004942:	4a1a      	ldr	r2, [pc, #104]	; (80049ac <MX_GPIO_Init+0x74>)
 8004944:	f043 0301 	orr.w	r3, r3, #1
 8004948:	6313      	str	r3, [r2, #48]	; 0x30
 800494a:	4b18      	ldr	r3, [pc, #96]	; (80049ac <MX_GPIO_Init+0x74>)
 800494c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	60fb      	str	r3, [r7, #12]
 8004954:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004956:	4b15      	ldr	r3, [pc, #84]	; (80049ac <MX_GPIO_Init+0x74>)
 8004958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495a:	4a14      	ldr	r2, [pc, #80]	; (80049ac <MX_GPIO_Init+0x74>)
 800495c:	f043 0302 	orr.w	r3, r3, #2
 8004960:	6313      	str	r3, [r2, #48]	; 0x30
 8004962:	4b12      	ldr	r3, [pc, #72]	; (80049ac <MX_GPIO_Init+0x74>)
 8004964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	60bb      	str	r3, [r7, #8]
 800496c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800496e:	4b0f      	ldr	r3, [pc, #60]	; (80049ac <MX_GPIO_Init+0x74>)
 8004970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004972:	4a0e      	ldr	r2, [pc, #56]	; (80049ac <MX_GPIO_Init+0x74>)
 8004974:	f043 0304 	orr.w	r3, r3, #4
 8004978:	6313      	str	r3, [r2, #48]	; 0x30
 800497a:	4b0c      	ldr	r3, [pc, #48]	; (80049ac <MX_GPIO_Init+0x74>)
 800497c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497e:	f003 0304 	and.w	r3, r3, #4
 8004982:	607b      	str	r3, [r7, #4]
 8004984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004986:	4b09      	ldr	r3, [pc, #36]	; (80049ac <MX_GPIO_Init+0x74>)
 8004988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498a:	4a08      	ldr	r2, [pc, #32]	; (80049ac <MX_GPIO_Init+0x74>)
 800498c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004990:	6313      	str	r3, [r2, #48]	; 0x30
 8004992:	4b06      	ldr	r3, [pc, #24]	; (80049ac <MX_GPIO_Init+0x74>)
 8004994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800499a:	603b      	str	r3, [r7, #0]
 800499c:	683b      	ldr	r3, [r7, #0]

}
 800499e:	bf00      	nop
 80049a0:	3714      	adds	r7, #20
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	40023800 	.word	0x40023800

080049b0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
if(huart->Instance == USART1){
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a17      	ldr	r2, [pc, #92]	; (8004a1c <HAL_UART_RxCpltCallback+0x6c>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d128      	bne.n	8004a14 <HAL_UART_RxCpltCallback+0x64>

	  //HAL_UART_Receive_IT(&huart1, &character, 1);
	  text[counter] = character;
 80049c2:	4b17      	ldr	r3, [pc, #92]	; (8004a20 <HAL_UART_RxCpltCallback+0x70>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a17      	ldr	r2, [pc, #92]	; (8004a24 <HAL_UART_RxCpltCallback+0x74>)
 80049c8:	7811      	ldrb	r1, [r2, #0]
 80049ca:	4a17      	ldr	r2, [pc, #92]	; (8004a28 <HAL_UART_RxCpltCallback+0x78>)
 80049cc:	54d1      	strb	r1, [r2, r3]
	  text[counter + 1] = '\r';
 80049ce:	4b14      	ldr	r3, [pc, #80]	; (8004a20 <HAL_UART_RxCpltCallback+0x70>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	3301      	adds	r3, #1
 80049d4:	4a14      	ldr	r2, [pc, #80]	; (8004a28 <HAL_UART_RxCpltCallback+0x78>)
 80049d6:	210d      	movs	r1, #13
 80049d8:	54d1      	strb	r1, [r2, r3]
	  text[counter + 2] = '\0';
 80049da:	4b11      	ldr	r3, [pc, #68]	; (8004a20 <HAL_UART_RxCpltCallback+0x70>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	3302      	adds	r3, #2
 80049e0:	4a11      	ldr	r2, [pc, #68]	; (8004a28 <HAL_UART_RxCpltCallback+0x78>)
 80049e2:	2100      	movs	r1, #0
 80049e4:	54d1      	strb	r1, [r2, r3]
	  HAL_UART_Receive_IT(&huart1, &character, 1);
 80049e6:	2201      	movs	r2, #1
 80049e8:	490e      	ldr	r1, [pc, #56]	; (8004a24 <HAL_UART_RxCpltCallback+0x74>)
 80049ea:	4810      	ldr	r0, [pc, #64]	; (8004a2c <HAL_UART_RxCpltCallback+0x7c>)
 80049ec:	f7fd fc10 	bl	8002210 <HAL_UART_Receive_IT>
	  counter++;
 80049f0:	4b0b      	ldr	r3, [pc, #44]	; (8004a20 <HAL_UART_RxCpltCallback+0x70>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	3301      	adds	r3, #1
 80049f6:	4a0a      	ldr	r2, [pc, #40]	; (8004a20 <HAL_UART_RxCpltCallback+0x70>)
 80049f8:	6013      	str	r3, [r2, #0]
	  if(character == '\n'){
 80049fa:	4b0a      	ldr	r3, [pc, #40]	; (8004a24 <HAL_UART_RxCpltCallback+0x74>)
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	2b0a      	cmp	r3, #10
 8004a00:	d108      	bne.n	8004a14 <HAL_UART_RxCpltCallback+0x64>
		  osSignalSet(PrinterHandle, 1);
 8004a02:	4b0b      	ldr	r3, [pc, #44]	; (8004a30 <HAL_UART_RxCpltCallback+0x80>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2101      	movs	r1, #1
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7fe faf1 	bl	8002ff0 <osSignalSet>

		  //HAL_UART_Transmit_IT(&huart1, (uint16_t*) text, 100);
		  counter = 0;
 8004a0e:	4b04      	ldr	r3, [pc, #16]	; (8004a20 <HAL_UART_RxCpltCallback+0x70>)
 8004a10:	2200      	movs	r2, #0
 8004a12:	601a      	str	r2, [r3, #0]
		}


	}

	}
 8004a14:	bf00      	nop
 8004a16:	3708      	adds	r7, #8
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	40011000 	.word	0x40011000
 8004a20:	20003d74 	.word	0x20003d74
 8004a24:	20003d84 	.word	0x20003d84
 8004a28:	20003d88 	.word	0x20003d88
 8004a2c:	20003e88 	.word	0x20003e88
 8004a30:	20003d7c 	.word	0x20003d7c

08004a34 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8004a3c:	2001      	movs	r0, #1
 8004a3e:	f7fe fac3 	bl	8002fc8 <osDelay>
 8004a42:	e7fb      	b.n	8004a3c <StartDefaultTask+0x8>

08004a44 <StartPrinter>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPrinter */
void StartPrinter(void const * argument)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b086      	sub	sp, #24
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartPrinter */
  /* Infinite loop */
  for(;;)
  {
	  osSignalWait(1, osWaitForever);
 8004a4c:	463b      	mov	r3, r7
 8004a4e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a52:	2101      	movs	r1, #1
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7fe fb0b 	bl	8003070 <osSignalWait>
	  HAL_UART_Transmit(&huart1, &text, sizeof(text), 1000);
 8004a5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a5e:	22ff      	movs	r2, #255	; 0xff
 8004a60:	4904      	ldr	r1, [pc, #16]	; (8004a74 <StartPrinter+0x30>)
 8004a62:	4805      	ldr	r0, [pc, #20]	; (8004a78 <StartPrinter+0x34>)
 8004a64:	f7fd fb42 	bl	80020ec <HAL_UART_Transmit>



    osDelay(1000);
 8004a68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a6c:	f7fe faac 	bl	8002fc8 <osDelay>
	  osSignalWait(1, osWaitForever);
 8004a70:	e7ec      	b.n	8004a4c <StartPrinter+0x8>
 8004a72:	bf00      	nop
 8004a74:	20003d88 	.word	0x20003d88
 8004a78:	20003e88 	.word	0x20003e88

08004a7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a04      	ldr	r2, [pc, #16]	; (8004a9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d101      	bne.n	8004a92 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004a8e:	f7fb fd4d 	bl	800052c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004a92:	bf00      	nop
 8004a94:	3708      	adds	r7, #8
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	40002000 	.word	0x40002000

08004aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004aa4:	bf00      	nop
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
	...

08004ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004ab6:	4b11      	ldr	r3, [pc, #68]	; (8004afc <HAL_MspInit+0x4c>)
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aba:	4a10      	ldr	r2, [pc, #64]	; (8004afc <HAL_MspInit+0x4c>)
 8004abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ac2:	4b0e      	ldr	r3, [pc, #56]	; (8004afc <HAL_MspInit+0x4c>)
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aca:	607b      	str	r3, [r7, #4]
 8004acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ace:	4b0b      	ldr	r3, [pc, #44]	; (8004afc <HAL_MspInit+0x4c>)
 8004ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad2:	4a0a      	ldr	r2, [pc, #40]	; (8004afc <HAL_MspInit+0x4c>)
 8004ad4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8004ada:	4b08      	ldr	r3, [pc, #32]	; (8004afc <HAL_MspInit+0x4c>)
 8004adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ae2:	603b      	str	r3, [r7, #0]
 8004ae4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	210f      	movs	r1, #15
 8004aea:	f06f 0001 	mvn.w	r0, #1
 8004aee:	f7fb fdf5 	bl	80006dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004af2:	bf00      	nop
 8004af4:	3708      	adds	r7, #8
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	40023800 	.word	0x40023800

08004b00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b08a      	sub	sp, #40	; 0x28
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b08:	f107 0314 	add.w	r3, r7, #20
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	601a      	str	r2, [r3, #0]
 8004b10:	605a      	str	r2, [r3, #4]
 8004b12:	609a      	str	r2, [r3, #8]
 8004b14:	60da      	str	r2, [r3, #12]
 8004b16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a29      	ldr	r2, [pc, #164]	; (8004bc4 <HAL_UART_MspInit+0xc4>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d14c      	bne.n	8004bbc <HAL_UART_MspInit+0xbc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004b22:	4b29      	ldr	r3, [pc, #164]	; (8004bc8 <HAL_UART_MspInit+0xc8>)
 8004b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b26:	4a28      	ldr	r2, [pc, #160]	; (8004bc8 <HAL_UART_MspInit+0xc8>)
 8004b28:	f043 0310 	orr.w	r3, r3, #16
 8004b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8004b2e:	4b26      	ldr	r3, [pc, #152]	; (8004bc8 <HAL_UART_MspInit+0xc8>)
 8004b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b32:	f003 0310 	and.w	r3, r3, #16
 8004b36:	613b      	str	r3, [r7, #16]
 8004b38:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b3a:	4b23      	ldr	r3, [pc, #140]	; (8004bc8 <HAL_UART_MspInit+0xc8>)
 8004b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3e:	4a22      	ldr	r2, [pc, #136]	; (8004bc8 <HAL_UART_MspInit+0xc8>)
 8004b40:	f043 0302 	orr.w	r3, r3, #2
 8004b44:	6313      	str	r3, [r2, #48]	; 0x30
 8004b46:	4b20      	ldr	r3, [pc, #128]	; (8004bc8 <HAL_UART_MspInit+0xc8>)
 8004b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4a:	f003 0302 	and.w	r3, r3, #2
 8004b4e:	60fb      	str	r3, [r7, #12]
 8004b50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b52:	4b1d      	ldr	r3, [pc, #116]	; (8004bc8 <HAL_UART_MspInit+0xc8>)
 8004b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b56:	4a1c      	ldr	r2, [pc, #112]	; (8004bc8 <HAL_UART_MspInit+0xc8>)
 8004b58:	f043 0301 	orr.w	r3, r3, #1
 8004b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8004b5e:	4b1a      	ldr	r3, [pc, #104]	; (8004bc8 <HAL_UART_MspInit+0xc8>)
 8004b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	60bb      	str	r3, [r7, #8]
 8004b68:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004b6a:	2380      	movs	r3, #128	; 0x80
 8004b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b6e:	2302      	movs	r3, #2
 8004b70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b72:	2300      	movs	r3, #0
 8004b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b76:	2303      	movs	r3, #3
 8004b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004b7a:	2307      	movs	r3, #7
 8004b7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b7e:	f107 0314 	add.w	r3, r7, #20
 8004b82:	4619      	mov	r1, r3
 8004b84:	4811      	ldr	r0, [pc, #68]	; (8004bcc <HAL_UART_MspInit+0xcc>)
 8004b86:	f7fb fdf5 	bl	8000774 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004b8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b90:	2302      	movs	r3, #2
 8004b92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b94:	2300      	movs	r3, #0
 8004b96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004b9c:	2307      	movs	r3, #7
 8004b9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ba0:	f107 0314 	add.w	r3, r7, #20
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	480a      	ldr	r0, [pc, #40]	; (8004bd0 <HAL_UART_MspInit+0xd0>)
 8004ba8:	f7fb fde4 	bl	8000774 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 8004bac:	2200      	movs	r2, #0
 8004bae:	2106      	movs	r1, #6
 8004bb0:	2025      	movs	r0, #37	; 0x25
 8004bb2:	f7fb fd93 	bl	80006dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004bb6:	2025      	movs	r0, #37	; 0x25
 8004bb8:	f7fb fdac 	bl	8000714 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004bbc:	bf00      	nop
 8004bbe:	3728      	adds	r7, #40	; 0x28
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	40011000 	.word	0x40011000
 8004bc8:	40023800 	.word	0x40023800
 8004bcc:	40020400 	.word	0x40020400
 8004bd0:	40020000 	.word	0x40020000

08004bd4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b08c      	sub	sp, #48	; 0x30
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004be0:	2300      	movs	r3, #0
 8004be2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0); 
 8004be4:	2200      	movs	r2, #0
 8004be6:	6879      	ldr	r1, [r7, #4]
 8004be8:	202d      	movs	r0, #45	; 0x2d
 8004bea:	f7fb fd77 	bl	80006dc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn); 
 8004bee:	202d      	movs	r0, #45	; 0x2d
 8004bf0:	f7fb fd90 	bl	8000714 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8004bf4:	4b1f      	ldr	r3, [pc, #124]	; (8004c74 <HAL_InitTick+0xa0>)
 8004bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf8:	4a1e      	ldr	r2, [pc, #120]	; (8004c74 <HAL_InitTick+0xa0>)
 8004bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bfe:	6413      	str	r3, [r2, #64]	; 0x40
 8004c00:	4b1c      	ldr	r3, [pc, #112]	; (8004c74 <HAL_InitTick+0xa0>)
 8004c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c08:	60fb      	str	r3, [r7, #12]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004c0c:	f107 0210 	add.w	r2, r7, #16
 8004c10:	f107 0314 	add.w	r3, r7, #20
 8004c14:	4611      	mov	r1, r2
 8004c16:	4618      	mov	r0, r3
 8004c18:	f7fc fb94 	bl	8001344 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004c1c:	f7fc fb6a 	bl	80012f4 <HAL_RCC_GetPCLK1Freq>
 8004c20:	4603      	mov	r3, r0
 8004c22:	005b      	lsls	r3, r3, #1
 8004c24:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8004c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c28:	4a13      	ldr	r2, [pc, #76]	; (8004c78 <HAL_InitTick+0xa4>)
 8004c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2e:	0c9b      	lsrs	r3, r3, #18
 8004c30:	3b01      	subs	r3, #1
 8004c32:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8004c34:	4b11      	ldr	r3, [pc, #68]	; (8004c7c <HAL_InitTick+0xa8>)
 8004c36:	4a12      	ldr	r2, [pc, #72]	; (8004c80 <HAL_InitTick+0xac>)
 8004c38:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000 / 1000) - 1;
 8004c3a:	4b10      	ldr	r3, [pc, #64]	; (8004c7c <HAL_InitTick+0xa8>)
 8004c3c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004c40:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8004c42:	4a0e      	ldr	r2, [pc, #56]	; (8004c7c <HAL_InitTick+0xa8>)
 8004c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c46:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8004c48:	4b0c      	ldr	r3, [pc, #48]	; (8004c7c <HAL_InitTick+0xa8>)
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c4e:	4b0b      	ldr	r3, [pc, #44]	; (8004c7c <HAL_InitTick+0xa8>)
 8004c50:	2200      	movs	r2, #0
 8004c52:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8004c54:	4809      	ldr	r0, [pc, #36]	; (8004c7c <HAL_InitTick+0xa8>)
 8004c56:	f7fc ff95 	bl	8001b84 <HAL_TIM_Base_Init>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d104      	bne.n	8004c6a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8004c60:	4806      	ldr	r0, [pc, #24]	; (8004c7c <HAL_InitTick+0xa8>)
 8004c62:	f7fc ffc5 	bl	8001bf0 <HAL_TIM_Base_Start_IT>
 8004c66:	4603      	mov	r3, r0
 8004c68:	e000      	b.n	8004c6c <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3730      	adds	r7, #48	; 0x30
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	40023800 	.word	0x40023800
 8004c78:	431bde83 	.word	0x431bde83
 8004c7c:	20003f08 	.word	0x20003f08
 8004c80:	40002000 	.word	0x40002000

08004c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004c84:	b480      	push	{r7}
 8004c86:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004c88:	bf00      	nop
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr

08004c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004c92:	b480      	push	{r7}
 8004c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004c96:	e7fe      	b.n	8004c96 <HardFault_Handler+0x4>

08004c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004c9c:	e7fe      	b.n	8004c9c <MemManage_Handler+0x4>

08004c9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004ca2:	e7fe      	b.n	8004ca2 <BusFault_Handler+0x4>

08004ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ca8:	e7fe      	b.n	8004ca8 <UsageFault_Handler+0x4>

08004caa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004caa:	b480      	push	{r7}
 8004cac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004cae:	bf00      	nop
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004cbc:	4802      	ldr	r0, [pc, #8]	; (8004cc8 <USART1_IRQHandler+0x10>)
 8004cbe:	f7fd fb49 	bl	8002354 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004cc2:	bf00      	nop
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	20003e88 	.word	0x20003e88

08004ccc <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8004cd0:	4802      	ldr	r0, [pc, #8]	; (8004cdc <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8004cd2:	f7fc ffb7 	bl	8001c44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8004cd6:	bf00      	nop
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	20003f08 	.word	0x20003f08

08004ce0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004ce4:	4b15      	ldr	r3, [pc, #84]	; (8004d3c <SystemInit+0x5c>)
 8004ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cea:	4a14      	ldr	r2, [pc, #80]	; (8004d3c <SystemInit+0x5c>)
 8004cec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004cf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004cf4:	4b12      	ldr	r3, [pc, #72]	; (8004d40 <SystemInit+0x60>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a11      	ldr	r2, [pc, #68]	; (8004d40 <SystemInit+0x60>)
 8004cfa:	f043 0301 	orr.w	r3, r3, #1
 8004cfe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004d00:	4b0f      	ldr	r3, [pc, #60]	; (8004d40 <SystemInit+0x60>)
 8004d02:	2200      	movs	r2, #0
 8004d04:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004d06:	4b0e      	ldr	r3, [pc, #56]	; (8004d40 <SystemInit+0x60>)
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	490d      	ldr	r1, [pc, #52]	; (8004d40 <SystemInit+0x60>)
 8004d0c:	4b0d      	ldr	r3, [pc, #52]	; (8004d44 <SystemInit+0x64>)
 8004d0e:	4013      	ands	r3, r2
 8004d10:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004d12:	4b0b      	ldr	r3, [pc, #44]	; (8004d40 <SystemInit+0x60>)
 8004d14:	4a0c      	ldr	r2, [pc, #48]	; (8004d48 <SystemInit+0x68>)
 8004d16:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004d18:	4b09      	ldr	r3, [pc, #36]	; (8004d40 <SystemInit+0x60>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a08      	ldr	r2, [pc, #32]	; (8004d40 <SystemInit+0x60>)
 8004d1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d22:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004d24:	4b06      	ldr	r3, [pc, #24]	; (8004d40 <SystemInit+0x60>)
 8004d26:	2200      	movs	r2, #0
 8004d28:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004d2a:	4b04      	ldr	r3, [pc, #16]	; (8004d3c <SystemInit+0x5c>)
 8004d2c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004d30:	609a      	str	r2, [r3, #8]
#endif
}
 8004d32:	bf00      	nop
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr
 8004d3c:	e000ed00 	.word	0xe000ed00
 8004d40:	40023800 	.word	0x40023800
 8004d44:	fef6ffff 	.word	0xfef6ffff
 8004d48:	24003010 	.word	0x24003010

08004d4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004d4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004d84 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004d50:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004d52:	e003      	b.n	8004d5c <LoopCopyDataInit>

08004d54 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004d54:	4b0c      	ldr	r3, [pc, #48]	; (8004d88 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004d56:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004d58:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004d5a:	3104      	adds	r1, #4

08004d5c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004d5c:	480b      	ldr	r0, [pc, #44]	; (8004d8c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004d5e:	4b0c      	ldr	r3, [pc, #48]	; (8004d90 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004d60:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004d62:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004d64:	d3f6      	bcc.n	8004d54 <CopyDataInit>
  ldr  r2, =_sbss
 8004d66:	4a0b      	ldr	r2, [pc, #44]	; (8004d94 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004d68:	e002      	b.n	8004d70 <LoopFillZerobss>

08004d6a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004d6a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004d6c:	f842 3b04 	str.w	r3, [r2], #4

08004d70 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004d70:	4b09      	ldr	r3, [pc, #36]	; (8004d98 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004d72:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004d74:	d3f9      	bcc.n	8004d6a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004d76:	f7ff ffb3 	bl	8004ce0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004d7a:	f000 f811 	bl	8004da0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004d7e:	f7ff fce1 	bl	8004744 <main>
  bx  lr    
 8004d82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004d84:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8004d88:	08004e7c 	.word	0x08004e7c
  ldr  r0, =_sdata
 8004d8c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004d90:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8004d94:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8004d98:	20003f48 	.word	0x20003f48

08004d9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004d9c:	e7fe      	b.n	8004d9c <ADC_IRQHandler>
	...

08004da0 <__libc_init_array>:
 8004da0:	b570      	push	{r4, r5, r6, lr}
 8004da2:	4e0d      	ldr	r6, [pc, #52]	; (8004dd8 <__libc_init_array+0x38>)
 8004da4:	4c0d      	ldr	r4, [pc, #52]	; (8004ddc <__libc_init_array+0x3c>)
 8004da6:	1ba4      	subs	r4, r4, r6
 8004da8:	10a4      	asrs	r4, r4, #2
 8004daa:	2500      	movs	r5, #0
 8004dac:	42a5      	cmp	r5, r4
 8004dae:	d109      	bne.n	8004dc4 <__libc_init_array+0x24>
 8004db0:	4e0b      	ldr	r6, [pc, #44]	; (8004de0 <__libc_init_array+0x40>)
 8004db2:	4c0c      	ldr	r4, [pc, #48]	; (8004de4 <__libc_init_array+0x44>)
 8004db4:	f000 f820 	bl	8004df8 <_init>
 8004db8:	1ba4      	subs	r4, r4, r6
 8004dba:	10a4      	asrs	r4, r4, #2
 8004dbc:	2500      	movs	r5, #0
 8004dbe:	42a5      	cmp	r5, r4
 8004dc0:	d105      	bne.n	8004dce <__libc_init_array+0x2e>
 8004dc2:	bd70      	pop	{r4, r5, r6, pc}
 8004dc4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004dc8:	4798      	blx	r3
 8004dca:	3501      	adds	r5, #1
 8004dcc:	e7ee      	b.n	8004dac <__libc_init_array+0xc>
 8004dce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004dd2:	4798      	blx	r3
 8004dd4:	3501      	adds	r5, #1
 8004dd6:	e7f2      	b.n	8004dbe <__libc_init_array+0x1e>
 8004dd8:	08004e74 	.word	0x08004e74
 8004ddc:	08004e74 	.word	0x08004e74
 8004de0:	08004e74 	.word	0x08004e74
 8004de4:	08004e78 	.word	0x08004e78

08004de8 <memset>:
 8004de8:	4402      	add	r2, r0
 8004dea:	4603      	mov	r3, r0
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d100      	bne.n	8004df2 <memset+0xa>
 8004df0:	4770      	bx	lr
 8004df2:	f803 1b01 	strb.w	r1, [r3], #1
 8004df6:	e7f9      	b.n	8004dec <memset+0x4>

08004df8 <_init>:
 8004df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dfa:	bf00      	nop
 8004dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dfe:	bc08      	pop	{r3}
 8004e00:	469e      	mov	lr, r3
 8004e02:	4770      	bx	lr

08004e04 <_fini>:
 8004e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e06:	bf00      	nop
 8004e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e0a:	bc08      	pop	{r3}
 8004e0c:	469e      	mov	lr, r3
 8004e0e:	4770      	bx	lr
