
Digital_dynamo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029f8  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002bc0  08002bc0  00012bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bd8  08002bd8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002bd8  08002bd8  00012bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002be0  08002be0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002be0  08002be0  00012be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002be4  08002be4  00012be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002be8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  2000000c  08002bf4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08002bf4  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009844  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001536  00000000  00000000  00029880  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000988  00000000  00000000  0002adb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008d0  00000000  00000000  0002b740  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023884  00000000  00000000  0002c010  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007abd  00000000  00000000  0004f894  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e0356  00000000  00000000  00057351  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001376a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002750  00000000  00000000  00137724  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08002ba8 	.word	0x08002ba8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08002ba8 	.word	0x08002ba8

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b972 	b.w	8000504 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	4688      	mov	r8, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14b      	bne.n	80002de <__udivmoddi4+0xa6>
 8000246:	428a      	cmp	r2, r1
 8000248:	4615      	mov	r5, r2
 800024a:	d967      	bls.n	800031c <__udivmoddi4+0xe4>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0720 	rsb	r7, r2, #32
 8000256:	fa01 f302 	lsl.w	r3, r1, r2
 800025a:	fa20 f707 	lsr.w	r7, r0, r7
 800025e:	4095      	lsls	r5, r2
 8000260:	ea47 0803 	orr.w	r8, r7, r3
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000270:	fa1f fc85 	uxth.w	ip, r5
 8000274:	fb0e 8817 	mls	r8, lr, r7, r8
 8000278:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027c:	fb07 f10c 	mul.w	r1, r7, ip
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18eb      	adds	r3, r5, r3
 8000286:	f107 30ff 	add.w	r0, r7, #4294967295
 800028a:	f080 811b 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8118 	bls.w	80004c4 <__udivmoddi4+0x28c>
 8000294:	3f02      	subs	r7, #2
 8000296:	442b      	add	r3, r5
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ac:	45a4      	cmp	ip, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	192c      	adds	r4, r5, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x290>
 80002ba:	45a4      	cmp	ip, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x290>
 80002c0:	3802      	subs	r0, #2
 80002c2:	442c      	add	r4, r5
 80002c4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c8:	eba4 040c 	sub.w	r4, r4, ip
 80002cc:	2700      	movs	r7, #0
 80002ce:	b11e      	cbz	r6, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c6 4300 	strd	r4, r3, [r6]
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xbe>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80eb 	beq.w	80004be <__udivmoddi4+0x286>
 80002e8:	2700      	movs	r7, #0
 80002ea:	e9c6 0100 	strd	r0, r1, [r6]
 80002ee:	4638      	mov	r0, r7
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f783 	clz	r7, r3
 80002fa:	2f00      	cmp	r7, #0
 80002fc:	d147      	bne.n	800038e <__udivmoddi4+0x156>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd0>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80fa 	bhi.w	80004fc <__udivmoddi4+0x2c4>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4698      	mov	r8, r3
 8000312:	2e00      	cmp	r6, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000316:	e9c6 4800 	strd	r4, r8, [r6]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa0>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xe8>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 808f 	bne.w	8000448 <__udivmoddi4+0x210>
 800032a:	1b49      	subs	r1, r1, r5
 800032c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000330:	fa1f f885 	uxth.w	r8, r5
 8000334:	2701      	movs	r7, #1
 8000336:	fbb1 fcfe 	udiv	ip, r1, lr
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000340:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000344:	fb08 f10c 	mul.w	r1, r8, ip
 8000348:	4299      	cmp	r1, r3
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x124>
 800034c:	18eb      	adds	r3, r5, r3
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4299      	cmp	r1, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 800035a:	4684      	mov	ip, r0
 800035c:	1a59      	subs	r1, r3, r1
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1410 	mls	r4, lr, r0, r1
 8000368:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x14c>
 8000374:	192c      	adds	r4, r5, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x14a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80b6 	bhi.w	80004ee <__udivmoddi4+0x2b6>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e79f      	b.n	80002ce <__udivmoddi4+0x96>
 800038e:	f1c7 0c20 	rsb	ip, r7, #32
 8000392:	40bb      	lsls	r3, r7
 8000394:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000398:	ea4e 0e03 	orr.w	lr, lr, r3
 800039c:	fa01 f407 	lsl.w	r4, r1, r7
 80003a0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003ac:	4325      	orrs	r5, r4
 80003ae:	fbb3 f9f8 	udiv	r9, r3, r8
 80003b2:	0c2c      	lsrs	r4, r5, #16
 80003b4:	fb08 3319 	mls	r3, r8, r9, r3
 80003b8:	fa1f fa8e 	uxth.w	sl, lr
 80003bc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c0:	fb09 f40a 	mul.w	r4, r9, sl
 80003c4:	429c      	cmp	r4, r3
 80003c6:	fa02 f207 	lsl.w	r2, r2, r7
 80003ca:	fa00 f107 	lsl.w	r1, r0, r7
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1e 0303 	adds.w	r3, lr, r3
 80003d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d8:	f080 8087 	bcs.w	80004ea <__udivmoddi4+0x2b2>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f240 8084 	bls.w	80004ea <__udivmoddi4+0x2b2>
 80003e2:	f1a9 0902 	sub.w	r9, r9, #2
 80003e6:	4473      	add	r3, lr
 80003e8:	1b1b      	subs	r3, r3, r4
 80003ea:	b2ad      	uxth	r5, r5
 80003ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f0:	fb08 3310 	mls	r3, r8, r0, r3
 80003f4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003fc:	45a2      	cmp	sl, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1e 0404 	adds.w	r4, lr, r4
 8000404:	f100 33ff 	add.w	r3, r0, #4294967295
 8000408:	d26b      	bcs.n	80004e2 <__udivmoddi4+0x2aa>
 800040a:	45a2      	cmp	sl, r4
 800040c:	d969      	bls.n	80004e2 <__udivmoddi4+0x2aa>
 800040e:	3802      	subs	r0, #2
 8000410:	4474      	add	r4, lr
 8000412:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000416:	fba0 8902 	umull	r8, r9, r0, r2
 800041a:	eba4 040a 	sub.w	r4, r4, sl
 800041e:	454c      	cmp	r4, r9
 8000420:	46c2      	mov	sl, r8
 8000422:	464b      	mov	r3, r9
 8000424:	d354      	bcc.n	80004d0 <__udivmoddi4+0x298>
 8000426:	d051      	beq.n	80004cc <__udivmoddi4+0x294>
 8000428:	2e00      	cmp	r6, #0
 800042a:	d069      	beq.n	8000500 <__udivmoddi4+0x2c8>
 800042c:	ebb1 050a 	subs.w	r5, r1, sl
 8000430:	eb64 0403 	sbc.w	r4, r4, r3
 8000434:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000438:	40fd      	lsrs	r5, r7
 800043a:	40fc      	lsrs	r4, r7
 800043c:	ea4c 0505 	orr.w	r5, ip, r5
 8000440:	e9c6 5400 	strd	r5, r4, [r6]
 8000444:	2700      	movs	r7, #0
 8000446:	e747      	b.n	80002d8 <__udivmoddi4+0xa0>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f703 	lsr.w	r7, r0, r3
 8000450:	4095      	lsls	r5, r2
 8000452:	fa01 f002 	lsl.w	r0, r1, r2
 8000456:	fa21 f303 	lsr.w	r3, r1, r3
 800045a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045e:	4338      	orrs	r0, r7
 8000460:	0c01      	lsrs	r1, r0, #16
 8000462:	fbb3 f7fe 	udiv	r7, r3, lr
 8000466:	fa1f f885 	uxth.w	r8, r5
 800046a:	fb0e 3317 	mls	r3, lr, r7, r3
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb07 f308 	mul.w	r3, r7, r8
 8000476:	428b      	cmp	r3, r1
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x256>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f107 3cff 	add.w	ip, r7, #4294967295
 8000484:	d22f      	bcs.n	80004e6 <__udivmoddi4+0x2ae>
 8000486:	428b      	cmp	r3, r1
 8000488:	d92d      	bls.n	80004e6 <__udivmoddi4+0x2ae>
 800048a:	3f02      	subs	r7, #2
 800048c:	4429      	add	r1, r5
 800048e:	1acb      	subs	r3, r1, r3
 8000490:	b281      	uxth	r1, r0
 8000492:	fbb3 f0fe 	udiv	r0, r3, lr
 8000496:	fb0e 3310 	mls	r3, lr, r0, r3
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb00 f308 	mul.w	r3, r0, r8
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x27e>
 80004a6:	1869      	adds	r1, r5, r1
 80004a8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ac:	d217      	bcs.n	80004de <__udivmoddi4+0x2a6>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d915      	bls.n	80004de <__udivmoddi4+0x2a6>
 80004b2:	3802      	subs	r0, #2
 80004b4:	4429      	add	r1, r5
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004bc:	e73b      	b.n	8000336 <__udivmoddi4+0xfe>
 80004be:	4637      	mov	r7, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e709      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c4:	4607      	mov	r7, r0
 80004c6:	e6e7      	b.n	8000298 <__udivmoddi4+0x60>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004cc:	4541      	cmp	r1, r8
 80004ce:	d2ab      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d4:	eb69 020e 	sbc.w	r2, r9, lr
 80004d8:	3801      	subs	r0, #1
 80004da:	4613      	mov	r3, r2
 80004dc:	e7a4      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004de:	4660      	mov	r0, ip
 80004e0:	e7e9      	b.n	80004b6 <__udivmoddi4+0x27e>
 80004e2:	4618      	mov	r0, r3
 80004e4:	e795      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e6:	4667      	mov	r7, ip
 80004e8:	e7d1      	b.n	800048e <__udivmoddi4+0x256>
 80004ea:	4681      	mov	r9, r0
 80004ec:	e77c      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004ee:	3802      	subs	r0, #2
 80004f0:	442c      	add	r4, r5
 80004f2:	e747      	b.n	8000384 <__udivmoddi4+0x14c>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	442b      	add	r3, r5
 80004fa:	e72f      	b.n	800035c <__udivmoddi4+0x124>
 80004fc:	4638      	mov	r0, r7
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xda>
 8000500:	4637      	mov	r7, r6
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0xa0>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800050c:	2003      	movs	r0, #3
 800050e:	f000 f8f8 	bl	8000702 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000512:	2000      	movs	r0, #0
 8000514:	f002 fa24 	bl	8002960 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000518:	f002 f9a6 	bl	8002868 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800051c:	2300      	movs	r3, #0
}
 800051e:	4618      	mov	r0, r3
 8000520:	bd80      	pop	{r7, pc}
	...

08000524 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000528:	4b06      	ldr	r3, [pc, #24]	; (8000544 <HAL_IncTick+0x20>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	461a      	mov	r2, r3
 800052e:	4b06      	ldr	r3, [pc, #24]	; (8000548 <HAL_IncTick+0x24>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4413      	add	r3, r2
 8000534:	4a04      	ldr	r2, [pc, #16]	; (8000548 <HAL_IncTick+0x24>)
 8000536:	6013      	str	r3, [r2, #0]
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20000000 	.word	0x20000000
 8000548:	20000028 	.word	0x20000028

0800054c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  return uwTick;
 8000550:	4b03      	ldr	r3, [pc, #12]	; (8000560 <HAL_GetTick+0x14>)
 8000552:	681b      	ldr	r3, [r3, #0]
}
 8000554:	4618      	mov	r0, r3
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	20000028 	.word	0x20000028

08000564 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800056c:	f7ff ffee 	bl	800054c <HAL_GetTick>
 8000570:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800057c:	d005      	beq.n	800058a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800057e:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <HAL_Delay+0x40>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	461a      	mov	r2, r3
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	4413      	add	r3, r2
 8000588:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800058a:	bf00      	nop
 800058c:	f7ff ffde 	bl	800054c <HAL_GetTick>
 8000590:	4602      	mov	r2, r0
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	1ad3      	subs	r3, r2, r3
 8000596:	68fa      	ldr	r2, [r7, #12]
 8000598:	429a      	cmp	r2, r3
 800059a:	d8f7      	bhi.n	800058c <HAL_Delay+0x28>
  {
  }
}
 800059c:	bf00      	nop
 800059e:	3710      	adds	r7, #16
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000000 	.word	0x20000000

080005a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b085      	sub	sp, #20
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	f003 0307 	and.w	r3, r3, #7
 80005b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005b8:	4b0b      	ldr	r3, [pc, #44]	; (80005e8 <__NVIC_SetPriorityGrouping+0x40>)
 80005ba:	68db      	ldr	r3, [r3, #12]
 80005bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005be:	68ba      	ldr	r2, [r7, #8]
 80005c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005c4:	4013      	ands	r3, r2
 80005c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80005d0:	4b06      	ldr	r3, [pc, #24]	; (80005ec <__NVIC_SetPriorityGrouping+0x44>)
 80005d2:	4313      	orrs	r3, r2
 80005d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005d6:	4a04      	ldr	r2, [pc, #16]	; (80005e8 <__NVIC_SetPriorityGrouping+0x40>)
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	60d3      	str	r3, [r2, #12]
}
 80005dc:	bf00      	nop
 80005de:	3714      	adds	r7, #20
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr
 80005e8:	e000ed00 	.word	0xe000ed00
 80005ec:	05fa0000 	.word	0x05fa0000

080005f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005f4:	4b04      	ldr	r3, [pc, #16]	; (8000608 <__NVIC_GetPriorityGrouping+0x18>)
 80005f6:	68db      	ldr	r3, [r3, #12]
 80005f8:	0a1b      	lsrs	r3, r3, #8
 80005fa:	f003 0307 	and.w	r3, r3, #7
}
 80005fe:	4618      	mov	r0, r3
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr
 8000608:	e000ed00 	.word	0xe000ed00

0800060c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061a:	2b00      	cmp	r3, #0
 800061c:	db0b      	blt.n	8000636 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	f003 021f 	and.w	r2, r3, #31
 8000624:	4907      	ldr	r1, [pc, #28]	; (8000644 <__NVIC_EnableIRQ+0x38>)
 8000626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062a:	095b      	lsrs	r3, r3, #5
 800062c:	2001      	movs	r0, #1
 800062e:	fa00 f202 	lsl.w	r2, r0, r2
 8000632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000636:	bf00      	nop
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	e000e100 	.word	0xe000e100

08000648 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	6039      	str	r1, [r7, #0]
 8000652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000658:	2b00      	cmp	r3, #0
 800065a:	db0a      	blt.n	8000672 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	b2da      	uxtb	r2, r3
 8000660:	490c      	ldr	r1, [pc, #48]	; (8000694 <__NVIC_SetPriority+0x4c>)
 8000662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000666:	0112      	lsls	r2, r2, #4
 8000668:	b2d2      	uxtb	r2, r2
 800066a:	440b      	add	r3, r1
 800066c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000670:	e00a      	b.n	8000688 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	b2da      	uxtb	r2, r3
 8000676:	4908      	ldr	r1, [pc, #32]	; (8000698 <__NVIC_SetPriority+0x50>)
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	f003 030f 	and.w	r3, r3, #15
 800067e:	3b04      	subs	r3, #4
 8000680:	0112      	lsls	r2, r2, #4
 8000682:	b2d2      	uxtb	r2, r2
 8000684:	440b      	add	r3, r1
 8000686:	761a      	strb	r2, [r3, #24]
}
 8000688:	bf00      	nop
 800068a:	370c      	adds	r7, #12
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr
 8000694:	e000e100 	.word	0xe000e100
 8000698:	e000ed00 	.word	0xe000ed00

0800069c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800069c:	b480      	push	{r7}
 800069e:	b089      	sub	sp, #36	; 0x24
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	60f8      	str	r0, [r7, #12]
 80006a4:	60b9      	str	r1, [r7, #8]
 80006a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	f003 0307 	and.w	r3, r3, #7
 80006ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006b0:	69fb      	ldr	r3, [r7, #28]
 80006b2:	f1c3 0307 	rsb	r3, r3, #7
 80006b6:	2b04      	cmp	r3, #4
 80006b8:	bf28      	it	cs
 80006ba:	2304      	movcs	r3, #4
 80006bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006be:	69fb      	ldr	r3, [r7, #28]
 80006c0:	3304      	adds	r3, #4
 80006c2:	2b06      	cmp	r3, #6
 80006c4:	d902      	bls.n	80006cc <NVIC_EncodePriority+0x30>
 80006c6:	69fb      	ldr	r3, [r7, #28]
 80006c8:	3b03      	subs	r3, #3
 80006ca:	e000      	b.n	80006ce <NVIC_EncodePriority+0x32>
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d0:	f04f 32ff 	mov.w	r2, #4294967295
 80006d4:	69bb      	ldr	r3, [r7, #24]
 80006d6:	fa02 f303 	lsl.w	r3, r2, r3
 80006da:	43da      	mvns	r2, r3
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	401a      	ands	r2, r3
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006e4:	f04f 31ff 	mov.w	r1, #4294967295
 80006e8:	697b      	ldr	r3, [r7, #20]
 80006ea:	fa01 f303 	lsl.w	r3, r1, r3
 80006ee:	43d9      	mvns	r1, r3
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f4:	4313      	orrs	r3, r2
         );
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3724      	adds	r7, #36	; 0x24
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr

08000702 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000702:	b580      	push	{r7, lr}
 8000704:	b082      	sub	sp, #8
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800070a:	6878      	ldr	r0, [r7, #4]
 800070c:	f7ff ff4c 	bl	80005a8 <__NVIC_SetPriorityGrouping>
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000718:	b580      	push	{r7, lr}
 800071a:	b086      	sub	sp, #24
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	60b9      	str	r1, [r7, #8]
 8000722:	607a      	str	r2, [r7, #4]
 8000724:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000726:	2300      	movs	r3, #0
 8000728:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800072a:	f7ff ff61 	bl	80005f0 <__NVIC_GetPriorityGrouping>
 800072e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	68b9      	ldr	r1, [r7, #8]
 8000734:	6978      	ldr	r0, [r7, #20]
 8000736:	f7ff ffb1 	bl	800069c <NVIC_EncodePriority>
 800073a:	4602      	mov	r2, r0
 800073c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000740:	4611      	mov	r1, r2
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff ff80 	bl	8000648 <__NVIC_SetPriority>
}
 8000748:	bf00      	nop
 800074a:	3718      	adds	r7, #24
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800075a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff ff54 	bl	800060c <__NVIC_EnableIRQ>
}
 8000764:	bf00      	nop
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800076c:	b480      	push	{r7}
 800076e:	b089      	sub	sp, #36	; 0x24
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000776:	2300      	movs	r3, #0
 8000778:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800077e:	2300      	movs	r3, #0
 8000780:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000782:	2300      	movs	r3, #0
 8000784:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000786:	2300      	movs	r3, #0
 8000788:	61fb      	str	r3, [r7, #28]
 800078a:	e175      	b.n	8000a78 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800078c:	2201      	movs	r2, #1
 800078e:	69fb      	ldr	r3, [r7, #28]
 8000790:	fa02 f303 	lsl.w	r3, r2, r3
 8000794:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	697a      	ldr	r2, [r7, #20]
 800079c:	4013      	ands	r3, r2
 800079e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80007a0:	693a      	ldr	r2, [r7, #16]
 80007a2:	697b      	ldr	r3, [r7, #20]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	f040 8164 	bne.w	8000a72 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	685b      	ldr	r3, [r3, #4]
 80007ae:	2b02      	cmp	r3, #2
 80007b0:	d003      	beq.n	80007ba <HAL_GPIO_Init+0x4e>
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	2b12      	cmp	r3, #18
 80007b8:	d123      	bne.n	8000802 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	08da      	lsrs	r2, r3, #3
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	3208      	adds	r2, #8
 80007c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80007c8:	69fb      	ldr	r3, [r7, #28]
 80007ca:	f003 0307 	and.w	r3, r3, #7
 80007ce:	009b      	lsls	r3, r3, #2
 80007d0:	220f      	movs	r2, #15
 80007d2:	fa02 f303 	lsl.w	r3, r2, r3
 80007d6:	43db      	mvns	r3, r3
 80007d8:	69ba      	ldr	r2, [r7, #24]
 80007da:	4013      	ands	r3, r2
 80007dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	691a      	ldr	r2, [r3, #16]
 80007e2:	69fb      	ldr	r3, [r7, #28]
 80007e4:	f003 0307 	and.w	r3, r3, #7
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	fa02 f303 	lsl.w	r3, r2, r3
 80007ee:	69ba      	ldr	r2, [r7, #24]
 80007f0:	4313      	orrs	r3, r2
 80007f2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80007f4:	69fb      	ldr	r3, [r7, #28]
 80007f6:	08da      	lsrs	r2, r3, #3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	3208      	adds	r2, #8
 80007fc:	69b9      	ldr	r1, [r7, #24]
 80007fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000808:	69fb      	ldr	r3, [r7, #28]
 800080a:	005b      	lsls	r3, r3, #1
 800080c:	2203      	movs	r2, #3
 800080e:	fa02 f303 	lsl.w	r3, r2, r3
 8000812:	43db      	mvns	r3, r3
 8000814:	69ba      	ldr	r2, [r7, #24]
 8000816:	4013      	ands	r3, r2
 8000818:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	f003 0203 	and.w	r2, r3, #3
 8000822:	69fb      	ldr	r3, [r7, #28]
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	fa02 f303 	lsl.w	r3, r2, r3
 800082a:	69ba      	ldr	r2, [r7, #24]
 800082c:	4313      	orrs	r3, r2
 800082e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	69ba      	ldr	r2, [r7, #24]
 8000834:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	2b01      	cmp	r3, #1
 800083c:	d00b      	beq.n	8000856 <HAL_GPIO_Init+0xea>
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	2b02      	cmp	r3, #2
 8000844:	d007      	beq.n	8000856 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800084a:	2b11      	cmp	r3, #17
 800084c:	d003      	beq.n	8000856 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	2b12      	cmp	r3, #18
 8000854:	d130      	bne.n	80008b8 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	689b      	ldr	r3, [r3, #8]
 800085a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800085c:	69fb      	ldr	r3, [r7, #28]
 800085e:	005b      	lsls	r3, r3, #1
 8000860:	2203      	movs	r2, #3
 8000862:	fa02 f303 	lsl.w	r3, r2, r3
 8000866:	43db      	mvns	r3, r3
 8000868:	69ba      	ldr	r2, [r7, #24]
 800086a:	4013      	ands	r3, r2
 800086c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	68da      	ldr	r2, [r3, #12]
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	005b      	lsls	r3, r3, #1
 8000876:	fa02 f303 	lsl.w	r3, r2, r3
 800087a:	69ba      	ldr	r2, [r7, #24]
 800087c:	4313      	orrs	r3, r2
 800087e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	69ba      	ldr	r2, [r7, #24]
 8000884:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800088c:	2201      	movs	r2, #1
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	fa02 f303 	lsl.w	r3, r2, r3
 8000894:	43db      	mvns	r3, r3
 8000896:	69ba      	ldr	r2, [r7, #24]
 8000898:	4013      	ands	r3, r2
 800089a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	091b      	lsrs	r3, r3, #4
 80008a2:	f003 0201 	and.w	r2, r3, #1
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ac:	69ba      	ldr	r2, [r7, #24]
 80008ae:	4313      	orrs	r3, r2
 80008b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	69ba      	ldr	r2, [r7, #24]
 80008b6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	2203      	movs	r2, #3
 80008c4:	fa02 f303 	lsl.w	r3, r2, r3
 80008c8:	43db      	mvns	r3, r3
 80008ca:	69ba      	ldr	r2, [r7, #24]
 80008cc:	4013      	ands	r3, r2
 80008ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	689a      	ldr	r2, [r3, #8]
 80008d4:	69fb      	ldr	r3, [r7, #28]
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	fa02 f303 	lsl.w	r3, r2, r3
 80008dc:	69ba      	ldr	r2, [r7, #24]
 80008de:	4313      	orrs	r3, r2
 80008e0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	69ba      	ldr	r2, [r7, #24]
 80008e6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	f000 80be 	beq.w	8000a72 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f6:	4b65      	ldr	r3, [pc, #404]	; (8000a8c <HAL_GPIO_Init+0x320>)
 80008f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fa:	4a64      	ldr	r2, [pc, #400]	; (8000a8c <HAL_GPIO_Init+0x320>)
 80008fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000900:	6453      	str	r3, [r2, #68]	; 0x44
 8000902:	4b62      	ldr	r3, [pc, #392]	; (8000a8c <HAL_GPIO_Init+0x320>)
 8000904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800090e:	4a60      	ldr	r2, [pc, #384]	; (8000a90 <HAL_GPIO_Init+0x324>)
 8000910:	69fb      	ldr	r3, [r7, #28]
 8000912:	089b      	lsrs	r3, r3, #2
 8000914:	3302      	adds	r3, #2
 8000916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800091a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800091c:	69fb      	ldr	r3, [r7, #28]
 800091e:	f003 0303 	and.w	r3, r3, #3
 8000922:	009b      	lsls	r3, r3, #2
 8000924:	220f      	movs	r2, #15
 8000926:	fa02 f303 	lsl.w	r3, r2, r3
 800092a:	43db      	mvns	r3, r3
 800092c:	69ba      	ldr	r2, [r7, #24]
 800092e:	4013      	ands	r3, r2
 8000930:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4a57      	ldr	r2, [pc, #348]	; (8000a94 <HAL_GPIO_Init+0x328>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d037      	beq.n	80009aa <HAL_GPIO_Init+0x23e>
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4a56      	ldr	r2, [pc, #344]	; (8000a98 <HAL_GPIO_Init+0x32c>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d031      	beq.n	80009a6 <HAL_GPIO_Init+0x23a>
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4a55      	ldr	r2, [pc, #340]	; (8000a9c <HAL_GPIO_Init+0x330>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d02b      	beq.n	80009a2 <HAL_GPIO_Init+0x236>
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4a54      	ldr	r2, [pc, #336]	; (8000aa0 <HAL_GPIO_Init+0x334>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d025      	beq.n	800099e <HAL_GPIO_Init+0x232>
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4a53      	ldr	r2, [pc, #332]	; (8000aa4 <HAL_GPIO_Init+0x338>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d01f      	beq.n	800099a <HAL_GPIO_Init+0x22e>
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4a52      	ldr	r2, [pc, #328]	; (8000aa8 <HAL_GPIO_Init+0x33c>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d019      	beq.n	8000996 <HAL_GPIO_Init+0x22a>
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4a51      	ldr	r2, [pc, #324]	; (8000aac <HAL_GPIO_Init+0x340>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d013      	beq.n	8000992 <HAL_GPIO_Init+0x226>
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4a50      	ldr	r2, [pc, #320]	; (8000ab0 <HAL_GPIO_Init+0x344>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d00d      	beq.n	800098e <HAL_GPIO_Init+0x222>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4a4f      	ldr	r2, [pc, #316]	; (8000ab4 <HAL_GPIO_Init+0x348>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d007      	beq.n	800098a <HAL_GPIO_Init+0x21e>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4a4e      	ldr	r2, [pc, #312]	; (8000ab8 <HAL_GPIO_Init+0x34c>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d101      	bne.n	8000986 <HAL_GPIO_Init+0x21a>
 8000982:	2309      	movs	r3, #9
 8000984:	e012      	b.n	80009ac <HAL_GPIO_Init+0x240>
 8000986:	230a      	movs	r3, #10
 8000988:	e010      	b.n	80009ac <HAL_GPIO_Init+0x240>
 800098a:	2308      	movs	r3, #8
 800098c:	e00e      	b.n	80009ac <HAL_GPIO_Init+0x240>
 800098e:	2307      	movs	r3, #7
 8000990:	e00c      	b.n	80009ac <HAL_GPIO_Init+0x240>
 8000992:	2306      	movs	r3, #6
 8000994:	e00a      	b.n	80009ac <HAL_GPIO_Init+0x240>
 8000996:	2305      	movs	r3, #5
 8000998:	e008      	b.n	80009ac <HAL_GPIO_Init+0x240>
 800099a:	2304      	movs	r3, #4
 800099c:	e006      	b.n	80009ac <HAL_GPIO_Init+0x240>
 800099e:	2303      	movs	r3, #3
 80009a0:	e004      	b.n	80009ac <HAL_GPIO_Init+0x240>
 80009a2:	2302      	movs	r3, #2
 80009a4:	e002      	b.n	80009ac <HAL_GPIO_Init+0x240>
 80009a6:	2301      	movs	r3, #1
 80009a8:	e000      	b.n	80009ac <HAL_GPIO_Init+0x240>
 80009aa:	2300      	movs	r3, #0
 80009ac:	69fa      	ldr	r2, [r7, #28]
 80009ae:	f002 0203 	and.w	r2, r2, #3
 80009b2:	0092      	lsls	r2, r2, #2
 80009b4:	4093      	lsls	r3, r2
 80009b6:	69ba      	ldr	r2, [r7, #24]
 80009b8:	4313      	orrs	r3, r2
 80009ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80009bc:	4934      	ldr	r1, [pc, #208]	; (8000a90 <HAL_GPIO_Init+0x324>)
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	089b      	lsrs	r3, r3, #2
 80009c2:	3302      	adds	r3, #2
 80009c4:	69ba      	ldr	r2, [r7, #24]
 80009c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009ca:	4b3c      	ldr	r3, [pc, #240]	; (8000abc <HAL_GPIO_Init+0x350>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009d0:	693b      	ldr	r3, [r7, #16]
 80009d2:	43db      	mvns	r3, r3
 80009d4:	69ba      	ldr	r2, [r7, #24]
 80009d6:	4013      	ands	r3, r2
 80009d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d003      	beq.n	80009ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80009e6:	69ba      	ldr	r2, [r7, #24]
 80009e8:	693b      	ldr	r3, [r7, #16]
 80009ea:	4313      	orrs	r3, r2
 80009ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80009ee:	4a33      	ldr	r2, [pc, #204]	; (8000abc <HAL_GPIO_Init+0x350>)
 80009f0:	69bb      	ldr	r3, [r7, #24]
 80009f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80009f4:	4b31      	ldr	r3, [pc, #196]	; (8000abc <HAL_GPIO_Init+0x350>)
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009fa:	693b      	ldr	r3, [r7, #16]
 80009fc:	43db      	mvns	r3, r3
 80009fe:	69ba      	ldr	r2, [r7, #24]
 8000a00:	4013      	ands	r3, r2
 8000a02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d003      	beq.n	8000a18 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000a10:	69ba      	ldr	r2, [r7, #24]
 8000a12:	693b      	ldr	r3, [r7, #16]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a18:	4a28      	ldr	r2, [pc, #160]	; (8000abc <HAL_GPIO_Init+0x350>)
 8000a1a:	69bb      	ldr	r3, [r7, #24]
 8000a1c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a1e:	4b27      	ldr	r3, [pc, #156]	; (8000abc <HAL_GPIO_Init+0x350>)
 8000a20:	689b      	ldr	r3, [r3, #8]
 8000a22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a24:	693b      	ldr	r3, [r7, #16]
 8000a26:	43db      	mvns	r3, r3
 8000a28:	69ba      	ldr	r2, [r7, #24]
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d003      	beq.n	8000a42 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000a3a:	69ba      	ldr	r2, [r7, #24]
 8000a3c:	693b      	ldr	r3, [r7, #16]
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a42:	4a1e      	ldr	r2, [pc, #120]	; (8000abc <HAL_GPIO_Init+0x350>)
 8000a44:	69bb      	ldr	r3, [r7, #24]
 8000a46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a48:	4b1c      	ldr	r3, [pc, #112]	; (8000abc <HAL_GPIO_Init+0x350>)
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a4e:	693b      	ldr	r3, [r7, #16]
 8000a50:	43db      	mvns	r3, r3
 8000a52:	69ba      	ldr	r2, [r7, #24]
 8000a54:	4013      	ands	r3, r2
 8000a56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d003      	beq.n	8000a6c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000a64:	69ba      	ldr	r2, [r7, #24]
 8000a66:	693b      	ldr	r3, [r7, #16]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000a6c:	4a13      	ldr	r2, [pc, #76]	; (8000abc <HAL_GPIO_Init+0x350>)
 8000a6e:	69bb      	ldr	r3, [r7, #24]
 8000a70:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	3301      	adds	r3, #1
 8000a76:	61fb      	str	r3, [r7, #28]
 8000a78:	69fb      	ldr	r3, [r7, #28]
 8000a7a:	2b0f      	cmp	r3, #15
 8000a7c:	f67f ae86 	bls.w	800078c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000a80:	bf00      	nop
 8000a82:	3724      	adds	r7, #36	; 0x24
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40013800 	.word	0x40013800
 8000a94:	40020000 	.word	0x40020000
 8000a98:	40020400 	.word	0x40020400
 8000a9c:	40020800 	.word	0x40020800
 8000aa0:	40020c00 	.word	0x40020c00
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	40021400 	.word	0x40021400
 8000aac:	40021800 	.word	0x40021800
 8000ab0:	40021c00 	.word	0x40021c00
 8000ab4:	40022000 	.word	0x40022000
 8000ab8:	40022400 	.word	0x40022400
 8000abc:	40013c00 	.word	0x40013c00

08000ac0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000aca:	4b08      	ldr	r3, [pc, #32]	; (8000aec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000acc:	695a      	ldr	r2, [r3, #20]
 8000ace:	88fb      	ldrh	r3, [r7, #6]
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d006      	beq.n	8000ae4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000ad6:	4a05      	ldr	r2, [pc, #20]	; (8000aec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ad8:	88fb      	ldrh	r3, [r7, #6]
 8000ada:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000adc:	88fb      	ldrh	r3, [r7, #6]
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f001 fe96 	bl	8002810 <HAL_GPIO_EXTI_Callback>
  }
}
 8000ae4:	bf00      	nop
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40013c00 	.word	0x40013c00

08000af0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8000af8:	2300      	movs	r3, #0
 8000afa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d101      	bne.n	8000b06 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
 8000b04:	e25c      	b.n	8000fc0 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	f000 8087 	beq.w	8000c22 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b14:	4b96      	ldr	r3, [pc, #600]	; (8000d70 <HAL_RCC_OscConfig+0x280>)
 8000b16:	689b      	ldr	r3, [r3, #8]
 8000b18:	f003 030c 	and.w	r3, r3, #12
 8000b1c:	2b04      	cmp	r3, #4
 8000b1e:	d00c      	beq.n	8000b3a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b20:	4b93      	ldr	r3, [pc, #588]	; (8000d70 <HAL_RCC_OscConfig+0x280>)
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	f003 030c 	and.w	r3, r3, #12
 8000b28:	2b08      	cmp	r3, #8
 8000b2a:	d112      	bne.n	8000b52 <HAL_RCC_OscConfig+0x62>
 8000b2c:	4b90      	ldr	r3, [pc, #576]	; (8000d70 <HAL_RCC_OscConfig+0x280>)
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000b38:	d10b      	bne.n	8000b52 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b3a:	4b8d      	ldr	r3, [pc, #564]	; (8000d70 <HAL_RCC_OscConfig+0x280>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d06c      	beq.n	8000c20 <HAL_RCC_OscConfig+0x130>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d168      	bne.n	8000c20 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e236      	b.n	8000fc0 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b5a:	d106      	bne.n	8000b6a <HAL_RCC_OscConfig+0x7a>
 8000b5c:	4b84      	ldr	r3, [pc, #528]	; (8000d70 <HAL_RCC_OscConfig+0x280>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a83      	ldr	r2, [pc, #524]	; (8000d70 <HAL_RCC_OscConfig+0x280>)
 8000b62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b66:	6013      	str	r3, [r2, #0]
 8000b68:	e02e      	b.n	8000bc8 <HAL_RCC_OscConfig+0xd8>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d10c      	bne.n	8000b8c <HAL_RCC_OscConfig+0x9c>
 8000b72:	4b7f      	ldr	r3, [pc, #508]	; (8000d70 <HAL_RCC_OscConfig+0x280>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a7e      	ldr	r2, [pc, #504]	; (8000d70 <HAL_RCC_OscConfig+0x280>)
 8000b78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b7c:	6013      	str	r3, [r2, #0]
 8000b7e:	4b7c      	ldr	r3, [pc, #496]	; (8000d70 <HAL_RCC_OscConfig+0x280>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a7b      	ldr	r2, [pc, #492]	; (8000d70 <HAL_RCC_OscConfig+0x280>)
 8000b84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b88:	6013      	str	r3, [r2, #0]
 8000b8a:	e01d      	b.n	8000bc8 <HAL_RCC_OscConfig+0xd8>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b94:	d10c      	bne.n	8000bb0 <HAL_RCC_OscConfig+0xc0>
 8000b96:	4b76      	ldr	r3, [pc, #472]	; (8000d70 <HAL_RCC_OscConfig+0x280>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a75      	ldr	r2, [pc, #468]	; (8000d70 <HAL_RCC_OscConfig+0x280>)
 8000b9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ba0:	6013      	str	r3, [r2, #0]
 8000ba2:	4b73      	ldr	r3, [pc, #460]	; (8000d70 <HAL_RCC_OscConfig+0x280>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a72      	ldr	r2, [pc, #456]	; (8000d70 <HAL_RCC_OscConfig+0x280>)
 8000ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bac:	6013      	str	r3, [r2, #0]
 8000bae:	e00b      	b.n	8000bc8 <HAL_RCC_OscConfig+0xd8>
 8000bb0:	4b6f      	ldr	r3, [pc, #444]	; (8000d70 <HAL_RCC_OscConfig+0x280>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a6e      	ldr	r2, [pc, #440]	; (8000d70 <HAL_RCC_OscConfig+0x280>)
 8000bb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bba:	6013      	str	r3, [r2, #0]
 8000bbc:	4b6c      	ldr	r3, [pc, #432]	; (8000d70 <HAL_RCC_OscConfig+0x280>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a6b      	ldr	r2, [pc, #428]	; (8000d70 <HAL_RCC_OscConfig+0x280>)
 8000bc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d013      	beq.n	8000bf8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000bd0:	f7ff fcbc 	bl	800054c <HAL_GetTick>
 8000bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bd6:	e008      	b.n	8000bea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bd8:	f7ff fcb8 	bl	800054c <HAL_GetTick>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	2b64      	cmp	r3, #100	; 0x64
 8000be4:	d901      	bls.n	8000bea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000be6:	2303      	movs	r3, #3
 8000be8:	e1ea      	b.n	8000fc0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bea:	4b61      	ldr	r3, [pc, #388]	; (8000d70 <HAL_RCC_OscConfig+0x280>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d0f0      	beq.n	8000bd8 <HAL_RCC_OscConfig+0xe8>
 8000bf6:	e014      	b.n	8000c22 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000bf8:	f7ff fca8 	bl	800054c <HAL_GetTick>
 8000bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bfe:	e008      	b.n	8000c12 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c00:	f7ff fca4 	bl	800054c <HAL_GetTick>
 8000c04:	4602      	mov	r2, r0
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	1ad3      	subs	r3, r2, r3
 8000c0a:	2b64      	cmp	r3, #100	; 0x64
 8000c0c:	d901      	bls.n	8000c12 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000c0e:	2303      	movs	r3, #3
 8000c10:	e1d6      	b.n	8000fc0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c12:	4b57      	ldr	r3, [pc, #348]	; (8000d70 <HAL_RCC_OscConfig+0x280>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d1f0      	bne.n	8000c00 <HAL_RCC_OscConfig+0x110>
 8000c1e:	e000      	b.n	8000c22 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f003 0302 	and.w	r3, r3, #2
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d069      	beq.n	8000d02 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c2e:	4b50      	ldr	r3, [pc, #320]	; (8000d70 <HAL_RCC_OscConfig+0x280>)
 8000c30:	689b      	ldr	r3, [r3, #8]
 8000c32:	f003 030c 	and.w	r3, r3, #12
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d00b      	beq.n	8000c52 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c3a:	4b4d      	ldr	r3, [pc, #308]	; (8000d70 <HAL_RCC_OscConfig+0x280>)
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	f003 030c 	and.w	r3, r3, #12
 8000c42:	2b08      	cmp	r3, #8
 8000c44:	d11c      	bne.n	8000c80 <HAL_RCC_OscConfig+0x190>
 8000c46:	4b4a      	ldr	r3, [pc, #296]	; (8000d70 <HAL_RCC_OscConfig+0x280>)
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d116      	bne.n	8000c80 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c52:	4b47      	ldr	r3, [pc, #284]	; (8000d70 <HAL_RCC_OscConfig+0x280>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d005      	beq.n	8000c6a <HAL_RCC_OscConfig+0x17a>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	68db      	ldr	r3, [r3, #12]
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d001      	beq.n	8000c6a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	e1aa      	b.n	8000fc0 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c6a:	4b41      	ldr	r3, [pc, #260]	; (8000d70 <HAL_RCC_OscConfig+0x280>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	691b      	ldr	r3, [r3, #16]
 8000c76:	00db      	lsls	r3, r3, #3
 8000c78:	493d      	ldr	r1, [pc, #244]	; (8000d70 <HAL_RCC_OscConfig+0x280>)
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c7e:	e040      	b.n	8000d02 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d023      	beq.n	8000cd0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c88:	4b39      	ldr	r3, [pc, #228]	; (8000d70 <HAL_RCC_OscConfig+0x280>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a38      	ldr	r2, [pc, #224]	; (8000d70 <HAL_RCC_OscConfig+0x280>)
 8000c8e:	f043 0301 	orr.w	r3, r3, #1
 8000c92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c94:	f7ff fc5a 	bl	800054c <HAL_GetTick>
 8000c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c9a:	e008      	b.n	8000cae <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c9c:	f7ff fc56 	bl	800054c <HAL_GetTick>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	2b02      	cmp	r3, #2
 8000ca8:	d901      	bls.n	8000cae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8000caa:	2303      	movs	r3, #3
 8000cac:	e188      	b.n	8000fc0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cae:	4b30      	ldr	r3, [pc, #192]	; (8000d70 <HAL_RCC_OscConfig+0x280>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f003 0302 	and.w	r3, r3, #2
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d0f0      	beq.n	8000c9c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cba:	4b2d      	ldr	r3, [pc, #180]	; (8000d70 <HAL_RCC_OscConfig+0x280>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	691b      	ldr	r3, [r3, #16]
 8000cc6:	00db      	lsls	r3, r3, #3
 8000cc8:	4929      	ldr	r1, [pc, #164]	; (8000d70 <HAL_RCC_OscConfig+0x280>)
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	600b      	str	r3, [r1, #0]
 8000cce:	e018      	b.n	8000d02 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cd0:	4b27      	ldr	r3, [pc, #156]	; (8000d70 <HAL_RCC_OscConfig+0x280>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a26      	ldr	r2, [pc, #152]	; (8000d70 <HAL_RCC_OscConfig+0x280>)
 8000cd6:	f023 0301 	bic.w	r3, r3, #1
 8000cda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cdc:	f7ff fc36 	bl	800054c <HAL_GetTick>
 8000ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ce2:	e008      	b.n	8000cf6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ce4:	f7ff fc32 	bl	800054c <HAL_GetTick>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d901      	bls.n	8000cf6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	e164      	b.n	8000fc0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cf6:	4b1e      	ldr	r3, [pc, #120]	; (8000d70 <HAL_RCC_OscConfig+0x280>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f003 0302 	and.w	r3, r3, #2
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d1f0      	bne.n	8000ce4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f003 0308 	and.w	r3, r3, #8
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d038      	beq.n	8000d80 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	695b      	ldr	r3, [r3, #20]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d019      	beq.n	8000d4a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d16:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <HAL_RCC_OscConfig+0x280>)
 8000d18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d1a:	4a15      	ldr	r2, [pc, #84]	; (8000d70 <HAL_RCC_OscConfig+0x280>)
 8000d1c:	f043 0301 	orr.w	r3, r3, #1
 8000d20:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d22:	f7ff fc13 	bl	800054c <HAL_GetTick>
 8000d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d28:	e008      	b.n	8000d3c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d2a:	f7ff fc0f 	bl	800054c <HAL_GetTick>
 8000d2e:	4602      	mov	r2, r0
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	1ad3      	subs	r3, r2, r3
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	d901      	bls.n	8000d3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	e141      	b.n	8000fc0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <HAL_RCC_OscConfig+0x280>)
 8000d3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d40:	f003 0302 	and.w	r3, r3, #2
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d0f0      	beq.n	8000d2a <HAL_RCC_OscConfig+0x23a>
 8000d48:	e01a      	b.n	8000d80 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d4a:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <HAL_RCC_OscConfig+0x280>)
 8000d4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d4e:	4a08      	ldr	r2, [pc, #32]	; (8000d70 <HAL_RCC_OscConfig+0x280>)
 8000d50:	f023 0301 	bic.w	r3, r3, #1
 8000d54:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d56:	f7ff fbf9 	bl	800054c <HAL_GetTick>
 8000d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d5c:	e00a      	b.n	8000d74 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d5e:	f7ff fbf5 	bl	800054c <HAL_GetTick>
 8000d62:	4602      	mov	r2, r0
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	1ad3      	subs	r3, r2, r3
 8000d68:	2b02      	cmp	r3, #2
 8000d6a:	d903      	bls.n	8000d74 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	e127      	b.n	8000fc0 <HAL_RCC_OscConfig+0x4d0>
 8000d70:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d74:	4b94      	ldr	r3, [pc, #592]	; (8000fc8 <HAL_RCC_OscConfig+0x4d8>)
 8000d76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d78:	f003 0302 	and.w	r3, r3, #2
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d1ee      	bne.n	8000d5e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f003 0304 	and.w	r3, r3, #4
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	f000 80a4 	beq.w	8000ed6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d8e:	4b8e      	ldr	r3, [pc, #568]	; (8000fc8 <HAL_RCC_OscConfig+0x4d8>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d10d      	bne.n	8000db6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d9a:	4b8b      	ldr	r3, [pc, #556]	; (8000fc8 <HAL_RCC_OscConfig+0x4d8>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	4a8a      	ldr	r2, [pc, #552]	; (8000fc8 <HAL_RCC_OscConfig+0x4d8>)
 8000da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da4:	6413      	str	r3, [r2, #64]	; 0x40
 8000da6:	4b88      	ldr	r3, [pc, #544]	; (8000fc8 <HAL_RCC_OscConfig+0x4d8>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000db2:	2301      	movs	r3, #1
 8000db4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000db6:	4b85      	ldr	r3, [pc, #532]	; (8000fcc <HAL_RCC_OscConfig+0x4dc>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d118      	bne.n	8000df4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8000dc2:	4b82      	ldr	r3, [pc, #520]	; (8000fcc <HAL_RCC_OscConfig+0x4dc>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a81      	ldr	r2, [pc, #516]	; (8000fcc <HAL_RCC_OscConfig+0x4dc>)
 8000dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000dce:	f7ff fbbd 	bl	800054c <HAL_GetTick>
 8000dd2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000dd4:	e008      	b.n	8000de8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000dd6:	f7ff fbb9 	bl	800054c <HAL_GetTick>
 8000dda:	4602      	mov	r2, r0
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	1ad3      	subs	r3, r2, r3
 8000de0:	2b64      	cmp	r3, #100	; 0x64
 8000de2:	d901      	bls.n	8000de8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8000de4:	2303      	movs	r3, #3
 8000de6:	e0eb      	b.n	8000fc0 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000de8:	4b78      	ldr	r3, [pc, #480]	; (8000fcc <HAL_RCC_OscConfig+0x4dc>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d0f0      	beq.n	8000dd6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d106      	bne.n	8000e0a <HAL_RCC_OscConfig+0x31a>
 8000dfc:	4b72      	ldr	r3, [pc, #456]	; (8000fc8 <HAL_RCC_OscConfig+0x4d8>)
 8000dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e00:	4a71      	ldr	r2, [pc, #452]	; (8000fc8 <HAL_RCC_OscConfig+0x4d8>)
 8000e02:	f043 0301 	orr.w	r3, r3, #1
 8000e06:	6713      	str	r3, [r2, #112]	; 0x70
 8000e08:	e02d      	b.n	8000e66 <HAL_RCC_OscConfig+0x376>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d10c      	bne.n	8000e2c <HAL_RCC_OscConfig+0x33c>
 8000e12:	4b6d      	ldr	r3, [pc, #436]	; (8000fc8 <HAL_RCC_OscConfig+0x4d8>)
 8000e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e16:	4a6c      	ldr	r2, [pc, #432]	; (8000fc8 <HAL_RCC_OscConfig+0x4d8>)
 8000e18:	f023 0301 	bic.w	r3, r3, #1
 8000e1c:	6713      	str	r3, [r2, #112]	; 0x70
 8000e1e:	4b6a      	ldr	r3, [pc, #424]	; (8000fc8 <HAL_RCC_OscConfig+0x4d8>)
 8000e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e22:	4a69      	ldr	r2, [pc, #420]	; (8000fc8 <HAL_RCC_OscConfig+0x4d8>)
 8000e24:	f023 0304 	bic.w	r3, r3, #4
 8000e28:	6713      	str	r3, [r2, #112]	; 0x70
 8000e2a:	e01c      	b.n	8000e66 <HAL_RCC_OscConfig+0x376>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	2b05      	cmp	r3, #5
 8000e32:	d10c      	bne.n	8000e4e <HAL_RCC_OscConfig+0x35e>
 8000e34:	4b64      	ldr	r3, [pc, #400]	; (8000fc8 <HAL_RCC_OscConfig+0x4d8>)
 8000e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e38:	4a63      	ldr	r2, [pc, #396]	; (8000fc8 <HAL_RCC_OscConfig+0x4d8>)
 8000e3a:	f043 0304 	orr.w	r3, r3, #4
 8000e3e:	6713      	str	r3, [r2, #112]	; 0x70
 8000e40:	4b61      	ldr	r3, [pc, #388]	; (8000fc8 <HAL_RCC_OscConfig+0x4d8>)
 8000e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e44:	4a60      	ldr	r2, [pc, #384]	; (8000fc8 <HAL_RCC_OscConfig+0x4d8>)
 8000e46:	f043 0301 	orr.w	r3, r3, #1
 8000e4a:	6713      	str	r3, [r2, #112]	; 0x70
 8000e4c:	e00b      	b.n	8000e66 <HAL_RCC_OscConfig+0x376>
 8000e4e:	4b5e      	ldr	r3, [pc, #376]	; (8000fc8 <HAL_RCC_OscConfig+0x4d8>)
 8000e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e52:	4a5d      	ldr	r2, [pc, #372]	; (8000fc8 <HAL_RCC_OscConfig+0x4d8>)
 8000e54:	f023 0301 	bic.w	r3, r3, #1
 8000e58:	6713      	str	r3, [r2, #112]	; 0x70
 8000e5a:	4b5b      	ldr	r3, [pc, #364]	; (8000fc8 <HAL_RCC_OscConfig+0x4d8>)
 8000e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e5e:	4a5a      	ldr	r2, [pc, #360]	; (8000fc8 <HAL_RCC_OscConfig+0x4d8>)
 8000e60:	f023 0304 	bic.w	r3, r3, #4
 8000e64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d015      	beq.n	8000e9a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e6e:	f7ff fb6d 	bl	800054c <HAL_GetTick>
 8000e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e74:	e00a      	b.n	8000e8c <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e76:	f7ff fb69 	bl	800054c <HAL_GetTick>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	1ad3      	subs	r3, r2, r3
 8000e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d901      	bls.n	8000e8c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	e099      	b.n	8000fc0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e8c:	4b4e      	ldr	r3, [pc, #312]	; (8000fc8 <HAL_RCC_OscConfig+0x4d8>)
 8000e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e90:	f003 0302 	and.w	r3, r3, #2
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d0ee      	beq.n	8000e76 <HAL_RCC_OscConfig+0x386>
 8000e98:	e014      	b.n	8000ec4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e9a:	f7ff fb57 	bl	800054c <HAL_GetTick>
 8000e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ea0:	e00a      	b.n	8000eb8 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ea2:	f7ff fb53 	bl	800054c <HAL_GetTick>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	1ad3      	subs	r3, r2, r3
 8000eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d901      	bls.n	8000eb8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	e083      	b.n	8000fc0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000eb8:	4b43      	ldr	r3, [pc, #268]	; (8000fc8 <HAL_RCC_OscConfig+0x4d8>)
 8000eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ebc:	f003 0302 	and.w	r3, r3, #2
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d1ee      	bne.n	8000ea2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000ec4:	7dfb      	ldrb	r3, [r7, #23]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d105      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000eca:	4b3f      	ldr	r3, [pc, #252]	; (8000fc8 <HAL_RCC_OscConfig+0x4d8>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	4a3e      	ldr	r2, [pc, #248]	; (8000fc8 <HAL_RCC_OscConfig+0x4d8>)
 8000ed0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ed4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	699b      	ldr	r3, [r3, #24]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d06f      	beq.n	8000fbe <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ede:	4b3a      	ldr	r3, [pc, #232]	; (8000fc8 <HAL_RCC_OscConfig+0x4d8>)
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	f003 030c 	and.w	r3, r3, #12
 8000ee6:	2b08      	cmp	r3, #8
 8000ee8:	d067      	beq.n	8000fba <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	699b      	ldr	r3, [r3, #24]
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	d149      	bne.n	8000f86 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ef2:	4b35      	ldr	r3, [pc, #212]	; (8000fc8 <HAL_RCC_OscConfig+0x4d8>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a34      	ldr	r2, [pc, #208]	; (8000fc8 <HAL_RCC_OscConfig+0x4d8>)
 8000ef8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000efc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000efe:	f7ff fb25 	bl	800054c <HAL_GetTick>
 8000f02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f04:	e008      	b.n	8000f18 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f06:	f7ff fb21 	bl	800054c <HAL_GetTick>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d901      	bls.n	8000f18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8000f14:	2303      	movs	r3, #3
 8000f16:	e053      	b.n	8000fc0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f18:	4b2b      	ldr	r3, [pc, #172]	; (8000fc8 <HAL_RCC_OscConfig+0x4d8>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d1f0      	bne.n	8000f06 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	69da      	ldr	r2, [r3, #28]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6a1b      	ldr	r3, [r3, #32]
 8000f2c:	431a      	orrs	r2, r3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f32:	019b      	lsls	r3, r3, #6
 8000f34:	431a      	orrs	r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f3a:	085b      	lsrs	r3, r3, #1
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	041b      	lsls	r3, r3, #16
 8000f40:	431a      	orrs	r2, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f46:	061b      	lsls	r3, r3, #24
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	4a1f      	ldr	r2, [pc, #124]	; (8000fc8 <HAL_RCC_OscConfig+0x4d8>)
 8000f4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000f50:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f52:	4b1d      	ldr	r3, [pc, #116]	; (8000fc8 <HAL_RCC_OscConfig+0x4d8>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a1c      	ldr	r2, [pc, #112]	; (8000fc8 <HAL_RCC_OscConfig+0x4d8>)
 8000f58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f5e:	f7ff faf5 	bl	800054c <HAL_GetTick>
 8000f62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f64:	e008      	b.n	8000f78 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f66:	f7ff faf1 	bl	800054c <HAL_GetTick>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	d901      	bls.n	8000f78 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8000f74:	2303      	movs	r3, #3
 8000f76:	e023      	b.n	8000fc0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f78:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <HAL_RCC_OscConfig+0x4d8>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d0f0      	beq.n	8000f66 <HAL_RCC_OscConfig+0x476>
 8000f84:	e01b      	b.n	8000fbe <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f86:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <HAL_RCC_OscConfig+0x4d8>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a0f      	ldr	r2, [pc, #60]	; (8000fc8 <HAL_RCC_OscConfig+0x4d8>)
 8000f8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f92:	f7ff fadb 	bl	800054c <HAL_GetTick>
 8000f96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f98:	e008      	b.n	8000fac <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f9a:	f7ff fad7 	bl	800054c <HAL_GetTick>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	1ad3      	subs	r3, r2, r3
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d901      	bls.n	8000fac <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	e009      	b.n	8000fc0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <HAL_RCC_OscConfig+0x4d8>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d1f0      	bne.n	8000f9a <HAL_RCC_OscConfig+0x4aa>
 8000fb8:	e001      	b.n	8000fbe <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e000      	b.n	8000fc0 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8000fbe:	2300      	movs	r3, #0
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3718      	adds	r7, #24
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40007000 	.word	0x40007000

08000fd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d101      	bne.n	8000fe8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e0ce      	b.n	8001186 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000fe8:	4b69      	ldr	r3, [pc, #420]	; (8001190 <HAL_RCC_ClockConfig+0x1c0>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f003 030f 	and.w	r3, r3, #15
 8000ff0:	683a      	ldr	r2, [r7, #0]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d910      	bls.n	8001018 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ff6:	4b66      	ldr	r3, [pc, #408]	; (8001190 <HAL_RCC_ClockConfig+0x1c0>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f023 020f 	bic.w	r2, r3, #15
 8000ffe:	4964      	ldr	r1, [pc, #400]	; (8001190 <HAL_RCC_ClockConfig+0x1c0>)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	4313      	orrs	r3, r2
 8001004:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001006:	4b62      	ldr	r3, [pc, #392]	; (8001190 <HAL_RCC_ClockConfig+0x1c0>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f003 030f 	and.w	r3, r3, #15
 800100e:	683a      	ldr	r2, [r7, #0]
 8001010:	429a      	cmp	r2, r3
 8001012:	d001      	beq.n	8001018 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	e0b6      	b.n	8001186 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f003 0302 	and.w	r3, r3, #2
 8001020:	2b00      	cmp	r3, #0
 8001022:	d020      	beq.n	8001066 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 0304 	and.w	r3, r3, #4
 800102c:	2b00      	cmp	r3, #0
 800102e:	d005      	beq.n	800103c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001030:	4b58      	ldr	r3, [pc, #352]	; (8001194 <HAL_RCC_ClockConfig+0x1c4>)
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	4a57      	ldr	r2, [pc, #348]	; (8001194 <HAL_RCC_ClockConfig+0x1c4>)
 8001036:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800103a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 0308 	and.w	r3, r3, #8
 8001044:	2b00      	cmp	r3, #0
 8001046:	d005      	beq.n	8001054 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001048:	4b52      	ldr	r3, [pc, #328]	; (8001194 <HAL_RCC_ClockConfig+0x1c4>)
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	4a51      	ldr	r2, [pc, #324]	; (8001194 <HAL_RCC_ClockConfig+0x1c4>)
 800104e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001052:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001054:	4b4f      	ldr	r3, [pc, #316]	; (8001194 <HAL_RCC_ClockConfig+0x1c4>)
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	494c      	ldr	r1, [pc, #304]	; (8001194 <HAL_RCC_ClockConfig+0x1c4>)
 8001062:	4313      	orrs	r3, r2
 8001064:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	2b00      	cmp	r3, #0
 8001070:	d040      	beq.n	80010f4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d107      	bne.n	800108a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800107a:	4b46      	ldr	r3, [pc, #280]	; (8001194 <HAL_RCC_ClockConfig+0x1c4>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d115      	bne.n	80010b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e07d      	b.n	8001186 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	2b02      	cmp	r3, #2
 8001090:	d107      	bne.n	80010a2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001092:	4b40      	ldr	r3, [pc, #256]	; (8001194 <HAL_RCC_ClockConfig+0x1c4>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d109      	bne.n	80010b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e071      	b.n	8001186 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010a2:	4b3c      	ldr	r3, [pc, #240]	; (8001194 <HAL_RCC_ClockConfig+0x1c4>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d101      	bne.n	80010b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e069      	b.n	8001186 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010b2:	4b38      	ldr	r3, [pc, #224]	; (8001194 <HAL_RCC_ClockConfig+0x1c4>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	f023 0203 	bic.w	r2, r3, #3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	4935      	ldr	r1, [pc, #212]	; (8001194 <HAL_RCC_ClockConfig+0x1c4>)
 80010c0:	4313      	orrs	r3, r2
 80010c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80010c4:	f7ff fa42 	bl	800054c <HAL_GetTick>
 80010c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010ca:	e00a      	b.n	80010e2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010cc:	f7ff fa3e 	bl	800054c <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80010da:	4293      	cmp	r3, r2
 80010dc:	d901      	bls.n	80010e2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80010de:	2303      	movs	r3, #3
 80010e0:	e051      	b.n	8001186 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010e2:	4b2c      	ldr	r3, [pc, #176]	; (8001194 <HAL_RCC_ClockConfig+0x1c4>)
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	f003 020c 	and.w	r2, r3, #12
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d1eb      	bne.n	80010cc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80010f4:	4b26      	ldr	r3, [pc, #152]	; (8001190 <HAL_RCC_ClockConfig+0x1c0>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f003 030f 	and.w	r3, r3, #15
 80010fc:	683a      	ldr	r2, [r7, #0]
 80010fe:	429a      	cmp	r2, r3
 8001100:	d210      	bcs.n	8001124 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001102:	4b23      	ldr	r3, [pc, #140]	; (8001190 <HAL_RCC_ClockConfig+0x1c0>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f023 020f 	bic.w	r2, r3, #15
 800110a:	4921      	ldr	r1, [pc, #132]	; (8001190 <HAL_RCC_ClockConfig+0x1c0>)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	4313      	orrs	r3, r2
 8001110:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001112:	4b1f      	ldr	r3, [pc, #124]	; (8001190 <HAL_RCC_ClockConfig+0x1c0>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 030f 	and.w	r3, r3, #15
 800111a:	683a      	ldr	r2, [r7, #0]
 800111c:	429a      	cmp	r2, r3
 800111e:	d001      	beq.n	8001124 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	e030      	b.n	8001186 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0304 	and.w	r3, r3, #4
 800112c:	2b00      	cmp	r3, #0
 800112e:	d008      	beq.n	8001142 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001130:	4b18      	ldr	r3, [pc, #96]	; (8001194 <HAL_RCC_ClockConfig+0x1c4>)
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	4915      	ldr	r1, [pc, #84]	; (8001194 <HAL_RCC_ClockConfig+0x1c4>)
 800113e:	4313      	orrs	r3, r2
 8001140:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 0308 	and.w	r3, r3, #8
 800114a:	2b00      	cmp	r3, #0
 800114c:	d009      	beq.n	8001162 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800114e:	4b11      	ldr	r3, [pc, #68]	; (8001194 <HAL_RCC_ClockConfig+0x1c4>)
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	691b      	ldr	r3, [r3, #16]
 800115a:	00db      	lsls	r3, r3, #3
 800115c:	490d      	ldr	r1, [pc, #52]	; (8001194 <HAL_RCC_ClockConfig+0x1c4>)
 800115e:	4313      	orrs	r3, r2
 8001160:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001162:	f000 f81d 	bl	80011a0 <HAL_RCC_GetSysClockFreq>
 8001166:	4601      	mov	r1, r0
 8001168:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <HAL_RCC_ClockConfig+0x1c4>)
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	091b      	lsrs	r3, r3, #4
 800116e:	f003 030f 	and.w	r3, r3, #15
 8001172:	4a09      	ldr	r2, [pc, #36]	; (8001198 <HAL_RCC_ClockConfig+0x1c8>)
 8001174:	5cd3      	ldrb	r3, [r2, r3]
 8001176:	fa21 f303 	lsr.w	r3, r1, r3
 800117a:	4a08      	ldr	r2, [pc, #32]	; (800119c <HAL_RCC_ClockConfig+0x1cc>)
 800117c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800117e:	2000      	movs	r0, #0
 8001180:	f001 fbee 	bl	8002960 <HAL_InitTick>

  return HAL_OK;
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40023c00 	.word	0x40023c00
 8001194:	40023800 	.word	0x40023800
 8001198:	08002bc0 	.word	0x08002bc0
 800119c:	20000008 	.word	0x20000008

080011a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	607b      	str	r3, [r7, #4]
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	2300      	movs	r3, #0
 80011b0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011b6:	4b50      	ldr	r3, [pc, #320]	; (80012f8 <HAL_RCC_GetSysClockFreq+0x158>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f003 030c 	and.w	r3, r3, #12
 80011be:	2b04      	cmp	r3, #4
 80011c0:	d007      	beq.n	80011d2 <HAL_RCC_GetSysClockFreq+0x32>
 80011c2:	2b08      	cmp	r3, #8
 80011c4:	d008      	beq.n	80011d8 <HAL_RCC_GetSysClockFreq+0x38>
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	f040 808d 	bne.w	80012e6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80011cc:	4b4b      	ldr	r3, [pc, #300]	; (80012fc <HAL_RCC_GetSysClockFreq+0x15c>)
 80011ce:	60bb      	str	r3, [r7, #8]
       break;
 80011d0:	e08c      	b.n	80012ec <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80011d2:	4b4b      	ldr	r3, [pc, #300]	; (8001300 <HAL_RCC_GetSysClockFreq+0x160>)
 80011d4:	60bb      	str	r3, [r7, #8]
      break;
 80011d6:	e089      	b.n	80012ec <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011d8:	4b47      	ldr	r3, [pc, #284]	; (80012f8 <HAL_RCC_GetSysClockFreq+0x158>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011e0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80011e2:	4b45      	ldr	r3, [pc, #276]	; (80012f8 <HAL_RCC_GetSysClockFreq+0x158>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d023      	beq.n	8001236 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011ee:	4b42      	ldr	r3, [pc, #264]	; (80012f8 <HAL_RCC_GetSysClockFreq+0x158>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	099b      	lsrs	r3, r3, #6
 80011f4:	f04f 0400 	mov.w	r4, #0
 80011f8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80011fc:	f04f 0200 	mov.w	r2, #0
 8001200:	ea03 0501 	and.w	r5, r3, r1
 8001204:	ea04 0602 	and.w	r6, r4, r2
 8001208:	4a3d      	ldr	r2, [pc, #244]	; (8001300 <HAL_RCC_GetSysClockFreq+0x160>)
 800120a:	fb02 f106 	mul.w	r1, r2, r6
 800120e:	2200      	movs	r2, #0
 8001210:	fb02 f205 	mul.w	r2, r2, r5
 8001214:	440a      	add	r2, r1
 8001216:	493a      	ldr	r1, [pc, #232]	; (8001300 <HAL_RCC_GetSysClockFreq+0x160>)
 8001218:	fba5 0101 	umull	r0, r1, r5, r1
 800121c:	1853      	adds	r3, r2, r1
 800121e:	4619      	mov	r1, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f04f 0400 	mov.w	r4, #0
 8001226:	461a      	mov	r2, r3
 8001228:	4623      	mov	r3, r4
 800122a:	f7fe ffed 	bl	8000208 <__aeabi_uldivmod>
 800122e:	4603      	mov	r3, r0
 8001230:	460c      	mov	r4, r1
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	e049      	b.n	80012ca <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001236:	4b30      	ldr	r3, [pc, #192]	; (80012f8 <HAL_RCC_GetSysClockFreq+0x158>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	099b      	lsrs	r3, r3, #6
 800123c:	f04f 0400 	mov.w	r4, #0
 8001240:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001244:	f04f 0200 	mov.w	r2, #0
 8001248:	ea03 0501 	and.w	r5, r3, r1
 800124c:	ea04 0602 	and.w	r6, r4, r2
 8001250:	4629      	mov	r1, r5
 8001252:	4632      	mov	r2, r6
 8001254:	f04f 0300 	mov.w	r3, #0
 8001258:	f04f 0400 	mov.w	r4, #0
 800125c:	0154      	lsls	r4, r2, #5
 800125e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001262:	014b      	lsls	r3, r1, #5
 8001264:	4619      	mov	r1, r3
 8001266:	4622      	mov	r2, r4
 8001268:	1b49      	subs	r1, r1, r5
 800126a:	eb62 0206 	sbc.w	r2, r2, r6
 800126e:	f04f 0300 	mov.w	r3, #0
 8001272:	f04f 0400 	mov.w	r4, #0
 8001276:	0194      	lsls	r4, r2, #6
 8001278:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800127c:	018b      	lsls	r3, r1, #6
 800127e:	1a5b      	subs	r3, r3, r1
 8001280:	eb64 0402 	sbc.w	r4, r4, r2
 8001284:	f04f 0100 	mov.w	r1, #0
 8001288:	f04f 0200 	mov.w	r2, #0
 800128c:	00e2      	lsls	r2, r4, #3
 800128e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001292:	00d9      	lsls	r1, r3, #3
 8001294:	460b      	mov	r3, r1
 8001296:	4614      	mov	r4, r2
 8001298:	195b      	adds	r3, r3, r5
 800129a:	eb44 0406 	adc.w	r4, r4, r6
 800129e:	f04f 0100 	mov.w	r1, #0
 80012a2:	f04f 0200 	mov.w	r2, #0
 80012a6:	02a2      	lsls	r2, r4, #10
 80012a8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80012ac:	0299      	lsls	r1, r3, #10
 80012ae:	460b      	mov	r3, r1
 80012b0:	4614      	mov	r4, r2
 80012b2:	4618      	mov	r0, r3
 80012b4:	4621      	mov	r1, r4
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f04f 0400 	mov.w	r4, #0
 80012bc:	461a      	mov	r2, r3
 80012be:	4623      	mov	r3, r4
 80012c0:	f7fe ffa2 	bl	8000208 <__aeabi_uldivmod>
 80012c4:	4603      	mov	r3, r0
 80012c6:	460c      	mov	r4, r1
 80012c8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80012ca:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <HAL_RCC_GetSysClockFreq+0x158>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	0c1b      	lsrs	r3, r3, #16
 80012d0:	f003 0303 	and.w	r3, r3, #3
 80012d4:	3301      	adds	r3, #1
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e2:	60bb      	str	r3, [r7, #8]
      break;
 80012e4:	e002      	b.n	80012ec <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80012e6:	4b05      	ldr	r3, [pc, #20]	; (80012fc <HAL_RCC_GetSysClockFreq+0x15c>)
 80012e8:	60bb      	str	r3, [r7, #8]
      break;
 80012ea:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012ec:	68bb      	ldr	r3, [r7, #8]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3714      	adds	r7, #20
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40023800 	.word	0x40023800
 80012fc:	00f42400 	.word	0x00f42400
 8001300:	017d7840 	.word	0x017d7840

08001304 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001308:	4b03      	ldr	r3, [pc, #12]	; (8001318 <HAL_RCC_GetHCLKFreq+0x14>)
 800130a:	681b      	ldr	r3, [r3, #0]
}
 800130c:	4618      	mov	r0, r3
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	20000008 	.word	0x20000008

0800131c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001320:	f7ff fff0 	bl	8001304 <HAL_RCC_GetHCLKFreq>
 8001324:	4601      	mov	r1, r0
 8001326:	4b05      	ldr	r3, [pc, #20]	; (800133c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	0a9b      	lsrs	r3, r3, #10
 800132c:	f003 0307 	and.w	r3, r3, #7
 8001330:	4a03      	ldr	r2, [pc, #12]	; (8001340 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001332:	5cd3      	ldrb	r3, [r2, r3]
 8001334:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001338:	4618      	mov	r0, r3
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40023800 	.word	0x40023800
 8001340:	08002bd0 	.word	0x08002bd0

08001344 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	220f      	movs	r2, #15
 8001352:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001354:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <HAL_RCC_GetClockConfig+0x5c>)
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f003 0203 	and.w	r2, r3, #3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001360:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <HAL_RCC_GetClockConfig+0x5c>)
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <HAL_RCC_GetClockConfig+0x5c>)
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001378:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <HAL_RCC_GetClockConfig+0x5c>)
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	08db      	lsrs	r3, r3, #3
 800137e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001386:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <HAL_RCC_GetClockConfig+0x60>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 020f 	and.w	r2, r3, #15
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	601a      	str	r2, [r3, #0]
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40023c00 	.word	0x40023c00

080013a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d101      	bne.n	80013ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e01d      	b.n	80013f6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d106      	bne.n	80013d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f001 fa6e 	bl	80028b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2202      	movs	r2, #2
 80013d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3304      	adds	r3, #4
 80013e4:	4619      	mov	r1, r3
 80013e6:	4610      	mov	r0, r2
 80013e8:	f000 fbc8 	bl	8001b7c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2201      	movs	r2, #1
 80013f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	68da      	ldr	r2, [r3, #12]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f042 0201 	orr.w	r2, r2, #1
 8001416:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	689a      	ldr	r2, [r3, #8]
 800141e:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <HAL_TIM_Base_Start_IT+0x50>)
 8001420:	4013      	ands	r3, r2
 8001422:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	2b06      	cmp	r3, #6
 8001428:	d00b      	beq.n	8001442 <HAL_TIM_Base_Start_IT+0x42>
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001430:	d007      	beq.n	8001442 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f042 0201 	orr.w	r2, r2, #1
 8001440:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001442:	2300      	movs	r3, #0
}
 8001444:	4618      	mov	r0, r3
 8001446:	3714      	adds	r7, #20
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	00010007 	.word	0x00010007

08001454 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d101      	bne.n	8001466 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e01d      	b.n	80014a2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b00      	cmp	r3, #0
 8001470:	d106      	bne.n	8001480 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f000 f815 	bl	80014aa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2202      	movs	r2, #2
 8001484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3304      	adds	r3, #4
 8001490:	4619      	mov	r1, r3
 8001492:	4610      	mov	r0, r2
 8001494:	f000 fb72 	bl	8001b7c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2201      	movs	r2, #1
 800149c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80014aa:	b480      	push	{r7}
 80014ac:	b083      	sub	sp, #12
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
	...

080014c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2201      	movs	r2, #1
 80014d0:	6839      	ldr	r1, [r7, #0]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f000 feea 	bl	80022ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a17      	ldr	r2, [pc, #92]	; (800153c <HAL_TIM_PWM_Start+0x7c>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d004      	beq.n	80014ec <HAL_TIM_PWM_Start+0x2c>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a16      	ldr	r2, [pc, #88]	; (8001540 <HAL_TIM_PWM_Start+0x80>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d101      	bne.n	80014f0 <HAL_TIM_PWM_Start+0x30>
 80014ec:	2301      	movs	r3, #1
 80014ee:	e000      	b.n	80014f2 <HAL_TIM_PWM_Start+0x32>
 80014f0:	2300      	movs	r3, #0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d007      	beq.n	8001506 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001504:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	689a      	ldr	r2, [r3, #8]
 800150c:	4b0d      	ldr	r3, [pc, #52]	; (8001544 <HAL_TIM_PWM_Start+0x84>)
 800150e:	4013      	ands	r3, r2
 8001510:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2b06      	cmp	r3, #6
 8001516:	d00b      	beq.n	8001530 <HAL_TIM_PWM_Start+0x70>
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800151e:	d007      	beq.n	8001530 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f042 0201 	orr.w	r2, r2, #1
 800152e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40010000 	.word	0x40010000
 8001540:	40010400 	.word	0x40010400
 8001544:	00010007 	.word	0x00010007

08001548 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b02      	cmp	r3, #2
 800155c:	d122      	bne.n	80015a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b02      	cmp	r3, #2
 800156a:	d11b      	bne.n	80015a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f06f 0202 	mvn.w	r2, #2
 8001574:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2201      	movs	r2, #1
 800157a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	f003 0303 	and.w	r3, r3, #3
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f000 fad8 	bl	8001b40 <HAL_TIM_IC_CaptureCallback>
 8001590:	e005      	b.n	800159e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f000 faca 	bl	8001b2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f000 fadb 	bl	8001b54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	f003 0304 	and.w	r3, r3, #4
 80015ae:	2b04      	cmp	r3, #4
 80015b0:	d122      	bne.n	80015f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	f003 0304 	and.w	r3, r3, #4
 80015bc:	2b04      	cmp	r3, #4
 80015be:	d11b      	bne.n	80015f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f06f 0204 	mvn.w	r2, #4
 80015c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2202      	movs	r2, #2
 80015ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d003      	beq.n	80015e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f000 faae 	bl	8001b40 <HAL_TIM_IC_CaptureCallback>
 80015e4:	e005      	b.n	80015f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 faa0 	bl	8001b2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f000 fab1 	bl	8001b54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	f003 0308 	and.w	r3, r3, #8
 8001602:	2b08      	cmp	r3, #8
 8001604:	d122      	bne.n	800164c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	f003 0308 	and.w	r3, r3, #8
 8001610:	2b08      	cmp	r3, #8
 8001612:	d11b      	bne.n	800164c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f06f 0208 	mvn.w	r2, #8
 800161c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2204      	movs	r2, #4
 8001622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	f003 0303 	and.w	r3, r3, #3
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f000 fa84 	bl	8001b40 <HAL_TIM_IC_CaptureCallback>
 8001638:	e005      	b.n	8001646 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f000 fa76 	bl	8001b2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f000 fa87 	bl	8001b54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	691b      	ldr	r3, [r3, #16]
 8001652:	f003 0310 	and.w	r3, r3, #16
 8001656:	2b10      	cmp	r3, #16
 8001658:	d122      	bne.n	80016a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	f003 0310 	and.w	r3, r3, #16
 8001664:	2b10      	cmp	r3, #16
 8001666:	d11b      	bne.n	80016a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f06f 0210 	mvn.w	r2, #16
 8001670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2208      	movs	r2, #8
 8001676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	69db      	ldr	r3, [r3, #28]
 800167e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001682:	2b00      	cmp	r3, #0
 8001684:	d003      	beq.n	800168e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f000 fa5a 	bl	8001b40 <HAL_TIM_IC_CaptureCallback>
 800168c:	e005      	b.n	800169a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f000 fa4c 	bl	8001b2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f000 fa5d 	bl	8001b54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	691b      	ldr	r3, [r3, #16]
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d10e      	bne.n	80016cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	f003 0301 	and.w	r3, r3, #1
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d107      	bne.n	80016cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f06f 0201 	mvn.w	r2, #1
 80016c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f001 f8b4 	bl	8002834 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016d6:	2b80      	cmp	r3, #128	; 0x80
 80016d8:	d10e      	bne.n	80016f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016e4:	2b80      	cmp	r3, #128	; 0x80
 80016e6:	d107      	bne.n	80016f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80016f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f000 fee4 	bl	80024c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	691b      	ldr	r3, [r3, #16]
 80016fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001702:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001706:	d10e      	bne.n	8001726 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001712:	2b80      	cmp	r3, #128	; 0x80
 8001714:	d107      	bne.n	8001726 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800171e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f000 fed7 	bl	80024d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001730:	2b40      	cmp	r3, #64	; 0x40
 8001732:	d10e      	bne.n	8001752 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800173e:	2b40      	cmp	r3, #64	; 0x40
 8001740:	d107      	bne.n	8001752 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800174a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f000 fa0b 	bl	8001b68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	691b      	ldr	r3, [r3, #16]
 8001758:	f003 0320 	and.w	r3, r3, #32
 800175c:	2b20      	cmp	r3, #32
 800175e:	d10e      	bne.n	800177e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	f003 0320 	and.w	r3, r3, #32
 800176a:	2b20      	cmp	r3, #32
 800176c:	d107      	bne.n	800177e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f06f 0220 	mvn.w	r2, #32
 8001776:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f000 fe97 	bl	80024ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
	...

08001788 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800179a:	2b01      	cmp	r3, #1
 800179c:	d101      	bne.n	80017a2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800179e:	2302      	movs	r3, #2
 80017a0:	e105      	b.n	80019ae <HAL_TIM_PWM_ConfigChannel+0x226>
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2201      	movs	r2, #1
 80017a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2202      	movs	r2, #2
 80017ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b14      	cmp	r3, #20
 80017b6:	f200 80f0 	bhi.w	800199a <HAL_TIM_PWM_ConfigChannel+0x212>
 80017ba:	a201      	add	r2, pc, #4	; (adr r2, 80017c0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80017bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c0:	08001815 	.word	0x08001815
 80017c4:	0800199b 	.word	0x0800199b
 80017c8:	0800199b 	.word	0x0800199b
 80017cc:	0800199b 	.word	0x0800199b
 80017d0:	08001855 	.word	0x08001855
 80017d4:	0800199b 	.word	0x0800199b
 80017d8:	0800199b 	.word	0x0800199b
 80017dc:	0800199b 	.word	0x0800199b
 80017e0:	08001897 	.word	0x08001897
 80017e4:	0800199b 	.word	0x0800199b
 80017e8:	0800199b 	.word	0x0800199b
 80017ec:	0800199b 	.word	0x0800199b
 80017f0:	080018d7 	.word	0x080018d7
 80017f4:	0800199b 	.word	0x0800199b
 80017f8:	0800199b 	.word	0x0800199b
 80017fc:	0800199b 	.word	0x0800199b
 8001800:	08001919 	.word	0x08001919
 8001804:	0800199b 	.word	0x0800199b
 8001808:	0800199b 	.word	0x0800199b
 800180c:	0800199b 	.word	0x0800199b
 8001810:	08001959 	.word	0x08001959
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	68b9      	ldr	r1, [r7, #8]
 800181a:	4618      	mov	r0, r3
 800181c:	f000 fa4e 	bl	8001cbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	699a      	ldr	r2, [r3, #24]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f042 0208 	orr.w	r2, r2, #8
 800182e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	699a      	ldr	r2, [r3, #24]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f022 0204 	bic.w	r2, r2, #4
 800183e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6999      	ldr	r1, [r3, #24]
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	691a      	ldr	r2, [r3, #16]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	430a      	orrs	r2, r1
 8001850:	619a      	str	r2, [r3, #24]
      break;
 8001852:	e0a3      	b.n	800199c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	68b9      	ldr	r1, [r7, #8]
 800185a:	4618      	mov	r0, r3
 800185c:	f000 faa0 	bl	8001da0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	699a      	ldr	r2, [r3, #24]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800186e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	699a      	ldr	r2, [r3, #24]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800187e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6999      	ldr	r1, [r3, #24]
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	021a      	lsls	r2, r3, #8
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	430a      	orrs	r2, r1
 8001892:	619a      	str	r2, [r3, #24]
      break;
 8001894:	e082      	b.n	800199c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	68b9      	ldr	r1, [r7, #8]
 800189c:	4618      	mov	r0, r3
 800189e:	f000 faf7 	bl	8001e90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	69da      	ldr	r2, [r3, #28]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f042 0208 	orr.w	r2, r2, #8
 80018b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	69da      	ldr	r2, [r3, #28]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f022 0204 	bic.w	r2, r2, #4
 80018c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	69d9      	ldr	r1, [r3, #28]
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	691a      	ldr	r2, [r3, #16]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	430a      	orrs	r2, r1
 80018d2:	61da      	str	r2, [r3, #28]
      break;
 80018d4:	e062      	b.n	800199c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	68b9      	ldr	r1, [r7, #8]
 80018dc:	4618      	mov	r0, r3
 80018de:	f000 fb4d 	bl	8001f7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	69da      	ldr	r2, [r3, #28]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	69da      	ldr	r2, [r3, #28]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001900:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	69d9      	ldr	r1, [r3, #28]
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	691b      	ldr	r3, [r3, #16]
 800190c:	021a      	lsls	r2, r3, #8
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	430a      	orrs	r2, r1
 8001914:	61da      	str	r2, [r3, #28]
      break;
 8001916:	e041      	b.n	800199c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	68b9      	ldr	r1, [r7, #8]
 800191e:	4618      	mov	r0, r3
 8001920:	f000 fb84 	bl	800202c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f042 0208 	orr.w	r2, r2, #8
 8001932:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f022 0204 	bic.w	r2, r2, #4
 8001942:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	691a      	ldr	r2, [r3, #16]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	430a      	orrs	r2, r1
 8001954:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001956:	e021      	b.n	800199c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	68b9      	ldr	r1, [r7, #8]
 800195e:	4618      	mov	r0, r3
 8001960:	f000 fbb6 	bl	80020d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001972:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001982:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	691b      	ldr	r3, [r3, #16]
 800198e:	021a      	lsls	r2, r3, #8
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	430a      	orrs	r2, r1
 8001996:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001998:	e000      	b.n	800199c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800199a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop

080019b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d101      	bne.n	80019d0 <HAL_TIM_ConfigClockSource+0x18>
 80019cc:	2302      	movs	r3, #2
 80019ce:	e0a6      	b.n	8001b1e <HAL_TIM_ConfigClockSource+0x166>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2201      	movs	r2, #1
 80019d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2202      	movs	r2, #2
 80019dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80019e8:	68fa      	ldr	r2, [r7, #12]
 80019ea:	4b4f      	ldr	r3, [pc, #316]	; (8001b28 <HAL_TIM_ConfigClockSource+0x170>)
 80019ec:	4013      	ands	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80019f6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	68fa      	ldr	r2, [r7, #12]
 80019fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2b40      	cmp	r3, #64	; 0x40
 8001a06:	d067      	beq.n	8001ad8 <HAL_TIM_ConfigClockSource+0x120>
 8001a08:	2b40      	cmp	r3, #64	; 0x40
 8001a0a:	d80b      	bhi.n	8001a24 <HAL_TIM_ConfigClockSource+0x6c>
 8001a0c:	2b10      	cmp	r3, #16
 8001a0e:	d073      	beq.n	8001af8 <HAL_TIM_ConfigClockSource+0x140>
 8001a10:	2b10      	cmp	r3, #16
 8001a12:	d802      	bhi.n	8001a1a <HAL_TIM_ConfigClockSource+0x62>
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d06f      	beq.n	8001af8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001a18:	e078      	b.n	8001b0c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001a1a:	2b20      	cmp	r3, #32
 8001a1c:	d06c      	beq.n	8001af8 <HAL_TIM_ConfigClockSource+0x140>
 8001a1e:	2b30      	cmp	r3, #48	; 0x30
 8001a20:	d06a      	beq.n	8001af8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001a22:	e073      	b.n	8001b0c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001a24:	2b70      	cmp	r3, #112	; 0x70
 8001a26:	d00d      	beq.n	8001a44 <HAL_TIM_ConfigClockSource+0x8c>
 8001a28:	2b70      	cmp	r3, #112	; 0x70
 8001a2a:	d804      	bhi.n	8001a36 <HAL_TIM_ConfigClockSource+0x7e>
 8001a2c:	2b50      	cmp	r3, #80	; 0x50
 8001a2e:	d033      	beq.n	8001a98 <HAL_TIM_ConfigClockSource+0xe0>
 8001a30:	2b60      	cmp	r3, #96	; 0x60
 8001a32:	d041      	beq.n	8001ab8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001a34:	e06a      	b.n	8001b0c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a3a:	d066      	beq.n	8001b0a <HAL_TIM_ConfigClockSource+0x152>
 8001a3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a40:	d017      	beq.n	8001a72 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001a42:	e063      	b.n	8001b0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6818      	ldr	r0, [r3, #0]
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	6899      	ldr	r1, [r3, #8]
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685a      	ldr	r2, [r3, #4]
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	f000 fc0a 	bl	800226c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001a66:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	68fa      	ldr	r2, [r7, #12]
 8001a6e:	609a      	str	r2, [r3, #8]
      break;
 8001a70:	e04c      	b.n	8001b0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6818      	ldr	r0, [r3, #0]
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	6899      	ldr	r1, [r3, #8]
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685a      	ldr	r2, [r3, #4]
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	f000 fbf3 	bl	800226c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a94:	609a      	str	r2, [r3, #8]
      break;
 8001a96:	e039      	b.n	8001b0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6818      	ldr	r0, [r3, #0]
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	6859      	ldr	r1, [r3, #4]
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	f000 fb67 	bl	8002178 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2150      	movs	r1, #80	; 0x50
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f000 fbc0 	bl	8002236 <TIM_ITRx_SetConfig>
      break;
 8001ab6:	e029      	b.n	8001b0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6818      	ldr	r0, [r3, #0]
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	6859      	ldr	r1, [r3, #4]
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	f000 fb86 	bl	80021d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2160      	movs	r1, #96	; 0x60
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f000 fbb0 	bl	8002236 <TIM_ITRx_SetConfig>
      break;
 8001ad6:	e019      	b.n	8001b0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6818      	ldr	r0, [r3, #0]
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	6859      	ldr	r1, [r3, #4]
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	f000 fb47 	bl	8002178 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2140      	movs	r1, #64	; 0x40
 8001af0:	4618      	mov	r0, r3
 8001af2:	f000 fba0 	bl	8002236 <TIM_ITRx_SetConfig>
      break;
 8001af6:	e009      	b.n	8001b0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4619      	mov	r1, r3
 8001b02:	4610      	mov	r0, r2
 8001b04:	f000 fb97 	bl	8002236 <TIM_ITRx_SetConfig>
      break;
 8001b08:	e000      	b.n	8001b0c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001b0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	fffeff88 	.word	0xfffeff88

08001b2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a40      	ldr	r2, [pc, #256]	; (8001c90 <TIM_Base_SetConfig+0x114>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d013      	beq.n	8001bbc <TIM_Base_SetConfig+0x40>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b9a:	d00f      	beq.n	8001bbc <TIM_Base_SetConfig+0x40>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4a3d      	ldr	r2, [pc, #244]	; (8001c94 <TIM_Base_SetConfig+0x118>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d00b      	beq.n	8001bbc <TIM_Base_SetConfig+0x40>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	4a3c      	ldr	r2, [pc, #240]	; (8001c98 <TIM_Base_SetConfig+0x11c>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d007      	beq.n	8001bbc <TIM_Base_SetConfig+0x40>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4a3b      	ldr	r2, [pc, #236]	; (8001c9c <TIM_Base_SetConfig+0x120>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d003      	beq.n	8001bbc <TIM_Base_SetConfig+0x40>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4a3a      	ldr	r2, [pc, #232]	; (8001ca0 <TIM_Base_SetConfig+0x124>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d108      	bne.n	8001bce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	68fa      	ldr	r2, [r7, #12]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a2f      	ldr	r2, [pc, #188]	; (8001c90 <TIM_Base_SetConfig+0x114>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d02b      	beq.n	8001c2e <TIM_Base_SetConfig+0xb2>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bdc:	d027      	beq.n	8001c2e <TIM_Base_SetConfig+0xb2>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a2c      	ldr	r2, [pc, #176]	; (8001c94 <TIM_Base_SetConfig+0x118>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d023      	beq.n	8001c2e <TIM_Base_SetConfig+0xb2>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a2b      	ldr	r2, [pc, #172]	; (8001c98 <TIM_Base_SetConfig+0x11c>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d01f      	beq.n	8001c2e <TIM_Base_SetConfig+0xb2>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a2a      	ldr	r2, [pc, #168]	; (8001c9c <TIM_Base_SetConfig+0x120>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d01b      	beq.n	8001c2e <TIM_Base_SetConfig+0xb2>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a29      	ldr	r2, [pc, #164]	; (8001ca0 <TIM_Base_SetConfig+0x124>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d017      	beq.n	8001c2e <TIM_Base_SetConfig+0xb2>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a28      	ldr	r2, [pc, #160]	; (8001ca4 <TIM_Base_SetConfig+0x128>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d013      	beq.n	8001c2e <TIM_Base_SetConfig+0xb2>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a27      	ldr	r2, [pc, #156]	; (8001ca8 <TIM_Base_SetConfig+0x12c>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d00f      	beq.n	8001c2e <TIM_Base_SetConfig+0xb2>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a26      	ldr	r2, [pc, #152]	; (8001cac <TIM_Base_SetConfig+0x130>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d00b      	beq.n	8001c2e <TIM_Base_SetConfig+0xb2>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a25      	ldr	r2, [pc, #148]	; (8001cb0 <TIM_Base_SetConfig+0x134>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d007      	beq.n	8001c2e <TIM_Base_SetConfig+0xb2>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a24      	ldr	r2, [pc, #144]	; (8001cb4 <TIM_Base_SetConfig+0x138>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d003      	beq.n	8001c2e <TIM_Base_SetConfig+0xb2>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a23      	ldr	r2, [pc, #140]	; (8001cb8 <TIM_Base_SetConfig+0x13c>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d108      	bne.n	8001c40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	68fa      	ldr	r2, [r7, #12]
 8001c52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	689a      	ldr	r2, [r3, #8]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4a0a      	ldr	r2, [pc, #40]	; (8001c90 <TIM_Base_SetConfig+0x114>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d003      	beq.n	8001c74 <TIM_Base_SetConfig+0xf8>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4a0c      	ldr	r2, [pc, #48]	; (8001ca0 <TIM_Base_SetConfig+0x124>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d103      	bne.n	8001c7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	691a      	ldr	r2, [r3, #16]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	615a      	str	r2, [r3, #20]
}
 8001c82:	bf00      	nop
 8001c84:	3714      	adds	r7, #20
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	40010000 	.word	0x40010000
 8001c94:	40000400 	.word	0x40000400
 8001c98:	40000800 	.word	0x40000800
 8001c9c:	40000c00 	.word	0x40000c00
 8001ca0:	40010400 	.word	0x40010400
 8001ca4:	40014000 	.word	0x40014000
 8001ca8:	40014400 	.word	0x40014400
 8001cac:	40014800 	.word	0x40014800
 8001cb0:	40001800 	.word	0x40001800
 8001cb4:	40001c00 	.word	0x40001c00
 8001cb8:	40002000 	.word	0x40002000

08001cbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b087      	sub	sp, #28
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a1b      	ldr	r3, [r3, #32]
 8001cca:	f023 0201 	bic.w	r2, r3, #1
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a1b      	ldr	r3, [r3, #32]
 8001cd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	699b      	ldr	r3, [r3, #24]
 8001ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	4b2b      	ldr	r3, [pc, #172]	; (8001d94 <TIM_OC1_SetConfig+0xd8>)
 8001ce8:	4013      	ands	r3, r2
 8001cea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f023 0303 	bic.w	r3, r3, #3
 8001cf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	f023 0302 	bic.w	r3, r3, #2
 8001d04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a21      	ldr	r2, [pc, #132]	; (8001d98 <TIM_OC1_SetConfig+0xdc>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d003      	beq.n	8001d20 <TIM_OC1_SetConfig+0x64>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a20      	ldr	r2, [pc, #128]	; (8001d9c <TIM_OC1_SetConfig+0xe0>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d10c      	bne.n	8001d3a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	f023 0308 	bic.w	r3, r3, #8
 8001d26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	697a      	ldr	r2, [r7, #20]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	f023 0304 	bic.w	r3, r3, #4
 8001d38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a16      	ldr	r2, [pc, #88]	; (8001d98 <TIM_OC1_SetConfig+0xdc>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d003      	beq.n	8001d4a <TIM_OC1_SetConfig+0x8e>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a15      	ldr	r2, [pc, #84]	; (8001d9c <TIM_OC1_SetConfig+0xe0>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d111      	bne.n	8001d6e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001d58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685a      	ldr	r2, [r3, #4]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	697a      	ldr	r2, [r7, #20]
 8001d86:	621a      	str	r2, [r3, #32]
}
 8001d88:	bf00      	nop
 8001d8a:	371c      	adds	r7, #28
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	fffeff8f 	.word	0xfffeff8f
 8001d98:	40010000 	.word	0x40010000
 8001d9c:	40010400 	.word	0x40010400

08001da0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b087      	sub	sp, #28
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a1b      	ldr	r3, [r3, #32]
 8001dae:	f023 0210 	bic.w	r2, r3, #16
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a1b      	ldr	r3, [r3, #32]
 8001dba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	4b2e      	ldr	r3, [pc, #184]	; (8001e84 <TIM_OC2_SetConfig+0xe4>)
 8001dcc:	4013      	ands	r3, r2
 8001dce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	021b      	lsls	r3, r3, #8
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	f023 0320 	bic.w	r3, r3, #32
 8001dea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	011b      	lsls	r3, r3, #4
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a23      	ldr	r2, [pc, #140]	; (8001e88 <TIM_OC2_SetConfig+0xe8>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d003      	beq.n	8001e08 <TIM_OC2_SetConfig+0x68>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a22      	ldr	r2, [pc, #136]	; (8001e8c <TIM_OC2_SetConfig+0xec>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d10d      	bne.n	8001e24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	011b      	lsls	r3, r3, #4
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a18      	ldr	r2, [pc, #96]	; (8001e88 <TIM_OC2_SetConfig+0xe8>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d003      	beq.n	8001e34 <TIM_OC2_SetConfig+0x94>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a17      	ldr	r2, [pc, #92]	; (8001e8c <TIM_OC2_SetConfig+0xec>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d113      	bne.n	8001e5c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001e42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	695b      	ldr	r3, [r3, #20]
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	68fa      	ldr	r2, [r7, #12]
 8001e66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	621a      	str	r2, [r3, #32]
}
 8001e76:	bf00      	nop
 8001e78:	371c      	adds	r7, #28
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	feff8fff 	.word	0xfeff8fff
 8001e88:	40010000 	.word	0x40010000
 8001e8c:	40010400 	.word	0x40010400

08001e90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b087      	sub	sp, #28
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
 8001e9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a1b      	ldr	r3, [r3, #32]
 8001eaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	4b2d      	ldr	r3, [pc, #180]	; (8001f70 <TIM_OC3_SetConfig+0xe0>)
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f023 0303 	bic.w	r3, r3, #3
 8001ec6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	68fa      	ldr	r2, [r7, #12]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001ed8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	021b      	lsls	r3, r3, #8
 8001ee0:	697a      	ldr	r2, [r7, #20]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a22      	ldr	r2, [pc, #136]	; (8001f74 <TIM_OC3_SetConfig+0xe4>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d003      	beq.n	8001ef6 <TIM_OC3_SetConfig+0x66>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a21      	ldr	r2, [pc, #132]	; (8001f78 <TIM_OC3_SetConfig+0xe8>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d10d      	bne.n	8001f12 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001efc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	021b      	lsls	r3, r3, #8
 8001f04:	697a      	ldr	r2, [r7, #20]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a17      	ldr	r2, [pc, #92]	; (8001f74 <TIM_OC3_SetConfig+0xe4>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d003      	beq.n	8001f22 <TIM_OC3_SetConfig+0x92>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a16      	ldr	r2, [pc, #88]	; (8001f78 <TIM_OC3_SetConfig+0xe8>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d113      	bne.n	8001f4a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001f30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	011b      	lsls	r3, r3, #4
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	011b      	lsls	r3, r3, #4
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685a      	ldr	r2, [r3, #4]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	697a      	ldr	r2, [r7, #20]
 8001f62:	621a      	str	r2, [r3, #32]
}
 8001f64:	bf00      	nop
 8001f66:	371c      	adds	r7, #28
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	fffeff8f 	.word	0xfffeff8f
 8001f74:	40010000 	.word	0x40010000
 8001f78:	40010400 	.word	0x40010400

08001f7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b087      	sub	sp, #28
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a1b      	ldr	r3, [r3, #32]
 8001f8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a1b      	ldr	r3, [r3, #32]
 8001f96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	4b1e      	ldr	r3, [pc, #120]	; (8002020 <TIM_OC4_SetConfig+0xa4>)
 8001fa8:	4013      	ands	r3, r2
 8001faa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	021b      	lsls	r3, r3, #8
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001fc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	031b      	lsls	r3, r3, #12
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a13      	ldr	r2, [pc, #76]	; (8002024 <TIM_OC4_SetConfig+0xa8>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d003      	beq.n	8001fe4 <TIM_OC4_SetConfig+0x68>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a12      	ldr	r2, [pc, #72]	; (8002028 <TIM_OC4_SetConfig+0xac>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d109      	bne.n	8001ff8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001fea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	695b      	ldr	r3, [r3, #20]
 8001ff0:	019b      	lsls	r3, r3, #6
 8001ff2:	697a      	ldr	r2, [r7, #20]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	697a      	ldr	r2, [r7, #20]
 8001ffc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	621a      	str	r2, [r3, #32]
}
 8002012:	bf00      	nop
 8002014:	371c      	adds	r7, #28
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	feff8fff 	.word	0xfeff8fff
 8002024:	40010000 	.word	0x40010000
 8002028:	40010400 	.word	0x40010400

0800202c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800202c:	b480      	push	{r7}
 800202e:	b087      	sub	sp, #28
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a1b      	ldr	r3, [r3, #32]
 800203a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	4b1b      	ldr	r3, [pc, #108]	; (80020c4 <TIM_OC5_SetConfig+0x98>)
 8002058:	4013      	ands	r3, r2
 800205a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	4313      	orrs	r3, r2
 8002064:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800206c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	041b      	lsls	r3, r3, #16
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	4313      	orrs	r3, r2
 8002078:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a12      	ldr	r2, [pc, #72]	; (80020c8 <TIM_OC5_SetConfig+0x9c>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d003      	beq.n	800208a <TIM_OC5_SetConfig+0x5e>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a11      	ldr	r2, [pc, #68]	; (80020cc <TIM_OC5_SetConfig+0xa0>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d109      	bne.n	800209e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002090:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	021b      	lsls	r3, r3, #8
 8002098:	697a      	ldr	r2, [r7, #20]
 800209a:	4313      	orrs	r3, r2
 800209c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	697a      	ldr	r2, [r7, #20]
 80020a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	621a      	str	r2, [r3, #32]
}
 80020b8:	bf00      	nop
 80020ba:	371c      	adds	r7, #28
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	fffeff8f 	.word	0xfffeff8f
 80020c8:	40010000 	.word	0x40010000
 80020cc:	40010400 	.word	0x40010400

080020d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b087      	sub	sp, #28
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a1b      	ldr	r3, [r3, #32]
 80020ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	4b1c      	ldr	r3, [pc, #112]	; (800216c <TIM_OC6_SetConfig+0x9c>)
 80020fc:	4013      	ands	r3, r2
 80020fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	021b      	lsls	r3, r3, #8
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	4313      	orrs	r3, r2
 800210a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002112:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	051b      	lsls	r3, r3, #20
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	4313      	orrs	r3, r2
 800211e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a13      	ldr	r2, [pc, #76]	; (8002170 <TIM_OC6_SetConfig+0xa0>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d003      	beq.n	8002130 <TIM_OC6_SetConfig+0x60>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a12      	ldr	r2, [pc, #72]	; (8002174 <TIM_OC6_SetConfig+0xa4>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d109      	bne.n	8002144 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002136:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	029b      	lsls	r3, r3, #10
 800213e:	697a      	ldr	r2, [r7, #20]
 8002140:	4313      	orrs	r3, r2
 8002142:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685a      	ldr	r2, [r3, #4]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	621a      	str	r2, [r3, #32]
}
 800215e:	bf00      	nop
 8002160:	371c      	adds	r7, #28
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	feff8fff 	.word	0xfeff8fff
 8002170:	40010000 	.word	0x40010000
 8002174:	40010400 	.word	0x40010400

08002178 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002178:	b480      	push	{r7}
 800217a:	b087      	sub	sp, #28
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6a1b      	ldr	r3, [r3, #32]
 800218e:	f023 0201 	bic.w	r2, r3, #1
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	011b      	lsls	r3, r3, #4
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	f023 030a 	bic.w	r3, r3, #10
 80021b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	621a      	str	r2, [r3, #32]
}
 80021ca:	bf00      	nop
 80021cc:	371c      	adds	r7, #28
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr

080021d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b087      	sub	sp, #28
 80021da:	af00      	add	r7, sp, #0
 80021dc:	60f8      	str	r0, [r7, #12]
 80021de:	60b9      	str	r1, [r7, #8]
 80021e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	f023 0210 	bic.w	r2, r3, #16
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002200:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	031b      	lsls	r3, r3, #12
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	4313      	orrs	r3, r2
 800220a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002212:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	011b      	lsls	r3, r3, #4
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	4313      	orrs	r3, r2
 800221c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	621a      	str	r2, [r3, #32]
}
 800222a:	bf00      	nop
 800222c:	371c      	adds	r7, #28
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002236:	b480      	push	{r7}
 8002238:	b085      	sub	sp, #20
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
 800223e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800224c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	4313      	orrs	r3, r2
 8002254:	f043 0307 	orr.w	r3, r3, #7
 8002258:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	609a      	str	r2, [r3, #8]
}
 8002260:	bf00      	nop
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800226c:	b480      	push	{r7}
 800226e:	b087      	sub	sp, #28
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
 8002278:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002286:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	021a      	lsls	r2, r3, #8
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	431a      	orrs	r2, r3
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	4313      	orrs	r3, r2
 8002294:	697a      	ldr	r2, [r7, #20]
 8002296:	4313      	orrs	r3, r2
 8002298:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	609a      	str	r2, [r3, #8]
}
 80022a0:	bf00      	nop
 80022a2:	371c      	adds	r7, #28
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b087      	sub	sp, #28
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	f003 031f 	and.w	r3, r3, #31
 80022be:	2201      	movs	r2, #1
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6a1a      	ldr	r2, [r3, #32]
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	43db      	mvns	r3, r3
 80022ce:	401a      	ands	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6a1a      	ldr	r2, [r3, #32]
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	f003 031f 	and.w	r3, r3, #31
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	fa01 f303 	lsl.w	r3, r1, r3
 80022e4:	431a      	orrs	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	621a      	str	r2, [r3, #32]
}
 80022ea:	bf00      	nop
 80022ec:	371c      	adds	r7, #28
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
	...

080022f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002308:	2b01      	cmp	r3, #1
 800230a:	d101      	bne.n	8002310 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800230c:	2302      	movs	r3, #2
 800230e:	e045      	b.n	800239c <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2202      	movs	r2, #2
 800231c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a1c      	ldr	r2, [pc, #112]	; (80023a8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d004      	beq.n	8002344 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a1b      	ldr	r2, [pc, #108]	; (80023ac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d108      	bne.n	8002356 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800234a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	4313      	orrs	r3, r2
 8002354:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800235c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	4313      	orrs	r3, r2
 8002366:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800236e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	68ba      	ldr	r2, [r7, #8]
 8002376:	4313      	orrs	r3, r2
 8002378:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68ba      	ldr	r2, [r7, #8]
 8002388:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2201      	movs	r2, #1
 800238e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3714      	adds	r7, #20
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	40010000 	.word	0x40010000
 80023ac:	40010400 	.word	0x40010400

080023b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d101      	bne.n	80023cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80023c8:	2302      	movs	r3, #2
 80023ca:	e065      	b.n	8002498 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	4313      	orrs	r3, r2
 80023e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4313      	orrs	r3, r2
 800240a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	4313      	orrs	r3, r2
 8002418:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	695b      	ldr	r3, [r3, #20]
 8002424:	4313      	orrs	r3, r2
 8002426:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002432:	4313      	orrs	r3, r2
 8002434:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	041b      	lsls	r3, r3, #16
 8002442:	4313      	orrs	r3, r2
 8002444:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a16      	ldr	r2, [pc, #88]	; (80024a4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d004      	beq.n	800245a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a14      	ldr	r2, [pc, #80]	; (80024a8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d115      	bne.n	8002486 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002464:	051b      	lsls	r3, r3, #20
 8002466:	4313      	orrs	r3, r2
 8002468:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	69db      	ldr	r3, [r3, #28]
 8002474:	4313      	orrs	r3, r2
 8002476:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	4313      	orrs	r3, r2
 8002484:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	40010000 	.word	0x40010000
 80024a8:	40010400 	.word	0x40010400

080024ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024ec:	f7fe f80c 	bl	8000508 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024f0:	f000 f820 	bl	8002534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024f4:	f000 f932 	bl	800275c <MX_GPIO_Init>
  MX_TIM1_Init();
 80024f8:	f000 f884 	bl	8002604 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80024fc:	2100      	movs	r1, #0
 80024fe:	480b      	ldr	r0, [pc, #44]	; (800252c <main+0x44>)
 8002500:	f7fe ffde 	bl	80014c0 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while(i>0){
 8002504:	e00c      	b.n	8002520 <main+0x38>
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, i);
 8002506:	4b0a      	ldr	r3, [pc, #40]	; (8002530 <main+0x48>)
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	4b08      	ldr	r3, [pc, #32]	; (800252c <main+0x44>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	635a      	str	r2, [r3, #52]	; 0x34
	  	  		i--;
 8002510:	4b07      	ldr	r3, [pc, #28]	; (8002530 <main+0x48>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	3b01      	subs	r3, #1
 8002516:	4a06      	ldr	r2, [pc, #24]	; (8002530 <main+0x48>)
 8002518:	6013      	str	r3, [r2, #0]
	  	  		HAL_Delay(20);
 800251a:	2014      	movs	r0, #20
 800251c:	f7fe f822 	bl	8000564 <HAL_Delay>
	  while(i>0){
 8002520:	4b03      	ldr	r3, [pc, #12]	; (8002530 <main+0x48>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2b00      	cmp	r3, #0
 8002526:	dcee      	bgt.n	8002506 <main+0x1e>
 8002528:	e7fa      	b.n	8002520 <main+0x38>
 800252a:	bf00      	nop
 800252c:	2000002c 	.word	0x2000002c
 8002530:	20000004 	.word	0x20000004

08002534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b094      	sub	sp, #80	; 0x50
 8002538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800253a:	f107 0320 	add.w	r3, r7, #32
 800253e:	2230      	movs	r2, #48	; 0x30
 8002540:	2100      	movs	r1, #0
 8002542:	4618      	mov	r0, r3
 8002544:	f000 fb28 	bl	8002b98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002548:	f107 030c 	add.w	r3, r7, #12
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	605a      	str	r2, [r3, #4]
 8002552:	609a      	str	r2, [r3, #8]
 8002554:	60da      	str	r2, [r3, #12]
 8002556:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002558:	4b28      	ldr	r3, [pc, #160]	; (80025fc <SystemClock_Config+0xc8>)
 800255a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255c:	4a27      	ldr	r2, [pc, #156]	; (80025fc <SystemClock_Config+0xc8>)
 800255e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002562:	6413      	str	r3, [r2, #64]	; 0x40
 8002564:	4b25      	ldr	r3, [pc, #148]	; (80025fc <SystemClock_Config+0xc8>)
 8002566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256c:	60bb      	str	r3, [r7, #8]
 800256e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002570:	4b23      	ldr	r3, [pc, #140]	; (8002600 <SystemClock_Config+0xcc>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002578:	4a21      	ldr	r2, [pc, #132]	; (8002600 <SystemClock_Config+0xcc>)
 800257a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800257e:	6013      	str	r3, [r2, #0]
 8002580:	4b1f      	ldr	r3, [pc, #124]	; (8002600 <SystemClock_Config+0xcc>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002588:	607b      	str	r3, [r7, #4]
 800258a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800258c:	2302      	movs	r3, #2
 800258e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002590:	2301      	movs	r3, #1
 8002592:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002594:	2310      	movs	r3, #16
 8002596:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002598:	2302      	movs	r3, #2
 800259a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800259c:	2300      	movs	r3, #0
 800259e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 10;
 80025a0:	230a      	movs	r3, #10
 80025a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 210;
 80025a4:	23d2      	movs	r3, #210	; 0xd2
 80025a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80025a8:	2302      	movs	r3, #2
 80025aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80025ac:	2302      	movs	r3, #2
 80025ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025b0:	f107 0320 	add.w	r3, r7, #32
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7fe fa9b 	bl	8000af0 <HAL_RCC_OscConfig>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80025c0:	f000 f94a 	bl	8002858 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025c4:	230f      	movs	r3, #15
 80025c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025c8:	2302      	movs	r3, #2
 80025ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025cc:	2300      	movs	r3, #0
 80025ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80025d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80025d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80025d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80025dc:	f107 030c 	add.w	r3, r7, #12
 80025e0:	2105      	movs	r1, #5
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7fe fcf4 	bl	8000fd0 <HAL_RCC_ClockConfig>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80025ee:	f000 f933 	bl	8002858 <Error_Handler>
  }
}
 80025f2:	bf00      	nop
 80025f4:	3750      	adds	r7, #80	; 0x50
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	40023800 	.word	0x40023800
 8002600:	40007000 	.word	0x40007000

08002604 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b09a      	sub	sp, #104	; 0x68
 8002608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800260a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	605a      	str	r2, [r3, #4]
 8002614:	609a      	str	r2, [r3, #8]
 8002616:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002618:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	605a      	str	r2, [r3, #4]
 8002622:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002624:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	605a      	str	r2, [r3, #4]
 800262e:	609a      	str	r2, [r3, #8]
 8002630:	60da      	str	r2, [r3, #12]
 8002632:	611a      	str	r2, [r3, #16]
 8002634:	615a      	str	r2, [r3, #20]
 8002636:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002638:	1d3b      	adds	r3, r7, #4
 800263a:	222c      	movs	r2, #44	; 0x2c
 800263c:	2100      	movs	r1, #0
 800263e:	4618      	mov	r0, r3
 8002640:	f000 faaa 	bl	8002b98 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002644:	4b43      	ldr	r3, [pc, #268]	; (8002754 <MX_TIM1_Init+0x150>)
 8002646:	4a44      	ldr	r2, [pc, #272]	; (8002758 <MX_TIM1_Init+0x154>)
 8002648:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168;
 800264a:	4b42      	ldr	r3, [pc, #264]	; (8002754 <MX_TIM1_Init+0x150>)
 800264c:	22a8      	movs	r2, #168	; 0xa8
 800264e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002650:	4b40      	ldr	r3, [pc, #256]	; (8002754 <MX_TIM1_Init+0x150>)
 8002652:	2200      	movs	r2, #0
 8002654:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8002656:	4b3f      	ldr	r3, [pc, #252]	; (8002754 <MX_TIM1_Init+0x150>)
 8002658:	2264      	movs	r2, #100	; 0x64
 800265a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800265c:	4b3d      	ldr	r3, [pc, #244]	; (8002754 <MX_TIM1_Init+0x150>)
 800265e:	2200      	movs	r2, #0
 8002660:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002662:	4b3c      	ldr	r3, [pc, #240]	; (8002754 <MX_TIM1_Init+0x150>)
 8002664:	2200      	movs	r2, #0
 8002666:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002668:	4b3a      	ldr	r3, [pc, #232]	; (8002754 <MX_TIM1_Init+0x150>)
 800266a:	2200      	movs	r2, #0
 800266c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800266e:	4839      	ldr	r0, [pc, #228]	; (8002754 <MX_TIM1_Init+0x150>)
 8002670:	f7fe fe9a 	bl	80013a8 <HAL_TIM_Base_Init>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800267a:	f000 f8ed 	bl	8002858 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800267e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002682:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002684:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002688:	4619      	mov	r1, r3
 800268a:	4832      	ldr	r0, [pc, #200]	; (8002754 <MX_TIM1_Init+0x150>)
 800268c:	f7ff f994 	bl	80019b8 <HAL_TIM_ConfigClockSource>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002696:	f000 f8df 	bl	8002858 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800269a:	482e      	ldr	r0, [pc, #184]	; (8002754 <MX_TIM1_Init+0x150>)
 800269c:	f7fe feda 	bl	8001454 <HAL_TIM_PWM_Init>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80026a6:	f000 f8d7 	bl	8002858 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026aa:	2300      	movs	r3, #0
 80026ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80026ae:	2300      	movs	r3, #0
 80026b0:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026b2:	2300      	movs	r3, #0
 80026b4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80026b6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80026ba:	4619      	mov	r1, r3
 80026bc:	4825      	ldr	r0, [pc, #148]	; (8002754 <MX_TIM1_Init+0x150>)
 80026be:	f7ff fe1b 	bl	80022f8 <HAL_TIMEx_MasterConfigSynchronization>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80026c8:	f000 f8c6 	bl	8002858 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026cc:	2360      	movs	r3, #96	; 0x60
 80026ce:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80026d0:	2300      	movs	r3, #0
 80026d2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026d4:	2300      	movs	r3, #0
 80026d6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80026d8:	2300      	movs	r3, #0
 80026da:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026dc:	2300      	movs	r3, #0
 80026de:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80026e0:	2300      	movs	r3, #0
 80026e2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80026e4:	2300      	movs	r3, #0
 80026e6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026ec:	2200      	movs	r2, #0
 80026ee:	4619      	mov	r1, r3
 80026f0:	4818      	ldr	r0, [pc, #96]	; (8002754 <MX_TIM1_Init+0x150>)
 80026f2:	f7ff f849 	bl	8001788 <HAL_TIM_PWM_ConfigChannel>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80026fc:	f000 f8ac 	bl	8002858 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002700:	2300      	movs	r3, #0
 8002702:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002704:	2300      	movs	r3, #0
 8002706:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002708:	2300      	movs	r3, #0
 800270a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800270c:	2300      	movs	r3, #0
 800270e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002710:	2300      	movs	r3, #0
 8002712:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002714:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002718:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800271a:	2300      	movs	r3, #0
 800271c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800271e:	2300      	movs	r3, #0
 8002720:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002722:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002726:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002728:	2300      	movs	r3, #0
 800272a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800272c:	2300      	movs	r3, #0
 800272e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002730:	1d3b      	adds	r3, r7, #4
 8002732:	4619      	mov	r1, r3
 8002734:	4807      	ldr	r0, [pc, #28]	; (8002754 <MX_TIM1_Init+0x150>)
 8002736:	f7ff fe3b 	bl	80023b0 <HAL_TIMEx_ConfigBreakDeadTime>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8002740:	f000 f88a 	bl	8002858 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002744:	4803      	ldr	r0, [pc, #12]	; (8002754 <MX_TIM1_Init+0x150>)
 8002746:	f000 f8d3 	bl	80028f0 <HAL_TIM_MspPostInit>

}
 800274a:	bf00      	nop
 800274c:	3768      	adds	r7, #104	; 0x68
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	2000002c 	.word	0x2000002c
 8002758:	40010000 	.word	0x40010000

0800275c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b08a      	sub	sp, #40	; 0x28
 8002760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002762:	f107 0314 	add.w	r3, r7, #20
 8002766:	2200      	movs	r2, #0
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	605a      	str	r2, [r3, #4]
 800276c:	609a      	str	r2, [r3, #8]
 800276e:	60da      	str	r2, [r3, #12]
 8002770:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002772:	4b24      	ldr	r3, [pc, #144]	; (8002804 <MX_GPIO_Init+0xa8>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	4a23      	ldr	r2, [pc, #140]	; (8002804 <MX_GPIO_Init+0xa8>)
 8002778:	f043 0302 	orr.w	r3, r3, #2
 800277c:	6313      	str	r3, [r2, #48]	; 0x30
 800277e:	4b21      	ldr	r3, [pc, #132]	; (8002804 <MX_GPIO_Init+0xa8>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	613b      	str	r3, [r7, #16]
 8002788:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800278a:	4b1e      	ldr	r3, [pc, #120]	; (8002804 <MX_GPIO_Init+0xa8>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	4a1d      	ldr	r2, [pc, #116]	; (8002804 <MX_GPIO_Init+0xa8>)
 8002790:	f043 0301 	orr.w	r3, r3, #1
 8002794:	6313      	str	r3, [r2, #48]	; 0x30
 8002796:	4b1b      	ldr	r3, [pc, #108]	; (8002804 <MX_GPIO_Init+0xa8>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027a2:	4b18      	ldr	r3, [pc, #96]	; (8002804 <MX_GPIO_Init+0xa8>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	4a17      	ldr	r2, [pc, #92]	; (8002804 <MX_GPIO_Init+0xa8>)
 80027a8:	f043 0304 	orr.w	r3, r3, #4
 80027ac:	6313      	str	r3, [r2, #48]	; 0x30
 80027ae:	4b15      	ldr	r3, [pc, #84]	; (8002804 <MX_GPIO_Init+0xa8>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	f003 0304 	and.w	r3, r3, #4
 80027b6:	60bb      	str	r3, [r7, #8]
 80027b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027ba:	4b12      	ldr	r3, [pc, #72]	; (8002804 <MX_GPIO_Init+0xa8>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	4a11      	ldr	r2, [pc, #68]	; (8002804 <MX_GPIO_Init+0xa8>)
 80027c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027c4:	6313      	str	r3, [r2, #48]	; 0x30
 80027c6:	4b0f      	ldr	r3, [pc, #60]	; (8002804 <MX_GPIO_Init+0xa8>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ce:	607b      	str	r3, [r7, #4]
 80027d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80027d2:	2310      	movs	r3, #16
 80027d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027d6:	4b0c      	ldr	r3, [pc, #48]	; (8002808 <MX_GPIO_Init+0xac>)
 80027d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80027da:	2302      	movs	r3, #2
 80027dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80027de:	f107 0314 	add.w	r3, r7, #20
 80027e2:	4619      	mov	r1, r3
 80027e4:	4809      	ldr	r0, [pc, #36]	; (800280c <MX_GPIO_Init+0xb0>)
 80027e6:	f7fd ffc1 	bl	800076c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 80027ea:	2200      	movs	r2, #0
 80027ec:	2101      	movs	r1, #1
 80027ee:	200a      	movs	r0, #10
 80027f0:	f7fd ff92 	bl	8000718 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80027f4:	200a      	movs	r0, #10
 80027f6:	f7fd ffab 	bl	8000750 <HAL_NVIC_EnableIRQ>

}
 80027fa:	bf00      	nop
 80027fc:	3728      	adds	r7, #40	; 0x28
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	40023800 	.word	0x40023800
 8002808:	10110000 	.word	0x10110000
 800280c:	40020400 	.word	0x40020400

08002810 <HAL_GPIO_EXTI_Callback>:
{
    HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
}*/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	4603      	mov	r3, r0
 8002818:	80fb      	strh	r3, [r7, #6]
    i += 10;
 800281a:	4b05      	ldr	r3, [pc, #20]	; (8002830 <HAL_GPIO_EXTI_Callback+0x20>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	330a      	adds	r3, #10
 8002820:	4a03      	ldr	r2, [pc, #12]	; (8002830 <HAL_GPIO_EXTI_Callback+0x20>)
 8002822:	6013      	str	r3, [r2, #0]
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	20000004 	.word	0x20000004

08002834 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a04      	ldr	r2, [pc, #16]	; (8002854 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d101      	bne.n	800284a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002846:	f7fd fe6d 	bl	8000524 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800284a:	bf00      	nop
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	40002000 	.word	0x40002000

08002858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800285c:	bf00      	nop
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
	...

08002868 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800286e:	4b0f      	ldr	r3, [pc, #60]	; (80028ac <HAL_MspInit+0x44>)
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	4a0e      	ldr	r2, [pc, #56]	; (80028ac <HAL_MspInit+0x44>)
 8002874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002878:	6413      	str	r3, [r2, #64]	; 0x40
 800287a:	4b0c      	ldr	r3, [pc, #48]	; (80028ac <HAL_MspInit+0x44>)
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002882:	607b      	str	r3, [r7, #4]
 8002884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002886:	4b09      	ldr	r3, [pc, #36]	; (80028ac <HAL_MspInit+0x44>)
 8002888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288a:	4a08      	ldr	r2, [pc, #32]	; (80028ac <HAL_MspInit+0x44>)
 800288c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002890:	6453      	str	r3, [r2, #68]	; 0x44
 8002892:	4b06      	ldr	r3, [pc, #24]	; (80028ac <HAL_MspInit+0x44>)
 8002894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002896:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800289a:	603b      	str	r3, [r7, #0]
 800289c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800289e:	bf00      	nop
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	40023800 	.word	0x40023800

080028b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a0a      	ldr	r2, [pc, #40]	; (80028e8 <HAL_TIM_Base_MspInit+0x38>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d10b      	bne.n	80028da <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028c2:	4b0a      	ldr	r3, [pc, #40]	; (80028ec <HAL_TIM_Base_MspInit+0x3c>)
 80028c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c6:	4a09      	ldr	r2, [pc, #36]	; (80028ec <HAL_TIM_Base_MspInit+0x3c>)
 80028c8:	f043 0301 	orr.w	r3, r3, #1
 80028cc:	6453      	str	r3, [r2, #68]	; 0x44
 80028ce:	4b07      	ldr	r3, [pc, #28]	; (80028ec <HAL_TIM_Base_MspInit+0x3c>)
 80028d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	60fb      	str	r3, [r7, #12]
 80028d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80028da:	bf00      	nop
 80028dc:	3714      	adds	r7, #20
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	40010000 	.word	0x40010000
 80028ec:	40023800 	.word	0x40023800

080028f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b088      	sub	sp, #32
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f8:	f107 030c 	add.w	r3, r7, #12
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	605a      	str	r2, [r3, #4]
 8002902:	609a      	str	r2, [r3, #8]
 8002904:	60da      	str	r2, [r3, #12]
 8002906:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a11      	ldr	r2, [pc, #68]	; (8002954 <HAL_TIM_MspPostInit+0x64>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d11c      	bne.n	800294c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002912:	4b11      	ldr	r3, [pc, #68]	; (8002958 <HAL_TIM_MspPostInit+0x68>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002916:	4a10      	ldr	r2, [pc, #64]	; (8002958 <HAL_TIM_MspPostInit+0x68>)
 8002918:	f043 0301 	orr.w	r3, r3, #1
 800291c:	6313      	str	r3, [r2, #48]	; 0x30
 800291e:	4b0e      	ldr	r3, [pc, #56]	; (8002958 <HAL_TIM_MspPostInit+0x68>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	60bb      	str	r3, [r7, #8]
 8002928:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800292a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800292e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002930:	2302      	movs	r3, #2
 8002932:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002934:	2300      	movs	r3, #0
 8002936:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002938:	2300      	movs	r3, #0
 800293a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800293c:	2301      	movs	r3, #1
 800293e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002940:	f107 030c 	add.w	r3, r7, #12
 8002944:	4619      	mov	r1, r3
 8002946:	4805      	ldr	r0, [pc, #20]	; (800295c <HAL_TIM_MspPostInit+0x6c>)
 8002948:	f7fd ff10 	bl	800076c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800294c:	bf00      	nop
 800294e:	3720      	adds	r7, #32
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40010000 	.word	0x40010000
 8002958:	40023800 	.word	0x40023800
 800295c:	40020000 	.word	0x40020000

08002960 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b08c      	sub	sp, #48	; 0x30
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002968:	2300      	movs	r3, #0
 800296a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800296c:	2300      	movs	r3, #0
 800296e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0); 
 8002970:	2200      	movs	r2, #0
 8002972:	6879      	ldr	r1, [r7, #4]
 8002974:	202d      	movs	r0, #45	; 0x2d
 8002976:	f7fd fecf 	bl	8000718 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn); 
 800297a:	202d      	movs	r0, #45	; 0x2d
 800297c:	f7fd fee8 	bl	8000750 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8002980:	4b1f      	ldr	r3, [pc, #124]	; (8002a00 <HAL_InitTick+0xa0>)
 8002982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002984:	4a1e      	ldr	r2, [pc, #120]	; (8002a00 <HAL_InitTick+0xa0>)
 8002986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800298a:	6413      	str	r3, [r2, #64]	; 0x40
 800298c:	4b1c      	ldr	r3, [pc, #112]	; (8002a00 <HAL_InitTick+0xa0>)
 800298e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002998:	f107 0210 	add.w	r2, r7, #16
 800299c:	f107 0314 	add.w	r3, r7, #20
 80029a0:	4611      	mov	r1, r2
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7fe fcce 	bl	8001344 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80029a8:	f7fe fcb8 	bl	800131c <HAL_RCC_GetPCLK1Freq>
 80029ac:	4603      	mov	r3, r0
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80029b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b4:	4a13      	ldr	r2, [pc, #76]	; (8002a04 <HAL_InitTick+0xa4>)
 80029b6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ba:	0c9b      	lsrs	r3, r3, #18
 80029bc:	3b01      	subs	r3, #1
 80029be:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80029c0:	4b11      	ldr	r3, [pc, #68]	; (8002a08 <HAL_InitTick+0xa8>)
 80029c2:	4a12      	ldr	r2, [pc, #72]	; (8002a0c <HAL_InitTick+0xac>)
 80029c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000 / 1000) - 1;
 80029c6:	4b10      	ldr	r3, [pc, #64]	; (8002a08 <HAL_InitTick+0xa8>)
 80029c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80029cc:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80029ce:	4a0e      	ldr	r2, [pc, #56]	; (8002a08 <HAL_InitTick+0xa8>)
 80029d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d2:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80029d4:	4b0c      	ldr	r3, [pc, #48]	; (8002a08 <HAL_InitTick+0xa8>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029da:	4b0b      	ldr	r3, [pc, #44]	; (8002a08 <HAL_InitTick+0xa8>)
 80029dc:	2200      	movs	r2, #0
 80029de:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 80029e0:	4809      	ldr	r0, [pc, #36]	; (8002a08 <HAL_InitTick+0xa8>)
 80029e2:	f7fe fce1 	bl	80013a8 <HAL_TIM_Base_Init>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d104      	bne.n	80029f6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 80029ec:	4806      	ldr	r0, [pc, #24]	; (8002a08 <HAL_InitTick+0xa8>)
 80029ee:	f7fe fd07 	bl	8001400 <HAL_TIM_Base_Start_IT>
 80029f2:	4603      	mov	r3, r0
 80029f4:	e000      	b.n	80029f8 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3730      	adds	r7, #48	; 0x30
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	40023800 	.word	0x40023800
 8002a04:	431bde83 	.word	0x431bde83
 8002a08:	2000006c 	.word	0x2000006c
 8002a0c:	40002000 	.word	0x40002000

08002a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002a14:	bf00      	nop
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a22:	e7fe      	b.n	8002a22 <HardFault_Handler+0x4>

08002a24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a28:	e7fe      	b.n	8002a28 <MemManage_Handler+0x4>

08002a2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a2e:	e7fe      	b.n	8002a2e <BusFault_Handler+0x4>

08002a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a34:	e7fe      	b.n	8002a34 <UsageFault_Handler+0x4>

08002a36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a36:	b480      	push	{r7}
 8002a38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a3a:	bf00      	nop
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a48:	bf00      	nop
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a52:	b480      	push	{r7}
 8002a54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a56:	bf00      	nop
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a64:	bf00      	nop
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002a72:	2010      	movs	r0, #16
 8002a74:	f7fe f824 	bl	8000ac0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002a78:	bf00      	nop
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002a80:	4802      	ldr	r0, [pc, #8]	; (8002a8c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002a82:	f7fe fd61 	bl	8001548 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002a86:	bf00      	nop
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	2000006c 	.word	0x2000006c

08002a90 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a94:	4b15      	ldr	r3, [pc, #84]	; (8002aec <SystemInit+0x5c>)
 8002a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9a:	4a14      	ldr	r2, [pc, #80]	; (8002aec <SystemInit+0x5c>)
 8002a9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002aa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002aa4:	4b12      	ldr	r3, [pc, #72]	; (8002af0 <SystemInit+0x60>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a11      	ldr	r2, [pc, #68]	; (8002af0 <SystemInit+0x60>)
 8002aaa:	f043 0301 	orr.w	r3, r3, #1
 8002aae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002ab0:	4b0f      	ldr	r3, [pc, #60]	; (8002af0 <SystemInit+0x60>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002ab6:	4b0e      	ldr	r3, [pc, #56]	; (8002af0 <SystemInit+0x60>)
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	490d      	ldr	r1, [pc, #52]	; (8002af0 <SystemInit+0x60>)
 8002abc:	4b0d      	ldr	r3, [pc, #52]	; (8002af4 <SystemInit+0x64>)
 8002abe:	4013      	ands	r3, r2
 8002ac0:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002ac2:	4b0b      	ldr	r3, [pc, #44]	; (8002af0 <SystemInit+0x60>)
 8002ac4:	4a0c      	ldr	r2, [pc, #48]	; (8002af8 <SystemInit+0x68>)
 8002ac6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002ac8:	4b09      	ldr	r3, [pc, #36]	; (8002af0 <SystemInit+0x60>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a08      	ldr	r2, [pc, #32]	; (8002af0 <SystemInit+0x60>)
 8002ace:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ad2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002ad4:	4b06      	ldr	r3, [pc, #24]	; (8002af0 <SystemInit+0x60>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002ada:	4b04      	ldr	r3, [pc, #16]	; (8002aec <SystemInit+0x5c>)
 8002adc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ae0:	609a      	str	r2, [r3, #8]
#endif
}
 8002ae2:	bf00      	nop
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr
 8002aec:	e000ed00 	.word	0xe000ed00
 8002af0:	40023800 	.word	0x40023800
 8002af4:	fef6ffff 	.word	0xfef6ffff
 8002af8:	24003010 	.word	0x24003010

08002afc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002afc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b34 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002b00:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002b02:	e003      	b.n	8002b0c <LoopCopyDataInit>

08002b04 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002b04:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002b06:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002b08:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002b0a:	3104      	adds	r1, #4

08002b0c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002b0c:	480b      	ldr	r0, [pc, #44]	; (8002b3c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002b0e:	4b0c      	ldr	r3, [pc, #48]	; (8002b40 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002b10:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002b12:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002b14:	d3f6      	bcc.n	8002b04 <CopyDataInit>
  ldr  r2, =_sbss
 8002b16:	4a0b      	ldr	r2, [pc, #44]	; (8002b44 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002b18:	e002      	b.n	8002b20 <LoopFillZerobss>

08002b1a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002b1a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002b1c:	f842 3b04 	str.w	r3, [r2], #4

08002b20 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002b20:	4b09      	ldr	r3, [pc, #36]	; (8002b48 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002b22:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002b24:	d3f9      	bcc.n	8002b1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b26:	f7ff ffb3 	bl	8002a90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b2a:	f000 f811 	bl	8002b50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b2e:	f7ff fcdb 	bl	80024e8 <main>
  bx  lr    
 8002b32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b34:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002b38:	08002be8 	.word	0x08002be8
  ldr  r0, =_sdata
 8002b3c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002b40:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002b44:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002b48:	200000ac 	.word	0x200000ac

08002b4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b4c:	e7fe      	b.n	8002b4c <ADC_IRQHandler>
	...

08002b50 <__libc_init_array>:
 8002b50:	b570      	push	{r4, r5, r6, lr}
 8002b52:	4e0d      	ldr	r6, [pc, #52]	; (8002b88 <__libc_init_array+0x38>)
 8002b54:	4c0d      	ldr	r4, [pc, #52]	; (8002b8c <__libc_init_array+0x3c>)
 8002b56:	1ba4      	subs	r4, r4, r6
 8002b58:	10a4      	asrs	r4, r4, #2
 8002b5a:	2500      	movs	r5, #0
 8002b5c:	42a5      	cmp	r5, r4
 8002b5e:	d109      	bne.n	8002b74 <__libc_init_array+0x24>
 8002b60:	4e0b      	ldr	r6, [pc, #44]	; (8002b90 <__libc_init_array+0x40>)
 8002b62:	4c0c      	ldr	r4, [pc, #48]	; (8002b94 <__libc_init_array+0x44>)
 8002b64:	f000 f820 	bl	8002ba8 <_init>
 8002b68:	1ba4      	subs	r4, r4, r6
 8002b6a:	10a4      	asrs	r4, r4, #2
 8002b6c:	2500      	movs	r5, #0
 8002b6e:	42a5      	cmp	r5, r4
 8002b70:	d105      	bne.n	8002b7e <__libc_init_array+0x2e>
 8002b72:	bd70      	pop	{r4, r5, r6, pc}
 8002b74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b78:	4798      	blx	r3
 8002b7a:	3501      	adds	r5, #1
 8002b7c:	e7ee      	b.n	8002b5c <__libc_init_array+0xc>
 8002b7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b82:	4798      	blx	r3
 8002b84:	3501      	adds	r5, #1
 8002b86:	e7f2      	b.n	8002b6e <__libc_init_array+0x1e>
 8002b88:	08002be0 	.word	0x08002be0
 8002b8c:	08002be0 	.word	0x08002be0
 8002b90:	08002be0 	.word	0x08002be0
 8002b94:	08002be4 	.word	0x08002be4

08002b98 <memset>:
 8002b98:	4402      	add	r2, r0
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d100      	bne.n	8002ba2 <memset+0xa>
 8002ba0:	4770      	bx	lr
 8002ba2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ba6:	e7f9      	b.n	8002b9c <memset+0x4>

08002ba8 <_init>:
 8002ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002baa:	bf00      	nop
 8002bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bae:	bc08      	pop	{r3}
 8002bb0:	469e      	mov	lr, r3
 8002bb2:	4770      	bx	lr

08002bb4 <_fini>:
 8002bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bb6:	bf00      	nop
 8002bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bba:	bc08      	pop	{r3}
 8002bbc:	469e      	mov	lr, r3
 8002bbe:	4770      	bx	lr
