
LED_blinking_with_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f54  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800211c  0800211c  0001211c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002134  08002134  00020008  2**0
                  CONTENTS
  4 .ARM          00000008  08002134  08002134  00012134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800213c  0800213c  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800213c  0800213c  0001213c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002140  08002140  00012140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08002144  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  20000008  0800214c  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  0800214c  000200a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009583  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000014b9  00000000  00000000  000295bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000978  00000000  00000000  0002aa78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008c0  00000000  00000000  0002b3f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002387e  00000000  00000000  0002bcb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007a78  00000000  00000000  0004f52e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e032e  00000000  00000000  00056fa6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001372d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026fc  00000000  00000000  00137350  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000008 	.word	0x20000008
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08002104 	.word	0x08002104

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000000c 	.word	0x2000000c
 8000204:	08002104 	.word	0x08002104

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b972 	b.w	8000504 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	4688      	mov	r8, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14b      	bne.n	80002de <__udivmoddi4+0xa6>
 8000246:	428a      	cmp	r2, r1
 8000248:	4615      	mov	r5, r2
 800024a:	d967      	bls.n	800031c <__udivmoddi4+0xe4>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0720 	rsb	r7, r2, #32
 8000256:	fa01 f302 	lsl.w	r3, r1, r2
 800025a:	fa20 f707 	lsr.w	r7, r0, r7
 800025e:	4095      	lsls	r5, r2
 8000260:	ea47 0803 	orr.w	r8, r7, r3
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000270:	fa1f fc85 	uxth.w	ip, r5
 8000274:	fb0e 8817 	mls	r8, lr, r7, r8
 8000278:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027c:	fb07 f10c 	mul.w	r1, r7, ip
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18eb      	adds	r3, r5, r3
 8000286:	f107 30ff 	add.w	r0, r7, #4294967295
 800028a:	f080 811b 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8118 	bls.w	80004c4 <__udivmoddi4+0x28c>
 8000294:	3f02      	subs	r7, #2
 8000296:	442b      	add	r3, r5
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ac:	45a4      	cmp	ip, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	192c      	adds	r4, r5, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x290>
 80002ba:	45a4      	cmp	ip, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x290>
 80002c0:	3802      	subs	r0, #2
 80002c2:	442c      	add	r4, r5
 80002c4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c8:	eba4 040c 	sub.w	r4, r4, ip
 80002cc:	2700      	movs	r7, #0
 80002ce:	b11e      	cbz	r6, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c6 4300 	strd	r4, r3, [r6]
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xbe>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80eb 	beq.w	80004be <__udivmoddi4+0x286>
 80002e8:	2700      	movs	r7, #0
 80002ea:	e9c6 0100 	strd	r0, r1, [r6]
 80002ee:	4638      	mov	r0, r7
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f783 	clz	r7, r3
 80002fa:	2f00      	cmp	r7, #0
 80002fc:	d147      	bne.n	800038e <__udivmoddi4+0x156>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd0>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80fa 	bhi.w	80004fc <__udivmoddi4+0x2c4>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4698      	mov	r8, r3
 8000312:	2e00      	cmp	r6, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000316:	e9c6 4800 	strd	r4, r8, [r6]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa0>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xe8>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 808f 	bne.w	8000448 <__udivmoddi4+0x210>
 800032a:	1b49      	subs	r1, r1, r5
 800032c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000330:	fa1f f885 	uxth.w	r8, r5
 8000334:	2701      	movs	r7, #1
 8000336:	fbb1 fcfe 	udiv	ip, r1, lr
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000340:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000344:	fb08 f10c 	mul.w	r1, r8, ip
 8000348:	4299      	cmp	r1, r3
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x124>
 800034c:	18eb      	adds	r3, r5, r3
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4299      	cmp	r1, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 800035a:	4684      	mov	ip, r0
 800035c:	1a59      	subs	r1, r3, r1
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1410 	mls	r4, lr, r0, r1
 8000368:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x14c>
 8000374:	192c      	adds	r4, r5, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x14a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80b6 	bhi.w	80004ee <__udivmoddi4+0x2b6>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e79f      	b.n	80002ce <__udivmoddi4+0x96>
 800038e:	f1c7 0c20 	rsb	ip, r7, #32
 8000392:	40bb      	lsls	r3, r7
 8000394:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000398:	ea4e 0e03 	orr.w	lr, lr, r3
 800039c:	fa01 f407 	lsl.w	r4, r1, r7
 80003a0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003ac:	4325      	orrs	r5, r4
 80003ae:	fbb3 f9f8 	udiv	r9, r3, r8
 80003b2:	0c2c      	lsrs	r4, r5, #16
 80003b4:	fb08 3319 	mls	r3, r8, r9, r3
 80003b8:	fa1f fa8e 	uxth.w	sl, lr
 80003bc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c0:	fb09 f40a 	mul.w	r4, r9, sl
 80003c4:	429c      	cmp	r4, r3
 80003c6:	fa02 f207 	lsl.w	r2, r2, r7
 80003ca:	fa00 f107 	lsl.w	r1, r0, r7
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1e 0303 	adds.w	r3, lr, r3
 80003d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d8:	f080 8087 	bcs.w	80004ea <__udivmoddi4+0x2b2>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f240 8084 	bls.w	80004ea <__udivmoddi4+0x2b2>
 80003e2:	f1a9 0902 	sub.w	r9, r9, #2
 80003e6:	4473      	add	r3, lr
 80003e8:	1b1b      	subs	r3, r3, r4
 80003ea:	b2ad      	uxth	r5, r5
 80003ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f0:	fb08 3310 	mls	r3, r8, r0, r3
 80003f4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003fc:	45a2      	cmp	sl, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1e 0404 	adds.w	r4, lr, r4
 8000404:	f100 33ff 	add.w	r3, r0, #4294967295
 8000408:	d26b      	bcs.n	80004e2 <__udivmoddi4+0x2aa>
 800040a:	45a2      	cmp	sl, r4
 800040c:	d969      	bls.n	80004e2 <__udivmoddi4+0x2aa>
 800040e:	3802      	subs	r0, #2
 8000410:	4474      	add	r4, lr
 8000412:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000416:	fba0 8902 	umull	r8, r9, r0, r2
 800041a:	eba4 040a 	sub.w	r4, r4, sl
 800041e:	454c      	cmp	r4, r9
 8000420:	46c2      	mov	sl, r8
 8000422:	464b      	mov	r3, r9
 8000424:	d354      	bcc.n	80004d0 <__udivmoddi4+0x298>
 8000426:	d051      	beq.n	80004cc <__udivmoddi4+0x294>
 8000428:	2e00      	cmp	r6, #0
 800042a:	d069      	beq.n	8000500 <__udivmoddi4+0x2c8>
 800042c:	ebb1 050a 	subs.w	r5, r1, sl
 8000430:	eb64 0403 	sbc.w	r4, r4, r3
 8000434:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000438:	40fd      	lsrs	r5, r7
 800043a:	40fc      	lsrs	r4, r7
 800043c:	ea4c 0505 	orr.w	r5, ip, r5
 8000440:	e9c6 5400 	strd	r5, r4, [r6]
 8000444:	2700      	movs	r7, #0
 8000446:	e747      	b.n	80002d8 <__udivmoddi4+0xa0>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f703 	lsr.w	r7, r0, r3
 8000450:	4095      	lsls	r5, r2
 8000452:	fa01 f002 	lsl.w	r0, r1, r2
 8000456:	fa21 f303 	lsr.w	r3, r1, r3
 800045a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045e:	4338      	orrs	r0, r7
 8000460:	0c01      	lsrs	r1, r0, #16
 8000462:	fbb3 f7fe 	udiv	r7, r3, lr
 8000466:	fa1f f885 	uxth.w	r8, r5
 800046a:	fb0e 3317 	mls	r3, lr, r7, r3
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb07 f308 	mul.w	r3, r7, r8
 8000476:	428b      	cmp	r3, r1
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x256>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f107 3cff 	add.w	ip, r7, #4294967295
 8000484:	d22f      	bcs.n	80004e6 <__udivmoddi4+0x2ae>
 8000486:	428b      	cmp	r3, r1
 8000488:	d92d      	bls.n	80004e6 <__udivmoddi4+0x2ae>
 800048a:	3f02      	subs	r7, #2
 800048c:	4429      	add	r1, r5
 800048e:	1acb      	subs	r3, r1, r3
 8000490:	b281      	uxth	r1, r0
 8000492:	fbb3 f0fe 	udiv	r0, r3, lr
 8000496:	fb0e 3310 	mls	r3, lr, r0, r3
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb00 f308 	mul.w	r3, r0, r8
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x27e>
 80004a6:	1869      	adds	r1, r5, r1
 80004a8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ac:	d217      	bcs.n	80004de <__udivmoddi4+0x2a6>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d915      	bls.n	80004de <__udivmoddi4+0x2a6>
 80004b2:	3802      	subs	r0, #2
 80004b4:	4429      	add	r1, r5
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004bc:	e73b      	b.n	8000336 <__udivmoddi4+0xfe>
 80004be:	4637      	mov	r7, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e709      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c4:	4607      	mov	r7, r0
 80004c6:	e6e7      	b.n	8000298 <__udivmoddi4+0x60>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004cc:	4541      	cmp	r1, r8
 80004ce:	d2ab      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d4:	eb69 020e 	sbc.w	r2, r9, lr
 80004d8:	3801      	subs	r0, #1
 80004da:	4613      	mov	r3, r2
 80004dc:	e7a4      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004de:	4660      	mov	r0, ip
 80004e0:	e7e9      	b.n	80004b6 <__udivmoddi4+0x27e>
 80004e2:	4618      	mov	r0, r3
 80004e4:	e795      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e6:	4667      	mov	r7, ip
 80004e8:	e7d1      	b.n	800048e <__udivmoddi4+0x256>
 80004ea:	4681      	mov	r9, r0
 80004ec:	e77c      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004ee:	3802      	subs	r0, #2
 80004f0:	442c      	add	r4, r5
 80004f2:	e747      	b.n	8000384 <__udivmoddi4+0x14c>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	442b      	add	r3, r5
 80004fa:	e72f      	b.n	800035c <__udivmoddi4+0x124>
 80004fc:	4638      	mov	r0, r7
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xda>
 8000500:	4637      	mov	r7, r6
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0xa0>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800050c:	2003      	movs	r0, #3
 800050e:	f000 f8d6 	bl	80006be <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000512:	2000      	movs	r0, #0
 8000514:	f001 fcce 	bl	8001eb4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000518:	f001 fc84 	bl	8001e24 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800051c:	2300      	movs	r3, #0
}
 800051e:	4618      	mov	r0, r3
 8000520:	bd80      	pop	{r7, pc}
	...

08000524 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000528:	4b06      	ldr	r3, [pc, #24]	; (8000544 <HAL_IncTick+0x20>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	461a      	mov	r2, r3
 800052e:	4b06      	ldr	r3, [pc, #24]	; (8000548 <HAL_IncTick+0x24>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4413      	add	r3, r2
 8000534:	4a04      	ldr	r2, [pc, #16]	; (8000548 <HAL_IncTick+0x24>)
 8000536:	6013      	str	r3, [r2, #0]
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20000000 	.word	0x20000000
 8000548:	20000024 	.word	0x20000024

0800054c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  return uwTick;
 8000550:	4b03      	ldr	r3, [pc, #12]	; (8000560 <HAL_GetTick+0x14>)
 8000552:	681b      	ldr	r3, [r3, #0]
}
 8000554:	4618      	mov	r0, r3
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	20000024 	.word	0x20000024

08000564 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000564:	b480      	push	{r7}
 8000566:	b085      	sub	sp, #20
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	f003 0307 	and.w	r3, r3, #7
 8000572:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000574:	4b0b      	ldr	r3, [pc, #44]	; (80005a4 <__NVIC_SetPriorityGrouping+0x40>)
 8000576:	68db      	ldr	r3, [r3, #12]
 8000578:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800057a:	68ba      	ldr	r2, [r7, #8]
 800057c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000580:	4013      	ands	r3, r2
 8000582:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <__NVIC_SetPriorityGrouping+0x44>)
 800058e:	4313      	orrs	r3, r2
 8000590:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000592:	4a04      	ldr	r2, [pc, #16]	; (80005a4 <__NVIC_SetPriorityGrouping+0x40>)
 8000594:	68bb      	ldr	r3, [r7, #8]
 8000596:	60d3      	str	r3, [r2, #12]
}
 8000598:	bf00      	nop
 800059a:	3714      	adds	r7, #20
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr
 80005a4:	e000ed00 	.word	0xe000ed00
 80005a8:	05fa0000 	.word	0x05fa0000

080005ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005b0:	4b04      	ldr	r3, [pc, #16]	; (80005c4 <__NVIC_GetPriorityGrouping+0x18>)
 80005b2:	68db      	ldr	r3, [r3, #12]
 80005b4:	0a1b      	lsrs	r3, r3, #8
 80005b6:	f003 0307 	and.w	r3, r3, #7
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr
 80005c4:	e000ed00 	.word	0xe000ed00

080005c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	db0b      	blt.n	80005f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	f003 021f 	and.w	r2, r3, #31
 80005e0:	4907      	ldr	r1, [pc, #28]	; (8000600 <__NVIC_EnableIRQ+0x38>)
 80005e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e6:	095b      	lsrs	r3, r3, #5
 80005e8:	2001      	movs	r0, #1
 80005ea:	fa00 f202 	lsl.w	r2, r0, r2
 80005ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005f2:	bf00      	nop
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	e000e100 	.word	0xe000e100

08000604 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	6039      	str	r1, [r7, #0]
 800060e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000614:	2b00      	cmp	r3, #0
 8000616:	db0a      	blt.n	800062e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	b2da      	uxtb	r2, r3
 800061c:	490c      	ldr	r1, [pc, #48]	; (8000650 <__NVIC_SetPriority+0x4c>)
 800061e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000622:	0112      	lsls	r2, r2, #4
 8000624:	b2d2      	uxtb	r2, r2
 8000626:	440b      	add	r3, r1
 8000628:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800062c:	e00a      	b.n	8000644 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	b2da      	uxtb	r2, r3
 8000632:	4908      	ldr	r1, [pc, #32]	; (8000654 <__NVIC_SetPriority+0x50>)
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	f003 030f 	and.w	r3, r3, #15
 800063a:	3b04      	subs	r3, #4
 800063c:	0112      	lsls	r2, r2, #4
 800063e:	b2d2      	uxtb	r2, r2
 8000640:	440b      	add	r3, r1
 8000642:	761a      	strb	r2, [r3, #24]
}
 8000644:	bf00      	nop
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	e000e100 	.word	0xe000e100
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000658:	b480      	push	{r7}
 800065a:	b089      	sub	sp, #36	; 0x24
 800065c:	af00      	add	r7, sp, #0
 800065e:	60f8      	str	r0, [r7, #12]
 8000660:	60b9      	str	r1, [r7, #8]
 8000662:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	f003 0307 	and.w	r3, r3, #7
 800066a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800066c:	69fb      	ldr	r3, [r7, #28]
 800066e:	f1c3 0307 	rsb	r3, r3, #7
 8000672:	2b04      	cmp	r3, #4
 8000674:	bf28      	it	cs
 8000676:	2304      	movcs	r3, #4
 8000678:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800067a:	69fb      	ldr	r3, [r7, #28]
 800067c:	3304      	adds	r3, #4
 800067e:	2b06      	cmp	r3, #6
 8000680:	d902      	bls.n	8000688 <NVIC_EncodePriority+0x30>
 8000682:	69fb      	ldr	r3, [r7, #28]
 8000684:	3b03      	subs	r3, #3
 8000686:	e000      	b.n	800068a <NVIC_EncodePriority+0x32>
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800068c:	f04f 32ff 	mov.w	r2, #4294967295
 8000690:	69bb      	ldr	r3, [r7, #24]
 8000692:	fa02 f303 	lsl.w	r3, r2, r3
 8000696:	43da      	mvns	r2, r3
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	401a      	ands	r2, r3
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006a0:	f04f 31ff 	mov.w	r1, #4294967295
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	fa01 f303 	lsl.w	r3, r1, r3
 80006aa:	43d9      	mvns	r1, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b0:	4313      	orrs	r3, r2
         );
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3724      	adds	r7, #36	; 0x24
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr

080006be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006be:	b580      	push	{r7, lr}
 80006c0:	b082      	sub	sp, #8
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	f7ff ff4c 	bl	8000564 <__NVIC_SetPriorityGrouping>
}
 80006cc:	bf00      	nop
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b086      	sub	sp, #24
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	60b9      	str	r1, [r7, #8]
 80006de:	607a      	str	r2, [r7, #4]
 80006e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80006e2:	2300      	movs	r3, #0
 80006e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80006e6:	f7ff ff61 	bl	80005ac <__NVIC_GetPriorityGrouping>
 80006ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006ec:	687a      	ldr	r2, [r7, #4]
 80006ee:	68b9      	ldr	r1, [r7, #8]
 80006f0:	6978      	ldr	r0, [r7, #20]
 80006f2:	f7ff ffb1 	bl	8000658 <NVIC_EncodePriority>
 80006f6:	4602      	mov	r2, r0
 80006f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006fc:	4611      	mov	r1, r2
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff ff80 	bl	8000604 <__NVIC_SetPriority>
}
 8000704:	bf00      	nop
 8000706:	3718      	adds	r7, #24
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff ff54 	bl	80005c8 <__NVIC_EnableIRQ>
}
 8000720:	bf00      	nop
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}

08000728 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000728:	b480      	push	{r7}
 800072a:	b089      	sub	sp, #36	; 0x24
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000732:	2300      	movs	r3, #0
 8000734:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800073a:	2300      	movs	r3, #0
 800073c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800073e:	2300      	movs	r3, #0
 8000740:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000742:	2300      	movs	r3, #0
 8000744:	61fb      	str	r3, [r7, #28]
 8000746:	e175      	b.n	8000a34 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000748:	2201      	movs	r2, #1
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	fa02 f303 	lsl.w	r3, r2, r3
 8000750:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	697a      	ldr	r2, [r7, #20]
 8000758:	4013      	ands	r3, r2
 800075a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800075c:	693a      	ldr	r2, [r7, #16]
 800075e:	697b      	ldr	r3, [r7, #20]
 8000760:	429a      	cmp	r2, r3
 8000762:	f040 8164 	bne.w	8000a2e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	685b      	ldr	r3, [r3, #4]
 800076a:	2b02      	cmp	r3, #2
 800076c:	d003      	beq.n	8000776 <HAL_GPIO_Init+0x4e>
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	685b      	ldr	r3, [r3, #4]
 8000772:	2b12      	cmp	r3, #18
 8000774:	d123      	bne.n	80007be <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000776:	69fb      	ldr	r3, [r7, #28]
 8000778:	08da      	lsrs	r2, r3, #3
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	3208      	adds	r2, #8
 800077e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000782:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000784:	69fb      	ldr	r3, [r7, #28]
 8000786:	f003 0307 	and.w	r3, r3, #7
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	220f      	movs	r2, #15
 800078e:	fa02 f303 	lsl.w	r3, r2, r3
 8000792:	43db      	mvns	r3, r3
 8000794:	69ba      	ldr	r2, [r7, #24]
 8000796:	4013      	ands	r3, r2
 8000798:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	691a      	ldr	r2, [r3, #16]
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	f003 0307 	and.w	r3, r3, #7
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	fa02 f303 	lsl.w	r3, r2, r3
 80007aa:	69ba      	ldr	r2, [r7, #24]
 80007ac:	4313      	orrs	r3, r2
 80007ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80007b0:	69fb      	ldr	r3, [r7, #28]
 80007b2:	08da      	lsrs	r2, r3, #3
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	3208      	adds	r2, #8
 80007b8:	69b9      	ldr	r1, [r7, #24]
 80007ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80007c4:	69fb      	ldr	r3, [r7, #28]
 80007c6:	005b      	lsls	r3, r3, #1
 80007c8:	2203      	movs	r2, #3
 80007ca:	fa02 f303 	lsl.w	r3, r2, r3
 80007ce:	43db      	mvns	r3, r3
 80007d0:	69ba      	ldr	r2, [r7, #24]
 80007d2:	4013      	ands	r3, r2
 80007d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	685b      	ldr	r3, [r3, #4]
 80007da:	f003 0203 	and.w	r2, r3, #3
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	005b      	lsls	r3, r3, #1
 80007e2:	fa02 f303 	lsl.w	r3, r2, r3
 80007e6:	69ba      	ldr	r2, [r7, #24]
 80007e8:	4313      	orrs	r3, r2
 80007ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	69ba      	ldr	r2, [r7, #24]
 80007f0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	685b      	ldr	r3, [r3, #4]
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d00b      	beq.n	8000812 <HAL_GPIO_Init+0xea>
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	2b02      	cmp	r3, #2
 8000800:	d007      	beq.n	8000812 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000806:	2b11      	cmp	r3, #17
 8000808:	d003      	beq.n	8000812 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	2b12      	cmp	r3, #18
 8000810:	d130      	bne.n	8000874 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	689b      	ldr	r3, [r3, #8]
 8000816:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000818:	69fb      	ldr	r3, [r7, #28]
 800081a:	005b      	lsls	r3, r3, #1
 800081c:	2203      	movs	r2, #3
 800081e:	fa02 f303 	lsl.w	r3, r2, r3
 8000822:	43db      	mvns	r3, r3
 8000824:	69ba      	ldr	r2, [r7, #24]
 8000826:	4013      	ands	r3, r2
 8000828:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	68da      	ldr	r2, [r3, #12]
 800082e:	69fb      	ldr	r3, [r7, #28]
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	fa02 f303 	lsl.w	r3, r2, r3
 8000836:	69ba      	ldr	r2, [r7, #24]
 8000838:	4313      	orrs	r3, r2
 800083a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	69ba      	ldr	r2, [r7, #24]
 8000840:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000848:	2201      	movs	r2, #1
 800084a:	69fb      	ldr	r3, [r7, #28]
 800084c:	fa02 f303 	lsl.w	r3, r2, r3
 8000850:	43db      	mvns	r3, r3
 8000852:	69ba      	ldr	r2, [r7, #24]
 8000854:	4013      	ands	r3, r2
 8000856:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	091b      	lsrs	r3, r3, #4
 800085e:	f003 0201 	and.w	r2, r3, #1
 8000862:	69fb      	ldr	r3, [r7, #28]
 8000864:	fa02 f303 	lsl.w	r3, r2, r3
 8000868:	69ba      	ldr	r2, [r7, #24]
 800086a:	4313      	orrs	r3, r2
 800086c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	69ba      	ldr	r2, [r7, #24]
 8000872:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	68db      	ldr	r3, [r3, #12]
 8000878:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800087a:	69fb      	ldr	r3, [r7, #28]
 800087c:	005b      	lsls	r3, r3, #1
 800087e:	2203      	movs	r2, #3
 8000880:	fa02 f303 	lsl.w	r3, r2, r3
 8000884:	43db      	mvns	r3, r3
 8000886:	69ba      	ldr	r2, [r7, #24]
 8000888:	4013      	ands	r3, r2
 800088a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	689a      	ldr	r2, [r3, #8]
 8000890:	69fb      	ldr	r3, [r7, #28]
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	fa02 f303 	lsl.w	r3, r2, r3
 8000898:	69ba      	ldr	r2, [r7, #24]
 800089a:	4313      	orrs	r3, r2
 800089c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	69ba      	ldr	r2, [r7, #24]
 80008a2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	f000 80be 	beq.w	8000a2e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b2:	4b65      	ldr	r3, [pc, #404]	; (8000a48 <HAL_GPIO_Init+0x320>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b6:	4a64      	ldr	r2, [pc, #400]	; (8000a48 <HAL_GPIO_Init+0x320>)
 80008b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008bc:	6453      	str	r3, [r2, #68]	; 0x44
 80008be:	4b62      	ldr	r3, [pc, #392]	; (8000a48 <HAL_GPIO_Init+0x320>)
 80008c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80008ca:	4a60      	ldr	r2, [pc, #384]	; (8000a4c <HAL_GPIO_Init+0x324>)
 80008cc:	69fb      	ldr	r3, [r7, #28]
 80008ce:	089b      	lsrs	r3, r3, #2
 80008d0:	3302      	adds	r3, #2
 80008d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80008d8:	69fb      	ldr	r3, [r7, #28]
 80008da:	f003 0303 	and.w	r3, r3, #3
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	220f      	movs	r2, #15
 80008e2:	fa02 f303 	lsl.w	r3, r2, r3
 80008e6:	43db      	mvns	r3, r3
 80008e8:	69ba      	ldr	r2, [r7, #24]
 80008ea:	4013      	ands	r3, r2
 80008ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4a57      	ldr	r2, [pc, #348]	; (8000a50 <HAL_GPIO_Init+0x328>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d037      	beq.n	8000966 <HAL_GPIO_Init+0x23e>
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4a56      	ldr	r2, [pc, #344]	; (8000a54 <HAL_GPIO_Init+0x32c>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d031      	beq.n	8000962 <HAL_GPIO_Init+0x23a>
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4a55      	ldr	r2, [pc, #340]	; (8000a58 <HAL_GPIO_Init+0x330>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d02b      	beq.n	800095e <HAL_GPIO_Init+0x236>
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4a54      	ldr	r2, [pc, #336]	; (8000a5c <HAL_GPIO_Init+0x334>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d025      	beq.n	800095a <HAL_GPIO_Init+0x232>
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4a53      	ldr	r2, [pc, #332]	; (8000a60 <HAL_GPIO_Init+0x338>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d01f      	beq.n	8000956 <HAL_GPIO_Init+0x22e>
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4a52      	ldr	r2, [pc, #328]	; (8000a64 <HAL_GPIO_Init+0x33c>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d019      	beq.n	8000952 <HAL_GPIO_Init+0x22a>
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4a51      	ldr	r2, [pc, #324]	; (8000a68 <HAL_GPIO_Init+0x340>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d013      	beq.n	800094e <HAL_GPIO_Init+0x226>
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4a50      	ldr	r2, [pc, #320]	; (8000a6c <HAL_GPIO_Init+0x344>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d00d      	beq.n	800094a <HAL_GPIO_Init+0x222>
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4a4f      	ldr	r2, [pc, #316]	; (8000a70 <HAL_GPIO_Init+0x348>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d007      	beq.n	8000946 <HAL_GPIO_Init+0x21e>
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4a4e      	ldr	r2, [pc, #312]	; (8000a74 <HAL_GPIO_Init+0x34c>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d101      	bne.n	8000942 <HAL_GPIO_Init+0x21a>
 800093e:	2309      	movs	r3, #9
 8000940:	e012      	b.n	8000968 <HAL_GPIO_Init+0x240>
 8000942:	230a      	movs	r3, #10
 8000944:	e010      	b.n	8000968 <HAL_GPIO_Init+0x240>
 8000946:	2308      	movs	r3, #8
 8000948:	e00e      	b.n	8000968 <HAL_GPIO_Init+0x240>
 800094a:	2307      	movs	r3, #7
 800094c:	e00c      	b.n	8000968 <HAL_GPIO_Init+0x240>
 800094e:	2306      	movs	r3, #6
 8000950:	e00a      	b.n	8000968 <HAL_GPIO_Init+0x240>
 8000952:	2305      	movs	r3, #5
 8000954:	e008      	b.n	8000968 <HAL_GPIO_Init+0x240>
 8000956:	2304      	movs	r3, #4
 8000958:	e006      	b.n	8000968 <HAL_GPIO_Init+0x240>
 800095a:	2303      	movs	r3, #3
 800095c:	e004      	b.n	8000968 <HAL_GPIO_Init+0x240>
 800095e:	2302      	movs	r3, #2
 8000960:	e002      	b.n	8000968 <HAL_GPIO_Init+0x240>
 8000962:	2301      	movs	r3, #1
 8000964:	e000      	b.n	8000968 <HAL_GPIO_Init+0x240>
 8000966:	2300      	movs	r3, #0
 8000968:	69fa      	ldr	r2, [r7, #28]
 800096a:	f002 0203 	and.w	r2, r2, #3
 800096e:	0092      	lsls	r2, r2, #2
 8000970:	4093      	lsls	r3, r2
 8000972:	69ba      	ldr	r2, [r7, #24]
 8000974:	4313      	orrs	r3, r2
 8000976:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000978:	4934      	ldr	r1, [pc, #208]	; (8000a4c <HAL_GPIO_Init+0x324>)
 800097a:	69fb      	ldr	r3, [r7, #28]
 800097c:	089b      	lsrs	r3, r3, #2
 800097e:	3302      	adds	r3, #2
 8000980:	69ba      	ldr	r2, [r7, #24]
 8000982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000986:	4b3c      	ldr	r3, [pc, #240]	; (8000a78 <HAL_GPIO_Init+0x350>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800098c:	693b      	ldr	r3, [r7, #16]
 800098e:	43db      	mvns	r3, r3
 8000990:	69ba      	ldr	r2, [r7, #24]
 8000992:	4013      	ands	r3, r2
 8000994:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	685b      	ldr	r3, [r3, #4]
 800099a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d003      	beq.n	80009aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80009a2:	69ba      	ldr	r2, [r7, #24]
 80009a4:	693b      	ldr	r3, [r7, #16]
 80009a6:	4313      	orrs	r3, r2
 80009a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80009aa:	4a33      	ldr	r2, [pc, #204]	; (8000a78 <HAL_GPIO_Init+0x350>)
 80009ac:	69bb      	ldr	r3, [r7, #24]
 80009ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80009b0:	4b31      	ldr	r3, [pc, #196]	; (8000a78 <HAL_GPIO_Init+0x350>)
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009b6:	693b      	ldr	r3, [r7, #16]
 80009b8:	43db      	mvns	r3, r3
 80009ba:	69ba      	ldr	r2, [r7, #24]
 80009bc:	4013      	ands	r3, r2
 80009be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d003      	beq.n	80009d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80009cc:	69ba      	ldr	r2, [r7, #24]
 80009ce:	693b      	ldr	r3, [r7, #16]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80009d4:	4a28      	ldr	r2, [pc, #160]	; (8000a78 <HAL_GPIO_Init+0x350>)
 80009d6:	69bb      	ldr	r3, [r7, #24]
 80009d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80009da:	4b27      	ldr	r3, [pc, #156]	; (8000a78 <HAL_GPIO_Init+0x350>)
 80009dc:	689b      	ldr	r3, [r3, #8]
 80009de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009e0:	693b      	ldr	r3, [r7, #16]
 80009e2:	43db      	mvns	r3, r3
 80009e4:	69ba      	ldr	r2, [r7, #24]
 80009e6:	4013      	ands	r3, r2
 80009e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d003      	beq.n	80009fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80009f6:	69ba      	ldr	r2, [r7, #24]
 80009f8:	693b      	ldr	r3, [r7, #16]
 80009fa:	4313      	orrs	r3, r2
 80009fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80009fe:	4a1e      	ldr	r2, [pc, #120]	; (8000a78 <HAL_GPIO_Init+0x350>)
 8000a00:	69bb      	ldr	r3, [r7, #24]
 8000a02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a04:	4b1c      	ldr	r3, [pc, #112]	; (8000a78 <HAL_GPIO_Init+0x350>)
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a0a:	693b      	ldr	r3, [r7, #16]
 8000a0c:	43db      	mvns	r3, r3
 8000a0e:	69ba      	ldr	r2, [r7, #24]
 8000a10:	4013      	ands	r3, r2
 8000a12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d003      	beq.n	8000a28 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000a20:	69ba      	ldr	r2, [r7, #24]
 8000a22:	693b      	ldr	r3, [r7, #16]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000a28:	4a13      	ldr	r2, [pc, #76]	; (8000a78 <HAL_GPIO_Init+0x350>)
 8000a2a:	69bb      	ldr	r3, [r7, #24]
 8000a2c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000a2e:	69fb      	ldr	r3, [r7, #28]
 8000a30:	3301      	adds	r3, #1
 8000a32:	61fb      	str	r3, [r7, #28]
 8000a34:	69fb      	ldr	r3, [r7, #28]
 8000a36:	2b0f      	cmp	r3, #15
 8000a38:	f67f ae86 	bls.w	8000748 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000a3c:	bf00      	nop
 8000a3e:	3724      	adds	r7, #36	; 0x24
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	40013800 	.word	0x40013800
 8000a50:	40020000 	.word	0x40020000
 8000a54:	40020400 	.word	0x40020400
 8000a58:	40020800 	.word	0x40020800
 8000a5c:	40020c00 	.word	0x40020c00
 8000a60:	40021000 	.word	0x40021000
 8000a64:	40021400 	.word	0x40021400
 8000a68:	40021800 	.word	0x40021800
 8000a6c:	40021c00 	.word	0x40021c00
 8000a70:	40022000 	.word	0x40022000
 8000a74:	40022400 	.word	0x40022400
 8000a78:	40013c00 	.word	0x40013c00

08000a7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	460b      	mov	r3, r1
 8000a86:	807b      	strh	r3, [r7, #2]
 8000a88:	4613      	mov	r3, r2
 8000a8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000a8c:	787b      	ldrb	r3, [r7, #1]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d003      	beq.n	8000a9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000a92:	887a      	ldrh	r2, [r7, #2]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8000a98:	e003      	b.n	8000aa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000a9a:	887b      	ldrh	r3, [r7, #2]
 8000a9c:	041a      	lsls	r2, r3, #16
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	619a      	str	r2, [r3, #24]
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	b083      	sub	sp, #12
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
 8000ab6:	460b      	mov	r3, r1
 8000ab8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	695a      	ldr	r2, [r3, #20]
 8000abe:	887b      	ldrh	r3, [r7, #2]
 8000ac0:	401a      	ands	r2, r3
 8000ac2:	887b      	ldrh	r3, [r7, #2]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d104      	bne.n	8000ad2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000ac8:	887b      	ldrh	r3, [r7, #2]
 8000aca:	041a      	lsls	r2, r3, #16
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000ad0:	e002      	b.n	8000ad8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000ad2:	887a      	ldrh	r2, [r7, #2]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	619a      	str	r2, [r3, #24]
}
 8000ad8:	bf00      	nop
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b086      	sub	sp, #24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8000aec:	2300      	movs	r3, #0
 8000aee:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d101      	bne.n	8000afa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
 8000af8:	e25c      	b.n	8000fb4 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	f000 8087 	beq.w	8000c16 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b08:	4b96      	ldr	r3, [pc, #600]	; (8000d64 <HAL_RCC_OscConfig+0x280>)
 8000b0a:	689b      	ldr	r3, [r3, #8]
 8000b0c:	f003 030c 	and.w	r3, r3, #12
 8000b10:	2b04      	cmp	r3, #4
 8000b12:	d00c      	beq.n	8000b2e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b14:	4b93      	ldr	r3, [pc, #588]	; (8000d64 <HAL_RCC_OscConfig+0x280>)
 8000b16:	689b      	ldr	r3, [r3, #8]
 8000b18:	f003 030c 	and.w	r3, r3, #12
 8000b1c:	2b08      	cmp	r3, #8
 8000b1e:	d112      	bne.n	8000b46 <HAL_RCC_OscConfig+0x62>
 8000b20:	4b90      	ldr	r3, [pc, #576]	; (8000d64 <HAL_RCC_OscConfig+0x280>)
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000b2c:	d10b      	bne.n	8000b46 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b2e:	4b8d      	ldr	r3, [pc, #564]	; (8000d64 <HAL_RCC_OscConfig+0x280>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d06c      	beq.n	8000c14 <HAL_RCC_OscConfig+0x130>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d168      	bne.n	8000c14 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
 8000b44:	e236      	b.n	8000fb4 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b4e:	d106      	bne.n	8000b5e <HAL_RCC_OscConfig+0x7a>
 8000b50:	4b84      	ldr	r3, [pc, #528]	; (8000d64 <HAL_RCC_OscConfig+0x280>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a83      	ldr	r2, [pc, #524]	; (8000d64 <HAL_RCC_OscConfig+0x280>)
 8000b56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b5a:	6013      	str	r3, [r2, #0]
 8000b5c:	e02e      	b.n	8000bbc <HAL_RCC_OscConfig+0xd8>
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d10c      	bne.n	8000b80 <HAL_RCC_OscConfig+0x9c>
 8000b66:	4b7f      	ldr	r3, [pc, #508]	; (8000d64 <HAL_RCC_OscConfig+0x280>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a7e      	ldr	r2, [pc, #504]	; (8000d64 <HAL_RCC_OscConfig+0x280>)
 8000b6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b70:	6013      	str	r3, [r2, #0]
 8000b72:	4b7c      	ldr	r3, [pc, #496]	; (8000d64 <HAL_RCC_OscConfig+0x280>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a7b      	ldr	r2, [pc, #492]	; (8000d64 <HAL_RCC_OscConfig+0x280>)
 8000b78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b7c:	6013      	str	r3, [r2, #0]
 8000b7e:	e01d      	b.n	8000bbc <HAL_RCC_OscConfig+0xd8>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b88:	d10c      	bne.n	8000ba4 <HAL_RCC_OscConfig+0xc0>
 8000b8a:	4b76      	ldr	r3, [pc, #472]	; (8000d64 <HAL_RCC_OscConfig+0x280>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a75      	ldr	r2, [pc, #468]	; (8000d64 <HAL_RCC_OscConfig+0x280>)
 8000b90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b94:	6013      	str	r3, [r2, #0]
 8000b96:	4b73      	ldr	r3, [pc, #460]	; (8000d64 <HAL_RCC_OscConfig+0x280>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a72      	ldr	r2, [pc, #456]	; (8000d64 <HAL_RCC_OscConfig+0x280>)
 8000b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ba0:	6013      	str	r3, [r2, #0]
 8000ba2:	e00b      	b.n	8000bbc <HAL_RCC_OscConfig+0xd8>
 8000ba4:	4b6f      	ldr	r3, [pc, #444]	; (8000d64 <HAL_RCC_OscConfig+0x280>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a6e      	ldr	r2, [pc, #440]	; (8000d64 <HAL_RCC_OscConfig+0x280>)
 8000baa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bae:	6013      	str	r3, [r2, #0]
 8000bb0:	4b6c      	ldr	r3, [pc, #432]	; (8000d64 <HAL_RCC_OscConfig+0x280>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a6b      	ldr	r2, [pc, #428]	; (8000d64 <HAL_RCC_OscConfig+0x280>)
 8000bb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d013      	beq.n	8000bec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000bc4:	f7ff fcc2 	bl	800054c <HAL_GetTick>
 8000bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bca:	e008      	b.n	8000bde <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bcc:	f7ff fcbe 	bl	800054c <HAL_GetTick>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	693b      	ldr	r3, [r7, #16]
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	2b64      	cmp	r3, #100	; 0x64
 8000bd8:	d901      	bls.n	8000bde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	e1ea      	b.n	8000fb4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bde:	4b61      	ldr	r3, [pc, #388]	; (8000d64 <HAL_RCC_OscConfig+0x280>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d0f0      	beq.n	8000bcc <HAL_RCC_OscConfig+0xe8>
 8000bea:	e014      	b.n	8000c16 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000bec:	f7ff fcae 	bl	800054c <HAL_GetTick>
 8000bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bf2:	e008      	b.n	8000c06 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bf4:	f7ff fcaa 	bl	800054c <HAL_GetTick>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	693b      	ldr	r3, [r7, #16]
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	2b64      	cmp	r3, #100	; 0x64
 8000c00:	d901      	bls.n	8000c06 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000c02:	2303      	movs	r3, #3
 8000c04:	e1d6      	b.n	8000fb4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c06:	4b57      	ldr	r3, [pc, #348]	; (8000d64 <HAL_RCC_OscConfig+0x280>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d1f0      	bne.n	8000bf4 <HAL_RCC_OscConfig+0x110>
 8000c12:	e000      	b.n	8000c16 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f003 0302 	and.w	r3, r3, #2
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d069      	beq.n	8000cf6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c22:	4b50      	ldr	r3, [pc, #320]	; (8000d64 <HAL_RCC_OscConfig+0x280>)
 8000c24:	689b      	ldr	r3, [r3, #8]
 8000c26:	f003 030c 	and.w	r3, r3, #12
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d00b      	beq.n	8000c46 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c2e:	4b4d      	ldr	r3, [pc, #308]	; (8000d64 <HAL_RCC_OscConfig+0x280>)
 8000c30:	689b      	ldr	r3, [r3, #8]
 8000c32:	f003 030c 	and.w	r3, r3, #12
 8000c36:	2b08      	cmp	r3, #8
 8000c38:	d11c      	bne.n	8000c74 <HAL_RCC_OscConfig+0x190>
 8000c3a:	4b4a      	ldr	r3, [pc, #296]	; (8000d64 <HAL_RCC_OscConfig+0x280>)
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d116      	bne.n	8000c74 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c46:	4b47      	ldr	r3, [pc, #284]	; (8000d64 <HAL_RCC_OscConfig+0x280>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f003 0302 	and.w	r3, r3, #2
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d005      	beq.n	8000c5e <HAL_RCC_OscConfig+0x17a>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	68db      	ldr	r3, [r3, #12]
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d001      	beq.n	8000c5e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e1aa      	b.n	8000fb4 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c5e:	4b41      	ldr	r3, [pc, #260]	; (8000d64 <HAL_RCC_OscConfig+0x280>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	691b      	ldr	r3, [r3, #16]
 8000c6a:	00db      	lsls	r3, r3, #3
 8000c6c:	493d      	ldr	r1, [pc, #244]	; (8000d64 <HAL_RCC_OscConfig+0x280>)
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c72:	e040      	b.n	8000cf6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d023      	beq.n	8000cc4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c7c:	4b39      	ldr	r3, [pc, #228]	; (8000d64 <HAL_RCC_OscConfig+0x280>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a38      	ldr	r2, [pc, #224]	; (8000d64 <HAL_RCC_OscConfig+0x280>)
 8000c82:	f043 0301 	orr.w	r3, r3, #1
 8000c86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c88:	f7ff fc60 	bl	800054c <HAL_GetTick>
 8000c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c8e:	e008      	b.n	8000ca2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c90:	f7ff fc5c 	bl	800054c <HAL_GetTick>
 8000c94:	4602      	mov	r2, r0
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	2b02      	cmp	r3, #2
 8000c9c:	d901      	bls.n	8000ca2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	e188      	b.n	8000fb4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ca2:	4b30      	ldr	r3, [pc, #192]	; (8000d64 <HAL_RCC_OscConfig+0x280>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f003 0302 	and.w	r3, r3, #2
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d0f0      	beq.n	8000c90 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cae:	4b2d      	ldr	r3, [pc, #180]	; (8000d64 <HAL_RCC_OscConfig+0x280>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	691b      	ldr	r3, [r3, #16]
 8000cba:	00db      	lsls	r3, r3, #3
 8000cbc:	4929      	ldr	r1, [pc, #164]	; (8000d64 <HAL_RCC_OscConfig+0x280>)
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	600b      	str	r3, [r1, #0]
 8000cc2:	e018      	b.n	8000cf6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cc4:	4b27      	ldr	r3, [pc, #156]	; (8000d64 <HAL_RCC_OscConfig+0x280>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a26      	ldr	r2, [pc, #152]	; (8000d64 <HAL_RCC_OscConfig+0x280>)
 8000cca:	f023 0301 	bic.w	r3, r3, #1
 8000cce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cd0:	f7ff fc3c 	bl	800054c <HAL_GetTick>
 8000cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cd6:	e008      	b.n	8000cea <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cd8:	f7ff fc38 	bl	800054c <HAL_GetTick>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	d901      	bls.n	8000cea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	e164      	b.n	8000fb4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cea:	4b1e      	ldr	r3, [pc, #120]	; (8000d64 <HAL_RCC_OscConfig+0x280>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f003 0302 	and.w	r3, r3, #2
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d1f0      	bne.n	8000cd8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f003 0308 	and.w	r3, r3, #8
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d038      	beq.n	8000d74 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	695b      	ldr	r3, [r3, #20]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d019      	beq.n	8000d3e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d0a:	4b16      	ldr	r3, [pc, #88]	; (8000d64 <HAL_RCC_OscConfig+0x280>)
 8000d0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d0e:	4a15      	ldr	r2, [pc, #84]	; (8000d64 <HAL_RCC_OscConfig+0x280>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d16:	f7ff fc19 	bl	800054c <HAL_GetTick>
 8000d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d1c:	e008      	b.n	8000d30 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d1e:	f7ff fc15 	bl	800054c <HAL_GetTick>
 8000d22:	4602      	mov	r2, r0
 8000d24:	693b      	ldr	r3, [r7, #16]
 8000d26:	1ad3      	subs	r3, r2, r3
 8000d28:	2b02      	cmp	r3, #2
 8000d2a:	d901      	bls.n	8000d30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	e141      	b.n	8000fb4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d30:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <HAL_RCC_OscConfig+0x280>)
 8000d32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d34:	f003 0302 	and.w	r3, r3, #2
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d0f0      	beq.n	8000d1e <HAL_RCC_OscConfig+0x23a>
 8000d3c:	e01a      	b.n	8000d74 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d3e:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <HAL_RCC_OscConfig+0x280>)
 8000d40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d42:	4a08      	ldr	r2, [pc, #32]	; (8000d64 <HAL_RCC_OscConfig+0x280>)
 8000d44:	f023 0301 	bic.w	r3, r3, #1
 8000d48:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d4a:	f7ff fbff 	bl	800054c <HAL_GetTick>
 8000d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d50:	e00a      	b.n	8000d68 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d52:	f7ff fbfb 	bl	800054c <HAL_GetTick>
 8000d56:	4602      	mov	r2, r0
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	1ad3      	subs	r3, r2, r3
 8000d5c:	2b02      	cmp	r3, #2
 8000d5e:	d903      	bls.n	8000d68 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8000d60:	2303      	movs	r3, #3
 8000d62:	e127      	b.n	8000fb4 <HAL_RCC_OscConfig+0x4d0>
 8000d64:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d68:	4b94      	ldr	r3, [pc, #592]	; (8000fbc <HAL_RCC_OscConfig+0x4d8>)
 8000d6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d6c:	f003 0302 	and.w	r3, r3, #2
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d1ee      	bne.n	8000d52 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f003 0304 	and.w	r3, r3, #4
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	f000 80a4 	beq.w	8000eca <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d82:	4b8e      	ldr	r3, [pc, #568]	; (8000fbc <HAL_RCC_OscConfig+0x4d8>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d10d      	bne.n	8000daa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d8e:	4b8b      	ldr	r3, [pc, #556]	; (8000fbc <HAL_RCC_OscConfig+0x4d8>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d92:	4a8a      	ldr	r2, [pc, #552]	; (8000fbc <HAL_RCC_OscConfig+0x4d8>)
 8000d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d98:	6413      	str	r3, [r2, #64]	; 0x40
 8000d9a:	4b88      	ldr	r3, [pc, #544]	; (8000fbc <HAL_RCC_OscConfig+0x4d8>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000da6:	2301      	movs	r3, #1
 8000da8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000daa:	4b85      	ldr	r3, [pc, #532]	; (8000fc0 <HAL_RCC_OscConfig+0x4dc>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d118      	bne.n	8000de8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8000db6:	4b82      	ldr	r3, [pc, #520]	; (8000fc0 <HAL_RCC_OscConfig+0x4dc>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a81      	ldr	r2, [pc, #516]	; (8000fc0 <HAL_RCC_OscConfig+0x4dc>)
 8000dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000dc2:	f7ff fbc3 	bl	800054c <HAL_GetTick>
 8000dc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000dc8:	e008      	b.n	8000ddc <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000dca:	f7ff fbbf 	bl	800054c <HAL_GetTick>
 8000dce:	4602      	mov	r2, r0
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	1ad3      	subs	r3, r2, r3
 8000dd4:	2b64      	cmp	r3, #100	; 0x64
 8000dd6:	d901      	bls.n	8000ddc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	e0eb      	b.n	8000fb4 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000ddc:	4b78      	ldr	r3, [pc, #480]	; (8000fc0 <HAL_RCC_OscConfig+0x4dc>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d0f0      	beq.n	8000dca <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d106      	bne.n	8000dfe <HAL_RCC_OscConfig+0x31a>
 8000df0:	4b72      	ldr	r3, [pc, #456]	; (8000fbc <HAL_RCC_OscConfig+0x4d8>)
 8000df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000df4:	4a71      	ldr	r2, [pc, #452]	; (8000fbc <HAL_RCC_OscConfig+0x4d8>)
 8000df6:	f043 0301 	orr.w	r3, r3, #1
 8000dfa:	6713      	str	r3, [r2, #112]	; 0x70
 8000dfc:	e02d      	b.n	8000e5a <HAL_RCC_OscConfig+0x376>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d10c      	bne.n	8000e20 <HAL_RCC_OscConfig+0x33c>
 8000e06:	4b6d      	ldr	r3, [pc, #436]	; (8000fbc <HAL_RCC_OscConfig+0x4d8>)
 8000e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e0a:	4a6c      	ldr	r2, [pc, #432]	; (8000fbc <HAL_RCC_OscConfig+0x4d8>)
 8000e0c:	f023 0301 	bic.w	r3, r3, #1
 8000e10:	6713      	str	r3, [r2, #112]	; 0x70
 8000e12:	4b6a      	ldr	r3, [pc, #424]	; (8000fbc <HAL_RCC_OscConfig+0x4d8>)
 8000e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e16:	4a69      	ldr	r2, [pc, #420]	; (8000fbc <HAL_RCC_OscConfig+0x4d8>)
 8000e18:	f023 0304 	bic.w	r3, r3, #4
 8000e1c:	6713      	str	r3, [r2, #112]	; 0x70
 8000e1e:	e01c      	b.n	8000e5a <HAL_RCC_OscConfig+0x376>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	2b05      	cmp	r3, #5
 8000e26:	d10c      	bne.n	8000e42 <HAL_RCC_OscConfig+0x35e>
 8000e28:	4b64      	ldr	r3, [pc, #400]	; (8000fbc <HAL_RCC_OscConfig+0x4d8>)
 8000e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e2c:	4a63      	ldr	r2, [pc, #396]	; (8000fbc <HAL_RCC_OscConfig+0x4d8>)
 8000e2e:	f043 0304 	orr.w	r3, r3, #4
 8000e32:	6713      	str	r3, [r2, #112]	; 0x70
 8000e34:	4b61      	ldr	r3, [pc, #388]	; (8000fbc <HAL_RCC_OscConfig+0x4d8>)
 8000e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e38:	4a60      	ldr	r2, [pc, #384]	; (8000fbc <HAL_RCC_OscConfig+0x4d8>)
 8000e3a:	f043 0301 	orr.w	r3, r3, #1
 8000e3e:	6713      	str	r3, [r2, #112]	; 0x70
 8000e40:	e00b      	b.n	8000e5a <HAL_RCC_OscConfig+0x376>
 8000e42:	4b5e      	ldr	r3, [pc, #376]	; (8000fbc <HAL_RCC_OscConfig+0x4d8>)
 8000e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e46:	4a5d      	ldr	r2, [pc, #372]	; (8000fbc <HAL_RCC_OscConfig+0x4d8>)
 8000e48:	f023 0301 	bic.w	r3, r3, #1
 8000e4c:	6713      	str	r3, [r2, #112]	; 0x70
 8000e4e:	4b5b      	ldr	r3, [pc, #364]	; (8000fbc <HAL_RCC_OscConfig+0x4d8>)
 8000e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e52:	4a5a      	ldr	r2, [pc, #360]	; (8000fbc <HAL_RCC_OscConfig+0x4d8>)
 8000e54:	f023 0304 	bic.w	r3, r3, #4
 8000e58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d015      	beq.n	8000e8e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e62:	f7ff fb73 	bl	800054c <HAL_GetTick>
 8000e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e68:	e00a      	b.n	8000e80 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e6a:	f7ff fb6f 	bl	800054c <HAL_GetTick>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d901      	bls.n	8000e80 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	e099      	b.n	8000fb4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e80:	4b4e      	ldr	r3, [pc, #312]	; (8000fbc <HAL_RCC_OscConfig+0x4d8>)
 8000e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e84:	f003 0302 	and.w	r3, r3, #2
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d0ee      	beq.n	8000e6a <HAL_RCC_OscConfig+0x386>
 8000e8c:	e014      	b.n	8000eb8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e8e:	f7ff fb5d 	bl	800054c <HAL_GetTick>
 8000e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e94:	e00a      	b.n	8000eac <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e96:	f7ff fb59 	bl	800054c <HAL_GetTick>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	1ad3      	subs	r3, r2, r3
 8000ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d901      	bls.n	8000eac <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	e083      	b.n	8000fb4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000eac:	4b43      	ldr	r3, [pc, #268]	; (8000fbc <HAL_RCC_OscConfig+0x4d8>)
 8000eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eb0:	f003 0302 	and.w	r3, r3, #2
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d1ee      	bne.n	8000e96 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000eb8:	7dfb      	ldrb	r3, [r7, #23]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d105      	bne.n	8000eca <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ebe:	4b3f      	ldr	r3, [pc, #252]	; (8000fbc <HAL_RCC_OscConfig+0x4d8>)
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec2:	4a3e      	ldr	r2, [pc, #248]	; (8000fbc <HAL_RCC_OscConfig+0x4d8>)
 8000ec4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ec8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	699b      	ldr	r3, [r3, #24]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d06f      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ed2:	4b3a      	ldr	r3, [pc, #232]	; (8000fbc <HAL_RCC_OscConfig+0x4d8>)
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	f003 030c 	and.w	r3, r3, #12
 8000eda:	2b08      	cmp	r3, #8
 8000edc:	d067      	beq.n	8000fae <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	699b      	ldr	r3, [r3, #24]
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d149      	bne.n	8000f7a <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ee6:	4b35      	ldr	r3, [pc, #212]	; (8000fbc <HAL_RCC_OscConfig+0x4d8>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a34      	ldr	r2, [pc, #208]	; (8000fbc <HAL_RCC_OscConfig+0x4d8>)
 8000eec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000ef0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ef2:	f7ff fb2b 	bl	800054c <HAL_GetTick>
 8000ef6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ef8:	e008      	b.n	8000f0c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000efa:	f7ff fb27 	bl	800054c <HAL_GetTick>
 8000efe:	4602      	mov	r2, r0
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d901      	bls.n	8000f0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	e053      	b.n	8000fb4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f0c:	4b2b      	ldr	r3, [pc, #172]	; (8000fbc <HAL_RCC_OscConfig+0x4d8>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d1f0      	bne.n	8000efa <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	69da      	ldr	r2, [r3, #28]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6a1b      	ldr	r3, [r3, #32]
 8000f20:	431a      	orrs	r2, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f26:	019b      	lsls	r3, r3, #6
 8000f28:	431a      	orrs	r2, r3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f2e:	085b      	lsrs	r3, r3, #1
 8000f30:	3b01      	subs	r3, #1
 8000f32:	041b      	lsls	r3, r3, #16
 8000f34:	431a      	orrs	r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f3a:	061b      	lsls	r3, r3, #24
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	4a1f      	ldr	r2, [pc, #124]	; (8000fbc <HAL_RCC_OscConfig+0x4d8>)
 8000f40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000f44:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f46:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <HAL_RCC_OscConfig+0x4d8>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a1c      	ldr	r2, [pc, #112]	; (8000fbc <HAL_RCC_OscConfig+0x4d8>)
 8000f4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f52:	f7ff fafb 	bl	800054c <HAL_GetTick>
 8000f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f58:	e008      	b.n	8000f6c <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f5a:	f7ff faf7 	bl	800054c <HAL_GetTick>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d901      	bls.n	8000f6c <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8000f68:	2303      	movs	r3, #3
 8000f6a:	e023      	b.n	8000fb4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f6c:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <HAL_RCC_OscConfig+0x4d8>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d0f0      	beq.n	8000f5a <HAL_RCC_OscConfig+0x476>
 8000f78:	e01b      	b.n	8000fb2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f7a:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <HAL_RCC_OscConfig+0x4d8>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a0f      	ldr	r2, [pc, #60]	; (8000fbc <HAL_RCC_OscConfig+0x4d8>)
 8000f80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f86:	f7ff fae1 	bl	800054c <HAL_GetTick>
 8000f8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f8c:	e008      	b.n	8000fa0 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f8e:	f7ff fadd 	bl	800054c <HAL_GetTick>
 8000f92:	4602      	mov	r2, r0
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d901      	bls.n	8000fa0 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	e009      	b.n	8000fb4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <HAL_RCC_OscConfig+0x4d8>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d1f0      	bne.n	8000f8e <HAL_RCC_OscConfig+0x4aa>
 8000fac:	e001      	b.n	8000fb2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e000      	b.n	8000fb4 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8000fb2:	2300      	movs	r3, #0
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3718      	adds	r7, #24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40023800 	.word	0x40023800
 8000fc0:	40007000 	.word	0x40007000

08000fc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d101      	bne.n	8000fdc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e0ce      	b.n	800117a <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000fdc:	4b69      	ldr	r3, [pc, #420]	; (8001184 <HAL_RCC_ClockConfig+0x1c0>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f003 030f 	and.w	r3, r3, #15
 8000fe4:	683a      	ldr	r2, [r7, #0]
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d910      	bls.n	800100c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fea:	4b66      	ldr	r3, [pc, #408]	; (8001184 <HAL_RCC_ClockConfig+0x1c0>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f023 020f 	bic.w	r2, r3, #15
 8000ff2:	4964      	ldr	r1, [pc, #400]	; (8001184 <HAL_RCC_ClockConfig+0x1c0>)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ffa:	4b62      	ldr	r3, [pc, #392]	; (8001184 <HAL_RCC_ClockConfig+0x1c0>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f003 030f 	and.w	r3, r3, #15
 8001002:	683a      	ldr	r2, [r7, #0]
 8001004:	429a      	cmp	r2, r3
 8001006:	d001      	beq.n	800100c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	e0b6      	b.n	800117a <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f003 0302 	and.w	r3, r3, #2
 8001014:	2b00      	cmp	r3, #0
 8001016:	d020      	beq.n	800105a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f003 0304 	and.w	r3, r3, #4
 8001020:	2b00      	cmp	r3, #0
 8001022:	d005      	beq.n	8001030 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001024:	4b58      	ldr	r3, [pc, #352]	; (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	4a57      	ldr	r2, [pc, #348]	; (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 800102a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800102e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f003 0308 	and.w	r3, r3, #8
 8001038:	2b00      	cmp	r3, #0
 800103a:	d005      	beq.n	8001048 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800103c:	4b52      	ldr	r3, [pc, #328]	; (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	4a51      	ldr	r2, [pc, #324]	; (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 8001042:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001046:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001048:	4b4f      	ldr	r3, [pc, #316]	; (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	494c      	ldr	r1, [pc, #304]	; (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 8001056:	4313      	orrs	r3, r2
 8001058:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	2b00      	cmp	r3, #0
 8001064:	d040      	beq.n	80010e8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d107      	bne.n	800107e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800106e:	4b46      	ldr	r3, [pc, #280]	; (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d115      	bne.n	80010a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e07d      	b.n	800117a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	2b02      	cmp	r3, #2
 8001084:	d107      	bne.n	8001096 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001086:	4b40      	ldr	r3, [pc, #256]	; (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d109      	bne.n	80010a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e071      	b.n	800117a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001096:	4b3c      	ldr	r3, [pc, #240]	; (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d101      	bne.n	80010a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e069      	b.n	800117a <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010a6:	4b38      	ldr	r3, [pc, #224]	; (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	f023 0203 	bic.w	r2, r3, #3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	4935      	ldr	r1, [pc, #212]	; (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 80010b4:	4313      	orrs	r3, r2
 80010b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80010b8:	f7ff fa48 	bl	800054c <HAL_GetTick>
 80010bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010be:	e00a      	b.n	80010d6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010c0:	f7ff fa44 	bl	800054c <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d901      	bls.n	80010d6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80010d2:	2303      	movs	r3, #3
 80010d4:	e051      	b.n	800117a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010d6:	4b2c      	ldr	r3, [pc, #176]	; (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	f003 020c 	and.w	r2, r3, #12
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d1eb      	bne.n	80010c0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80010e8:	4b26      	ldr	r3, [pc, #152]	; (8001184 <HAL_RCC_ClockConfig+0x1c0>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f003 030f 	and.w	r3, r3, #15
 80010f0:	683a      	ldr	r2, [r7, #0]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d210      	bcs.n	8001118 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010f6:	4b23      	ldr	r3, [pc, #140]	; (8001184 <HAL_RCC_ClockConfig+0x1c0>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f023 020f 	bic.w	r2, r3, #15
 80010fe:	4921      	ldr	r1, [pc, #132]	; (8001184 <HAL_RCC_ClockConfig+0x1c0>)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	4313      	orrs	r3, r2
 8001104:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001106:	4b1f      	ldr	r3, [pc, #124]	; (8001184 <HAL_RCC_ClockConfig+0x1c0>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 030f 	and.w	r3, r3, #15
 800110e:	683a      	ldr	r2, [r7, #0]
 8001110:	429a      	cmp	r2, r3
 8001112:	d001      	beq.n	8001118 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	e030      	b.n	800117a <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 0304 	and.w	r3, r3, #4
 8001120:	2b00      	cmp	r3, #0
 8001122:	d008      	beq.n	8001136 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001124:	4b18      	ldr	r3, [pc, #96]	; (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	4915      	ldr	r1, [pc, #84]	; (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 8001132:	4313      	orrs	r3, r2
 8001134:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0308 	and.w	r3, r3, #8
 800113e:	2b00      	cmp	r3, #0
 8001140:	d009      	beq.n	8001156 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001142:	4b11      	ldr	r3, [pc, #68]	; (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	691b      	ldr	r3, [r3, #16]
 800114e:	00db      	lsls	r3, r3, #3
 8001150:	490d      	ldr	r1, [pc, #52]	; (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 8001152:	4313      	orrs	r3, r2
 8001154:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001156:	f000 f81d 	bl	8001194 <HAL_RCC_GetSysClockFreq>
 800115a:	4601      	mov	r1, r0
 800115c:	4b0a      	ldr	r3, [pc, #40]	; (8001188 <HAL_RCC_ClockConfig+0x1c4>)
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	091b      	lsrs	r3, r3, #4
 8001162:	f003 030f 	and.w	r3, r3, #15
 8001166:	4a09      	ldr	r2, [pc, #36]	; (800118c <HAL_RCC_ClockConfig+0x1c8>)
 8001168:	5cd3      	ldrb	r3, [r2, r3]
 800116a:	fa21 f303 	lsr.w	r3, r1, r3
 800116e:	4a08      	ldr	r2, [pc, #32]	; (8001190 <HAL_RCC_ClockConfig+0x1cc>)
 8001170:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001172:	2000      	movs	r0, #0
 8001174:	f000 fe9e 	bl	8001eb4 <HAL_InitTick>

  return HAL_OK;
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40023c00 	.word	0x40023c00
 8001188:	40023800 	.word	0x40023800
 800118c:	0800211c 	.word	0x0800211c
 8001190:	20000004 	.word	0x20000004

08001194 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	2300      	movs	r3, #0
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	2300      	movs	r3, #0
 80011a4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011aa:	4b50      	ldr	r3, [pc, #320]	; (80012ec <HAL_RCC_GetSysClockFreq+0x158>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f003 030c 	and.w	r3, r3, #12
 80011b2:	2b04      	cmp	r3, #4
 80011b4:	d007      	beq.n	80011c6 <HAL_RCC_GetSysClockFreq+0x32>
 80011b6:	2b08      	cmp	r3, #8
 80011b8:	d008      	beq.n	80011cc <HAL_RCC_GetSysClockFreq+0x38>
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	f040 808d 	bne.w	80012da <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80011c0:	4b4b      	ldr	r3, [pc, #300]	; (80012f0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80011c2:	60bb      	str	r3, [r7, #8]
       break;
 80011c4:	e08c      	b.n	80012e0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80011c6:	4b4b      	ldr	r3, [pc, #300]	; (80012f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80011c8:	60bb      	str	r3, [r7, #8]
      break;
 80011ca:	e089      	b.n	80012e0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011cc:	4b47      	ldr	r3, [pc, #284]	; (80012ec <HAL_RCC_GetSysClockFreq+0x158>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011d4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80011d6:	4b45      	ldr	r3, [pc, #276]	; (80012ec <HAL_RCC_GetSysClockFreq+0x158>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d023      	beq.n	800122a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011e2:	4b42      	ldr	r3, [pc, #264]	; (80012ec <HAL_RCC_GetSysClockFreq+0x158>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	099b      	lsrs	r3, r3, #6
 80011e8:	f04f 0400 	mov.w	r4, #0
 80011ec:	f240 11ff 	movw	r1, #511	; 0x1ff
 80011f0:	f04f 0200 	mov.w	r2, #0
 80011f4:	ea03 0501 	and.w	r5, r3, r1
 80011f8:	ea04 0602 	and.w	r6, r4, r2
 80011fc:	4a3d      	ldr	r2, [pc, #244]	; (80012f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80011fe:	fb02 f106 	mul.w	r1, r2, r6
 8001202:	2200      	movs	r2, #0
 8001204:	fb02 f205 	mul.w	r2, r2, r5
 8001208:	440a      	add	r2, r1
 800120a:	493a      	ldr	r1, [pc, #232]	; (80012f4 <HAL_RCC_GetSysClockFreq+0x160>)
 800120c:	fba5 0101 	umull	r0, r1, r5, r1
 8001210:	1853      	adds	r3, r2, r1
 8001212:	4619      	mov	r1, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f04f 0400 	mov.w	r4, #0
 800121a:	461a      	mov	r2, r3
 800121c:	4623      	mov	r3, r4
 800121e:	f7fe fff3 	bl	8000208 <__aeabi_uldivmod>
 8001222:	4603      	mov	r3, r0
 8001224:	460c      	mov	r4, r1
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	e049      	b.n	80012be <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800122a:	4b30      	ldr	r3, [pc, #192]	; (80012ec <HAL_RCC_GetSysClockFreq+0x158>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	099b      	lsrs	r3, r3, #6
 8001230:	f04f 0400 	mov.w	r4, #0
 8001234:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001238:	f04f 0200 	mov.w	r2, #0
 800123c:	ea03 0501 	and.w	r5, r3, r1
 8001240:	ea04 0602 	and.w	r6, r4, r2
 8001244:	4629      	mov	r1, r5
 8001246:	4632      	mov	r2, r6
 8001248:	f04f 0300 	mov.w	r3, #0
 800124c:	f04f 0400 	mov.w	r4, #0
 8001250:	0154      	lsls	r4, r2, #5
 8001252:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001256:	014b      	lsls	r3, r1, #5
 8001258:	4619      	mov	r1, r3
 800125a:	4622      	mov	r2, r4
 800125c:	1b49      	subs	r1, r1, r5
 800125e:	eb62 0206 	sbc.w	r2, r2, r6
 8001262:	f04f 0300 	mov.w	r3, #0
 8001266:	f04f 0400 	mov.w	r4, #0
 800126a:	0194      	lsls	r4, r2, #6
 800126c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001270:	018b      	lsls	r3, r1, #6
 8001272:	1a5b      	subs	r3, r3, r1
 8001274:	eb64 0402 	sbc.w	r4, r4, r2
 8001278:	f04f 0100 	mov.w	r1, #0
 800127c:	f04f 0200 	mov.w	r2, #0
 8001280:	00e2      	lsls	r2, r4, #3
 8001282:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001286:	00d9      	lsls	r1, r3, #3
 8001288:	460b      	mov	r3, r1
 800128a:	4614      	mov	r4, r2
 800128c:	195b      	adds	r3, r3, r5
 800128e:	eb44 0406 	adc.w	r4, r4, r6
 8001292:	f04f 0100 	mov.w	r1, #0
 8001296:	f04f 0200 	mov.w	r2, #0
 800129a:	02a2      	lsls	r2, r4, #10
 800129c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80012a0:	0299      	lsls	r1, r3, #10
 80012a2:	460b      	mov	r3, r1
 80012a4:	4614      	mov	r4, r2
 80012a6:	4618      	mov	r0, r3
 80012a8:	4621      	mov	r1, r4
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f04f 0400 	mov.w	r4, #0
 80012b0:	461a      	mov	r2, r3
 80012b2:	4623      	mov	r3, r4
 80012b4:	f7fe ffa8 	bl	8000208 <__aeabi_uldivmod>
 80012b8:	4603      	mov	r3, r0
 80012ba:	460c      	mov	r4, r1
 80012bc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80012be:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <HAL_RCC_GetSysClockFreq+0x158>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	0c1b      	lsrs	r3, r3, #16
 80012c4:	f003 0303 	and.w	r3, r3, #3
 80012c8:	3301      	adds	r3, #1
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80012ce:	68fa      	ldr	r2, [r7, #12]
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d6:	60bb      	str	r3, [r7, #8]
      break;
 80012d8:	e002      	b.n	80012e0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80012da:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80012dc:	60bb      	str	r3, [r7, #8]
      break;
 80012de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012e0:	68bb      	ldr	r3, [r7, #8]
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3714      	adds	r7, #20
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40023800 	.word	0x40023800
 80012f0:	00f42400 	.word	0x00f42400
 80012f4:	017d7840 	.word	0x017d7840

080012f8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012fc:	4b03      	ldr	r3, [pc, #12]	; (800130c <HAL_RCC_GetHCLKFreq+0x14>)
 80012fe:	681b      	ldr	r3, [r3, #0]
}
 8001300:	4618      	mov	r0, r3
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	20000004 	.word	0x20000004

08001310 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001314:	f7ff fff0 	bl	80012f8 <HAL_RCC_GetHCLKFreq>
 8001318:	4601      	mov	r1, r0
 800131a:	4b05      	ldr	r3, [pc, #20]	; (8001330 <HAL_RCC_GetPCLK1Freq+0x20>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	0a9b      	lsrs	r3, r3, #10
 8001320:	f003 0307 	and.w	r3, r3, #7
 8001324:	4a03      	ldr	r2, [pc, #12]	; (8001334 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001326:	5cd3      	ldrb	r3, [r2, r3]
 8001328:	fa21 f303 	lsr.w	r3, r1, r3
}
 800132c:	4618      	mov	r0, r3
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40023800 	.word	0x40023800
 8001334:	0800212c 	.word	0x0800212c

08001338 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	220f      	movs	r2, #15
 8001346:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001348:	4b12      	ldr	r3, [pc, #72]	; (8001394 <HAL_RCC_GetClockConfig+0x5c>)
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	f003 0203 	and.w	r2, r3, #3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001354:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <HAL_RCC_GetClockConfig+0x5c>)
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001360:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <HAL_RCC_GetClockConfig+0x5c>)
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800136c:	4b09      	ldr	r3, [pc, #36]	; (8001394 <HAL_RCC_GetClockConfig+0x5c>)
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	08db      	lsrs	r3, r3, #3
 8001372:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800137a:	4b07      	ldr	r3, [pc, #28]	; (8001398 <HAL_RCC_GetClockConfig+0x60>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 020f 	and.w	r2, r3, #15
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	601a      	str	r2, [r3, #0]
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	40023800 	.word	0x40023800
 8001398:	40023c00 	.word	0x40023c00

0800139c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d101      	bne.n	80013ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e01d      	b.n	80013ea <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d106      	bne.n	80013c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f000 fd52 	bl	8001e6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2202      	movs	r2, #2
 80013cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3304      	adds	r3, #4
 80013d8:	4619      	mov	r1, r3
 80013da:	4610      	mov	r0, r2
 80013dc:	f000 fa36 	bl	800184c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2201      	movs	r2, #1
 80013e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	68da      	ldr	r2, [r3, #12]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f042 0201 	orr.w	r2, r2, #1
 800140a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	689a      	ldr	r2, [r3, #8]
 8001412:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <HAL_TIM_Base_Start_IT+0x50>)
 8001414:	4013      	ands	r3, r2
 8001416:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2b06      	cmp	r3, #6
 800141c:	d00b      	beq.n	8001436 <HAL_TIM_Base_Start_IT+0x42>
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001424:	d007      	beq.n	8001436 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f042 0201 	orr.w	r2, r2, #1
 8001434:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001436:	2300      	movs	r3, #0
}
 8001438:	4618      	mov	r0, r3
 800143a:	3714      	adds	r7, #20
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	00010007 	.word	0x00010007

08001448 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	691b      	ldr	r3, [r3, #16]
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b02      	cmp	r3, #2
 800145c:	d122      	bne.n	80014a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	2b02      	cmp	r3, #2
 800146a:	d11b      	bne.n	80014a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f06f 0202 	mvn.w	r2, #2
 8001474:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2201      	movs	r2, #1
 800147a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	f003 0303 	and.w	r3, r3, #3
 8001486:	2b00      	cmp	r3, #0
 8001488:	d003      	beq.n	8001492 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f000 f9c0 	bl	8001810 <HAL_TIM_IC_CaptureCallback>
 8001490:	e005      	b.n	800149e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f000 f9b2 	bl	80017fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f000 f9c3 	bl	8001824 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2200      	movs	r2, #0
 80014a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	691b      	ldr	r3, [r3, #16]
 80014aa:	f003 0304 	and.w	r3, r3, #4
 80014ae:	2b04      	cmp	r3, #4
 80014b0:	d122      	bne.n	80014f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	f003 0304 	and.w	r3, r3, #4
 80014bc:	2b04      	cmp	r3, #4
 80014be:	d11b      	bne.n	80014f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f06f 0204 	mvn.w	r2, #4
 80014c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2202      	movs	r2, #2
 80014ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	699b      	ldr	r3, [r3, #24]
 80014d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f000 f996 	bl	8001810 <HAL_TIM_IC_CaptureCallback>
 80014e4:	e005      	b.n	80014f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f000 f988 	bl	80017fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f000 f999 	bl	8001824 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	f003 0308 	and.w	r3, r3, #8
 8001502:	2b08      	cmp	r3, #8
 8001504:	d122      	bne.n	800154c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	f003 0308 	and.w	r3, r3, #8
 8001510:	2b08      	cmp	r3, #8
 8001512:	d11b      	bne.n	800154c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f06f 0208 	mvn.w	r2, #8
 800151c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2204      	movs	r2, #4
 8001522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	69db      	ldr	r3, [r3, #28]
 800152a:	f003 0303 	and.w	r3, r3, #3
 800152e:	2b00      	cmp	r3, #0
 8001530:	d003      	beq.n	800153a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f000 f96c 	bl	8001810 <HAL_TIM_IC_CaptureCallback>
 8001538:	e005      	b.n	8001546 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f000 f95e 	bl	80017fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f000 f96f 	bl	8001824 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	f003 0310 	and.w	r3, r3, #16
 8001556:	2b10      	cmp	r3, #16
 8001558:	d122      	bne.n	80015a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	f003 0310 	and.w	r3, r3, #16
 8001564:	2b10      	cmp	r3, #16
 8001566:	d11b      	bne.n	80015a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f06f 0210 	mvn.w	r2, #16
 8001570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2208      	movs	r2, #8
 8001576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001582:	2b00      	cmp	r3, #0
 8001584:	d003      	beq.n	800158e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f000 f942 	bl	8001810 <HAL_TIM_IC_CaptureCallback>
 800158c:	e005      	b.n	800159a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f000 f934 	bl	80017fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f000 f945 	bl	8001824 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	691b      	ldr	r3, [r3, #16]
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d10e      	bne.n	80015cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d107      	bne.n	80015cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f06f 0201 	mvn.w	r2, #1
 80015c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 fc06 	bl	8001dd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015d6:	2b80      	cmp	r3, #128	; 0x80
 80015d8:	d10e      	bne.n	80015f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015e4:	2b80      	cmp	r3, #128	; 0x80
 80015e6:	d107      	bne.n	80015f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80015f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f000 faca 	bl	8001b8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001602:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001606:	d10e      	bne.n	8001626 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001612:	2b80      	cmp	r3, #128	; 0x80
 8001614:	d107      	bne.n	8001626 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800161e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f000 fabd 	bl	8001ba0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001630:	2b40      	cmp	r3, #64	; 0x40
 8001632:	d10e      	bne.n	8001652 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800163e:	2b40      	cmp	r3, #64	; 0x40
 8001640:	d107      	bne.n	8001652 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800164a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f000 f8f3 	bl	8001838 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	691b      	ldr	r3, [r3, #16]
 8001658:	f003 0320 	and.w	r3, r3, #32
 800165c:	2b20      	cmp	r3, #32
 800165e:	d10e      	bne.n	800167e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	f003 0320 	and.w	r3, r3, #32
 800166a:	2b20      	cmp	r3, #32
 800166c:	d107      	bne.n	800167e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f06f 0220 	mvn.w	r2, #32
 8001676:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f000 fa7d 	bl	8001b78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
	...

08001688 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001698:	2b01      	cmp	r3, #1
 800169a:	d101      	bne.n	80016a0 <HAL_TIM_ConfigClockSource+0x18>
 800169c:	2302      	movs	r3, #2
 800169e:	e0a6      	b.n	80017ee <HAL_TIM_ConfigClockSource+0x166>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2201      	movs	r2, #1
 80016a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2202      	movs	r2, #2
 80016ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80016b8:	68fa      	ldr	r2, [r7, #12]
 80016ba:	4b4f      	ldr	r3, [pc, #316]	; (80017f8 <HAL_TIM_ConfigClockSource+0x170>)
 80016bc:	4013      	ands	r3, r2
 80016be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80016c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	68fa      	ldr	r2, [r7, #12]
 80016ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b40      	cmp	r3, #64	; 0x40
 80016d6:	d067      	beq.n	80017a8 <HAL_TIM_ConfigClockSource+0x120>
 80016d8:	2b40      	cmp	r3, #64	; 0x40
 80016da:	d80b      	bhi.n	80016f4 <HAL_TIM_ConfigClockSource+0x6c>
 80016dc:	2b10      	cmp	r3, #16
 80016de:	d073      	beq.n	80017c8 <HAL_TIM_ConfigClockSource+0x140>
 80016e0:	2b10      	cmp	r3, #16
 80016e2:	d802      	bhi.n	80016ea <HAL_TIM_ConfigClockSource+0x62>
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d06f      	beq.n	80017c8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80016e8:	e078      	b.n	80017dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80016ea:	2b20      	cmp	r3, #32
 80016ec:	d06c      	beq.n	80017c8 <HAL_TIM_ConfigClockSource+0x140>
 80016ee:	2b30      	cmp	r3, #48	; 0x30
 80016f0:	d06a      	beq.n	80017c8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80016f2:	e073      	b.n	80017dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80016f4:	2b70      	cmp	r3, #112	; 0x70
 80016f6:	d00d      	beq.n	8001714 <HAL_TIM_ConfigClockSource+0x8c>
 80016f8:	2b70      	cmp	r3, #112	; 0x70
 80016fa:	d804      	bhi.n	8001706 <HAL_TIM_ConfigClockSource+0x7e>
 80016fc:	2b50      	cmp	r3, #80	; 0x50
 80016fe:	d033      	beq.n	8001768 <HAL_TIM_ConfigClockSource+0xe0>
 8001700:	2b60      	cmp	r3, #96	; 0x60
 8001702:	d041      	beq.n	8001788 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001704:	e06a      	b.n	80017dc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800170a:	d066      	beq.n	80017da <HAL_TIM_ConfigClockSource+0x152>
 800170c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001710:	d017      	beq.n	8001742 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001712:	e063      	b.n	80017dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6818      	ldr	r0, [r3, #0]
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	6899      	ldr	r1, [r3, #8]
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685a      	ldr	r2, [r3, #4]
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	f000 f9ac 	bl	8001a80 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001736:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	68fa      	ldr	r2, [r7, #12]
 800173e:	609a      	str	r2, [r3, #8]
      break;
 8001740:	e04c      	b.n	80017dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6818      	ldr	r0, [r3, #0]
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	6899      	ldr	r1, [r3, #8]
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	f000 f995 	bl	8001a80 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	689a      	ldr	r2, [r3, #8]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001764:	609a      	str	r2, [r3, #8]
      break;
 8001766:	e039      	b.n	80017dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6818      	ldr	r0, [r3, #0]
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	6859      	ldr	r1, [r3, #4]
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	461a      	mov	r2, r3
 8001776:	f000 f909 	bl	800198c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2150      	movs	r1, #80	; 0x50
 8001780:	4618      	mov	r0, r3
 8001782:	f000 f962 	bl	8001a4a <TIM_ITRx_SetConfig>
      break;
 8001786:	e029      	b.n	80017dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6818      	ldr	r0, [r3, #0]
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	6859      	ldr	r1, [r3, #4]
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	461a      	mov	r2, r3
 8001796:	f000 f928 	bl	80019ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2160      	movs	r1, #96	; 0x60
 80017a0:	4618      	mov	r0, r3
 80017a2:	f000 f952 	bl	8001a4a <TIM_ITRx_SetConfig>
      break;
 80017a6:	e019      	b.n	80017dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6818      	ldr	r0, [r3, #0]
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	6859      	ldr	r1, [r3, #4]
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	461a      	mov	r2, r3
 80017b6:	f000 f8e9 	bl	800198c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2140      	movs	r1, #64	; 0x40
 80017c0:	4618      	mov	r0, r3
 80017c2:	f000 f942 	bl	8001a4a <TIM_ITRx_SetConfig>
      break;
 80017c6:	e009      	b.n	80017dc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4619      	mov	r1, r3
 80017d2:	4610      	mov	r0, r2
 80017d4:	f000 f939 	bl	8001a4a <TIM_ITRx_SetConfig>
      break;
 80017d8:	e000      	b.n	80017dc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80017da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	fffeff88 	.word	0xfffeff88

080017fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4a40      	ldr	r2, [pc, #256]	; (8001960 <TIM_Base_SetConfig+0x114>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d013      	beq.n	800188c <TIM_Base_SetConfig+0x40>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800186a:	d00f      	beq.n	800188c <TIM_Base_SetConfig+0x40>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4a3d      	ldr	r2, [pc, #244]	; (8001964 <TIM_Base_SetConfig+0x118>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d00b      	beq.n	800188c <TIM_Base_SetConfig+0x40>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4a3c      	ldr	r2, [pc, #240]	; (8001968 <TIM_Base_SetConfig+0x11c>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d007      	beq.n	800188c <TIM_Base_SetConfig+0x40>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4a3b      	ldr	r2, [pc, #236]	; (800196c <TIM_Base_SetConfig+0x120>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d003      	beq.n	800188c <TIM_Base_SetConfig+0x40>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4a3a      	ldr	r2, [pc, #232]	; (8001970 <TIM_Base_SetConfig+0x124>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d108      	bne.n	800189e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001892:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	68fa      	ldr	r2, [r7, #12]
 800189a:	4313      	orrs	r3, r2
 800189c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a2f      	ldr	r2, [pc, #188]	; (8001960 <TIM_Base_SetConfig+0x114>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d02b      	beq.n	80018fe <TIM_Base_SetConfig+0xb2>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018ac:	d027      	beq.n	80018fe <TIM_Base_SetConfig+0xb2>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a2c      	ldr	r2, [pc, #176]	; (8001964 <TIM_Base_SetConfig+0x118>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d023      	beq.n	80018fe <TIM_Base_SetConfig+0xb2>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a2b      	ldr	r2, [pc, #172]	; (8001968 <TIM_Base_SetConfig+0x11c>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d01f      	beq.n	80018fe <TIM_Base_SetConfig+0xb2>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a2a      	ldr	r2, [pc, #168]	; (800196c <TIM_Base_SetConfig+0x120>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d01b      	beq.n	80018fe <TIM_Base_SetConfig+0xb2>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a29      	ldr	r2, [pc, #164]	; (8001970 <TIM_Base_SetConfig+0x124>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d017      	beq.n	80018fe <TIM_Base_SetConfig+0xb2>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a28      	ldr	r2, [pc, #160]	; (8001974 <TIM_Base_SetConfig+0x128>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d013      	beq.n	80018fe <TIM_Base_SetConfig+0xb2>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a27      	ldr	r2, [pc, #156]	; (8001978 <TIM_Base_SetConfig+0x12c>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d00f      	beq.n	80018fe <TIM_Base_SetConfig+0xb2>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a26      	ldr	r2, [pc, #152]	; (800197c <TIM_Base_SetConfig+0x130>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d00b      	beq.n	80018fe <TIM_Base_SetConfig+0xb2>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a25      	ldr	r2, [pc, #148]	; (8001980 <TIM_Base_SetConfig+0x134>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d007      	beq.n	80018fe <TIM_Base_SetConfig+0xb2>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a24      	ldr	r2, [pc, #144]	; (8001984 <TIM_Base_SetConfig+0x138>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d003      	beq.n	80018fe <TIM_Base_SetConfig+0xb2>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a23      	ldr	r2, [pc, #140]	; (8001988 <TIM_Base_SetConfig+0x13c>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d108      	bne.n	8001910 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001904:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	68fa      	ldr	r2, [r7, #12]
 800190c:	4313      	orrs	r3, r2
 800190e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	695b      	ldr	r3, [r3, #20]
 800191a:	4313      	orrs	r3, r2
 800191c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	68fa      	ldr	r2, [r7, #12]
 8001922:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4a0a      	ldr	r2, [pc, #40]	; (8001960 <TIM_Base_SetConfig+0x114>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d003      	beq.n	8001944 <TIM_Base_SetConfig+0xf8>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a0c      	ldr	r2, [pc, #48]	; (8001970 <TIM_Base_SetConfig+0x124>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d103      	bne.n	800194c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	691a      	ldr	r2, [r3, #16]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	615a      	str	r2, [r3, #20]
}
 8001952:	bf00      	nop
 8001954:	3714      	adds	r7, #20
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	40010000 	.word	0x40010000
 8001964:	40000400 	.word	0x40000400
 8001968:	40000800 	.word	0x40000800
 800196c:	40000c00 	.word	0x40000c00
 8001970:	40010400 	.word	0x40010400
 8001974:	40014000 	.word	0x40014000
 8001978:	40014400 	.word	0x40014400
 800197c:	40014800 	.word	0x40014800
 8001980:	40001800 	.word	0x40001800
 8001984:	40001c00 	.word	0x40001c00
 8001988:	40002000 	.word	0x40002000

0800198c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800198c:	b480      	push	{r7}
 800198e:	b087      	sub	sp, #28
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	6a1b      	ldr	r3, [r3, #32]
 800199c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	6a1b      	ldr	r3, [r3, #32]
 80019a2:	f023 0201 	bic.w	r2, r3, #1
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	011b      	lsls	r3, r3, #4
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	4313      	orrs	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	f023 030a 	bic.w	r3, r3, #10
 80019c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80019ca:	697a      	ldr	r2, [r7, #20]
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	697a      	ldr	r2, [r7, #20]
 80019dc:	621a      	str	r2, [r3, #32]
}
 80019de:	bf00      	nop
 80019e0:	371c      	adds	r7, #28
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80019ea:	b480      	push	{r7}
 80019ec:	b087      	sub	sp, #28
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	60f8      	str	r0, [r7, #12]
 80019f2:	60b9      	str	r1, [r7, #8]
 80019f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	6a1b      	ldr	r3, [r3, #32]
 80019fa:	f023 0210 	bic.w	r2, r3, #16
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6a1b      	ldr	r3, [r3, #32]
 8001a0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001a14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	031b      	lsls	r3, r3, #12
 8001a1a:	697a      	ldr	r2, [r7, #20]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001a26:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	011b      	lsls	r3, r3, #4
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	621a      	str	r2, [r3, #32]
}
 8001a3e:	bf00      	nop
 8001a40:	371c      	adds	r7, #28
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b085      	sub	sp, #20
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
 8001a52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	f043 0307 	orr.w	r3, r3, #7
 8001a6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	68fa      	ldr	r2, [r7, #12]
 8001a72:	609a      	str	r2, [r3, #8]
}
 8001a74:	bf00      	nop
 8001a76:	3714      	adds	r7, #20
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b087      	sub	sp, #28
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
 8001a8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001a9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	021a      	lsls	r2, r3, #8
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	697a      	ldr	r2, [r7, #20]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	697a      	ldr	r2, [r7, #20]
 8001ab2:	609a      	str	r2, [r3, #8]
}
 8001ab4:	bf00      	nop
 8001ab6:	371c      	adds	r7, #28
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d101      	bne.n	8001ad8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	e045      	b.n	8001b64 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a1c      	ldr	r2, [pc, #112]	; (8001b70 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d004      	beq.n	8001b0c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a1b      	ldr	r2, [pc, #108]	; (8001b74 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d108      	bne.n	8001b1e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001b12:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	68fa      	ldr	r2, [r7, #12]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b24:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b36:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	68ba      	ldr	r2, [r7, #8]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	68ba      	ldr	r2, [r7, #8]
 8001b50:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2201      	movs	r2, #1
 8001b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	40010000 	.word	0x40010000
 8001b74:	40010400 	.word	0x40010400

08001b78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bb8:	f7fe fca6 	bl	8000508 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bbc:	f000 f80a 	bl	8001bd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bc0:	f000 f8be 	bl	8001d40 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001bc4:	f000 f86e 	bl	8001ca4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 8001bc8:	4801      	ldr	r0, [pc, #4]	; (8001bd0 <main+0x1c>)
 8001bca:	f7ff fc13 	bl	80013f4 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001bce:	e7fe      	b.n	8001bce <main+0x1a>
 8001bd0:	20000028 	.word	0x20000028

08001bd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b094      	sub	sp, #80	; 0x50
 8001bd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bda:	f107 0320 	add.w	r3, r7, #32
 8001bde:	2230      	movs	r2, #48	; 0x30
 8001be0:	2100      	movs	r1, #0
 8001be2:	4618      	mov	r0, r3
 8001be4:	f000 fa86 	bl	80020f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001be8:	f107 030c 	add.w	r3, r7, #12
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bf8:	4b28      	ldr	r3, [pc, #160]	; (8001c9c <SystemClock_Config+0xc8>)
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfc:	4a27      	ldr	r2, [pc, #156]	; (8001c9c <SystemClock_Config+0xc8>)
 8001bfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c02:	6413      	str	r3, [r2, #64]	; 0x40
 8001c04:	4b25      	ldr	r3, [pc, #148]	; (8001c9c <SystemClock_Config+0xc8>)
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c0c:	60bb      	str	r3, [r7, #8]
 8001c0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c10:	4b23      	ldr	r3, [pc, #140]	; (8001ca0 <SystemClock_Config+0xcc>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c18:	4a21      	ldr	r2, [pc, #132]	; (8001ca0 <SystemClock_Config+0xcc>)
 8001c1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c1e:	6013      	str	r3, [r2, #0]
 8001c20:	4b1f      	ldr	r3, [pc, #124]	; (8001ca0 <SystemClock_Config+0xcc>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c28:	607b      	str	r3, [r7, #4]
 8001c2a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c30:	2301      	movs	r3, #1
 8001c32:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c34:	2310      	movs	r3, #16
 8001c36:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 10;
 8001c40:	230a      	movs	r3, #10
 8001c42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 210;
 8001c44:	23d2      	movs	r3, #210	; 0xd2
 8001c46:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c50:	f107 0320 	add.w	r3, r7, #32
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7fe ff45 	bl	8000ae4 <HAL_RCC_OscConfig>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001c60:	f000 f8d8 	bl	8001e14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c64:	230f      	movs	r3, #15
 8001c66:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c70:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c74:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c7a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c7c:	f107 030c 	add.w	r3, r7, #12
 8001c80:	2105      	movs	r1, #5
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff f99e 	bl	8000fc4 <HAL_RCC_ClockConfig>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001c8e:	f000 f8c1 	bl	8001e14 <Error_Handler>
  }
}
 8001c92:	bf00      	nop
 8001c94:	3750      	adds	r7, #80	; 0x50
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40007000 	.word	0x40007000

08001ca4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b088      	sub	sp, #32
 8001ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001caa:	f107 0310 	add.w	r3, r7, #16
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	605a      	str	r2, [r3, #4]
 8001cb4:	609a      	str	r2, [r3, #8]
 8001cb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cb8:	1d3b      	adds	r3, r7, #4
 8001cba:	2200      	movs	r2, #0
 8001cbc:	601a      	str	r2, [r3, #0]
 8001cbe:	605a      	str	r2, [r3, #4]
 8001cc0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cc2:	4b1e      	ldr	r3, [pc, #120]	; (8001d3c <MX_TIM2_Init+0x98>)
 8001cc4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cc8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 42000;
 8001cca:	4b1c      	ldr	r3, [pc, #112]	; (8001d3c <MX_TIM2_Init+0x98>)
 8001ccc:	f24a 4210 	movw	r2, #42000	; 0xa410
 8001cd0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cd2:	4b1a      	ldr	r3, [pc, #104]	; (8001d3c <MX_TIM2_Init+0x98>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8001cd8:	4b18      	ldr	r3, [pc, #96]	; (8001d3c <MX_TIM2_Init+0x98>)
 8001cda:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001cde:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ce0:	4b16      	ldr	r3, [pc, #88]	; (8001d3c <MX_TIM2_Init+0x98>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ce6:	4b15      	ldr	r3, [pc, #84]	; (8001d3c <MX_TIM2_Init+0x98>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001cec:	4813      	ldr	r0, [pc, #76]	; (8001d3c <MX_TIM2_Init+0x98>)
 8001cee:	f7ff fb55 	bl	800139c <HAL_TIM_Base_Init>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001cf8:	f000 f88c 	bl	8001e14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d00:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d02:	f107 0310 	add.w	r3, r7, #16
 8001d06:	4619      	mov	r1, r3
 8001d08:	480c      	ldr	r0, [pc, #48]	; (8001d3c <MX_TIM2_Init+0x98>)
 8001d0a:	f7ff fcbd 	bl	8001688 <HAL_TIM_ConfigClockSource>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001d14:	f000 f87e 	bl	8001e14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d20:	1d3b      	adds	r3, r7, #4
 8001d22:	4619      	mov	r1, r3
 8001d24:	4805      	ldr	r0, [pc, #20]	; (8001d3c <MX_TIM2_Init+0x98>)
 8001d26:	f7ff fecb 	bl	8001ac0 <HAL_TIMEx_MasterConfigSynchronization>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001d30:	f000 f870 	bl	8001e14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d34:	bf00      	nop
 8001d36:	3720      	adds	r7, #32
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	20000028 	.word	0x20000028

08001d40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b088      	sub	sp, #32
 8001d44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d46:	f107 030c 	add.w	r3, r7, #12
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	605a      	str	r2, [r3, #4]
 8001d50:	609a      	str	r2, [r3, #8]
 8001d52:	60da      	str	r2, [r3, #12]
 8001d54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d56:	4b1e      	ldr	r3, [pc, #120]	; (8001dd0 <MX_GPIO_Init+0x90>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	4a1d      	ldr	r2, [pc, #116]	; (8001dd0 <MX_GPIO_Init+0x90>)
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	6313      	str	r3, [r2, #48]	; 0x30
 8001d62:	4b1b      	ldr	r3, [pc, #108]	; (8001dd0 <MX_GPIO_Init+0x90>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	60bb      	str	r3, [r7, #8]
 8001d6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d6e:	4b18      	ldr	r3, [pc, #96]	; (8001dd0 <MX_GPIO_Init+0x90>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	4a17      	ldr	r2, [pc, #92]	; (8001dd0 <MX_GPIO_Init+0x90>)
 8001d74:	f043 0304 	orr.w	r3, r3, #4
 8001d78:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7a:	4b15      	ldr	r3, [pc, #84]	; (8001dd0 <MX_GPIO_Init+0x90>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	f003 0304 	and.w	r3, r3, #4
 8001d82:	607b      	str	r3, [r7, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d86:	4b12      	ldr	r3, [pc, #72]	; (8001dd0 <MX_GPIO_Init+0x90>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	4a11      	ldr	r2, [pc, #68]	; (8001dd0 <MX_GPIO_Init+0x90>)
 8001d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d90:	6313      	str	r3, [r2, #48]	; 0x30
 8001d92:	4b0f      	ldr	r3, [pc, #60]	; (8001dd0 <MX_GPIO_Init+0x90>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d9a:	603b      	str	r3, [r7, #0]
 8001d9c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_GPIO_Port, RED_Pin, GPIO_PIN_RESET);
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001da4:	480b      	ldr	r0, [pc, #44]	; (8001dd4 <MX_GPIO_Init+0x94>)
 8001da6:	f7fe fe69 	bl	8000a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RED_Pin */
  GPIO_InitStruct.Pin = RED_Pin;
 8001daa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001dae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001db0:	2301      	movs	r3, #1
 8001db2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db8:	2300      	movs	r3, #0
 8001dba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RED_GPIO_Port, &GPIO_InitStruct);
 8001dbc:	f107 030c 	add.w	r3, r7, #12
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4804      	ldr	r0, [pc, #16]	; (8001dd4 <MX_GPIO_Init+0x94>)
 8001dc4:	f7fe fcb0 	bl	8000728 <HAL_GPIO_Init>

}
 8001dc8:	bf00      	nop
 8001dca:	3720      	adds	r7, #32
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	40020000 	.word	0x40020000

08001dd8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM2) {
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001de8:	d104      	bne.n	8001df4 <HAL_TIM_PeriodElapsedCallback+0x1c>
	    HAL_GPIO_TogglePin(RED_GPIO_Port, RED_Pin);
 8001dea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001dee:	4807      	ldr	r0, [pc, #28]	; (8001e0c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001df0:	f7fe fe5d 	bl	8000aae <HAL_GPIO_TogglePin>
	  }



  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a05      	ldr	r2, [pc, #20]	; (8001e10 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d101      	bne.n	8001e02 <HAL_TIM_PeriodElapsedCallback+0x2a>
    HAL_IncTick();
 8001dfe:	f7fe fb91 	bl	8000524 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e02:	bf00      	nop
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40020000 	.word	0x40020000
 8001e10:	40002000 	.word	0x40002000

08001e14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
	...

08001e24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e2a:	4b0f      	ldr	r3, [pc, #60]	; (8001e68 <HAL_MspInit+0x44>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	4a0e      	ldr	r2, [pc, #56]	; (8001e68 <HAL_MspInit+0x44>)
 8001e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e34:	6413      	str	r3, [r2, #64]	; 0x40
 8001e36:	4b0c      	ldr	r3, [pc, #48]	; (8001e68 <HAL_MspInit+0x44>)
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3e:	607b      	str	r3, [r7, #4]
 8001e40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e42:	4b09      	ldr	r3, [pc, #36]	; (8001e68 <HAL_MspInit+0x44>)
 8001e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e46:	4a08      	ldr	r2, [pc, #32]	; (8001e68 <HAL_MspInit+0x44>)
 8001e48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e4e:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <HAL_MspInit+0x44>)
 8001e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e56:	603b      	str	r3, [r7, #0]
 8001e58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	40023800 	.word	0x40023800

08001e6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e7c:	d113      	bne.n	8001ea6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e7e:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <HAL_TIM_Base_MspInit+0x44>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	4a0b      	ldr	r2, [pc, #44]	; (8001eb0 <HAL_TIM_Base_MspInit+0x44>)
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	6413      	str	r3, [r2, #64]	; 0x40
 8001e8a:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <HAL_TIM_Base_MspInit+0x44>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001e96:	2200      	movs	r2, #0
 8001e98:	2101      	movs	r1, #1
 8001e9a:	201c      	movs	r0, #28
 8001e9c:	f7fe fc1a 	bl	80006d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ea0:	201c      	movs	r0, #28
 8001ea2:	f7fe fc33 	bl	800070c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ea6:	bf00      	nop
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40023800 	.word	0x40023800

08001eb4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b08c      	sub	sp, #48	; 0x30
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0); 
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	202d      	movs	r0, #45	; 0x2d
 8001eca:	f7fe fc03 	bl	80006d4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn); 
 8001ece:	202d      	movs	r0, #45	; 0x2d
 8001ed0:	f7fe fc1c 	bl	800070c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8001ed4:	4b1f      	ldr	r3, [pc, #124]	; (8001f54 <HAL_InitTick+0xa0>)
 8001ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed8:	4a1e      	ldr	r2, [pc, #120]	; (8001f54 <HAL_InitTick+0xa0>)
 8001eda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ede:	6413      	str	r3, [r2, #64]	; 0x40
 8001ee0:	4b1c      	ldr	r3, [pc, #112]	; (8001f54 <HAL_InitTick+0xa0>)
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001eec:	f107 0210 	add.w	r2, r7, #16
 8001ef0:	f107 0314 	add.w	r3, r7, #20
 8001ef4:	4611      	mov	r1, r2
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff fa1e 	bl	8001338 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001efc:	f7ff fa08 	bl	8001310 <HAL_RCC_GetPCLK1Freq>
 8001f00:	4603      	mov	r3, r0
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f08:	4a13      	ldr	r2, [pc, #76]	; (8001f58 <HAL_InitTick+0xa4>)
 8001f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0e:	0c9b      	lsrs	r3, r3, #18
 8001f10:	3b01      	subs	r3, #1
 8001f12:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8001f14:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <HAL_InitTick+0xa8>)
 8001f16:	4a12      	ldr	r2, [pc, #72]	; (8001f60 <HAL_InitTick+0xac>)
 8001f18:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000 / 1000) - 1;
 8001f1a:	4b10      	ldr	r3, [pc, #64]	; (8001f5c <HAL_InitTick+0xa8>)
 8001f1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f20:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8001f22:	4a0e      	ldr	r2, [pc, #56]	; (8001f5c <HAL_InitTick+0xa8>)
 8001f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f26:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8001f28:	4b0c      	ldr	r3, [pc, #48]	; (8001f5c <HAL_InitTick+0xa8>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f2e:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <HAL_InitTick+0xa8>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8001f34:	4809      	ldr	r0, [pc, #36]	; (8001f5c <HAL_InitTick+0xa8>)
 8001f36:	f7ff fa31 	bl	800139c <HAL_TIM_Base_Init>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d104      	bne.n	8001f4a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8001f40:	4806      	ldr	r0, [pc, #24]	; (8001f5c <HAL_InitTick+0xa8>)
 8001f42:	f7ff fa57 	bl	80013f4 <HAL_TIM_Base_Start_IT>
 8001f46:	4603      	mov	r3, r0
 8001f48:	e000      	b.n	8001f4c <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3730      	adds	r7, #48	; 0x30
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40023800 	.word	0x40023800
 8001f58:	431bde83 	.word	0x431bde83
 8001f5c:	20000068 	.word	0x20000068
 8001f60:	40002000 	.word	0x40002000

08001f64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f68:	bf00      	nop
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f72:	b480      	push	{r7}
 8001f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f76:	e7fe      	b.n	8001f76 <HardFault_Handler+0x4>

08001f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f7c:	e7fe      	b.n	8001f7c <MemManage_Handler+0x4>

08001f7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f82:	e7fe      	b.n	8001f82 <BusFault_Handler+0x4>

08001f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f88:	e7fe      	b.n	8001f88 <UsageFault_Handler+0x4>

08001f8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f8e:	bf00      	nop
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
	...

08001fc4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001fc8:	4802      	ldr	r0, [pc, #8]	; (8001fd4 <TIM2_IRQHandler+0x10>)
 8001fca:	f7ff fa3d 	bl	8001448 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20000028 	.word	0x20000028

08001fd8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001fdc:	4802      	ldr	r0, [pc, #8]	; (8001fe8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001fde:	f7ff fa33 	bl	8001448 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	20000068 	.word	0x20000068

08001fec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ff0:	4b15      	ldr	r3, [pc, #84]	; (8002048 <SystemInit+0x5c>)
 8001ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ff6:	4a14      	ldr	r2, [pc, #80]	; (8002048 <SystemInit+0x5c>)
 8001ff8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ffc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002000:	4b12      	ldr	r3, [pc, #72]	; (800204c <SystemInit+0x60>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a11      	ldr	r2, [pc, #68]	; (800204c <SystemInit+0x60>)
 8002006:	f043 0301 	orr.w	r3, r3, #1
 800200a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800200c:	4b0f      	ldr	r3, [pc, #60]	; (800204c <SystemInit+0x60>)
 800200e:	2200      	movs	r2, #0
 8002010:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002012:	4b0e      	ldr	r3, [pc, #56]	; (800204c <SystemInit+0x60>)
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	490d      	ldr	r1, [pc, #52]	; (800204c <SystemInit+0x60>)
 8002018:	4b0d      	ldr	r3, [pc, #52]	; (8002050 <SystemInit+0x64>)
 800201a:	4013      	ands	r3, r2
 800201c:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800201e:	4b0b      	ldr	r3, [pc, #44]	; (800204c <SystemInit+0x60>)
 8002020:	4a0c      	ldr	r2, [pc, #48]	; (8002054 <SystemInit+0x68>)
 8002022:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002024:	4b09      	ldr	r3, [pc, #36]	; (800204c <SystemInit+0x60>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a08      	ldr	r2, [pc, #32]	; (800204c <SystemInit+0x60>)
 800202a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800202e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002030:	4b06      	ldr	r3, [pc, #24]	; (800204c <SystemInit+0x60>)
 8002032:	2200      	movs	r2, #0
 8002034:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002036:	4b04      	ldr	r3, [pc, #16]	; (8002048 <SystemInit+0x5c>)
 8002038:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800203c:	609a      	str	r2, [r3, #8]
#endif
}
 800203e:	bf00      	nop
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	e000ed00 	.word	0xe000ed00
 800204c:	40023800 	.word	0x40023800
 8002050:	fef6ffff 	.word	0xfef6ffff
 8002054:	24003010 	.word	0x24003010

08002058 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002058:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002090 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800205c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800205e:	e003      	b.n	8002068 <LoopCopyDataInit>

08002060 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002060:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002062:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002064:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002066:	3104      	adds	r1, #4

08002068 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002068:	480b      	ldr	r0, [pc, #44]	; (8002098 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800206a:	4b0c      	ldr	r3, [pc, #48]	; (800209c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800206c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800206e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002070:	d3f6      	bcc.n	8002060 <CopyDataInit>
  ldr  r2, =_sbss
 8002072:	4a0b      	ldr	r2, [pc, #44]	; (80020a0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002074:	e002      	b.n	800207c <LoopFillZerobss>

08002076 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002076:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002078:	f842 3b04 	str.w	r3, [r2], #4

0800207c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800207c:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800207e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002080:	d3f9      	bcc.n	8002076 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002082:	f7ff ffb3 	bl	8001fec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002086:	f000 f811 	bl	80020ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800208a:	f7ff fd93 	bl	8001bb4 <main>
  bx  lr    
 800208e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002090:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002094:	08002144 	.word	0x08002144
  ldr  r0, =_sdata
 8002098:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800209c:	20000008 	.word	0x20000008
  ldr  r2, =_sbss
 80020a0:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 80020a4:	200000a8 	.word	0x200000a8

080020a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020a8:	e7fe      	b.n	80020a8 <ADC_IRQHandler>
	...

080020ac <__libc_init_array>:
 80020ac:	b570      	push	{r4, r5, r6, lr}
 80020ae:	4e0d      	ldr	r6, [pc, #52]	; (80020e4 <__libc_init_array+0x38>)
 80020b0:	4c0d      	ldr	r4, [pc, #52]	; (80020e8 <__libc_init_array+0x3c>)
 80020b2:	1ba4      	subs	r4, r4, r6
 80020b4:	10a4      	asrs	r4, r4, #2
 80020b6:	2500      	movs	r5, #0
 80020b8:	42a5      	cmp	r5, r4
 80020ba:	d109      	bne.n	80020d0 <__libc_init_array+0x24>
 80020bc:	4e0b      	ldr	r6, [pc, #44]	; (80020ec <__libc_init_array+0x40>)
 80020be:	4c0c      	ldr	r4, [pc, #48]	; (80020f0 <__libc_init_array+0x44>)
 80020c0:	f000 f820 	bl	8002104 <_init>
 80020c4:	1ba4      	subs	r4, r4, r6
 80020c6:	10a4      	asrs	r4, r4, #2
 80020c8:	2500      	movs	r5, #0
 80020ca:	42a5      	cmp	r5, r4
 80020cc:	d105      	bne.n	80020da <__libc_init_array+0x2e>
 80020ce:	bd70      	pop	{r4, r5, r6, pc}
 80020d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020d4:	4798      	blx	r3
 80020d6:	3501      	adds	r5, #1
 80020d8:	e7ee      	b.n	80020b8 <__libc_init_array+0xc>
 80020da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80020de:	4798      	blx	r3
 80020e0:	3501      	adds	r5, #1
 80020e2:	e7f2      	b.n	80020ca <__libc_init_array+0x1e>
 80020e4:	0800213c 	.word	0x0800213c
 80020e8:	0800213c 	.word	0x0800213c
 80020ec:	0800213c 	.word	0x0800213c
 80020f0:	08002140 	.word	0x08002140

080020f4 <memset>:
 80020f4:	4402      	add	r2, r0
 80020f6:	4603      	mov	r3, r0
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d100      	bne.n	80020fe <memset+0xa>
 80020fc:	4770      	bx	lr
 80020fe:	f803 1b01 	strb.w	r1, [r3], #1
 8002102:	e7f9      	b.n	80020f8 <memset+0x4>

08002104 <_init>:
 8002104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002106:	bf00      	nop
 8002108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800210a:	bc08      	pop	{r3}
 800210c:	469e      	mov	lr, r3
 800210e:	4770      	bx	lr

08002110 <_fini>:
 8002110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002112:	bf00      	nop
 8002114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002116:	bc08      	pop	{r3}
 8002118:	469e      	mov	lr, r3
 800211a:	4770      	bx	lr
