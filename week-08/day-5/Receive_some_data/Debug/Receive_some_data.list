
Receive_some_data.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f00  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080030c8  080030c8  000130c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030e0  080030e0  00020008  2**0
                  CONTENTS
  4 .ARM          00000008  080030e0  080030e0  000130e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080030e8  080030e8  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030e8  080030e8  000130e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030ec  080030ec  000130ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  080030f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  20000008  080030f8  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  080030f8  00020150  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bdb3  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018d8  00000000  00000000  0002bdeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bb8  00000000  00000000  0002d6c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ae0  00000000  00000000  0002e280  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024ea0  00000000  00000000  0002ed60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009bde  00000000  00000000  00053c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e962d  00000000  00000000  0005d7de  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00146e0b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030ec  00000000  00000000  00146e88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000008 	.word	0x20000008
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080030b0 	.word	0x080030b0

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000000c 	.word	0x2000000c
 8000204:	080030b0 	.word	0x080030b0

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800051c:	2003      	movs	r0, #3
 800051e:	f000 f8d6 	bl	80006ce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000522:	2000      	movs	r0, #0
 8000524:	f002 fca6 	bl	8002e74 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000528:	f002 fc1e 	bl	8002d68 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800052c:	2300      	movs	r3, #0
}
 800052e:	4618      	mov	r0, r3
 8000530:	bd80      	pop	{r7, pc}
	...

08000534 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <HAL_IncTick+0x20>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	461a      	mov	r2, r3
 800053e:	4b06      	ldr	r3, [pc, #24]	; (8000558 <HAL_IncTick+0x24>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4413      	add	r3, r2
 8000544:	4a04      	ldr	r2, [pc, #16]	; (8000558 <HAL_IncTick+0x24>)
 8000546:	6013      	str	r3, [r2, #0]
}
 8000548:	bf00      	nop
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	20000000 	.word	0x20000000
 8000558:	20000024 	.word	0x20000024

0800055c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  return uwTick;
 8000560:	4b03      	ldr	r3, [pc, #12]	; (8000570 <HAL_GetTick+0x14>)
 8000562:	681b      	ldr	r3, [r3, #0]
}
 8000564:	4618      	mov	r0, r3
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	20000024 	.word	0x20000024

08000574 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	f003 0307 	and.w	r3, r3, #7
 8000582:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000584:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <__NVIC_SetPriorityGrouping+0x40>)
 8000586:	68db      	ldr	r3, [r3, #12]
 8000588:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800058a:	68ba      	ldr	r2, [r7, #8]
 800058c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000590:	4013      	ands	r3, r2
 8000592:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <__NVIC_SetPriorityGrouping+0x44>)
 800059e:	4313      	orrs	r3, r2
 80005a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005a2:	4a04      	ldr	r2, [pc, #16]	; (80005b4 <__NVIC_SetPriorityGrouping+0x40>)
 80005a4:	68bb      	ldr	r3, [r7, #8]
 80005a6:	60d3      	str	r3, [r2, #12]
}
 80005a8:	bf00      	nop
 80005aa:	3714      	adds	r7, #20
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr
 80005b4:	e000ed00 	.word	0xe000ed00
 80005b8:	05fa0000 	.word	0x05fa0000

080005bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005c0:	4b04      	ldr	r3, [pc, #16]	; (80005d4 <__NVIC_GetPriorityGrouping+0x18>)
 80005c2:	68db      	ldr	r3, [r3, #12]
 80005c4:	0a1b      	lsrs	r3, r3, #8
 80005c6:	f003 0307 	and.w	r3, r3, #7
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr
 80005d4:	e000ed00 	.word	0xe000ed00

080005d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	db0b      	blt.n	8000602 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	f003 021f 	and.w	r2, r3, #31
 80005f0:	4907      	ldr	r1, [pc, #28]	; (8000610 <__NVIC_EnableIRQ+0x38>)
 80005f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005f6:	095b      	lsrs	r3, r3, #5
 80005f8:	2001      	movs	r0, #1
 80005fa:	fa00 f202 	lsl.w	r2, r0, r2
 80005fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000602:	bf00      	nop
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	e000e100 	.word	0xe000e100

08000614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	6039      	str	r1, [r7, #0]
 800061e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000624:	2b00      	cmp	r3, #0
 8000626:	db0a      	blt.n	800063e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	b2da      	uxtb	r2, r3
 800062c:	490c      	ldr	r1, [pc, #48]	; (8000660 <__NVIC_SetPriority+0x4c>)
 800062e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000632:	0112      	lsls	r2, r2, #4
 8000634:	b2d2      	uxtb	r2, r2
 8000636:	440b      	add	r3, r1
 8000638:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800063c:	e00a      	b.n	8000654 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	b2da      	uxtb	r2, r3
 8000642:	4908      	ldr	r1, [pc, #32]	; (8000664 <__NVIC_SetPriority+0x50>)
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	f003 030f 	and.w	r3, r3, #15
 800064a:	3b04      	subs	r3, #4
 800064c:	0112      	lsls	r2, r2, #4
 800064e:	b2d2      	uxtb	r2, r2
 8000650:	440b      	add	r3, r1
 8000652:	761a      	strb	r2, [r3, #24]
}
 8000654:	bf00      	nop
 8000656:	370c      	adds	r7, #12
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	e000e100 	.word	0xe000e100
 8000664:	e000ed00 	.word	0xe000ed00

08000668 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000668:	b480      	push	{r7}
 800066a:	b089      	sub	sp, #36	; 0x24
 800066c:	af00      	add	r7, sp, #0
 800066e:	60f8      	str	r0, [r7, #12]
 8000670:	60b9      	str	r1, [r7, #8]
 8000672:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	f003 0307 	and.w	r3, r3, #7
 800067a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800067c:	69fb      	ldr	r3, [r7, #28]
 800067e:	f1c3 0307 	rsb	r3, r3, #7
 8000682:	2b04      	cmp	r3, #4
 8000684:	bf28      	it	cs
 8000686:	2304      	movcs	r3, #4
 8000688:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800068a:	69fb      	ldr	r3, [r7, #28]
 800068c:	3304      	adds	r3, #4
 800068e:	2b06      	cmp	r3, #6
 8000690:	d902      	bls.n	8000698 <NVIC_EncodePriority+0x30>
 8000692:	69fb      	ldr	r3, [r7, #28]
 8000694:	3b03      	subs	r3, #3
 8000696:	e000      	b.n	800069a <NVIC_EncodePriority+0x32>
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800069c:	f04f 32ff 	mov.w	r2, #4294967295
 80006a0:	69bb      	ldr	r3, [r7, #24]
 80006a2:	fa02 f303 	lsl.w	r3, r2, r3
 80006a6:	43da      	mvns	r2, r3
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	401a      	ands	r2, r3
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006b0:	f04f 31ff 	mov.w	r1, #4294967295
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	fa01 f303 	lsl.w	r3, r1, r3
 80006ba:	43d9      	mvns	r1, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c0:	4313      	orrs	r3, r2
         );
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3724      	adds	r7, #36	; 0x24
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr

080006ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b082      	sub	sp, #8
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	f7ff ff4c 	bl	8000574 <__NVIC_SetPriorityGrouping>
}
 80006dc:	bf00      	nop
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b086      	sub	sp, #24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
 80006f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80006f6:	f7ff ff61 	bl	80005bc <__NVIC_GetPriorityGrouping>
 80006fa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006fc:	687a      	ldr	r2, [r7, #4]
 80006fe:	68b9      	ldr	r1, [r7, #8]
 8000700:	6978      	ldr	r0, [r7, #20]
 8000702:	f7ff ffb1 	bl	8000668 <NVIC_EncodePriority>
 8000706:	4602      	mov	r2, r0
 8000708:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800070c:	4611      	mov	r1, r2
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff ff80 	bl	8000614 <__NVIC_SetPriority>
}
 8000714:	bf00      	nop
 8000716:	3718      	adds	r7, #24
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ff54 	bl	80005d8 <__NVIC_EnableIRQ>
}
 8000730:	bf00      	nop
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000738:	b480      	push	{r7}
 800073a:	b089      	sub	sp, #36	; 0x24
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000742:	2300      	movs	r3, #0
 8000744:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000746:	2300      	movs	r3, #0
 8000748:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800074a:	2300      	movs	r3, #0
 800074c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800074e:	2300      	movs	r3, #0
 8000750:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000752:	2300      	movs	r3, #0
 8000754:	61fb      	str	r3, [r7, #28]
 8000756:	e175      	b.n	8000a44 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000758:	2201      	movs	r2, #1
 800075a:	69fb      	ldr	r3, [r7, #28]
 800075c:	fa02 f303 	lsl.w	r3, r2, r3
 8000760:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	697a      	ldr	r2, [r7, #20]
 8000768:	4013      	ands	r3, r2
 800076a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800076c:	693a      	ldr	r2, [r7, #16]
 800076e:	697b      	ldr	r3, [r7, #20]
 8000770:	429a      	cmp	r2, r3
 8000772:	f040 8164 	bne.w	8000a3e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	685b      	ldr	r3, [r3, #4]
 800077a:	2b02      	cmp	r3, #2
 800077c:	d003      	beq.n	8000786 <HAL_GPIO_Init+0x4e>
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	685b      	ldr	r3, [r3, #4]
 8000782:	2b12      	cmp	r3, #18
 8000784:	d123      	bne.n	80007ce <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000786:	69fb      	ldr	r3, [r7, #28]
 8000788:	08da      	lsrs	r2, r3, #3
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	3208      	adds	r2, #8
 800078e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000792:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000794:	69fb      	ldr	r3, [r7, #28]
 8000796:	f003 0307 	and.w	r3, r3, #7
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	220f      	movs	r2, #15
 800079e:	fa02 f303 	lsl.w	r3, r2, r3
 80007a2:	43db      	mvns	r3, r3
 80007a4:	69ba      	ldr	r2, [r7, #24]
 80007a6:	4013      	ands	r3, r2
 80007a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	691a      	ldr	r2, [r3, #16]
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	f003 0307 	and.w	r3, r3, #7
 80007b4:	009b      	lsls	r3, r3, #2
 80007b6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ba:	69ba      	ldr	r2, [r7, #24]
 80007bc:	4313      	orrs	r3, r2
 80007be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	08da      	lsrs	r2, r3, #3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	3208      	adds	r2, #8
 80007c8:	69b9      	ldr	r1, [r7, #24]
 80007ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80007d4:	69fb      	ldr	r3, [r7, #28]
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	2203      	movs	r2, #3
 80007da:	fa02 f303 	lsl.w	r3, r2, r3
 80007de:	43db      	mvns	r3, r3
 80007e0:	69ba      	ldr	r2, [r7, #24]
 80007e2:	4013      	ands	r3, r2
 80007e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	685b      	ldr	r3, [r3, #4]
 80007ea:	f003 0203 	and.w	r2, r3, #3
 80007ee:	69fb      	ldr	r3, [r7, #28]
 80007f0:	005b      	lsls	r3, r3, #1
 80007f2:	fa02 f303 	lsl.w	r3, r2, r3
 80007f6:	69ba      	ldr	r2, [r7, #24]
 80007f8:	4313      	orrs	r3, r2
 80007fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	69ba      	ldr	r2, [r7, #24]
 8000800:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	685b      	ldr	r3, [r3, #4]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d00b      	beq.n	8000822 <HAL_GPIO_Init+0xea>
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	2b02      	cmp	r3, #2
 8000810:	d007      	beq.n	8000822 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000816:	2b11      	cmp	r3, #17
 8000818:	d003      	beq.n	8000822 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	2b12      	cmp	r3, #18
 8000820:	d130      	bne.n	8000884 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	689b      	ldr	r3, [r3, #8]
 8000826:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000828:	69fb      	ldr	r3, [r7, #28]
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	2203      	movs	r2, #3
 800082e:	fa02 f303 	lsl.w	r3, r2, r3
 8000832:	43db      	mvns	r3, r3
 8000834:	69ba      	ldr	r2, [r7, #24]
 8000836:	4013      	ands	r3, r2
 8000838:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	68da      	ldr	r2, [r3, #12]
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	005b      	lsls	r3, r3, #1
 8000842:	fa02 f303 	lsl.w	r3, r2, r3
 8000846:	69ba      	ldr	r2, [r7, #24]
 8000848:	4313      	orrs	r3, r2
 800084a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	69ba      	ldr	r2, [r7, #24]
 8000850:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000858:	2201      	movs	r2, #1
 800085a:	69fb      	ldr	r3, [r7, #28]
 800085c:	fa02 f303 	lsl.w	r3, r2, r3
 8000860:	43db      	mvns	r3, r3
 8000862:	69ba      	ldr	r2, [r7, #24]
 8000864:	4013      	ands	r3, r2
 8000866:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	091b      	lsrs	r3, r3, #4
 800086e:	f003 0201 	and.w	r2, r3, #1
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	fa02 f303 	lsl.w	r3, r2, r3
 8000878:	69ba      	ldr	r2, [r7, #24]
 800087a:	4313      	orrs	r3, r2
 800087c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	69ba      	ldr	r2, [r7, #24]
 8000882:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	68db      	ldr	r3, [r3, #12]
 8000888:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	2203      	movs	r2, #3
 8000890:	fa02 f303 	lsl.w	r3, r2, r3
 8000894:	43db      	mvns	r3, r3
 8000896:	69ba      	ldr	r2, [r7, #24]
 8000898:	4013      	ands	r3, r2
 800089a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	689a      	ldr	r2, [r3, #8]
 80008a0:	69fb      	ldr	r3, [r7, #28]
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	fa02 f303 	lsl.w	r3, r2, r3
 80008a8:	69ba      	ldr	r2, [r7, #24]
 80008aa:	4313      	orrs	r3, r2
 80008ac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	69ba      	ldr	r2, [r7, #24]
 80008b2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008bc:	2b00      	cmp	r3, #0
 80008be:	f000 80be 	beq.w	8000a3e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c2:	4b65      	ldr	r3, [pc, #404]	; (8000a58 <HAL_GPIO_Init+0x320>)
 80008c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c6:	4a64      	ldr	r2, [pc, #400]	; (8000a58 <HAL_GPIO_Init+0x320>)
 80008c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008cc:	6453      	str	r3, [r2, #68]	; 0x44
 80008ce:	4b62      	ldr	r3, [pc, #392]	; (8000a58 <HAL_GPIO_Init+0x320>)
 80008d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80008da:	4a60      	ldr	r2, [pc, #384]	; (8000a5c <HAL_GPIO_Init+0x324>)
 80008dc:	69fb      	ldr	r3, [r7, #28]
 80008de:	089b      	lsrs	r3, r3, #2
 80008e0:	3302      	adds	r3, #2
 80008e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80008e8:	69fb      	ldr	r3, [r7, #28]
 80008ea:	f003 0303 	and.w	r3, r3, #3
 80008ee:	009b      	lsls	r3, r3, #2
 80008f0:	220f      	movs	r2, #15
 80008f2:	fa02 f303 	lsl.w	r3, r2, r3
 80008f6:	43db      	mvns	r3, r3
 80008f8:	69ba      	ldr	r2, [r7, #24]
 80008fa:	4013      	ands	r3, r2
 80008fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4a57      	ldr	r2, [pc, #348]	; (8000a60 <HAL_GPIO_Init+0x328>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d037      	beq.n	8000976 <HAL_GPIO_Init+0x23e>
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4a56      	ldr	r2, [pc, #344]	; (8000a64 <HAL_GPIO_Init+0x32c>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d031      	beq.n	8000972 <HAL_GPIO_Init+0x23a>
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4a55      	ldr	r2, [pc, #340]	; (8000a68 <HAL_GPIO_Init+0x330>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d02b      	beq.n	800096e <HAL_GPIO_Init+0x236>
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4a54      	ldr	r2, [pc, #336]	; (8000a6c <HAL_GPIO_Init+0x334>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d025      	beq.n	800096a <HAL_GPIO_Init+0x232>
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4a53      	ldr	r2, [pc, #332]	; (8000a70 <HAL_GPIO_Init+0x338>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d01f      	beq.n	8000966 <HAL_GPIO_Init+0x22e>
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4a52      	ldr	r2, [pc, #328]	; (8000a74 <HAL_GPIO_Init+0x33c>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d019      	beq.n	8000962 <HAL_GPIO_Init+0x22a>
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4a51      	ldr	r2, [pc, #324]	; (8000a78 <HAL_GPIO_Init+0x340>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d013      	beq.n	800095e <HAL_GPIO_Init+0x226>
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4a50      	ldr	r2, [pc, #320]	; (8000a7c <HAL_GPIO_Init+0x344>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d00d      	beq.n	800095a <HAL_GPIO_Init+0x222>
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4a4f      	ldr	r2, [pc, #316]	; (8000a80 <HAL_GPIO_Init+0x348>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d007      	beq.n	8000956 <HAL_GPIO_Init+0x21e>
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4a4e      	ldr	r2, [pc, #312]	; (8000a84 <HAL_GPIO_Init+0x34c>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d101      	bne.n	8000952 <HAL_GPIO_Init+0x21a>
 800094e:	2309      	movs	r3, #9
 8000950:	e012      	b.n	8000978 <HAL_GPIO_Init+0x240>
 8000952:	230a      	movs	r3, #10
 8000954:	e010      	b.n	8000978 <HAL_GPIO_Init+0x240>
 8000956:	2308      	movs	r3, #8
 8000958:	e00e      	b.n	8000978 <HAL_GPIO_Init+0x240>
 800095a:	2307      	movs	r3, #7
 800095c:	e00c      	b.n	8000978 <HAL_GPIO_Init+0x240>
 800095e:	2306      	movs	r3, #6
 8000960:	e00a      	b.n	8000978 <HAL_GPIO_Init+0x240>
 8000962:	2305      	movs	r3, #5
 8000964:	e008      	b.n	8000978 <HAL_GPIO_Init+0x240>
 8000966:	2304      	movs	r3, #4
 8000968:	e006      	b.n	8000978 <HAL_GPIO_Init+0x240>
 800096a:	2303      	movs	r3, #3
 800096c:	e004      	b.n	8000978 <HAL_GPIO_Init+0x240>
 800096e:	2302      	movs	r3, #2
 8000970:	e002      	b.n	8000978 <HAL_GPIO_Init+0x240>
 8000972:	2301      	movs	r3, #1
 8000974:	e000      	b.n	8000978 <HAL_GPIO_Init+0x240>
 8000976:	2300      	movs	r3, #0
 8000978:	69fa      	ldr	r2, [r7, #28]
 800097a:	f002 0203 	and.w	r2, r2, #3
 800097e:	0092      	lsls	r2, r2, #2
 8000980:	4093      	lsls	r3, r2
 8000982:	69ba      	ldr	r2, [r7, #24]
 8000984:	4313      	orrs	r3, r2
 8000986:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000988:	4934      	ldr	r1, [pc, #208]	; (8000a5c <HAL_GPIO_Init+0x324>)
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	089b      	lsrs	r3, r3, #2
 800098e:	3302      	adds	r3, #2
 8000990:	69ba      	ldr	r2, [r7, #24]
 8000992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000996:	4b3c      	ldr	r3, [pc, #240]	; (8000a88 <HAL_GPIO_Init+0x350>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800099c:	693b      	ldr	r3, [r7, #16]
 800099e:	43db      	mvns	r3, r3
 80009a0:	69ba      	ldr	r2, [r7, #24]
 80009a2:	4013      	ands	r3, r2
 80009a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d003      	beq.n	80009ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80009b2:	69ba      	ldr	r2, [r7, #24]
 80009b4:	693b      	ldr	r3, [r7, #16]
 80009b6:	4313      	orrs	r3, r2
 80009b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80009ba:	4a33      	ldr	r2, [pc, #204]	; (8000a88 <HAL_GPIO_Init+0x350>)
 80009bc:	69bb      	ldr	r3, [r7, #24]
 80009be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80009c0:	4b31      	ldr	r3, [pc, #196]	; (8000a88 <HAL_GPIO_Init+0x350>)
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009c6:	693b      	ldr	r3, [r7, #16]
 80009c8:	43db      	mvns	r3, r3
 80009ca:	69ba      	ldr	r2, [r7, #24]
 80009cc:	4013      	ands	r3, r2
 80009ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d003      	beq.n	80009e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80009dc:	69ba      	ldr	r2, [r7, #24]
 80009de:	693b      	ldr	r3, [r7, #16]
 80009e0:	4313      	orrs	r3, r2
 80009e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80009e4:	4a28      	ldr	r2, [pc, #160]	; (8000a88 <HAL_GPIO_Init+0x350>)
 80009e6:	69bb      	ldr	r3, [r7, #24]
 80009e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80009ea:	4b27      	ldr	r3, [pc, #156]	; (8000a88 <HAL_GPIO_Init+0x350>)
 80009ec:	689b      	ldr	r3, [r3, #8]
 80009ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009f0:	693b      	ldr	r3, [r7, #16]
 80009f2:	43db      	mvns	r3, r3
 80009f4:	69ba      	ldr	r2, [r7, #24]
 80009f6:	4013      	ands	r3, r2
 80009f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d003      	beq.n	8000a0e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000a06:	69ba      	ldr	r2, [r7, #24]
 8000a08:	693b      	ldr	r3, [r7, #16]
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a0e:	4a1e      	ldr	r2, [pc, #120]	; (8000a88 <HAL_GPIO_Init+0x350>)
 8000a10:	69bb      	ldr	r3, [r7, #24]
 8000a12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a14:	4b1c      	ldr	r3, [pc, #112]	; (8000a88 <HAL_GPIO_Init+0x350>)
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a1a:	693b      	ldr	r3, [r7, #16]
 8000a1c:	43db      	mvns	r3, r3
 8000a1e:	69ba      	ldr	r2, [r7, #24]
 8000a20:	4013      	ands	r3, r2
 8000a22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d003      	beq.n	8000a38 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000a30:	69ba      	ldr	r2, [r7, #24]
 8000a32:	693b      	ldr	r3, [r7, #16]
 8000a34:	4313      	orrs	r3, r2
 8000a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000a38:	4a13      	ldr	r2, [pc, #76]	; (8000a88 <HAL_GPIO_Init+0x350>)
 8000a3a:	69bb      	ldr	r3, [r7, #24]
 8000a3c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	3301      	adds	r3, #1
 8000a42:	61fb      	str	r3, [r7, #28]
 8000a44:	69fb      	ldr	r3, [r7, #28]
 8000a46:	2b0f      	cmp	r3, #15
 8000a48:	f67f ae86 	bls.w	8000758 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000a4c:	bf00      	nop
 8000a4e:	3724      	adds	r7, #36	; 0x24
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40013800 	.word	0x40013800
 8000a60:	40020000 	.word	0x40020000
 8000a64:	40020400 	.word	0x40020400
 8000a68:	40020800 	.word	0x40020800
 8000a6c:	40020c00 	.word	0x40020c00
 8000a70:	40021000 	.word	0x40021000
 8000a74:	40021400 	.word	0x40021400
 8000a78:	40021800 	.word	0x40021800
 8000a7c:	40021c00 	.word	0x40021c00
 8000a80:	40022000 	.word	0x40022000
 8000a84:	40022400 	.word	0x40022400
 8000a88:	40013c00 	.word	0x40013c00

08000a8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8000a94:	2300      	movs	r3, #0
 8000a96:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d101      	bne.n	8000aa2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	e25c      	b.n	8000f5c <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	f000 8087 	beq.w	8000bbe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ab0:	4b96      	ldr	r3, [pc, #600]	; (8000d0c <HAL_RCC_OscConfig+0x280>)
 8000ab2:	689b      	ldr	r3, [r3, #8]
 8000ab4:	f003 030c 	and.w	r3, r3, #12
 8000ab8:	2b04      	cmp	r3, #4
 8000aba:	d00c      	beq.n	8000ad6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000abc:	4b93      	ldr	r3, [pc, #588]	; (8000d0c <HAL_RCC_OscConfig+0x280>)
 8000abe:	689b      	ldr	r3, [r3, #8]
 8000ac0:	f003 030c 	and.w	r3, r3, #12
 8000ac4:	2b08      	cmp	r3, #8
 8000ac6:	d112      	bne.n	8000aee <HAL_RCC_OscConfig+0x62>
 8000ac8:	4b90      	ldr	r3, [pc, #576]	; (8000d0c <HAL_RCC_OscConfig+0x280>)
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ad0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000ad4:	d10b      	bne.n	8000aee <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ad6:	4b8d      	ldr	r3, [pc, #564]	; (8000d0c <HAL_RCC_OscConfig+0x280>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d06c      	beq.n	8000bbc <HAL_RCC_OscConfig+0x130>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d168      	bne.n	8000bbc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
 8000aec:	e236      	b.n	8000f5c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000af6:	d106      	bne.n	8000b06 <HAL_RCC_OscConfig+0x7a>
 8000af8:	4b84      	ldr	r3, [pc, #528]	; (8000d0c <HAL_RCC_OscConfig+0x280>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a83      	ldr	r2, [pc, #524]	; (8000d0c <HAL_RCC_OscConfig+0x280>)
 8000afe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b02:	6013      	str	r3, [r2, #0]
 8000b04:	e02e      	b.n	8000b64 <HAL_RCC_OscConfig+0xd8>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d10c      	bne.n	8000b28 <HAL_RCC_OscConfig+0x9c>
 8000b0e:	4b7f      	ldr	r3, [pc, #508]	; (8000d0c <HAL_RCC_OscConfig+0x280>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a7e      	ldr	r2, [pc, #504]	; (8000d0c <HAL_RCC_OscConfig+0x280>)
 8000b14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b18:	6013      	str	r3, [r2, #0]
 8000b1a:	4b7c      	ldr	r3, [pc, #496]	; (8000d0c <HAL_RCC_OscConfig+0x280>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a7b      	ldr	r2, [pc, #492]	; (8000d0c <HAL_RCC_OscConfig+0x280>)
 8000b20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b24:	6013      	str	r3, [r2, #0]
 8000b26:	e01d      	b.n	8000b64 <HAL_RCC_OscConfig+0xd8>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b30:	d10c      	bne.n	8000b4c <HAL_RCC_OscConfig+0xc0>
 8000b32:	4b76      	ldr	r3, [pc, #472]	; (8000d0c <HAL_RCC_OscConfig+0x280>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a75      	ldr	r2, [pc, #468]	; (8000d0c <HAL_RCC_OscConfig+0x280>)
 8000b38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b3c:	6013      	str	r3, [r2, #0]
 8000b3e:	4b73      	ldr	r3, [pc, #460]	; (8000d0c <HAL_RCC_OscConfig+0x280>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a72      	ldr	r2, [pc, #456]	; (8000d0c <HAL_RCC_OscConfig+0x280>)
 8000b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b48:	6013      	str	r3, [r2, #0]
 8000b4a:	e00b      	b.n	8000b64 <HAL_RCC_OscConfig+0xd8>
 8000b4c:	4b6f      	ldr	r3, [pc, #444]	; (8000d0c <HAL_RCC_OscConfig+0x280>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a6e      	ldr	r2, [pc, #440]	; (8000d0c <HAL_RCC_OscConfig+0x280>)
 8000b52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b56:	6013      	str	r3, [r2, #0]
 8000b58:	4b6c      	ldr	r3, [pc, #432]	; (8000d0c <HAL_RCC_OscConfig+0x280>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a6b      	ldr	r2, [pc, #428]	; (8000d0c <HAL_RCC_OscConfig+0x280>)
 8000b5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d013      	beq.n	8000b94 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b6c:	f7ff fcf6 	bl	800055c <HAL_GetTick>
 8000b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b72:	e008      	b.n	8000b86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b74:	f7ff fcf2 	bl	800055c <HAL_GetTick>
 8000b78:	4602      	mov	r2, r0
 8000b7a:	693b      	ldr	r3, [r7, #16]
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	2b64      	cmp	r3, #100	; 0x64
 8000b80:	d901      	bls.n	8000b86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000b82:	2303      	movs	r3, #3
 8000b84:	e1ea      	b.n	8000f5c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b86:	4b61      	ldr	r3, [pc, #388]	; (8000d0c <HAL_RCC_OscConfig+0x280>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d0f0      	beq.n	8000b74 <HAL_RCC_OscConfig+0xe8>
 8000b92:	e014      	b.n	8000bbe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b94:	f7ff fce2 	bl	800055c <HAL_GetTick>
 8000b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b9a:	e008      	b.n	8000bae <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b9c:	f7ff fcde 	bl	800055c <HAL_GetTick>
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	693b      	ldr	r3, [r7, #16]
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	2b64      	cmp	r3, #100	; 0x64
 8000ba8:	d901      	bls.n	8000bae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000baa:	2303      	movs	r3, #3
 8000bac:	e1d6      	b.n	8000f5c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bae:	4b57      	ldr	r3, [pc, #348]	; (8000d0c <HAL_RCC_OscConfig+0x280>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d1f0      	bne.n	8000b9c <HAL_RCC_OscConfig+0x110>
 8000bba:	e000      	b.n	8000bbe <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f003 0302 	and.w	r3, r3, #2
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d069      	beq.n	8000c9e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000bca:	4b50      	ldr	r3, [pc, #320]	; (8000d0c <HAL_RCC_OscConfig+0x280>)
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	f003 030c 	and.w	r3, r3, #12
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d00b      	beq.n	8000bee <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000bd6:	4b4d      	ldr	r3, [pc, #308]	; (8000d0c <HAL_RCC_OscConfig+0x280>)
 8000bd8:	689b      	ldr	r3, [r3, #8]
 8000bda:	f003 030c 	and.w	r3, r3, #12
 8000bde:	2b08      	cmp	r3, #8
 8000be0:	d11c      	bne.n	8000c1c <HAL_RCC_OscConfig+0x190>
 8000be2:	4b4a      	ldr	r3, [pc, #296]	; (8000d0c <HAL_RCC_OscConfig+0x280>)
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d116      	bne.n	8000c1c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bee:	4b47      	ldr	r3, [pc, #284]	; (8000d0c <HAL_RCC_OscConfig+0x280>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f003 0302 	and.w	r3, r3, #2
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d005      	beq.n	8000c06 <HAL_RCC_OscConfig+0x17a>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	68db      	ldr	r3, [r3, #12]
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d001      	beq.n	8000c06 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
 8000c04:	e1aa      	b.n	8000f5c <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c06:	4b41      	ldr	r3, [pc, #260]	; (8000d0c <HAL_RCC_OscConfig+0x280>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	691b      	ldr	r3, [r3, #16]
 8000c12:	00db      	lsls	r3, r3, #3
 8000c14:	493d      	ldr	r1, [pc, #244]	; (8000d0c <HAL_RCC_OscConfig+0x280>)
 8000c16:	4313      	orrs	r3, r2
 8000c18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c1a:	e040      	b.n	8000c9e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d023      	beq.n	8000c6c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c24:	4b39      	ldr	r3, [pc, #228]	; (8000d0c <HAL_RCC_OscConfig+0x280>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a38      	ldr	r2, [pc, #224]	; (8000d0c <HAL_RCC_OscConfig+0x280>)
 8000c2a:	f043 0301 	orr.w	r3, r3, #1
 8000c2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c30:	f7ff fc94 	bl	800055c <HAL_GetTick>
 8000c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c36:	e008      	b.n	8000c4a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c38:	f7ff fc90 	bl	800055c <HAL_GetTick>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	d901      	bls.n	8000c4a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8000c46:	2303      	movs	r3, #3
 8000c48:	e188      	b.n	8000f5c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c4a:	4b30      	ldr	r3, [pc, #192]	; (8000d0c <HAL_RCC_OscConfig+0x280>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f003 0302 	and.w	r3, r3, #2
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d0f0      	beq.n	8000c38 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c56:	4b2d      	ldr	r3, [pc, #180]	; (8000d0c <HAL_RCC_OscConfig+0x280>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	691b      	ldr	r3, [r3, #16]
 8000c62:	00db      	lsls	r3, r3, #3
 8000c64:	4929      	ldr	r1, [pc, #164]	; (8000d0c <HAL_RCC_OscConfig+0x280>)
 8000c66:	4313      	orrs	r3, r2
 8000c68:	600b      	str	r3, [r1, #0]
 8000c6a:	e018      	b.n	8000c9e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c6c:	4b27      	ldr	r3, [pc, #156]	; (8000d0c <HAL_RCC_OscConfig+0x280>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a26      	ldr	r2, [pc, #152]	; (8000d0c <HAL_RCC_OscConfig+0x280>)
 8000c72:	f023 0301 	bic.w	r3, r3, #1
 8000c76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c78:	f7ff fc70 	bl	800055c <HAL_GetTick>
 8000c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c7e:	e008      	b.n	8000c92 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c80:	f7ff fc6c 	bl	800055c <HAL_GetTick>
 8000c84:	4602      	mov	r2, r0
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	1ad3      	subs	r3, r2, r3
 8000c8a:	2b02      	cmp	r3, #2
 8000c8c:	d901      	bls.n	8000c92 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	e164      	b.n	8000f5c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c92:	4b1e      	ldr	r3, [pc, #120]	; (8000d0c <HAL_RCC_OscConfig+0x280>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f003 0302 	and.w	r3, r3, #2
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d1f0      	bne.n	8000c80 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f003 0308 	and.w	r3, r3, #8
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d038      	beq.n	8000d1c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	695b      	ldr	r3, [r3, #20]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d019      	beq.n	8000ce6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000cb2:	4b16      	ldr	r3, [pc, #88]	; (8000d0c <HAL_RCC_OscConfig+0x280>)
 8000cb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000cb6:	4a15      	ldr	r2, [pc, #84]	; (8000d0c <HAL_RCC_OscConfig+0x280>)
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000cbe:	f7ff fc4d 	bl	800055c <HAL_GetTick>
 8000cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cc4:	e008      	b.n	8000cd8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cc6:	f7ff fc49 	bl	800055c <HAL_GetTick>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	1ad3      	subs	r3, r2, r3
 8000cd0:	2b02      	cmp	r3, #2
 8000cd2:	d901      	bls.n	8000cd8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	e141      	b.n	8000f5c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <HAL_RCC_OscConfig+0x280>)
 8000cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000cdc:	f003 0302 	and.w	r3, r3, #2
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d0f0      	beq.n	8000cc6 <HAL_RCC_OscConfig+0x23a>
 8000ce4:	e01a      	b.n	8000d1c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ce6:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <HAL_RCC_OscConfig+0x280>)
 8000ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000cea:	4a08      	ldr	r2, [pc, #32]	; (8000d0c <HAL_RCC_OscConfig+0x280>)
 8000cec:	f023 0301 	bic.w	r3, r3, #1
 8000cf0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000cf2:	f7ff fc33 	bl	800055c <HAL_GetTick>
 8000cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cf8:	e00a      	b.n	8000d10 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cfa:	f7ff fc2f 	bl	800055c <HAL_GetTick>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	1ad3      	subs	r3, r2, r3
 8000d04:	2b02      	cmp	r3, #2
 8000d06:	d903      	bls.n	8000d10 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	e127      	b.n	8000f5c <HAL_RCC_OscConfig+0x4d0>
 8000d0c:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d10:	4b94      	ldr	r3, [pc, #592]	; (8000f64 <HAL_RCC_OscConfig+0x4d8>)
 8000d12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d14:	f003 0302 	and.w	r3, r3, #2
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d1ee      	bne.n	8000cfa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f003 0304 	and.w	r3, r3, #4
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	f000 80a4 	beq.w	8000e72 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d2a:	4b8e      	ldr	r3, [pc, #568]	; (8000f64 <HAL_RCC_OscConfig+0x4d8>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d10d      	bne.n	8000d52 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d36:	4b8b      	ldr	r3, [pc, #556]	; (8000f64 <HAL_RCC_OscConfig+0x4d8>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3a:	4a8a      	ldr	r2, [pc, #552]	; (8000f64 <HAL_RCC_OscConfig+0x4d8>)
 8000d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d40:	6413      	str	r3, [r2, #64]	; 0x40
 8000d42:	4b88      	ldr	r3, [pc, #544]	; (8000f64 <HAL_RCC_OscConfig+0x4d8>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000d52:	4b85      	ldr	r3, [pc, #532]	; (8000f68 <HAL_RCC_OscConfig+0x4dc>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d118      	bne.n	8000d90 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8000d5e:	4b82      	ldr	r3, [pc, #520]	; (8000f68 <HAL_RCC_OscConfig+0x4dc>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a81      	ldr	r2, [pc, #516]	; (8000f68 <HAL_RCC_OscConfig+0x4dc>)
 8000d64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d6a:	f7ff fbf7 	bl	800055c <HAL_GetTick>
 8000d6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000d70:	e008      	b.n	8000d84 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000d72:	f7ff fbf3 	bl	800055c <HAL_GetTick>
 8000d76:	4602      	mov	r2, r0
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	1ad3      	subs	r3, r2, r3
 8000d7c:	2b64      	cmp	r3, #100	; 0x64
 8000d7e:	d901      	bls.n	8000d84 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8000d80:	2303      	movs	r3, #3
 8000d82:	e0eb      	b.n	8000f5c <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000d84:	4b78      	ldr	r3, [pc, #480]	; (8000f68 <HAL_RCC_OscConfig+0x4dc>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d0f0      	beq.n	8000d72 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d106      	bne.n	8000da6 <HAL_RCC_OscConfig+0x31a>
 8000d98:	4b72      	ldr	r3, [pc, #456]	; (8000f64 <HAL_RCC_OscConfig+0x4d8>)
 8000d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d9c:	4a71      	ldr	r2, [pc, #452]	; (8000f64 <HAL_RCC_OscConfig+0x4d8>)
 8000d9e:	f043 0301 	orr.w	r3, r3, #1
 8000da2:	6713      	str	r3, [r2, #112]	; 0x70
 8000da4:	e02d      	b.n	8000e02 <HAL_RCC_OscConfig+0x376>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	689b      	ldr	r3, [r3, #8]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d10c      	bne.n	8000dc8 <HAL_RCC_OscConfig+0x33c>
 8000dae:	4b6d      	ldr	r3, [pc, #436]	; (8000f64 <HAL_RCC_OscConfig+0x4d8>)
 8000db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000db2:	4a6c      	ldr	r2, [pc, #432]	; (8000f64 <HAL_RCC_OscConfig+0x4d8>)
 8000db4:	f023 0301 	bic.w	r3, r3, #1
 8000db8:	6713      	str	r3, [r2, #112]	; 0x70
 8000dba:	4b6a      	ldr	r3, [pc, #424]	; (8000f64 <HAL_RCC_OscConfig+0x4d8>)
 8000dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dbe:	4a69      	ldr	r2, [pc, #420]	; (8000f64 <HAL_RCC_OscConfig+0x4d8>)
 8000dc0:	f023 0304 	bic.w	r3, r3, #4
 8000dc4:	6713      	str	r3, [r2, #112]	; 0x70
 8000dc6:	e01c      	b.n	8000e02 <HAL_RCC_OscConfig+0x376>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	2b05      	cmp	r3, #5
 8000dce:	d10c      	bne.n	8000dea <HAL_RCC_OscConfig+0x35e>
 8000dd0:	4b64      	ldr	r3, [pc, #400]	; (8000f64 <HAL_RCC_OscConfig+0x4d8>)
 8000dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dd4:	4a63      	ldr	r2, [pc, #396]	; (8000f64 <HAL_RCC_OscConfig+0x4d8>)
 8000dd6:	f043 0304 	orr.w	r3, r3, #4
 8000dda:	6713      	str	r3, [r2, #112]	; 0x70
 8000ddc:	4b61      	ldr	r3, [pc, #388]	; (8000f64 <HAL_RCC_OscConfig+0x4d8>)
 8000dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000de0:	4a60      	ldr	r2, [pc, #384]	; (8000f64 <HAL_RCC_OscConfig+0x4d8>)
 8000de2:	f043 0301 	orr.w	r3, r3, #1
 8000de6:	6713      	str	r3, [r2, #112]	; 0x70
 8000de8:	e00b      	b.n	8000e02 <HAL_RCC_OscConfig+0x376>
 8000dea:	4b5e      	ldr	r3, [pc, #376]	; (8000f64 <HAL_RCC_OscConfig+0x4d8>)
 8000dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dee:	4a5d      	ldr	r2, [pc, #372]	; (8000f64 <HAL_RCC_OscConfig+0x4d8>)
 8000df0:	f023 0301 	bic.w	r3, r3, #1
 8000df4:	6713      	str	r3, [r2, #112]	; 0x70
 8000df6:	4b5b      	ldr	r3, [pc, #364]	; (8000f64 <HAL_RCC_OscConfig+0x4d8>)
 8000df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dfa:	4a5a      	ldr	r2, [pc, #360]	; (8000f64 <HAL_RCC_OscConfig+0x4d8>)
 8000dfc:	f023 0304 	bic.w	r3, r3, #4
 8000e00:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d015      	beq.n	8000e36 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e0a:	f7ff fba7 	bl	800055c <HAL_GetTick>
 8000e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e10:	e00a      	b.n	8000e28 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e12:	f7ff fba3 	bl	800055c <HAL_GetTick>
 8000e16:	4602      	mov	r2, r0
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	1ad3      	subs	r3, r2, r3
 8000e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d901      	bls.n	8000e28 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8000e24:	2303      	movs	r3, #3
 8000e26:	e099      	b.n	8000f5c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e28:	4b4e      	ldr	r3, [pc, #312]	; (8000f64 <HAL_RCC_OscConfig+0x4d8>)
 8000e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e2c:	f003 0302 	and.w	r3, r3, #2
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d0ee      	beq.n	8000e12 <HAL_RCC_OscConfig+0x386>
 8000e34:	e014      	b.n	8000e60 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e36:	f7ff fb91 	bl	800055c <HAL_GetTick>
 8000e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e3c:	e00a      	b.n	8000e54 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e3e:	f7ff fb8d 	bl	800055c <HAL_GetTick>
 8000e42:	4602      	mov	r2, r0
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	1ad3      	subs	r3, r2, r3
 8000e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d901      	bls.n	8000e54 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8000e50:	2303      	movs	r3, #3
 8000e52:	e083      	b.n	8000f5c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e54:	4b43      	ldr	r3, [pc, #268]	; (8000f64 <HAL_RCC_OscConfig+0x4d8>)
 8000e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e58:	f003 0302 	and.w	r3, r3, #2
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d1ee      	bne.n	8000e3e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000e60:	7dfb      	ldrb	r3, [r7, #23]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d105      	bne.n	8000e72 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e66:	4b3f      	ldr	r3, [pc, #252]	; (8000f64 <HAL_RCC_OscConfig+0x4d8>)
 8000e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6a:	4a3e      	ldr	r2, [pc, #248]	; (8000f64 <HAL_RCC_OscConfig+0x4d8>)
 8000e6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e70:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	699b      	ldr	r3, [r3, #24]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d06f      	beq.n	8000f5a <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e7a:	4b3a      	ldr	r3, [pc, #232]	; (8000f64 <HAL_RCC_OscConfig+0x4d8>)
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	f003 030c 	and.w	r3, r3, #12
 8000e82:	2b08      	cmp	r3, #8
 8000e84:	d067      	beq.n	8000f56 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	699b      	ldr	r3, [r3, #24]
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d149      	bne.n	8000f22 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e8e:	4b35      	ldr	r3, [pc, #212]	; (8000f64 <HAL_RCC_OscConfig+0x4d8>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a34      	ldr	r2, [pc, #208]	; (8000f64 <HAL_RCC_OscConfig+0x4d8>)
 8000e94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000e98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e9a:	f7ff fb5f 	bl	800055c <HAL_GetTick>
 8000e9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ea0:	e008      	b.n	8000eb4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ea2:	f7ff fb5b 	bl	800055c <HAL_GetTick>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	1ad3      	subs	r3, r2, r3
 8000eac:	2b02      	cmp	r3, #2
 8000eae:	d901      	bls.n	8000eb4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	e053      	b.n	8000f5c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000eb4:	4b2b      	ldr	r3, [pc, #172]	; (8000f64 <HAL_RCC_OscConfig+0x4d8>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d1f0      	bne.n	8000ea2 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	69da      	ldr	r2, [r3, #28]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6a1b      	ldr	r3, [r3, #32]
 8000ec8:	431a      	orrs	r2, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ece:	019b      	lsls	r3, r3, #6
 8000ed0:	431a      	orrs	r2, r3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed6:	085b      	lsrs	r3, r3, #1
 8000ed8:	3b01      	subs	r3, #1
 8000eda:	041b      	lsls	r3, r3, #16
 8000edc:	431a      	orrs	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee2:	061b      	lsls	r3, r3, #24
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	4a1f      	ldr	r2, [pc, #124]	; (8000f64 <HAL_RCC_OscConfig+0x4d8>)
 8000ee8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000eec:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000eee:	4b1d      	ldr	r3, [pc, #116]	; (8000f64 <HAL_RCC_OscConfig+0x4d8>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a1c      	ldr	r2, [pc, #112]	; (8000f64 <HAL_RCC_OscConfig+0x4d8>)
 8000ef4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ef8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000efa:	f7ff fb2f 	bl	800055c <HAL_GetTick>
 8000efe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f00:	e008      	b.n	8000f14 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f02:	f7ff fb2b 	bl	800055c <HAL_GetTick>
 8000f06:	4602      	mov	r2, r0
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d901      	bls.n	8000f14 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8000f10:	2303      	movs	r3, #3
 8000f12:	e023      	b.n	8000f5c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f14:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <HAL_RCC_OscConfig+0x4d8>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d0f0      	beq.n	8000f02 <HAL_RCC_OscConfig+0x476>
 8000f20:	e01b      	b.n	8000f5a <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f22:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <HAL_RCC_OscConfig+0x4d8>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a0f      	ldr	r2, [pc, #60]	; (8000f64 <HAL_RCC_OscConfig+0x4d8>)
 8000f28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f2e:	f7ff fb15 	bl	800055c <HAL_GetTick>
 8000f32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f34:	e008      	b.n	8000f48 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f36:	f7ff fb11 	bl	800055c <HAL_GetTick>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d901      	bls.n	8000f48 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8000f44:	2303      	movs	r3, #3
 8000f46:	e009      	b.n	8000f5c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <HAL_RCC_OscConfig+0x4d8>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d1f0      	bne.n	8000f36 <HAL_RCC_OscConfig+0x4aa>
 8000f54:	e001      	b.n	8000f5a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e000      	b.n	8000f5c <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8000f5a:	2300      	movs	r3, #0
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3718      	adds	r7, #24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40023800 	.word	0x40023800
 8000f68:	40007000 	.word	0x40007000

08000f6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d101      	bne.n	8000f84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	e0ce      	b.n	8001122 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f84:	4b69      	ldr	r3, [pc, #420]	; (800112c <HAL_RCC_ClockConfig+0x1c0>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f003 030f 	and.w	r3, r3, #15
 8000f8c:	683a      	ldr	r2, [r7, #0]
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d910      	bls.n	8000fb4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f92:	4b66      	ldr	r3, [pc, #408]	; (800112c <HAL_RCC_ClockConfig+0x1c0>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f023 020f 	bic.w	r2, r3, #15
 8000f9a:	4964      	ldr	r1, [pc, #400]	; (800112c <HAL_RCC_ClockConfig+0x1c0>)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fa2:	4b62      	ldr	r3, [pc, #392]	; (800112c <HAL_RCC_ClockConfig+0x1c0>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f003 030f 	and.w	r3, r3, #15
 8000faa:	683a      	ldr	r2, [r7, #0]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d001      	beq.n	8000fb4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e0b6      	b.n	8001122 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f003 0302 	and.w	r3, r3, #2
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d020      	beq.n	8001002 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f003 0304 	and.w	r3, r3, #4
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d005      	beq.n	8000fd8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000fcc:	4b58      	ldr	r3, [pc, #352]	; (8001130 <HAL_RCC_ClockConfig+0x1c4>)
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	4a57      	ldr	r2, [pc, #348]	; (8001130 <HAL_RCC_ClockConfig+0x1c4>)
 8000fd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000fd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f003 0308 	and.w	r3, r3, #8
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d005      	beq.n	8000ff0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000fe4:	4b52      	ldr	r3, [pc, #328]	; (8001130 <HAL_RCC_ClockConfig+0x1c4>)
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	4a51      	ldr	r2, [pc, #324]	; (8001130 <HAL_RCC_ClockConfig+0x1c4>)
 8000fea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000fee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ff0:	4b4f      	ldr	r3, [pc, #316]	; (8001130 <HAL_RCC_ClockConfig+0x1c4>)
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	494c      	ldr	r1, [pc, #304]	; (8001130 <HAL_RCC_ClockConfig+0x1c4>)
 8000ffe:	4313      	orrs	r3, r2
 8001000:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	2b00      	cmp	r3, #0
 800100c:	d040      	beq.n	8001090 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d107      	bne.n	8001026 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001016:	4b46      	ldr	r3, [pc, #280]	; (8001130 <HAL_RCC_ClockConfig+0x1c4>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d115      	bne.n	800104e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e07d      	b.n	8001122 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	2b02      	cmp	r3, #2
 800102c:	d107      	bne.n	800103e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800102e:	4b40      	ldr	r3, [pc, #256]	; (8001130 <HAL_RCC_ClockConfig+0x1c4>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d109      	bne.n	800104e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e071      	b.n	8001122 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800103e:	4b3c      	ldr	r3, [pc, #240]	; (8001130 <HAL_RCC_ClockConfig+0x1c4>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	2b00      	cmp	r3, #0
 8001048:	d101      	bne.n	800104e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e069      	b.n	8001122 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800104e:	4b38      	ldr	r3, [pc, #224]	; (8001130 <HAL_RCC_ClockConfig+0x1c4>)
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	f023 0203 	bic.w	r2, r3, #3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	4935      	ldr	r1, [pc, #212]	; (8001130 <HAL_RCC_ClockConfig+0x1c4>)
 800105c:	4313      	orrs	r3, r2
 800105e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001060:	f7ff fa7c 	bl	800055c <HAL_GetTick>
 8001064:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001066:	e00a      	b.n	800107e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001068:	f7ff fa78 	bl	800055c <HAL_GetTick>
 800106c:	4602      	mov	r2, r0
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	f241 3288 	movw	r2, #5000	; 0x1388
 8001076:	4293      	cmp	r3, r2
 8001078:	d901      	bls.n	800107e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800107a:	2303      	movs	r3, #3
 800107c:	e051      	b.n	8001122 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800107e:	4b2c      	ldr	r3, [pc, #176]	; (8001130 <HAL_RCC_ClockConfig+0x1c4>)
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	f003 020c 	and.w	r2, r3, #12
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	429a      	cmp	r2, r3
 800108e:	d1eb      	bne.n	8001068 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001090:	4b26      	ldr	r3, [pc, #152]	; (800112c <HAL_RCC_ClockConfig+0x1c0>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f003 030f 	and.w	r3, r3, #15
 8001098:	683a      	ldr	r2, [r7, #0]
 800109a:	429a      	cmp	r2, r3
 800109c:	d210      	bcs.n	80010c0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800109e:	4b23      	ldr	r3, [pc, #140]	; (800112c <HAL_RCC_ClockConfig+0x1c0>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f023 020f 	bic.w	r2, r3, #15
 80010a6:	4921      	ldr	r1, [pc, #132]	; (800112c <HAL_RCC_ClockConfig+0x1c0>)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010ae:	4b1f      	ldr	r3, [pc, #124]	; (800112c <HAL_RCC_ClockConfig+0x1c0>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 030f 	and.w	r3, r3, #15
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d001      	beq.n	80010c0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e030      	b.n	8001122 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 0304 	and.w	r3, r3, #4
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d008      	beq.n	80010de <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010cc:	4b18      	ldr	r3, [pc, #96]	; (8001130 <HAL_RCC_ClockConfig+0x1c4>)
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	4915      	ldr	r1, [pc, #84]	; (8001130 <HAL_RCC_ClockConfig+0x1c4>)
 80010da:	4313      	orrs	r3, r2
 80010dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 0308 	and.w	r3, r3, #8
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d009      	beq.n	80010fe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80010ea:	4b11      	ldr	r3, [pc, #68]	; (8001130 <HAL_RCC_ClockConfig+0x1c4>)
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	691b      	ldr	r3, [r3, #16]
 80010f6:	00db      	lsls	r3, r3, #3
 80010f8:	490d      	ldr	r1, [pc, #52]	; (8001130 <HAL_RCC_ClockConfig+0x1c4>)
 80010fa:	4313      	orrs	r3, r2
 80010fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80010fe:	f000 f81d 	bl	800113c <HAL_RCC_GetSysClockFreq>
 8001102:	4601      	mov	r1, r0
 8001104:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <HAL_RCC_ClockConfig+0x1c4>)
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	091b      	lsrs	r3, r3, #4
 800110a:	f003 030f 	and.w	r3, r3, #15
 800110e:	4a09      	ldr	r2, [pc, #36]	; (8001134 <HAL_RCC_ClockConfig+0x1c8>)
 8001110:	5cd3      	ldrb	r3, [r2, r3]
 8001112:	fa21 f303 	lsr.w	r3, r1, r3
 8001116:	4a08      	ldr	r2, [pc, #32]	; (8001138 <HAL_RCC_ClockConfig+0x1cc>)
 8001118:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800111a:	2000      	movs	r0, #0
 800111c:	f001 feaa 	bl	8002e74 <HAL_InitTick>

  return HAL_OK;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40023c00 	.word	0x40023c00
 8001130:	40023800 	.word	0x40023800
 8001134:	080030c8 	.word	0x080030c8
 8001138:	20000004 	.word	0x20000004

0800113c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800113c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	607b      	str	r3, [r7, #4]
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	2300      	movs	r3, #0
 800114c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800114e:	2300      	movs	r3, #0
 8001150:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001152:	4b50      	ldr	r3, [pc, #320]	; (8001294 <HAL_RCC_GetSysClockFreq+0x158>)
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	f003 030c 	and.w	r3, r3, #12
 800115a:	2b04      	cmp	r3, #4
 800115c:	d007      	beq.n	800116e <HAL_RCC_GetSysClockFreq+0x32>
 800115e:	2b08      	cmp	r3, #8
 8001160:	d008      	beq.n	8001174 <HAL_RCC_GetSysClockFreq+0x38>
 8001162:	2b00      	cmp	r3, #0
 8001164:	f040 808d 	bne.w	8001282 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001168:	4b4b      	ldr	r3, [pc, #300]	; (8001298 <HAL_RCC_GetSysClockFreq+0x15c>)
 800116a:	60bb      	str	r3, [r7, #8]
       break;
 800116c:	e08c      	b.n	8001288 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800116e:	4b4b      	ldr	r3, [pc, #300]	; (800129c <HAL_RCC_GetSysClockFreq+0x160>)
 8001170:	60bb      	str	r3, [r7, #8]
      break;
 8001172:	e089      	b.n	8001288 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001174:	4b47      	ldr	r3, [pc, #284]	; (8001294 <HAL_RCC_GetSysClockFreq+0x158>)
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800117c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800117e:	4b45      	ldr	r3, [pc, #276]	; (8001294 <HAL_RCC_GetSysClockFreq+0x158>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d023      	beq.n	80011d2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800118a:	4b42      	ldr	r3, [pc, #264]	; (8001294 <HAL_RCC_GetSysClockFreq+0x158>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	099b      	lsrs	r3, r3, #6
 8001190:	f04f 0400 	mov.w	r4, #0
 8001194:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001198:	f04f 0200 	mov.w	r2, #0
 800119c:	ea03 0501 	and.w	r5, r3, r1
 80011a0:	ea04 0602 	and.w	r6, r4, r2
 80011a4:	4a3d      	ldr	r2, [pc, #244]	; (800129c <HAL_RCC_GetSysClockFreq+0x160>)
 80011a6:	fb02 f106 	mul.w	r1, r2, r6
 80011aa:	2200      	movs	r2, #0
 80011ac:	fb02 f205 	mul.w	r2, r2, r5
 80011b0:	440a      	add	r2, r1
 80011b2:	493a      	ldr	r1, [pc, #232]	; (800129c <HAL_RCC_GetSysClockFreq+0x160>)
 80011b4:	fba5 0101 	umull	r0, r1, r5, r1
 80011b8:	1853      	adds	r3, r2, r1
 80011ba:	4619      	mov	r1, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f04f 0400 	mov.w	r4, #0
 80011c2:	461a      	mov	r2, r3
 80011c4:	4623      	mov	r3, r4
 80011c6:	f7ff f827 	bl	8000218 <__aeabi_uldivmod>
 80011ca:	4603      	mov	r3, r0
 80011cc:	460c      	mov	r4, r1
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	e049      	b.n	8001266 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011d2:	4b30      	ldr	r3, [pc, #192]	; (8001294 <HAL_RCC_GetSysClockFreq+0x158>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	099b      	lsrs	r3, r3, #6
 80011d8:	f04f 0400 	mov.w	r4, #0
 80011dc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80011e0:	f04f 0200 	mov.w	r2, #0
 80011e4:	ea03 0501 	and.w	r5, r3, r1
 80011e8:	ea04 0602 	and.w	r6, r4, r2
 80011ec:	4629      	mov	r1, r5
 80011ee:	4632      	mov	r2, r6
 80011f0:	f04f 0300 	mov.w	r3, #0
 80011f4:	f04f 0400 	mov.w	r4, #0
 80011f8:	0154      	lsls	r4, r2, #5
 80011fa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80011fe:	014b      	lsls	r3, r1, #5
 8001200:	4619      	mov	r1, r3
 8001202:	4622      	mov	r2, r4
 8001204:	1b49      	subs	r1, r1, r5
 8001206:	eb62 0206 	sbc.w	r2, r2, r6
 800120a:	f04f 0300 	mov.w	r3, #0
 800120e:	f04f 0400 	mov.w	r4, #0
 8001212:	0194      	lsls	r4, r2, #6
 8001214:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001218:	018b      	lsls	r3, r1, #6
 800121a:	1a5b      	subs	r3, r3, r1
 800121c:	eb64 0402 	sbc.w	r4, r4, r2
 8001220:	f04f 0100 	mov.w	r1, #0
 8001224:	f04f 0200 	mov.w	r2, #0
 8001228:	00e2      	lsls	r2, r4, #3
 800122a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800122e:	00d9      	lsls	r1, r3, #3
 8001230:	460b      	mov	r3, r1
 8001232:	4614      	mov	r4, r2
 8001234:	195b      	adds	r3, r3, r5
 8001236:	eb44 0406 	adc.w	r4, r4, r6
 800123a:	f04f 0100 	mov.w	r1, #0
 800123e:	f04f 0200 	mov.w	r2, #0
 8001242:	02a2      	lsls	r2, r4, #10
 8001244:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001248:	0299      	lsls	r1, r3, #10
 800124a:	460b      	mov	r3, r1
 800124c:	4614      	mov	r4, r2
 800124e:	4618      	mov	r0, r3
 8001250:	4621      	mov	r1, r4
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f04f 0400 	mov.w	r4, #0
 8001258:	461a      	mov	r2, r3
 800125a:	4623      	mov	r3, r4
 800125c:	f7fe ffdc 	bl	8000218 <__aeabi_uldivmod>
 8001260:	4603      	mov	r3, r0
 8001262:	460c      	mov	r4, r1
 8001264:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8001266:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <HAL_RCC_GetSysClockFreq+0x158>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	0c1b      	lsrs	r3, r3, #16
 800126c:	f003 0303 	and.w	r3, r3, #3
 8001270:	3301      	adds	r3, #1
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	fbb2 f3f3 	udiv	r3, r2, r3
 800127e:	60bb      	str	r3, [r7, #8]
      break;
 8001280:	e002      	b.n	8001288 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001282:	4b05      	ldr	r3, [pc, #20]	; (8001298 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001284:	60bb      	str	r3, [r7, #8]
      break;
 8001286:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001288:	68bb      	ldr	r3, [r7, #8]
}
 800128a:	4618      	mov	r0, r3
 800128c:	3714      	adds	r7, #20
 800128e:	46bd      	mov	sp, r7
 8001290:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001292:	bf00      	nop
 8001294:	40023800 	.word	0x40023800
 8001298:	00f42400 	.word	0x00f42400
 800129c:	017d7840 	.word	0x017d7840

080012a0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012a4:	4b03      	ldr	r3, [pc, #12]	; (80012b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80012a6:	681b      	ldr	r3, [r3, #0]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	20000004 	.word	0x20000004

080012b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80012bc:	f7ff fff0 	bl	80012a0 <HAL_RCC_GetHCLKFreq>
 80012c0:	4601      	mov	r1, r0
 80012c2:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	0a9b      	lsrs	r3, r3, #10
 80012c8:	f003 0307 	and.w	r3, r3, #7
 80012cc:	4a03      	ldr	r2, [pc, #12]	; (80012dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80012ce:	5cd3      	ldrb	r3, [r2, r3]
 80012d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40023800 	.word	0x40023800
 80012dc:	080030d8 	.word	0x080030d8

080012e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80012e4:	f7ff ffdc 	bl	80012a0 <HAL_RCC_GetHCLKFreq>
 80012e8:	4601      	mov	r1, r0
 80012ea:	4b05      	ldr	r3, [pc, #20]	; (8001300 <HAL_RCC_GetPCLK2Freq+0x20>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	0b5b      	lsrs	r3, r3, #13
 80012f0:	f003 0307 	and.w	r3, r3, #7
 80012f4:	4a03      	ldr	r2, [pc, #12]	; (8001304 <HAL_RCC_GetPCLK2Freq+0x24>)
 80012f6:	5cd3      	ldrb	r3, [r2, r3]
 80012f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40023800 	.word	0x40023800
 8001304:	080030d8 	.word	0x080030d8

08001308 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	220f      	movs	r2, #15
 8001316:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001318:	4b12      	ldr	r3, [pc, #72]	; (8001364 <HAL_RCC_GetClockConfig+0x5c>)
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	f003 0203 	and.w	r2, r3, #3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001324:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <HAL_RCC_GetClockConfig+0x5c>)
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001330:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <HAL_RCC_GetClockConfig+0x5c>)
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800133c:	4b09      	ldr	r3, [pc, #36]	; (8001364 <HAL_RCC_GetClockConfig+0x5c>)
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	08db      	lsrs	r3, r3, #3
 8001342:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800134a:	4b07      	ldr	r3, [pc, #28]	; (8001368 <HAL_RCC_GetClockConfig+0x60>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 020f 	and.w	r2, r3, #15
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	601a      	str	r2, [r3, #0]
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	40023800 	.word	0x40023800
 8001368:	40023c00 	.word	0x40023c00

0800136c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b088      	sub	sp, #32
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001378:	2300      	movs	r3, #0
 800137a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001380:	2300      	movs	r3, #0
 8001382:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001384:	2300      	movs	r3, #0
 8001386:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	2b00      	cmp	r3, #0
 8001392:	d012      	beq.n	80013ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001394:	4b69      	ldr	r3, [pc, #420]	; (800153c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	4a68      	ldr	r2, [pc, #416]	; (800153c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800139a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800139e:	6093      	str	r3, [r2, #8]
 80013a0:	4b66      	ldr	r3, [pc, #408]	; (800153c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80013a2:	689a      	ldr	r2, [r3, #8]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013a8:	4964      	ldr	r1, [pc, #400]	; (800153c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80013aa:	4313      	orrs	r3, r2
 80013ac:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d101      	bne.n	80013ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80013b6:	2301      	movs	r3, #1
 80013b8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d017      	beq.n	80013f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80013c6:	4b5d      	ldr	r3, [pc, #372]	; (800153c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80013c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013d4:	4959      	ldr	r1, [pc, #356]	; (800153c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80013d6:	4313      	orrs	r3, r2
 80013d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80013e4:	d101      	bne.n	80013ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80013e6:	2301      	movs	r3, #1
 80013e8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d101      	bne.n	80013f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80013f2:	2301      	movs	r3, #1
 80013f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d017      	beq.n	8001432 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001402:	4b4e      	ldr	r3, [pc, #312]	; (800153c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001404:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001408:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001410:	494a      	ldr	r1, [pc, #296]	; (800153c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001412:	4313      	orrs	r3, r2
 8001414:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001420:	d101      	bne.n	8001426 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001422:	2301      	movs	r3, #1
 8001424:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800142e:	2301      	movs	r3, #1
 8001430:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800143e:	2301      	movs	r3, #1
 8001440:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0320 	and.w	r3, r3, #32
 800144a:	2b00      	cmp	r3, #0
 800144c:	f000 808b 	beq.w	8001566 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001450:	4b3a      	ldr	r3, [pc, #232]	; (800153c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001454:	4a39      	ldr	r2, [pc, #228]	; (800153c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001456:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800145a:	6413      	str	r3, [r2, #64]	; 0x40
 800145c:	4b37      	ldr	r3, [pc, #220]	; (800153c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800145e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001464:	60bb      	str	r3, [r7, #8]
 8001466:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001468:	4b35      	ldr	r3, [pc, #212]	; (8001540 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a34      	ldr	r2, [pc, #208]	; (8001540 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800146e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001472:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001474:	f7ff f872 	bl	800055c <HAL_GetTick>
 8001478:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800147a:	e008      	b.n	800148e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800147c:	f7ff f86e 	bl	800055c <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b64      	cmp	r3, #100	; 0x64
 8001488:	d901      	bls.n	800148e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e355      	b.n	8001b3a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800148e:	4b2c      	ldr	r3, [pc, #176]	; (8001540 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001496:	2b00      	cmp	r3, #0
 8001498:	d0f0      	beq.n	800147c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800149a:	4b28      	ldr	r3, [pc, #160]	; (800153c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800149c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800149e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80014a2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d035      	beq.n	8001516 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d02e      	beq.n	8001516 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80014b8:	4b20      	ldr	r3, [pc, #128]	; (800153c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80014ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80014c0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80014c2:	4b1e      	ldr	r3, [pc, #120]	; (800153c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80014c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c6:	4a1d      	ldr	r2, [pc, #116]	; (800153c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80014c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014cc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80014ce:	4b1b      	ldr	r3, [pc, #108]	; (800153c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80014d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d2:	4a1a      	ldr	r2, [pc, #104]	; (800153c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80014d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014d8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80014da:	4a18      	ldr	r2, [pc, #96]	; (800153c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80014e0:	4b16      	ldr	r3, [pc, #88]	; (800153c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80014e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d114      	bne.n	8001516 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ec:	f7ff f836 	bl	800055c <HAL_GetTick>
 80014f0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014f2:	e00a      	b.n	800150a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014f4:	f7ff f832 	bl	800055c <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001502:	4293      	cmp	r3, r2
 8001504:	d901      	bls.n	800150a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e317      	b.n	8001b3a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800150a:	4b0c      	ldr	r3, [pc, #48]	; (800153c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800150c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d0ee      	beq.n	80014f4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800151e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001522:	d111      	bne.n	8001548 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001524:	4b05      	ldr	r3, [pc, #20]	; (800153c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001530:	4b04      	ldr	r3, [pc, #16]	; (8001544 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001532:	400b      	ands	r3, r1
 8001534:	4901      	ldr	r1, [pc, #4]	; (800153c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001536:	4313      	orrs	r3, r2
 8001538:	608b      	str	r3, [r1, #8]
 800153a:	e00b      	b.n	8001554 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800153c:	40023800 	.word	0x40023800
 8001540:	40007000 	.word	0x40007000
 8001544:	0ffffcff 	.word	0x0ffffcff
 8001548:	4bb0      	ldr	r3, [pc, #704]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	4aaf      	ldr	r2, [pc, #700]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800154e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001552:	6093      	str	r3, [r2, #8]
 8001554:	4bad      	ldr	r3, [pc, #692]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001556:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001560:	49aa      	ldr	r1, [pc, #680]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001562:	4313      	orrs	r3, r2
 8001564:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0310 	and.w	r3, r3, #16
 800156e:	2b00      	cmp	r3, #0
 8001570:	d010      	beq.n	8001594 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001572:	4ba6      	ldr	r3, [pc, #664]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001574:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001578:	4aa4      	ldr	r2, [pc, #656]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800157a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800157e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001582:	4ba2      	ldr	r3, [pc, #648]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001584:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800158c:	499f      	ldr	r1, [pc, #636]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800158e:	4313      	orrs	r3, r2
 8001590:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d00a      	beq.n	80015b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80015a0:	4b9a      	ldr	r3, [pc, #616]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80015a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015a6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80015ae:	4997      	ldr	r1, [pc, #604]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80015b0:	4313      	orrs	r3, r2
 80015b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d00a      	beq.n	80015d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80015c2:	4b92      	ldr	r3, [pc, #584]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80015c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80015d0:	498e      	ldr	r1, [pc, #568]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80015d2:	4313      	orrs	r3, r2
 80015d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d00a      	beq.n	80015fa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80015e4:	4b89      	ldr	r3, [pc, #548]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80015e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80015f2:	4986      	ldr	r1, [pc, #536]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80015f4:	4313      	orrs	r3, r2
 80015f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d00a      	beq.n	800161c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001606:	4b81      	ldr	r3, [pc, #516]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800160c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001614:	497d      	ldr	r1, [pc, #500]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001616:	4313      	orrs	r3, r2
 8001618:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001624:	2b00      	cmp	r3, #0
 8001626:	d00a      	beq.n	800163e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001628:	4b78      	ldr	r3, [pc, #480]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800162a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800162e:	f023 0203 	bic.w	r2, r3, #3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001636:	4975      	ldr	r1, [pc, #468]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001638:	4313      	orrs	r3, r2
 800163a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001646:	2b00      	cmp	r3, #0
 8001648:	d00a      	beq.n	8001660 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800164a:	4b70      	ldr	r3, [pc, #448]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800164c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001650:	f023 020c 	bic.w	r2, r3, #12
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001658:	496c      	ldr	r1, [pc, #432]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800165a:	4313      	orrs	r3, r2
 800165c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001668:	2b00      	cmp	r3, #0
 800166a:	d00a      	beq.n	8001682 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800166c:	4b67      	ldr	r3, [pc, #412]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800166e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001672:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167a:	4964      	ldr	r1, [pc, #400]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800167c:	4313      	orrs	r3, r2
 800167e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800168a:	2b00      	cmp	r3, #0
 800168c:	d00a      	beq.n	80016a4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800168e:	4b5f      	ldr	r3, [pc, #380]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001694:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800169c:	495b      	ldr	r1, [pc, #364]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800169e:	4313      	orrs	r3, r2
 80016a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d00a      	beq.n	80016c6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80016b0:	4b56      	ldr	r3, [pc, #344]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80016b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016be:	4953      	ldr	r1, [pc, #332]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80016c0:	4313      	orrs	r3, r2
 80016c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d00a      	beq.n	80016e8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80016d2:	4b4e      	ldr	r3, [pc, #312]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80016d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016d8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e0:	494a      	ldr	r1, [pc, #296]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80016e2:	4313      	orrs	r3, r2
 80016e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d00a      	beq.n	800170a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80016f4:	4b45      	ldr	r3, [pc, #276]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80016f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016fa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001702:	4942      	ldr	r1, [pc, #264]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001704:	4313      	orrs	r3, r2
 8001706:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d00a      	beq.n	800172c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001716:	4b3d      	ldr	r3, [pc, #244]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800171c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001724:	4939      	ldr	r1, [pc, #228]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001726:	4313      	orrs	r3, r2
 8001728:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d00a      	beq.n	800174e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001738:	4b34      	ldr	r3, [pc, #208]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800173a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800173e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001746:	4931      	ldr	r1, [pc, #196]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001748:	4313      	orrs	r3, r2
 800174a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d011      	beq.n	800177e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800175a:	4b2c      	ldr	r3, [pc, #176]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800175c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001760:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001768:	4928      	ldr	r1, [pc, #160]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800176a:	4313      	orrs	r3, r2
 800176c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001774:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001778:	d101      	bne.n	800177e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800177a:	2301      	movs	r3, #1
 800177c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0308 	and.w	r3, r3, #8
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800178a:	2301      	movs	r3, #1
 800178c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d00a      	beq.n	80017b0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800179a:	4b1c      	ldr	r3, [pc, #112]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800179c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017a0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017a8:	4918      	ldr	r1, [pc, #96]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d00b      	beq.n	80017d4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80017bc:	4b13      	ldr	r3, [pc, #76]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80017be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017c2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017cc:	490f      	ldr	r1, [pc, #60]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80017ce:	4313      	orrs	r3, r2
 80017d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d005      	beq.n	80017e6 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80017e2:	f040 80d8 	bne.w	8001996 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80017e6:	4b09      	ldr	r3, [pc, #36]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a08      	ldr	r2, [pc, #32]	; (800180c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80017ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80017f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017f2:	f7fe feb3 	bl	800055c <HAL_GetTick>
 80017f6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80017f8:	e00a      	b.n	8001810 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80017fa:	f7fe feaf 	bl	800055c <HAL_GetTick>
 80017fe:	4602      	mov	r2, r0
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b64      	cmp	r3, #100	; 0x64
 8001806:	d903      	bls.n	8001810 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	e196      	b.n	8001b3a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800180c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001810:	4b6c      	ldr	r3, [pc, #432]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1ee      	bne.n	80017fa <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0301 	and.w	r3, r3, #1
 8001824:	2b00      	cmp	r3, #0
 8001826:	d021      	beq.n	800186c <HAL_RCCEx_PeriphCLKConfig+0x500>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800182c:	2b00      	cmp	r3, #0
 800182e:	d11d      	bne.n	800186c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001830:	4b64      	ldr	r3, [pc, #400]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001832:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001836:	0c1b      	lsrs	r3, r3, #16
 8001838:	f003 0303 	and.w	r3, r3, #3
 800183c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800183e:	4b61      	ldr	r3, [pc, #388]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001840:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001844:	0e1b      	lsrs	r3, r3, #24
 8001846:	f003 030f 	and.w	r3, r3, #15
 800184a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	019a      	lsls	r2, r3, #6
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	041b      	lsls	r3, r3, #16
 8001856:	431a      	orrs	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	061b      	lsls	r3, r3, #24
 800185c:	431a      	orrs	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	071b      	lsls	r3, r3, #28
 8001864:	4957      	ldr	r1, [pc, #348]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001866:	4313      	orrs	r3, r2
 8001868:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d004      	beq.n	8001882 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800187c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001880:	d00a      	beq.n	8001898 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800188a:	2b00      	cmp	r3, #0
 800188c:	d02e      	beq.n	80018ec <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001892:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001896:	d129      	bne.n	80018ec <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001898:	4b4a      	ldr	r3, [pc, #296]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800189a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800189e:	0c1b      	lsrs	r3, r3, #16
 80018a0:	f003 0303 	and.w	r3, r3, #3
 80018a4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80018a6:	4b47      	ldr	r3, [pc, #284]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80018a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018ac:	0f1b      	lsrs	r3, r3, #28
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	019a      	lsls	r2, r3, #6
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	041b      	lsls	r3, r3, #16
 80018be:	431a      	orrs	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	061b      	lsls	r3, r3, #24
 80018c6:	431a      	orrs	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	071b      	lsls	r3, r3, #28
 80018cc:	493d      	ldr	r1, [pc, #244]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80018d4:	4b3b      	ldr	r3, [pc, #236]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80018d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018da:	f023 021f 	bic.w	r2, r3, #31
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e2:	3b01      	subs	r3, #1
 80018e4:	4937      	ldr	r1, [pc, #220]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80018e6:	4313      	orrs	r3, r2
 80018e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d01d      	beq.n	8001934 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80018f8:	4b32      	ldr	r3, [pc, #200]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80018fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018fe:	0e1b      	lsrs	r3, r3, #24
 8001900:	f003 030f 	and.w	r3, r3, #15
 8001904:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001906:	4b2f      	ldr	r3, [pc, #188]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001908:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800190c:	0f1b      	lsrs	r3, r3, #28
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	019a      	lsls	r2, r3, #6
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	041b      	lsls	r3, r3, #16
 8001920:	431a      	orrs	r2, r3
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	061b      	lsls	r3, r3, #24
 8001926:	431a      	orrs	r2, r3
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	071b      	lsls	r3, r3, #28
 800192c:	4925      	ldr	r1, [pc, #148]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800192e:	4313      	orrs	r3, r2
 8001930:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d011      	beq.n	8001964 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	019a      	lsls	r2, r3, #6
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	691b      	ldr	r3, [r3, #16]
 800194a:	041b      	lsls	r3, r3, #16
 800194c:	431a      	orrs	r2, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	061b      	lsls	r3, r3, #24
 8001954:	431a      	orrs	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	071b      	lsls	r3, r3, #28
 800195c:	4919      	ldr	r1, [pc, #100]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800195e:	4313      	orrs	r3, r2
 8001960:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001964:	4b17      	ldr	r3, [pc, #92]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a16      	ldr	r2, [pc, #88]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800196a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800196e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001970:	f7fe fdf4 	bl	800055c <HAL_GetTick>
 8001974:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001976:	e008      	b.n	800198a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001978:	f7fe fdf0 	bl	800055c <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b64      	cmp	r3, #100	; 0x64
 8001984:	d901      	bls.n	800198a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e0d7      	b.n	8001b3a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800198a:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d0f0      	beq.n	8001978 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	2b01      	cmp	r3, #1
 800199a:	f040 80cd 	bne.w	8001b38 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800199e:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a08      	ldr	r2, [pc, #32]	; (80019c4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80019a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019aa:	f7fe fdd7 	bl	800055c <HAL_GetTick>
 80019ae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80019b0:	e00a      	b.n	80019c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80019b2:	f7fe fdd3 	bl	800055c <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b64      	cmp	r3, #100	; 0x64
 80019be:	d903      	bls.n	80019c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e0ba      	b.n	8001b3a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80019c4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80019c8:	4b5e      	ldr	r3, [pc, #376]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019d4:	d0ed      	beq.n	80019b2 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <HAL_RCCEx_PeriphCLKConfig+0x67e>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d009      	beq.n	80019fe <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d02e      	beq.n	8001a54 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d12a      	bne.n	8001a54 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80019fe:	4b51      	ldr	r3, [pc, #324]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a04:	0c1b      	lsrs	r3, r3, #16
 8001a06:	f003 0303 	and.w	r3, r3, #3
 8001a0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001a0c:	4b4d      	ldr	r3, [pc, #308]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a12:	0f1b      	lsrs	r3, r3, #28
 8001a14:	f003 0307 	and.w	r3, r3, #7
 8001a18:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	695b      	ldr	r3, [r3, #20]
 8001a1e:	019a      	lsls	r2, r3, #6
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	041b      	lsls	r3, r3, #16
 8001a24:	431a      	orrs	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	061b      	lsls	r3, r3, #24
 8001a2c:	431a      	orrs	r2, r3
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	071b      	lsls	r3, r3, #28
 8001a32:	4944      	ldr	r1, [pc, #272]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001a3a:	4b42      	ldr	r3, [pc, #264]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001a3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a40:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	021b      	lsls	r3, r3, #8
 8001a4c:	493d      	ldr	r1, [pc, #244]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d022      	beq.n	8001aa6 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001a64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001a68:	d11d      	bne.n	8001aa6 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001a6a:	4b36      	ldr	r3, [pc, #216]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a70:	0e1b      	lsrs	r3, r3, #24
 8001a72:	f003 030f 	and.w	r3, r3, #15
 8001a76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001a78:	4b32      	ldr	r3, [pc, #200]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a7e:	0f1b      	lsrs	r3, r3, #28
 8001a80:	f003 0307 	and.w	r3, r3, #7
 8001a84:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	019a      	lsls	r2, r3, #6
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
 8001a90:	041b      	lsls	r3, r3, #16
 8001a92:	431a      	orrs	r2, r3
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	061b      	lsls	r3, r3, #24
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	071b      	lsls	r3, r3, #28
 8001a9e:	4929      	ldr	r1, [pc, #164]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0308 	and.w	r3, r3, #8
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d028      	beq.n	8001b04 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001ab2:	4b24      	ldr	r3, [pc, #144]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ab8:	0e1b      	lsrs	r3, r3, #24
 8001aba:	f003 030f 	and.w	r3, r3, #15
 8001abe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001ac0:	4b20      	ldr	r3, [pc, #128]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ac6:	0c1b      	lsrs	r3, r3, #16
 8001ac8:	f003 0303 	and.w	r3, r3, #3
 8001acc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	695b      	ldr	r3, [r3, #20]
 8001ad2:	019a      	lsls	r2, r3, #6
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	041b      	lsls	r3, r3, #16
 8001ad8:	431a      	orrs	r2, r3
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	061b      	lsls	r3, r3, #24
 8001ade:	431a      	orrs	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	69db      	ldr	r3, [r3, #28]
 8001ae4:	071b      	lsls	r3, r3, #28
 8001ae6:	4917      	ldr	r1, [pc, #92]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001aee:	4b15      	ldr	r3, [pc, #84]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001af0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001af4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afc:	4911      	ldr	r1, [pc, #68]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001b04:	4b0f      	ldr	r3, [pc, #60]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a0e      	ldr	r2, [pc, #56]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001b0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b10:	f7fe fd24 	bl	800055c <HAL_GetTick>
 8001b14:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001b16:	e008      	b.n	8001b2a <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001b18:	f7fe fd20 	bl	800055c <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b64      	cmp	r3, #100	; 0x64
 8001b24:	d901      	bls.n	8001b2a <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e007      	b.n	8001b3a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001b2a:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b36:	d1ef      	bne.n	8001b18 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3720      	adds	r7, #32
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40023800 	.word	0x40023800

08001b48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e01d      	b.n	8001b96 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d106      	bne.n	8001b74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 f815 	bl	8001b9e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2202      	movs	r2, #2
 8001b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3304      	adds	r3, #4
 8001b84:	4619      	mov	r1, r3
 8001b86:	4610      	mov	r0, r2
 8001b88:	f000 f986 	bl	8001e98 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
	...

08001bb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68da      	ldr	r2, [r3, #12]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f042 0201 	orr.w	r2, r2, #1
 8001bca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	689a      	ldr	r2, [r3, #8]
 8001bd2:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <HAL_TIM_Base_Start_IT+0x50>)
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2b06      	cmp	r3, #6
 8001bdc:	d00b      	beq.n	8001bf6 <HAL_TIM_Base_Start_IT+0x42>
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be4:	d007      	beq.n	8001bf6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f042 0201 	orr.w	r2, r2, #1
 8001bf4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3714      	adds	r7, #20
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	00010007 	.word	0x00010007

08001c08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d122      	bne.n	8001c64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d11b      	bne.n	8001c64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f06f 0202 	mvn.w	r2, #2
 8001c34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	699b      	ldr	r3, [r3, #24]
 8001c42:	f003 0303 	and.w	r3, r3, #3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f905 	bl	8001e5a <HAL_TIM_IC_CaptureCallback>
 8001c50:	e005      	b.n	8001c5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f8f7 	bl	8001e46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f000 f908 	bl	8001e6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	691b      	ldr	r3, [r3, #16]
 8001c6a:	f003 0304 	and.w	r3, r3, #4
 8001c6e:	2b04      	cmp	r3, #4
 8001c70:	d122      	bne.n	8001cb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	2b04      	cmp	r3, #4
 8001c7e:	d11b      	bne.n	8001cb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f06f 0204 	mvn.w	r2, #4
 8001c88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2202      	movs	r2, #2
 8001c8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 f8db 	bl	8001e5a <HAL_TIM_IC_CaptureCallback>
 8001ca4:	e005      	b.n	8001cb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f8cd 	bl	8001e46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 f8de 	bl	8001e6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	f003 0308 	and.w	r3, r3, #8
 8001cc2:	2b08      	cmp	r3, #8
 8001cc4:	d122      	bne.n	8001d0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	f003 0308 	and.w	r3, r3, #8
 8001cd0:	2b08      	cmp	r3, #8
 8001cd2:	d11b      	bne.n	8001d0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f06f 0208 	mvn.w	r2, #8
 8001cdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2204      	movs	r2, #4
 8001ce2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	f003 0303 	and.w	r3, r3, #3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f8b1 	bl	8001e5a <HAL_TIM_IC_CaptureCallback>
 8001cf8:	e005      	b.n	8001d06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 f8a3 	bl	8001e46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 f8b4 	bl	8001e6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	f003 0310 	and.w	r3, r3, #16
 8001d16:	2b10      	cmp	r3, #16
 8001d18:	d122      	bne.n	8001d60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	f003 0310 	and.w	r3, r3, #16
 8001d24:	2b10      	cmp	r3, #16
 8001d26:	d11b      	bne.n	8001d60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f06f 0210 	mvn.w	r2, #16
 8001d30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2208      	movs	r2, #8
 8001d36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 f887 	bl	8001e5a <HAL_TIM_IC_CaptureCallback>
 8001d4c:	e005      	b.n	8001d5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 f879 	bl	8001e46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f000 f88a 	bl	8001e6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d10e      	bne.n	8001d8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d107      	bne.n	8001d8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f06f 0201 	mvn.w	r2, #1
 8001d84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 ffd4 	bl	8002d34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d96:	2b80      	cmp	r3, #128	; 0x80
 8001d98:	d10e      	bne.n	8001db8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001da4:	2b80      	cmp	r3, #128	; 0x80
 8001da6:	d107      	bne.n	8001db8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001db0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f91a 	bl	8001fec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dc6:	d10e      	bne.n	8001de6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dd2:	2b80      	cmp	r3, #128	; 0x80
 8001dd4:	d107      	bne.n	8001de6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001dde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 f90d 	bl	8002000 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001df0:	2b40      	cmp	r3, #64	; 0x40
 8001df2:	d10e      	bne.n	8001e12 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dfe:	2b40      	cmp	r3, #64	; 0x40
 8001e00:	d107      	bne.n	8001e12 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 f838 	bl	8001e82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	f003 0320 	and.w	r3, r3, #32
 8001e1c:	2b20      	cmp	r3, #32
 8001e1e:	d10e      	bne.n	8001e3e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	f003 0320 	and.w	r3, r3, #32
 8001e2a:	2b20      	cmp	r3, #32
 8001e2c:	d107      	bne.n	8001e3e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f06f 0220 	mvn.w	r2, #32
 8001e36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 f8cd 	bl	8001fd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b083      	sub	sp, #12
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e76:	bf00      	nop
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e82:	b480      	push	{r7}
 8001e84:	b083      	sub	sp, #12
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
	...

08001e98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a40      	ldr	r2, [pc, #256]	; (8001fac <TIM_Base_SetConfig+0x114>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d013      	beq.n	8001ed8 <TIM_Base_SetConfig+0x40>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eb6:	d00f      	beq.n	8001ed8 <TIM_Base_SetConfig+0x40>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a3d      	ldr	r2, [pc, #244]	; (8001fb0 <TIM_Base_SetConfig+0x118>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d00b      	beq.n	8001ed8 <TIM_Base_SetConfig+0x40>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a3c      	ldr	r2, [pc, #240]	; (8001fb4 <TIM_Base_SetConfig+0x11c>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d007      	beq.n	8001ed8 <TIM_Base_SetConfig+0x40>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a3b      	ldr	r2, [pc, #236]	; (8001fb8 <TIM_Base_SetConfig+0x120>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d003      	beq.n	8001ed8 <TIM_Base_SetConfig+0x40>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a3a      	ldr	r2, [pc, #232]	; (8001fbc <TIM_Base_SetConfig+0x124>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d108      	bne.n	8001eea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ede:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a2f      	ldr	r2, [pc, #188]	; (8001fac <TIM_Base_SetConfig+0x114>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d02b      	beq.n	8001f4a <TIM_Base_SetConfig+0xb2>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ef8:	d027      	beq.n	8001f4a <TIM_Base_SetConfig+0xb2>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a2c      	ldr	r2, [pc, #176]	; (8001fb0 <TIM_Base_SetConfig+0x118>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d023      	beq.n	8001f4a <TIM_Base_SetConfig+0xb2>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a2b      	ldr	r2, [pc, #172]	; (8001fb4 <TIM_Base_SetConfig+0x11c>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d01f      	beq.n	8001f4a <TIM_Base_SetConfig+0xb2>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a2a      	ldr	r2, [pc, #168]	; (8001fb8 <TIM_Base_SetConfig+0x120>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d01b      	beq.n	8001f4a <TIM_Base_SetConfig+0xb2>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a29      	ldr	r2, [pc, #164]	; (8001fbc <TIM_Base_SetConfig+0x124>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d017      	beq.n	8001f4a <TIM_Base_SetConfig+0xb2>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a28      	ldr	r2, [pc, #160]	; (8001fc0 <TIM_Base_SetConfig+0x128>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d013      	beq.n	8001f4a <TIM_Base_SetConfig+0xb2>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a27      	ldr	r2, [pc, #156]	; (8001fc4 <TIM_Base_SetConfig+0x12c>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d00f      	beq.n	8001f4a <TIM_Base_SetConfig+0xb2>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a26      	ldr	r2, [pc, #152]	; (8001fc8 <TIM_Base_SetConfig+0x130>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d00b      	beq.n	8001f4a <TIM_Base_SetConfig+0xb2>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a25      	ldr	r2, [pc, #148]	; (8001fcc <TIM_Base_SetConfig+0x134>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d007      	beq.n	8001f4a <TIM_Base_SetConfig+0xb2>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a24      	ldr	r2, [pc, #144]	; (8001fd0 <TIM_Base_SetConfig+0x138>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d003      	beq.n	8001f4a <TIM_Base_SetConfig+0xb2>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a23      	ldr	r2, [pc, #140]	; (8001fd4 <TIM_Base_SetConfig+0x13c>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d108      	bne.n	8001f5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a0a      	ldr	r2, [pc, #40]	; (8001fac <TIM_Base_SetConfig+0x114>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d003      	beq.n	8001f90 <TIM_Base_SetConfig+0xf8>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a0c      	ldr	r2, [pc, #48]	; (8001fbc <TIM_Base_SetConfig+0x124>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d103      	bne.n	8001f98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	691a      	ldr	r2, [r3, #16]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	615a      	str	r2, [r3, #20]
}
 8001f9e:	bf00      	nop
 8001fa0:	3714      	adds	r7, #20
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	40010000 	.word	0x40010000
 8001fb0:	40000400 	.word	0x40000400
 8001fb4:	40000800 	.word	0x40000800
 8001fb8:	40000c00 	.word	0x40000c00
 8001fbc:	40010400 	.word	0x40010400
 8001fc0:	40014000 	.word	0x40014000
 8001fc4:	40014400 	.word	0x40014400
 8001fc8:	40014800 	.word	0x40014800
 8001fcc:	40001800 	.word	0x40001800
 8001fd0:	40001c00 	.word	0x40001c00
 8001fd4:	40002000 	.word	0x40002000

08001fd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e040      	b.n	80020a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800202a:	2b00      	cmp	r3, #0
 800202c:	d106      	bne.n	800203c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 feba 	bl	8002db0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2224      	movs	r2, #36	; 0x24
 8002040:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f022 0201 	bic.w	r2, r2, #1
 8002050:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f98a 	bl	800236c <UART_SetConfig>
 8002058:	4603      	mov	r3, r0
 800205a:	2b01      	cmp	r3, #1
 800205c:	d101      	bne.n	8002062 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e022      	b.n	80020a8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002066:	2b00      	cmp	r3, #0
 8002068:	d002      	beq.n	8002070 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 fc22 	bl	80028b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	685a      	ldr	r2, [r3, #4]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800207e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	689a      	ldr	r2, [r3, #8]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800208e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f042 0201 	orr.w	r2, r2, #1
 800209e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 fca9 	bl	80029f8 <UART_CheckIdleState>
 80020a6:	4603      	mov	r3, r0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b08a      	sub	sp, #40	; 0x28
 80020b4:	af02      	add	r7, sp, #8
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	603b      	str	r3, [r7, #0]
 80020bc:	4613      	mov	r3, r2
 80020be:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020c4:	2b20      	cmp	r3, #32
 80020c6:	d17f      	bne.n	80021c8 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d002      	beq.n	80020d4 <HAL_UART_Transmit+0x24>
 80020ce:	88fb      	ldrh	r3, [r7, #6]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d101      	bne.n	80020d8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e078      	b.n	80021ca <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d101      	bne.n	80020e6 <HAL_UART_Transmit+0x36>
 80020e2:	2302      	movs	r3, #2
 80020e4:	e071      	b.n	80021ca <HAL_UART_Transmit+0x11a>
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2200      	movs	r2, #0
 80020f2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2221      	movs	r2, #33	; 0x21
 80020f8:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80020fa:	f7fe fa2f 	bl	800055c <HAL_GetTick>
 80020fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	88fa      	ldrh	r2, [r7, #6]
 8002104:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	88fa      	ldrh	r2, [r7, #6]
 800210c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002118:	d108      	bne.n	800212c <HAL_UART_Transmit+0x7c>
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d104      	bne.n	800212c <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8002122:	2300      	movs	r3, #0
 8002124:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	61bb      	str	r3, [r7, #24]
 800212a:	e003      	b.n	8002134 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002130:	2300      	movs	r3, #0
 8002132:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002134:	e02c      	b.n	8002190 <HAL_UART_Transmit+0xe0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	2200      	movs	r2, #0
 800213e:	2180      	movs	r1, #128	; 0x80
 8002140:	68f8      	ldr	r0, [r7, #12]
 8002142:	f000 fc88 	bl	8002a56 <UART_WaitOnFlagUntilTimeout>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <HAL_UART_Transmit+0xa0>
      {
        return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e03c      	b.n	80021ca <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d10b      	bne.n	800216e <HAL_UART_Transmit+0xbe>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	881b      	ldrh	r3, [r3, #0]
 800215a:	461a      	mov	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002164:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	3302      	adds	r3, #2
 800216a:	61bb      	str	r3, [r7, #24]
 800216c:	e007      	b.n	800217e <HAL_UART_Transmit+0xce>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	781a      	ldrb	r2, [r3, #0]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	3301      	adds	r3, #1
 800217c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002184:	b29b      	uxth	r3, r3
 8002186:	3b01      	subs	r3, #1
 8002188:	b29a      	uxth	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002196:	b29b      	uxth	r3, r3
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1cc      	bne.n	8002136 <HAL_UART_Transmit+0x86>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	2200      	movs	r2, #0
 80021a4:	2140      	movs	r1, #64	; 0x40
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f000 fc55 	bl	8002a56 <UART_WaitOnFlagUntilTimeout>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <HAL_UART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e009      	b.n	80021ca <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2220      	movs	r2, #32
 80021ba:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80021c4:	2300      	movs	r3, #0
 80021c6:	e000      	b.n	80021ca <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 80021c8:	2302      	movs	r3, #2
  }
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3720      	adds	r7, #32
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_UART_Receive>:
  * @param Size    Amount of data to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b08a      	sub	sp, #40	; 0x28
 80021d6:	af02      	add	r7, sp, #8
 80021d8:	60f8      	str	r0, [r7, #12]
 80021da:	60b9      	str	r1, [r7, #8]
 80021dc:	603b      	str	r3, [r7, #0]
 80021de:	4613      	mov	r3, r2
 80021e0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021e6:	2b20      	cmp	r3, #32
 80021e8:	f040 80ba 	bne.w	8002360 <HAL_UART_Receive+0x18e>
  {
    if ((pData == NULL) || (Size == 0U))
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d002      	beq.n	80021f8 <HAL_UART_Receive+0x26>
 80021f2:	88fb      	ldrh	r3, [r7, #6]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d101      	bne.n	80021fc <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e0b2      	b.n	8002362 <HAL_UART_Receive+0x190>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002202:	2b01      	cmp	r3, #1
 8002204:	d101      	bne.n	800220a <HAL_UART_Receive+0x38>
 8002206:	2302      	movs	r3, #2
 8002208:	e0ab      	b.n	8002362 <HAL_UART_Receive+0x190>
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2201      	movs	r2, #1
 800220e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2222      	movs	r2, #34	; 0x22
 800221c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800221e:	f7fe f99d 	bl	800055c <HAL_GetTick>
 8002222:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	88fa      	ldrh	r2, [r7, #6]
 8002228:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	88fa      	ldrh	r2, [r7, #6]
 8002230:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800223c:	d10e      	bne.n	800225c <HAL_UART_Receive+0x8a>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d105      	bne.n	8002252 <HAL_UART_Receive+0x80>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f240 12ff 	movw	r2, #511	; 0x1ff
 800224c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002250:	e02d      	b.n	80022ae <HAL_UART_Receive+0xdc>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	22ff      	movs	r2, #255	; 0xff
 8002256:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800225a:	e028      	b.n	80022ae <HAL_UART_Receive+0xdc>
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d10d      	bne.n	8002280 <HAL_UART_Receive+0xae>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d104      	bne.n	8002276 <HAL_UART_Receive+0xa4>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	22ff      	movs	r2, #255	; 0xff
 8002270:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002274:	e01b      	b.n	80022ae <HAL_UART_Receive+0xdc>
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	227f      	movs	r2, #127	; 0x7f
 800227a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800227e:	e016      	b.n	80022ae <HAL_UART_Receive+0xdc>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002288:	d10d      	bne.n	80022a6 <HAL_UART_Receive+0xd4>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d104      	bne.n	800229c <HAL_UART_Receive+0xca>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	227f      	movs	r2, #127	; 0x7f
 8002296:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800229a:	e008      	b.n	80022ae <HAL_UART_Receive+0xdc>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	223f      	movs	r2, #63	; 0x3f
 80022a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80022a4:	e003      	b.n	80022ae <HAL_UART_Receive+0xdc>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80022b4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022be:	d108      	bne.n	80022d2 <HAL_UART_Receive+0x100>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d104      	bne.n	80022d2 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 80022c8:	2300      	movs	r3, #0
 80022ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	61bb      	str	r3, [r7, #24]
 80022d0:	e003      	b.n	80022da <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022d6:	2300      	movs	r3, #0
 80022d8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80022da:	e032      	b.n	8002342 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	9300      	str	r3, [sp, #0]
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	2200      	movs	r2, #0
 80022e4:	2120      	movs	r1, #32
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f000 fbb5 	bl	8002a56 <UART_WaitOnFlagUntilTimeout>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <HAL_UART_Receive+0x124>
      {
        return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e035      	b.n	8002362 <HAL_UART_Receive+0x190>
      }
      if (pdata8bits == NULL)
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d10c      	bne.n	8002316 <HAL_UART_Receive+0x144>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002302:	b29a      	uxth	r2, r3
 8002304:	8a7b      	ldrh	r3, [r7, #18]
 8002306:	4013      	ands	r3, r2
 8002308:	b29a      	uxth	r2, r3
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	3302      	adds	r3, #2
 8002312:	61bb      	str	r3, [r7, #24]
 8002314:	e00c      	b.n	8002330 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231c:	b2da      	uxtb	r2, r3
 800231e:	8a7b      	ldrh	r3, [r7, #18]
 8002320:	b2db      	uxtb	r3, r3
 8002322:	4013      	ands	r3, r2
 8002324:	b2da      	uxtb	r2, r3
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	3301      	adds	r3, #1
 800232e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002336:	b29b      	uxth	r3, r3
 8002338:	3b01      	subs	r3, #1
 800233a:	b29a      	uxth	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002348:	b29b      	uxth	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1c6      	bne.n	80022dc <HAL_UART_Receive+0x10a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2220      	movs	r2, #32
 8002352:	679a      	str	r2, [r3, #120]	; 0x78

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 800235c:	2300      	movs	r3, #0
 800235e:	e000      	b.n	8002362 <HAL_UART_Receive+0x190>
  }
  else
  {
    return HAL_BUSY;
 8002360:	2302      	movs	r3, #2
  }
}
 8002362:	4618      	mov	r0, r3
 8002364:	3720      	adds	r7, #32
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
	...

0800236c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b088      	sub	sp, #32
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002374:	2300      	movs	r3, #0
 8002376:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002378:	2300      	movs	r3, #0
 800237a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	431a      	orrs	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	431a      	orrs	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	4313      	orrs	r3, r2
 8002392:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	4bb1      	ldr	r3, [pc, #708]	; (8002660 <UART_SetConfig+0x2f4>)
 800239c:	4013      	ands	r3, r2
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	6812      	ldr	r2, [r2, #0]
 80023a2:	6939      	ldr	r1, [r7, #16]
 80023a4:	430b      	orrs	r3, r1
 80023a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	68da      	ldr	r2, [r3, #12]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	430a      	orrs	r2, r1
 80023bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	430a      	orrs	r2, r1
 80023e0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a9f      	ldr	r2, [pc, #636]	; (8002664 <UART_SetConfig+0x2f8>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d121      	bne.n	8002430 <UART_SetConfig+0xc4>
 80023ec:	4b9e      	ldr	r3, [pc, #632]	; (8002668 <UART_SetConfig+0x2fc>)
 80023ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f2:	f003 0303 	and.w	r3, r3, #3
 80023f6:	2b03      	cmp	r3, #3
 80023f8:	d816      	bhi.n	8002428 <UART_SetConfig+0xbc>
 80023fa:	a201      	add	r2, pc, #4	; (adr r2, 8002400 <UART_SetConfig+0x94>)
 80023fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002400:	08002411 	.word	0x08002411
 8002404:	0800241d 	.word	0x0800241d
 8002408:	08002417 	.word	0x08002417
 800240c:	08002423 	.word	0x08002423
 8002410:	2301      	movs	r3, #1
 8002412:	77fb      	strb	r3, [r7, #31]
 8002414:	e151      	b.n	80026ba <UART_SetConfig+0x34e>
 8002416:	2302      	movs	r3, #2
 8002418:	77fb      	strb	r3, [r7, #31]
 800241a:	e14e      	b.n	80026ba <UART_SetConfig+0x34e>
 800241c:	2304      	movs	r3, #4
 800241e:	77fb      	strb	r3, [r7, #31]
 8002420:	e14b      	b.n	80026ba <UART_SetConfig+0x34e>
 8002422:	2308      	movs	r3, #8
 8002424:	77fb      	strb	r3, [r7, #31]
 8002426:	e148      	b.n	80026ba <UART_SetConfig+0x34e>
 8002428:	2310      	movs	r3, #16
 800242a:	77fb      	strb	r3, [r7, #31]
 800242c:	bf00      	nop
 800242e:	e144      	b.n	80026ba <UART_SetConfig+0x34e>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a8d      	ldr	r2, [pc, #564]	; (800266c <UART_SetConfig+0x300>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d134      	bne.n	80024a4 <UART_SetConfig+0x138>
 800243a:	4b8b      	ldr	r3, [pc, #556]	; (8002668 <UART_SetConfig+0x2fc>)
 800243c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002440:	f003 030c 	and.w	r3, r3, #12
 8002444:	2b0c      	cmp	r3, #12
 8002446:	d829      	bhi.n	800249c <UART_SetConfig+0x130>
 8002448:	a201      	add	r2, pc, #4	; (adr r2, 8002450 <UART_SetConfig+0xe4>)
 800244a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800244e:	bf00      	nop
 8002450:	08002485 	.word	0x08002485
 8002454:	0800249d 	.word	0x0800249d
 8002458:	0800249d 	.word	0x0800249d
 800245c:	0800249d 	.word	0x0800249d
 8002460:	08002491 	.word	0x08002491
 8002464:	0800249d 	.word	0x0800249d
 8002468:	0800249d 	.word	0x0800249d
 800246c:	0800249d 	.word	0x0800249d
 8002470:	0800248b 	.word	0x0800248b
 8002474:	0800249d 	.word	0x0800249d
 8002478:	0800249d 	.word	0x0800249d
 800247c:	0800249d 	.word	0x0800249d
 8002480:	08002497 	.word	0x08002497
 8002484:	2300      	movs	r3, #0
 8002486:	77fb      	strb	r3, [r7, #31]
 8002488:	e117      	b.n	80026ba <UART_SetConfig+0x34e>
 800248a:	2302      	movs	r3, #2
 800248c:	77fb      	strb	r3, [r7, #31]
 800248e:	e114      	b.n	80026ba <UART_SetConfig+0x34e>
 8002490:	2304      	movs	r3, #4
 8002492:	77fb      	strb	r3, [r7, #31]
 8002494:	e111      	b.n	80026ba <UART_SetConfig+0x34e>
 8002496:	2308      	movs	r3, #8
 8002498:	77fb      	strb	r3, [r7, #31]
 800249a:	e10e      	b.n	80026ba <UART_SetConfig+0x34e>
 800249c:	2310      	movs	r3, #16
 800249e:	77fb      	strb	r3, [r7, #31]
 80024a0:	bf00      	nop
 80024a2:	e10a      	b.n	80026ba <UART_SetConfig+0x34e>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a71      	ldr	r2, [pc, #452]	; (8002670 <UART_SetConfig+0x304>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d120      	bne.n	80024f0 <UART_SetConfig+0x184>
 80024ae:	4b6e      	ldr	r3, [pc, #440]	; (8002668 <UART_SetConfig+0x2fc>)
 80024b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80024b8:	2b10      	cmp	r3, #16
 80024ba:	d00f      	beq.n	80024dc <UART_SetConfig+0x170>
 80024bc:	2b10      	cmp	r3, #16
 80024be:	d802      	bhi.n	80024c6 <UART_SetConfig+0x15a>
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d005      	beq.n	80024d0 <UART_SetConfig+0x164>
 80024c4:	e010      	b.n	80024e8 <UART_SetConfig+0x17c>
 80024c6:	2b20      	cmp	r3, #32
 80024c8:	d005      	beq.n	80024d6 <UART_SetConfig+0x16a>
 80024ca:	2b30      	cmp	r3, #48	; 0x30
 80024cc:	d009      	beq.n	80024e2 <UART_SetConfig+0x176>
 80024ce:	e00b      	b.n	80024e8 <UART_SetConfig+0x17c>
 80024d0:	2300      	movs	r3, #0
 80024d2:	77fb      	strb	r3, [r7, #31]
 80024d4:	e0f1      	b.n	80026ba <UART_SetConfig+0x34e>
 80024d6:	2302      	movs	r3, #2
 80024d8:	77fb      	strb	r3, [r7, #31]
 80024da:	e0ee      	b.n	80026ba <UART_SetConfig+0x34e>
 80024dc:	2304      	movs	r3, #4
 80024de:	77fb      	strb	r3, [r7, #31]
 80024e0:	e0eb      	b.n	80026ba <UART_SetConfig+0x34e>
 80024e2:	2308      	movs	r3, #8
 80024e4:	77fb      	strb	r3, [r7, #31]
 80024e6:	e0e8      	b.n	80026ba <UART_SetConfig+0x34e>
 80024e8:	2310      	movs	r3, #16
 80024ea:	77fb      	strb	r3, [r7, #31]
 80024ec:	bf00      	nop
 80024ee:	e0e4      	b.n	80026ba <UART_SetConfig+0x34e>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a5f      	ldr	r2, [pc, #380]	; (8002674 <UART_SetConfig+0x308>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d120      	bne.n	800253c <UART_SetConfig+0x1d0>
 80024fa:	4b5b      	ldr	r3, [pc, #364]	; (8002668 <UART_SetConfig+0x2fc>)
 80024fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002500:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002504:	2b40      	cmp	r3, #64	; 0x40
 8002506:	d00f      	beq.n	8002528 <UART_SetConfig+0x1bc>
 8002508:	2b40      	cmp	r3, #64	; 0x40
 800250a:	d802      	bhi.n	8002512 <UART_SetConfig+0x1a6>
 800250c:	2b00      	cmp	r3, #0
 800250e:	d005      	beq.n	800251c <UART_SetConfig+0x1b0>
 8002510:	e010      	b.n	8002534 <UART_SetConfig+0x1c8>
 8002512:	2b80      	cmp	r3, #128	; 0x80
 8002514:	d005      	beq.n	8002522 <UART_SetConfig+0x1b6>
 8002516:	2bc0      	cmp	r3, #192	; 0xc0
 8002518:	d009      	beq.n	800252e <UART_SetConfig+0x1c2>
 800251a:	e00b      	b.n	8002534 <UART_SetConfig+0x1c8>
 800251c:	2300      	movs	r3, #0
 800251e:	77fb      	strb	r3, [r7, #31]
 8002520:	e0cb      	b.n	80026ba <UART_SetConfig+0x34e>
 8002522:	2302      	movs	r3, #2
 8002524:	77fb      	strb	r3, [r7, #31]
 8002526:	e0c8      	b.n	80026ba <UART_SetConfig+0x34e>
 8002528:	2304      	movs	r3, #4
 800252a:	77fb      	strb	r3, [r7, #31]
 800252c:	e0c5      	b.n	80026ba <UART_SetConfig+0x34e>
 800252e:	2308      	movs	r3, #8
 8002530:	77fb      	strb	r3, [r7, #31]
 8002532:	e0c2      	b.n	80026ba <UART_SetConfig+0x34e>
 8002534:	2310      	movs	r3, #16
 8002536:	77fb      	strb	r3, [r7, #31]
 8002538:	bf00      	nop
 800253a:	e0be      	b.n	80026ba <UART_SetConfig+0x34e>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a4d      	ldr	r2, [pc, #308]	; (8002678 <UART_SetConfig+0x30c>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d124      	bne.n	8002590 <UART_SetConfig+0x224>
 8002546:	4b48      	ldr	r3, [pc, #288]	; (8002668 <UART_SetConfig+0x2fc>)
 8002548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800254c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002550:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002554:	d012      	beq.n	800257c <UART_SetConfig+0x210>
 8002556:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800255a:	d802      	bhi.n	8002562 <UART_SetConfig+0x1f6>
 800255c:	2b00      	cmp	r3, #0
 800255e:	d007      	beq.n	8002570 <UART_SetConfig+0x204>
 8002560:	e012      	b.n	8002588 <UART_SetConfig+0x21c>
 8002562:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002566:	d006      	beq.n	8002576 <UART_SetConfig+0x20a>
 8002568:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800256c:	d009      	beq.n	8002582 <UART_SetConfig+0x216>
 800256e:	e00b      	b.n	8002588 <UART_SetConfig+0x21c>
 8002570:	2300      	movs	r3, #0
 8002572:	77fb      	strb	r3, [r7, #31]
 8002574:	e0a1      	b.n	80026ba <UART_SetConfig+0x34e>
 8002576:	2302      	movs	r3, #2
 8002578:	77fb      	strb	r3, [r7, #31]
 800257a:	e09e      	b.n	80026ba <UART_SetConfig+0x34e>
 800257c:	2304      	movs	r3, #4
 800257e:	77fb      	strb	r3, [r7, #31]
 8002580:	e09b      	b.n	80026ba <UART_SetConfig+0x34e>
 8002582:	2308      	movs	r3, #8
 8002584:	77fb      	strb	r3, [r7, #31]
 8002586:	e098      	b.n	80026ba <UART_SetConfig+0x34e>
 8002588:	2310      	movs	r3, #16
 800258a:	77fb      	strb	r3, [r7, #31]
 800258c:	bf00      	nop
 800258e:	e094      	b.n	80026ba <UART_SetConfig+0x34e>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a39      	ldr	r2, [pc, #228]	; (800267c <UART_SetConfig+0x310>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d124      	bne.n	80025e4 <UART_SetConfig+0x278>
 800259a:	4b33      	ldr	r3, [pc, #204]	; (8002668 <UART_SetConfig+0x2fc>)
 800259c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80025a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025a8:	d012      	beq.n	80025d0 <UART_SetConfig+0x264>
 80025aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ae:	d802      	bhi.n	80025b6 <UART_SetConfig+0x24a>
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d007      	beq.n	80025c4 <UART_SetConfig+0x258>
 80025b4:	e012      	b.n	80025dc <UART_SetConfig+0x270>
 80025b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025ba:	d006      	beq.n	80025ca <UART_SetConfig+0x25e>
 80025bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80025c0:	d009      	beq.n	80025d6 <UART_SetConfig+0x26a>
 80025c2:	e00b      	b.n	80025dc <UART_SetConfig+0x270>
 80025c4:	2301      	movs	r3, #1
 80025c6:	77fb      	strb	r3, [r7, #31]
 80025c8:	e077      	b.n	80026ba <UART_SetConfig+0x34e>
 80025ca:	2302      	movs	r3, #2
 80025cc:	77fb      	strb	r3, [r7, #31]
 80025ce:	e074      	b.n	80026ba <UART_SetConfig+0x34e>
 80025d0:	2304      	movs	r3, #4
 80025d2:	77fb      	strb	r3, [r7, #31]
 80025d4:	e071      	b.n	80026ba <UART_SetConfig+0x34e>
 80025d6:	2308      	movs	r3, #8
 80025d8:	77fb      	strb	r3, [r7, #31]
 80025da:	e06e      	b.n	80026ba <UART_SetConfig+0x34e>
 80025dc:	2310      	movs	r3, #16
 80025de:	77fb      	strb	r3, [r7, #31]
 80025e0:	bf00      	nop
 80025e2:	e06a      	b.n	80026ba <UART_SetConfig+0x34e>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a25      	ldr	r2, [pc, #148]	; (8002680 <UART_SetConfig+0x314>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d124      	bne.n	8002638 <UART_SetConfig+0x2cc>
 80025ee:	4b1e      	ldr	r3, [pc, #120]	; (8002668 <UART_SetConfig+0x2fc>)
 80025f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80025f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025fc:	d012      	beq.n	8002624 <UART_SetConfig+0x2b8>
 80025fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002602:	d802      	bhi.n	800260a <UART_SetConfig+0x29e>
 8002604:	2b00      	cmp	r3, #0
 8002606:	d007      	beq.n	8002618 <UART_SetConfig+0x2ac>
 8002608:	e012      	b.n	8002630 <UART_SetConfig+0x2c4>
 800260a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800260e:	d006      	beq.n	800261e <UART_SetConfig+0x2b2>
 8002610:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002614:	d009      	beq.n	800262a <UART_SetConfig+0x2be>
 8002616:	e00b      	b.n	8002630 <UART_SetConfig+0x2c4>
 8002618:	2300      	movs	r3, #0
 800261a:	77fb      	strb	r3, [r7, #31]
 800261c:	e04d      	b.n	80026ba <UART_SetConfig+0x34e>
 800261e:	2302      	movs	r3, #2
 8002620:	77fb      	strb	r3, [r7, #31]
 8002622:	e04a      	b.n	80026ba <UART_SetConfig+0x34e>
 8002624:	2304      	movs	r3, #4
 8002626:	77fb      	strb	r3, [r7, #31]
 8002628:	e047      	b.n	80026ba <UART_SetConfig+0x34e>
 800262a:	2308      	movs	r3, #8
 800262c:	77fb      	strb	r3, [r7, #31]
 800262e:	e044      	b.n	80026ba <UART_SetConfig+0x34e>
 8002630:	2310      	movs	r3, #16
 8002632:	77fb      	strb	r3, [r7, #31]
 8002634:	bf00      	nop
 8002636:	e040      	b.n	80026ba <UART_SetConfig+0x34e>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a11      	ldr	r2, [pc, #68]	; (8002684 <UART_SetConfig+0x318>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d139      	bne.n	80026b6 <UART_SetConfig+0x34a>
 8002642:	4b09      	ldr	r3, [pc, #36]	; (8002668 <UART_SetConfig+0x2fc>)
 8002644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002648:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800264c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002650:	d027      	beq.n	80026a2 <UART_SetConfig+0x336>
 8002652:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002656:	d817      	bhi.n	8002688 <UART_SetConfig+0x31c>
 8002658:	2b00      	cmp	r3, #0
 800265a:	d01c      	beq.n	8002696 <UART_SetConfig+0x32a>
 800265c:	e027      	b.n	80026ae <UART_SetConfig+0x342>
 800265e:	bf00      	nop
 8002660:	efff69f3 	.word	0xefff69f3
 8002664:	40011000 	.word	0x40011000
 8002668:	40023800 	.word	0x40023800
 800266c:	40004400 	.word	0x40004400
 8002670:	40004800 	.word	0x40004800
 8002674:	40004c00 	.word	0x40004c00
 8002678:	40005000 	.word	0x40005000
 800267c:	40011400 	.word	0x40011400
 8002680:	40007800 	.word	0x40007800
 8002684:	40007c00 	.word	0x40007c00
 8002688:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800268c:	d006      	beq.n	800269c <UART_SetConfig+0x330>
 800268e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002692:	d009      	beq.n	80026a8 <UART_SetConfig+0x33c>
 8002694:	e00b      	b.n	80026ae <UART_SetConfig+0x342>
 8002696:	2300      	movs	r3, #0
 8002698:	77fb      	strb	r3, [r7, #31]
 800269a:	e00e      	b.n	80026ba <UART_SetConfig+0x34e>
 800269c:	2302      	movs	r3, #2
 800269e:	77fb      	strb	r3, [r7, #31]
 80026a0:	e00b      	b.n	80026ba <UART_SetConfig+0x34e>
 80026a2:	2304      	movs	r3, #4
 80026a4:	77fb      	strb	r3, [r7, #31]
 80026a6:	e008      	b.n	80026ba <UART_SetConfig+0x34e>
 80026a8:	2308      	movs	r3, #8
 80026aa:	77fb      	strb	r3, [r7, #31]
 80026ac:	e005      	b.n	80026ba <UART_SetConfig+0x34e>
 80026ae:	2310      	movs	r3, #16
 80026b0:	77fb      	strb	r3, [r7, #31]
 80026b2:	bf00      	nop
 80026b4:	e001      	b.n	80026ba <UART_SetConfig+0x34e>
 80026b6:	2310      	movs	r3, #16
 80026b8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026c2:	d17c      	bne.n	80027be <UART_SetConfig+0x452>
  {
    switch (clocksource)
 80026c4:	7ffb      	ldrb	r3, [r7, #31]
 80026c6:	2b08      	cmp	r3, #8
 80026c8:	d859      	bhi.n	800277e <UART_SetConfig+0x412>
 80026ca:	a201      	add	r2, pc, #4	; (adr r2, 80026d0 <UART_SetConfig+0x364>)
 80026cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d0:	080026f5 	.word	0x080026f5
 80026d4:	08002713 	.word	0x08002713
 80026d8:	08002731 	.word	0x08002731
 80026dc:	0800277f 	.word	0x0800277f
 80026e0:	08002749 	.word	0x08002749
 80026e4:	0800277f 	.word	0x0800277f
 80026e8:	0800277f 	.word	0x0800277f
 80026ec:	0800277f 	.word	0x0800277f
 80026f0:	08002767 	.word	0x08002767
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80026f4:	f7fe fde0 	bl	80012b8 <HAL_RCC_GetPCLK1Freq>
 80026f8:	4603      	mov	r3, r0
 80026fa:	005a      	lsls	r2, r3, #1
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	085b      	lsrs	r3, r3, #1
 8002702:	441a      	add	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	fbb2 f3f3 	udiv	r3, r2, r3
 800270c:	b29b      	uxth	r3, r3
 800270e:	61bb      	str	r3, [r7, #24]
        break;
 8002710:	e038      	b.n	8002784 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002712:	f7fe fde5 	bl	80012e0 <HAL_RCC_GetPCLK2Freq>
 8002716:	4603      	mov	r3, r0
 8002718:	005a      	lsls	r2, r3, #1
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	085b      	lsrs	r3, r3, #1
 8002720:	441a      	add	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	fbb2 f3f3 	udiv	r3, r2, r3
 800272a:	b29b      	uxth	r3, r3
 800272c:	61bb      	str	r3, [r7, #24]
        break;
 800272e:	e029      	b.n	8002784 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	085a      	lsrs	r2, r3, #1
 8002736:	4b5d      	ldr	r3, [pc, #372]	; (80028ac <UART_SetConfig+0x540>)
 8002738:	4413      	add	r3, r2
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	6852      	ldr	r2, [r2, #4]
 800273e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002742:	b29b      	uxth	r3, r3
 8002744:	61bb      	str	r3, [r7, #24]
        break;
 8002746:	e01d      	b.n	8002784 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002748:	f7fe fcf8 	bl	800113c <HAL_RCC_GetSysClockFreq>
 800274c:	4603      	mov	r3, r0
 800274e:	005a      	lsls	r2, r3, #1
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	085b      	lsrs	r3, r3, #1
 8002756:	441a      	add	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002760:	b29b      	uxth	r3, r3
 8002762:	61bb      	str	r3, [r7, #24]
        break;
 8002764:	e00e      	b.n	8002784 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	085b      	lsrs	r3, r3, #1
 800276c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	fbb2 f3f3 	udiv	r3, r2, r3
 8002778:	b29b      	uxth	r3, r3
 800277a:	61bb      	str	r3, [r7, #24]
        break;
 800277c:	e002      	b.n	8002784 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	75fb      	strb	r3, [r7, #23]
        break;
 8002782:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	2b0f      	cmp	r3, #15
 8002788:	d916      	bls.n	80027b8 <UART_SetConfig+0x44c>
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002790:	d212      	bcs.n	80027b8 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	b29b      	uxth	r3, r3
 8002796:	f023 030f 	bic.w	r3, r3, #15
 800279a:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	085b      	lsrs	r3, r3, #1
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	f003 0307 	and.w	r3, r3, #7
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	89fb      	ldrh	r3, [r7, #14]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	89fa      	ldrh	r2, [r7, #14]
 80027b4:	60da      	str	r2, [r3, #12]
 80027b6:	e06e      	b.n	8002896 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	75fb      	strb	r3, [r7, #23]
 80027bc:	e06b      	b.n	8002896 <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 80027be:	7ffb      	ldrb	r3, [r7, #31]
 80027c0:	2b08      	cmp	r3, #8
 80027c2:	d857      	bhi.n	8002874 <UART_SetConfig+0x508>
 80027c4:	a201      	add	r2, pc, #4	; (adr r2, 80027cc <UART_SetConfig+0x460>)
 80027c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ca:	bf00      	nop
 80027cc:	080027f1 	.word	0x080027f1
 80027d0:	0800280d 	.word	0x0800280d
 80027d4:	08002829 	.word	0x08002829
 80027d8:	08002875 	.word	0x08002875
 80027dc:	08002841 	.word	0x08002841
 80027e0:	08002875 	.word	0x08002875
 80027e4:	08002875 	.word	0x08002875
 80027e8:	08002875 	.word	0x08002875
 80027ec:	0800285d 	.word	0x0800285d
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80027f0:	f7fe fd62 	bl	80012b8 <HAL_RCC_GetPCLK1Freq>
 80027f4:	4602      	mov	r2, r0
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	085b      	lsrs	r3, r3, #1
 80027fc:	441a      	add	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	fbb2 f3f3 	udiv	r3, r2, r3
 8002806:	b29b      	uxth	r3, r3
 8002808:	61bb      	str	r3, [r7, #24]
        break;
 800280a:	e036      	b.n	800287a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800280c:	f7fe fd68 	bl	80012e0 <HAL_RCC_GetPCLK2Freq>
 8002810:	4602      	mov	r2, r0
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	085b      	lsrs	r3, r3, #1
 8002818:	441a      	add	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002822:	b29b      	uxth	r3, r3
 8002824:	61bb      	str	r3, [r7, #24]
        break;
 8002826:	e028      	b.n	800287a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	085a      	lsrs	r2, r3, #1
 800282e:	4b20      	ldr	r3, [pc, #128]	; (80028b0 <UART_SetConfig+0x544>)
 8002830:	4413      	add	r3, r2
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	6852      	ldr	r2, [r2, #4]
 8002836:	fbb3 f3f2 	udiv	r3, r3, r2
 800283a:	b29b      	uxth	r3, r3
 800283c:	61bb      	str	r3, [r7, #24]
        break;
 800283e:	e01c      	b.n	800287a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002840:	f7fe fc7c 	bl	800113c <HAL_RCC_GetSysClockFreq>
 8002844:	4602      	mov	r2, r0
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	085b      	lsrs	r3, r3, #1
 800284c:	441a      	add	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	fbb2 f3f3 	udiv	r3, r2, r3
 8002856:	b29b      	uxth	r3, r3
 8002858:	61bb      	str	r3, [r7, #24]
        break;
 800285a:	e00e      	b.n	800287a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	085b      	lsrs	r3, r3, #1
 8002862:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	fbb2 f3f3 	udiv	r3, r2, r3
 800286e:	b29b      	uxth	r3, r3
 8002870:	61bb      	str	r3, [r7, #24]
        break;
 8002872:	e002      	b.n	800287a <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	75fb      	strb	r3, [r7, #23]
        break;
 8002878:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	2b0f      	cmp	r3, #15
 800287e:	d908      	bls.n	8002892 <UART_SetConfig+0x526>
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002886:	d204      	bcs.n	8002892 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	60da      	str	r2, [r3, #12]
 8002890:	e001      	b.n	8002896 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80028a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3720      	adds	r7, #32
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	01e84800 	.word	0x01e84800
 80028b0:	00f42400 	.word	0x00f42400

080028b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00a      	beq.n	80028de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	430a      	orrs	r2, r1
 80028dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00a      	beq.n	8002900 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	430a      	orrs	r2, r1
 80028fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00a      	beq.n	8002922 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	430a      	orrs	r2, r1
 8002920:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002926:	f003 0308 	and.w	r3, r3, #8
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00a      	beq.n	8002944 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	430a      	orrs	r2, r1
 8002942:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002948:	f003 0310 	and.w	r3, r3, #16
 800294c:	2b00      	cmp	r3, #0
 800294e:	d00a      	beq.n	8002966 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	430a      	orrs	r2, r1
 8002964:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296a:	f003 0320 	and.w	r3, r3, #32
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00a      	beq.n	8002988 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	430a      	orrs	r2, r1
 8002986:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002990:	2b00      	cmp	r3, #0
 8002992:	d01a      	beq.n	80029ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	430a      	orrs	r2, r1
 80029a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029b2:	d10a      	bne.n	80029ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	430a      	orrs	r2, r1
 80029c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00a      	beq.n	80029ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	430a      	orrs	r2, r1
 80029ea:	605a      	str	r2, [r3, #4]
  }
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af02      	add	r7, sp, #8
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002a06:	f7fd fda9 	bl	800055c <HAL_GetTick>
 8002a0a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0308 	and.w	r3, r3, #8
 8002a16:	2b08      	cmp	r3, #8
 8002a18:	d10e      	bne.n	8002a38 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a1a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 f814 	bl	8002a56 <UART_WaitOnFlagUntilTimeout>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e00a      	b.n	8002a4e <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2220      	movs	r2, #32
 8002a42:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b084      	sub	sp, #16
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	60f8      	str	r0, [r7, #12]
 8002a5e:	60b9      	str	r1, [r7, #8]
 8002a60:	603b      	str	r3, [r7, #0]
 8002a62:	4613      	mov	r3, r2
 8002a64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a66:	e02a      	b.n	8002abe <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6e:	d026      	beq.n	8002abe <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a70:	f7fd fd74 	bl	800055c <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d302      	bcc.n	8002a86 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d11b      	bne.n	8002abe <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002a94:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 0201 	bic.w	r2, r2, #1
 8002aa4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2220      	movs	r2, #32
 8002aaa:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2220      	movs	r2, #32
 8002ab0:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e00f      	b.n	8002ade <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	69da      	ldr	r2, [r3, #28]
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	68ba      	ldr	r2, [r7, #8]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	bf0c      	ite	eq
 8002ace:	2301      	moveq	r3, #1
 8002ad0:	2300      	movne	r3, #0
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	79fb      	ldrb	r3, [r7, #7]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d0c5      	beq.n	8002a68 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
	...

08002ae8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002aec:	f7fd fd14 	bl	8000518 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002af0:	f000 f82a 	bl	8002b48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002af4:	f000 f8e2 	bl	8002cbc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8002af8:	f000 f8b0 	bl	8002c5c <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Receive(&huart1, &character, 1, 0xFFF);
 8002afc:	f640 73ff 	movw	r3, #4095	; 0xfff
 8002b00:	2201      	movs	r2, #1
 8002b02:	490e      	ldr	r1, [pc, #56]	; (8002b3c <main+0x54>)
 8002b04:	480e      	ldr	r0, [pc, #56]	; (8002b40 <main+0x58>)
 8002b06:	f7ff fb64 	bl	80021d2 <HAL_UART_Receive>
	  hello[0] = character;
 8002b0a:	4b0c      	ldr	r3, [pc, #48]	; (8002b3c <main+0x54>)
 8002b0c:	781a      	ldrb	r2, [r3, #0]
 8002b0e:	4b0d      	ldr	r3, [pc, #52]	; (8002b44 <main+0x5c>)
 8002b10:	701a      	strb	r2, [r3, #0]
	  hello[1] = '\r';
 8002b12:	4b0c      	ldr	r3, [pc, #48]	; (8002b44 <main+0x5c>)
 8002b14:	220d      	movs	r2, #13
 8002b16:	705a      	strb	r2, [r3, #1]
	  hello[2] = '\n';
 8002b18:	4b0a      	ldr	r3, [pc, #40]	; (8002b44 <main+0x5c>)
 8002b1a:	220a      	movs	r2, #10
 8002b1c:	709a      	strb	r2, [r3, #2]
	  hello[3] = '\0';
 8002b1e:	4b09      	ldr	r3, [pc, #36]	; (8002b44 <main+0x5c>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	70da      	strb	r2, [r3, #3]
		  HAL_UART_Transmit(&huart1, (uint8_t*)hello, strlen(hello), 0xFFFF);
 8002b24:	4807      	ldr	r0, [pc, #28]	; (8002b44 <main+0x5c>)
 8002b26:	f7fd fb6f 	bl	8000208 <strlen>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b32:	4904      	ldr	r1, [pc, #16]	; (8002b44 <main+0x5c>)
 8002b34:	4802      	ldr	r0, [pc, #8]	; (8002b40 <main+0x58>)
 8002b36:	f7ff fabb 	bl	80020b0 <HAL_UART_Transmit>
	  HAL_UART_Receive(&huart1, &character, 1, 0xFFF);
 8002b3a:	e7df      	b.n	8002afc <main+0x14>
 8002b3c:	20000028 	.word	0x20000028
 8002b40:	20000090 	.word	0x20000090
 8002b44:	2000002c 	.word	0x2000002c

08002b48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b0b4      	sub	sp, #208	; 0xd0
 8002b4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b4e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002b52:	2230      	movs	r2, #48	; 0x30
 8002b54:	2100      	movs	r1, #0
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 faa2 	bl	80030a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b5c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	605a      	str	r2, [r3, #4]
 8002b66:	609a      	str	r2, [r3, #8]
 8002b68:	60da      	str	r2, [r3, #12]
 8002b6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b6c:	f107 0308 	add.w	r3, r7, #8
 8002b70:	2284      	movs	r2, #132	; 0x84
 8002b72:	2100      	movs	r1, #0
 8002b74:	4618      	mov	r0, r3
 8002b76:	f000 fa93 	bl	80030a0 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b7a:	4b36      	ldr	r3, [pc, #216]	; (8002c54 <SystemClock_Config+0x10c>)
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	4a35      	ldr	r2, [pc, #212]	; (8002c54 <SystemClock_Config+0x10c>)
 8002b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b84:	6413      	str	r3, [r2, #64]	; 0x40
 8002b86:	4b33      	ldr	r3, [pc, #204]	; (8002c54 <SystemClock_Config+0x10c>)
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b8e:	607b      	str	r3, [r7, #4]
 8002b90:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b92:	4b31      	ldr	r3, [pc, #196]	; (8002c58 <SystemClock_Config+0x110>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002b9a:	4a2f      	ldr	r2, [pc, #188]	; (8002c58 <SystemClock_Config+0x110>)
 8002b9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ba0:	6013      	str	r3, [r2, #0]
 8002ba2:	4b2d      	ldr	r3, [pc, #180]	; (8002c58 <SystemClock_Config+0x110>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002baa:	603b      	str	r3, [r7, #0]
 8002bac:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002bae:	2302      	movs	r3, #2
 8002bb0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002bba:	2310      	movs	r3, #16
 8002bbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 10;
 8002bcc:	230a      	movs	r3, #10
 8002bce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 210;
 8002bd2:	23d2      	movs	r3, #210	; 0xd2
 8002bd4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002bd8:	2302      	movs	r3, #2
 8002bda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002bde:	2302      	movs	r3, #2
 8002be0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002be4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7fd ff4f 	bl	8000a8c <HAL_RCC_OscConfig>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002bf4:	f000 f8b0 	bl	8002d58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bf8:	230f      	movs	r3, #15
 8002bfa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bfe:	2302      	movs	r3, #2
 8002c00:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c04:	2300      	movs	r3, #0
 8002c06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002c0a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002c0e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002c12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002c1a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002c1e:	2105      	movs	r1, #5
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7fe f9a3 	bl	8000f6c <HAL_RCC_ClockConfig>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8002c2c:	f000 f894 	bl	8002d58 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002c30:	2340      	movs	r3, #64	; 0x40
 8002c32:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002c34:	2300      	movs	r3, #0
 8002c36:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c38:	f107 0308 	add.w	r3, r7, #8
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7fe fb95 	bl	800136c <HAL_RCCEx_PeriphCLKConfig>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <SystemClock_Config+0x104>
  {
    Error_Handler();
 8002c48:	f000 f886 	bl	8002d58 <Error_Handler>
  }
}
 8002c4c:	bf00      	nop
 8002c4e:	37d0      	adds	r7, #208	; 0xd0
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40023800 	.word	0x40023800
 8002c58:	40007000 	.word	0x40007000

08002c5c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c60:	4b14      	ldr	r3, [pc, #80]	; (8002cb4 <MX_USART1_UART_Init+0x58>)
 8002c62:	4a15      	ldr	r2, [pc, #84]	; (8002cb8 <MX_USART1_UART_Init+0x5c>)
 8002c64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002c66:	4b13      	ldr	r3, [pc, #76]	; (8002cb4 <MX_USART1_UART_Init+0x58>)
 8002c68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c6e:	4b11      	ldr	r3, [pc, #68]	; (8002cb4 <MX_USART1_UART_Init+0x58>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c74:	4b0f      	ldr	r3, [pc, #60]	; (8002cb4 <MX_USART1_UART_Init+0x58>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c7a:	4b0e      	ldr	r3, [pc, #56]	; (8002cb4 <MX_USART1_UART_Init+0x58>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c80:	4b0c      	ldr	r3, [pc, #48]	; (8002cb4 <MX_USART1_UART_Init+0x58>)
 8002c82:	220c      	movs	r2, #12
 8002c84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c86:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <MX_USART1_UART_Init+0x58>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c8c:	4b09      	ldr	r3, [pc, #36]	; (8002cb4 <MX_USART1_UART_Init+0x58>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c92:	4b08      	ldr	r3, [pc, #32]	; (8002cb4 <MX_USART1_UART_Init+0x58>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c98:	4b06      	ldr	r3, [pc, #24]	; (8002cb4 <MX_USART1_UART_Init+0x58>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c9e:	4805      	ldr	r0, [pc, #20]	; (8002cb4 <MX_USART1_UART_Init+0x58>)
 8002ca0:	f7ff f9b8 	bl	8002014 <HAL_UART_Init>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002caa:	f000 f855 	bl	8002d58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002cae:	bf00      	nop
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	20000090 	.word	0x20000090
 8002cb8:	40011000 	.word	0x40011000

08002cbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cc2:	4b1b      	ldr	r3, [pc, #108]	; (8002d30 <MX_GPIO_Init+0x74>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc6:	4a1a      	ldr	r2, [pc, #104]	; (8002d30 <MX_GPIO_Init+0x74>)
 8002cc8:	f043 0301 	orr.w	r3, r3, #1
 8002ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cce:	4b18      	ldr	r3, [pc, #96]	; (8002d30 <MX_GPIO_Init+0x74>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	60fb      	str	r3, [r7, #12]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cda:	4b15      	ldr	r3, [pc, #84]	; (8002d30 <MX_GPIO_Init+0x74>)
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cde:	4a14      	ldr	r2, [pc, #80]	; (8002d30 <MX_GPIO_Init+0x74>)
 8002ce0:	f043 0302 	orr.w	r3, r3, #2
 8002ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ce6:	4b12      	ldr	r3, [pc, #72]	; (8002d30 <MX_GPIO_Init+0x74>)
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	60bb      	str	r3, [r7, #8]
 8002cf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cf2:	4b0f      	ldr	r3, [pc, #60]	; (8002d30 <MX_GPIO_Init+0x74>)
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf6:	4a0e      	ldr	r2, [pc, #56]	; (8002d30 <MX_GPIO_Init+0x74>)
 8002cf8:	f043 0304 	orr.w	r3, r3, #4
 8002cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cfe:	4b0c      	ldr	r3, [pc, #48]	; (8002d30 <MX_GPIO_Init+0x74>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	f003 0304 	and.w	r3, r3, #4
 8002d06:	607b      	str	r3, [r7, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d0a:	4b09      	ldr	r3, [pc, #36]	; (8002d30 <MX_GPIO_Init+0x74>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	4a08      	ldr	r2, [pc, #32]	; (8002d30 <MX_GPIO_Init+0x74>)
 8002d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d14:	6313      	str	r3, [r2, #48]	; 0x30
 8002d16:	4b06      	ldr	r3, [pc, #24]	; (8002d30 <MX_GPIO_Init+0x74>)
 8002d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d1e:	603b      	str	r3, [r7, #0]
 8002d20:	683b      	ldr	r3, [r7, #0]

}
 8002d22:	bf00      	nop
 8002d24:	3714      	adds	r7, #20
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	40023800 	.word	0x40023800

08002d34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a04      	ldr	r2, [pc, #16]	; (8002d54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d101      	bne.n	8002d4a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002d46:	f7fd fbf5 	bl	8000534 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002d4a:	bf00      	nop
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	40002000 	.word	0x40002000

08002d58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002d5c:	bf00      	nop
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
	...

08002d68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002d6e:	4b0f      	ldr	r3, [pc, #60]	; (8002dac <HAL_MspInit+0x44>)
 8002d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d72:	4a0e      	ldr	r2, [pc, #56]	; (8002dac <HAL_MspInit+0x44>)
 8002d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d78:	6413      	str	r3, [r2, #64]	; 0x40
 8002d7a:	4b0c      	ldr	r3, [pc, #48]	; (8002dac <HAL_MspInit+0x44>)
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d82:	607b      	str	r3, [r7, #4]
 8002d84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d86:	4b09      	ldr	r3, [pc, #36]	; (8002dac <HAL_MspInit+0x44>)
 8002d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8a:	4a08      	ldr	r2, [pc, #32]	; (8002dac <HAL_MspInit+0x44>)
 8002d8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d90:	6453      	str	r3, [r2, #68]	; 0x44
 8002d92:	4b06      	ldr	r3, [pc, #24]	; (8002dac <HAL_MspInit+0x44>)
 8002d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d9a:	603b      	str	r3, [r7, #0]
 8002d9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d9e:	bf00      	nop
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	40023800 	.word	0x40023800

08002db0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b08a      	sub	sp, #40	; 0x28
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db8:	f107 0314 	add.w	r3, r7, #20
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	605a      	str	r2, [r3, #4]
 8002dc2:	609a      	str	r2, [r3, #8]
 8002dc4:	60da      	str	r2, [r3, #12]
 8002dc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a25      	ldr	r2, [pc, #148]	; (8002e64 <HAL_UART_MspInit+0xb4>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d144      	bne.n	8002e5c <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002dd2:	4b25      	ldr	r3, [pc, #148]	; (8002e68 <HAL_UART_MspInit+0xb8>)
 8002dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd6:	4a24      	ldr	r2, [pc, #144]	; (8002e68 <HAL_UART_MspInit+0xb8>)
 8002dd8:	f043 0310 	orr.w	r3, r3, #16
 8002ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8002dde:	4b22      	ldr	r3, [pc, #136]	; (8002e68 <HAL_UART_MspInit+0xb8>)
 8002de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de2:	f003 0310 	and.w	r3, r3, #16
 8002de6:	613b      	str	r3, [r7, #16]
 8002de8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dea:	4b1f      	ldr	r3, [pc, #124]	; (8002e68 <HAL_UART_MspInit+0xb8>)
 8002dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dee:	4a1e      	ldr	r2, [pc, #120]	; (8002e68 <HAL_UART_MspInit+0xb8>)
 8002df0:	f043 0302 	orr.w	r3, r3, #2
 8002df4:	6313      	str	r3, [r2, #48]	; 0x30
 8002df6:	4b1c      	ldr	r3, [pc, #112]	; (8002e68 <HAL_UART_MspInit+0xb8>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e02:	4b19      	ldr	r3, [pc, #100]	; (8002e68 <HAL_UART_MspInit+0xb8>)
 8002e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e06:	4a18      	ldr	r2, [pc, #96]	; (8002e68 <HAL_UART_MspInit+0xb8>)
 8002e08:	f043 0301 	orr.w	r3, r3, #1
 8002e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e0e:	4b16      	ldr	r3, [pc, #88]	; (8002e68 <HAL_UART_MspInit+0xb8>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	60bb      	str	r3, [r7, #8]
 8002e18:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002e1a:	2380      	movs	r3, #128	; 0x80
 8002e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e1e:	2302      	movs	r3, #2
 8002e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e22:	2300      	movs	r3, #0
 8002e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e26:	2303      	movs	r3, #3
 8002e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e2a:	2307      	movs	r3, #7
 8002e2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e2e:	f107 0314 	add.w	r3, r7, #20
 8002e32:	4619      	mov	r1, r3
 8002e34:	480d      	ldr	r0, [pc, #52]	; (8002e6c <HAL_UART_MspInit+0xbc>)
 8002e36:	f7fd fc7f 	bl	8000738 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002e3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e40:	2302      	movs	r3, #2
 8002e42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e44:	2300      	movs	r3, #0
 8002e46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e4c:	2307      	movs	r3, #7
 8002e4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e50:	f107 0314 	add.w	r3, r7, #20
 8002e54:	4619      	mov	r1, r3
 8002e56:	4806      	ldr	r0, [pc, #24]	; (8002e70 <HAL_UART_MspInit+0xc0>)
 8002e58:	f7fd fc6e 	bl	8000738 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002e5c:	bf00      	nop
 8002e5e:	3728      	adds	r7, #40	; 0x28
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	40011000 	.word	0x40011000
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	40020400 	.word	0x40020400
 8002e70:	40020000 	.word	0x40020000

08002e74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b08c      	sub	sp, #48	; 0x30
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002e80:	2300      	movs	r3, #0
 8002e82:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0); 
 8002e84:	2200      	movs	r2, #0
 8002e86:	6879      	ldr	r1, [r7, #4]
 8002e88:	202d      	movs	r0, #45	; 0x2d
 8002e8a:	f7fd fc2b 	bl	80006e4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn); 
 8002e8e:	202d      	movs	r0, #45	; 0x2d
 8002e90:	f7fd fc44 	bl	800071c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8002e94:	4b1f      	ldr	r3, [pc, #124]	; (8002f14 <HAL_InitTick+0xa0>)
 8002e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e98:	4a1e      	ldr	r2, [pc, #120]	; (8002f14 <HAL_InitTick+0xa0>)
 8002e9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e9e:	6413      	str	r3, [r2, #64]	; 0x40
 8002ea0:	4b1c      	ldr	r3, [pc, #112]	; (8002f14 <HAL_InitTick+0xa0>)
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea8:	60fb      	str	r3, [r7, #12]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002eac:	f107 0210 	add.w	r2, r7, #16
 8002eb0:	f107 0314 	add.w	r3, r7, #20
 8002eb4:	4611      	mov	r1, r2
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7fe fa26 	bl	8001308 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002ebc:	f7fe f9fc 	bl	80012b8 <HAL_RCC_GetPCLK1Freq>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec8:	4a13      	ldr	r2, [pc, #76]	; (8002f18 <HAL_InitTick+0xa4>)
 8002eca:	fba2 2303 	umull	r2, r3, r2, r3
 8002ece:	0c9b      	lsrs	r3, r3, #18
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8002ed4:	4b11      	ldr	r3, [pc, #68]	; (8002f1c <HAL_InitTick+0xa8>)
 8002ed6:	4a12      	ldr	r2, [pc, #72]	; (8002f20 <HAL_InitTick+0xac>)
 8002ed8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000 / 1000) - 1;
 8002eda:	4b10      	ldr	r3, [pc, #64]	; (8002f1c <HAL_InitTick+0xa8>)
 8002edc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ee0:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8002ee2:	4a0e      	ldr	r2, [pc, #56]	; (8002f1c <HAL_InitTick+0xa8>)
 8002ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee6:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8002ee8:	4b0c      	ldr	r3, [pc, #48]	; (8002f1c <HAL_InitTick+0xa8>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eee:	4b0b      	ldr	r3, [pc, #44]	; (8002f1c <HAL_InitTick+0xa8>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8002ef4:	4809      	ldr	r0, [pc, #36]	; (8002f1c <HAL_InitTick+0xa8>)
 8002ef6:	f7fe fe27 	bl	8001b48 <HAL_TIM_Base_Init>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d104      	bne.n	8002f0a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8002f00:	4806      	ldr	r0, [pc, #24]	; (8002f1c <HAL_InitTick+0xa8>)
 8002f02:	f7fe fe57 	bl	8001bb4 <HAL_TIM_Base_Start_IT>
 8002f06:	4603      	mov	r3, r0
 8002f08:	e000      	b.n	8002f0c <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3730      	adds	r7, #48	; 0x30
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	40023800 	.word	0x40023800
 8002f18:	431bde83 	.word	0x431bde83
 8002f1c:	20000110 	.word	0x20000110
 8002f20:	40002000 	.word	0x40002000

08002f24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002f28:	bf00      	nop
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f32:	b480      	push	{r7}
 8002f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f36:	e7fe      	b.n	8002f36 <HardFault_Handler+0x4>

08002f38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f3c:	e7fe      	b.n	8002f3c <MemManage_Handler+0x4>

08002f3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f42:	e7fe      	b.n	8002f42 <BusFault_Handler+0x4>

08002f44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f48:	e7fe      	b.n	8002f48 <UsageFault_Handler+0x4>

08002f4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f4e:	bf00      	nop
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f5c:	bf00      	nop
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f66:	b480      	push	{r7}
 8002f68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f6a:	bf00      	nop
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f78:	bf00      	nop
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
	...

08002f84 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002f88:	4802      	ldr	r0, [pc, #8]	; (8002f94 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002f8a:	f7fe fe3d 	bl	8001c08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002f8e:	bf00      	nop
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	20000110 	.word	0x20000110

08002f98 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f9c:	4b15      	ldr	r3, [pc, #84]	; (8002ff4 <SystemInit+0x5c>)
 8002f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa2:	4a14      	ldr	r2, [pc, #80]	; (8002ff4 <SystemInit+0x5c>)
 8002fa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002fac:	4b12      	ldr	r3, [pc, #72]	; (8002ff8 <SystemInit+0x60>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a11      	ldr	r2, [pc, #68]	; (8002ff8 <SystemInit+0x60>)
 8002fb2:	f043 0301 	orr.w	r3, r3, #1
 8002fb6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002fb8:	4b0f      	ldr	r3, [pc, #60]	; (8002ff8 <SystemInit+0x60>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002fbe:	4b0e      	ldr	r3, [pc, #56]	; (8002ff8 <SystemInit+0x60>)
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	490d      	ldr	r1, [pc, #52]	; (8002ff8 <SystemInit+0x60>)
 8002fc4:	4b0d      	ldr	r3, [pc, #52]	; (8002ffc <SystemInit+0x64>)
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002fca:	4b0b      	ldr	r3, [pc, #44]	; (8002ff8 <SystemInit+0x60>)
 8002fcc:	4a0c      	ldr	r2, [pc, #48]	; (8003000 <SystemInit+0x68>)
 8002fce:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002fd0:	4b09      	ldr	r3, [pc, #36]	; (8002ff8 <SystemInit+0x60>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a08      	ldr	r2, [pc, #32]	; (8002ff8 <SystemInit+0x60>)
 8002fd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fda:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002fdc:	4b06      	ldr	r3, [pc, #24]	; (8002ff8 <SystemInit+0x60>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002fe2:	4b04      	ldr	r3, [pc, #16]	; (8002ff4 <SystemInit+0x5c>)
 8002fe4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002fe8:	609a      	str	r2, [r3, #8]
#endif
}
 8002fea:	bf00      	nop
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr
 8002ff4:	e000ed00 	.word	0xe000ed00
 8002ff8:	40023800 	.word	0x40023800
 8002ffc:	fef6ffff 	.word	0xfef6ffff
 8003000:	24003010 	.word	0x24003010

08003004 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003004:	f8df d034 	ldr.w	sp, [pc, #52]	; 800303c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003008:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800300a:	e003      	b.n	8003014 <LoopCopyDataInit>

0800300c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800300c:	4b0c      	ldr	r3, [pc, #48]	; (8003040 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800300e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003010:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003012:	3104      	adds	r1, #4

08003014 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003014:	480b      	ldr	r0, [pc, #44]	; (8003044 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003016:	4b0c      	ldr	r3, [pc, #48]	; (8003048 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003018:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800301a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800301c:	d3f6      	bcc.n	800300c <CopyDataInit>
  ldr  r2, =_sbss
 800301e:	4a0b      	ldr	r2, [pc, #44]	; (800304c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003020:	e002      	b.n	8003028 <LoopFillZerobss>

08003022 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003022:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003024:	f842 3b04 	str.w	r3, [r2], #4

08003028 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003028:	4b09      	ldr	r3, [pc, #36]	; (8003050 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800302a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800302c:	d3f9      	bcc.n	8003022 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800302e:	f7ff ffb3 	bl	8002f98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003032:	f000 f811 	bl	8003058 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003036:	f7ff fd57 	bl	8002ae8 <main>
  bx  lr    
 800303a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800303c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8003040:	080030f0 	.word	0x080030f0
  ldr  r0, =_sdata
 8003044:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003048:	20000008 	.word	0x20000008
  ldr  r2, =_sbss
 800304c:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 8003050:	20000150 	.word	0x20000150

08003054 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003054:	e7fe      	b.n	8003054 <ADC_IRQHandler>
	...

08003058 <__libc_init_array>:
 8003058:	b570      	push	{r4, r5, r6, lr}
 800305a:	4e0d      	ldr	r6, [pc, #52]	; (8003090 <__libc_init_array+0x38>)
 800305c:	4c0d      	ldr	r4, [pc, #52]	; (8003094 <__libc_init_array+0x3c>)
 800305e:	1ba4      	subs	r4, r4, r6
 8003060:	10a4      	asrs	r4, r4, #2
 8003062:	2500      	movs	r5, #0
 8003064:	42a5      	cmp	r5, r4
 8003066:	d109      	bne.n	800307c <__libc_init_array+0x24>
 8003068:	4e0b      	ldr	r6, [pc, #44]	; (8003098 <__libc_init_array+0x40>)
 800306a:	4c0c      	ldr	r4, [pc, #48]	; (800309c <__libc_init_array+0x44>)
 800306c:	f000 f820 	bl	80030b0 <_init>
 8003070:	1ba4      	subs	r4, r4, r6
 8003072:	10a4      	asrs	r4, r4, #2
 8003074:	2500      	movs	r5, #0
 8003076:	42a5      	cmp	r5, r4
 8003078:	d105      	bne.n	8003086 <__libc_init_array+0x2e>
 800307a:	bd70      	pop	{r4, r5, r6, pc}
 800307c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003080:	4798      	blx	r3
 8003082:	3501      	adds	r5, #1
 8003084:	e7ee      	b.n	8003064 <__libc_init_array+0xc>
 8003086:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800308a:	4798      	blx	r3
 800308c:	3501      	adds	r5, #1
 800308e:	e7f2      	b.n	8003076 <__libc_init_array+0x1e>
 8003090:	080030e8 	.word	0x080030e8
 8003094:	080030e8 	.word	0x080030e8
 8003098:	080030e8 	.word	0x080030e8
 800309c:	080030ec 	.word	0x080030ec

080030a0 <memset>:
 80030a0:	4402      	add	r2, r0
 80030a2:	4603      	mov	r3, r0
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d100      	bne.n	80030aa <memset+0xa>
 80030a8:	4770      	bx	lr
 80030aa:	f803 1b01 	strb.w	r1, [r3], #1
 80030ae:	e7f9      	b.n	80030a4 <memset+0x4>

080030b0 <_init>:
 80030b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030b2:	bf00      	nop
 80030b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030b6:	bc08      	pop	{r3}
 80030b8:	469e      	mov	lr, r3
 80030ba:	4770      	bx	lr

080030bc <_fini>:
 80030bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030be:	bf00      	nop
 80030c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030c2:	bc08      	pop	{r3}
 80030c4:	469e      	mov	lr, r3
 80030c6:	4770      	bx	lr
