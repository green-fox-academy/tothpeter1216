
Receive_until_endline.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033d0  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003598  08003598  00013598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035b0  080035b0  00020008  2**0
                  CONTENTS
  4 .ARM          00000008  080035b0  080035b0  000135b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080035b8  080035b8  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035b8  080035b8  000135b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035bc  080035bc  000135bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  080035c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  20000008  080035c8  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  080035c8  00020158  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c4fb  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001abd  00000000  00000000  0002c533  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c58  00000000  00000000  0002dff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b70  00000000  00000000  0002ec48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002446a  00000000  00000000  0002f7b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a4c3  00000000  00000000  00053c22  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e58e7  00000000  00000000  0005e0e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001439cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000337c  00000000  00000000  00143a48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000008 	.word	0x20000008
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003580 	.word	0x08003580

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000000c 	.word	0x2000000c
 8000204:	08003580 	.word	0x08003580

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800051c:	2003      	movs	r0, #3
 800051e:	f000 f8d6 	bl	80006ce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000522:	2000      	movs	r0, #0
 8000524:	f002 ff04 	bl	8003330 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000528:	f002 fe74 	bl	8003214 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800052c:	2300      	movs	r3, #0
}
 800052e:	4618      	mov	r0, r3
 8000530:	bd80      	pop	{r7, pc}
	...

08000534 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <HAL_IncTick+0x20>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	461a      	mov	r2, r3
 800053e:	4b06      	ldr	r3, [pc, #24]	; (8000558 <HAL_IncTick+0x24>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4413      	add	r3, r2
 8000544:	4a04      	ldr	r2, [pc, #16]	; (8000558 <HAL_IncTick+0x24>)
 8000546:	6013      	str	r3, [r2, #0]
}
 8000548:	bf00      	nop
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	20000000 	.word	0x20000000
 8000558:	2000002c 	.word	0x2000002c

0800055c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  return uwTick;
 8000560:	4b03      	ldr	r3, [pc, #12]	; (8000570 <HAL_GetTick+0x14>)
 8000562:	681b      	ldr	r3, [r3, #0]
}
 8000564:	4618      	mov	r0, r3
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	2000002c 	.word	0x2000002c

08000574 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	f003 0307 	and.w	r3, r3, #7
 8000582:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000584:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <__NVIC_SetPriorityGrouping+0x40>)
 8000586:	68db      	ldr	r3, [r3, #12]
 8000588:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800058a:	68ba      	ldr	r2, [r7, #8]
 800058c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000590:	4013      	ands	r3, r2
 8000592:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <__NVIC_SetPriorityGrouping+0x44>)
 800059e:	4313      	orrs	r3, r2
 80005a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005a2:	4a04      	ldr	r2, [pc, #16]	; (80005b4 <__NVIC_SetPriorityGrouping+0x40>)
 80005a4:	68bb      	ldr	r3, [r7, #8]
 80005a6:	60d3      	str	r3, [r2, #12]
}
 80005a8:	bf00      	nop
 80005aa:	3714      	adds	r7, #20
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr
 80005b4:	e000ed00 	.word	0xe000ed00
 80005b8:	05fa0000 	.word	0x05fa0000

080005bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005c0:	4b04      	ldr	r3, [pc, #16]	; (80005d4 <__NVIC_GetPriorityGrouping+0x18>)
 80005c2:	68db      	ldr	r3, [r3, #12]
 80005c4:	0a1b      	lsrs	r3, r3, #8
 80005c6:	f003 0307 	and.w	r3, r3, #7
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr
 80005d4:	e000ed00 	.word	0xe000ed00

080005d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	db0b      	blt.n	8000602 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	f003 021f 	and.w	r2, r3, #31
 80005f0:	4907      	ldr	r1, [pc, #28]	; (8000610 <__NVIC_EnableIRQ+0x38>)
 80005f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005f6:	095b      	lsrs	r3, r3, #5
 80005f8:	2001      	movs	r0, #1
 80005fa:	fa00 f202 	lsl.w	r2, r0, r2
 80005fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000602:	bf00      	nop
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	e000e100 	.word	0xe000e100

08000614 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	6039      	str	r1, [r7, #0]
 800061e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000624:	2b00      	cmp	r3, #0
 8000626:	db0a      	blt.n	800063e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	b2da      	uxtb	r2, r3
 800062c:	490c      	ldr	r1, [pc, #48]	; (8000660 <__NVIC_SetPriority+0x4c>)
 800062e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000632:	0112      	lsls	r2, r2, #4
 8000634:	b2d2      	uxtb	r2, r2
 8000636:	440b      	add	r3, r1
 8000638:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800063c:	e00a      	b.n	8000654 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	b2da      	uxtb	r2, r3
 8000642:	4908      	ldr	r1, [pc, #32]	; (8000664 <__NVIC_SetPriority+0x50>)
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	f003 030f 	and.w	r3, r3, #15
 800064a:	3b04      	subs	r3, #4
 800064c:	0112      	lsls	r2, r2, #4
 800064e:	b2d2      	uxtb	r2, r2
 8000650:	440b      	add	r3, r1
 8000652:	761a      	strb	r2, [r3, #24]
}
 8000654:	bf00      	nop
 8000656:	370c      	adds	r7, #12
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	e000e100 	.word	0xe000e100
 8000664:	e000ed00 	.word	0xe000ed00

08000668 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000668:	b480      	push	{r7}
 800066a:	b089      	sub	sp, #36	; 0x24
 800066c:	af00      	add	r7, sp, #0
 800066e:	60f8      	str	r0, [r7, #12]
 8000670:	60b9      	str	r1, [r7, #8]
 8000672:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	f003 0307 	and.w	r3, r3, #7
 800067a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800067c:	69fb      	ldr	r3, [r7, #28]
 800067e:	f1c3 0307 	rsb	r3, r3, #7
 8000682:	2b04      	cmp	r3, #4
 8000684:	bf28      	it	cs
 8000686:	2304      	movcs	r3, #4
 8000688:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800068a:	69fb      	ldr	r3, [r7, #28]
 800068c:	3304      	adds	r3, #4
 800068e:	2b06      	cmp	r3, #6
 8000690:	d902      	bls.n	8000698 <NVIC_EncodePriority+0x30>
 8000692:	69fb      	ldr	r3, [r7, #28]
 8000694:	3b03      	subs	r3, #3
 8000696:	e000      	b.n	800069a <NVIC_EncodePriority+0x32>
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800069c:	f04f 32ff 	mov.w	r2, #4294967295
 80006a0:	69bb      	ldr	r3, [r7, #24]
 80006a2:	fa02 f303 	lsl.w	r3, r2, r3
 80006a6:	43da      	mvns	r2, r3
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	401a      	ands	r2, r3
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006b0:	f04f 31ff 	mov.w	r1, #4294967295
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	fa01 f303 	lsl.w	r3, r1, r3
 80006ba:	43d9      	mvns	r1, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c0:	4313      	orrs	r3, r2
         );
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3724      	adds	r7, #36	; 0x24
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr

080006ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b082      	sub	sp, #8
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	f7ff ff4c 	bl	8000574 <__NVIC_SetPriorityGrouping>
}
 80006dc:	bf00      	nop
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b086      	sub	sp, #24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
 80006f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80006f6:	f7ff ff61 	bl	80005bc <__NVIC_GetPriorityGrouping>
 80006fa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006fc:	687a      	ldr	r2, [r7, #4]
 80006fe:	68b9      	ldr	r1, [r7, #8]
 8000700:	6978      	ldr	r0, [r7, #20]
 8000702:	f7ff ffb1 	bl	8000668 <NVIC_EncodePriority>
 8000706:	4602      	mov	r2, r0
 8000708:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800070c:	4611      	mov	r1, r2
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff ff80 	bl	8000614 <__NVIC_SetPriority>
}
 8000714:	bf00      	nop
 8000716:	3718      	adds	r7, #24
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ff54 	bl	80005d8 <__NVIC_EnableIRQ>
}
 8000730:	bf00      	nop
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000746:	b2db      	uxtb	r3, r3
 8000748:	2b02      	cmp	r3, #2
 800074a:	d004      	beq.n	8000756 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	2280      	movs	r2, #128	; 0x80
 8000750:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000752:	2301      	movs	r3, #1
 8000754:	e00c      	b.n	8000770 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	2205      	movs	r2, #5
 800075a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f022 0201 	bic.w	r2, r2, #1
 800076c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800076e:	2300      	movs	r3, #0
}
 8000770:	4618      	mov	r0, r3
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr

0800077c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800077c:	b480      	push	{r7}
 800077e:	b089      	sub	sp, #36	; 0x24
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000786:	2300      	movs	r3, #0
 8000788:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800078e:	2300      	movs	r3, #0
 8000790:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000792:	2300      	movs	r3, #0
 8000794:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000796:	2300      	movs	r3, #0
 8000798:	61fb      	str	r3, [r7, #28]
 800079a:	e175      	b.n	8000a88 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800079c:	2201      	movs	r2, #1
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	fa02 f303 	lsl.w	r3, r2, r3
 80007a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	697a      	ldr	r2, [r7, #20]
 80007ac:	4013      	ands	r3, r2
 80007ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80007b0:	693a      	ldr	r2, [r7, #16]
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	f040 8164 	bne.w	8000a82 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	685b      	ldr	r3, [r3, #4]
 80007be:	2b02      	cmp	r3, #2
 80007c0:	d003      	beq.n	80007ca <HAL_GPIO_Init+0x4e>
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	685b      	ldr	r3, [r3, #4]
 80007c6:	2b12      	cmp	r3, #18
 80007c8:	d123      	bne.n	8000812 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80007ca:	69fb      	ldr	r3, [r7, #28]
 80007cc:	08da      	lsrs	r2, r3, #3
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	3208      	adds	r2, #8
 80007d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80007d8:	69fb      	ldr	r3, [r7, #28]
 80007da:	f003 0307 	and.w	r3, r3, #7
 80007de:	009b      	lsls	r3, r3, #2
 80007e0:	220f      	movs	r2, #15
 80007e2:	fa02 f303 	lsl.w	r3, r2, r3
 80007e6:	43db      	mvns	r3, r3
 80007e8:	69ba      	ldr	r2, [r7, #24]
 80007ea:	4013      	ands	r3, r2
 80007ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	691a      	ldr	r2, [r3, #16]
 80007f2:	69fb      	ldr	r3, [r7, #28]
 80007f4:	f003 0307 	and.w	r3, r3, #7
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	fa02 f303 	lsl.w	r3, r2, r3
 80007fe:	69ba      	ldr	r2, [r7, #24]
 8000800:	4313      	orrs	r3, r2
 8000802:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000804:	69fb      	ldr	r3, [r7, #28]
 8000806:	08da      	lsrs	r2, r3, #3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	3208      	adds	r2, #8
 800080c:	69b9      	ldr	r1, [r7, #24]
 800080e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000818:	69fb      	ldr	r3, [r7, #28]
 800081a:	005b      	lsls	r3, r3, #1
 800081c:	2203      	movs	r2, #3
 800081e:	fa02 f303 	lsl.w	r3, r2, r3
 8000822:	43db      	mvns	r3, r3
 8000824:	69ba      	ldr	r2, [r7, #24]
 8000826:	4013      	ands	r3, r2
 8000828:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	f003 0203 	and.w	r2, r3, #3
 8000832:	69fb      	ldr	r3, [r7, #28]
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	fa02 f303 	lsl.w	r3, r2, r3
 800083a:	69ba      	ldr	r2, [r7, #24]
 800083c:	4313      	orrs	r3, r2
 800083e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	69ba      	ldr	r2, [r7, #24]
 8000844:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d00b      	beq.n	8000866 <HAL_GPIO_Init+0xea>
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	2b02      	cmp	r3, #2
 8000854:	d007      	beq.n	8000866 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800085a:	2b11      	cmp	r3, #17
 800085c:	d003      	beq.n	8000866 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	2b12      	cmp	r3, #18
 8000864:	d130      	bne.n	80008c8 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	689b      	ldr	r3, [r3, #8]
 800086a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800086c:	69fb      	ldr	r3, [r7, #28]
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	2203      	movs	r2, #3
 8000872:	fa02 f303 	lsl.w	r3, r2, r3
 8000876:	43db      	mvns	r3, r3
 8000878:	69ba      	ldr	r2, [r7, #24]
 800087a:	4013      	ands	r3, r2
 800087c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	68da      	ldr	r2, [r3, #12]
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	fa02 f303 	lsl.w	r3, r2, r3
 800088a:	69ba      	ldr	r2, [r7, #24]
 800088c:	4313      	orrs	r3, r2
 800088e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	69ba      	ldr	r2, [r7, #24]
 8000894:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800089c:	2201      	movs	r2, #1
 800089e:	69fb      	ldr	r3, [r7, #28]
 80008a0:	fa02 f303 	lsl.w	r3, r2, r3
 80008a4:	43db      	mvns	r3, r3
 80008a6:	69ba      	ldr	r2, [r7, #24]
 80008a8:	4013      	ands	r3, r2
 80008aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	091b      	lsrs	r3, r3, #4
 80008b2:	f003 0201 	and.w	r2, r3, #1
 80008b6:	69fb      	ldr	r3, [r7, #28]
 80008b8:	fa02 f303 	lsl.w	r3, r2, r3
 80008bc:	69ba      	ldr	r2, [r7, #24]
 80008be:	4313      	orrs	r3, r2
 80008c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	69ba      	ldr	r2, [r7, #24]
 80008c6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80008ce:	69fb      	ldr	r3, [r7, #28]
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	2203      	movs	r2, #3
 80008d4:	fa02 f303 	lsl.w	r3, r2, r3
 80008d8:	43db      	mvns	r3, r3
 80008da:	69ba      	ldr	r2, [r7, #24]
 80008dc:	4013      	ands	r3, r2
 80008de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	689a      	ldr	r2, [r3, #8]
 80008e4:	69fb      	ldr	r3, [r7, #28]
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ec:	69ba      	ldr	r2, [r7, #24]
 80008ee:	4313      	orrs	r3, r2
 80008f0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	69ba      	ldr	r2, [r7, #24]
 80008f6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000900:	2b00      	cmp	r3, #0
 8000902:	f000 80be 	beq.w	8000a82 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000906:	4b65      	ldr	r3, [pc, #404]	; (8000a9c <HAL_GPIO_Init+0x320>)
 8000908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090a:	4a64      	ldr	r2, [pc, #400]	; (8000a9c <HAL_GPIO_Init+0x320>)
 800090c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000910:	6453      	str	r3, [r2, #68]	; 0x44
 8000912:	4b62      	ldr	r3, [pc, #392]	; (8000a9c <HAL_GPIO_Init+0x320>)
 8000914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800091e:	4a60      	ldr	r2, [pc, #384]	; (8000aa0 <HAL_GPIO_Init+0x324>)
 8000920:	69fb      	ldr	r3, [r7, #28]
 8000922:	089b      	lsrs	r3, r3, #2
 8000924:	3302      	adds	r3, #2
 8000926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800092a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800092c:	69fb      	ldr	r3, [r7, #28]
 800092e:	f003 0303 	and.w	r3, r3, #3
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	220f      	movs	r2, #15
 8000936:	fa02 f303 	lsl.w	r3, r2, r3
 800093a:	43db      	mvns	r3, r3
 800093c:	69ba      	ldr	r2, [r7, #24]
 800093e:	4013      	ands	r3, r2
 8000940:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4a57      	ldr	r2, [pc, #348]	; (8000aa4 <HAL_GPIO_Init+0x328>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d037      	beq.n	80009ba <HAL_GPIO_Init+0x23e>
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4a56      	ldr	r2, [pc, #344]	; (8000aa8 <HAL_GPIO_Init+0x32c>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d031      	beq.n	80009b6 <HAL_GPIO_Init+0x23a>
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4a55      	ldr	r2, [pc, #340]	; (8000aac <HAL_GPIO_Init+0x330>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d02b      	beq.n	80009b2 <HAL_GPIO_Init+0x236>
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4a54      	ldr	r2, [pc, #336]	; (8000ab0 <HAL_GPIO_Init+0x334>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d025      	beq.n	80009ae <HAL_GPIO_Init+0x232>
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4a53      	ldr	r2, [pc, #332]	; (8000ab4 <HAL_GPIO_Init+0x338>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d01f      	beq.n	80009aa <HAL_GPIO_Init+0x22e>
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4a52      	ldr	r2, [pc, #328]	; (8000ab8 <HAL_GPIO_Init+0x33c>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d019      	beq.n	80009a6 <HAL_GPIO_Init+0x22a>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4a51      	ldr	r2, [pc, #324]	; (8000abc <HAL_GPIO_Init+0x340>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d013      	beq.n	80009a2 <HAL_GPIO_Init+0x226>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4a50      	ldr	r2, [pc, #320]	; (8000ac0 <HAL_GPIO_Init+0x344>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d00d      	beq.n	800099e <HAL_GPIO_Init+0x222>
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4a4f      	ldr	r2, [pc, #316]	; (8000ac4 <HAL_GPIO_Init+0x348>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d007      	beq.n	800099a <HAL_GPIO_Init+0x21e>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4a4e      	ldr	r2, [pc, #312]	; (8000ac8 <HAL_GPIO_Init+0x34c>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d101      	bne.n	8000996 <HAL_GPIO_Init+0x21a>
 8000992:	2309      	movs	r3, #9
 8000994:	e012      	b.n	80009bc <HAL_GPIO_Init+0x240>
 8000996:	230a      	movs	r3, #10
 8000998:	e010      	b.n	80009bc <HAL_GPIO_Init+0x240>
 800099a:	2308      	movs	r3, #8
 800099c:	e00e      	b.n	80009bc <HAL_GPIO_Init+0x240>
 800099e:	2307      	movs	r3, #7
 80009a0:	e00c      	b.n	80009bc <HAL_GPIO_Init+0x240>
 80009a2:	2306      	movs	r3, #6
 80009a4:	e00a      	b.n	80009bc <HAL_GPIO_Init+0x240>
 80009a6:	2305      	movs	r3, #5
 80009a8:	e008      	b.n	80009bc <HAL_GPIO_Init+0x240>
 80009aa:	2304      	movs	r3, #4
 80009ac:	e006      	b.n	80009bc <HAL_GPIO_Init+0x240>
 80009ae:	2303      	movs	r3, #3
 80009b0:	e004      	b.n	80009bc <HAL_GPIO_Init+0x240>
 80009b2:	2302      	movs	r3, #2
 80009b4:	e002      	b.n	80009bc <HAL_GPIO_Init+0x240>
 80009b6:	2301      	movs	r3, #1
 80009b8:	e000      	b.n	80009bc <HAL_GPIO_Init+0x240>
 80009ba:	2300      	movs	r3, #0
 80009bc:	69fa      	ldr	r2, [r7, #28]
 80009be:	f002 0203 	and.w	r2, r2, #3
 80009c2:	0092      	lsls	r2, r2, #2
 80009c4:	4093      	lsls	r3, r2
 80009c6:	69ba      	ldr	r2, [r7, #24]
 80009c8:	4313      	orrs	r3, r2
 80009ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80009cc:	4934      	ldr	r1, [pc, #208]	; (8000aa0 <HAL_GPIO_Init+0x324>)
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	089b      	lsrs	r3, r3, #2
 80009d2:	3302      	adds	r3, #2
 80009d4:	69ba      	ldr	r2, [r7, #24]
 80009d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009da:	4b3c      	ldr	r3, [pc, #240]	; (8000acc <HAL_GPIO_Init+0x350>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009e0:	693b      	ldr	r3, [r7, #16]
 80009e2:	43db      	mvns	r3, r3
 80009e4:	69ba      	ldr	r2, [r7, #24]
 80009e6:	4013      	ands	r3, r2
 80009e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d003      	beq.n	80009fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80009f6:	69ba      	ldr	r2, [r7, #24]
 80009f8:	693b      	ldr	r3, [r7, #16]
 80009fa:	4313      	orrs	r3, r2
 80009fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80009fe:	4a33      	ldr	r2, [pc, #204]	; (8000acc <HAL_GPIO_Init+0x350>)
 8000a00:	69bb      	ldr	r3, [r7, #24]
 8000a02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a04:	4b31      	ldr	r3, [pc, #196]	; (8000acc <HAL_GPIO_Init+0x350>)
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a0a:	693b      	ldr	r3, [r7, #16]
 8000a0c:	43db      	mvns	r3, r3
 8000a0e:	69ba      	ldr	r2, [r7, #24]
 8000a10:	4013      	ands	r3, r2
 8000a12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d003      	beq.n	8000a28 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000a20:	69ba      	ldr	r2, [r7, #24]
 8000a22:	693b      	ldr	r3, [r7, #16]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a28:	4a28      	ldr	r2, [pc, #160]	; (8000acc <HAL_GPIO_Init+0x350>)
 8000a2a:	69bb      	ldr	r3, [r7, #24]
 8000a2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a2e:	4b27      	ldr	r3, [pc, #156]	; (8000acc <HAL_GPIO_Init+0x350>)
 8000a30:	689b      	ldr	r3, [r3, #8]
 8000a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	43db      	mvns	r3, r3
 8000a38:	69ba      	ldr	r2, [r7, #24]
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d003      	beq.n	8000a52 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000a4a:	69ba      	ldr	r2, [r7, #24]
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a52:	4a1e      	ldr	r2, [pc, #120]	; (8000acc <HAL_GPIO_Init+0x350>)
 8000a54:	69bb      	ldr	r3, [r7, #24]
 8000a56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a58:	4b1c      	ldr	r3, [pc, #112]	; (8000acc <HAL_GPIO_Init+0x350>)
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a5e:	693b      	ldr	r3, [r7, #16]
 8000a60:	43db      	mvns	r3, r3
 8000a62:	69ba      	ldr	r2, [r7, #24]
 8000a64:	4013      	ands	r3, r2
 8000a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d003      	beq.n	8000a7c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000a74:	69ba      	ldr	r2, [r7, #24]
 8000a76:	693b      	ldr	r3, [r7, #16]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000a7c:	4a13      	ldr	r2, [pc, #76]	; (8000acc <HAL_GPIO_Init+0x350>)
 8000a7e:	69bb      	ldr	r3, [r7, #24]
 8000a80:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	3301      	adds	r3, #1
 8000a86:	61fb      	str	r3, [r7, #28]
 8000a88:	69fb      	ldr	r3, [r7, #28]
 8000a8a:	2b0f      	cmp	r3, #15
 8000a8c:	f67f ae86 	bls.w	800079c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000a90:	bf00      	nop
 8000a92:	3724      	adds	r7, #36	; 0x24
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40013800 	.word	0x40013800
 8000aa4:	40020000 	.word	0x40020000
 8000aa8:	40020400 	.word	0x40020400
 8000aac:	40020800 	.word	0x40020800
 8000ab0:	40020c00 	.word	0x40020c00
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	40021400 	.word	0x40021400
 8000abc:	40021800 	.word	0x40021800
 8000ac0:	40021c00 	.word	0x40021c00
 8000ac4:	40022000 	.word	0x40022000
 8000ac8:	40022400 	.word	0x40022400
 8000acc:	40013c00 	.word	0x40013c00

08000ad0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d101      	bne.n	8000ae6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e25c      	b.n	8000fa0 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	f000 8087 	beq.w	8000c02 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000af4:	4b96      	ldr	r3, [pc, #600]	; (8000d50 <HAL_RCC_OscConfig+0x280>)
 8000af6:	689b      	ldr	r3, [r3, #8]
 8000af8:	f003 030c 	and.w	r3, r3, #12
 8000afc:	2b04      	cmp	r3, #4
 8000afe:	d00c      	beq.n	8000b1a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b00:	4b93      	ldr	r3, [pc, #588]	; (8000d50 <HAL_RCC_OscConfig+0x280>)
 8000b02:	689b      	ldr	r3, [r3, #8]
 8000b04:	f003 030c 	and.w	r3, r3, #12
 8000b08:	2b08      	cmp	r3, #8
 8000b0a:	d112      	bne.n	8000b32 <HAL_RCC_OscConfig+0x62>
 8000b0c:	4b90      	ldr	r3, [pc, #576]	; (8000d50 <HAL_RCC_OscConfig+0x280>)
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000b18:	d10b      	bne.n	8000b32 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b1a:	4b8d      	ldr	r3, [pc, #564]	; (8000d50 <HAL_RCC_OscConfig+0x280>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d06c      	beq.n	8000c00 <HAL_RCC_OscConfig+0x130>
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d168      	bne.n	8000c00 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	e236      	b.n	8000fa0 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b3a:	d106      	bne.n	8000b4a <HAL_RCC_OscConfig+0x7a>
 8000b3c:	4b84      	ldr	r3, [pc, #528]	; (8000d50 <HAL_RCC_OscConfig+0x280>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a83      	ldr	r2, [pc, #524]	; (8000d50 <HAL_RCC_OscConfig+0x280>)
 8000b42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b46:	6013      	str	r3, [r2, #0]
 8000b48:	e02e      	b.n	8000ba8 <HAL_RCC_OscConfig+0xd8>
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d10c      	bne.n	8000b6c <HAL_RCC_OscConfig+0x9c>
 8000b52:	4b7f      	ldr	r3, [pc, #508]	; (8000d50 <HAL_RCC_OscConfig+0x280>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a7e      	ldr	r2, [pc, #504]	; (8000d50 <HAL_RCC_OscConfig+0x280>)
 8000b58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b5c:	6013      	str	r3, [r2, #0]
 8000b5e:	4b7c      	ldr	r3, [pc, #496]	; (8000d50 <HAL_RCC_OscConfig+0x280>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a7b      	ldr	r2, [pc, #492]	; (8000d50 <HAL_RCC_OscConfig+0x280>)
 8000b64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b68:	6013      	str	r3, [r2, #0]
 8000b6a:	e01d      	b.n	8000ba8 <HAL_RCC_OscConfig+0xd8>
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b74:	d10c      	bne.n	8000b90 <HAL_RCC_OscConfig+0xc0>
 8000b76:	4b76      	ldr	r3, [pc, #472]	; (8000d50 <HAL_RCC_OscConfig+0x280>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a75      	ldr	r2, [pc, #468]	; (8000d50 <HAL_RCC_OscConfig+0x280>)
 8000b7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b80:	6013      	str	r3, [r2, #0]
 8000b82:	4b73      	ldr	r3, [pc, #460]	; (8000d50 <HAL_RCC_OscConfig+0x280>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a72      	ldr	r2, [pc, #456]	; (8000d50 <HAL_RCC_OscConfig+0x280>)
 8000b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b8c:	6013      	str	r3, [r2, #0]
 8000b8e:	e00b      	b.n	8000ba8 <HAL_RCC_OscConfig+0xd8>
 8000b90:	4b6f      	ldr	r3, [pc, #444]	; (8000d50 <HAL_RCC_OscConfig+0x280>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a6e      	ldr	r2, [pc, #440]	; (8000d50 <HAL_RCC_OscConfig+0x280>)
 8000b96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b9a:	6013      	str	r3, [r2, #0]
 8000b9c:	4b6c      	ldr	r3, [pc, #432]	; (8000d50 <HAL_RCC_OscConfig+0x280>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a6b      	ldr	r2, [pc, #428]	; (8000d50 <HAL_RCC_OscConfig+0x280>)
 8000ba2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ba6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d013      	beq.n	8000bd8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000bb0:	f7ff fcd4 	bl	800055c <HAL_GetTick>
 8000bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bb6:	e008      	b.n	8000bca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bb8:	f7ff fcd0 	bl	800055c <HAL_GetTick>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	2b64      	cmp	r3, #100	; 0x64
 8000bc4:	d901      	bls.n	8000bca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	e1ea      	b.n	8000fa0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bca:	4b61      	ldr	r3, [pc, #388]	; (8000d50 <HAL_RCC_OscConfig+0x280>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d0f0      	beq.n	8000bb8 <HAL_RCC_OscConfig+0xe8>
 8000bd6:	e014      	b.n	8000c02 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000bd8:	f7ff fcc0 	bl	800055c <HAL_GetTick>
 8000bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bde:	e008      	b.n	8000bf2 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000be0:	f7ff fcbc 	bl	800055c <HAL_GetTick>
 8000be4:	4602      	mov	r2, r0
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	2b64      	cmp	r3, #100	; 0x64
 8000bec:	d901      	bls.n	8000bf2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000bee:	2303      	movs	r3, #3
 8000bf0:	e1d6      	b.n	8000fa0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bf2:	4b57      	ldr	r3, [pc, #348]	; (8000d50 <HAL_RCC_OscConfig+0x280>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d1f0      	bne.n	8000be0 <HAL_RCC_OscConfig+0x110>
 8000bfe:	e000      	b.n	8000c02 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f003 0302 	and.w	r3, r3, #2
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d069      	beq.n	8000ce2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c0e:	4b50      	ldr	r3, [pc, #320]	; (8000d50 <HAL_RCC_OscConfig+0x280>)
 8000c10:	689b      	ldr	r3, [r3, #8]
 8000c12:	f003 030c 	and.w	r3, r3, #12
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d00b      	beq.n	8000c32 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c1a:	4b4d      	ldr	r3, [pc, #308]	; (8000d50 <HAL_RCC_OscConfig+0x280>)
 8000c1c:	689b      	ldr	r3, [r3, #8]
 8000c1e:	f003 030c 	and.w	r3, r3, #12
 8000c22:	2b08      	cmp	r3, #8
 8000c24:	d11c      	bne.n	8000c60 <HAL_RCC_OscConfig+0x190>
 8000c26:	4b4a      	ldr	r3, [pc, #296]	; (8000d50 <HAL_RCC_OscConfig+0x280>)
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d116      	bne.n	8000c60 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c32:	4b47      	ldr	r3, [pc, #284]	; (8000d50 <HAL_RCC_OscConfig+0x280>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f003 0302 	and.w	r3, r3, #2
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d005      	beq.n	8000c4a <HAL_RCC_OscConfig+0x17a>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	68db      	ldr	r3, [r3, #12]
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d001      	beq.n	8000c4a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
 8000c48:	e1aa      	b.n	8000fa0 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c4a:	4b41      	ldr	r3, [pc, #260]	; (8000d50 <HAL_RCC_OscConfig+0x280>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	691b      	ldr	r3, [r3, #16]
 8000c56:	00db      	lsls	r3, r3, #3
 8000c58:	493d      	ldr	r1, [pc, #244]	; (8000d50 <HAL_RCC_OscConfig+0x280>)
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c5e:	e040      	b.n	8000ce2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d023      	beq.n	8000cb0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c68:	4b39      	ldr	r3, [pc, #228]	; (8000d50 <HAL_RCC_OscConfig+0x280>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a38      	ldr	r2, [pc, #224]	; (8000d50 <HAL_RCC_OscConfig+0x280>)
 8000c6e:	f043 0301 	orr.w	r3, r3, #1
 8000c72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c74:	f7ff fc72 	bl	800055c <HAL_GetTick>
 8000c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c7a:	e008      	b.n	8000c8e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c7c:	f7ff fc6e 	bl	800055c <HAL_GetTick>
 8000c80:	4602      	mov	r2, r0
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	d901      	bls.n	8000c8e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	e188      	b.n	8000fa0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c8e:	4b30      	ldr	r3, [pc, #192]	; (8000d50 <HAL_RCC_OscConfig+0x280>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f003 0302 	and.w	r3, r3, #2
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d0f0      	beq.n	8000c7c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c9a:	4b2d      	ldr	r3, [pc, #180]	; (8000d50 <HAL_RCC_OscConfig+0x280>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	691b      	ldr	r3, [r3, #16]
 8000ca6:	00db      	lsls	r3, r3, #3
 8000ca8:	4929      	ldr	r1, [pc, #164]	; (8000d50 <HAL_RCC_OscConfig+0x280>)
 8000caa:	4313      	orrs	r3, r2
 8000cac:	600b      	str	r3, [r1, #0]
 8000cae:	e018      	b.n	8000ce2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cb0:	4b27      	ldr	r3, [pc, #156]	; (8000d50 <HAL_RCC_OscConfig+0x280>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a26      	ldr	r2, [pc, #152]	; (8000d50 <HAL_RCC_OscConfig+0x280>)
 8000cb6:	f023 0301 	bic.w	r3, r3, #1
 8000cba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cbc:	f7ff fc4e 	bl	800055c <HAL_GetTick>
 8000cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cc2:	e008      	b.n	8000cd6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cc4:	f7ff fc4a 	bl	800055c <HAL_GetTick>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	2b02      	cmp	r3, #2
 8000cd0:	d901      	bls.n	8000cd6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	e164      	b.n	8000fa0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cd6:	4b1e      	ldr	r3, [pc, #120]	; (8000d50 <HAL_RCC_OscConfig+0x280>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f003 0302 	and.w	r3, r3, #2
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d1f0      	bne.n	8000cc4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f003 0308 	and.w	r3, r3, #8
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d038      	beq.n	8000d60 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	695b      	ldr	r3, [r3, #20]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d019      	beq.n	8000d2a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000cf6:	4b16      	ldr	r3, [pc, #88]	; (8000d50 <HAL_RCC_OscConfig+0x280>)
 8000cf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000cfa:	4a15      	ldr	r2, [pc, #84]	; (8000d50 <HAL_RCC_OscConfig+0x280>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d02:	f7ff fc2b 	bl	800055c <HAL_GetTick>
 8000d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d08:	e008      	b.n	8000d1c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d0a:	f7ff fc27 	bl	800055c <HAL_GetTick>
 8000d0e:	4602      	mov	r2, r0
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	1ad3      	subs	r3, r2, r3
 8000d14:	2b02      	cmp	r3, #2
 8000d16:	d901      	bls.n	8000d1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	e141      	b.n	8000fa0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <HAL_RCC_OscConfig+0x280>)
 8000d1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d20:	f003 0302 	and.w	r3, r3, #2
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d0f0      	beq.n	8000d0a <HAL_RCC_OscConfig+0x23a>
 8000d28:	e01a      	b.n	8000d60 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d2a:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <HAL_RCC_OscConfig+0x280>)
 8000d2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d2e:	4a08      	ldr	r2, [pc, #32]	; (8000d50 <HAL_RCC_OscConfig+0x280>)
 8000d30:	f023 0301 	bic.w	r3, r3, #1
 8000d34:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d36:	f7ff fc11 	bl	800055c <HAL_GetTick>
 8000d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d3c:	e00a      	b.n	8000d54 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d3e:	f7ff fc0d 	bl	800055c <HAL_GetTick>
 8000d42:	4602      	mov	r2, r0
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	1ad3      	subs	r3, r2, r3
 8000d48:	2b02      	cmp	r3, #2
 8000d4a:	d903      	bls.n	8000d54 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	e127      	b.n	8000fa0 <HAL_RCC_OscConfig+0x4d0>
 8000d50:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d54:	4b94      	ldr	r3, [pc, #592]	; (8000fa8 <HAL_RCC_OscConfig+0x4d8>)
 8000d56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d58:	f003 0302 	and.w	r3, r3, #2
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d1ee      	bne.n	8000d3e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f003 0304 	and.w	r3, r3, #4
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	f000 80a4 	beq.w	8000eb6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d6e:	4b8e      	ldr	r3, [pc, #568]	; (8000fa8 <HAL_RCC_OscConfig+0x4d8>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d10d      	bne.n	8000d96 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d7a:	4b8b      	ldr	r3, [pc, #556]	; (8000fa8 <HAL_RCC_OscConfig+0x4d8>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	4a8a      	ldr	r2, [pc, #552]	; (8000fa8 <HAL_RCC_OscConfig+0x4d8>)
 8000d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d84:	6413      	str	r3, [r2, #64]	; 0x40
 8000d86:	4b88      	ldr	r3, [pc, #544]	; (8000fa8 <HAL_RCC_OscConfig+0x4d8>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000d92:	2301      	movs	r3, #1
 8000d94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000d96:	4b85      	ldr	r3, [pc, #532]	; (8000fac <HAL_RCC_OscConfig+0x4dc>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d118      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8000da2:	4b82      	ldr	r3, [pc, #520]	; (8000fac <HAL_RCC_OscConfig+0x4dc>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a81      	ldr	r2, [pc, #516]	; (8000fac <HAL_RCC_OscConfig+0x4dc>)
 8000da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000dae:	f7ff fbd5 	bl	800055c <HAL_GetTick>
 8000db2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000db4:	e008      	b.n	8000dc8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000db6:	f7ff fbd1 	bl	800055c <HAL_GetTick>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	1ad3      	subs	r3, r2, r3
 8000dc0:	2b64      	cmp	r3, #100	; 0x64
 8000dc2:	d901      	bls.n	8000dc8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	e0eb      	b.n	8000fa0 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000dc8:	4b78      	ldr	r3, [pc, #480]	; (8000fac <HAL_RCC_OscConfig+0x4dc>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d0f0      	beq.n	8000db6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d106      	bne.n	8000dea <HAL_RCC_OscConfig+0x31a>
 8000ddc:	4b72      	ldr	r3, [pc, #456]	; (8000fa8 <HAL_RCC_OscConfig+0x4d8>)
 8000dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000de0:	4a71      	ldr	r2, [pc, #452]	; (8000fa8 <HAL_RCC_OscConfig+0x4d8>)
 8000de2:	f043 0301 	orr.w	r3, r3, #1
 8000de6:	6713      	str	r3, [r2, #112]	; 0x70
 8000de8:	e02d      	b.n	8000e46 <HAL_RCC_OscConfig+0x376>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d10c      	bne.n	8000e0c <HAL_RCC_OscConfig+0x33c>
 8000df2:	4b6d      	ldr	r3, [pc, #436]	; (8000fa8 <HAL_RCC_OscConfig+0x4d8>)
 8000df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000df6:	4a6c      	ldr	r2, [pc, #432]	; (8000fa8 <HAL_RCC_OscConfig+0x4d8>)
 8000df8:	f023 0301 	bic.w	r3, r3, #1
 8000dfc:	6713      	str	r3, [r2, #112]	; 0x70
 8000dfe:	4b6a      	ldr	r3, [pc, #424]	; (8000fa8 <HAL_RCC_OscConfig+0x4d8>)
 8000e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e02:	4a69      	ldr	r2, [pc, #420]	; (8000fa8 <HAL_RCC_OscConfig+0x4d8>)
 8000e04:	f023 0304 	bic.w	r3, r3, #4
 8000e08:	6713      	str	r3, [r2, #112]	; 0x70
 8000e0a:	e01c      	b.n	8000e46 <HAL_RCC_OscConfig+0x376>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	2b05      	cmp	r3, #5
 8000e12:	d10c      	bne.n	8000e2e <HAL_RCC_OscConfig+0x35e>
 8000e14:	4b64      	ldr	r3, [pc, #400]	; (8000fa8 <HAL_RCC_OscConfig+0x4d8>)
 8000e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e18:	4a63      	ldr	r2, [pc, #396]	; (8000fa8 <HAL_RCC_OscConfig+0x4d8>)
 8000e1a:	f043 0304 	orr.w	r3, r3, #4
 8000e1e:	6713      	str	r3, [r2, #112]	; 0x70
 8000e20:	4b61      	ldr	r3, [pc, #388]	; (8000fa8 <HAL_RCC_OscConfig+0x4d8>)
 8000e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e24:	4a60      	ldr	r2, [pc, #384]	; (8000fa8 <HAL_RCC_OscConfig+0x4d8>)
 8000e26:	f043 0301 	orr.w	r3, r3, #1
 8000e2a:	6713      	str	r3, [r2, #112]	; 0x70
 8000e2c:	e00b      	b.n	8000e46 <HAL_RCC_OscConfig+0x376>
 8000e2e:	4b5e      	ldr	r3, [pc, #376]	; (8000fa8 <HAL_RCC_OscConfig+0x4d8>)
 8000e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e32:	4a5d      	ldr	r2, [pc, #372]	; (8000fa8 <HAL_RCC_OscConfig+0x4d8>)
 8000e34:	f023 0301 	bic.w	r3, r3, #1
 8000e38:	6713      	str	r3, [r2, #112]	; 0x70
 8000e3a:	4b5b      	ldr	r3, [pc, #364]	; (8000fa8 <HAL_RCC_OscConfig+0x4d8>)
 8000e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e3e:	4a5a      	ldr	r2, [pc, #360]	; (8000fa8 <HAL_RCC_OscConfig+0x4d8>)
 8000e40:	f023 0304 	bic.w	r3, r3, #4
 8000e44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d015      	beq.n	8000e7a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e4e:	f7ff fb85 	bl	800055c <HAL_GetTick>
 8000e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e54:	e00a      	b.n	8000e6c <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e56:	f7ff fb81 	bl	800055c <HAL_GetTick>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d901      	bls.n	8000e6c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	e099      	b.n	8000fa0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e6c:	4b4e      	ldr	r3, [pc, #312]	; (8000fa8 <HAL_RCC_OscConfig+0x4d8>)
 8000e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e70:	f003 0302 	and.w	r3, r3, #2
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d0ee      	beq.n	8000e56 <HAL_RCC_OscConfig+0x386>
 8000e78:	e014      	b.n	8000ea4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e7a:	f7ff fb6f 	bl	800055c <HAL_GetTick>
 8000e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e80:	e00a      	b.n	8000e98 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e82:	f7ff fb6b 	bl	800055c <HAL_GetTick>
 8000e86:	4602      	mov	r2, r0
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d901      	bls.n	8000e98 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8000e94:	2303      	movs	r3, #3
 8000e96:	e083      	b.n	8000fa0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e98:	4b43      	ldr	r3, [pc, #268]	; (8000fa8 <HAL_RCC_OscConfig+0x4d8>)
 8000e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e9c:	f003 0302 	and.w	r3, r3, #2
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d1ee      	bne.n	8000e82 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000ea4:	7dfb      	ldrb	r3, [r7, #23]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d105      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000eaa:	4b3f      	ldr	r3, [pc, #252]	; (8000fa8 <HAL_RCC_OscConfig+0x4d8>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	4a3e      	ldr	r2, [pc, #248]	; (8000fa8 <HAL_RCC_OscConfig+0x4d8>)
 8000eb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000eb4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	699b      	ldr	r3, [r3, #24]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d06f      	beq.n	8000f9e <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ebe:	4b3a      	ldr	r3, [pc, #232]	; (8000fa8 <HAL_RCC_OscConfig+0x4d8>)
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	f003 030c 	and.w	r3, r3, #12
 8000ec6:	2b08      	cmp	r3, #8
 8000ec8:	d067      	beq.n	8000f9a <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	699b      	ldr	r3, [r3, #24]
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	d149      	bne.n	8000f66 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ed2:	4b35      	ldr	r3, [pc, #212]	; (8000fa8 <HAL_RCC_OscConfig+0x4d8>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a34      	ldr	r2, [pc, #208]	; (8000fa8 <HAL_RCC_OscConfig+0x4d8>)
 8000ed8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000edc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ede:	f7ff fb3d 	bl	800055c <HAL_GetTick>
 8000ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ee4:	e008      	b.n	8000ef8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ee6:	f7ff fb39 	bl	800055c <HAL_GetTick>
 8000eea:	4602      	mov	r2, r0
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	1ad3      	subs	r3, r2, r3
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d901      	bls.n	8000ef8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	e053      	b.n	8000fa0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ef8:	4b2b      	ldr	r3, [pc, #172]	; (8000fa8 <HAL_RCC_OscConfig+0x4d8>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d1f0      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	69da      	ldr	r2, [r3, #28]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6a1b      	ldr	r3, [r3, #32]
 8000f0c:	431a      	orrs	r2, r3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f12:	019b      	lsls	r3, r3, #6
 8000f14:	431a      	orrs	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f1a:	085b      	lsrs	r3, r3, #1
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	041b      	lsls	r3, r3, #16
 8000f20:	431a      	orrs	r2, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f26:	061b      	lsls	r3, r3, #24
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	4a1f      	ldr	r2, [pc, #124]	; (8000fa8 <HAL_RCC_OscConfig+0x4d8>)
 8000f2c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000f30:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f32:	4b1d      	ldr	r3, [pc, #116]	; (8000fa8 <HAL_RCC_OscConfig+0x4d8>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a1c      	ldr	r2, [pc, #112]	; (8000fa8 <HAL_RCC_OscConfig+0x4d8>)
 8000f38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f3e:	f7ff fb0d 	bl	800055c <HAL_GetTick>
 8000f42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f44:	e008      	b.n	8000f58 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f46:	f7ff fb09 	bl	800055c <HAL_GetTick>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	1ad3      	subs	r3, r2, r3
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d901      	bls.n	8000f58 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8000f54:	2303      	movs	r3, #3
 8000f56:	e023      	b.n	8000fa0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f58:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <HAL_RCC_OscConfig+0x4d8>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d0f0      	beq.n	8000f46 <HAL_RCC_OscConfig+0x476>
 8000f64:	e01b      	b.n	8000f9e <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f66:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <HAL_RCC_OscConfig+0x4d8>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a0f      	ldr	r2, [pc, #60]	; (8000fa8 <HAL_RCC_OscConfig+0x4d8>)
 8000f6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f72:	f7ff faf3 	bl	800055c <HAL_GetTick>
 8000f76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f78:	e008      	b.n	8000f8c <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f7a:	f7ff faef 	bl	800055c <HAL_GetTick>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d901      	bls.n	8000f8c <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	e009      	b.n	8000fa0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <HAL_RCC_OscConfig+0x4d8>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d1f0      	bne.n	8000f7a <HAL_RCC_OscConfig+0x4aa>
 8000f98:	e001      	b.n	8000f9e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e000      	b.n	8000fa0 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8000f9e:	2300      	movs	r3, #0
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3718      	adds	r7, #24
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	40007000 	.word	0x40007000

08000fb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d101      	bne.n	8000fc8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e0ce      	b.n	8001166 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000fc8:	4b69      	ldr	r3, [pc, #420]	; (8001170 <HAL_RCC_ClockConfig+0x1c0>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f003 030f 	and.w	r3, r3, #15
 8000fd0:	683a      	ldr	r2, [r7, #0]
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d910      	bls.n	8000ff8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fd6:	4b66      	ldr	r3, [pc, #408]	; (8001170 <HAL_RCC_ClockConfig+0x1c0>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f023 020f 	bic.w	r2, r3, #15
 8000fde:	4964      	ldr	r1, [pc, #400]	; (8001170 <HAL_RCC_ClockConfig+0x1c0>)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fe6:	4b62      	ldr	r3, [pc, #392]	; (8001170 <HAL_RCC_ClockConfig+0x1c0>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f003 030f 	and.w	r3, r3, #15
 8000fee:	683a      	ldr	r2, [r7, #0]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d001      	beq.n	8000ff8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e0b6      	b.n	8001166 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f003 0302 	and.w	r3, r3, #2
 8001000:	2b00      	cmp	r3, #0
 8001002:	d020      	beq.n	8001046 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f003 0304 	and.w	r3, r3, #4
 800100c:	2b00      	cmp	r3, #0
 800100e:	d005      	beq.n	800101c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001010:	4b58      	ldr	r3, [pc, #352]	; (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	4a57      	ldr	r2, [pc, #348]	; (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 8001016:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800101a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f003 0308 	and.w	r3, r3, #8
 8001024:	2b00      	cmp	r3, #0
 8001026:	d005      	beq.n	8001034 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001028:	4b52      	ldr	r3, [pc, #328]	; (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	4a51      	ldr	r2, [pc, #324]	; (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 800102e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001032:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001034:	4b4f      	ldr	r3, [pc, #316]	; (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	494c      	ldr	r1, [pc, #304]	; (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 8001042:	4313      	orrs	r3, r2
 8001044:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	2b00      	cmp	r3, #0
 8001050:	d040      	beq.n	80010d4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d107      	bne.n	800106a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800105a:	4b46      	ldr	r3, [pc, #280]	; (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d115      	bne.n	8001092 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e07d      	b.n	8001166 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	2b02      	cmp	r3, #2
 8001070:	d107      	bne.n	8001082 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001072:	4b40      	ldr	r3, [pc, #256]	; (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d109      	bne.n	8001092 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e071      	b.n	8001166 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001082:	4b3c      	ldr	r3, [pc, #240]	; (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	2b00      	cmp	r3, #0
 800108c:	d101      	bne.n	8001092 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e069      	b.n	8001166 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001092:	4b38      	ldr	r3, [pc, #224]	; (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	f023 0203 	bic.w	r2, r3, #3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	4935      	ldr	r1, [pc, #212]	; (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 80010a0:	4313      	orrs	r3, r2
 80010a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80010a4:	f7ff fa5a 	bl	800055c <HAL_GetTick>
 80010a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010aa:	e00a      	b.n	80010c2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010ac:	f7ff fa56 	bl	800055c <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d901      	bls.n	80010c2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80010be:	2303      	movs	r3, #3
 80010c0:	e051      	b.n	8001166 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010c2:	4b2c      	ldr	r3, [pc, #176]	; (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	f003 020c 	and.w	r2, r3, #12
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d1eb      	bne.n	80010ac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80010d4:	4b26      	ldr	r3, [pc, #152]	; (8001170 <HAL_RCC_ClockConfig+0x1c0>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 030f 	and.w	r3, r3, #15
 80010dc:	683a      	ldr	r2, [r7, #0]
 80010de:	429a      	cmp	r2, r3
 80010e0:	d210      	bcs.n	8001104 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010e2:	4b23      	ldr	r3, [pc, #140]	; (8001170 <HAL_RCC_ClockConfig+0x1c0>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f023 020f 	bic.w	r2, r3, #15
 80010ea:	4921      	ldr	r1, [pc, #132]	; (8001170 <HAL_RCC_ClockConfig+0x1c0>)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010f2:	4b1f      	ldr	r3, [pc, #124]	; (8001170 <HAL_RCC_ClockConfig+0x1c0>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 030f 	and.w	r3, r3, #15
 80010fa:	683a      	ldr	r2, [r7, #0]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d001      	beq.n	8001104 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e030      	b.n	8001166 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 0304 	and.w	r3, r3, #4
 800110c:	2b00      	cmp	r3, #0
 800110e:	d008      	beq.n	8001122 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001110:	4b18      	ldr	r3, [pc, #96]	; (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	4915      	ldr	r1, [pc, #84]	; (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 800111e:	4313      	orrs	r3, r2
 8001120:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0308 	and.w	r3, r3, #8
 800112a:	2b00      	cmp	r3, #0
 800112c:	d009      	beq.n	8001142 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800112e:	4b11      	ldr	r3, [pc, #68]	; (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	691b      	ldr	r3, [r3, #16]
 800113a:	00db      	lsls	r3, r3, #3
 800113c:	490d      	ldr	r1, [pc, #52]	; (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 800113e:	4313      	orrs	r3, r2
 8001140:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001142:	f000 f81d 	bl	8001180 <HAL_RCC_GetSysClockFreq>
 8001146:	4601      	mov	r1, r0
 8001148:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <HAL_RCC_ClockConfig+0x1c4>)
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	091b      	lsrs	r3, r3, #4
 800114e:	f003 030f 	and.w	r3, r3, #15
 8001152:	4a09      	ldr	r2, [pc, #36]	; (8001178 <HAL_RCC_ClockConfig+0x1c8>)
 8001154:	5cd3      	ldrb	r3, [r2, r3]
 8001156:	fa21 f303 	lsr.w	r3, r1, r3
 800115a:	4a08      	ldr	r2, [pc, #32]	; (800117c <HAL_RCC_ClockConfig+0x1cc>)
 800115c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800115e:	2000      	movs	r0, #0
 8001160:	f002 f8e6 	bl	8003330 <HAL_InitTick>

  return HAL_OK;
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40023c00 	.word	0x40023c00
 8001174:	40023800 	.word	0x40023800
 8001178:	08003598 	.word	0x08003598
 800117c:	20000004 	.word	0x20000004

08001180 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	607b      	str	r3, [r7, #4]
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	2300      	movs	r3, #0
 8001190:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001196:	4b50      	ldr	r3, [pc, #320]	; (80012d8 <HAL_RCC_GetSysClockFreq+0x158>)
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	f003 030c 	and.w	r3, r3, #12
 800119e:	2b04      	cmp	r3, #4
 80011a0:	d007      	beq.n	80011b2 <HAL_RCC_GetSysClockFreq+0x32>
 80011a2:	2b08      	cmp	r3, #8
 80011a4:	d008      	beq.n	80011b8 <HAL_RCC_GetSysClockFreq+0x38>
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	f040 808d 	bne.w	80012c6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80011ac:	4b4b      	ldr	r3, [pc, #300]	; (80012dc <HAL_RCC_GetSysClockFreq+0x15c>)
 80011ae:	60bb      	str	r3, [r7, #8]
       break;
 80011b0:	e08c      	b.n	80012cc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80011b2:	4b4b      	ldr	r3, [pc, #300]	; (80012e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80011b4:	60bb      	str	r3, [r7, #8]
      break;
 80011b6:	e089      	b.n	80012cc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011b8:	4b47      	ldr	r3, [pc, #284]	; (80012d8 <HAL_RCC_GetSysClockFreq+0x158>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011c0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80011c2:	4b45      	ldr	r3, [pc, #276]	; (80012d8 <HAL_RCC_GetSysClockFreq+0x158>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d023      	beq.n	8001216 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011ce:	4b42      	ldr	r3, [pc, #264]	; (80012d8 <HAL_RCC_GetSysClockFreq+0x158>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	099b      	lsrs	r3, r3, #6
 80011d4:	f04f 0400 	mov.w	r4, #0
 80011d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80011dc:	f04f 0200 	mov.w	r2, #0
 80011e0:	ea03 0501 	and.w	r5, r3, r1
 80011e4:	ea04 0602 	and.w	r6, r4, r2
 80011e8:	4a3d      	ldr	r2, [pc, #244]	; (80012e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80011ea:	fb02 f106 	mul.w	r1, r2, r6
 80011ee:	2200      	movs	r2, #0
 80011f0:	fb02 f205 	mul.w	r2, r2, r5
 80011f4:	440a      	add	r2, r1
 80011f6:	493a      	ldr	r1, [pc, #232]	; (80012e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80011f8:	fba5 0101 	umull	r0, r1, r5, r1
 80011fc:	1853      	adds	r3, r2, r1
 80011fe:	4619      	mov	r1, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f04f 0400 	mov.w	r4, #0
 8001206:	461a      	mov	r2, r3
 8001208:	4623      	mov	r3, r4
 800120a:	f7ff f805 	bl	8000218 <__aeabi_uldivmod>
 800120e:	4603      	mov	r3, r0
 8001210:	460c      	mov	r4, r1
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	e049      	b.n	80012aa <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001216:	4b30      	ldr	r3, [pc, #192]	; (80012d8 <HAL_RCC_GetSysClockFreq+0x158>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	099b      	lsrs	r3, r3, #6
 800121c:	f04f 0400 	mov.w	r4, #0
 8001220:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001224:	f04f 0200 	mov.w	r2, #0
 8001228:	ea03 0501 	and.w	r5, r3, r1
 800122c:	ea04 0602 	and.w	r6, r4, r2
 8001230:	4629      	mov	r1, r5
 8001232:	4632      	mov	r2, r6
 8001234:	f04f 0300 	mov.w	r3, #0
 8001238:	f04f 0400 	mov.w	r4, #0
 800123c:	0154      	lsls	r4, r2, #5
 800123e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001242:	014b      	lsls	r3, r1, #5
 8001244:	4619      	mov	r1, r3
 8001246:	4622      	mov	r2, r4
 8001248:	1b49      	subs	r1, r1, r5
 800124a:	eb62 0206 	sbc.w	r2, r2, r6
 800124e:	f04f 0300 	mov.w	r3, #0
 8001252:	f04f 0400 	mov.w	r4, #0
 8001256:	0194      	lsls	r4, r2, #6
 8001258:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800125c:	018b      	lsls	r3, r1, #6
 800125e:	1a5b      	subs	r3, r3, r1
 8001260:	eb64 0402 	sbc.w	r4, r4, r2
 8001264:	f04f 0100 	mov.w	r1, #0
 8001268:	f04f 0200 	mov.w	r2, #0
 800126c:	00e2      	lsls	r2, r4, #3
 800126e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001272:	00d9      	lsls	r1, r3, #3
 8001274:	460b      	mov	r3, r1
 8001276:	4614      	mov	r4, r2
 8001278:	195b      	adds	r3, r3, r5
 800127a:	eb44 0406 	adc.w	r4, r4, r6
 800127e:	f04f 0100 	mov.w	r1, #0
 8001282:	f04f 0200 	mov.w	r2, #0
 8001286:	02a2      	lsls	r2, r4, #10
 8001288:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800128c:	0299      	lsls	r1, r3, #10
 800128e:	460b      	mov	r3, r1
 8001290:	4614      	mov	r4, r2
 8001292:	4618      	mov	r0, r3
 8001294:	4621      	mov	r1, r4
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f04f 0400 	mov.w	r4, #0
 800129c:	461a      	mov	r2, r3
 800129e:	4623      	mov	r3, r4
 80012a0:	f7fe ffba 	bl	8000218 <__aeabi_uldivmod>
 80012a4:	4603      	mov	r3, r0
 80012a6:	460c      	mov	r4, r1
 80012a8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80012aa:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <HAL_RCC_GetSysClockFreq+0x158>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	0c1b      	lsrs	r3, r3, #16
 80012b0:	f003 0303 	and.w	r3, r3, #3
 80012b4:	3301      	adds	r3, #1
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	fbb2 f3f3 	udiv	r3, r2, r3
 80012c2:	60bb      	str	r3, [r7, #8]
      break;
 80012c4:	e002      	b.n	80012cc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80012c6:	4b05      	ldr	r3, [pc, #20]	; (80012dc <HAL_RCC_GetSysClockFreq+0x15c>)
 80012c8:	60bb      	str	r3, [r7, #8]
      break;
 80012ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012cc:	68bb      	ldr	r3, [r7, #8]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3714      	adds	r7, #20
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40023800 	.word	0x40023800
 80012dc:	00f42400 	.word	0x00f42400
 80012e0:	017d7840 	.word	0x017d7840

080012e4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012e8:	4b03      	ldr	r3, [pc, #12]	; (80012f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80012ea:	681b      	ldr	r3, [r3, #0]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	20000004 	.word	0x20000004

080012fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001300:	f7ff fff0 	bl	80012e4 <HAL_RCC_GetHCLKFreq>
 8001304:	4601      	mov	r1, r0
 8001306:	4b05      	ldr	r3, [pc, #20]	; (800131c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	0a9b      	lsrs	r3, r3, #10
 800130c:	f003 0307 	and.w	r3, r3, #7
 8001310:	4a03      	ldr	r2, [pc, #12]	; (8001320 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001312:	5cd3      	ldrb	r3, [r2, r3]
 8001314:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001318:	4618      	mov	r0, r3
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40023800 	.word	0x40023800
 8001320:	080035a8 	.word	0x080035a8

08001324 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001328:	f7ff ffdc 	bl	80012e4 <HAL_RCC_GetHCLKFreq>
 800132c:	4601      	mov	r1, r0
 800132e:	4b05      	ldr	r3, [pc, #20]	; (8001344 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	0b5b      	lsrs	r3, r3, #13
 8001334:	f003 0307 	and.w	r3, r3, #7
 8001338:	4a03      	ldr	r2, [pc, #12]	; (8001348 <HAL_RCC_GetPCLK2Freq+0x24>)
 800133a:	5cd3      	ldrb	r3, [r2, r3]
 800133c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001340:	4618      	mov	r0, r3
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40023800 	.word	0x40023800
 8001348:	080035a8 	.word	0x080035a8

0800134c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	220f      	movs	r2, #15
 800135a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800135c:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <HAL_RCC_GetClockConfig+0x5c>)
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	f003 0203 	and.w	r2, r3, #3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001368:	4b0f      	ldr	r3, [pc, #60]	; (80013a8 <HAL_RCC_GetClockConfig+0x5c>)
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001374:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <HAL_RCC_GetClockConfig+0x5c>)
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001380:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <HAL_RCC_GetClockConfig+0x5c>)
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	08db      	lsrs	r3, r3, #3
 8001386:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800138e:	4b07      	ldr	r3, [pc, #28]	; (80013ac <HAL_RCC_GetClockConfig+0x60>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 020f 	and.w	r2, r3, #15
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	601a      	str	r2, [r3, #0]
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	40023800 	.word	0x40023800
 80013ac:	40023c00 	.word	0x40023c00

080013b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b088      	sub	sp, #32
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d012      	beq.n	80013fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80013d8:	4b69      	ldr	r3, [pc, #420]	; (8001580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	4a68      	ldr	r2, [pc, #416]	; (8001580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80013de:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80013e2:	6093      	str	r3, [r2, #8]
 80013e4:	4b66      	ldr	r3, [pc, #408]	; (8001580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80013e6:	689a      	ldr	r2, [r3, #8]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013ec:	4964      	ldr	r1, [pc, #400]	; (8001580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80013ee:	4313      	orrs	r3, r2
 80013f0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d101      	bne.n	80013fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80013fa:	2301      	movs	r3, #1
 80013fc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d017      	beq.n	800143a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800140a:	4b5d      	ldr	r3, [pc, #372]	; (8001580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800140c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001410:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001418:	4959      	ldr	r1, [pc, #356]	; (8001580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800141a:	4313      	orrs	r3, r2
 800141c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001424:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001428:	d101      	bne.n	800142e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800142a:	2301      	movs	r3, #1
 800142c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001432:	2b00      	cmp	r3, #0
 8001434:	d101      	bne.n	800143a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001436:	2301      	movs	r3, #1
 8001438:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d017      	beq.n	8001476 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001446:	4b4e      	ldr	r3, [pc, #312]	; (8001580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001448:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800144c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001454:	494a      	ldr	r1, [pc, #296]	; (8001580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001456:	4313      	orrs	r3, r2
 8001458:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001460:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001464:	d101      	bne.n	800146a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001466:	2301      	movs	r3, #1
 8001468:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	2b00      	cmp	r3, #0
 8001470:	d101      	bne.n	8001476 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001472:	2301      	movs	r3, #1
 8001474:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001482:	2301      	movs	r3, #1
 8001484:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0320 	and.w	r3, r3, #32
 800148e:	2b00      	cmp	r3, #0
 8001490:	f000 808b 	beq.w	80015aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001494:	4b3a      	ldr	r3, [pc, #232]	; (8001580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001498:	4a39      	ldr	r2, [pc, #228]	; (8001580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800149a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800149e:	6413      	str	r3, [r2, #64]	; 0x40
 80014a0:	4b37      	ldr	r3, [pc, #220]	; (8001580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80014a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a8:	60bb      	str	r3, [r7, #8]
 80014aa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80014ac:	4b35      	ldr	r3, [pc, #212]	; (8001584 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a34      	ldr	r2, [pc, #208]	; (8001584 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80014b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80014b8:	f7ff f850 	bl	800055c <HAL_GetTick>
 80014bc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80014be:	e008      	b.n	80014d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014c0:	f7ff f84c 	bl	800055c <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b64      	cmp	r3, #100	; 0x64
 80014cc:	d901      	bls.n	80014d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e355      	b.n	8001b7e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80014d2:	4b2c      	ldr	r3, [pc, #176]	; (8001584 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d0f0      	beq.n	80014c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80014de:	4b28      	ldr	r3, [pc, #160]	; (8001580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80014e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80014e6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d035      	beq.n	800155a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d02e      	beq.n	800155a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80014fc:	4b20      	ldr	r3, [pc, #128]	; (8001580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80014fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001500:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001504:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001506:	4b1e      	ldr	r3, [pc, #120]	; (8001580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800150a:	4a1d      	ldr	r2, [pc, #116]	; (8001580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800150c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001510:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001512:	4b1b      	ldr	r3, [pc, #108]	; (8001580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001516:	4a1a      	ldr	r2, [pc, #104]	; (8001580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001518:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800151c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800151e:	4a18      	ldr	r2, [pc, #96]	; (8001580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001524:	4b16      	ldr	r3, [pc, #88]	; (8001580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001528:	f003 0301 	and.w	r3, r3, #1
 800152c:	2b01      	cmp	r3, #1
 800152e:	d114      	bne.n	800155a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001530:	f7ff f814 	bl	800055c <HAL_GetTick>
 8001534:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001536:	e00a      	b.n	800154e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001538:	f7ff f810 	bl	800055c <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	f241 3288 	movw	r2, #5000	; 0x1388
 8001546:	4293      	cmp	r3, r2
 8001548:	d901      	bls.n	800154e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e317      	b.n	8001b7e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800154e:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d0ee      	beq.n	8001538 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001562:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001566:	d111      	bne.n	800158c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001568:	4b05      	ldr	r3, [pc, #20]	; (8001580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001574:	4b04      	ldr	r3, [pc, #16]	; (8001588 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001576:	400b      	ands	r3, r1
 8001578:	4901      	ldr	r1, [pc, #4]	; (8001580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800157a:	4313      	orrs	r3, r2
 800157c:	608b      	str	r3, [r1, #8]
 800157e:	e00b      	b.n	8001598 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001580:	40023800 	.word	0x40023800
 8001584:	40007000 	.word	0x40007000
 8001588:	0ffffcff 	.word	0x0ffffcff
 800158c:	4bb0      	ldr	r3, [pc, #704]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	4aaf      	ldr	r2, [pc, #700]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001592:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001596:	6093      	str	r3, [r2, #8]
 8001598:	4bad      	ldr	r3, [pc, #692]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800159a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015a4:	49aa      	ldr	r1, [pc, #680]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80015a6:	4313      	orrs	r3, r2
 80015a8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0310 	and.w	r3, r3, #16
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d010      	beq.n	80015d8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80015b6:	4ba6      	ldr	r3, [pc, #664]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80015b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015bc:	4aa4      	ldr	r2, [pc, #656]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80015be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80015c6:	4ba2      	ldr	r3, [pc, #648]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80015c8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015d0:	499f      	ldr	r1, [pc, #636]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80015d2:	4313      	orrs	r3, r2
 80015d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d00a      	beq.n	80015fa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80015e4:	4b9a      	ldr	r3, [pc, #616]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80015e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80015f2:	4997      	ldr	r1, [pc, #604]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80015f4:	4313      	orrs	r3, r2
 80015f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d00a      	beq.n	800161c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001606:	4b92      	ldr	r3, [pc, #584]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800160c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001614:	498e      	ldr	r1, [pc, #568]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001616:	4313      	orrs	r3, r2
 8001618:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d00a      	beq.n	800163e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001628:	4b89      	ldr	r3, [pc, #548]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800162a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800162e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001636:	4986      	ldr	r1, [pc, #536]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001638:	4313      	orrs	r3, r2
 800163a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d00a      	beq.n	8001660 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800164a:	4b81      	ldr	r3, [pc, #516]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800164c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001650:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001658:	497d      	ldr	r1, [pc, #500]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800165a:	4313      	orrs	r3, r2
 800165c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001668:	2b00      	cmp	r3, #0
 800166a:	d00a      	beq.n	8001682 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800166c:	4b78      	ldr	r3, [pc, #480]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800166e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001672:	f023 0203 	bic.w	r2, r3, #3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167a:	4975      	ldr	r1, [pc, #468]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800167c:	4313      	orrs	r3, r2
 800167e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800168a:	2b00      	cmp	r3, #0
 800168c:	d00a      	beq.n	80016a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800168e:	4b70      	ldr	r3, [pc, #448]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001694:	f023 020c 	bic.w	r2, r3, #12
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800169c:	496c      	ldr	r1, [pc, #432]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800169e:	4313      	orrs	r3, r2
 80016a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d00a      	beq.n	80016c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80016b0:	4b67      	ldr	r3, [pc, #412]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80016b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016b6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016be:	4964      	ldr	r1, [pc, #400]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80016c0:	4313      	orrs	r3, r2
 80016c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d00a      	beq.n	80016e8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80016d2:	4b5f      	ldr	r3, [pc, #380]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80016d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016d8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016e0:	495b      	ldr	r1, [pc, #364]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80016e2:	4313      	orrs	r3, r2
 80016e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d00a      	beq.n	800170a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80016f4:	4b56      	ldr	r3, [pc, #344]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80016f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001702:	4953      	ldr	r1, [pc, #332]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001704:	4313      	orrs	r3, r2
 8001706:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001712:	2b00      	cmp	r3, #0
 8001714:	d00a      	beq.n	800172c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001716:	4b4e      	ldr	r3, [pc, #312]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800171c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001724:	494a      	ldr	r1, [pc, #296]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001726:	4313      	orrs	r3, r2
 8001728:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d00a      	beq.n	800174e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001738:	4b45      	ldr	r3, [pc, #276]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800173a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800173e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001746:	4942      	ldr	r1, [pc, #264]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001748:	4313      	orrs	r3, r2
 800174a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d00a      	beq.n	8001770 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800175a:	4b3d      	ldr	r3, [pc, #244]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800175c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001760:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001768:	4939      	ldr	r1, [pc, #228]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800176a:	4313      	orrs	r3, r2
 800176c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d00a      	beq.n	8001792 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800177c:	4b34      	ldr	r3, [pc, #208]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800177e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001782:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800178a:	4931      	ldr	r1, [pc, #196]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800178c:	4313      	orrs	r3, r2
 800178e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d011      	beq.n	80017c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800179e:	4b2c      	ldr	r3, [pc, #176]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80017a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017a4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80017ac:	4928      	ldr	r1, [pc, #160]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80017b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80017bc:	d101      	bne.n	80017c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80017be:	2301      	movs	r3, #1
 80017c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0308 	and.w	r3, r3, #8
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80017ce:	2301      	movs	r3, #1
 80017d0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d00a      	beq.n	80017f4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80017de:	4b1c      	ldr	r3, [pc, #112]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80017e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017e4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017ec:	4918      	ldr	r1, [pc, #96]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d00b      	beq.n	8001818 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001800:	4b13      	ldr	r3, [pc, #76]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001806:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001810:	490f      	ldr	r1, [pc, #60]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001812:	4313      	orrs	r3, r2
 8001814:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d005      	beq.n	800182a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001826:	f040 80d8 	bne.w	80019da <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800182a:	4b09      	ldr	r3, [pc, #36]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a08      	ldr	r2, [pc, #32]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8001830:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001834:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001836:	f7fe fe91 	bl	800055c <HAL_GetTick>
 800183a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800183c:	e00a      	b.n	8001854 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800183e:	f7fe fe8d 	bl	800055c <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b64      	cmp	r3, #100	; 0x64
 800184a:	d903      	bls.n	8001854 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e196      	b.n	8001b7e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8001850:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001854:	4b6c      	ldr	r3, [pc, #432]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d1ee      	bne.n	800183e <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	2b00      	cmp	r3, #0
 800186a:	d021      	beq.n	80018b0 <HAL_RCCEx_PeriphCLKConfig+0x500>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001870:	2b00      	cmp	r3, #0
 8001872:	d11d      	bne.n	80018b0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001874:	4b64      	ldr	r3, [pc, #400]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001876:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800187a:	0c1b      	lsrs	r3, r3, #16
 800187c:	f003 0303 	and.w	r3, r3, #3
 8001880:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001882:	4b61      	ldr	r3, [pc, #388]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001884:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001888:	0e1b      	lsrs	r3, r3, #24
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	019a      	lsls	r2, r3, #6
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	041b      	lsls	r3, r3, #16
 800189a:	431a      	orrs	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	061b      	lsls	r3, r3, #24
 80018a0:	431a      	orrs	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	071b      	lsls	r3, r3, #28
 80018a8:	4957      	ldr	r1, [pc, #348]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d004      	beq.n	80018c6 <HAL_RCCEx_PeriphCLKConfig+0x516>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018c4:	d00a      	beq.n	80018dc <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d02e      	beq.n	8001930 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018da:	d129      	bne.n	8001930 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80018dc:	4b4a      	ldr	r3, [pc, #296]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80018de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018e2:	0c1b      	lsrs	r3, r3, #16
 80018e4:	f003 0303 	and.w	r3, r3, #3
 80018e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80018ea:	4b47      	ldr	r3, [pc, #284]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80018ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018f0:	0f1b      	lsrs	r3, r3, #28
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	019a      	lsls	r2, r3, #6
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	041b      	lsls	r3, r3, #16
 8001902:	431a      	orrs	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	061b      	lsls	r3, r3, #24
 800190a:	431a      	orrs	r2, r3
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	071b      	lsls	r3, r3, #28
 8001910:	493d      	ldr	r1, [pc, #244]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001912:	4313      	orrs	r3, r2
 8001914:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001918:	4b3b      	ldr	r3, [pc, #236]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800191a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800191e:	f023 021f 	bic.w	r2, r3, #31
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001926:	3b01      	subs	r3, #1
 8001928:	4937      	ldr	r1, [pc, #220]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800192a:	4313      	orrs	r3, r2
 800192c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d01d      	beq.n	8001978 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800193c:	4b32      	ldr	r3, [pc, #200]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800193e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001942:	0e1b      	lsrs	r3, r3, #24
 8001944:	f003 030f 	and.w	r3, r3, #15
 8001948:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800194a:	4b2f      	ldr	r3, [pc, #188]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800194c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001950:	0f1b      	lsrs	r3, r3, #28
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	019a      	lsls	r2, r3, #6
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	041b      	lsls	r3, r3, #16
 8001964:	431a      	orrs	r2, r3
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	061b      	lsls	r3, r3, #24
 800196a:	431a      	orrs	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	071b      	lsls	r3, r3, #28
 8001970:	4925      	ldr	r1, [pc, #148]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8001972:	4313      	orrs	r3, r2
 8001974:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d011      	beq.n	80019a8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	019a      	lsls	r2, r3, #6
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	691b      	ldr	r3, [r3, #16]
 800198e:	041b      	lsls	r3, r3, #16
 8001990:	431a      	orrs	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	061b      	lsls	r3, r3, #24
 8001998:	431a      	orrs	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	071b      	lsls	r3, r3, #28
 80019a0:	4919      	ldr	r1, [pc, #100]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80019a8:	4b17      	ldr	r3, [pc, #92]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a16      	ldr	r2, [pc, #88]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80019ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80019b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019b4:	f7fe fdd2 	bl	800055c <HAL_GetTick>
 80019b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80019ba:	e008      	b.n	80019ce <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80019bc:	f7fe fdce 	bl	800055c <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b64      	cmp	r3, #100	; 0x64
 80019c8:	d901      	bls.n	80019ce <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e0d7      	b.n	8001b7e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80019ce:	4b0e      	ldr	r3, [pc, #56]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d0f0      	beq.n	80019bc <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	f040 80cd 	bne.w	8001b7c <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80019e2:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a08      	ldr	r2, [pc, #32]	; (8001a08 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80019e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019ee:	f7fe fdb5 	bl	800055c <HAL_GetTick>
 80019f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80019f4:	e00a      	b.n	8001a0c <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80019f6:	f7fe fdb1 	bl	800055c <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b64      	cmp	r3, #100	; 0x64
 8001a02:	d903      	bls.n	8001a0c <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e0ba      	b.n	8001b7e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8001a08:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001a0c:	4b5e      	ldr	r3, [pc, #376]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a18:	d0ed      	beq.n	80019f6 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d003      	beq.n	8001a2e <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d009      	beq.n	8001a42 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d02e      	beq.n	8001a98 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d12a      	bne.n	8001a98 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001a42:	4b51      	ldr	r3, [pc, #324]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a48:	0c1b      	lsrs	r3, r3, #16
 8001a4a:	f003 0303 	and.w	r3, r3, #3
 8001a4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001a50:	4b4d      	ldr	r3, [pc, #308]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a56:	0f1b      	lsrs	r3, r3, #28
 8001a58:	f003 0307 	and.w	r3, r3, #7
 8001a5c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	019a      	lsls	r2, r3, #6
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	041b      	lsls	r3, r3, #16
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	699b      	ldr	r3, [r3, #24]
 8001a6e:	061b      	lsls	r3, r3, #24
 8001a70:	431a      	orrs	r2, r3
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	071b      	lsls	r3, r3, #28
 8001a76:	4944      	ldr	r1, [pc, #272]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001a7e:	4b42      	ldr	r3, [pc, #264]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001a80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a84:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	021b      	lsls	r3, r3, #8
 8001a90:	493d      	ldr	r1, [pc, #244]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d022      	beq.n	8001aea <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001aa8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001aac:	d11d      	bne.n	8001aea <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001aae:	4b36      	ldr	r3, [pc, #216]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ab4:	0e1b      	lsrs	r3, r3, #24
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001abc:	4b32      	ldr	r3, [pc, #200]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ac2:	0f1b      	lsrs	r3, r3, #28
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	695b      	ldr	r3, [r3, #20]
 8001ace:	019a      	lsls	r2, r3, #6
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a1b      	ldr	r3, [r3, #32]
 8001ad4:	041b      	lsls	r3, r3, #16
 8001ad6:	431a      	orrs	r2, r3
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	061b      	lsls	r3, r3, #24
 8001adc:	431a      	orrs	r2, r3
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	071b      	lsls	r3, r3, #28
 8001ae2:	4929      	ldr	r1, [pc, #164]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0308 	and.w	r3, r3, #8
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d028      	beq.n	8001b48 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001af6:	4b24      	ldr	r3, [pc, #144]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001afc:	0e1b      	lsrs	r3, r3, #24
 8001afe:	f003 030f 	and.w	r3, r3, #15
 8001b02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001b04:	4b20      	ldr	r3, [pc, #128]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b0a:	0c1b      	lsrs	r3, r3, #16
 8001b0c:	f003 0303 	and.w	r3, r3, #3
 8001b10:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	019a      	lsls	r2, r3, #6
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	041b      	lsls	r3, r3, #16
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	061b      	lsls	r3, r3, #24
 8001b22:	431a      	orrs	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	69db      	ldr	r3, [r3, #28]
 8001b28:	071b      	lsls	r3, r3, #28
 8001b2a:	4917      	ldr	r1, [pc, #92]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001b32:	4b15      	ldr	r3, [pc, #84]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001b34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b40:	4911      	ldr	r1, [pc, #68]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001b48:	4b0f      	ldr	r3, [pc, #60]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a0e      	ldr	r2, [pc, #56]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001b4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b54:	f7fe fd02 	bl	800055c <HAL_GetTick>
 8001b58:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001b5c:	f7fe fcfe 	bl	800055c <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b64      	cmp	r3, #100	; 0x64
 8001b68:	d901      	bls.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e007      	b.n	8001b7e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001b6e:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b7a:	d1ef      	bne.n	8001b5c <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3720      	adds	r7, #32
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40023800 	.word	0x40023800

08001b8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e01d      	b.n	8001bda <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d106      	bne.n	8001bb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 f815 	bl	8001be2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2202      	movs	r2, #2
 8001bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3304      	adds	r3, #4
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4610      	mov	r0, r2
 8001bcc:	f000 f986 	bl	8001edc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b083      	sub	sp, #12
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
	...

08001bf8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	68da      	ldr	r2, [r3, #12]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f042 0201 	orr.w	r2, r2, #1
 8001c0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	689a      	ldr	r2, [r3, #8]
 8001c16:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <HAL_TIM_Base_Start_IT+0x50>)
 8001c18:	4013      	ands	r3, r2
 8001c1a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2b06      	cmp	r3, #6
 8001c20:	d00b      	beq.n	8001c3a <HAL_TIM_Base_Start_IT+0x42>
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c28:	d007      	beq.n	8001c3a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f042 0201 	orr.w	r2, r2, #1
 8001c38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3714      	adds	r7, #20
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	00010007 	.word	0x00010007

08001c4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d122      	bne.n	8001ca8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d11b      	bne.n	8001ca8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f06f 0202 	mvn.w	r2, #2
 8001c78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	f003 0303 	and.w	r3, r3, #3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 f905 	bl	8001e9e <HAL_TIM_IC_CaptureCallback>
 8001c94:	e005      	b.n	8001ca2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 f8f7 	bl	8001e8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f000 f908 	bl	8001eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	f003 0304 	and.w	r3, r3, #4
 8001cb2:	2b04      	cmp	r3, #4
 8001cb4:	d122      	bne.n	8001cfc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	2b04      	cmp	r3, #4
 8001cc2:	d11b      	bne.n	8001cfc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f06f 0204 	mvn.w	r2, #4
 8001ccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2202      	movs	r2, #2
 8001cd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 f8db 	bl	8001e9e <HAL_TIM_IC_CaptureCallback>
 8001ce8:	e005      	b.n	8001cf6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 f8cd 	bl	8001e8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f000 f8de 	bl	8001eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	f003 0308 	and.w	r3, r3, #8
 8001d06:	2b08      	cmp	r3, #8
 8001d08:	d122      	bne.n	8001d50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	f003 0308 	and.w	r3, r3, #8
 8001d14:	2b08      	cmp	r3, #8
 8001d16:	d11b      	bne.n	8001d50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f06f 0208 	mvn.w	r2, #8
 8001d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2204      	movs	r2, #4
 8001d26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	f003 0303 	and.w	r3, r3, #3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 f8b1 	bl	8001e9e <HAL_TIM_IC_CaptureCallback>
 8001d3c:	e005      	b.n	8001d4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 f8a3 	bl	8001e8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 f8b4 	bl	8001eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	f003 0310 	and.w	r3, r3, #16
 8001d5a:	2b10      	cmp	r3, #16
 8001d5c:	d122      	bne.n	8001da4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	f003 0310 	and.w	r3, r3, #16
 8001d68:	2b10      	cmp	r3, #16
 8001d6a:	d11b      	bne.n	8001da4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f06f 0210 	mvn.w	r2, #16
 8001d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2208      	movs	r2, #8
 8001d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f887 	bl	8001e9e <HAL_TIM_IC_CaptureCallback>
 8001d90:	e005      	b.n	8001d9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 f879 	bl	8001e8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 f88a 	bl	8001eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d10e      	bne.n	8001dd0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d107      	bne.n	8001dd0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f06f 0201 	mvn.w	r2, #1
 8001dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f001 fa08 	bl	80031e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dda:	2b80      	cmp	r3, #128	; 0x80
 8001ddc:	d10e      	bne.n	8001dfc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de8:	2b80      	cmp	r3, #128	; 0x80
 8001dea:	d107      	bne.n	8001dfc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 f91a 	bl	8002030 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e0a:	d10e      	bne.n	8001e2a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e16:	2b80      	cmp	r3, #128	; 0x80
 8001e18:	d107      	bne.n	8001e2a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001e22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 f90d 	bl	8002044 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e34:	2b40      	cmp	r3, #64	; 0x40
 8001e36:	d10e      	bne.n	8001e56 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e42:	2b40      	cmp	r3, #64	; 0x40
 8001e44:	d107      	bne.n	8001e56 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 f838 	bl	8001ec6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	f003 0320 	and.w	r3, r3, #32
 8001e60:	2b20      	cmp	r3, #32
 8001e62:	d10e      	bne.n	8001e82 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	f003 0320 	and.w	r3, r3, #32
 8001e6e:	2b20      	cmp	r3, #32
 8001e70:	d107      	bne.n	8001e82 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f06f 0220 	mvn.w	r2, #32
 8001e7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f000 f8cd 	bl	800201c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b083      	sub	sp, #12
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b083      	sub	sp, #12
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b083      	sub	sp, #12
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b083      	sub	sp, #12
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
	...

08001edc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a40      	ldr	r2, [pc, #256]	; (8001ff0 <TIM_Base_SetConfig+0x114>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d013      	beq.n	8001f1c <TIM_Base_SetConfig+0x40>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001efa:	d00f      	beq.n	8001f1c <TIM_Base_SetConfig+0x40>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a3d      	ldr	r2, [pc, #244]	; (8001ff4 <TIM_Base_SetConfig+0x118>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d00b      	beq.n	8001f1c <TIM_Base_SetConfig+0x40>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a3c      	ldr	r2, [pc, #240]	; (8001ff8 <TIM_Base_SetConfig+0x11c>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d007      	beq.n	8001f1c <TIM_Base_SetConfig+0x40>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a3b      	ldr	r2, [pc, #236]	; (8001ffc <TIM_Base_SetConfig+0x120>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d003      	beq.n	8001f1c <TIM_Base_SetConfig+0x40>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a3a      	ldr	r2, [pc, #232]	; (8002000 <TIM_Base_SetConfig+0x124>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d108      	bne.n	8001f2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a2f      	ldr	r2, [pc, #188]	; (8001ff0 <TIM_Base_SetConfig+0x114>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d02b      	beq.n	8001f8e <TIM_Base_SetConfig+0xb2>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f3c:	d027      	beq.n	8001f8e <TIM_Base_SetConfig+0xb2>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a2c      	ldr	r2, [pc, #176]	; (8001ff4 <TIM_Base_SetConfig+0x118>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d023      	beq.n	8001f8e <TIM_Base_SetConfig+0xb2>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a2b      	ldr	r2, [pc, #172]	; (8001ff8 <TIM_Base_SetConfig+0x11c>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d01f      	beq.n	8001f8e <TIM_Base_SetConfig+0xb2>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a2a      	ldr	r2, [pc, #168]	; (8001ffc <TIM_Base_SetConfig+0x120>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d01b      	beq.n	8001f8e <TIM_Base_SetConfig+0xb2>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a29      	ldr	r2, [pc, #164]	; (8002000 <TIM_Base_SetConfig+0x124>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d017      	beq.n	8001f8e <TIM_Base_SetConfig+0xb2>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a28      	ldr	r2, [pc, #160]	; (8002004 <TIM_Base_SetConfig+0x128>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d013      	beq.n	8001f8e <TIM_Base_SetConfig+0xb2>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a27      	ldr	r2, [pc, #156]	; (8002008 <TIM_Base_SetConfig+0x12c>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d00f      	beq.n	8001f8e <TIM_Base_SetConfig+0xb2>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a26      	ldr	r2, [pc, #152]	; (800200c <TIM_Base_SetConfig+0x130>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d00b      	beq.n	8001f8e <TIM_Base_SetConfig+0xb2>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a25      	ldr	r2, [pc, #148]	; (8002010 <TIM_Base_SetConfig+0x134>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d007      	beq.n	8001f8e <TIM_Base_SetConfig+0xb2>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a24      	ldr	r2, [pc, #144]	; (8002014 <TIM_Base_SetConfig+0x138>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d003      	beq.n	8001f8e <TIM_Base_SetConfig+0xb2>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a23      	ldr	r2, [pc, #140]	; (8002018 <TIM_Base_SetConfig+0x13c>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d108      	bne.n	8001fa0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	68fa      	ldr	r2, [r7, #12]
 8001fb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a0a      	ldr	r2, [pc, #40]	; (8001ff0 <TIM_Base_SetConfig+0x114>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d003      	beq.n	8001fd4 <TIM_Base_SetConfig+0xf8>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a0c      	ldr	r2, [pc, #48]	; (8002000 <TIM_Base_SetConfig+0x124>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d103      	bne.n	8001fdc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	691a      	ldr	r2, [r3, #16]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	615a      	str	r2, [r3, #20]
}
 8001fe2:	bf00      	nop
 8001fe4:	3714      	adds	r7, #20
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	40010000 	.word	0x40010000
 8001ff4:	40000400 	.word	0x40000400
 8001ff8:	40000800 	.word	0x40000800
 8001ffc:	40000c00 	.word	0x40000c00
 8002000:	40010400 	.word	0x40010400
 8002004:	40014000 	.word	0x40014000
 8002008:	40014400 	.word	0x40014400
 800200c:	40014800 	.word	0x40014800
 8002010:	40001800 	.word	0x40001800
 8002014:	40001c00 	.word	0x40001c00
 8002018:	40002000 	.word	0x40002000

0800201c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e040      	b.n	80020ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800206e:	2b00      	cmp	r3, #0
 8002070:	d106      	bne.n	8002080 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f001 f8ee 	bl	800325c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2224      	movs	r2, #36	; 0x24
 8002084:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f022 0201 	bic.w	r2, r2, #1
 8002094:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 fa90 	bl	80025bc <UART_SetConfig>
 800209c:	4603      	mov	r3, r0
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d101      	bne.n	80020a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e022      	b.n	80020ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d002      	beq.n	80020b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 fd28 	bl	8002b04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	689a      	ldr	r2, [r3, #8]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020d2:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f042 0201 	orr.w	r2, r2, #1
 80020e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 fdaf 	bl	8002c48 <UART_CheckIdleState>
 80020ea:	4603      	mov	r3, r0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b08a      	sub	sp, #40	; 0x28
 80020f8:	af02      	add	r7, sp, #8
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	603b      	str	r3, [r7, #0]
 8002100:	4613      	mov	r3, r2
 8002102:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002108:	2b20      	cmp	r3, #32
 800210a:	d17f      	bne.n	800220c <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d002      	beq.n	8002118 <HAL_UART_Transmit+0x24>
 8002112:	88fb      	ldrh	r3, [r7, #6]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e078      	b.n	800220e <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002122:	2b01      	cmp	r3, #1
 8002124:	d101      	bne.n	800212a <HAL_UART_Transmit+0x36>
 8002126:	2302      	movs	r3, #2
 8002128:	e071      	b.n	800220e <HAL_UART_Transmit+0x11a>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2201      	movs	r2, #1
 800212e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2200      	movs	r2, #0
 8002136:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2221      	movs	r2, #33	; 0x21
 800213c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800213e:	f7fe fa0d 	bl	800055c <HAL_GetTick>
 8002142:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	88fa      	ldrh	r2, [r7, #6]
 8002148:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	88fa      	ldrh	r2, [r7, #6]
 8002150:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800215c:	d108      	bne.n	8002170 <HAL_UART_Transmit+0x7c>
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d104      	bne.n	8002170 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8002166:	2300      	movs	r3, #0
 8002168:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	61bb      	str	r3, [r7, #24]
 800216e:	e003      	b.n	8002178 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002174:	2300      	movs	r3, #0
 8002176:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002178:	e02c      	b.n	80021d4 <HAL_UART_Transmit+0xe0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	9300      	str	r3, [sp, #0]
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	2200      	movs	r2, #0
 8002182:	2180      	movs	r1, #128	; 0x80
 8002184:	68f8      	ldr	r0, [r7, #12]
 8002186:	f000 fd8e 	bl	8002ca6 <UART_WaitOnFlagUntilTimeout>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <HAL_UART_Transmit+0xa0>
      {
        return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e03c      	b.n	800220e <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d10b      	bne.n	80021b2 <HAL_UART_Transmit+0xbe>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	881b      	ldrh	r3, [r3, #0]
 800219e:	461a      	mov	r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021a8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	3302      	adds	r3, #2
 80021ae:	61bb      	str	r3, [r7, #24]
 80021b0:	e007      	b.n	80021c2 <HAL_UART_Transmit+0xce>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	781a      	ldrb	r2, [r3, #0]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	3301      	adds	r3, #1
 80021c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	3b01      	subs	r3, #1
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80021da:	b29b      	uxth	r3, r3
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1cc      	bne.n	800217a <HAL_UART_Transmit+0x86>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	2200      	movs	r2, #0
 80021e8:	2140      	movs	r1, #64	; 0x40
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f000 fd5b 	bl	8002ca6 <UART_WaitOnFlagUntilTimeout>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <HAL_UART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e009      	b.n	800220e <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2220      	movs	r2, #32
 80021fe:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8002208:	2300      	movs	r3, #0
 800220a:	e000      	b.n	800220e <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800220c:	2302      	movs	r3, #2
  }
}
 800220e:	4618      	mov	r0, r3
 8002210:	3720      	adds	r7, #32
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
	...

08002218 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	4613      	mov	r3, r2
 8002224:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800222a:	2b20      	cmp	r3, #32
 800222c:	f040 808a 	bne.w	8002344 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d002      	beq.n	800223c <HAL_UART_Receive_IT+0x24>
 8002236:	88fb      	ldrh	r3, [r7, #6]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d101      	bne.n	8002240 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e082      	b.n	8002346 <HAL_UART_Receive_IT+0x12e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002246:	2b01      	cmp	r3, #1
 8002248:	d101      	bne.n	800224e <HAL_UART_Receive_IT+0x36>
 800224a:	2302      	movs	r3, #2
 800224c:	e07b      	b.n	8002346 <HAL_UART_Receive_IT+0x12e>
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2201      	movs	r2, #1
 8002252:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	68ba      	ldr	r2, [r7, #8]
 800225a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	88fa      	ldrh	r2, [r7, #6]
 8002260:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	88fa      	ldrh	r2, [r7, #6]
 8002268:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800227a:	d10e      	bne.n	800229a <HAL_UART_Receive_IT+0x82>
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d105      	bne.n	8002290 <HAL_UART_Receive_IT+0x78>
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f240 12ff 	movw	r2, #511	; 0x1ff
 800228a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800228e:	e02d      	b.n	80022ec <HAL_UART_Receive_IT+0xd4>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	22ff      	movs	r2, #255	; 0xff
 8002294:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002298:	e028      	b.n	80022ec <HAL_UART_Receive_IT+0xd4>
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10d      	bne.n	80022be <HAL_UART_Receive_IT+0xa6>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d104      	bne.n	80022b4 <HAL_UART_Receive_IT+0x9c>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	22ff      	movs	r2, #255	; 0xff
 80022ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80022b2:	e01b      	b.n	80022ec <HAL_UART_Receive_IT+0xd4>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	227f      	movs	r2, #127	; 0x7f
 80022b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80022bc:	e016      	b.n	80022ec <HAL_UART_Receive_IT+0xd4>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022c6:	d10d      	bne.n	80022e4 <HAL_UART_Receive_IT+0xcc>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d104      	bne.n	80022da <HAL_UART_Receive_IT+0xc2>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	227f      	movs	r2, #127	; 0x7f
 80022d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80022d8:	e008      	b.n	80022ec <HAL_UART_Receive_IT+0xd4>
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	223f      	movs	r2, #63	; 0x3f
 80022de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80022e2:	e003      	b.n	80022ec <HAL_UART_Receive_IT+0xd4>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2222      	movs	r2, #34	; 0x22
 80022f6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	689a      	ldr	r2, [r3, #8]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f042 0201 	orr.w	r2, r2, #1
 8002306:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002310:	d107      	bne.n	8002322 <HAL_UART_Receive_IT+0x10a>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d103      	bne.n	8002322 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	4a0d      	ldr	r2, [pc, #52]	; (8002354 <HAL_UART_Receive_IT+0x13c>)
 800231e:	661a      	str	r2, [r3, #96]	; 0x60
 8002320:	e002      	b.n	8002328 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	4a0c      	ldr	r2, [pc, #48]	; (8002358 <HAL_UART_Receive_IT+0x140>)
 8002326:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800233e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002340:	2300      	movs	r3, #0
 8002342:	e000      	b.n	8002346 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8002344:	2302      	movs	r3, #2
  }
}
 8002346:	4618      	mov	r0, r3
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	08002e7b 	.word	0x08002e7b
 8002358:	08002dd5 	.word	0x08002dd5

0800235c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b088      	sub	sp, #32
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	f003 030f 	and.w	r3, r3, #15
 8002382:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d113      	bne.n	80023b2 <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	f003 0320 	and.w	r3, r3, #32
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00e      	beq.n	80023b2 <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	f003 0320 	and.w	r3, r3, #32
 800239a:	2b00      	cmp	r3, #0
 800239c:	d009      	beq.n	80023b2 <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f000 80eb 	beq.w	800257e <HAL_UART_IRQHandler+0x222>
      {
        huart->RxISR(huart);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	4798      	blx	r3
      }
      return;
 80023b0:	e0e5      	b.n	800257e <HAL_UART_IRQHandler+0x222>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f000 80c0 	beq.w	800253a <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d105      	bne.n	80023d0 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f000 80b5 	beq.w	800253a <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00e      	beq.n	80023f8 <HAL_UART_IRQHandler+0x9c>
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d009      	beq.n	80023f8 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2201      	movs	r2, #1
 80023ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023f0:	f043 0201 	orr.w	r2, r3, #1
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00e      	beq.n	8002420 <HAL_UART_IRQHandler+0xc4>
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	2b00      	cmp	r3, #0
 800240a:	d009      	beq.n	8002420 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2202      	movs	r2, #2
 8002412:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002418:	f043 0204 	orr.w	r2, r3, #4
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	f003 0304 	and.w	r3, r3, #4
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00e      	beq.n	8002448 <HAL_UART_IRQHandler+0xec>
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	2b00      	cmp	r3, #0
 8002432:	d009      	beq.n	8002448 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2204      	movs	r2, #4
 800243a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002440:	f043 0202 	orr.w	r2, r3, #2
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	f003 0308 	and.w	r3, r3, #8
 800244e:	2b00      	cmp	r3, #0
 8002450:	d013      	beq.n	800247a <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	f003 0320 	and.w	r3, r3, #32
 8002458:	2b00      	cmp	r3, #0
 800245a:	d104      	bne.n	8002466 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002462:	2b00      	cmp	r3, #0
 8002464:	d009      	beq.n	800247a <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2208      	movs	r2, #8
 800246c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002472:	f043 0208 	orr.w	r2, r3, #8
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800247e:	2b00      	cmp	r3, #0
 8002480:	d07f      	beq.n	8002582 <HAL_UART_IRQHandler+0x226>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	f003 0320 	and.w	r3, r3, #32
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00c      	beq.n	80024a6 <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	f003 0320 	and.w	r3, r3, #32
 8002492:	2b00      	cmp	r3, #0
 8002494:	d007      	beq.n	80024a6 <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024aa:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b6:	2b40      	cmp	r3, #64	; 0x40
 80024b8:	d004      	beq.n	80024c4 <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d031      	beq.n	8002528 <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 fc36 	bl	8002d36 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d4:	2b40      	cmp	r3, #64	; 0x40
 80024d6:	d123      	bne.n	8002520 <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	689a      	ldr	r2, [r3, #8]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024e6:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d013      	beq.n	8002518 <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024f4:	4a26      	ldr	r2, [pc, #152]	; (8002590 <HAL_UART_IRQHandler+0x234>)
 80024f6:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7fe f91b 	bl	8000738 <HAL_DMA_Abort_IT>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d016      	beq.n	8002536 <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800250c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002512:	4610      	mov	r0, r2
 8002514:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002516:	e00e      	b.n	8002536 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 f845 	bl	80025a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800251e:	e00a      	b.n	8002536 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 f841 	bl	80025a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002526:	e006      	b.n	8002536 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 f83d 	bl	80025a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8002534:	e025      	b.n	8002582 <HAL_UART_IRQHandler+0x226>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002536:	bf00      	nop
    return;
 8002538:	e023      	b.n	8002582 <HAL_UART_IRQHandler+0x226>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002540:	2b00      	cmp	r3, #0
 8002542:	d00d      	beq.n	8002560 <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800254a:	2b00      	cmp	r3, #0
 800254c:	d008      	beq.n	8002560 <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002552:	2b00      	cmp	r3, #0
 8002554:	d017      	beq.n	8002586 <HAL_UART_IRQHandler+0x22a>
    {
      huart->TxISR(huart);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	4798      	blx	r3
    }
    return;
 800255e:	e012      	b.n	8002586 <HAL_UART_IRQHandler+0x22a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00e      	beq.n	8002588 <HAL_UART_IRQHandler+0x22c>
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002570:	2b00      	cmp	r3, #0
 8002572:	d009      	beq.n	8002588 <HAL_UART_IRQHandler+0x22c>
  {
    UART_EndTransmit_IT(huart);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 fc14 	bl	8002da2 <UART_EndTransmit_IT>
    return;
 800257a:	bf00      	nop
 800257c:	e004      	b.n	8002588 <HAL_UART_IRQHandler+0x22c>
      return;
 800257e:	bf00      	nop
 8002580:	e002      	b.n	8002588 <HAL_UART_IRQHandler+0x22c>
    return;
 8002582:	bf00      	nop
 8002584:	e000      	b.n	8002588 <HAL_UART_IRQHandler+0x22c>
    return;
 8002586:	bf00      	nop
  }

}
 8002588:	3720      	adds	r7, #32
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	08002d77 	.word	0x08002d77

08002594 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b088      	sub	sp, #32
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80025c8:	2300      	movs	r3, #0
 80025ca:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689a      	ldr	r2, [r3, #8]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	431a      	orrs	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	431a      	orrs	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	69db      	ldr	r3, [r3, #28]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	4bb1      	ldr	r3, [pc, #708]	; (80028b0 <UART_SetConfig+0x2f4>)
 80025ec:	4013      	ands	r3, r2
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	6812      	ldr	r2, [r2, #0]
 80025f2:	6939      	ldr	r1, [r7, #16]
 80025f4:	430b      	orrs	r3, r1
 80025f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	68da      	ldr	r2, [r3, #12]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	430a      	orrs	r2, r1
 800260c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	4313      	orrs	r3, r2
 800261c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	430a      	orrs	r2, r1
 8002630:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a9f      	ldr	r2, [pc, #636]	; (80028b4 <UART_SetConfig+0x2f8>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d121      	bne.n	8002680 <UART_SetConfig+0xc4>
 800263c:	4b9e      	ldr	r3, [pc, #632]	; (80028b8 <UART_SetConfig+0x2fc>)
 800263e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002642:	f003 0303 	and.w	r3, r3, #3
 8002646:	2b03      	cmp	r3, #3
 8002648:	d816      	bhi.n	8002678 <UART_SetConfig+0xbc>
 800264a:	a201      	add	r2, pc, #4	; (adr r2, 8002650 <UART_SetConfig+0x94>)
 800264c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002650:	08002661 	.word	0x08002661
 8002654:	0800266d 	.word	0x0800266d
 8002658:	08002667 	.word	0x08002667
 800265c:	08002673 	.word	0x08002673
 8002660:	2301      	movs	r3, #1
 8002662:	77fb      	strb	r3, [r7, #31]
 8002664:	e151      	b.n	800290a <UART_SetConfig+0x34e>
 8002666:	2302      	movs	r3, #2
 8002668:	77fb      	strb	r3, [r7, #31]
 800266a:	e14e      	b.n	800290a <UART_SetConfig+0x34e>
 800266c:	2304      	movs	r3, #4
 800266e:	77fb      	strb	r3, [r7, #31]
 8002670:	e14b      	b.n	800290a <UART_SetConfig+0x34e>
 8002672:	2308      	movs	r3, #8
 8002674:	77fb      	strb	r3, [r7, #31]
 8002676:	e148      	b.n	800290a <UART_SetConfig+0x34e>
 8002678:	2310      	movs	r3, #16
 800267a:	77fb      	strb	r3, [r7, #31]
 800267c:	bf00      	nop
 800267e:	e144      	b.n	800290a <UART_SetConfig+0x34e>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a8d      	ldr	r2, [pc, #564]	; (80028bc <UART_SetConfig+0x300>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d134      	bne.n	80026f4 <UART_SetConfig+0x138>
 800268a:	4b8b      	ldr	r3, [pc, #556]	; (80028b8 <UART_SetConfig+0x2fc>)
 800268c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002690:	f003 030c 	and.w	r3, r3, #12
 8002694:	2b0c      	cmp	r3, #12
 8002696:	d829      	bhi.n	80026ec <UART_SetConfig+0x130>
 8002698:	a201      	add	r2, pc, #4	; (adr r2, 80026a0 <UART_SetConfig+0xe4>)
 800269a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800269e:	bf00      	nop
 80026a0:	080026d5 	.word	0x080026d5
 80026a4:	080026ed 	.word	0x080026ed
 80026a8:	080026ed 	.word	0x080026ed
 80026ac:	080026ed 	.word	0x080026ed
 80026b0:	080026e1 	.word	0x080026e1
 80026b4:	080026ed 	.word	0x080026ed
 80026b8:	080026ed 	.word	0x080026ed
 80026bc:	080026ed 	.word	0x080026ed
 80026c0:	080026db 	.word	0x080026db
 80026c4:	080026ed 	.word	0x080026ed
 80026c8:	080026ed 	.word	0x080026ed
 80026cc:	080026ed 	.word	0x080026ed
 80026d0:	080026e7 	.word	0x080026e7
 80026d4:	2300      	movs	r3, #0
 80026d6:	77fb      	strb	r3, [r7, #31]
 80026d8:	e117      	b.n	800290a <UART_SetConfig+0x34e>
 80026da:	2302      	movs	r3, #2
 80026dc:	77fb      	strb	r3, [r7, #31]
 80026de:	e114      	b.n	800290a <UART_SetConfig+0x34e>
 80026e0:	2304      	movs	r3, #4
 80026e2:	77fb      	strb	r3, [r7, #31]
 80026e4:	e111      	b.n	800290a <UART_SetConfig+0x34e>
 80026e6:	2308      	movs	r3, #8
 80026e8:	77fb      	strb	r3, [r7, #31]
 80026ea:	e10e      	b.n	800290a <UART_SetConfig+0x34e>
 80026ec:	2310      	movs	r3, #16
 80026ee:	77fb      	strb	r3, [r7, #31]
 80026f0:	bf00      	nop
 80026f2:	e10a      	b.n	800290a <UART_SetConfig+0x34e>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a71      	ldr	r2, [pc, #452]	; (80028c0 <UART_SetConfig+0x304>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d120      	bne.n	8002740 <UART_SetConfig+0x184>
 80026fe:	4b6e      	ldr	r3, [pc, #440]	; (80028b8 <UART_SetConfig+0x2fc>)
 8002700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002704:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002708:	2b10      	cmp	r3, #16
 800270a:	d00f      	beq.n	800272c <UART_SetConfig+0x170>
 800270c:	2b10      	cmp	r3, #16
 800270e:	d802      	bhi.n	8002716 <UART_SetConfig+0x15a>
 8002710:	2b00      	cmp	r3, #0
 8002712:	d005      	beq.n	8002720 <UART_SetConfig+0x164>
 8002714:	e010      	b.n	8002738 <UART_SetConfig+0x17c>
 8002716:	2b20      	cmp	r3, #32
 8002718:	d005      	beq.n	8002726 <UART_SetConfig+0x16a>
 800271a:	2b30      	cmp	r3, #48	; 0x30
 800271c:	d009      	beq.n	8002732 <UART_SetConfig+0x176>
 800271e:	e00b      	b.n	8002738 <UART_SetConfig+0x17c>
 8002720:	2300      	movs	r3, #0
 8002722:	77fb      	strb	r3, [r7, #31]
 8002724:	e0f1      	b.n	800290a <UART_SetConfig+0x34e>
 8002726:	2302      	movs	r3, #2
 8002728:	77fb      	strb	r3, [r7, #31]
 800272a:	e0ee      	b.n	800290a <UART_SetConfig+0x34e>
 800272c:	2304      	movs	r3, #4
 800272e:	77fb      	strb	r3, [r7, #31]
 8002730:	e0eb      	b.n	800290a <UART_SetConfig+0x34e>
 8002732:	2308      	movs	r3, #8
 8002734:	77fb      	strb	r3, [r7, #31]
 8002736:	e0e8      	b.n	800290a <UART_SetConfig+0x34e>
 8002738:	2310      	movs	r3, #16
 800273a:	77fb      	strb	r3, [r7, #31]
 800273c:	bf00      	nop
 800273e:	e0e4      	b.n	800290a <UART_SetConfig+0x34e>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a5f      	ldr	r2, [pc, #380]	; (80028c4 <UART_SetConfig+0x308>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d120      	bne.n	800278c <UART_SetConfig+0x1d0>
 800274a:	4b5b      	ldr	r3, [pc, #364]	; (80028b8 <UART_SetConfig+0x2fc>)
 800274c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002750:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002754:	2b40      	cmp	r3, #64	; 0x40
 8002756:	d00f      	beq.n	8002778 <UART_SetConfig+0x1bc>
 8002758:	2b40      	cmp	r3, #64	; 0x40
 800275a:	d802      	bhi.n	8002762 <UART_SetConfig+0x1a6>
 800275c:	2b00      	cmp	r3, #0
 800275e:	d005      	beq.n	800276c <UART_SetConfig+0x1b0>
 8002760:	e010      	b.n	8002784 <UART_SetConfig+0x1c8>
 8002762:	2b80      	cmp	r3, #128	; 0x80
 8002764:	d005      	beq.n	8002772 <UART_SetConfig+0x1b6>
 8002766:	2bc0      	cmp	r3, #192	; 0xc0
 8002768:	d009      	beq.n	800277e <UART_SetConfig+0x1c2>
 800276a:	e00b      	b.n	8002784 <UART_SetConfig+0x1c8>
 800276c:	2300      	movs	r3, #0
 800276e:	77fb      	strb	r3, [r7, #31]
 8002770:	e0cb      	b.n	800290a <UART_SetConfig+0x34e>
 8002772:	2302      	movs	r3, #2
 8002774:	77fb      	strb	r3, [r7, #31]
 8002776:	e0c8      	b.n	800290a <UART_SetConfig+0x34e>
 8002778:	2304      	movs	r3, #4
 800277a:	77fb      	strb	r3, [r7, #31]
 800277c:	e0c5      	b.n	800290a <UART_SetConfig+0x34e>
 800277e:	2308      	movs	r3, #8
 8002780:	77fb      	strb	r3, [r7, #31]
 8002782:	e0c2      	b.n	800290a <UART_SetConfig+0x34e>
 8002784:	2310      	movs	r3, #16
 8002786:	77fb      	strb	r3, [r7, #31]
 8002788:	bf00      	nop
 800278a:	e0be      	b.n	800290a <UART_SetConfig+0x34e>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a4d      	ldr	r2, [pc, #308]	; (80028c8 <UART_SetConfig+0x30c>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d124      	bne.n	80027e0 <UART_SetConfig+0x224>
 8002796:	4b48      	ldr	r3, [pc, #288]	; (80028b8 <UART_SetConfig+0x2fc>)
 8002798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800279c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027a4:	d012      	beq.n	80027cc <UART_SetConfig+0x210>
 80027a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027aa:	d802      	bhi.n	80027b2 <UART_SetConfig+0x1f6>
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d007      	beq.n	80027c0 <UART_SetConfig+0x204>
 80027b0:	e012      	b.n	80027d8 <UART_SetConfig+0x21c>
 80027b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027b6:	d006      	beq.n	80027c6 <UART_SetConfig+0x20a>
 80027b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027bc:	d009      	beq.n	80027d2 <UART_SetConfig+0x216>
 80027be:	e00b      	b.n	80027d8 <UART_SetConfig+0x21c>
 80027c0:	2300      	movs	r3, #0
 80027c2:	77fb      	strb	r3, [r7, #31]
 80027c4:	e0a1      	b.n	800290a <UART_SetConfig+0x34e>
 80027c6:	2302      	movs	r3, #2
 80027c8:	77fb      	strb	r3, [r7, #31]
 80027ca:	e09e      	b.n	800290a <UART_SetConfig+0x34e>
 80027cc:	2304      	movs	r3, #4
 80027ce:	77fb      	strb	r3, [r7, #31]
 80027d0:	e09b      	b.n	800290a <UART_SetConfig+0x34e>
 80027d2:	2308      	movs	r3, #8
 80027d4:	77fb      	strb	r3, [r7, #31]
 80027d6:	e098      	b.n	800290a <UART_SetConfig+0x34e>
 80027d8:	2310      	movs	r3, #16
 80027da:	77fb      	strb	r3, [r7, #31]
 80027dc:	bf00      	nop
 80027de:	e094      	b.n	800290a <UART_SetConfig+0x34e>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a39      	ldr	r2, [pc, #228]	; (80028cc <UART_SetConfig+0x310>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d124      	bne.n	8002834 <UART_SetConfig+0x278>
 80027ea:	4b33      	ldr	r3, [pc, #204]	; (80028b8 <UART_SetConfig+0x2fc>)
 80027ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80027f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027f8:	d012      	beq.n	8002820 <UART_SetConfig+0x264>
 80027fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027fe:	d802      	bhi.n	8002806 <UART_SetConfig+0x24a>
 8002800:	2b00      	cmp	r3, #0
 8002802:	d007      	beq.n	8002814 <UART_SetConfig+0x258>
 8002804:	e012      	b.n	800282c <UART_SetConfig+0x270>
 8002806:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800280a:	d006      	beq.n	800281a <UART_SetConfig+0x25e>
 800280c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002810:	d009      	beq.n	8002826 <UART_SetConfig+0x26a>
 8002812:	e00b      	b.n	800282c <UART_SetConfig+0x270>
 8002814:	2301      	movs	r3, #1
 8002816:	77fb      	strb	r3, [r7, #31]
 8002818:	e077      	b.n	800290a <UART_SetConfig+0x34e>
 800281a:	2302      	movs	r3, #2
 800281c:	77fb      	strb	r3, [r7, #31]
 800281e:	e074      	b.n	800290a <UART_SetConfig+0x34e>
 8002820:	2304      	movs	r3, #4
 8002822:	77fb      	strb	r3, [r7, #31]
 8002824:	e071      	b.n	800290a <UART_SetConfig+0x34e>
 8002826:	2308      	movs	r3, #8
 8002828:	77fb      	strb	r3, [r7, #31]
 800282a:	e06e      	b.n	800290a <UART_SetConfig+0x34e>
 800282c:	2310      	movs	r3, #16
 800282e:	77fb      	strb	r3, [r7, #31]
 8002830:	bf00      	nop
 8002832:	e06a      	b.n	800290a <UART_SetConfig+0x34e>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a25      	ldr	r2, [pc, #148]	; (80028d0 <UART_SetConfig+0x314>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d124      	bne.n	8002888 <UART_SetConfig+0x2cc>
 800283e:	4b1e      	ldr	r3, [pc, #120]	; (80028b8 <UART_SetConfig+0x2fc>)
 8002840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002844:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800284c:	d012      	beq.n	8002874 <UART_SetConfig+0x2b8>
 800284e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002852:	d802      	bhi.n	800285a <UART_SetConfig+0x29e>
 8002854:	2b00      	cmp	r3, #0
 8002856:	d007      	beq.n	8002868 <UART_SetConfig+0x2ac>
 8002858:	e012      	b.n	8002880 <UART_SetConfig+0x2c4>
 800285a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800285e:	d006      	beq.n	800286e <UART_SetConfig+0x2b2>
 8002860:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002864:	d009      	beq.n	800287a <UART_SetConfig+0x2be>
 8002866:	e00b      	b.n	8002880 <UART_SetConfig+0x2c4>
 8002868:	2300      	movs	r3, #0
 800286a:	77fb      	strb	r3, [r7, #31]
 800286c:	e04d      	b.n	800290a <UART_SetConfig+0x34e>
 800286e:	2302      	movs	r3, #2
 8002870:	77fb      	strb	r3, [r7, #31]
 8002872:	e04a      	b.n	800290a <UART_SetConfig+0x34e>
 8002874:	2304      	movs	r3, #4
 8002876:	77fb      	strb	r3, [r7, #31]
 8002878:	e047      	b.n	800290a <UART_SetConfig+0x34e>
 800287a:	2308      	movs	r3, #8
 800287c:	77fb      	strb	r3, [r7, #31]
 800287e:	e044      	b.n	800290a <UART_SetConfig+0x34e>
 8002880:	2310      	movs	r3, #16
 8002882:	77fb      	strb	r3, [r7, #31]
 8002884:	bf00      	nop
 8002886:	e040      	b.n	800290a <UART_SetConfig+0x34e>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a11      	ldr	r2, [pc, #68]	; (80028d4 <UART_SetConfig+0x318>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d139      	bne.n	8002906 <UART_SetConfig+0x34a>
 8002892:	4b09      	ldr	r3, [pc, #36]	; (80028b8 <UART_SetConfig+0x2fc>)
 8002894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002898:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800289c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028a0:	d027      	beq.n	80028f2 <UART_SetConfig+0x336>
 80028a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028a6:	d817      	bhi.n	80028d8 <UART_SetConfig+0x31c>
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d01c      	beq.n	80028e6 <UART_SetConfig+0x32a>
 80028ac:	e027      	b.n	80028fe <UART_SetConfig+0x342>
 80028ae:	bf00      	nop
 80028b0:	efff69f3 	.word	0xefff69f3
 80028b4:	40011000 	.word	0x40011000
 80028b8:	40023800 	.word	0x40023800
 80028bc:	40004400 	.word	0x40004400
 80028c0:	40004800 	.word	0x40004800
 80028c4:	40004c00 	.word	0x40004c00
 80028c8:	40005000 	.word	0x40005000
 80028cc:	40011400 	.word	0x40011400
 80028d0:	40007800 	.word	0x40007800
 80028d4:	40007c00 	.word	0x40007c00
 80028d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028dc:	d006      	beq.n	80028ec <UART_SetConfig+0x330>
 80028de:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80028e2:	d009      	beq.n	80028f8 <UART_SetConfig+0x33c>
 80028e4:	e00b      	b.n	80028fe <UART_SetConfig+0x342>
 80028e6:	2300      	movs	r3, #0
 80028e8:	77fb      	strb	r3, [r7, #31]
 80028ea:	e00e      	b.n	800290a <UART_SetConfig+0x34e>
 80028ec:	2302      	movs	r3, #2
 80028ee:	77fb      	strb	r3, [r7, #31]
 80028f0:	e00b      	b.n	800290a <UART_SetConfig+0x34e>
 80028f2:	2304      	movs	r3, #4
 80028f4:	77fb      	strb	r3, [r7, #31]
 80028f6:	e008      	b.n	800290a <UART_SetConfig+0x34e>
 80028f8:	2308      	movs	r3, #8
 80028fa:	77fb      	strb	r3, [r7, #31]
 80028fc:	e005      	b.n	800290a <UART_SetConfig+0x34e>
 80028fe:	2310      	movs	r3, #16
 8002900:	77fb      	strb	r3, [r7, #31]
 8002902:	bf00      	nop
 8002904:	e001      	b.n	800290a <UART_SetConfig+0x34e>
 8002906:	2310      	movs	r3, #16
 8002908:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002912:	d17c      	bne.n	8002a0e <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8002914:	7ffb      	ldrb	r3, [r7, #31]
 8002916:	2b08      	cmp	r3, #8
 8002918:	d859      	bhi.n	80029ce <UART_SetConfig+0x412>
 800291a:	a201      	add	r2, pc, #4	; (adr r2, 8002920 <UART_SetConfig+0x364>)
 800291c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002920:	08002945 	.word	0x08002945
 8002924:	08002963 	.word	0x08002963
 8002928:	08002981 	.word	0x08002981
 800292c:	080029cf 	.word	0x080029cf
 8002930:	08002999 	.word	0x08002999
 8002934:	080029cf 	.word	0x080029cf
 8002938:	080029cf 	.word	0x080029cf
 800293c:	080029cf 	.word	0x080029cf
 8002940:	080029b7 	.word	0x080029b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002944:	f7fe fcda 	bl	80012fc <HAL_RCC_GetPCLK1Freq>
 8002948:	4603      	mov	r3, r0
 800294a:	005a      	lsls	r2, r3, #1
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	085b      	lsrs	r3, r3, #1
 8002952:	441a      	add	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	fbb2 f3f3 	udiv	r3, r2, r3
 800295c:	b29b      	uxth	r3, r3
 800295e:	61bb      	str	r3, [r7, #24]
        break;
 8002960:	e038      	b.n	80029d4 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002962:	f7fe fcdf 	bl	8001324 <HAL_RCC_GetPCLK2Freq>
 8002966:	4603      	mov	r3, r0
 8002968:	005a      	lsls	r2, r3, #1
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	085b      	lsrs	r3, r3, #1
 8002970:	441a      	add	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	fbb2 f3f3 	udiv	r3, r2, r3
 800297a:	b29b      	uxth	r3, r3
 800297c:	61bb      	str	r3, [r7, #24]
        break;
 800297e:	e029      	b.n	80029d4 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	085a      	lsrs	r2, r3, #1
 8002986:	4b5d      	ldr	r3, [pc, #372]	; (8002afc <UART_SetConfig+0x540>)
 8002988:	4413      	add	r3, r2
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	6852      	ldr	r2, [r2, #4]
 800298e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002992:	b29b      	uxth	r3, r3
 8002994:	61bb      	str	r3, [r7, #24]
        break;
 8002996:	e01d      	b.n	80029d4 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002998:	f7fe fbf2 	bl	8001180 <HAL_RCC_GetSysClockFreq>
 800299c:	4603      	mov	r3, r0
 800299e:	005a      	lsls	r2, r3, #1
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	085b      	lsrs	r3, r3, #1
 80029a6:	441a      	add	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	61bb      	str	r3, [r7, #24]
        break;
 80029b4:	e00e      	b.n	80029d4 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	085b      	lsrs	r3, r3, #1
 80029bc:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	61bb      	str	r3, [r7, #24]
        break;
 80029cc:	e002      	b.n	80029d4 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	75fb      	strb	r3, [r7, #23]
        break;
 80029d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	2b0f      	cmp	r3, #15
 80029d8:	d916      	bls.n	8002a08 <UART_SetConfig+0x44c>
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029e0:	d212      	bcs.n	8002a08 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	f023 030f 	bic.w	r3, r3, #15
 80029ea:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	085b      	lsrs	r3, r3, #1
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	89fb      	ldrh	r3, [r7, #14]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	89fa      	ldrh	r2, [r7, #14]
 8002a04:	60da      	str	r2, [r3, #12]
 8002a06:	e06e      	b.n	8002ae6 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	75fb      	strb	r3, [r7, #23]
 8002a0c:	e06b      	b.n	8002ae6 <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8002a0e:	7ffb      	ldrb	r3, [r7, #31]
 8002a10:	2b08      	cmp	r3, #8
 8002a12:	d857      	bhi.n	8002ac4 <UART_SetConfig+0x508>
 8002a14:	a201      	add	r2, pc, #4	; (adr r2, 8002a1c <UART_SetConfig+0x460>)
 8002a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a1a:	bf00      	nop
 8002a1c:	08002a41 	.word	0x08002a41
 8002a20:	08002a5d 	.word	0x08002a5d
 8002a24:	08002a79 	.word	0x08002a79
 8002a28:	08002ac5 	.word	0x08002ac5
 8002a2c:	08002a91 	.word	0x08002a91
 8002a30:	08002ac5 	.word	0x08002ac5
 8002a34:	08002ac5 	.word	0x08002ac5
 8002a38:	08002ac5 	.word	0x08002ac5
 8002a3c:	08002aad 	.word	0x08002aad
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002a40:	f7fe fc5c 	bl	80012fc <HAL_RCC_GetPCLK1Freq>
 8002a44:	4602      	mov	r2, r0
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	085b      	lsrs	r3, r3, #1
 8002a4c:	441a      	add	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	61bb      	str	r3, [r7, #24]
        break;
 8002a5a:	e036      	b.n	8002aca <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002a5c:	f7fe fc62 	bl	8001324 <HAL_RCC_GetPCLK2Freq>
 8002a60:	4602      	mov	r2, r0
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	085b      	lsrs	r3, r3, #1
 8002a68:	441a      	add	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	61bb      	str	r3, [r7, #24]
        break;
 8002a76:	e028      	b.n	8002aca <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	085a      	lsrs	r2, r3, #1
 8002a7e:	4b20      	ldr	r3, [pc, #128]	; (8002b00 <UART_SetConfig+0x544>)
 8002a80:	4413      	add	r3, r2
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	6852      	ldr	r2, [r2, #4]
 8002a86:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	61bb      	str	r3, [r7, #24]
        break;
 8002a8e:	e01c      	b.n	8002aca <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002a90:	f7fe fb76 	bl	8001180 <HAL_RCC_GetSysClockFreq>
 8002a94:	4602      	mov	r2, r0
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	085b      	lsrs	r3, r3, #1
 8002a9c:	441a      	add	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	61bb      	str	r3, [r7, #24]
        break;
 8002aaa:	e00e      	b.n	8002aca <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	085b      	lsrs	r3, r3, #1
 8002ab2:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	61bb      	str	r3, [r7, #24]
        break;
 8002ac2:	e002      	b.n	8002aca <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	75fb      	strb	r3, [r7, #23]
        break;
 8002ac8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	2b0f      	cmp	r3, #15
 8002ace:	d908      	bls.n	8002ae2 <UART_SetConfig+0x526>
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ad6:	d204      	bcs.n	8002ae2 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	60da      	str	r2, [r3, #12]
 8002ae0:	e001      	b.n	8002ae6 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002af2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3720      	adds	r7, #32
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	01e84800 	.word	0x01e84800
 8002b00:	00f42400 	.word	0x00f42400

08002b04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00a      	beq.n	8002b2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00a      	beq.n	8002b50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b54:	f003 0304 	and.w	r3, r3, #4
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00a      	beq.n	8002b72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b76:	f003 0308 	and.w	r3, r3, #8
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00a      	beq.n	8002b94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	430a      	orrs	r2, r1
 8002b92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b98:	f003 0310 	and.w	r3, r3, #16
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00a      	beq.n	8002bb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bba:	f003 0320 	and.w	r3, r3, #32
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00a      	beq.n	8002bd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d01a      	beq.n	8002c1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c02:	d10a      	bne.n	8002c1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	430a      	orrs	r2, r1
 8002c18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00a      	beq.n	8002c3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	605a      	str	r2, [r3, #4]
  }
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af02      	add	r7, sp, #8
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002c56:	f7fd fc81 	bl	800055c <HAL_GetTick>
 8002c5a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0308 	and.w	r3, r3, #8
 8002c66:	2b08      	cmp	r3, #8
 8002c68:	d10e      	bne.n	8002c88 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c6a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c6e:	9300      	str	r3, [sp, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 f814 	bl	8002ca6 <UART_WaitOnFlagUntilTimeout>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e00a      	b.n	8002c9e <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2220      	movs	r2, #32
 8002c92:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b084      	sub	sp, #16
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	60f8      	str	r0, [r7, #12]
 8002cae:	60b9      	str	r1, [r7, #8]
 8002cb0:	603b      	str	r3, [r7, #0]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cb6:	e02a      	b.n	8002d0e <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cbe:	d026      	beq.n	8002d0e <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cc0:	f7fd fc4c 	bl	800055c <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d302      	bcc.n	8002cd6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d11b      	bne.n	8002d0e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002ce4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f022 0201 	bic.w	r2, r2, #1
 8002cf4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2220      	movs	r2, #32
 8002cfa:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2220      	movs	r2, #32
 8002d00:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e00f      	b.n	8002d2e <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	69da      	ldr	r2, [r3, #28]
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	4013      	ands	r3, r2
 8002d18:	68ba      	ldr	r2, [r7, #8]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	bf0c      	ite	eq
 8002d1e:	2301      	moveq	r3, #1
 8002d20:	2300      	movne	r3, #0
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	461a      	mov	r2, r3
 8002d26:	79fb      	ldrb	r3, [r7, #7]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d0c5      	beq.n	8002cb8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b083      	sub	sp, #12
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002d4c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 0201 	bic.w	r2, r2, #1
 8002d5c:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2220      	movs	r2, #32
 8002d62:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	661a      	str	r2, [r3, #96]	; 0x60
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b084      	sub	sp, #16
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f7ff fc07 	bl	80025a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d9a:	bf00      	nop
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b082      	sub	sp, #8
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002db8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2220      	movs	r2, #32
 8002dbe:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f7ff fbe4 	bl	8002594 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002dcc:	bf00      	nop
 8002dce:	3708      	adds	r7, #8
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002de2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002de8:	2b22      	cmp	r3, #34	; 0x22
 8002dea:	d13a      	bne.n	8002e62 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df2:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002df4:	89bb      	ldrh	r3, [r7, #12]
 8002df6:	b2d9      	uxtb	r1, r3
 8002df8:	89fb      	ldrh	r3, [r7, #14]
 8002dfa:	b2da      	uxtb	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e00:	400a      	ands	r2, r1
 8002e02:	b2d2      	uxtb	r2, r2
 8002e04:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e0a:	1c5a      	adds	r2, r3, #1
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d121      	bne.n	8002e72 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002e3c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 0201 	bic.w	r2, r2, #1
 8002e4c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2220      	movs	r2, #32
 8002e52:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 f986 	bl	800316c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002e60:	e007      	b.n	8002e72 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	699a      	ldr	r2, [r3, #24]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f042 0208 	orr.w	r2, r2, #8
 8002e70:	619a      	str	r2, [r3, #24]
}
 8002e72:	bf00      	nop
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b084      	sub	sp, #16
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002e88:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e8e:	2b22      	cmp	r3, #34	; 0x22
 8002e90:	d13a      	bne.n	8002f08 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e9e:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8002ea0:	89ba      	ldrh	r2, [r7, #12]
 8002ea2:	89fb      	ldrh	r3, [r7, #14]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb0:	1c9a      	adds	r2, r3, #2
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d121      	bne.n	8002f18 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002ee2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689a      	ldr	r2, [r3, #8]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 0201 	bic.w	r2, r2, #1
 8002ef2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f000 f933 	bl	800316c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8002f06:	e007      	b.n	8002f18 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	699a      	ldr	r2, [r3, #24]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f042 0208 	orr.w	r2, r2, #8
 8002f16:	619a      	str	r2, [r3, #24]
}
 8002f18:	bf00      	nop
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002f24:	f7fd faf8 	bl	8000518 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002f28:	f000 f82a 	bl	8002f80 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002f2c:	f000 f8e2 	bl	80030f4 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8002f30:	f000 f8b0 	bl	8003094 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	HAL_UART_Receive_IT(&huart1, &character, 1);
 8002f34:	2201      	movs	r2, #1
 8002f36:	490d      	ldr	r1, [pc, #52]	; (8002f6c <main+0x4c>)
 8002f38:	480d      	ldr	r0, [pc, #52]	; (8002f70 <main+0x50>)
 8002f3a:	f7ff f96d 	bl	8002218 <HAL_UART_Receive_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (print == 1) {
 8002f3e:	4b0d      	ldr	r3, [pc, #52]	; (8002f74 <main+0x54>)
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d1fb      	bne.n	8002f3e <main+0x1e>
			HAL_UART_Transmit(&huart1, (uint8_t*) text, strlen(text), 0xFFFF);
 8002f46:	480c      	ldr	r0, [pc, #48]	; (8002f78 <main+0x58>)
 8002f48:	f7fd f95e 	bl	8000208 <strlen>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f54:	4908      	ldr	r1, [pc, #32]	; (8002f78 <main+0x58>)
 8002f56:	4806      	ldr	r0, [pc, #24]	; (8002f70 <main+0x50>)
 8002f58:	f7ff f8cc 	bl	80020f4 <HAL_UART_Transmit>
			print = 0;
 8002f5c:	4b05      	ldr	r3, [pc, #20]	; (8002f74 <main+0x54>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	701a      	strb	r2, [r3, #0]
			counter = 0;
 8002f62:	4b06      	ldr	r3, [pc, #24]	; (8002f7c <main+0x5c>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]
		if (print == 1) {
 8002f68:	e7e9      	b.n	8002f3e <main+0x1e>
 8002f6a:	bf00      	nop
 8002f6c:	20000030 	.word	0x20000030
 8002f70:	20000098 	.word	0x20000098
 8002f74:	20000028 	.word	0x20000028
 8002f78:	20000034 	.word	0x20000034
 8002f7c:	20000024 	.word	0x20000024

08002f80 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b0b4      	sub	sp, #208	; 0xd0
 8002f84:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002f86:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002f8a:	2230      	movs	r2, #48	; 0x30
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f000 faee 	bl	8003570 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002f94:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002f98:	2200      	movs	r2, #0
 8002f9a:	601a      	str	r2, [r3, #0]
 8002f9c:	605a      	str	r2, [r3, #4]
 8002f9e:	609a      	str	r2, [r3, #8]
 8002fa0:	60da      	str	r2, [r3, #12]
 8002fa2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8002fa4:	f107 0308 	add.w	r3, r7, #8
 8002fa8:	2284      	movs	r2, #132	; 0x84
 8002faa:	2100      	movs	r1, #0
 8002fac:	4618      	mov	r0, r3
 8002fae:	f000 fadf 	bl	8003570 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE()
 8002fb2:	4b36      	ldr	r3, [pc, #216]	; (800308c <SystemClock_Config+0x10c>)
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	4a35      	ldr	r2, [pc, #212]	; (800308c <SystemClock_Config+0x10c>)
 8002fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8002fbe:	4b33      	ldr	r3, [pc, #204]	; (800308c <SystemClock_Config+0x10c>)
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc6:	607b      	str	r3, [r7, #4]
 8002fc8:	687b      	ldr	r3, [r7, #4]
	;
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002fca:	4b31      	ldr	r3, [pc, #196]	; (8003090 <SystemClock_Config+0x110>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002fd2:	4a2f      	ldr	r2, [pc, #188]	; (8003090 <SystemClock_Config+0x110>)
 8002fd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fd8:	6013      	str	r3, [r2, #0]
 8002fda:	4b2d      	ldr	r3, [pc, #180]	; (8003090 <SystemClock_Config+0x110>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002fe2:	603b      	str	r3, [r7, #0]
 8002fe4:	683b      	ldr	r3, [r7, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002fec:	2301      	movs	r3, #1
 8002fee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ff2:	2310      	movs	r3, #16
 8002ff4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002ffe:	2300      	movs	r3, #0
 8003000:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLM = 10;
 8003004:	230a      	movs	r3, #10
 8003006:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	RCC_OscInitStruct.PLL.PLLN = 210;
 800300a:	23d2      	movs	r3, #210	; 0xd2
 800300c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003010:	2302      	movs	r3, #2
 8003012:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8003016:	2302      	movs	r3, #2
 8003018:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800301c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003020:	4618      	mov	r0, r3
 8003022:	f7fd fd55 	bl	8000ad0 <HAL_RCC_OscConfig>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <SystemClock_Config+0xb0>
		Error_Handler();
 800302c:	f000 f8ea 	bl	8003204 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003030:	230f      	movs	r3, #15
 8003032:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003036:	2302      	movs	r3, #2
 8003038:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800303c:	2300      	movs	r3, #0
 800303e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003042:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003046:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800304a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800304e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8003052:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003056:	2105      	movs	r1, #5
 8003058:	4618      	mov	r0, r3
 800305a:	f7fd ffa9 	bl	8000fb0 <HAL_RCC_ClockConfig>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <SystemClock_Config+0xe8>
		Error_Handler();
 8003064:	f000 f8ce 	bl	8003204 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003068:	2340      	movs	r3, #64	; 0x40
 800306a:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800306c:	2300      	movs	r3, #0
 800306e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8003070:	f107 0308 	add.w	r3, r7, #8
 8003074:	4618      	mov	r0, r3
 8003076:	f7fe f99b 	bl	80013b0 <HAL_RCCEx_PeriphCLKConfig>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <SystemClock_Config+0x104>
		Error_Handler();
 8003080:	f000 f8c0 	bl	8003204 <Error_Handler>
	}
}
 8003084:	bf00      	nop
 8003086:	37d0      	adds	r7, #208	; 0xd0
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	40023800 	.word	0x40023800
 8003090:	40007000 	.word	0x40007000

08003094 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8003098:	4b14      	ldr	r3, [pc, #80]	; (80030ec <MX_USART1_UART_Init+0x58>)
 800309a:	4a15      	ldr	r2, [pc, #84]	; (80030f0 <MX_USART1_UART_Init+0x5c>)
 800309c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800309e:	4b13      	ldr	r3, [pc, #76]	; (80030ec <MX_USART1_UART_Init+0x58>)
 80030a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80030a4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80030a6:	4b11      	ldr	r3, [pc, #68]	; (80030ec <MX_USART1_UART_Init+0x58>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80030ac:	4b0f      	ldr	r3, [pc, #60]	; (80030ec <MX_USART1_UART_Init+0x58>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80030b2:	4b0e      	ldr	r3, [pc, #56]	; (80030ec <MX_USART1_UART_Init+0x58>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80030b8:	4b0c      	ldr	r3, [pc, #48]	; (80030ec <MX_USART1_UART_Init+0x58>)
 80030ba:	220c      	movs	r2, #12
 80030bc:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030be:	4b0b      	ldr	r3, [pc, #44]	; (80030ec <MX_USART1_UART_Init+0x58>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80030c4:	4b09      	ldr	r3, [pc, #36]	; (80030ec <MX_USART1_UART_Init+0x58>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030ca:	4b08      	ldr	r3, [pc, #32]	; (80030ec <MX_USART1_UART_Init+0x58>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030d0:	4b06      	ldr	r3, [pc, #24]	; (80030ec <MX_USART1_UART_Init+0x58>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80030d6:	4805      	ldr	r0, [pc, #20]	; (80030ec <MX_USART1_UART_Init+0x58>)
 80030d8:	f7fe ffbe 	bl	8002058 <HAL_UART_Init>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <MX_USART1_UART_Init+0x52>
		Error_Handler();
 80030e2:	f000 f88f 	bl	8003204 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80030e6:	bf00      	nop
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	20000098 	.word	0x20000098
 80030f0:	40011000 	.word	0x40011000

080030f4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE()
 80030fa:	4b1b      	ldr	r3, [pc, #108]	; (8003168 <MX_GPIO_Init+0x74>)
 80030fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fe:	4a1a      	ldr	r2, [pc, #104]	; (8003168 <MX_GPIO_Init+0x74>)
 8003100:	f043 0301 	orr.w	r3, r3, #1
 8003104:	6313      	str	r3, [r2, #48]	; 0x30
 8003106:	4b18      	ldr	r3, [pc, #96]	; (8003168 <MX_GPIO_Init+0x74>)
 8003108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	68fb      	ldr	r3, [r7, #12]
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8003112:	4b15      	ldr	r3, [pc, #84]	; (8003168 <MX_GPIO_Init+0x74>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003116:	4a14      	ldr	r2, [pc, #80]	; (8003168 <MX_GPIO_Init+0x74>)
 8003118:	f043 0302 	orr.w	r3, r3, #2
 800311c:	6313      	str	r3, [r2, #48]	; 0x30
 800311e:	4b12      	ldr	r3, [pc, #72]	; (8003168 <MX_GPIO_Init+0x74>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	60bb      	str	r3, [r7, #8]
 8003128:	68bb      	ldr	r3, [r7, #8]
	;
	__HAL_RCC_GPIOC_CLK_ENABLE()
 800312a:	4b0f      	ldr	r3, [pc, #60]	; (8003168 <MX_GPIO_Init+0x74>)
 800312c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312e:	4a0e      	ldr	r2, [pc, #56]	; (8003168 <MX_GPIO_Init+0x74>)
 8003130:	f043 0304 	orr.w	r3, r3, #4
 8003134:	6313      	str	r3, [r2, #48]	; 0x30
 8003136:	4b0c      	ldr	r3, [pc, #48]	; (8003168 <MX_GPIO_Init+0x74>)
 8003138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313a:	f003 0304 	and.w	r3, r3, #4
 800313e:	607b      	str	r3, [r7, #4]
 8003140:	687b      	ldr	r3, [r7, #4]
	;
	__HAL_RCC_GPIOH_CLK_ENABLE()
 8003142:	4b09      	ldr	r3, [pc, #36]	; (8003168 <MX_GPIO_Init+0x74>)
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	4a08      	ldr	r2, [pc, #32]	; (8003168 <MX_GPIO_Init+0x74>)
 8003148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800314c:	6313      	str	r3, [r2, #48]	; 0x30
 800314e:	4b06      	ldr	r3, [pc, #24]	; (8003168 <MX_GPIO_Init+0x74>)
 8003150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003156:	603b      	str	r3, [r7, #0]
 8003158:	683b      	ldr	r3, [r7, #0]
	;

}
 800315a:	bf00      	nop
 800315c:	3714      	adds	r7, #20
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	40023800 	.word	0x40023800

0800316c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a13      	ldr	r2, [pc, #76]	; (80031c8 <HAL_UART_RxCpltCallback+0x5c>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d11f      	bne.n	80031be <HAL_UART_RxCpltCallback+0x52>
		text[counter] = character;
 800317e:	4b13      	ldr	r3, [pc, #76]	; (80031cc <HAL_UART_RxCpltCallback+0x60>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a13      	ldr	r2, [pc, #76]	; (80031d0 <HAL_UART_RxCpltCallback+0x64>)
 8003184:	7811      	ldrb	r1, [r2, #0]
 8003186:	4a13      	ldr	r2, [pc, #76]	; (80031d4 <HAL_UART_RxCpltCallback+0x68>)
 8003188:	54d1      	strb	r1, [r2, r3]
		counter++;
 800318a:	4b10      	ldr	r3, [pc, #64]	; (80031cc <HAL_UART_RxCpltCallback+0x60>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	3301      	adds	r3, #1
 8003190:	4a0e      	ldr	r2, [pc, #56]	; (80031cc <HAL_UART_RxCpltCallback+0x60>)
 8003192:	6013      	str	r3, [r2, #0]

		if (text[counter - 1] == '\n') {
 8003194:	4b0d      	ldr	r3, [pc, #52]	; (80031cc <HAL_UART_RxCpltCallback+0x60>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	3b01      	subs	r3, #1
 800319a:	4a0e      	ldr	r2, [pc, #56]	; (80031d4 <HAL_UART_RxCpltCallback+0x68>)
 800319c:	5cd3      	ldrb	r3, [r2, r3]
 800319e:	2b0a      	cmp	r3, #10
 80031a0:	d108      	bne.n	80031b4 <HAL_UART_RxCpltCallback+0x48>
			text[counter + 1] = '\0';
 80031a2:	4b0a      	ldr	r3, [pc, #40]	; (80031cc <HAL_UART_RxCpltCallback+0x60>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	3301      	adds	r3, #1
 80031a8:	4a0a      	ldr	r2, [pc, #40]	; (80031d4 <HAL_UART_RxCpltCallback+0x68>)
 80031aa:	2100      	movs	r1, #0
 80031ac:	54d1      	strb	r1, [r2, r3]
			print = 1;
 80031ae:	4b0a      	ldr	r3, [pc, #40]	; (80031d8 <HAL_UART_RxCpltCallback+0x6c>)
 80031b0:	2201      	movs	r2, #1
 80031b2:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(&huart1, &character, 1);
 80031b4:	2201      	movs	r2, #1
 80031b6:	4906      	ldr	r1, [pc, #24]	; (80031d0 <HAL_UART_RxCpltCallback+0x64>)
 80031b8:	4808      	ldr	r0, [pc, #32]	; (80031dc <HAL_UART_RxCpltCallback+0x70>)
 80031ba:	f7ff f82d 	bl	8002218 <HAL_UART_Receive_IT>
	}
}
 80031be:	bf00      	nop
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	40011000 	.word	0x40011000
 80031cc:	20000024 	.word	0x20000024
 80031d0:	20000030 	.word	0x20000030
 80031d4:	20000034 	.word	0x20000034
 80031d8:	20000028 	.word	0x20000028
 80031dc:	20000098 	.word	0x20000098

080031e0 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM14) {
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a04      	ldr	r2, [pc, #16]	; (8003200 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d101      	bne.n	80031f6 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80031f2:	f7fd f99f 	bl	8000534 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80031f6:	bf00      	nop
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	40002000 	.word	0x40002000

08003204 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8003208:	bf00      	nop
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
	...

08003214 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800321a:	4b0f      	ldr	r3, [pc, #60]	; (8003258 <HAL_MspInit+0x44>)
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	4a0e      	ldr	r2, [pc, #56]	; (8003258 <HAL_MspInit+0x44>)
 8003220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003224:	6413      	str	r3, [r2, #64]	; 0x40
 8003226:	4b0c      	ldr	r3, [pc, #48]	; (8003258 <HAL_MspInit+0x44>)
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800322e:	607b      	str	r3, [r7, #4]
 8003230:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003232:	4b09      	ldr	r3, [pc, #36]	; (8003258 <HAL_MspInit+0x44>)
 8003234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003236:	4a08      	ldr	r2, [pc, #32]	; (8003258 <HAL_MspInit+0x44>)
 8003238:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800323c:	6453      	str	r3, [r2, #68]	; 0x44
 800323e:	4b06      	ldr	r3, [pc, #24]	; (8003258 <HAL_MspInit+0x44>)
 8003240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003242:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003246:	603b      	str	r3, [r7, #0]
 8003248:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800324a:	bf00      	nop
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	40023800 	.word	0x40023800

0800325c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b08a      	sub	sp, #40	; 0x28
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003264:	f107 0314 	add.w	r3, r7, #20
 8003268:	2200      	movs	r2, #0
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	605a      	str	r2, [r3, #4]
 800326e:	609a      	str	r2, [r3, #8]
 8003270:	60da      	str	r2, [r3, #12]
 8003272:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a29      	ldr	r2, [pc, #164]	; (8003320 <HAL_UART_MspInit+0xc4>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d14c      	bne.n	8003318 <HAL_UART_MspInit+0xbc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800327e:	4b29      	ldr	r3, [pc, #164]	; (8003324 <HAL_UART_MspInit+0xc8>)
 8003280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003282:	4a28      	ldr	r2, [pc, #160]	; (8003324 <HAL_UART_MspInit+0xc8>)
 8003284:	f043 0310 	orr.w	r3, r3, #16
 8003288:	6453      	str	r3, [r2, #68]	; 0x44
 800328a:	4b26      	ldr	r3, [pc, #152]	; (8003324 <HAL_UART_MspInit+0xc8>)
 800328c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328e:	f003 0310 	and.w	r3, r3, #16
 8003292:	613b      	str	r3, [r7, #16]
 8003294:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003296:	4b23      	ldr	r3, [pc, #140]	; (8003324 <HAL_UART_MspInit+0xc8>)
 8003298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329a:	4a22      	ldr	r2, [pc, #136]	; (8003324 <HAL_UART_MspInit+0xc8>)
 800329c:	f043 0302 	orr.w	r3, r3, #2
 80032a0:	6313      	str	r3, [r2, #48]	; 0x30
 80032a2:	4b20      	ldr	r3, [pc, #128]	; (8003324 <HAL_UART_MspInit+0xc8>)
 80032a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	60fb      	str	r3, [r7, #12]
 80032ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ae:	4b1d      	ldr	r3, [pc, #116]	; (8003324 <HAL_UART_MspInit+0xc8>)
 80032b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b2:	4a1c      	ldr	r2, [pc, #112]	; (8003324 <HAL_UART_MspInit+0xc8>)
 80032b4:	f043 0301 	orr.w	r3, r3, #1
 80032b8:	6313      	str	r3, [r2, #48]	; 0x30
 80032ba:	4b1a      	ldr	r3, [pc, #104]	; (8003324 <HAL_UART_MspInit+0xc8>)
 80032bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	60bb      	str	r3, [r7, #8]
 80032c4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80032c6:	2380      	movs	r3, #128	; 0x80
 80032c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ca:	2302      	movs	r3, #2
 80032cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ce:	2300      	movs	r3, #0
 80032d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032d2:	2303      	movs	r3, #3
 80032d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032d6:	2307      	movs	r3, #7
 80032d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032da:	f107 0314 	add.w	r3, r7, #20
 80032de:	4619      	mov	r1, r3
 80032e0:	4811      	ldr	r0, [pc, #68]	; (8003328 <HAL_UART_MspInit+0xcc>)
 80032e2:	f7fd fa4b 	bl	800077c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80032e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ec:	2302      	movs	r3, #2
 80032ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f0:	2300      	movs	r3, #0
 80032f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032f4:	2303      	movs	r3, #3
 80032f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032f8:	2307      	movs	r3, #7
 80032fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032fc:	f107 0314 	add.w	r3, r7, #20
 8003300:	4619      	mov	r1, r3
 8003302:	480a      	ldr	r0, [pc, #40]	; (800332c <HAL_UART_MspInit+0xd0>)
 8003304:	f7fd fa3a 	bl	800077c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8003308:	2200      	movs	r2, #0
 800330a:	2101      	movs	r1, #1
 800330c:	2025      	movs	r0, #37	; 0x25
 800330e:	f7fd f9e9 	bl	80006e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003312:	2025      	movs	r0, #37	; 0x25
 8003314:	f7fd fa02 	bl	800071c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003318:	bf00      	nop
 800331a:	3728      	adds	r7, #40	; 0x28
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	40011000 	.word	0x40011000
 8003324:	40023800 	.word	0x40023800
 8003328:	40020400 	.word	0x40020400
 800332c:	40020000 	.word	0x40020000

08003330 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b08c      	sub	sp, #48	; 0x30
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003338:	2300      	movs	r3, #0
 800333a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800333c:	2300      	movs	r3, #0
 800333e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0); 
 8003340:	2200      	movs	r2, #0
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	202d      	movs	r0, #45	; 0x2d
 8003346:	f7fd f9cd 	bl	80006e4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn); 
 800334a:	202d      	movs	r0, #45	; 0x2d
 800334c:	f7fd f9e6 	bl	800071c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8003350:	4b1f      	ldr	r3, [pc, #124]	; (80033d0 <HAL_InitTick+0xa0>)
 8003352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003354:	4a1e      	ldr	r2, [pc, #120]	; (80033d0 <HAL_InitTick+0xa0>)
 8003356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800335a:	6413      	str	r3, [r2, #64]	; 0x40
 800335c:	4b1c      	ldr	r3, [pc, #112]	; (80033d0 <HAL_InitTick+0xa0>)
 800335e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003364:	60fb      	str	r3, [r7, #12]
 8003366:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003368:	f107 0210 	add.w	r2, r7, #16
 800336c:	f107 0314 	add.w	r3, r7, #20
 8003370:	4611      	mov	r1, r2
 8003372:	4618      	mov	r0, r3
 8003374:	f7fd ffea 	bl	800134c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003378:	f7fd ffc0 	bl	80012fc <HAL_RCC_GetPCLK1Freq>
 800337c:	4603      	mov	r3, r0
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003384:	4a13      	ldr	r2, [pc, #76]	; (80033d4 <HAL_InitTick+0xa4>)
 8003386:	fba2 2303 	umull	r2, r3, r2, r3
 800338a:	0c9b      	lsrs	r3, r3, #18
 800338c:	3b01      	subs	r3, #1
 800338e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8003390:	4b11      	ldr	r3, [pc, #68]	; (80033d8 <HAL_InitTick+0xa8>)
 8003392:	4a12      	ldr	r2, [pc, #72]	; (80033dc <HAL_InitTick+0xac>)
 8003394:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000 / 1000) - 1;
 8003396:	4b10      	ldr	r3, [pc, #64]	; (80033d8 <HAL_InitTick+0xa8>)
 8003398:	f240 32e7 	movw	r2, #999	; 0x3e7
 800339c:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 800339e:	4a0e      	ldr	r2, [pc, #56]	; (80033d8 <HAL_InitTick+0xa8>)
 80033a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a2:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80033a4:	4b0c      	ldr	r3, [pc, #48]	; (80033d8 <HAL_InitTick+0xa8>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033aa:	4b0b      	ldr	r3, [pc, #44]	; (80033d8 <HAL_InitTick+0xa8>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 80033b0:	4809      	ldr	r0, [pc, #36]	; (80033d8 <HAL_InitTick+0xa8>)
 80033b2:	f7fe fbeb 	bl	8001b8c <HAL_TIM_Base_Init>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d104      	bne.n	80033c6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 80033bc:	4806      	ldr	r0, [pc, #24]	; (80033d8 <HAL_InitTick+0xa8>)
 80033be:	f7fe fc1b 	bl	8001bf8 <HAL_TIM_Base_Start_IT>
 80033c2:	4603      	mov	r3, r0
 80033c4:	e000      	b.n	80033c8 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3730      	adds	r7, #48	; 0x30
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	40023800 	.word	0x40023800
 80033d4:	431bde83 	.word	0x431bde83
 80033d8:	20000118 	.word	0x20000118
 80033dc:	40002000 	.word	0x40002000

080033e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80033e4:	bf00      	nop
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr

080033ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033ee:	b480      	push	{r7}
 80033f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033f2:	e7fe      	b.n	80033f2 <HardFault_Handler+0x4>

080033f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033f8:	e7fe      	b.n	80033f8 <MemManage_Handler+0x4>

080033fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033fa:	b480      	push	{r7}
 80033fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033fe:	e7fe      	b.n	80033fe <BusFault_Handler+0x4>

08003400 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003404:	e7fe      	b.n	8003404 <UsageFault_Handler+0x4>

08003406 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003406:	b480      	push	{r7}
 8003408:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800340a:	bf00      	nop
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003418:	bf00      	nop
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr

08003422 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003422:	b480      	push	{r7}
 8003424:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003426:	bf00      	nop
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003434:	bf00      	nop
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
	...

08003440 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003444:	4802      	ldr	r0, [pc, #8]	; (8003450 <USART1_IRQHandler+0x10>)
 8003446:	f7fe ff89 	bl	800235c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800344a:	bf00      	nop
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	20000098 	.word	0x20000098

08003454 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8003458:	4802      	ldr	r0, [pc, #8]	; (8003464 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800345a:	f7fe fbf7 	bl	8001c4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800345e:	bf00      	nop
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	20000118 	.word	0x20000118

08003468 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800346c:	4b15      	ldr	r3, [pc, #84]	; (80034c4 <SystemInit+0x5c>)
 800346e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003472:	4a14      	ldr	r2, [pc, #80]	; (80034c4 <SystemInit+0x5c>)
 8003474:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003478:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800347c:	4b12      	ldr	r3, [pc, #72]	; (80034c8 <SystemInit+0x60>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a11      	ldr	r2, [pc, #68]	; (80034c8 <SystemInit+0x60>)
 8003482:	f043 0301 	orr.w	r3, r3, #1
 8003486:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003488:	4b0f      	ldr	r3, [pc, #60]	; (80034c8 <SystemInit+0x60>)
 800348a:	2200      	movs	r2, #0
 800348c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800348e:	4b0e      	ldr	r3, [pc, #56]	; (80034c8 <SystemInit+0x60>)
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	490d      	ldr	r1, [pc, #52]	; (80034c8 <SystemInit+0x60>)
 8003494:	4b0d      	ldr	r3, [pc, #52]	; (80034cc <SystemInit+0x64>)
 8003496:	4013      	ands	r3, r2
 8003498:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800349a:	4b0b      	ldr	r3, [pc, #44]	; (80034c8 <SystemInit+0x60>)
 800349c:	4a0c      	ldr	r2, [pc, #48]	; (80034d0 <SystemInit+0x68>)
 800349e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80034a0:	4b09      	ldr	r3, [pc, #36]	; (80034c8 <SystemInit+0x60>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a08      	ldr	r2, [pc, #32]	; (80034c8 <SystemInit+0x60>)
 80034a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034aa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80034ac:	4b06      	ldr	r3, [pc, #24]	; (80034c8 <SystemInit+0x60>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80034b2:	4b04      	ldr	r3, [pc, #16]	; (80034c4 <SystemInit+0x5c>)
 80034b4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80034b8:	609a      	str	r2, [r3, #8]
#endif
}
 80034ba:	bf00      	nop
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr
 80034c4:	e000ed00 	.word	0xe000ed00
 80034c8:	40023800 	.word	0x40023800
 80034cc:	fef6ffff 	.word	0xfef6ffff
 80034d0:	24003010 	.word	0x24003010

080034d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80034d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800350c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80034d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80034da:	e003      	b.n	80034e4 <LoopCopyDataInit>

080034dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80034dc:	4b0c      	ldr	r3, [pc, #48]	; (8003510 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80034de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80034e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80034e2:	3104      	adds	r1, #4

080034e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80034e4:	480b      	ldr	r0, [pc, #44]	; (8003514 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80034e6:	4b0c      	ldr	r3, [pc, #48]	; (8003518 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80034e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80034ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80034ec:	d3f6      	bcc.n	80034dc <CopyDataInit>
  ldr  r2, =_sbss
 80034ee:	4a0b      	ldr	r2, [pc, #44]	; (800351c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80034f0:	e002      	b.n	80034f8 <LoopFillZerobss>

080034f2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80034f2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80034f4:	f842 3b04 	str.w	r3, [r2], #4

080034f8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80034f8:	4b09      	ldr	r3, [pc, #36]	; (8003520 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80034fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80034fc:	d3f9      	bcc.n	80034f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80034fe:	f7ff ffb3 	bl	8003468 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003502:	f000 f811 	bl	8003528 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003506:	f7ff fd0b 	bl	8002f20 <main>
  bx  lr    
 800350a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800350c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8003510:	080035c0 	.word	0x080035c0
  ldr  r0, =_sdata
 8003514:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003518:	20000008 	.word	0x20000008
  ldr  r2, =_sbss
 800351c:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 8003520:	20000158 	.word	0x20000158

08003524 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003524:	e7fe      	b.n	8003524 <ADC_IRQHandler>
	...

08003528 <__libc_init_array>:
 8003528:	b570      	push	{r4, r5, r6, lr}
 800352a:	4e0d      	ldr	r6, [pc, #52]	; (8003560 <__libc_init_array+0x38>)
 800352c:	4c0d      	ldr	r4, [pc, #52]	; (8003564 <__libc_init_array+0x3c>)
 800352e:	1ba4      	subs	r4, r4, r6
 8003530:	10a4      	asrs	r4, r4, #2
 8003532:	2500      	movs	r5, #0
 8003534:	42a5      	cmp	r5, r4
 8003536:	d109      	bne.n	800354c <__libc_init_array+0x24>
 8003538:	4e0b      	ldr	r6, [pc, #44]	; (8003568 <__libc_init_array+0x40>)
 800353a:	4c0c      	ldr	r4, [pc, #48]	; (800356c <__libc_init_array+0x44>)
 800353c:	f000 f820 	bl	8003580 <_init>
 8003540:	1ba4      	subs	r4, r4, r6
 8003542:	10a4      	asrs	r4, r4, #2
 8003544:	2500      	movs	r5, #0
 8003546:	42a5      	cmp	r5, r4
 8003548:	d105      	bne.n	8003556 <__libc_init_array+0x2e>
 800354a:	bd70      	pop	{r4, r5, r6, pc}
 800354c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003550:	4798      	blx	r3
 8003552:	3501      	adds	r5, #1
 8003554:	e7ee      	b.n	8003534 <__libc_init_array+0xc>
 8003556:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800355a:	4798      	blx	r3
 800355c:	3501      	adds	r5, #1
 800355e:	e7f2      	b.n	8003546 <__libc_init_array+0x1e>
 8003560:	080035b8 	.word	0x080035b8
 8003564:	080035b8 	.word	0x080035b8
 8003568:	080035b8 	.word	0x080035b8
 800356c:	080035bc 	.word	0x080035bc

08003570 <memset>:
 8003570:	4402      	add	r2, r0
 8003572:	4603      	mov	r3, r0
 8003574:	4293      	cmp	r3, r2
 8003576:	d100      	bne.n	800357a <memset+0xa>
 8003578:	4770      	bx	lr
 800357a:	f803 1b01 	strb.w	r1, [r3], #1
 800357e:	e7f9      	b.n	8003574 <memset+0x4>

08003580 <_init>:
 8003580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003582:	bf00      	nop
 8003584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003586:	bc08      	pop	{r3}
 8003588:	469e      	mov	lr, r3
 800358a:	4770      	bx	lr

0800358c <_fini>:
 800358c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800358e:	bf00      	nop
 8003590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003592:	bc08      	pop	{r3}
 8003594:	469e      	mov	lr, r3
 8003596:	4770      	bx	lr
