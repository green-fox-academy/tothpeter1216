
first.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b960  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800bb28  0800bb28  0001bb28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb50  0800bb50  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800bb50  0800bb50  0001bb50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bb58  0800bb58  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb58  0800bb58  0001bb58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bb5c  0800bb5c  0001bb5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800bb60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000edc  20000014  0800bb74  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ef0  0800bb74  00020ef0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002edf1  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000054a1  00000000  00000000  0004ee35  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000025e0  00000000  00000000  000542d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002370  00000000  00000000  000568b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002ed95  00000000  00000000  00058c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002544c  00000000  00000000  000879bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011e1b9  00000000  00000000  000ace09  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001cafc2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a250  00000000  00000000  001cb040  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000014 	.word	0x20000014
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800bb10 	.word	0x0800bb10

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000018 	.word	0x20000018
 8000204:	0800bb10 	.word	0x0800bb10

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b972 	b.w	8000504 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	4688      	mov	r8, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14b      	bne.n	80002de <__udivmoddi4+0xa6>
 8000246:	428a      	cmp	r2, r1
 8000248:	4615      	mov	r5, r2
 800024a:	d967      	bls.n	800031c <__udivmoddi4+0xe4>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0720 	rsb	r7, r2, #32
 8000256:	fa01 f302 	lsl.w	r3, r1, r2
 800025a:	fa20 f707 	lsr.w	r7, r0, r7
 800025e:	4095      	lsls	r5, r2
 8000260:	ea47 0803 	orr.w	r8, r7, r3
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000270:	fa1f fc85 	uxth.w	ip, r5
 8000274:	fb0e 8817 	mls	r8, lr, r7, r8
 8000278:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027c:	fb07 f10c 	mul.w	r1, r7, ip
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18eb      	adds	r3, r5, r3
 8000286:	f107 30ff 	add.w	r0, r7, #4294967295
 800028a:	f080 811b 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8118 	bls.w	80004c4 <__udivmoddi4+0x28c>
 8000294:	3f02      	subs	r7, #2
 8000296:	442b      	add	r3, r5
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ac:	45a4      	cmp	ip, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	192c      	adds	r4, r5, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x290>
 80002ba:	45a4      	cmp	ip, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x290>
 80002c0:	3802      	subs	r0, #2
 80002c2:	442c      	add	r4, r5
 80002c4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c8:	eba4 040c 	sub.w	r4, r4, ip
 80002cc:	2700      	movs	r7, #0
 80002ce:	b11e      	cbz	r6, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c6 4300 	strd	r4, r3, [r6]
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xbe>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80eb 	beq.w	80004be <__udivmoddi4+0x286>
 80002e8:	2700      	movs	r7, #0
 80002ea:	e9c6 0100 	strd	r0, r1, [r6]
 80002ee:	4638      	mov	r0, r7
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f783 	clz	r7, r3
 80002fa:	2f00      	cmp	r7, #0
 80002fc:	d147      	bne.n	800038e <__udivmoddi4+0x156>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd0>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80fa 	bhi.w	80004fc <__udivmoddi4+0x2c4>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4698      	mov	r8, r3
 8000312:	2e00      	cmp	r6, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000316:	e9c6 4800 	strd	r4, r8, [r6]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa0>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xe8>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 808f 	bne.w	8000448 <__udivmoddi4+0x210>
 800032a:	1b49      	subs	r1, r1, r5
 800032c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000330:	fa1f f885 	uxth.w	r8, r5
 8000334:	2701      	movs	r7, #1
 8000336:	fbb1 fcfe 	udiv	ip, r1, lr
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000340:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000344:	fb08 f10c 	mul.w	r1, r8, ip
 8000348:	4299      	cmp	r1, r3
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x124>
 800034c:	18eb      	adds	r3, r5, r3
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4299      	cmp	r1, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 800035a:	4684      	mov	ip, r0
 800035c:	1a59      	subs	r1, r3, r1
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1410 	mls	r4, lr, r0, r1
 8000368:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x14c>
 8000374:	192c      	adds	r4, r5, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x14a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80b6 	bhi.w	80004ee <__udivmoddi4+0x2b6>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e79f      	b.n	80002ce <__udivmoddi4+0x96>
 800038e:	f1c7 0c20 	rsb	ip, r7, #32
 8000392:	40bb      	lsls	r3, r7
 8000394:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000398:	ea4e 0e03 	orr.w	lr, lr, r3
 800039c:	fa01 f407 	lsl.w	r4, r1, r7
 80003a0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003ac:	4325      	orrs	r5, r4
 80003ae:	fbb3 f9f8 	udiv	r9, r3, r8
 80003b2:	0c2c      	lsrs	r4, r5, #16
 80003b4:	fb08 3319 	mls	r3, r8, r9, r3
 80003b8:	fa1f fa8e 	uxth.w	sl, lr
 80003bc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c0:	fb09 f40a 	mul.w	r4, r9, sl
 80003c4:	429c      	cmp	r4, r3
 80003c6:	fa02 f207 	lsl.w	r2, r2, r7
 80003ca:	fa00 f107 	lsl.w	r1, r0, r7
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1e 0303 	adds.w	r3, lr, r3
 80003d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d8:	f080 8087 	bcs.w	80004ea <__udivmoddi4+0x2b2>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f240 8084 	bls.w	80004ea <__udivmoddi4+0x2b2>
 80003e2:	f1a9 0902 	sub.w	r9, r9, #2
 80003e6:	4473      	add	r3, lr
 80003e8:	1b1b      	subs	r3, r3, r4
 80003ea:	b2ad      	uxth	r5, r5
 80003ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f0:	fb08 3310 	mls	r3, r8, r0, r3
 80003f4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003fc:	45a2      	cmp	sl, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1e 0404 	adds.w	r4, lr, r4
 8000404:	f100 33ff 	add.w	r3, r0, #4294967295
 8000408:	d26b      	bcs.n	80004e2 <__udivmoddi4+0x2aa>
 800040a:	45a2      	cmp	sl, r4
 800040c:	d969      	bls.n	80004e2 <__udivmoddi4+0x2aa>
 800040e:	3802      	subs	r0, #2
 8000410:	4474      	add	r4, lr
 8000412:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000416:	fba0 8902 	umull	r8, r9, r0, r2
 800041a:	eba4 040a 	sub.w	r4, r4, sl
 800041e:	454c      	cmp	r4, r9
 8000420:	46c2      	mov	sl, r8
 8000422:	464b      	mov	r3, r9
 8000424:	d354      	bcc.n	80004d0 <__udivmoddi4+0x298>
 8000426:	d051      	beq.n	80004cc <__udivmoddi4+0x294>
 8000428:	2e00      	cmp	r6, #0
 800042a:	d069      	beq.n	8000500 <__udivmoddi4+0x2c8>
 800042c:	ebb1 050a 	subs.w	r5, r1, sl
 8000430:	eb64 0403 	sbc.w	r4, r4, r3
 8000434:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000438:	40fd      	lsrs	r5, r7
 800043a:	40fc      	lsrs	r4, r7
 800043c:	ea4c 0505 	orr.w	r5, ip, r5
 8000440:	e9c6 5400 	strd	r5, r4, [r6]
 8000444:	2700      	movs	r7, #0
 8000446:	e747      	b.n	80002d8 <__udivmoddi4+0xa0>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f703 	lsr.w	r7, r0, r3
 8000450:	4095      	lsls	r5, r2
 8000452:	fa01 f002 	lsl.w	r0, r1, r2
 8000456:	fa21 f303 	lsr.w	r3, r1, r3
 800045a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045e:	4338      	orrs	r0, r7
 8000460:	0c01      	lsrs	r1, r0, #16
 8000462:	fbb3 f7fe 	udiv	r7, r3, lr
 8000466:	fa1f f885 	uxth.w	r8, r5
 800046a:	fb0e 3317 	mls	r3, lr, r7, r3
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb07 f308 	mul.w	r3, r7, r8
 8000476:	428b      	cmp	r3, r1
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x256>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f107 3cff 	add.w	ip, r7, #4294967295
 8000484:	d22f      	bcs.n	80004e6 <__udivmoddi4+0x2ae>
 8000486:	428b      	cmp	r3, r1
 8000488:	d92d      	bls.n	80004e6 <__udivmoddi4+0x2ae>
 800048a:	3f02      	subs	r7, #2
 800048c:	4429      	add	r1, r5
 800048e:	1acb      	subs	r3, r1, r3
 8000490:	b281      	uxth	r1, r0
 8000492:	fbb3 f0fe 	udiv	r0, r3, lr
 8000496:	fb0e 3310 	mls	r3, lr, r0, r3
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb00 f308 	mul.w	r3, r0, r8
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x27e>
 80004a6:	1869      	adds	r1, r5, r1
 80004a8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ac:	d217      	bcs.n	80004de <__udivmoddi4+0x2a6>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d915      	bls.n	80004de <__udivmoddi4+0x2a6>
 80004b2:	3802      	subs	r0, #2
 80004b4:	4429      	add	r1, r5
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004bc:	e73b      	b.n	8000336 <__udivmoddi4+0xfe>
 80004be:	4637      	mov	r7, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e709      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c4:	4607      	mov	r7, r0
 80004c6:	e6e7      	b.n	8000298 <__udivmoddi4+0x60>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004cc:	4541      	cmp	r1, r8
 80004ce:	d2ab      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d4:	eb69 020e 	sbc.w	r2, r9, lr
 80004d8:	3801      	subs	r0, #1
 80004da:	4613      	mov	r3, r2
 80004dc:	e7a4      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004de:	4660      	mov	r0, ip
 80004e0:	e7e9      	b.n	80004b6 <__udivmoddi4+0x27e>
 80004e2:	4618      	mov	r0, r3
 80004e4:	e795      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e6:	4667      	mov	r7, ip
 80004e8:	e7d1      	b.n	800048e <__udivmoddi4+0x256>
 80004ea:	4681      	mov	r9, r0
 80004ec:	e77c      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004ee:	3802      	subs	r0, #2
 80004f0:	442c      	add	r4, r5
 80004f2:	e747      	b.n	8000384 <__udivmoddi4+0x14c>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	442b      	add	r3, r5
 80004fa:	e72f      	b.n	800035c <__udivmoddi4+0x124>
 80004fc:	4638      	mov	r0, r7
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xda>
 8000500:	4637      	mov	r7, r6
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0xa0>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <BSP_LED_Init>:
  *          This parameter can be one of the following values:
  *            @arg  LED1
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08a      	sub	sp, #40	; 0x28
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;
  GPIO_TypeDef*     gpio_led;

  if (Led == LED1)
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d122      	bne.n	800055e <BSP_LED_Init+0x56>
  {
    gpio_led = LED1_GPIO_PORT;
 8000518:	4b13      	ldr	r3, [pc, #76]	; (8000568 <BSP_LED_Init+0x60>)
 800051a:	627b      	str	r3, [r7, #36]	; 0x24
    /* Enable the GPIO_LED clock */
    LED1_GPIO_CLK_ENABLE();
 800051c:	4b13      	ldr	r3, [pc, #76]	; (800056c <BSP_LED_Init+0x64>)
 800051e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000520:	4a12      	ldr	r2, [pc, #72]	; (800056c <BSP_LED_Init+0x64>)
 8000522:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000526:	6313      	str	r3, [r2, #48]	; 0x30
 8000528:	4b10      	ldr	r3, [pc, #64]	; (800056c <BSP_LED_Init+0x64>)
 800052a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000530:	60fb      	str	r3, [r7, #12]
 8000532:	68fb      	ldr	r3, [r7, #12]

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin = GPIO_PIN[Led];
 8000534:	2302      	movs	r3, #2
 8000536:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8000538:	2301      	movs	r3, #1
 800053a:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Pull = GPIO_PULLUP;
 800053c:	2301      	movs	r3, #1
 800053e:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8000540:	2303      	movs	r3, #3
 8000542:	61fb      	str	r3, [r7, #28]
  
    HAL_GPIO_Init(gpio_led, &gpio_init_structure);
 8000544:	f107 0310 	add.w	r3, r7, #16
 8000548:	4619      	mov	r1, r3
 800054a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800054c:	f000 ffd2 	bl	80014f4 <HAL_GPIO_Init>
    
    /* By default, turn off LED */
    HAL_GPIO_WritePin(gpio_led, GPIO_PIN[Led], GPIO_PIN_RESET);
 8000550:	2302      	movs	r3, #2
 8000552:	b29b      	uxth	r3, r3
 8000554:	2200      	movs	r2, #0
 8000556:	4619      	mov	r1, r3
 8000558:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800055a:	f001 f98d 	bl	8001878 <HAL_GPIO_WritePin>
  }
}
 800055e:	bf00      	nop
 8000560:	3728      	adds	r7, #40	; 0x28
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40022000 	.word	0x40022000
 800056c:	40023800 	.word	0x40023800

08000570 <BSP_LED_On>:
  *          This parameter can be one of the following values:
  *            @arg  LED1
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
  GPIO_TypeDef*     gpio_led;

  if (Led == LED1)	/* Switch On LED connected to GPIO */
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d108      	bne.n	8000592 <BSP_LED_On+0x22>
  {
    gpio_led = LED1_GPIO_PORT;
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <BSP_LED_On+0x2c>)
 8000582:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_WritePin(gpio_led, GPIO_PIN[Led], GPIO_PIN_SET);
 8000584:	2302      	movs	r3, #2
 8000586:	b29b      	uxth	r3, r3
 8000588:	2201      	movs	r2, #1
 800058a:	4619      	mov	r1, r3
 800058c:	68f8      	ldr	r0, [r7, #12]
 800058e:	f001 f973 	bl	8001878 <HAL_GPIO_WritePin>
  }
}
 8000592:	bf00      	nop
 8000594:	3710      	adds	r7, #16
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	40022000 	.word	0x40022000

080005a0 <BSP_LED_Off>:
  *          This parameter can be one of the following values:
  *            @arg  LED1
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
  GPIO_TypeDef*     gpio_led;

  if (Led == LED1) /* Switch Off LED connected to GPIO */
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d108      	bne.n	80005c2 <BSP_LED_Off+0x22>
  {
    gpio_led = LED1_GPIO_PORT;
 80005b0:	4b06      	ldr	r3, [pc, #24]	; (80005cc <BSP_LED_Off+0x2c>)
 80005b2:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_WritePin(gpio_led, GPIO_PIN[Led], GPIO_PIN_RESET);
 80005b4:	2302      	movs	r3, #2
 80005b6:	b29b      	uxth	r3, r3
 80005b8:	2200      	movs	r2, #0
 80005ba:	4619      	mov	r1, r3
 80005bc:	68f8      	ldr	r0, [r7, #12]
 80005be:	f001 f95b 	bl	8001878 <HAL_GPIO_WritePin>
  }
}
 80005c2:	bf00      	nop
 80005c4:	3710      	adds	r7, #16
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40022000 	.word	0x40022000

080005d0 <BSP_PB_Init>:
  *       are mapped on the same push button named "User"
  *       on the board serigraphy.
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08a      	sub	sp, #40	; 0x28
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	460a      	mov	r2, r1
 80005da:	71fb      	strb	r3, [r7, #7]
 80005dc:	4613      	mov	r3, r2
 80005de:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80005e0:	79fb      	ldrb	r3, [r7, #7]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d10c      	bne.n	8000600 <BSP_PB_Init+0x30>
 80005e6:	4b3a      	ldr	r3, [pc, #232]	; (80006d0 <BSP_PB_Init+0x100>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a39      	ldr	r2, [pc, #228]	; (80006d0 <BSP_PB_Init+0x100>)
 80005ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b37      	ldr	r3, [pc, #220]	; (80006d0 <BSP_PB_Init+0x100>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005fa:	613b      	str	r3, [r7, #16]
 80005fc:	693b      	ldr	r3, [r7, #16]
 80005fe:	e01b      	b.n	8000638 <BSP_PB_Init+0x68>
 8000600:	79fb      	ldrb	r3, [r7, #7]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d10c      	bne.n	8000620 <BSP_PB_Init+0x50>
 8000606:	4b32      	ldr	r3, [pc, #200]	; (80006d0 <BSP_PB_Init+0x100>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a31      	ldr	r2, [pc, #196]	; (80006d0 <BSP_PB_Init+0x100>)
 800060c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b2f      	ldr	r3, [pc, #188]	; (80006d0 <BSP_PB_Init+0x100>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	e00b      	b.n	8000638 <BSP_PB_Init+0x68>
 8000620:	4b2b      	ldr	r3, [pc, #172]	; (80006d0 <BSP_PB_Init+0x100>)
 8000622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000624:	4a2a      	ldr	r2, [pc, #168]	; (80006d0 <BSP_PB_Init+0x100>)
 8000626:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800062a:	6313      	str	r3, [r2, #48]	; 0x30
 800062c:	4b28      	ldr	r3, [pc, #160]	; (80006d0 <BSP_PB_Init+0x100>)
 800062e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8000638:	79bb      	ldrb	r3, [r7, #6]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d114      	bne.n	8000668 <BSP_PB_Init+0x98>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	4a24      	ldr	r2, [pc, #144]	; (80006d4 <BSP_PB_Init+0x104>)
 8000642:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000646:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000648:	2300      	movs	r3, #0
 800064a:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800064c:	2300      	movs	r3, #0
 800064e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8000650:	2302      	movs	r3, #2
 8000652:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	4a20      	ldr	r2, [pc, #128]	; (80006d8 <BSP_PB_Init+0x108>)
 8000658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800065c:	f107 0214 	add.w	r2, r7, #20
 8000660:	4611      	mov	r1, r2
 8000662:	4618      	mov	r0, r3
 8000664:	f000 ff46 	bl	80014f4 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8000668:	79bb      	ldrb	r3, [r7, #6]
 800066a:	2b01      	cmp	r3, #1
 800066c:	d12c      	bne.n	80006c8 <BSP_PB_Init+0xf8>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	4a18      	ldr	r2, [pc, #96]	; (80006d4 <BSP_PB_Init+0x104>)
 8000672:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000676:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800067c:	2302      	movs	r3, #2
 800067e:	623b      	str	r3, [r7, #32]
    
    if(Button != BUTTON_WAKEUP)
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d002      	beq.n	800068c <BSP_PB_Init+0xbc>
    {
      gpio_init_structure.Mode = GPIO_MODE_IT_FALLING; 
 8000686:	4b15      	ldr	r3, [pc, #84]	; (80006dc <BSP_PB_Init+0x10c>)
 8000688:	61bb      	str	r3, [r7, #24]
 800068a:	e001      	b.n	8000690 <BSP_PB_Init+0xc0>
    }
    else
    {
      gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800068c:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <BSP_PB_Init+0x110>)
 800068e:	61bb      	str	r3, [r7, #24]
    }
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	4a11      	ldr	r2, [pc, #68]	; (80006d8 <BSP_PB_Init+0x108>)
 8000694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000698:	f107 0214 	add.w	r2, r7, #20
 800069c:	4611      	mov	r1, r2
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 ff28 	bl	80014f4 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	4a0f      	ldr	r2, [pc, #60]	; (80006e4 <BSP_PB_Init+0x114>)
 80006a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006ac:	b25b      	sxtb	r3, r3
 80006ae:	2200      	movs	r2, #0
 80006b0:	210f      	movs	r1, #15
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 fbac 	bl	8000e10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	4a0a      	ldr	r2, [pc, #40]	; (80006e4 <BSP_PB_Init+0x114>)
 80006bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006c0:	b25b      	sxtb	r3, r3
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 fbc0 	bl	8000e48 <HAL_NVIC_EnableIRQ>
  }
}
 80006c8:	bf00      	nop
 80006ca:	3728      	adds	r7, #40	; 0x28
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40023800 	.word	0x40023800
 80006d4:	0800bb28 	.word	0x0800bb28
 80006d8:	20000000 	.word	0x20000000
 80006dc:	10210000 	.word	0x10210000
 80006e0:	10110000 	.word	0x10110000
 80006e4:	0800bb30 	.word	0x0800bb30

080006e8 <BSP_PB_GetState>:
  *       are mapped on the same push button named "User"
  *       on the board serigraphy.
  * @retval The Button GPIO pin value
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	4a07      	ldr	r2, [pc, #28]	; (8000714 <BSP_PB_GetState+0x2c>)
 80006f6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	4a06      	ldr	r2, [pc, #24]	; (8000718 <BSP_PB_GetState+0x30>)
 80006fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000702:	4619      	mov	r1, r3
 8000704:	f001 f8a0 	bl	8001848 <HAL_GPIO_ReadPin>
 8000708:	4603      	mov	r3, r0
}
 800070a:	4618      	mov	r0, r3
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000000 	.word	0x20000000
 8000718:	0800bb28 	.word	0x0800bb28

0800071c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000720:	2003      	movs	r0, #3
 8000722:	f000 fb6a 	bl	8000dfa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000726:	2000      	movs	r0, #0
 8000728:	f00a ff40 	bl	800b5ac <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800072c:	f00a f83a 	bl	800a7a4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000730:	2300      	movs	r3, #0
}
 8000732:	4618      	mov	r0, r3
 8000734:	bd80      	pop	{r7, pc}
	...

08000738 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <HAL_IncTick+0x20>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	461a      	mov	r2, r3
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <HAL_IncTick+0x24>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4413      	add	r3, r2
 8000748:	4a04      	ldr	r2, [pc, #16]	; (800075c <HAL_IncTick+0x24>)
 800074a:	6013      	str	r3, [r2, #0]
}
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	2000000c 	.word	0x2000000c
 800075c:	2000003c 	.word	0x2000003c

08000760 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  return uwTick;
 8000764:	4b03      	ldr	r3, [pc, #12]	; (8000774 <HAL_GetTick+0x14>)
 8000766:	681b      	ldr	r3, [r3, #0]
}
 8000768:	4618      	mov	r0, r3
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	2000003c 	.word	0x2000003c

08000778 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000780:	f7ff ffee 	bl	8000760 <HAL_GetTick>
 8000784:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000790:	d005      	beq.n	800079e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <HAL_Delay+0x40>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	461a      	mov	r2, r3
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	4413      	add	r3, r2
 800079c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800079e:	bf00      	nop
 80007a0:	f7ff ffde 	bl	8000760 <HAL_GetTick>
 80007a4:	4602      	mov	r2, r0
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	1ad3      	subs	r3, r2, r3
 80007aa:	68fa      	ldr	r2, [r7, #12]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d8f7      	bhi.n	80007a0 <HAL_Delay+0x28>
  {
  }
}
 80007b0:	bf00      	nop
 80007b2:	3710      	adds	r7, #16
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	2000000c 	.word	0x2000000c

080007bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80007c4:	2300      	movs	r3, #0
 80007c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d101      	bne.n	80007d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80007ce:	2301      	movs	r3, #1
 80007d0:	e031      	b.n	8000836 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d109      	bne.n	80007ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80007da:	6878      	ldr	r0, [r7, #4]
 80007dc:	f00a f806 	bl	800a7ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2200      	movs	r2, #0
 80007e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2200      	movs	r2, #0
 80007ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f2:	f003 0310 	and.w	r3, r3, #16
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d116      	bne.n	8000828 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007fe:	4b10      	ldr	r3, [pc, #64]	; (8000840 <HAL_ADC_Init+0x84>)
 8000800:	4013      	ands	r3, r2
 8000802:	f043 0202 	orr.w	r2, r3, #2
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f000 f94e 	bl	8000aac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2200      	movs	r2, #0
 8000814:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081a:	f023 0303 	bic.w	r3, r3, #3
 800081e:	f043 0201 	orr.w	r2, r3, #1
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	641a      	str	r2, [r3, #64]	; 0x40
 8000826:	e001      	b.n	800082c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000828:	2301      	movs	r3, #1
 800082a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2200      	movs	r2, #0
 8000830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000834:	7bfb      	ldrb	r3, [r7, #15]
}
 8000836:	4618      	mov	r0, r3
 8000838:	3710      	adds	r7, #16
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	ffffeefd 	.word	0xffffeefd

08000844 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000844:	b480      	push	{r7}
 8000846:	b085      	sub	sp, #20
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000858:	2b01      	cmp	r3, #1
 800085a:	d101      	bne.n	8000860 <HAL_ADC_ConfigChannel+0x1c>
 800085c:	2302      	movs	r3, #2
 800085e:	e115      	b.n	8000a8c <HAL_ADC_ConfigChannel+0x248>
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2201      	movs	r2, #1
 8000864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2b09      	cmp	r3, #9
 800086e:	d935      	bls.n	80008dc <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	68d9      	ldr	r1, [r3, #12]
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	b29b      	uxth	r3, r3
 800087c:	461a      	mov	r2, r3
 800087e:	4613      	mov	r3, r2
 8000880:	005b      	lsls	r3, r3, #1
 8000882:	4413      	add	r3, r2
 8000884:	3b1e      	subs	r3, #30
 8000886:	2207      	movs	r2, #7
 8000888:	fa02 f303 	lsl.w	r3, r2, r3
 800088c:	43da      	mvns	r2, r3
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	400a      	ands	r2, r1
 8000894:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a7f      	ldr	r2, [pc, #508]	; (8000a98 <HAL_ADC_ConfigChannel+0x254>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d10a      	bne.n	80008b6 <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	68d9      	ldr	r1, [r3, #12]
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	689b      	ldr	r3, [r3, #8]
 80008aa:	061a      	lsls	r2, r3, #24
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	430a      	orrs	r2, r1
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	e035      	b.n	8000922 <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	68d9      	ldr	r1, [r3, #12]
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	689a      	ldr	r2, [r3, #8]
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	b29b      	uxth	r3, r3
 80008c6:	4618      	mov	r0, r3
 80008c8:	4603      	mov	r3, r0
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	4403      	add	r3, r0
 80008ce:	3b1e      	subs	r3, #30
 80008d0:	409a      	lsls	r2, r3
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	430a      	orrs	r2, r1
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	e022      	b.n	8000922 <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	6919      	ldr	r1, [r3, #16]
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	461a      	mov	r2, r3
 80008ea:	4613      	mov	r3, r2
 80008ec:	005b      	lsls	r3, r3, #1
 80008ee:	4413      	add	r3, r2
 80008f0:	2207      	movs	r2, #7
 80008f2:	fa02 f303 	lsl.w	r3, r2, r3
 80008f6:	43da      	mvns	r2, r3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	400a      	ands	r2, r1
 80008fe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	6919      	ldr	r1, [r3, #16]
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	689a      	ldr	r2, [r3, #8]
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	b29b      	uxth	r3, r3
 8000910:	4618      	mov	r0, r3
 8000912:	4603      	mov	r3, r0
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	4403      	add	r3, r0
 8000918:	409a      	lsls	r2, r3
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	430a      	orrs	r2, r1
 8000920:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	2b06      	cmp	r3, #6
 8000928:	d824      	bhi.n	8000974 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	685a      	ldr	r2, [r3, #4]
 8000934:	4613      	mov	r3, r2
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	4413      	add	r3, r2
 800093a:	3b05      	subs	r3, #5
 800093c:	221f      	movs	r2, #31
 800093e:	fa02 f303 	lsl.w	r3, r2, r3
 8000942:	43da      	mvns	r2, r3
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	400a      	ands	r2, r1
 800094a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	b29b      	uxth	r3, r3
 8000958:	4618      	mov	r0, r3
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	685a      	ldr	r2, [r3, #4]
 800095e:	4613      	mov	r3, r2
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	4413      	add	r3, r2
 8000964:	3b05      	subs	r3, #5
 8000966:	fa00 f203 	lsl.w	r2, r0, r3
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	430a      	orrs	r2, r1
 8000970:	635a      	str	r2, [r3, #52]	; 0x34
 8000972:	e04c      	b.n	8000a0e <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	2b0c      	cmp	r3, #12
 800097a:	d824      	bhi.n	80009c6 <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	685a      	ldr	r2, [r3, #4]
 8000986:	4613      	mov	r3, r2
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	4413      	add	r3, r2
 800098c:	3b23      	subs	r3, #35	; 0x23
 800098e:	221f      	movs	r2, #31
 8000990:	fa02 f303 	lsl.w	r3, r2, r3
 8000994:	43da      	mvns	r2, r3
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	400a      	ands	r2, r1
 800099c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	4618      	mov	r0, r3
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	685a      	ldr	r2, [r3, #4]
 80009b0:	4613      	mov	r3, r2
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	4413      	add	r3, r2
 80009b6:	3b23      	subs	r3, #35	; 0x23
 80009b8:	fa00 f203 	lsl.w	r2, r0, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	430a      	orrs	r2, r1
 80009c2:	631a      	str	r2, [r3, #48]	; 0x30
 80009c4:	e023      	b.n	8000a0e <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	685a      	ldr	r2, [r3, #4]
 80009d0:	4613      	mov	r3, r2
 80009d2:	009b      	lsls	r3, r3, #2
 80009d4:	4413      	add	r3, r2
 80009d6:	3b41      	subs	r3, #65	; 0x41
 80009d8:	221f      	movs	r2, #31
 80009da:	fa02 f303 	lsl.w	r3, r2, r3
 80009de:	43da      	mvns	r2, r3
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	400a      	ands	r2, r1
 80009e6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	b29b      	uxth	r3, r3
 80009f4:	4618      	mov	r0, r3
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	685a      	ldr	r2, [r3, #4]
 80009fa:	4613      	mov	r3, r2
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	4413      	add	r3, r2
 8000a00:	3b41      	subs	r3, #65	; 0x41
 8000a02:	fa00 f203 	lsl.w	r2, r0, r3
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	430a      	orrs	r2, r1
 8000a0c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a22      	ldr	r2, [pc, #136]	; (8000a9c <HAL_ADC_ConfigChannel+0x258>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d109      	bne.n	8000a2c <HAL_ADC_ConfigChannel+0x1e8>
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2b12      	cmp	r3, #18
 8000a1e:	d105      	bne.n	8000a2c <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8000a20:	4b1f      	ldr	r3, [pc, #124]	; (8000aa0 <HAL_ADC_ConfigChannel+0x25c>)
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	4a1e      	ldr	r2, [pc, #120]	; (8000aa0 <HAL_ADC_ConfigChannel+0x25c>)
 8000a26:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a2a:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a1a      	ldr	r2, [pc, #104]	; (8000a9c <HAL_ADC_ConfigChannel+0x258>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d125      	bne.n	8000a82 <HAL_ADC_ConfigChannel+0x23e>
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a17      	ldr	r2, [pc, #92]	; (8000a98 <HAL_ADC_ConfigChannel+0x254>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d003      	beq.n	8000a48 <HAL_ADC_ConfigChannel+0x204>
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2b11      	cmp	r3, #17
 8000a46:	d11c      	bne.n	8000a82 <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8000a48:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <HAL_ADC_ConfigChannel+0x25c>)
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	4a14      	ldr	r2, [pc, #80]	; (8000aa0 <HAL_ADC_ConfigChannel+0x25c>)
 8000a4e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000a52:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a0f      	ldr	r2, [pc, #60]	; (8000a98 <HAL_ADC_ConfigChannel+0x254>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d111      	bne.n	8000a82 <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8000a5e:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <HAL_ADC_ConfigChannel+0x260>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a11      	ldr	r2, [pc, #68]	; (8000aa8 <HAL_ADC_ConfigChannel+0x264>)
 8000a64:	fba2 2303 	umull	r2, r3, r2, r3
 8000a68:	0c9a      	lsrs	r2, r3, #18
 8000a6a:	4613      	mov	r3, r2
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	4413      	add	r3, r2
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8000a74:	e002      	b.n	8000a7c <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	3b01      	subs	r3, #1
 8000a7a:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d1f9      	bne.n	8000a76 <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2200      	movs	r2, #0
 8000a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000a8a:	2300      	movs	r3, #0
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3714      	adds	r7, #20
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	10000012 	.word	0x10000012
 8000a9c:	40012000 	.word	0x40012000
 8000aa0:	40012300 	.word	0x40012300
 8000aa4:	20000010 	.word	0x20000010
 8000aa8:	431bde83 	.word	0x431bde83

08000aac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8000ab4:	4b78      	ldr	r3, [pc, #480]	; (8000c98 <ADC_Init+0x1ec>)
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	4a77      	ldr	r2, [pc, #476]	; (8000c98 <ADC_Init+0x1ec>)
 8000aba:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000abe:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8000ac0:	4b75      	ldr	r3, [pc, #468]	; (8000c98 <ADC_Init+0x1ec>)
 8000ac2:	685a      	ldr	r2, [r3, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	4973      	ldr	r1, [pc, #460]	; (8000c98 <ADC_Init+0x1ec>)
 8000aca:	4313      	orrs	r3, r2
 8000acc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	685a      	ldr	r2, [r3, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000adc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	6859      	ldr	r1, [r3, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	691b      	ldr	r3, [r3, #16]
 8000ae8:	021a      	lsls	r2, r3, #8
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	430a      	orrs	r2, r1
 8000af0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	685a      	ldr	r2, [r3, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000b00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	6859      	ldr	r1, [r3, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	689a      	ldr	r2, [r3, #8]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	430a      	orrs	r2, r1
 8000b12:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	689a      	ldr	r2, [r3, #8]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000b22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	6899      	ldr	r1, [r3, #8]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	68da      	ldr	r2, [r3, #12]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	430a      	orrs	r2, r1
 8000b34:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b3a:	4a58      	ldr	r2, [pc, #352]	; (8000c9c <ADC_Init+0x1f0>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d022      	beq.n	8000b86 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	689a      	ldr	r2, [r3, #8]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000b4e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	6899      	ldr	r1, [r3, #8]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	430a      	orrs	r2, r1
 8000b60:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	689a      	ldr	r2, [r3, #8]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000b70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	6899      	ldr	r1, [r3, #8]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	430a      	orrs	r2, r1
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	e00f      	b.n	8000ba6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	689a      	ldr	r2, [r3, #8]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000b94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	689a      	ldr	r2, [r3, #8]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000ba4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	689a      	ldr	r2, [r3, #8]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f022 0202 	bic.w	r2, r2, #2
 8000bb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	6899      	ldr	r1, [r3, #8]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	005a      	lsls	r2, r3, #1
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d01b      	beq.n	8000c0c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	685a      	ldr	r2, [r3, #4]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000be2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	685a      	ldr	r2, [r3, #4]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000bf2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	6859      	ldr	r1, [r3, #4]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	035a      	lsls	r2, r3, #13
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	430a      	orrs	r2, r1
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	e007      	b.n	8000c1c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	685a      	ldr	r2, [r3, #4]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000c1a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000c2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	69db      	ldr	r3, [r3, #28]
 8000c36:	3b01      	subs	r3, #1
 8000c38:	051a      	lsls	r2, r3, #20
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	430a      	orrs	r2, r1
 8000c40:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	689a      	ldr	r2, [r3, #8]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000c50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	6899      	ldr	r1, [r3, #8]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000c5e:	025a      	lsls	r2, r3, #9
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	430a      	orrs	r2, r1
 8000c66:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	689a      	ldr	r2, [r3, #8]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000c76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	6899      	ldr	r1, [r3, #8]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	695b      	ldr	r3, [r3, #20]
 8000c82:	029a      	lsls	r2, r3, #10
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	430a      	orrs	r2, r1
 8000c8a:	609a      	str	r2, [r3, #8]
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	40012300 	.word	0x40012300
 8000c9c:	0f000001 	.word	0x0f000001

08000ca0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	f003 0307 	and.w	r3, r3, #7
 8000cae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <__NVIC_SetPriorityGrouping+0x40>)
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cb6:	68ba      	ldr	r2, [r7, #8]
 8000cb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cce:	4a04      	ldr	r2, [pc, #16]	; (8000ce0 <__NVIC_SetPriorityGrouping+0x40>)
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	60d3      	str	r3, [r2, #12]
}
 8000cd4:	bf00      	nop
 8000cd6:	3714      	adds	r7, #20
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	e000ed00 	.word	0xe000ed00
 8000ce4:	05fa0000 	.word	0x05fa0000

08000ce8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cec:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <__NVIC_GetPriorityGrouping+0x18>)
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	0a1b      	lsrs	r3, r3, #8
 8000cf2:	f003 0307 	and.w	r3, r3, #7
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	db0b      	blt.n	8000d2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	f003 021f 	and.w	r2, r3, #31
 8000d1c:	4907      	ldr	r1, [pc, #28]	; (8000d3c <__NVIC_EnableIRQ+0x38>)
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	095b      	lsrs	r3, r3, #5
 8000d24:	2001      	movs	r0, #1
 8000d26:	fa00 f202 	lsl.w	r2, r0, r2
 8000d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	e000e100 	.word	0xe000e100

08000d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	6039      	str	r1, [r7, #0]
 8000d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	db0a      	blt.n	8000d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	490c      	ldr	r1, [pc, #48]	; (8000d8c <__NVIC_SetPriority+0x4c>)
 8000d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5e:	0112      	lsls	r2, r2, #4
 8000d60:	b2d2      	uxtb	r2, r2
 8000d62:	440b      	add	r3, r1
 8000d64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d68:	e00a      	b.n	8000d80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	4908      	ldr	r1, [pc, #32]	; (8000d90 <__NVIC_SetPriority+0x50>)
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	f003 030f 	and.w	r3, r3, #15
 8000d76:	3b04      	subs	r3, #4
 8000d78:	0112      	lsls	r2, r2, #4
 8000d7a:	b2d2      	uxtb	r2, r2
 8000d7c:	440b      	add	r3, r1
 8000d7e:	761a      	strb	r2, [r3, #24]
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000e100 	.word	0xe000e100
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b089      	sub	sp, #36	; 0x24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	f003 0307 	and.w	r3, r3, #7
 8000da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	f1c3 0307 	rsb	r3, r3, #7
 8000dae:	2b04      	cmp	r3, #4
 8000db0:	bf28      	it	cs
 8000db2:	2304      	movcs	r3, #4
 8000db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	3304      	adds	r3, #4
 8000dba:	2b06      	cmp	r3, #6
 8000dbc:	d902      	bls.n	8000dc4 <NVIC_EncodePriority+0x30>
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	3b03      	subs	r3, #3
 8000dc2:	e000      	b.n	8000dc6 <NVIC_EncodePriority+0x32>
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	43da      	mvns	r2, r3
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	401a      	ands	r2, r3
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	fa01 f303 	lsl.w	r3, r1, r3
 8000de6:	43d9      	mvns	r1, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dec:	4313      	orrs	r3, r2
         );
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3724      	adds	r7, #36	; 0x24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f7ff ff4c 	bl	8000ca0 <__NVIC_SetPriorityGrouping>
}
 8000e08:	bf00      	nop
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
 8000e1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e22:	f7ff ff61 	bl	8000ce8 <__NVIC_GetPriorityGrouping>
 8000e26:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	68b9      	ldr	r1, [r7, #8]
 8000e2c:	6978      	ldr	r0, [r7, #20]
 8000e2e:	f7ff ffb1 	bl	8000d94 <NVIC_EncodePriority>
 8000e32:	4602      	mov	r2, r0
 8000e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e38:	4611      	mov	r1, r2
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff ff80 	bl	8000d40 <__NVIC_SetPriority>
}
 8000e40:	bf00      	nop
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff ff54 	bl	8000d04 <__NVIC_EnableIRQ>
}
 8000e5c:	bf00      	nop
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d101      	bne.n	8000e76 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	e054      	b.n	8000f20 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	7f5b      	ldrb	r3, [r3, #29]
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d105      	bne.n	8000e8c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2200      	movs	r2, #0
 8000e84:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f009 fd0a 	bl	800a8a0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2202      	movs	r2, #2
 8000e90:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	791b      	ldrb	r3, [r3, #4]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d10c      	bne.n	8000eb4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a22      	ldr	r2, [pc, #136]	; (8000f28 <HAL_CRC_Init+0xc4>)
 8000ea0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	689a      	ldr	r2, [r3, #8]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f022 0218 	bic.w	r2, r2, #24
 8000eb0:	609a      	str	r2, [r3, #8]
 8000eb2:	e00c      	b.n	8000ece <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6899      	ldr	r1, [r3, #8]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f000 f834 	bl	8000f2c <HAL_CRCEx_Polynomial_Set>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e028      	b.n	8000f20 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	795b      	ldrb	r3, [r3, #5]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d105      	bne.n	8000ee2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f04f 32ff 	mov.w	r2, #4294967295
 8000ede:	611a      	str	r2, [r3, #16]
 8000ee0:	e004      	b.n	8000eec <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	6912      	ldr	r2, [r2, #16]
 8000eea:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	695a      	ldr	r2, [r3, #20]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	430a      	orrs	r2, r1
 8000f00:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	699a      	ldr	r2, [r3, #24]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	430a      	orrs	r2, r1
 8000f16:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8000f1e:	2300      	movs	r3, #0
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	04c11db7 	.word	0x04c11db7

08000f2c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b087      	sub	sp, #28
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000f3c:	231f      	movs	r3, #31
 8000f3e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8000f40:	bf00      	nop
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	1e5a      	subs	r2, r3, #1
 8000f46:	613a      	str	r2, [r7, #16]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d009      	beq.n	8000f60 <HAL_CRCEx_Polynomial_Set+0x34>
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	f003 031f 	and.w	r3, r3, #31
 8000f52:	68ba      	ldr	r2, [r7, #8]
 8000f54:	fa22 f303 	lsr.w	r3, r2, r3
 8000f58:	f003 0301 	and.w	r3, r3, #1
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d0f0      	beq.n	8000f42 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2b18      	cmp	r3, #24
 8000f64:	d846      	bhi.n	8000ff4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8000f66:	a201      	add	r2, pc, #4	; (adr r2, 8000f6c <HAL_CRCEx_Polynomial_Set+0x40>)
 8000f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f6c:	08000ffb 	.word	0x08000ffb
 8000f70:	08000ff5 	.word	0x08000ff5
 8000f74:	08000ff5 	.word	0x08000ff5
 8000f78:	08000ff5 	.word	0x08000ff5
 8000f7c:	08000ff5 	.word	0x08000ff5
 8000f80:	08000ff5 	.word	0x08000ff5
 8000f84:	08000ff5 	.word	0x08000ff5
 8000f88:	08000ff5 	.word	0x08000ff5
 8000f8c:	08000fe9 	.word	0x08000fe9
 8000f90:	08000ff5 	.word	0x08000ff5
 8000f94:	08000ff5 	.word	0x08000ff5
 8000f98:	08000ff5 	.word	0x08000ff5
 8000f9c:	08000ff5 	.word	0x08000ff5
 8000fa0:	08000ff5 	.word	0x08000ff5
 8000fa4:	08000ff5 	.word	0x08000ff5
 8000fa8:	08000ff5 	.word	0x08000ff5
 8000fac:	08000fdd 	.word	0x08000fdd
 8000fb0:	08000ff5 	.word	0x08000ff5
 8000fb4:	08000ff5 	.word	0x08000ff5
 8000fb8:	08000ff5 	.word	0x08000ff5
 8000fbc:	08000ff5 	.word	0x08000ff5
 8000fc0:	08000ff5 	.word	0x08000ff5
 8000fc4:	08000ff5 	.word	0x08000ff5
 8000fc8:	08000ff5 	.word	0x08000ff5
 8000fcc:	08000fd1 	.word	0x08000fd1
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	2b06      	cmp	r3, #6
 8000fd4:	d913      	bls.n	8000ffe <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000fda:	e010      	b.n	8000ffe <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	2b07      	cmp	r3, #7
 8000fe0:	d90f      	bls.n	8001002 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000fe6:	e00c      	b.n	8001002 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	2b0f      	cmp	r3, #15
 8000fec:	d90b      	bls.n	8001006 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000ff2:	e008      	b.n	8001006 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	75fb      	strb	r3, [r7, #23]
      break;
 8000ff8:	e006      	b.n	8001008 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000ffa:	bf00      	nop
 8000ffc:	e004      	b.n	8001008 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000ffe:	bf00      	nop
 8001000:	e002      	b.n	8001008 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001002:	bf00      	nop
 8001004:	e000      	b.n	8001008 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001006:	bf00      	nop
  }
  if (status == HAL_OK)
 8001008:	7dfb      	ldrb	r3, [r7, #23]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d10d      	bne.n	800102a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	68ba      	ldr	r2, [r7, #8]
 8001014:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	f023 0118 	bic.w	r1, r3, #24
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	430a      	orrs	r2, r1
 8001028:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800102a:	7dfb      	ldrb	r3, [r7, #23]
}
 800102c:	4618      	mov	r0, r3
 800102e:	371c      	adds	r7, #28
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{     
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d101      	bne.n	800104a <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e062      	b.n	8001110 <HAL_DCMI_Init+0xd8>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
                
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001050:	b2db      	uxtb	r3, r3
 8001052:	2b00      	cmp	r3, #0
 8001054:	d102      	bne.n	800105c <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else  
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f009 fc42 	bl	800a8e0 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  } 
  
  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2202      	movs	r2, #2
 8001060:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	6819      	ldr	r1, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	4b2a      	ldr	r3, [pc, #168]	; (8001118 <HAL_DCMI_Init+0xe0>)
 8001070:	400b      	ands	r3, r1
 8001072:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	6819      	ldr	r1, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685a      	ldr	r2, [r3, #4]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001088:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	691b      	ldr	r3, [r3, #16]
 800108e:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001094:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80010a0:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a6:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 80010ac:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b2:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80010b8:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	430a      	orrs	r2, r1
 80010c0:	601a      	str	r2, [r3, #0]
                                     
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	2b10      	cmp	r3, #16
 80010c8:	d112      	bne.n	80010f0 <HAL_DCMI_Init+0xb8>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	7f1b      	ldrb	r3, [r3, #28]
 80010ce:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	7f5b      	ldrb	r3, [r3, #29]
 80010d4:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 80010d6:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	7f9b      	ldrb	r3, [r3, #30]
 80010dc:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 80010de:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	7fdb      	ldrb	r3, [r3, #31]
 80010e6:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 80010ec:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 80010ee:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	68da      	ldr	r2, [r3, #12]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f042 021e 	orr.w	r2, r2, #30
 80010fe:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2201      	movs	r2, #1
 800110a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800110e:	2300      	movs	r3, #0
}
 8001110:	4618      	mov	r0, r3
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	ffe0f007 	.word	0xffe0f007

0800111c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d101      	bne.n	800112e <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e039      	b.n	80011a2 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b00      	cmp	r3, #0
 8001138:	d106      	bne.n	8001148 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2200      	movs	r2, #0
 800113e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f009 fc8a 	bl	800aa5c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2202      	movs	r2, #2
 800114c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685a      	ldr	r2, [r3, #4]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	430a      	orrs	r2, r1
 8001164:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800116c:	f023 0107 	bic.w	r1, r3, #7
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	689a      	ldr	r2, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	430a      	orrs	r2, r1
 800117a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001182:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <HAL_DMA2D_Init+0x90>)
 8001184:	4013      	ands	r3, r2
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	68d1      	ldr	r1, [r2, #12]
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	6812      	ldr	r2, [r2, #0]
 800118e:	430b      	orrs	r3, r1
 8001190:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2200      	movs	r2, #0
 8001196:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2201      	movs	r2, #1
 800119c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	ffffc000 	.word	0xffffc000

080011b0 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d026      	beq.n	8001220 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d021      	beq.n	8001220 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011ea:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011f0:	f043 0201 	orr.w	r2, r3, #1
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2201      	movs	r2, #1
 80011fe:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2204      	movs	r2, #4
 8001204:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2200      	movs	r2, #0
 800120c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	695b      	ldr	r3, [r3, #20]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d003      	beq.n	8001220 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	695b      	ldr	r3, [r3, #20]
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	f003 0320 	and.w	r3, r3, #32
 8001226:	2b00      	cmp	r3, #0
 8001228:	d026      	beq.n	8001278 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d021      	beq.n	8001278 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001242:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2220      	movs	r2, #32
 800124a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001250:	f043 0202 	orr.w	r2, r3, #2
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2204      	movs	r2, #4
 800125c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2200      	movs	r2, #0
 8001264:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	695b      	ldr	r3, [r3, #20]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d003      	beq.n	8001278 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	695b      	ldr	r3, [r3, #20]
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f003 0308 	and.w	r3, r3, #8
 800127e:	2b00      	cmp	r3, #0
 8001280:	d026      	beq.n	80012d0 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001288:	2b00      	cmp	r3, #0
 800128a:	d021      	beq.n	80012d0 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800129a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2208      	movs	r2, #8
 80012a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012a8:	f043 0204 	orr.w	r2, r3, #4
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2204      	movs	r2, #4
 80012b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	695b      	ldr	r3, [r3, #20]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	695b      	ldr	r3, [r3, #20]
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f003 0304 	and.w	r3, r3, #4
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d013      	beq.n	8001302 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d00e      	beq.n	8001302 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012f2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2204      	movs	r2, #4
 80012fa:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f000 f853 	bl	80013a8 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d024      	beq.n	8001356 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001312:	2b00      	cmp	r3, #0
 8001314:	d01f      	beq.n	8001356 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001324:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2202      	movs	r2, #2
 800132c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2201      	movs	r2, #1
 800133a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	691b      	ldr	r3, [r3, #16]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	691b      	ldr	r3, [r3, #16]
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	f003 0310 	and.w	r3, r3, #16
 800135c:	2b00      	cmp	r3, #0
 800135e:	d01f      	beq.n	80013a0 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d01a      	beq.n	80013a0 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001378:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2210      	movs	r2, #16
 8001380:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2201      	movs	r2, #1
 800138e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2200      	movs	r2, #0
 8001396:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f000 f80e 	bl	80013bc <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80013a0:	bf00      	nop
 80013a2:	3710      	adds	r7, #16
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b087      	sub	sp, #28
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d101      	bne.n	80013f0 <HAL_DMA2D_ConfigLayer+0x20>
 80013ec:	2302      	movs	r3, #2
 80013ee:	e079      	b.n	80014e4 <HAL_DMA2D_ConfigLayer+0x114>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2201      	movs	r2, #1
 80013f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2202      	movs	r2, #2
 80013fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	011b      	lsls	r3, r3, #4
 8001404:	3318      	adds	r3, #24
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	4413      	add	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	685a      	ldr	r2, [r3, #4]
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	041b      	lsls	r3, r3, #16
 8001416:	4313      	orrs	r3, r2
 8001418:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800141a:	4b35      	ldr	r3, [pc, #212]	; (80014f0 <HAL_DMA2D_ConfigLayer+0x120>)
 800141c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	2b0a      	cmp	r3, #10
 8001424:	d003      	beq.n	800142e <HAL_DMA2D_ConfigLayer+0x5e>
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	2b09      	cmp	r3, #9
 800142c:	d107      	bne.n	800143e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001436:	697a      	ldr	r2, [r7, #20]
 8001438:	4313      	orrs	r3, r2
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	e005      	b.n	800144a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	061b      	lsls	r3, r3, #24
 8001444:	697a      	ldr	r2, [r7, #20]
 8001446:	4313      	orrs	r3, r2
 8001448:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d120      	bne.n	8001492 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	43db      	mvns	r3, r3
 800145a:	ea02 0103 	and.w	r1, r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	697a      	ldr	r2, [r7, #20]
 8001464:	430a      	orrs	r2, r1
 8001466:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	6812      	ldr	r2, [r2, #0]
 8001470:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	2b0a      	cmp	r3, #10
 8001478:	d003      	beq.n	8001482 <HAL_DMA2D_ConfigLayer+0xb2>
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	2b09      	cmp	r3, #9
 8001480:	d127      	bne.n	80014d2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	68da      	ldr	r2, [r3, #12]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800148e:	629a      	str	r2, [r3, #40]	; 0x28
 8001490:	e01f      	b.n	80014d2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	69da      	ldr	r2, [r3, #28]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	43db      	mvns	r3, r3
 800149c:	ea02 0103 	and.w	r1, r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	697a      	ldr	r2, [r7, #20]
 80014a6:	430a      	orrs	r2, r1
 80014a8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	6812      	ldr	r2, [r2, #0]
 80014b2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	2b0a      	cmp	r3, #10
 80014ba:	d003      	beq.n	80014c4 <HAL_DMA2D_ConfigLayer+0xf4>
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	2b09      	cmp	r3, #9
 80014c2:	d106      	bne.n	80014d2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	68da      	ldr	r2, [r3, #12]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80014d0:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2201      	movs	r2, #1
 80014d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	371c      	adds	r7, #28
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	ff03000f 	.word	0xff03000f

080014f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b089      	sub	sp, #36	; 0x24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80014fe:	2300      	movs	r3, #0
 8001500:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001502:	2300      	movs	r3, #0
 8001504:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001506:	2300      	movs	r3, #0
 8001508:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800150a:	2300      	movs	r3, #0
 800150c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800150e:	2300      	movs	r3, #0
 8001510:	61fb      	str	r3, [r7, #28]
 8001512:	e175      	b.n	8001800 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001514:	2201      	movs	r2, #1
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	697a      	ldr	r2, [r7, #20]
 8001524:	4013      	ands	r3, r2
 8001526:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	429a      	cmp	r2, r3
 800152e:	f040 8164 	bne.w	80017fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	2b02      	cmp	r3, #2
 8001538:	d003      	beq.n	8001542 <HAL_GPIO_Init+0x4e>
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	2b12      	cmp	r3, #18
 8001540:	d123      	bne.n	800158a <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	08da      	lsrs	r2, r3, #3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	3208      	adds	r2, #8
 800154a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800154e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	f003 0307 	and.w	r3, r3, #7
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	220f      	movs	r2, #15
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43db      	mvns	r3, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4013      	ands	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	691a      	ldr	r2, [r3, #16]
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	f003 0307 	and.w	r3, r3, #7
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	4313      	orrs	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	08da      	lsrs	r2, r3, #3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3208      	adds	r2, #8
 8001584:	69b9      	ldr	r1, [r7, #24]
 8001586:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	2203      	movs	r2, #3
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	43db      	mvns	r3, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4013      	ands	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f003 0203 	and.w	r2, r3, #3
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d00b      	beq.n	80015de <HAL_GPIO_Init+0xea>
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d007      	beq.n	80015de <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015d2:	2b11      	cmp	r3, #17
 80015d4:	d003      	beq.n	80015de <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	2b12      	cmp	r3, #18
 80015dc:	d130      	bne.n	8001640 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	2203      	movs	r2, #3
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	43db      	mvns	r3, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4013      	ands	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	68da      	ldr	r2, [r3, #12]
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	4313      	orrs	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001614:	2201      	movs	r2, #1
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4013      	ands	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	091b      	lsrs	r3, r3, #4
 800162a:	f003 0201 	and.w	r2, r3, #1
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4313      	orrs	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	2203      	movs	r2, #3
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4013      	ands	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4313      	orrs	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001678:	2b00      	cmp	r3, #0
 800167a:	f000 80be 	beq.w	80017fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800167e:	4b65      	ldr	r3, [pc, #404]	; (8001814 <HAL_GPIO_Init+0x320>)
 8001680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001682:	4a64      	ldr	r2, [pc, #400]	; (8001814 <HAL_GPIO_Init+0x320>)
 8001684:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001688:	6453      	str	r3, [r2, #68]	; 0x44
 800168a:	4b62      	ldr	r3, [pc, #392]	; (8001814 <HAL_GPIO_Init+0x320>)
 800168c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001696:	4a60      	ldr	r2, [pc, #384]	; (8001818 <HAL_GPIO_Init+0x324>)
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	089b      	lsrs	r3, r3, #2
 800169c:	3302      	adds	r3, #2
 800169e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	f003 0303 	and.w	r3, r3, #3
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	220f      	movs	r2, #15
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	43db      	mvns	r3, r3
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	4013      	ands	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a57      	ldr	r2, [pc, #348]	; (800181c <HAL_GPIO_Init+0x328>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d037      	beq.n	8001732 <HAL_GPIO_Init+0x23e>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a56      	ldr	r2, [pc, #344]	; (8001820 <HAL_GPIO_Init+0x32c>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d031      	beq.n	800172e <HAL_GPIO_Init+0x23a>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a55      	ldr	r2, [pc, #340]	; (8001824 <HAL_GPIO_Init+0x330>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d02b      	beq.n	800172a <HAL_GPIO_Init+0x236>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a54      	ldr	r2, [pc, #336]	; (8001828 <HAL_GPIO_Init+0x334>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d025      	beq.n	8001726 <HAL_GPIO_Init+0x232>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a53      	ldr	r2, [pc, #332]	; (800182c <HAL_GPIO_Init+0x338>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d01f      	beq.n	8001722 <HAL_GPIO_Init+0x22e>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a52      	ldr	r2, [pc, #328]	; (8001830 <HAL_GPIO_Init+0x33c>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d019      	beq.n	800171e <HAL_GPIO_Init+0x22a>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a51      	ldr	r2, [pc, #324]	; (8001834 <HAL_GPIO_Init+0x340>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d013      	beq.n	800171a <HAL_GPIO_Init+0x226>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a50      	ldr	r2, [pc, #320]	; (8001838 <HAL_GPIO_Init+0x344>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d00d      	beq.n	8001716 <HAL_GPIO_Init+0x222>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a4f      	ldr	r2, [pc, #316]	; (800183c <HAL_GPIO_Init+0x348>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d007      	beq.n	8001712 <HAL_GPIO_Init+0x21e>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a4e      	ldr	r2, [pc, #312]	; (8001840 <HAL_GPIO_Init+0x34c>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d101      	bne.n	800170e <HAL_GPIO_Init+0x21a>
 800170a:	2309      	movs	r3, #9
 800170c:	e012      	b.n	8001734 <HAL_GPIO_Init+0x240>
 800170e:	230a      	movs	r3, #10
 8001710:	e010      	b.n	8001734 <HAL_GPIO_Init+0x240>
 8001712:	2308      	movs	r3, #8
 8001714:	e00e      	b.n	8001734 <HAL_GPIO_Init+0x240>
 8001716:	2307      	movs	r3, #7
 8001718:	e00c      	b.n	8001734 <HAL_GPIO_Init+0x240>
 800171a:	2306      	movs	r3, #6
 800171c:	e00a      	b.n	8001734 <HAL_GPIO_Init+0x240>
 800171e:	2305      	movs	r3, #5
 8001720:	e008      	b.n	8001734 <HAL_GPIO_Init+0x240>
 8001722:	2304      	movs	r3, #4
 8001724:	e006      	b.n	8001734 <HAL_GPIO_Init+0x240>
 8001726:	2303      	movs	r3, #3
 8001728:	e004      	b.n	8001734 <HAL_GPIO_Init+0x240>
 800172a:	2302      	movs	r3, #2
 800172c:	e002      	b.n	8001734 <HAL_GPIO_Init+0x240>
 800172e:	2301      	movs	r3, #1
 8001730:	e000      	b.n	8001734 <HAL_GPIO_Init+0x240>
 8001732:	2300      	movs	r3, #0
 8001734:	69fa      	ldr	r2, [r7, #28]
 8001736:	f002 0203 	and.w	r2, r2, #3
 800173a:	0092      	lsls	r2, r2, #2
 800173c:	4093      	lsls	r3, r2
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4313      	orrs	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001744:	4934      	ldr	r1, [pc, #208]	; (8001818 <HAL_GPIO_Init+0x324>)
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	089b      	lsrs	r3, r3, #2
 800174a:	3302      	adds	r3, #2
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001752:	4b3c      	ldr	r3, [pc, #240]	; (8001844 <HAL_GPIO_Init+0x350>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	43db      	mvns	r3, r3
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	4013      	ands	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	4313      	orrs	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001776:	4a33      	ldr	r2, [pc, #204]	; (8001844 <HAL_GPIO_Init+0x350>)
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800177c:	4b31      	ldr	r3, [pc, #196]	; (8001844 <HAL_GPIO_Init+0x350>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	43db      	mvns	r3, r3
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	4013      	ands	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d003      	beq.n	80017a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	4313      	orrs	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017a0:	4a28      	ldr	r2, [pc, #160]	; (8001844 <HAL_GPIO_Init+0x350>)
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017a6:	4b27      	ldr	r3, [pc, #156]	; (8001844 <HAL_GPIO_Init+0x350>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	43db      	mvns	r3, r3
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	4013      	ands	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017ca:	4a1e      	ldr	r2, [pc, #120]	; (8001844 <HAL_GPIO_Init+0x350>)
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017d0:	4b1c      	ldr	r3, [pc, #112]	; (8001844 <HAL_GPIO_Init+0x350>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	43db      	mvns	r3, r3
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	4013      	ands	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d003      	beq.n	80017f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017f4:	4a13      	ldr	r2, [pc, #76]	; (8001844 <HAL_GPIO_Init+0x350>)
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	3301      	adds	r3, #1
 80017fe:	61fb      	str	r3, [r7, #28]
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	2b0f      	cmp	r3, #15
 8001804:	f67f ae86 	bls.w	8001514 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001808:	bf00      	nop
 800180a:	3724      	adds	r7, #36	; 0x24
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	40023800 	.word	0x40023800
 8001818:	40013800 	.word	0x40013800
 800181c:	40020000 	.word	0x40020000
 8001820:	40020400 	.word	0x40020400
 8001824:	40020800 	.word	0x40020800
 8001828:	40020c00 	.word	0x40020c00
 800182c:	40021000 	.word	0x40021000
 8001830:	40021400 	.word	0x40021400
 8001834:	40021800 	.word	0x40021800
 8001838:	40021c00 	.word	0x40021c00
 800183c:	40022000 	.word	0x40022000
 8001840:	40022400 	.word	0x40022400
 8001844:	40013c00 	.word	0x40013c00

08001848 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	460b      	mov	r3, r1
 8001852:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	691a      	ldr	r2, [r3, #16]
 8001858:	887b      	ldrh	r3, [r7, #2]
 800185a:	4013      	ands	r3, r2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d002      	beq.n	8001866 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001860:	2301      	movs	r3, #1
 8001862:	73fb      	strb	r3, [r7, #15]
 8001864:	e001      	b.n	800186a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001866:	2300      	movs	r3, #0
 8001868:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800186a:	7bfb      	ldrb	r3, [r7, #15]
}
 800186c:	4618      	mov	r0, r3
 800186e:	3714      	adds	r7, #20
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	460b      	mov	r3, r1
 8001882:	807b      	strh	r3, [r7, #2]
 8001884:	4613      	mov	r3, r2
 8001886:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001888:	787b      	ldrb	r3, [r7, #1]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d003      	beq.n	8001896 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800188e:	887a      	ldrh	r2, [r7, #2]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001894:	e003      	b.n	800189e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001896:	887b      	ldrh	r3, [r7, #2]
 8001898:	041a      	lsls	r2, r3, #16
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	619a      	str	r2, [r3, #24]
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80018aa:	b590      	push	{r4, r7, lr}
 80018ac:	b089      	sub	sp, #36	; 0x24
 80018ae:	af04      	add	r7, sp, #16
 80018b0:	6078      	str	r0, [r7, #4]
 80018b2:	4608      	mov	r0, r1
 80018b4:	4611      	mov	r1, r2
 80018b6:	461a      	mov	r2, r3
 80018b8:	4603      	mov	r3, r0
 80018ba:	70fb      	strb	r3, [r7, #3]
 80018bc:	460b      	mov	r3, r1
 80018be:	70bb      	strb	r3, [r7, #2]
 80018c0:	4613      	mov	r3, r2
 80018c2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d101      	bne.n	80018d2 <HAL_HCD_HC_Init+0x28>
 80018ce:	2302      	movs	r3, #2
 80018d0:	e07f      	b.n	80019d2 <HAL_HCD_HC_Init+0x128>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2201      	movs	r2, #1
 80018d6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80018da:	78fa      	ldrb	r2, [r7, #3]
 80018dc:	6879      	ldr	r1, [r7, #4]
 80018de:	4613      	mov	r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	4413      	add	r3, r2
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	440b      	add	r3, r1
 80018e8:	333d      	adds	r3, #61	; 0x3d
 80018ea:	2200      	movs	r2, #0
 80018ec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80018ee:	78fa      	ldrb	r2, [r7, #3]
 80018f0:	6879      	ldr	r1, [r7, #4]
 80018f2:	4613      	mov	r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	4413      	add	r3, r2
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	440b      	add	r3, r1
 80018fc:	3338      	adds	r3, #56	; 0x38
 80018fe:	787a      	ldrb	r2, [r7, #1]
 8001900:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001902:	78fa      	ldrb	r2, [r7, #3]
 8001904:	6879      	ldr	r1, [r7, #4]
 8001906:	4613      	mov	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4413      	add	r3, r2
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	440b      	add	r3, r1
 8001910:	3340      	adds	r3, #64	; 0x40
 8001912:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001914:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001916:	78fa      	ldrb	r2, [r7, #3]
 8001918:	6879      	ldr	r1, [r7, #4]
 800191a:	4613      	mov	r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	4413      	add	r3, r2
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	440b      	add	r3, r1
 8001924:	3339      	adds	r3, #57	; 0x39
 8001926:	78fa      	ldrb	r2, [r7, #3]
 8001928:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800192a:	78fa      	ldrb	r2, [r7, #3]
 800192c:	6879      	ldr	r1, [r7, #4]
 800192e:	4613      	mov	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4413      	add	r3, r2
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	440b      	add	r3, r1
 8001938:	333f      	adds	r3, #63	; 0x3f
 800193a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800193e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001940:	78fa      	ldrb	r2, [r7, #3]
 8001942:	78bb      	ldrb	r3, [r7, #2]
 8001944:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001948:	b2d8      	uxtb	r0, r3
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	440b      	add	r3, r1
 8001956:	333a      	adds	r3, #58	; 0x3a
 8001958:	4602      	mov	r2, r0
 800195a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800195c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001960:	2b00      	cmp	r3, #0
 8001962:	da0a      	bge.n	800197a <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001964:	78fa      	ldrb	r2, [r7, #3]
 8001966:	6879      	ldr	r1, [r7, #4]
 8001968:	4613      	mov	r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4413      	add	r3, r2
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	440b      	add	r3, r1
 8001972:	333b      	adds	r3, #59	; 0x3b
 8001974:	2201      	movs	r2, #1
 8001976:	701a      	strb	r2, [r3, #0]
 8001978:	e009      	b.n	800198e <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800197a:	78fa      	ldrb	r2, [r7, #3]
 800197c:	6879      	ldr	r1, [r7, #4]
 800197e:	4613      	mov	r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	4413      	add	r3, r2
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	440b      	add	r3, r1
 8001988:	333b      	adds	r3, #59	; 0x3b
 800198a:	2200      	movs	r2, #0
 800198c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800198e:	78fa      	ldrb	r2, [r7, #3]
 8001990:	6879      	ldr	r1, [r7, #4]
 8001992:	4613      	mov	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4413      	add	r3, r2
 8001998:	00db      	lsls	r3, r3, #3
 800199a:	440b      	add	r3, r1
 800199c:	333c      	adds	r3, #60	; 0x3c
 800199e:	f897 2020 	ldrb.w	r2, [r7, #32]
 80019a2:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6818      	ldr	r0, [r3, #0]
 80019a8:	787c      	ldrb	r4, [r7, #1]
 80019aa:	78ba      	ldrb	r2, [r7, #2]
 80019ac:	78f9      	ldrb	r1, [r7, #3]
 80019ae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80019b0:	9302      	str	r3, [sp, #8]
 80019b2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80019b6:	9301      	str	r3, [sp, #4]
 80019b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	4623      	mov	r3, r4
 80019c0:	f005 ffda 	bl	8007978 <USB_HC_Init>
 80019c4:	4603      	mov	r3, r0
 80019c6:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80019d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3714      	adds	r7, #20
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd90      	pop	{r4, r7, pc}
	...

080019dc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	4608      	mov	r0, r1
 80019e6:	4611      	mov	r1, r2
 80019e8:	461a      	mov	r2, r3
 80019ea:	4603      	mov	r3, r0
 80019ec:	70fb      	strb	r3, [r7, #3]
 80019ee:	460b      	mov	r3, r1
 80019f0:	70bb      	strb	r3, [r7, #2]
 80019f2:	4613      	mov	r3, r2
 80019f4:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 80019f6:	78fa      	ldrb	r2, [r7, #3]
 80019f8:	6879      	ldr	r1, [r7, #4]
 80019fa:	4613      	mov	r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	4413      	add	r3, r2
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	440b      	add	r3, r1
 8001a04:	333b      	adds	r3, #59	; 0x3b
 8001a06:	78ba      	ldrb	r2, [r7, #2]
 8001a08:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001a0a:	78fa      	ldrb	r2, [r7, #3]
 8001a0c:	6879      	ldr	r1, [r7, #4]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	4413      	add	r3, r2
 8001a14:	00db      	lsls	r3, r3, #3
 8001a16:	440b      	add	r3, r1
 8001a18:	333f      	adds	r3, #63	; 0x3f
 8001a1a:	787a      	ldrb	r2, [r7, #1]
 8001a1c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001a1e:	7c3b      	ldrb	r3, [r7, #16]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d10a      	bne.n	8001a3a <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001a24:	78fa      	ldrb	r2, [r7, #3]
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4413      	add	r3, r2
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	440b      	add	r3, r1
 8001a32:	3342      	adds	r3, #66	; 0x42
 8001a34:	2203      	movs	r2, #3
 8001a36:	701a      	strb	r2, [r3, #0]
 8001a38:	e009      	b.n	8001a4e <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a3a:	78fa      	ldrb	r2, [r7, #3]
 8001a3c:	6879      	ldr	r1, [r7, #4]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	4413      	add	r3, r2
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	440b      	add	r3, r1
 8001a48:	3342      	adds	r3, #66	; 0x42
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001a4e:	787b      	ldrb	r3, [r7, #1]
 8001a50:	2b03      	cmp	r3, #3
 8001a52:	f200 80d6 	bhi.w	8001c02 <HAL_HCD_HC_SubmitRequest+0x226>
 8001a56:	a201      	add	r2, pc, #4	; (adr r2, 8001a5c <HAL_HCD_HC_SubmitRequest+0x80>)
 8001a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a5c:	08001a6d 	.word	0x08001a6d
 8001a60:	08001bed 	.word	0x08001bed
 8001a64:	08001ad9 	.word	0x08001ad9
 8001a68:	08001b63 	.word	0x08001b63
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001a6c:	7c3b      	ldrb	r3, [r7, #16]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	f040 80c9 	bne.w	8001c06 <HAL_HCD_HC_SubmitRequest+0x22a>
 8001a74:	78bb      	ldrb	r3, [r7, #2]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	f040 80c5 	bne.w	8001c06 <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8001a7c:	8b3b      	ldrh	r3, [r7, #24]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d109      	bne.n	8001a96 <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001a82:	78fa      	ldrb	r2, [r7, #3]
 8001a84:	6879      	ldr	r1, [r7, #4]
 8001a86:	4613      	mov	r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	4413      	add	r3, r2
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	440b      	add	r3, r1
 8001a90:	3351      	adds	r3, #81	; 0x51
 8001a92:	2201      	movs	r2, #1
 8001a94:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a96:	78fa      	ldrb	r2, [r7, #3]
 8001a98:	6879      	ldr	r1, [r7, #4]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	4413      	add	r3, r2
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	440b      	add	r3, r1
 8001aa4:	3351      	adds	r3, #81	; 0x51
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d10a      	bne.n	8001ac2 <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001aac:	78fa      	ldrb	r2, [r7, #3]
 8001aae:	6879      	ldr	r1, [r7, #4]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	4413      	add	r3, r2
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	440b      	add	r3, r1
 8001aba:	3342      	adds	r3, #66	; 0x42
 8001abc:	2200      	movs	r2, #0
 8001abe:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001ac0:	e0a1      	b.n	8001c06 <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ac2:	78fa      	ldrb	r2, [r7, #3]
 8001ac4:	6879      	ldr	r1, [r7, #4]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	4413      	add	r3, r2
 8001acc:	00db      	lsls	r3, r3, #3
 8001ace:	440b      	add	r3, r1
 8001ad0:	3342      	adds	r3, #66	; 0x42
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	701a      	strb	r2, [r3, #0]
      break;
 8001ad6:	e096      	b.n	8001c06 <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001ad8:	78bb      	ldrb	r3, [r7, #2]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d120      	bne.n	8001b20 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ade:	78fa      	ldrb	r2, [r7, #3]
 8001ae0:	6879      	ldr	r1, [r7, #4]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	4413      	add	r3, r2
 8001ae8:	00db      	lsls	r3, r3, #3
 8001aea:	440b      	add	r3, r1
 8001aec:	3351      	adds	r3, #81	; 0x51
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d10a      	bne.n	8001b0a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001af4:	78fa      	ldrb	r2, [r7, #3]
 8001af6:	6879      	ldr	r1, [r7, #4]
 8001af8:	4613      	mov	r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	4413      	add	r3, r2
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	440b      	add	r3, r1
 8001b02:	3342      	adds	r3, #66	; 0x42
 8001b04:	2200      	movs	r2, #0
 8001b06:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001b08:	e07e      	b.n	8001c08 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b0a:	78fa      	ldrb	r2, [r7, #3]
 8001b0c:	6879      	ldr	r1, [r7, #4]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	4413      	add	r3, r2
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	440b      	add	r3, r1
 8001b18:	3342      	adds	r3, #66	; 0x42
 8001b1a:	2202      	movs	r2, #2
 8001b1c:	701a      	strb	r2, [r3, #0]
      break;
 8001b1e:	e073      	b.n	8001c08 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b20:	78fa      	ldrb	r2, [r7, #3]
 8001b22:	6879      	ldr	r1, [r7, #4]
 8001b24:	4613      	mov	r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	4413      	add	r3, r2
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	440b      	add	r3, r1
 8001b2e:	3350      	adds	r3, #80	; 0x50
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d10a      	bne.n	8001b4c <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b36:	78fa      	ldrb	r2, [r7, #3]
 8001b38:	6879      	ldr	r1, [r7, #4]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	4413      	add	r3, r2
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	440b      	add	r3, r1
 8001b44:	3342      	adds	r3, #66	; 0x42
 8001b46:	2200      	movs	r2, #0
 8001b48:	701a      	strb	r2, [r3, #0]
      break;
 8001b4a:	e05d      	b.n	8001c08 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b4c:	78fa      	ldrb	r2, [r7, #3]
 8001b4e:	6879      	ldr	r1, [r7, #4]
 8001b50:	4613      	mov	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	4413      	add	r3, r2
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	440b      	add	r3, r1
 8001b5a:	3342      	adds	r3, #66	; 0x42
 8001b5c:	2202      	movs	r2, #2
 8001b5e:	701a      	strb	r2, [r3, #0]
      break;
 8001b60:	e052      	b.n	8001c08 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001b62:	78bb      	ldrb	r3, [r7, #2]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d120      	bne.n	8001baa <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b68:	78fa      	ldrb	r2, [r7, #3]
 8001b6a:	6879      	ldr	r1, [r7, #4]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4413      	add	r3, r2
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	440b      	add	r3, r1
 8001b76:	3351      	adds	r3, #81	; 0x51
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d10a      	bne.n	8001b94 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b7e:	78fa      	ldrb	r2, [r7, #3]
 8001b80:	6879      	ldr	r1, [r7, #4]
 8001b82:	4613      	mov	r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	4413      	add	r3, r2
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	440b      	add	r3, r1
 8001b8c:	3342      	adds	r3, #66	; 0x42
 8001b8e:	2200      	movs	r2, #0
 8001b90:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001b92:	e039      	b.n	8001c08 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b94:	78fa      	ldrb	r2, [r7, #3]
 8001b96:	6879      	ldr	r1, [r7, #4]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	440b      	add	r3, r1
 8001ba2:	3342      	adds	r3, #66	; 0x42
 8001ba4:	2202      	movs	r2, #2
 8001ba6:	701a      	strb	r2, [r3, #0]
      break;
 8001ba8:	e02e      	b.n	8001c08 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001baa:	78fa      	ldrb	r2, [r7, #3]
 8001bac:	6879      	ldr	r1, [r7, #4]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	4413      	add	r3, r2
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	440b      	add	r3, r1
 8001bb8:	3350      	adds	r3, #80	; 0x50
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d10a      	bne.n	8001bd6 <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bc0:	78fa      	ldrb	r2, [r7, #3]
 8001bc2:	6879      	ldr	r1, [r7, #4]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4413      	add	r3, r2
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	440b      	add	r3, r1
 8001bce:	3342      	adds	r3, #66	; 0x42
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	701a      	strb	r2, [r3, #0]
      break;
 8001bd4:	e018      	b.n	8001c08 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bd6:	78fa      	ldrb	r2, [r7, #3]
 8001bd8:	6879      	ldr	r1, [r7, #4]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4413      	add	r3, r2
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	440b      	add	r3, r1
 8001be4:	3342      	adds	r3, #66	; 0x42
 8001be6:	2202      	movs	r2, #2
 8001be8:	701a      	strb	r2, [r3, #0]
      break;
 8001bea:	e00d      	b.n	8001c08 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bec:	78fa      	ldrb	r2, [r7, #3]
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	440b      	add	r3, r1
 8001bfa:	3342      	adds	r3, #66	; 0x42
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	701a      	strb	r2, [r3, #0]
      break;
 8001c00:	e002      	b.n	8001c08 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 8001c02:	bf00      	nop
 8001c04:	e000      	b.n	8001c08 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 8001c06:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001c08:	78fa      	ldrb	r2, [r7, #3]
 8001c0a:	6879      	ldr	r1, [r7, #4]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	4413      	add	r3, r2
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	440b      	add	r3, r1
 8001c16:	3344      	adds	r3, #68	; 0x44
 8001c18:	697a      	ldr	r2, [r7, #20]
 8001c1a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001c1c:	78fa      	ldrb	r2, [r7, #3]
 8001c1e:	8b39      	ldrh	r1, [r7, #24]
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	4613      	mov	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4413      	add	r3, r2
 8001c28:	00db      	lsls	r3, r3, #3
 8001c2a:	4403      	add	r3, r0
 8001c2c:	3348      	adds	r3, #72	; 0x48
 8001c2e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001c30:	78fa      	ldrb	r2, [r7, #3]
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	4613      	mov	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	440b      	add	r3, r1
 8001c3e:	335c      	adds	r3, #92	; 0x5c
 8001c40:	2200      	movs	r2, #0
 8001c42:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001c44:	78fa      	ldrb	r2, [r7, #3]
 8001c46:	6879      	ldr	r1, [r7, #4]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	4413      	add	r3, r2
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	440b      	add	r3, r1
 8001c52:	334c      	adds	r3, #76	; 0x4c
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001c58:	78fa      	ldrb	r2, [r7, #3]
 8001c5a:	6879      	ldr	r1, [r7, #4]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	4413      	add	r3, r2
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	440b      	add	r3, r1
 8001c66:	3339      	adds	r3, #57	; 0x39
 8001c68:	78fa      	ldrb	r2, [r7, #3]
 8001c6a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001c6c:	78fa      	ldrb	r2, [r7, #3]
 8001c6e:	6879      	ldr	r1, [r7, #4]
 8001c70:	4613      	mov	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	4413      	add	r3, r2
 8001c76:	00db      	lsls	r3, r3, #3
 8001c78:	440b      	add	r3, r1
 8001c7a:	335d      	adds	r3, #93	; 0x5d
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6818      	ldr	r0, [r3, #0]
 8001c84:	78fa      	ldrb	r2, [r7, #3]
 8001c86:	4613      	mov	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4413      	add	r3, r2
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	3338      	adds	r3, #56	; 0x38
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	18d1      	adds	r1, r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	f005 ff76 	bl	8007b8c <USB_HC_StartXfer>
 8001ca0:	4603      	mov	r3, r0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop

08001cac <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f005 fd95 	bl	80077f2 <USB_GetMode>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	f040 80f1 	bne.w	8001eb2 <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f005 fd79 	bl	80077cc <USB_ReadInterrupts>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f000 80e7 	beq.w	8001eb0 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f005 fd70 	bl	80077cc <USB_ReadInterrupts>
 8001cec:	4603      	mov	r3, r0
 8001cee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cf2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001cf6:	d104      	bne.n	8001d02 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001d00:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f005 fd60 	bl	80077cc <USB_ReadInterrupts>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d16:	d104      	bne.n	8001d22 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001d20:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f005 fd50 	bl	80077cc <USB_ReadInterrupts>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001d36:	d104      	bne.n	8001d42 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001d40:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f005 fd40 	bl	80077cc <USB_ReadInterrupts>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d103      	bne.n	8001d5e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f005 fd32 	bl	80077cc <USB_ReadInterrupts>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d72:	d117      	bne.n	8001da4 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8001d82:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001d86:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f009 fd13 	bl	800b7b4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2101      	movs	r1, #1
 8001d94:	4618      	mov	r0, r3
 8001d96:	f005 fd3a 	bl	800780e <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001da2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f005 fd0f 	bl	80077cc <USB_ReadInterrupts>
 8001dae:	4603      	mov	r3, r0
 8001db0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001db4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001db8:	d102      	bne.n	8001dc0 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f001 f8a6 	bl	8002f0c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f005 fd01 	bl	80077cc <USB_ReadInterrupts>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	f003 0308 	and.w	r3, r3, #8
 8001dd0:	2b08      	cmp	r3, #8
 8001dd2:	d106      	bne.n	8001de2 <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f009 fcd1 	bl	800b77c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2208      	movs	r2, #8
 8001de0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f005 fcf0 	bl	80077cc <USB_ReadInterrupts>
 8001dec:	4603      	mov	r3, r0
 8001dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001df6:	d138      	bne.n	8001e6a <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f006 f809 	bl	8007e14 <USB_HC_ReadInterrupt>
 8001e02:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]
 8001e08:	e025      	b.n	8001e56 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	f003 030f 	and.w	r3, r3, #15
 8001e10:	68ba      	ldr	r2, [r7, #8]
 8001e12:	fa22 f303 	lsr.w	r3, r2, r3
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d018      	beq.n	8001e50 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	015a      	lsls	r2, r3, #5
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	4413      	add	r3, r2
 8001e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e34:	d106      	bne.n	8001e44 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 f8ac 	bl	8001f9a <HCD_HC_IN_IRQHandler>
 8001e42:	e005      	b.n	8001e50 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	4619      	mov	r1, r3
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 fc3c 	bl	80026c8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	3301      	adds	r3, #1
 8001e54:	617b      	str	r3, [r7, #20]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	697a      	ldr	r2, [r7, #20]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d3d4      	bcc.n	8001e0a <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f005 fcac 	bl	80077cc <USB_ReadInterrupts>
 8001e74:	4603      	mov	r3, r0
 8001e76:	f003 0310 	and.w	r3, r3, #16
 8001e7a:	2b10      	cmp	r3, #16
 8001e7c:	d101      	bne.n	8001e82 <HAL_HCD_IRQHandler+0x1d6>
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e000      	b.n	8001e84 <HAL_HCD_IRQHandler+0x1d8>
 8001e82:	2300      	movs	r3, #0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d014      	beq.n	8001eb2 <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	699a      	ldr	r2, [r3, #24]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f022 0210 	bic.w	r2, r2, #16
 8001e96:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 ff8b 	bl	8002db4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	699a      	ldr	r2, [r3, #24]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f042 0210 	orr.w	r2, r2, #16
 8001eac:	619a      	str	r2, [r3, #24]
 8001eae:	e000      	b.n	8001eb2 <HAL_HCD_IRQHandler+0x206>
      return;
 8001eb0:	bf00      	nop
    }
  }
}
 8001eb2:	3718      	adds	r7, #24
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d101      	bne.n	8001ece <HAL_HCD_Start+0x16>
 8001eca:	2302      	movs	r3, #2
 8001ecc:	e013      	b.n	8001ef6 <HAL_HCD_Start+0x3e>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f005 fbae 	bl	800763c <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f005 fcf5 	bl	80078d6 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b082      	sub	sp, #8
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d101      	bne.n	8001f14 <HAL_HCD_Stop+0x16>
 8001f10:	2302      	movs	r3, #2
 8001f12:	e00d      	b.n	8001f30 <HAL_HCD_Stop+0x32>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f006 f8c3 	bl	80080ac <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f005 fc9c 	bl	8007882 <USB_ResetPort>
 8001f4a:	4603      	mov	r3, r0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001f60:	78fa      	ldrb	r2, [r7, #3]
 8001f62:	6879      	ldr	r1, [r7, #4]
 8001f64:	4613      	mov	r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	4413      	add	r3, r2
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	440b      	add	r3, r1
 8001f6e:	335c      	adds	r3, #92	; 0x5c
 8001f70:	781b      	ldrb	r3, [r3, #0]
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr

08001f7e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b082      	sub	sp, #8
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f005 fcdc 	bl	8007948 <USB_GetHostSpeed>
 8001f90:	4603      	mov	r3, r0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b086      	sub	sp, #24
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001fb0:	78fb      	ldrb	r3, [r7, #3]
 8001fb2:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	015a      	lsls	r2, r3, #5
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	4413      	add	r3, r2
 8001fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 0304 	and.w	r3, r3, #4
 8001fc6:	2b04      	cmp	r3, #4
 8001fc8:	d119      	bne.n	8001ffe <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	015a      	lsls	r2, r3, #5
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	2304      	movs	r3, #4
 8001fda:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	015a      	lsls	r2, r3, #5
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	0151      	lsls	r1, r2, #5
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	440a      	add	r2, r1
 8001ff2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ff6:	f043 0302 	orr.w	r3, r3, #2
 8001ffa:	60d3      	str	r3, [r2, #12]
 8001ffc:	e095      	b.n	800212a <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	015a      	lsls	r2, r3, #5
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	4413      	add	r3, r2
 8002006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f003 0320 	and.w	r3, r3, #32
 8002010:	2b20      	cmp	r3, #32
 8002012:	d109      	bne.n	8002028 <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	015a      	lsls	r2, r3, #5
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	4413      	add	r3, r2
 800201c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002020:	461a      	mov	r2, r3
 8002022:	2320      	movs	r3, #32
 8002024:	6093      	str	r3, [r2, #8]
 8002026:	e080      	b.n	800212a <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	015a      	lsls	r2, r3, #5
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	4413      	add	r3, r2
 8002030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f003 0308 	and.w	r3, r3, #8
 800203a:	2b08      	cmp	r3, #8
 800203c:	d134      	bne.n	80020a8 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	015a      	lsls	r2, r3, #5
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	4413      	add	r3, r2
 8002046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	0151      	lsls	r1, r2, #5
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	440a      	add	r2, r1
 8002054:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002058:	f043 0302 	orr.w	r3, r3, #2
 800205c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	4613      	mov	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4413      	add	r3, r2
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	440b      	add	r3, r1
 800206c:	335d      	adds	r3, #93	; 0x5d
 800206e:	2205      	movs	r2, #5
 8002070:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	015a      	lsls	r2, r3, #5
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	4413      	add	r3, r2
 800207a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800207e:	461a      	mov	r2, r3
 8002080:	2310      	movs	r3, #16
 8002082:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	015a      	lsls	r2, r3, #5
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	4413      	add	r3, r2
 800208c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002090:	461a      	mov	r2, r3
 8002092:	2308      	movs	r3, #8
 8002094:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	b2d2      	uxtb	r2, r2
 800209e:	4611      	mov	r1, r2
 80020a0:	4618      	mov	r0, r3
 80020a2:	f005 fec8 	bl	8007e36 <USB_HC_Halt>
 80020a6:	e040      	b.n	800212a <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	015a      	lsls	r2, r3, #5
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	4413      	add	r3, r2
 80020b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020be:	d134      	bne.n	800212a <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	015a      	lsls	r2, r3, #5
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	4413      	add	r3, r2
 80020c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	0151      	lsls	r1, r2, #5
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	440a      	add	r2, r1
 80020d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020da:	f043 0302 	orr.w	r3, r3, #2
 80020de:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	4611      	mov	r1, r2
 80020ea:	4618      	mov	r0, r3
 80020ec:	f005 fea3 	bl	8007e36 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	015a      	lsls	r2, r3, #5
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	4413      	add	r3, r2
 80020f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020fc:	461a      	mov	r2, r3
 80020fe:	2310      	movs	r3, #16
 8002100:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	4613      	mov	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4413      	add	r3, r2
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	440b      	add	r3, r1
 8002110:	335d      	adds	r3, #93	; 0x5d
 8002112:	2208      	movs	r2, #8
 8002114:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	015a      	lsls	r2, r3, #5
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	4413      	add	r3, r2
 800211e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002122:	461a      	mov	r2, r3
 8002124:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002128:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	015a      	lsls	r2, r3, #5
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	4413      	add	r3, r2
 8002132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800213c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002140:	d122      	bne.n	8002188 <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	015a      	lsls	r2, r3, #5
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	4413      	add	r3, r2
 800214a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	0151      	lsls	r1, r2, #5
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	440a      	add	r2, r1
 8002158:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800215c:	f043 0302 	orr.w	r3, r3, #2
 8002160:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	b2d2      	uxtb	r2, r2
 800216a:	4611      	mov	r1, r2
 800216c:	4618      	mov	r0, r3
 800216e:	f005 fe62 	bl	8007e36 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	015a      	lsls	r2, r3, #5
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	4413      	add	r3, r2
 800217a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800217e:	461a      	mov	r2, r3
 8002180:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002184:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002186:	e29b      	b.n	80026c0 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	015a      	lsls	r2, r3, #5
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	4413      	add	r3, r2
 8002190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	2b01      	cmp	r3, #1
 800219c:	f040 80c1 	bne.w	8002322 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d01b      	beq.n	80021e0 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80021a8:	6879      	ldr	r1, [r7, #4]
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	4613      	mov	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	4413      	add	r3, r2
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	440b      	add	r3, r1
 80021b6:	3348      	adds	r3, #72	; 0x48
 80021b8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	0159      	lsls	r1, r3, #5
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	440b      	add	r3, r1
 80021c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c6:	691b      	ldr	r3, [r3, #16]
 80021c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80021cc:	1ad1      	subs	r1, r2, r3
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	4613      	mov	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4413      	add	r3, r2
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	4403      	add	r3, r0
 80021dc:	334c      	adds	r3, #76	; 0x4c
 80021de:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80021e0:	6879      	ldr	r1, [r7, #4]
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	4613      	mov	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4413      	add	r3, r2
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	440b      	add	r3, r1
 80021ee:	335d      	adds	r3, #93	; 0x5d
 80021f0:	2201      	movs	r2, #1
 80021f2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80021f4:	6879      	ldr	r1, [r7, #4]
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	4613      	mov	r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4413      	add	r3, r2
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	440b      	add	r3, r1
 8002202:	3358      	adds	r3, #88	; 0x58
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	015a      	lsls	r2, r3, #5
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	4413      	add	r3, r2
 8002210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002214:	461a      	mov	r2, r3
 8002216:	2301      	movs	r3, #1
 8002218:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	4613      	mov	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	440b      	add	r3, r1
 8002228:	333f      	adds	r3, #63	; 0x3f
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00a      	beq.n	8002246 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002230:	6879      	ldr	r1, [r7, #4]
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	4613      	mov	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4413      	add	r3, r2
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	440b      	add	r3, r1
 800223e:	333f      	adds	r3, #63	; 0x3f
 8002240:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002242:	2b02      	cmp	r3, #2
 8002244:	d121      	bne.n	800228a <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	015a      	lsls	r2, r3, #5
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	4413      	add	r3, r2
 800224e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	0151      	lsls	r1, r2, #5
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	440a      	add	r2, r1
 800225c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002260:	f043 0302 	orr.w	r3, r3, #2
 8002264:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	b2d2      	uxtb	r2, r2
 800226e:	4611      	mov	r1, r2
 8002270:	4618      	mov	r0, r3
 8002272:	f005 fde0 	bl	8007e36 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	015a      	lsls	r2, r3, #5
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	4413      	add	r3, r2
 800227e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002282:	461a      	mov	r2, r3
 8002284:	2310      	movs	r3, #16
 8002286:	6093      	str	r3, [r2, #8]
 8002288:	e034      	b.n	80022f4 <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800228a:	6879      	ldr	r1, [r7, #4]
 800228c:	68fa      	ldr	r2, [r7, #12]
 800228e:	4613      	mov	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	440b      	add	r3, r1
 8002298:	333f      	adds	r3, #63	; 0x3f
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	2b03      	cmp	r3, #3
 800229e:	d129      	bne.n	80022f4 <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	015a      	lsls	r2, r3, #5
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	4413      	add	r3, r2
 80022a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	0151      	lsls	r1, r2, #5
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	440a      	add	r2, r1
 80022b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80022be:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80022c0:	6879      	ldr	r1, [r7, #4]
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	4613      	mov	r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	4413      	add	r3, r2
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	440b      	add	r3, r1
 80022ce:	335c      	adds	r3, #92	; 0x5c
 80022d0:	2201      	movs	r2, #1
 80022d2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	b2d8      	uxtb	r0, r3
 80022d8:	6879      	ldr	r1, [r7, #4]
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	4613      	mov	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	440b      	add	r3, r1
 80022e6:	335c      	adds	r3, #92	; 0x5c
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	461a      	mov	r2, r3
 80022ec:	4601      	mov	r1, r0
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f009 fa6e 	bl	800b7d0 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	4613      	mov	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	440b      	add	r3, r1
 8002302:	3350      	adds	r3, #80	; 0x50
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	f083 0301 	eor.w	r3, r3, #1
 800230a:	b2d8      	uxtb	r0, r3
 800230c:	6879      	ldr	r1, [r7, #4]
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	4613      	mov	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	440b      	add	r3, r1
 800231a:	3350      	adds	r3, #80	; 0x50
 800231c:	4602      	mov	r2, r0
 800231e:	701a      	strb	r2, [r3, #0]
}
 8002320:	e1ce      	b.n	80026c0 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	015a      	lsls	r2, r3, #5
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	4413      	add	r3, r2
 800232a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b02      	cmp	r3, #2
 8002336:	f040 80f1 	bne.w	800251c <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	015a      	lsls	r2, r3, #5
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	4413      	add	r3, r2
 8002342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	0151      	lsls	r1, r2, #5
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	440a      	add	r2, r1
 8002350:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002354:	f023 0302 	bic.w	r3, r3, #2
 8002358:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	4613      	mov	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	440b      	add	r3, r1
 8002368:	335d      	adds	r3, #93	; 0x5d
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d10a      	bne.n	8002386 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	4613      	mov	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	4413      	add	r3, r2
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	440b      	add	r3, r1
 800237e:	335c      	adds	r3, #92	; 0x5c
 8002380:	2201      	movs	r2, #1
 8002382:	701a      	strb	r2, [r3, #0]
 8002384:	e0b0      	b.n	80024e8 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	4613      	mov	r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	4413      	add	r3, r2
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	440b      	add	r3, r1
 8002394:	335d      	adds	r3, #93	; 0x5d
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b05      	cmp	r3, #5
 800239a:	d10a      	bne.n	80023b2 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800239c:	6879      	ldr	r1, [r7, #4]
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	4613      	mov	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4413      	add	r3, r2
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	440b      	add	r3, r1
 80023aa:	335c      	adds	r3, #92	; 0x5c
 80023ac:	2205      	movs	r2, #5
 80023ae:	701a      	strb	r2, [r3, #0]
 80023b0:	e09a      	b.n	80024e8 <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	4613      	mov	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4413      	add	r3, r2
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	440b      	add	r3, r1
 80023c0:	335d      	adds	r3, #93	; 0x5d
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2b06      	cmp	r3, #6
 80023c6:	d00a      	beq.n	80023de <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80023c8:	6879      	ldr	r1, [r7, #4]
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	4613      	mov	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	440b      	add	r3, r1
 80023d6:	335d      	adds	r3, #93	; 0x5d
 80023d8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80023da:	2b08      	cmp	r3, #8
 80023dc:	d156      	bne.n	800248c <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	68fa      	ldr	r2, [r7, #12]
 80023e2:	4613      	mov	r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	4413      	add	r3, r2
 80023e8:	00db      	lsls	r3, r3, #3
 80023ea:	440b      	add	r3, r1
 80023ec:	3358      	adds	r3, #88	; 0x58
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	1c59      	adds	r1, r3, #1
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	4613      	mov	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	4403      	add	r3, r0
 8002400:	3358      	adds	r3, #88	; 0x58
 8002402:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002404:	6879      	ldr	r1, [r7, #4]
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	4613      	mov	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4413      	add	r3, r2
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	440b      	add	r3, r1
 8002412:	3358      	adds	r3, #88	; 0x58
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2b03      	cmp	r3, #3
 8002418:	d914      	bls.n	8002444 <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	4613      	mov	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	440b      	add	r3, r1
 8002428:	3358      	adds	r3, #88	; 0x58
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	4613      	mov	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4413      	add	r3, r2
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	440b      	add	r3, r1
 800243c:	335c      	adds	r3, #92	; 0x5c
 800243e:	2204      	movs	r2, #4
 8002440:	701a      	strb	r2, [r3, #0]
 8002442:	e009      	b.n	8002458 <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002444:	6879      	ldr	r1, [r7, #4]
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	4613      	mov	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	440b      	add	r3, r1
 8002452:	335c      	adds	r3, #92	; 0x5c
 8002454:	2202      	movs	r2, #2
 8002456:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	015a      	lsls	r2, r3, #5
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	4413      	add	r3, r2
 8002460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800246e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002476:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	015a      	lsls	r2, r3, #5
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	4413      	add	r3, r2
 8002480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002484:	461a      	mov	r2, r3
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	e02d      	b.n	80024e8 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800248c:	6879      	ldr	r1, [r7, #4]
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	4613      	mov	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4413      	add	r3, r2
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	440b      	add	r3, r1
 800249a:	335d      	adds	r3, #93	; 0x5d
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	2b03      	cmp	r3, #3
 80024a0:	d122      	bne.n	80024e8 <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	4613      	mov	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4413      	add	r3, r2
 80024ac:	00db      	lsls	r3, r3, #3
 80024ae:	440b      	add	r3, r1
 80024b0:	335c      	adds	r3, #92	; 0x5c
 80024b2:	2202      	movs	r2, #2
 80024b4:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	015a      	lsls	r2, r3, #5
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	4413      	add	r3, r2
 80024be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80024cc:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80024d4:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	015a      	lsls	r2, r3, #5
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	4413      	add	r3, r2
 80024de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e2:	461a      	mov	r2, r3
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	015a      	lsls	r2, r3, #5
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	4413      	add	r3, r2
 80024f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f4:	461a      	mov	r2, r3
 80024f6:	2302      	movs	r3, #2
 80024f8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	b2d8      	uxtb	r0, r3
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	4613      	mov	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	4413      	add	r3, r2
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	440b      	add	r3, r1
 800250c:	335c      	adds	r3, #92	; 0x5c
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	461a      	mov	r2, r3
 8002512:	4601      	mov	r1, r0
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f009 f95b 	bl	800b7d0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800251a:	e0d1      	b.n	80026c0 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	015a      	lsls	r2, r3, #5
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	4413      	add	r3, r2
 8002524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800252e:	2b80      	cmp	r3, #128	; 0x80
 8002530:	d13e      	bne.n	80025b0 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	015a      	lsls	r2, r3, #5
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	4413      	add	r3, r2
 800253a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	0151      	lsls	r1, r2, #5
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	440a      	add	r2, r1
 8002548:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800254c:	f043 0302 	orr.w	r3, r3, #2
 8002550:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	4613      	mov	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4413      	add	r3, r2
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	440b      	add	r3, r1
 8002560:	3358      	adds	r3, #88	; 0x58
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	1c59      	adds	r1, r3, #1
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	4613      	mov	r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	4413      	add	r3, r2
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	4403      	add	r3, r0
 8002574:	3358      	adds	r3, #88	; 0x58
 8002576:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	4613      	mov	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4413      	add	r3, r2
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	440b      	add	r3, r1
 8002586:	335d      	adds	r3, #93	; 0x5d
 8002588:	2206      	movs	r2, #6
 800258a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	b2d2      	uxtb	r2, r2
 8002594:	4611      	mov	r1, r2
 8002596:	4618      	mov	r0, r3
 8002598:	f005 fc4d 	bl	8007e36 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	015a      	lsls	r2, r3, #5
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	4413      	add	r3, r2
 80025a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a8:	461a      	mov	r2, r3
 80025aa:	2380      	movs	r3, #128	; 0x80
 80025ac:	6093      	str	r3, [r2, #8]
}
 80025ae:	e087      	b.n	80026c0 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	015a      	lsls	r2, r3, #5
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	4413      	add	r3, r2
 80025b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 0310 	and.w	r3, r3, #16
 80025c2:	2b10      	cmp	r3, #16
 80025c4:	d17c      	bne.n	80026c0 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80025c6:	6879      	ldr	r1, [r7, #4]
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	4613      	mov	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4413      	add	r3, r2
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	440b      	add	r3, r1
 80025d4:	333f      	adds	r3, #63	; 0x3f
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	2b03      	cmp	r3, #3
 80025da:	d122      	bne.n	8002622 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80025dc:	6879      	ldr	r1, [r7, #4]
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	4613      	mov	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4413      	add	r3, r2
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	440b      	add	r3, r1
 80025ea:	3358      	adds	r3, #88	; 0x58
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	015a      	lsls	r2, r3, #5
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	4413      	add	r3, r2
 80025f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	0151      	lsls	r1, r2, #5
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	440a      	add	r2, r1
 8002606:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800260a:	f043 0302 	orr.w	r3, r3, #2
 800260e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	4611      	mov	r1, r2
 800261a:	4618      	mov	r0, r3
 800261c:	f005 fc0b 	bl	8007e36 <USB_HC_Halt>
 8002620:	e045      	b.n	80026ae <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002622:	6879      	ldr	r1, [r7, #4]
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	4613      	mov	r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	4413      	add	r3, r2
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	440b      	add	r3, r1
 8002630:	333f      	adds	r3, #63	; 0x3f
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00a      	beq.n	800264e <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002638:	6879      	ldr	r1, [r7, #4]
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	4613      	mov	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4413      	add	r3, r2
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	440b      	add	r3, r1
 8002646:	333f      	adds	r3, #63	; 0x3f
 8002648:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800264a:	2b02      	cmp	r3, #2
 800264c:	d12f      	bne.n	80026ae <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	4613      	mov	r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	4413      	add	r3, r2
 8002658:	00db      	lsls	r3, r3, #3
 800265a:	440b      	add	r3, r1
 800265c:	3358      	adds	r3, #88	; 0x58
 800265e:	2200      	movs	r2, #0
 8002660:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d121      	bne.n	80026ae <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	4613      	mov	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	4413      	add	r3, r2
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	440b      	add	r3, r1
 8002678:	335d      	adds	r3, #93	; 0x5d
 800267a:	2203      	movs	r2, #3
 800267c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	015a      	lsls	r2, r3, #5
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	4413      	add	r3, r2
 8002686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	0151      	lsls	r1, r2, #5
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	440a      	add	r2, r1
 8002694:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002698:	f043 0302 	orr.w	r3, r3, #2
 800269c:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	b2d2      	uxtb	r2, r2
 80026a6:	4611      	mov	r1, r2
 80026a8:	4618      	mov	r0, r3
 80026aa:	f005 fbc4 	bl	8007e36 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	015a      	lsls	r2, r3, #5
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	4413      	add	r3, r2
 80026b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ba:	461a      	mov	r2, r3
 80026bc:	2310      	movs	r3, #16
 80026be:	6093      	str	r3, [r2, #8]
}
 80026c0:	bf00      	nop
 80026c2:	3718      	adds	r7, #24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	460b      	mov	r3, r1
 80026d2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80026de:	78fb      	ldrb	r3, [r7, #3]
 80026e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	015a      	lsls	r2, r3, #5
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	4413      	add	r3, r2
 80026ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f003 0304 	and.w	r3, r3, #4
 80026f4:	2b04      	cmp	r3, #4
 80026f6:	d119      	bne.n	800272c <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	015a      	lsls	r2, r3, #5
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	4413      	add	r3, r2
 8002700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002704:	461a      	mov	r2, r3
 8002706:	2304      	movs	r3, #4
 8002708:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	015a      	lsls	r2, r3, #5
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	4413      	add	r3, r2
 8002712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	0151      	lsls	r1, r2, #5
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	440a      	add	r2, r1
 8002720:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002724:	f043 0302 	orr.w	r3, r3, #2
 8002728:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800272a:	e33e      	b.n	8002daa <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	015a      	lsls	r2, r3, #5
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	4413      	add	r3, r2
 8002734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 0320 	and.w	r3, r3, #32
 800273e:	2b20      	cmp	r3, #32
 8002740:	d141      	bne.n	80027c6 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	015a      	lsls	r2, r3, #5
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	4413      	add	r3, r2
 800274a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800274e:	461a      	mov	r2, r3
 8002750:	2320      	movs	r3, #32
 8002752:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002754:	6879      	ldr	r1, [r7, #4]
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	4613      	mov	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4413      	add	r3, r2
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	440b      	add	r3, r1
 8002762:	333d      	adds	r3, #61	; 0x3d
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	2b01      	cmp	r3, #1
 8002768:	f040 831f 	bne.w	8002daa <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800276c:	6879      	ldr	r1, [r7, #4]
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	4613      	mov	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	440b      	add	r3, r1
 800277a:	333d      	adds	r3, #61	; 0x3d
 800277c:	2200      	movs	r2, #0
 800277e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002780:	6879      	ldr	r1, [r7, #4]
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	4613      	mov	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	440b      	add	r3, r1
 800278e:	335c      	adds	r3, #92	; 0x5c
 8002790:	2202      	movs	r2, #2
 8002792:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	015a      	lsls	r2, r3, #5
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	4413      	add	r3, r2
 800279c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	0151      	lsls	r1, r2, #5
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	440a      	add	r2, r1
 80027aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027ae:	f043 0302 	orr.w	r3, r3, #2
 80027b2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	4611      	mov	r1, r2
 80027be:	4618      	mov	r0, r3
 80027c0:	f005 fb39 	bl	8007e36 <USB_HC_Halt>
}
 80027c4:	e2f1      	b.n	8002daa <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	015a      	lsls	r2, r3, #5
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	4413      	add	r3, r2
 80027ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d8:	2b40      	cmp	r3, #64	; 0x40
 80027da:	d13f      	bne.n	800285c <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	4613      	mov	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	440b      	add	r3, r1
 80027ea:	335d      	adds	r3, #93	; 0x5d
 80027ec:	2204      	movs	r2, #4
 80027ee:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80027f0:	6879      	ldr	r1, [r7, #4]
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	4613      	mov	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	440b      	add	r3, r1
 80027fe:	333d      	adds	r3, #61	; 0x3d
 8002800:	2201      	movs	r2, #1
 8002802:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002804:	6879      	ldr	r1, [r7, #4]
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	4613      	mov	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	440b      	add	r3, r1
 8002812:	3358      	adds	r3, #88	; 0x58
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	015a      	lsls	r2, r3, #5
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	4413      	add	r3, r2
 8002820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	0151      	lsls	r1, r2, #5
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	440a      	add	r2, r1
 800282e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002832:	f043 0302 	orr.w	r3, r3, #2
 8002836:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	4611      	mov	r1, r2
 8002842:	4618      	mov	r0, r3
 8002844:	f005 faf7 	bl	8007e36 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	015a      	lsls	r2, r3, #5
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	4413      	add	r3, r2
 8002850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002854:	461a      	mov	r2, r3
 8002856:	2340      	movs	r3, #64	; 0x40
 8002858:	6093      	str	r3, [r2, #8]
}
 800285a:	e2a6      	b.n	8002daa <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	015a      	lsls	r2, r3, #5
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	4413      	add	r3, r2
 8002864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800286e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002872:	d122      	bne.n	80028ba <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	015a      	lsls	r2, r3, #5
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	4413      	add	r3, r2
 800287c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	0151      	lsls	r1, r2, #5
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	440a      	add	r2, r1
 800288a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800288e:	f043 0302 	orr.w	r3, r3, #2
 8002892:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	b2d2      	uxtb	r2, r2
 800289c:	4611      	mov	r1, r2
 800289e:	4618      	mov	r0, r3
 80028a0:	f005 fac9 	bl	8007e36 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	015a      	lsls	r2, r3, #5
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	4413      	add	r3, r2
 80028ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b0:	461a      	mov	r2, r3
 80028b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028b6:	6093      	str	r3, [r2, #8]
}
 80028b8:	e277      	b.n	8002daa <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	015a      	lsls	r2, r3, #5
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	4413      	add	r3, r2
 80028c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d135      	bne.n	800293c <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	4613      	mov	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	440b      	add	r3, r1
 80028de:	3358      	adds	r3, #88	; 0x58
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	015a      	lsls	r2, r3, #5
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	4413      	add	r3, r2
 80028ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	0151      	lsls	r1, r2, #5
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	440a      	add	r2, r1
 80028fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028fe:	f043 0302 	orr.w	r3, r3, #2
 8002902:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	b2d2      	uxtb	r2, r2
 800290c:	4611      	mov	r1, r2
 800290e:	4618      	mov	r0, r3
 8002910:	f005 fa91 	bl	8007e36 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	015a      	lsls	r2, r3, #5
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	4413      	add	r3, r2
 800291c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002920:	461a      	mov	r2, r3
 8002922:	2301      	movs	r3, #1
 8002924:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002926:	6879      	ldr	r1, [r7, #4]
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	4613      	mov	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	440b      	add	r3, r1
 8002934:	335d      	adds	r3, #93	; 0x5d
 8002936:	2201      	movs	r2, #1
 8002938:	701a      	strb	r2, [r3, #0]
}
 800293a:	e236      	b.n	8002daa <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	015a      	lsls	r2, r3, #5
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	4413      	add	r3, r2
 8002944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 0308 	and.w	r3, r3, #8
 800294e:	2b08      	cmp	r3, #8
 8002950:	d12b      	bne.n	80029aa <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	015a      	lsls	r2, r3, #5
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	4413      	add	r3, r2
 800295a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800295e:	461a      	mov	r2, r3
 8002960:	2308      	movs	r3, #8
 8002962:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	015a      	lsls	r2, r3, #5
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	4413      	add	r3, r2
 800296c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	0151      	lsls	r1, r2, #5
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	440a      	add	r2, r1
 800297a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800297e:	f043 0302 	orr.w	r3, r3, #2
 8002982:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	4611      	mov	r1, r2
 800298e:	4618      	mov	r0, r3
 8002990:	f005 fa51 	bl	8007e36 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	4613      	mov	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4413      	add	r3, r2
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	440b      	add	r3, r1
 80029a2:	335d      	adds	r3, #93	; 0x5d
 80029a4:	2205      	movs	r2, #5
 80029a6:	701a      	strb	r2, [r3, #0]
}
 80029a8:	e1ff      	b.n	8002daa <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	015a      	lsls	r2, r3, #5
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	4413      	add	r3, r2
 80029b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f003 0310 	and.w	r3, r3, #16
 80029bc:	2b10      	cmp	r3, #16
 80029be:	d155      	bne.n	8002a6c <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	4613      	mov	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	440b      	add	r3, r1
 80029ce:	3358      	adds	r3, #88	; 0x58
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80029d4:	6879      	ldr	r1, [r7, #4]
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	4613      	mov	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	4413      	add	r3, r2
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	440b      	add	r3, r1
 80029e2:	335d      	adds	r3, #93	; 0x5d
 80029e4:	2203      	movs	r2, #3
 80029e6:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80029e8:	6879      	ldr	r1, [r7, #4]
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	4613      	mov	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	440b      	add	r3, r1
 80029f6:	333d      	adds	r3, #61	; 0x3d
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d114      	bne.n	8002a28 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80029fe:	6879      	ldr	r1, [r7, #4]
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	4613      	mov	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	4413      	add	r3, r2
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	440b      	add	r3, r1
 8002a0c:	333c      	adds	r3, #60	; 0x3c
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d109      	bne.n	8002a28 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8002a14:	6879      	ldr	r1, [r7, #4]
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4413      	add	r3, r2
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	440b      	add	r3, r1
 8002a22:	333d      	adds	r3, #61	; 0x3d
 8002a24:	2201      	movs	r2, #1
 8002a26:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	015a      	lsls	r2, r3, #5
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	4413      	add	r3, r2
 8002a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	0151      	lsls	r1, r2, #5
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	440a      	add	r2, r1
 8002a3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a42:	f043 0302 	orr.w	r3, r3, #2
 8002a46:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	b2d2      	uxtb	r2, r2
 8002a50:	4611      	mov	r1, r2
 8002a52:	4618      	mov	r0, r3
 8002a54:	f005 f9ef 	bl	8007e36 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	015a      	lsls	r2, r3, #5
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	4413      	add	r3, r2
 8002a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a64:	461a      	mov	r2, r3
 8002a66:	2310      	movs	r3, #16
 8002a68:	6093      	str	r3, [r2, #8]
}
 8002a6a:	e19e      	b.n	8002daa <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	015a      	lsls	r2, r3, #5
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	4413      	add	r3, r2
 8002a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a7e:	2b80      	cmp	r3, #128	; 0x80
 8002a80:	d12b      	bne.n	8002ada <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	015a      	lsls	r2, r3, #5
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	4413      	add	r3, r2
 8002a8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	0151      	lsls	r1, r2, #5
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	440a      	add	r2, r1
 8002a98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a9c:	f043 0302 	orr.w	r3, r3, #2
 8002aa0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	b2d2      	uxtb	r2, r2
 8002aaa:	4611      	mov	r1, r2
 8002aac:	4618      	mov	r0, r3
 8002aae:	f005 f9c2 	bl	8007e36 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002ab2:	6879      	ldr	r1, [r7, #4]
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4413      	add	r3, r2
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	440b      	add	r3, r1
 8002ac0:	335d      	adds	r3, #93	; 0x5d
 8002ac2:	2206      	movs	r2, #6
 8002ac4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	015a      	lsls	r2, r3, #5
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	4413      	add	r3, r2
 8002ace:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	2380      	movs	r3, #128	; 0x80
 8002ad6:	6093      	str	r3, [r2, #8]
}
 8002ad8:	e167      	b.n	8002daa <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	015a      	lsls	r2, r3, #5
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002af0:	d135      	bne.n	8002b5e <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	015a      	lsls	r2, r3, #5
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	4413      	add	r3, r2
 8002afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	0151      	lsls	r1, r2, #5
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	440a      	add	r2, r1
 8002b08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b0c:	f043 0302 	orr.w	r3, r3, #2
 8002b10:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	b2d2      	uxtb	r2, r2
 8002b1a:	4611      	mov	r1, r2
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f005 f98a 	bl	8007e36 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	015a      	lsls	r2, r3, #5
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	4413      	add	r3, r2
 8002b2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b2e:	461a      	mov	r2, r3
 8002b30:	2310      	movs	r3, #16
 8002b32:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	015a      	lsls	r2, r3, #5
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b40:	461a      	mov	r2, r3
 8002b42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b46:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002b48:	6879      	ldr	r1, [r7, #4]
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	4413      	add	r3, r2
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	440b      	add	r3, r1
 8002b56:	335d      	adds	r3, #93	; 0x5d
 8002b58:	2208      	movs	r2, #8
 8002b5a:	701a      	strb	r2, [r3, #0]
}
 8002b5c:	e125      	b.n	8002daa <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	015a      	lsls	r2, r3, #5
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	4413      	add	r3, r2
 8002b66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	f040 811a 	bne.w	8002daa <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	015a      	lsls	r2, r3, #5
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	0151      	lsls	r1, r2, #5
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	440a      	add	r2, r1
 8002b8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b90:	f023 0302 	bic.w	r3, r3, #2
 8002b94:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002b96:	6879      	ldr	r1, [r7, #4]
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4413      	add	r3, r2
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	440b      	add	r3, r1
 8002ba4:	335d      	adds	r3, #93	; 0x5d
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d137      	bne.n	8002c1c <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002bac:	6879      	ldr	r1, [r7, #4]
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	4413      	add	r3, r2
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	440b      	add	r3, r1
 8002bba:	335c      	adds	r3, #92	; 0x5c
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002bc0:	6879      	ldr	r1, [r7, #4]
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4413      	add	r3, r2
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	440b      	add	r3, r1
 8002bce:	333f      	adds	r3, #63	; 0x3f
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d00b      	beq.n	8002bee <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4413      	add	r3, r2
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	440b      	add	r3, r1
 8002be4:	333f      	adds	r3, #63	; 0x3f
 8002be6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002be8:	2b03      	cmp	r3, #3
 8002bea:	f040 80c5 	bne.w	8002d78 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	440b      	add	r3, r1
 8002bfc:	3351      	adds	r3, #81	; 0x51
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	f083 0301 	eor.w	r3, r3, #1
 8002c04:	b2d8      	uxtb	r0, r3
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4413      	add	r3, r2
 8002c10:	00db      	lsls	r3, r3, #3
 8002c12:	440b      	add	r3, r1
 8002c14:	3351      	adds	r3, #81	; 0x51
 8002c16:	4602      	mov	r2, r0
 8002c18:	701a      	strb	r2, [r3, #0]
 8002c1a:	e0ad      	b.n	8002d78 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	4613      	mov	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	440b      	add	r3, r1
 8002c2a:	335d      	adds	r3, #93	; 0x5d
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	2b03      	cmp	r3, #3
 8002c30:	d10a      	bne.n	8002c48 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	4613      	mov	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4413      	add	r3, r2
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	440b      	add	r3, r1
 8002c40:	335c      	adds	r3, #92	; 0x5c
 8002c42:	2202      	movs	r2, #2
 8002c44:	701a      	strb	r2, [r3, #0]
 8002c46:	e097      	b.n	8002d78 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	4413      	add	r3, r2
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	440b      	add	r3, r1
 8002c56:	335d      	adds	r3, #93	; 0x5d
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	d10a      	bne.n	8002c74 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	4613      	mov	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4413      	add	r3, r2
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	440b      	add	r3, r1
 8002c6c:	335c      	adds	r3, #92	; 0x5c
 8002c6e:	2202      	movs	r2, #2
 8002c70:	701a      	strb	r2, [r3, #0]
 8002c72:	e081      	b.n	8002d78 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	440b      	add	r3, r1
 8002c82:	335d      	adds	r3, #93	; 0x5d
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	2b05      	cmp	r3, #5
 8002c88:	d10a      	bne.n	8002ca0 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002c8a:	6879      	ldr	r1, [r7, #4]
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	4413      	add	r3, r2
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	440b      	add	r3, r1
 8002c98:	335c      	adds	r3, #92	; 0x5c
 8002c9a:	2205      	movs	r2, #5
 8002c9c:	701a      	strb	r2, [r3, #0]
 8002c9e:	e06b      	b.n	8002d78 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	440b      	add	r3, r1
 8002cae:	335d      	adds	r3, #93	; 0x5d
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	2b06      	cmp	r3, #6
 8002cb4:	d00a      	beq.n	8002ccc <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002cb6:	6879      	ldr	r1, [r7, #4]
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	4413      	add	r3, r2
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	440b      	add	r3, r1
 8002cc4:	335d      	adds	r3, #93	; 0x5d
 8002cc6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002cc8:	2b08      	cmp	r3, #8
 8002cca:	d155      	bne.n	8002d78 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	440b      	add	r3, r1
 8002cda:	3358      	adds	r3, #88	; 0x58
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	1c59      	adds	r1, r3, #1
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4413      	add	r3, r2
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	4403      	add	r3, r0
 8002cee:	3358      	adds	r3, #88	; 0x58
 8002cf0:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4413      	add	r3, r2
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	440b      	add	r3, r1
 8002d00:	3358      	adds	r3, #88	; 0x58
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2b03      	cmp	r3, #3
 8002d06:	d914      	bls.n	8002d32 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002d08:	6879      	ldr	r1, [r7, #4]
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	4413      	add	r3, r2
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	440b      	add	r3, r1
 8002d16:	3358      	adds	r3, #88	; 0x58
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d1c:	6879      	ldr	r1, [r7, #4]
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	4613      	mov	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	440b      	add	r3, r1
 8002d2a:	335c      	adds	r3, #92	; 0x5c
 8002d2c:	2204      	movs	r2, #4
 8002d2e:	701a      	strb	r2, [r3, #0]
 8002d30:	e009      	b.n	8002d46 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	4613      	mov	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	440b      	add	r3, r1
 8002d40:	335c      	adds	r3, #92	; 0x5c
 8002d42:	2202      	movs	r2, #2
 8002d44:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	015a      	lsls	r2, r3, #5
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d5c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d64:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	015a      	lsls	r2, r3, #5
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d72:	461a      	mov	r2, r3
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	015a      	lsls	r2, r3, #5
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	4413      	add	r3, r2
 8002d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d84:	461a      	mov	r2, r3
 8002d86:	2302      	movs	r3, #2
 8002d88:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	b2d8      	uxtb	r0, r3
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	4613      	mov	r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	4413      	add	r3, r2
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	440b      	add	r3, r1
 8002d9c:	335c      	adds	r3, #92	; 0x5c
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	461a      	mov	r2, r3
 8002da2:	4601      	mov	r1, r0
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f008 fd13 	bl	800b7d0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002daa:	bf00      	nop
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
	...

08002db4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b08a      	sub	sp, #40	; 0x28
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc4:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	f003 030f 	and.w	r3, r3, #15
 8002dd4:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	0c5b      	lsrs	r3, r3, #17
 8002dda:	f003 030f 	and.w	r3, r3, #15
 8002dde:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	091b      	lsrs	r3, r3, #4
 8002de4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002de8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d003      	beq.n	8002df8 <HCD_RXQLVL_IRQHandler+0x44>
 8002df0:	2b05      	cmp	r3, #5
 8002df2:	f000 8082 	beq.w	8002efa <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002df6:	e083      	b.n	8002f00 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d07f      	beq.n	8002efe <HCD_RXQLVL_IRQHandler+0x14a>
 8002dfe:	6879      	ldr	r1, [r7, #4]
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	4613      	mov	r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4413      	add	r3, r2
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	440b      	add	r3, r1
 8002e0c:	3344      	adds	r3, #68	; 0x44
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d074      	beq.n	8002efe <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6818      	ldr	r0, [r3, #0]
 8002e18:	6879      	ldr	r1, [r7, #4]
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	440b      	add	r3, r1
 8002e26:	3344      	adds	r3, #68	; 0x44
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	b292      	uxth	r2, r2
 8002e2e:	4619      	mov	r1, r3
 8002e30:	f004 fca3 	bl	800777a <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002e34:	6879      	ldr	r1, [r7, #4]
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	4413      	add	r3, r2
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	440b      	add	r3, r1
 8002e42:	3344      	adds	r3, #68	; 0x44
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	18d1      	adds	r1, r2, r3
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4413      	add	r3, r2
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	4403      	add	r3, r0
 8002e58:	3344      	adds	r3, #68	; 0x44
 8002e5a:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002e5c:	6879      	ldr	r1, [r7, #4]
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	4613      	mov	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4413      	add	r3, r2
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	440b      	add	r3, r1
 8002e6a:	334c      	adds	r3, #76	; 0x4c
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	18d1      	adds	r1, r2, r3
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	4613      	mov	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4413      	add	r3, r2
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	4403      	add	r3, r0
 8002e80:	334c      	adds	r3, #76	; 0x4c
 8002e82:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	015a      	lsls	r2, r3, #5
 8002e88:	6a3b      	ldr	r3, [r7, #32]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e90:	691a      	ldr	r2, [r3, #16]
 8002e92:	4b1d      	ldr	r3, [pc, #116]	; (8002f08 <HCD_RXQLVL_IRQHandler+0x154>)
 8002e94:	4013      	ands	r3, r2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d031      	beq.n	8002efe <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	015a      	lsls	r2, r3, #5
 8002e9e:	6a3b      	ldr	r3, [r7, #32]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002eb0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002eb8:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	015a      	lsls	r2, r3, #5
 8002ebe:	6a3b      	ldr	r3, [r7, #32]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002ecc:	6879      	ldr	r1, [r7, #4]
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	4413      	add	r3, r2
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	440b      	add	r3, r1
 8002eda:	3350      	adds	r3, #80	; 0x50
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	f083 0301 	eor.w	r3, r3, #1
 8002ee2:	b2d8      	uxtb	r0, r3
 8002ee4:	6879      	ldr	r1, [r7, #4]
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	4413      	add	r3, r2
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	440b      	add	r3, r1
 8002ef2:	3350      	adds	r3, #80	; 0x50
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	701a      	strb	r2, [r3, #0]
      break;
 8002ef8:	e001      	b.n	8002efe <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002efa:	bf00      	nop
 8002efc:	e000      	b.n	8002f00 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002efe:	bf00      	nop
  }
}
 8002f00:	bf00      	nop
 8002f02:	3728      	adds	r7, #40	; 0x28
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	1ff80000 	.word	0x1ff80000

08002f0c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002f38:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d113      	bne.n	8002f6c <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d10a      	bne.n	8002f64 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	699a      	ldr	r2, [r3, #24]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002f5c:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f008 fc1a 	bl	800b798 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	f043 0302 	orr.w	r3, r3, #2
 8002f6a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f003 0308 	and.w	r3, r3, #8
 8002f72:	2b08      	cmp	r3, #8
 8002f74:	d147      	bne.n	8003006 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	f043 0308 	orr.w	r3, r3, #8
 8002f7c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f003 0304 	and.w	r3, r3, #4
 8002f84:	2b04      	cmp	r3, #4
 8002f86:	d129      	bne.n	8002fdc <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d113      	bne.n	8002fb8 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002f96:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f9a:	d106      	bne.n	8002faa <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2102      	movs	r1, #2
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f004 fc33 	bl	800780e <USB_InitFSLSPClkSel>
 8002fa8:	e011      	b.n	8002fce <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2101      	movs	r1, #1
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f004 fc2c 	bl	800780e <USB_InitFSLSPClkSel>
 8002fb6:	e00a      	b.n	8002fce <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	2b03      	cmp	r3, #3
 8002fbe:	d106      	bne.n	8002fce <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002fcc:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f008 fc0c 	bl	800b7ec <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f008 fbdf 	bl	800b798 <HAL_HCD_Connect_Callback>
 8002fda:	e014      	b.n	8003006 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f008 fc13 	bl	800b808 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002ff0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002ff4:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	699a      	ldr	r2, [r3, #24]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003004:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f003 0320 	and.w	r3, r3, #32
 800300c:	2b20      	cmp	r3, #32
 800300e:	d103      	bne.n	8003018 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	f043 0320 	orr.w	r3, r3, #32
 8003016:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800301e:	461a      	mov	r2, r3
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	6013      	str	r3, [r2, #0]
}
 8003024:	bf00      	nop
 8003026:	3718      	adds	r7, #24
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e07f      	b.n	800313e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d106      	bne.n	8003058 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f007 fd28 	bl	800aaa8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2224      	movs	r2, #36	; 0x24
 800305c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f022 0201 	bic.w	r2, r2, #1
 800306e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800307c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800308c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d107      	bne.n	80030a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	689a      	ldr	r2, [r3, #8]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030a2:	609a      	str	r2, [r3, #8]
 80030a4:	e006      	b.n	80030b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	689a      	ldr	r2, [r3, #8]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80030b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d104      	bne.n	80030c6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6859      	ldr	r1, [r3, #4]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	4b1d      	ldr	r3, [pc, #116]	; (8003148 <HAL_I2C_Init+0x11c>)
 80030d2:	430b      	orrs	r3, r1
 80030d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68da      	ldr	r2, [r3, #12]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	691a      	ldr	r2, [r3, #16]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	ea42 0103 	orr.w	r1, r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	021a      	lsls	r2, r3, #8
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	430a      	orrs	r2, r1
 80030fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	69d9      	ldr	r1, [r3, #28]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a1a      	ldr	r2, [r3, #32]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	430a      	orrs	r2, r1
 800310e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f042 0201 	orr.w	r2, r2, #1
 800311e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2220      	movs	r2, #32
 800312a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	02008000 	.word	0x02008000

0800314c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b20      	cmp	r3, #32
 8003160:	d138      	bne.n	80031d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003168:	2b01      	cmp	r3, #1
 800316a:	d101      	bne.n	8003170 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800316c:	2302      	movs	r3, #2
 800316e:	e032      	b.n	80031d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2224      	movs	r2, #36	; 0x24
 800317c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 0201 	bic.w	r2, r2, #1
 800318e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800319e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6819      	ldr	r1, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	430a      	orrs	r2, r1
 80031ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f042 0201 	orr.w	r2, r2, #1
 80031be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2220      	movs	r2, #32
 80031c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031d0:	2300      	movs	r3, #0
 80031d2:	e000      	b.n	80031d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80031d4:	2302      	movs	r3, #2
  }
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr

080031e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80031e2:	b480      	push	{r7}
 80031e4:	b085      	sub	sp, #20
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
 80031ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	2b20      	cmp	r3, #32
 80031f6:	d139      	bne.n	800326c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d101      	bne.n	8003206 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003202:	2302      	movs	r3, #2
 8003204:	e033      	b.n	800326e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2224      	movs	r2, #36	; 0x24
 8003212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 0201 	bic.w	r2, r2, #1
 8003224:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003234:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	021b      	lsls	r3, r3, #8
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	4313      	orrs	r3, r2
 800323e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f042 0201 	orr.w	r2, r2, #1
 8003256:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2220      	movs	r2, #32
 800325c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003268:	2300      	movs	r3, #0
 800326a:	e000      	b.n	800326e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800326c:	2302      	movs	r3, #2
  }
}
 800326e:	4618      	mov	r0, r3
 8003270:	3714      	adds	r7, #20
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
	...

0800327c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e0bf      	b.n	800340e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d106      	bne.n	80032a8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f007 fc78 	bl	800ab98 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2202      	movs	r2, #2
 80032ac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	699a      	ldr	r2, [r3, #24]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80032be:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6999      	ldr	r1, [r3, #24]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80032d4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	430a      	orrs	r2, r1
 80032e2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6899      	ldr	r1, [r3, #8]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	4b4a      	ldr	r3, [pc, #296]	; (8003418 <HAL_LTDC_Init+0x19c>)
 80032f0:	400b      	ands	r3, r1
 80032f2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	695b      	ldr	r3, [r3, #20]
 80032f8:	041b      	lsls	r3, r3, #16
 80032fa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6899      	ldr	r1, [r3, #8]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	699a      	ldr	r2, [r3, #24]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	431a      	orrs	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	430a      	orrs	r2, r1
 8003310:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68d9      	ldr	r1, [r3, #12]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	4b3e      	ldr	r3, [pc, #248]	; (8003418 <HAL_LTDC_Init+0x19c>)
 800331e:	400b      	ands	r3, r1
 8003320:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	041b      	lsls	r3, r3, #16
 8003328:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68d9      	ldr	r1, [r3, #12]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a1a      	ldr	r2, [r3, #32]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	431a      	orrs	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	430a      	orrs	r2, r1
 800333e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6919      	ldr	r1, [r3, #16]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	4b33      	ldr	r3, [pc, #204]	; (8003418 <HAL_LTDC_Init+0x19c>)
 800334c:	400b      	ands	r3, r1
 800334e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003354:	041b      	lsls	r3, r3, #16
 8003356:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6919      	ldr	r1, [r3, #16]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	431a      	orrs	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	430a      	orrs	r2, r1
 800336c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6959      	ldr	r1, [r3, #20]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	4b27      	ldr	r3, [pc, #156]	; (8003418 <HAL_LTDC_Init+0x19c>)
 800337a:	400b      	ands	r3, r1
 800337c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003382:	041b      	lsls	r3, r3, #16
 8003384:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	6959      	ldr	r1, [r3, #20]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	431a      	orrs	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	430a      	orrs	r2, r1
 800339a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033a2:	021b      	lsls	r3, r3, #8
 80033a4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80033ac:	041b      	lsls	r3, r3, #16
 80033ae:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80033be:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80033d2:	431a      	orrs	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	430a      	orrs	r2, r1
 80033da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f042 0206 	orr.w	r2, r2, #6
 80033ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	699a      	ldr	r2, [r3, #24]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f042 0201 	orr.w	r2, r2, #1
 80033fa:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	f000f800 	.word	0xf000f800

0800341c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003432:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f003 0304 	and.w	r3, r3, #4
 800343a:	2b00      	cmp	r3, #0
 800343c:	d023      	beq.n	8003486 <HAL_LTDC_IRQHandler+0x6a>
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	2b00      	cmp	r3, #0
 8003446:	d01e      	beq.n	8003486 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f022 0204 	bic.w	r2, r2, #4
 8003456:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2204      	movs	r2, #4
 800345e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003466:	f043 0201 	orr.w	r2, r3, #1
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2204      	movs	r2, #4
 8003474:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 f86f 	bl	8003564 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d023      	beq.n	80034d8 <HAL_LTDC_IRQHandler+0xbc>
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d01e      	beq.n	80034d8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 0202 	bic.w	r2, r2, #2
 80034a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2202      	movs	r2, #2
 80034b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80034b8:	f043 0202 	orr.w	r2, r3, #2
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2204      	movs	r2, #4
 80034c6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 f846 	bl	8003564 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d01b      	beq.n	800351a <HAL_LTDC_IRQHandler+0xfe>
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d016      	beq.n	800351a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f022 0201 	bic.w	r2, r2, #1
 80034fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2201      	movs	r2, #1
 8003502:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 f82f 	bl	8003578 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f003 0308 	and.w	r3, r3, #8
 8003520:	2b00      	cmp	r3, #0
 8003522:	d01b      	beq.n	800355c <HAL_LTDC_IRQHandler+0x140>
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	f003 0308 	and.w	r3, r3, #8
 800352a:	2b00      	cmp	r3, #0
 800352c:	d016      	beq.n	800355c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 0208 	bic.w	r2, r2, #8
 800353c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2208      	movs	r2, #8
 8003544:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f818 	bl	800358c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800355c:	bf00      	nop
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80035a0:	b5b0      	push	{r4, r5, r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d101      	bne.n	80035ba <HAL_LTDC_ConfigLayer+0x1a>
 80035b6:	2302      	movs	r3, #2
 80035b8:	e02c      	b.n	8003614 <HAL_LTDC_ConfigLayer+0x74>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2202      	movs	r2, #2
 80035c6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2134      	movs	r1, #52	; 0x34
 80035d0:	fb01 f303 	mul.w	r3, r1, r3
 80035d4:	4413      	add	r3, r2
 80035d6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	4614      	mov	r4, r2
 80035de:	461d      	mov	r5, r3
 80035e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035ec:	682b      	ldr	r3, [r5, #0]
 80035ee:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	68b9      	ldr	r1, [r7, #8]
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f000 f811 	bl	800361c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2201      	movs	r2, #1
 8003600:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3710      	adds	r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	bdb0      	pop	{r4, r5, r7, pc}

0800361c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800361c:	b480      	push	{r7}
 800361e:	b089      	sub	sp, #36	; 0x24
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	685a      	ldr	r2, [r3, #4]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	0c1b      	lsrs	r3, r3, #16
 8003634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003638:	4413      	add	r3, r2
 800363a:	041b      	lsls	r3, r3, #16
 800363c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	461a      	mov	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	01db      	lsls	r3, r3, #7
 8003648:	4413      	add	r3, r2
 800364a:	3384      	adds	r3, #132	; 0x84
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	6812      	ldr	r2, [r2, #0]
 8003652:	4611      	mov	r1, r2
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	01d2      	lsls	r2, r2, #7
 8003658:	440a      	add	r2, r1
 800365a:	3284      	adds	r2, #132	; 0x84
 800365c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003660:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	0c1b      	lsrs	r3, r3, #16
 800366e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003672:	4413      	add	r3, r2
 8003674:	1c5a      	adds	r2, r3, #1
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4619      	mov	r1, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	01db      	lsls	r3, r3, #7
 8003680:	440b      	add	r3, r1
 8003682:	3384      	adds	r3, #132	; 0x84
 8003684:	4619      	mov	r1, r3
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	4313      	orrs	r3, r2
 800368a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	68da      	ldr	r2, [r3, #12]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800369a:	4413      	add	r3, r2
 800369c:	041b      	lsls	r3, r3, #16
 800369e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	461a      	mov	r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	01db      	lsls	r3, r3, #7
 80036aa:	4413      	add	r3, r2
 80036ac:	3384      	adds	r3, #132	; 0x84
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	6812      	ldr	r2, [r2, #0]
 80036b4:	4611      	mov	r1, r2
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	01d2      	lsls	r2, r2, #7
 80036ba:	440a      	add	r2, r1
 80036bc:	3284      	adds	r2, #132	; 0x84
 80036be:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80036c2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	689a      	ldr	r2, [r3, #8]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036d2:	4413      	add	r3, r2
 80036d4:	1c5a      	adds	r2, r3, #1
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4619      	mov	r1, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	01db      	lsls	r3, r3, #7
 80036e0:	440b      	add	r3, r1
 80036e2:	3384      	adds	r3, #132	; 0x84
 80036e4:	4619      	mov	r1, r3
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	461a      	mov	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	01db      	lsls	r3, r3, #7
 80036f6:	4413      	add	r3, r2
 80036f8:	3384      	adds	r3, #132	; 0x84
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	6812      	ldr	r2, [r2, #0]
 8003700:	4611      	mov	r1, r2
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	01d2      	lsls	r2, r2, #7
 8003706:	440a      	add	r2, r1
 8003708:	3284      	adds	r2, #132	; 0x84
 800370a:	f023 0307 	bic.w	r3, r3, #7
 800370e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	461a      	mov	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	01db      	lsls	r3, r3, #7
 800371a:	4413      	add	r3, r2
 800371c:	3384      	adds	r3, #132	; 0x84
 800371e:	461a      	mov	r2, r3
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800372c:	021b      	lsls	r3, r3, #8
 800372e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003736:	041b      	lsls	r3, r3, #16
 8003738:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	061b      	lsls	r3, r3, #24
 8003740:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	461a      	mov	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	01db      	lsls	r3, r3, #7
 800374c:	4413      	add	r3, r2
 800374e:	3384      	adds	r3, #132	; 0x84
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	461a      	mov	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	01db      	lsls	r3, r3, #7
 800375c:	4413      	add	r3, r2
 800375e:	3384      	adds	r3, #132	; 0x84
 8003760:	461a      	mov	r2, r3
 8003762:	2300      	movs	r3, #0
 8003764:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800376c:	461a      	mov	r2, r3
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	431a      	orrs	r2, r3
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	431a      	orrs	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4619      	mov	r1, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	01db      	lsls	r3, r3, #7
 8003780:	440b      	add	r3, r1
 8003782:	3384      	adds	r3, #132	; 0x84
 8003784:	4619      	mov	r1, r3
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	4313      	orrs	r3, r2
 800378a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	461a      	mov	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	01db      	lsls	r3, r3, #7
 8003796:	4413      	add	r3, r2
 8003798:	3384      	adds	r3, #132	; 0x84
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	6812      	ldr	r2, [r2, #0]
 80037a0:	4611      	mov	r1, r2
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	01d2      	lsls	r2, r2, #7
 80037a6:	440a      	add	r2, r1
 80037a8:	3284      	adds	r2, #132	; 0x84
 80037aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80037ae:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	461a      	mov	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	01db      	lsls	r3, r3, #7
 80037ba:	4413      	add	r3, r2
 80037bc:	3384      	adds	r3, #132	; 0x84
 80037be:	461a      	mov	r2, r3
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	695b      	ldr	r3, [r3, #20]
 80037c4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	461a      	mov	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	01db      	lsls	r3, r3, #7
 80037d0:	4413      	add	r3, r2
 80037d2:	3384      	adds	r3, #132	; 0x84
 80037d4:	69da      	ldr	r2, [r3, #28]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4619      	mov	r1, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	01db      	lsls	r3, r3, #7
 80037e0:	440b      	add	r3, r1
 80037e2:	3384      	adds	r3, #132	; 0x84
 80037e4:	4619      	mov	r1, r3
 80037e6:	4b58      	ldr	r3, [pc, #352]	; (8003948 <LTDC_SetConfig+0x32c>)
 80037e8:	4013      	ands	r3, r2
 80037ea:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	69da      	ldr	r2, [r3, #28]
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	68f9      	ldr	r1, [r7, #12]
 80037f6:	6809      	ldr	r1, [r1, #0]
 80037f8:	4608      	mov	r0, r1
 80037fa:	6879      	ldr	r1, [r7, #4]
 80037fc:	01c9      	lsls	r1, r1, #7
 80037fe:	4401      	add	r1, r0
 8003800:	3184      	adds	r1, #132	; 0x84
 8003802:	4313      	orrs	r3, r2
 8003804:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	461a      	mov	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	01db      	lsls	r3, r3, #7
 8003810:	4413      	add	r3, r2
 8003812:	3384      	adds	r3, #132	; 0x84
 8003814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	461a      	mov	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	01db      	lsls	r3, r3, #7
 8003820:	4413      	add	r3, r2
 8003822:	3384      	adds	r3, #132	; 0x84
 8003824:	461a      	mov	r2, r3
 8003826:	2300      	movs	r3, #0
 8003828:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	461a      	mov	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	01db      	lsls	r3, r3, #7
 8003834:	4413      	add	r3, r2
 8003836:	3384      	adds	r3, #132	; 0x84
 8003838:	461a      	mov	r2, r3
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d102      	bne.n	800384e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8003848:	2304      	movs	r3, #4
 800384a:	61fb      	str	r3, [r7, #28]
 800384c:	e01b      	b.n	8003886 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d102      	bne.n	800385c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8003856:	2303      	movs	r3, #3
 8003858:	61fb      	str	r3, [r7, #28]
 800385a:	e014      	b.n	8003886 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	2b04      	cmp	r3, #4
 8003862:	d00b      	beq.n	800387c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003868:	2b02      	cmp	r3, #2
 800386a:	d007      	beq.n	800387c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003870:	2b03      	cmp	r3, #3
 8003872:	d003      	beq.n	800387c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003878:	2b07      	cmp	r3, #7
 800387a:	d102      	bne.n	8003882 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800387c:	2302      	movs	r3, #2
 800387e:	61fb      	str	r3, [r7, #28]
 8003880:	e001      	b.n	8003886 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8003882:	2301      	movs	r3, #1
 8003884:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	461a      	mov	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	01db      	lsls	r3, r3, #7
 8003890:	4413      	add	r3, r2
 8003892:	3384      	adds	r3, #132	; 0x84
 8003894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	6812      	ldr	r2, [r2, #0]
 800389a:	4611      	mov	r1, r2
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	01d2      	lsls	r2, r2, #7
 80038a0:	440a      	add	r2, r1
 80038a2:	3284      	adds	r2, #132	; 0x84
 80038a4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80038a8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ae:	69fa      	ldr	r2, [r7, #28]
 80038b0:	fb02 f303 	mul.w	r3, r2, r3
 80038b4:	041a      	lsls	r2, r3, #16
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	6859      	ldr	r1, [r3, #4]
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	1acb      	subs	r3, r1, r3
 80038c0:	69f9      	ldr	r1, [r7, #28]
 80038c2:	fb01 f303 	mul.w	r3, r1, r3
 80038c6:	3303      	adds	r3, #3
 80038c8:	68f9      	ldr	r1, [r7, #12]
 80038ca:	6809      	ldr	r1, [r1, #0]
 80038cc:	4608      	mov	r0, r1
 80038ce:	6879      	ldr	r1, [r7, #4]
 80038d0:	01c9      	lsls	r1, r1, #7
 80038d2:	4401      	add	r1, r0
 80038d4:	3184      	adds	r1, #132	; 0x84
 80038d6:	4313      	orrs	r3, r2
 80038d8:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	461a      	mov	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	01db      	lsls	r3, r3, #7
 80038e4:	4413      	add	r3, r2
 80038e6:	3384      	adds	r3, #132	; 0x84
 80038e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4619      	mov	r1, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	01db      	lsls	r3, r3, #7
 80038f4:	440b      	add	r3, r1
 80038f6:	3384      	adds	r3, #132	; 0x84
 80038f8:	4619      	mov	r1, r3
 80038fa:	4b14      	ldr	r3, [pc, #80]	; (800394c <LTDC_SetConfig+0x330>)
 80038fc:	4013      	ands	r3, r2
 80038fe:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	461a      	mov	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	01db      	lsls	r3, r3, #7
 800390a:	4413      	add	r3, r2
 800390c:	3384      	adds	r3, #132	; 0x84
 800390e:	461a      	mov	r2, r3
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003914:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	461a      	mov	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	01db      	lsls	r3, r3, #7
 8003920:	4413      	add	r3, r2
 8003922:	3384      	adds	r3, #132	; 0x84
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	6812      	ldr	r2, [r2, #0]
 800392a:	4611      	mov	r1, r2
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	01d2      	lsls	r2, r2, #7
 8003930:	440a      	add	r2, r1
 8003932:	3284      	adds	r2, #132	; 0x84
 8003934:	f043 0301 	orr.w	r3, r3, #1
 8003938:	6013      	str	r3, [r2, #0]
}
 800393a:	bf00      	nop
 800393c:	3724      	adds	r7, #36	; 0x24
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	fffff8f8 	.word	0xfffff8f8
 800394c:	fffff800 	.word	0xfffff800

08003950 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003954:	4b05      	ldr	r3, [pc, #20]	; (800396c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a04      	ldr	r2, [pc, #16]	; (800396c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800395a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800395e:	6013      	str	r3, [r2, #0]
}
 8003960:	bf00      	nop
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	40007000 	.word	0x40007000

08003970 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003976:	2300      	movs	r3, #0
 8003978:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800397a:	4b23      	ldr	r3, [pc, #140]	; (8003a08 <HAL_PWREx_EnableOverDrive+0x98>)
 800397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397e:	4a22      	ldr	r2, [pc, #136]	; (8003a08 <HAL_PWREx_EnableOverDrive+0x98>)
 8003980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003984:	6413      	str	r3, [r2, #64]	; 0x40
 8003986:	4b20      	ldr	r3, [pc, #128]	; (8003a08 <HAL_PWREx_EnableOverDrive+0x98>)
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800398e:	603b      	str	r3, [r7, #0]
 8003990:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003992:	4b1e      	ldr	r3, [pc, #120]	; (8003a0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a1d      	ldr	r2, [pc, #116]	; (8003a0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800399c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800399e:	f7fc fedf 	bl	8000760 <HAL_GetTick>
 80039a2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80039a4:	e009      	b.n	80039ba <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80039a6:	f7fc fedb 	bl	8000760 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039b4:	d901      	bls.n	80039ba <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e022      	b.n	8003a00 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80039ba:	4b14      	ldr	r3, [pc, #80]	; (8003a0c <HAL_PWREx_EnableOverDrive+0x9c>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039c6:	d1ee      	bne.n	80039a6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80039c8:	4b10      	ldr	r3, [pc, #64]	; (8003a0c <HAL_PWREx_EnableOverDrive+0x9c>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a0f      	ldr	r2, [pc, #60]	; (8003a0c <HAL_PWREx_EnableOverDrive+0x9c>)
 80039ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039d2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039d4:	f7fc fec4 	bl	8000760 <HAL_GetTick>
 80039d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80039da:	e009      	b.n	80039f0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80039dc:	f7fc fec0 	bl	8000760 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039ea:	d901      	bls.n	80039f0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e007      	b.n	8003a00 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80039f0:	4b06      	ldr	r3, [pc, #24]	; (8003a0c <HAL_PWREx_EnableOverDrive+0x9c>)
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039fc:	d1ee      	bne.n	80039dc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3708      	adds	r7, #8
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	40023800 	.word	0x40023800
 8003a0c:	40007000 	.word	0x40007000

08003a10 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and creates the associated handle.
  * @param hqspi qspi handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af02      	add	r7, sp, #8
 8003a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8003a1c:	f7fc fea0 	bl	8000760 <HAL_GetTick>
 8003a20:	60b8      	str	r0, [r7, #8]
  
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d101      	bne.n	8003a2c <HAL_QSPI_Init+0x1c>
  {
    return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e073      	b.n	8003b14 <HAL_QSPI_Init+0x104>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d101      	bne.n	8003a3c <HAL_QSPI_Init+0x2c>
 8003a38:	2302      	movs	r3, #2
 8003a3a:	e06b      	b.n	8003b14 <HAL_QSPI_Init+0x104>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10b      	bne.n	8003a68 <HAL_QSPI_Init+0x58>
  { 
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f007 f965 	bl	800ad28 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8003a5e:	f241 3188 	movw	r1, #5000	; 0x1388
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f85e 	bl	8003b24 <HAL_QSPI_SetTimeout>
  }
  
  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	3b01      	subs	r3, #1
 8003a78:	021a      	lsls	r2, r3, #8
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	601a      	str	r2, [r3, #0]

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a86:	9300      	str	r3, [sp, #0]
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	2120      	movs	r1, #32
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 f856 	bl	8003b40 <QSPI_WaitFlagStateUntilTimeout>
 8003a94:	4603      	mov	r3, r0
 8003a96:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8003a98:	7bfb      	ldrb	r3, [r7, #15]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d135      	bne.n	8003b0a <HAL_QSPI_Init+0xfa>
  {
                
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	4b1d      	ldr	r3, [pc, #116]	; (8003b1c <HAL_QSPI_Init+0x10c>)
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	6852      	ldr	r2, [r2, #4]
 8003aac:	0611      	lsls	r1, r2, #24
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	68d2      	ldr	r2, [r2, #12]
 8003ab2:	4311      	orrs	r1, r2
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	69d2      	ldr	r2, [r2, #28]
 8003ab8:	4311      	orrs	r1, r2
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	6a12      	ldr	r2, [r2, #32]
 8003abe:	4311      	orrs	r1, r2
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	6812      	ldr	r2, [r2, #0]
 8003ac4:	430b      	orrs	r3, r1
 8003ac6:	6013      	str	r3, [r2, #0]
        
    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	685a      	ldr	r2, [r3, #4]
 8003ace:	4b14      	ldr	r3, [pc, #80]	; (8003b20 <HAL_QSPI_Init+0x110>)
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	6912      	ldr	r2, [r2, #16]
 8003ad6:	0411      	lsls	r1, r2, #16
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	6952      	ldr	r2, [r2, #20]
 8003adc:	4311      	orrs	r1, r2
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	6992      	ldr	r2, [r2, #24]
 8003ae2:	4311      	orrs	r1, r2
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	6812      	ldr	r2, [r2, #0]
 8003ae8:	430b      	orrs	r3, r1
 8003aea:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << 16) | hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));
    
    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f042 0201 	orr.w	r2, r2, #1
 8003afa:	601a      	str	r2, [r3, #0]
  
    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2201      	movs	r2, #1
 8003b06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8003b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	00ffff2f 	.word	0x00ffff2f
 8003b20:	ffe0f8fe 	.word	0xffe0f8fe

08003b24 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	649a      	str	r2, [r3, #72]	; 0x48
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the time out
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	603b      	str	r3, [r7, #0]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003b50:	e01a      	b.n	8003b88 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b58:	d016      	beq.n	8003b88 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d007      	beq.n	8003b70 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003b60:	f7fc fdfe 	bl	8000760 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d20b      	bcs.n	8003b88 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2204      	movs	r2, #4
 8003b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7c:	f043 0201 	orr.w	r2, r3, #1
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e00e      	b.n	8003ba6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	689a      	ldr	r2, [r3, #8]
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	4013      	ands	r3, r2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	bf14      	ite	ne
 8003b96:	2301      	movne	r3, #1
 8003b98:	2300      	moveq	r3, #0
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	79fb      	ldrb	r3, [r7, #7]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d1d6      	bne.n	8003b52 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
	...

08003bb0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d101      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e25c      	b.n	8004080 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f000 8087 	beq.w	8003ce2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003bd4:	4b96      	ldr	r3, [pc, #600]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f003 030c 	and.w	r3, r3, #12
 8003bdc:	2b04      	cmp	r3, #4
 8003bde:	d00c      	beq.n	8003bfa <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003be0:	4b93      	ldr	r3, [pc, #588]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f003 030c 	and.w	r3, r3, #12
 8003be8:	2b08      	cmp	r3, #8
 8003bea:	d112      	bne.n	8003c12 <HAL_RCC_OscConfig+0x62>
 8003bec:	4b90      	ldr	r3, [pc, #576]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bf4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bf8:	d10b      	bne.n	8003c12 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bfa:	4b8d      	ldr	r3, [pc, #564]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d06c      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x130>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d168      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e236      	b.n	8004080 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c1a:	d106      	bne.n	8003c2a <HAL_RCC_OscConfig+0x7a>
 8003c1c:	4b84      	ldr	r3, [pc, #528]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a83      	ldr	r2, [pc, #524]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003c22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c26:	6013      	str	r3, [r2, #0]
 8003c28:	e02e      	b.n	8003c88 <HAL_RCC_OscConfig+0xd8>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d10c      	bne.n	8003c4c <HAL_RCC_OscConfig+0x9c>
 8003c32:	4b7f      	ldr	r3, [pc, #508]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a7e      	ldr	r2, [pc, #504]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003c38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c3c:	6013      	str	r3, [r2, #0]
 8003c3e:	4b7c      	ldr	r3, [pc, #496]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a7b      	ldr	r2, [pc, #492]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003c44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c48:	6013      	str	r3, [r2, #0]
 8003c4a:	e01d      	b.n	8003c88 <HAL_RCC_OscConfig+0xd8>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c54:	d10c      	bne.n	8003c70 <HAL_RCC_OscConfig+0xc0>
 8003c56:	4b76      	ldr	r3, [pc, #472]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a75      	ldr	r2, [pc, #468]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003c5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c60:	6013      	str	r3, [r2, #0]
 8003c62:	4b73      	ldr	r3, [pc, #460]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a72      	ldr	r2, [pc, #456]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c6c:	6013      	str	r3, [r2, #0]
 8003c6e:	e00b      	b.n	8003c88 <HAL_RCC_OscConfig+0xd8>
 8003c70:	4b6f      	ldr	r3, [pc, #444]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a6e      	ldr	r2, [pc, #440]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003c76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c7a:	6013      	str	r3, [r2, #0]
 8003c7c:	4b6c      	ldr	r3, [pc, #432]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a6b      	ldr	r2, [pc, #428]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003c82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d013      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c90:	f7fc fd66 	bl	8000760 <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c96:	e008      	b.n	8003caa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c98:	f7fc fd62 	bl	8000760 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b64      	cmp	r3, #100	; 0x64
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e1ea      	b.n	8004080 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003caa:	4b61      	ldr	r3, [pc, #388]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d0f0      	beq.n	8003c98 <HAL_RCC_OscConfig+0xe8>
 8003cb6:	e014      	b.n	8003ce2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb8:	f7fc fd52 	bl	8000760 <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cbe:	e008      	b.n	8003cd2 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cc0:	f7fc fd4e 	bl	8000760 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b64      	cmp	r3, #100	; 0x64
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e1d6      	b.n	8004080 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cd2:	4b57      	ldr	r3, [pc, #348]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1f0      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x110>
 8003cde:	e000      	b.n	8003ce2 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ce0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d069      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cee:	4b50      	ldr	r3, [pc, #320]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 030c 	and.w	r3, r3, #12
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00b      	beq.n	8003d12 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cfa:	4b4d      	ldr	r3, [pc, #308]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f003 030c 	and.w	r3, r3, #12
 8003d02:	2b08      	cmp	r3, #8
 8003d04:	d11c      	bne.n	8003d40 <HAL_RCC_OscConfig+0x190>
 8003d06:	4b4a      	ldr	r3, [pc, #296]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d116      	bne.n	8003d40 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d12:	4b47      	ldr	r3, [pc, #284]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d005      	beq.n	8003d2a <HAL_RCC_OscConfig+0x17a>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d001      	beq.n	8003d2a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e1aa      	b.n	8004080 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d2a:	4b41      	ldr	r3, [pc, #260]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	00db      	lsls	r3, r3, #3
 8003d38:	493d      	ldr	r1, [pc, #244]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d3e:	e040      	b.n	8003dc2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d023      	beq.n	8003d90 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d48:	4b39      	ldr	r3, [pc, #228]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a38      	ldr	r2, [pc, #224]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003d4e:	f043 0301 	orr.w	r3, r3, #1
 8003d52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d54:	f7fc fd04 	bl	8000760 <HAL_GetTick>
 8003d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d5a:	e008      	b.n	8003d6e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d5c:	f7fc fd00 	bl	8000760 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e188      	b.n	8004080 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d6e:	4b30      	ldr	r3, [pc, #192]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d0f0      	beq.n	8003d5c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d7a:	4b2d      	ldr	r3, [pc, #180]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	00db      	lsls	r3, r3, #3
 8003d88:	4929      	ldr	r1, [pc, #164]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	600b      	str	r3, [r1, #0]
 8003d8e:	e018      	b.n	8003dc2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d90:	4b27      	ldr	r3, [pc, #156]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a26      	ldr	r2, [pc, #152]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003d96:	f023 0301 	bic.w	r3, r3, #1
 8003d9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d9c:	f7fc fce0 	bl	8000760 <HAL_GetTick>
 8003da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003da2:	e008      	b.n	8003db6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003da4:	f7fc fcdc 	bl	8000760 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e164      	b.n	8004080 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003db6:	4b1e      	ldr	r3, [pc, #120]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1f0      	bne.n	8003da4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0308 	and.w	r3, r3, #8
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d038      	beq.n	8003e40 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d019      	beq.n	8003e0a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dd6:	4b16      	ldr	r3, [pc, #88]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003dd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dda:	4a15      	ldr	r2, [pc, #84]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003ddc:	f043 0301 	orr.w	r3, r3, #1
 8003de0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de2:	f7fc fcbd 	bl	8000760 <HAL_GetTick>
 8003de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003de8:	e008      	b.n	8003dfc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dea:	f7fc fcb9 	bl	8000760 <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d901      	bls.n	8003dfc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e141      	b.n	8004080 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dfc:	4b0c      	ldr	r3, [pc, #48]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003dfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d0f0      	beq.n	8003dea <HAL_RCC_OscConfig+0x23a>
 8003e08:	e01a      	b.n	8003e40 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e0a:	4b09      	ldr	r3, [pc, #36]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e0e:	4a08      	ldr	r2, [pc, #32]	; (8003e30 <HAL_RCC_OscConfig+0x280>)
 8003e10:	f023 0301 	bic.w	r3, r3, #1
 8003e14:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e16:	f7fc fca3 	bl	8000760 <HAL_GetTick>
 8003e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e1c:	e00a      	b.n	8003e34 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e1e:	f7fc fc9f 	bl	8000760 <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d903      	bls.n	8003e34 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e127      	b.n	8004080 <HAL_RCC_OscConfig+0x4d0>
 8003e30:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e34:	4b94      	ldr	r3, [pc, #592]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003e36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1ee      	bne.n	8003e1e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0304 	and.w	r3, r3, #4
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 80a4 	beq.w	8003f96 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e4e:	4b8e      	ldr	r3, [pc, #568]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10d      	bne.n	8003e76 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e5a:	4b8b      	ldr	r3, [pc, #556]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5e:	4a8a      	ldr	r2, [pc, #552]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e64:	6413      	str	r3, [r2, #64]	; 0x40
 8003e66:	4b88      	ldr	r3, [pc, #544]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e6e:	60fb      	str	r3, [r7, #12]
 8003e70:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003e72:	2301      	movs	r3, #1
 8003e74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e76:	4b85      	ldr	r3, [pc, #532]	; (800408c <HAL_RCC_OscConfig+0x4dc>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d118      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003e82:	4b82      	ldr	r3, [pc, #520]	; (800408c <HAL_RCC_OscConfig+0x4dc>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a81      	ldr	r2, [pc, #516]	; (800408c <HAL_RCC_OscConfig+0x4dc>)
 8003e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e8e:	f7fc fc67 	bl	8000760 <HAL_GetTick>
 8003e92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e94:	e008      	b.n	8003ea8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003e96:	f7fc fc63 	bl	8000760 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b64      	cmp	r3, #100	; 0x64
 8003ea2:	d901      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e0eb      	b.n	8004080 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ea8:	4b78      	ldr	r3, [pc, #480]	; (800408c <HAL_RCC_OscConfig+0x4dc>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d0f0      	beq.n	8003e96 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d106      	bne.n	8003eca <HAL_RCC_OscConfig+0x31a>
 8003ebc:	4b72      	ldr	r3, [pc, #456]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec0:	4a71      	ldr	r2, [pc, #452]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003ec2:	f043 0301 	orr.w	r3, r3, #1
 8003ec6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ec8:	e02d      	b.n	8003f26 <HAL_RCC_OscConfig+0x376>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10c      	bne.n	8003eec <HAL_RCC_OscConfig+0x33c>
 8003ed2:	4b6d      	ldr	r3, [pc, #436]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed6:	4a6c      	ldr	r2, [pc, #432]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003ed8:	f023 0301 	bic.w	r3, r3, #1
 8003edc:	6713      	str	r3, [r2, #112]	; 0x70
 8003ede:	4b6a      	ldr	r3, [pc, #424]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee2:	4a69      	ldr	r2, [pc, #420]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003ee4:	f023 0304 	bic.w	r3, r3, #4
 8003ee8:	6713      	str	r3, [r2, #112]	; 0x70
 8003eea:	e01c      	b.n	8003f26 <HAL_RCC_OscConfig+0x376>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	2b05      	cmp	r3, #5
 8003ef2:	d10c      	bne.n	8003f0e <HAL_RCC_OscConfig+0x35e>
 8003ef4:	4b64      	ldr	r3, [pc, #400]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef8:	4a63      	ldr	r2, [pc, #396]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003efa:	f043 0304 	orr.w	r3, r3, #4
 8003efe:	6713      	str	r3, [r2, #112]	; 0x70
 8003f00:	4b61      	ldr	r3, [pc, #388]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f04:	4a60      	ldr	r2, [pc, #384]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003f06:	f043 0301 	orr.w	r3, r3, #1
 8003f0a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f0c:	e00b      	b.n	8003f26 <HAL_RCC_OscConfig+0x376>
 8003f0e:	4b5e      	ldr	r3, [pc, #376]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f12:	4a5d      	ldr	r2, [pc, #372]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003f14:	f023 0301 	bic.w	r3, r3, #1
 8003f18:	6713      	str	r3, [r2, #112]	; 0x70
 8003f1a:	4b5b      	ldr	r3, [pc, #364]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1e:	4a5a      	ldr	r2, [pc, #360]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003f20:	f023 0304 	bic.w	r3, r3, #4
 8003f24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d015      	beq.n	8003f5a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f2e:	f7fc fc17 	bl	8000760 <HAL_GetTick>
 8003f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f34:	e00a      	b.n	8003f4c <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f36:	f7fc fc13 	bl	8000760 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d901      	bls.n	8003f4c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e099      	b.n	8004080 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f4c:	4b4e      	ldr	r3, [pc, #312]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f50:	f003 0302 	and.w	r3, r3, #2
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d0ee      	beq.n	8003f36 <HAL_RCC_OscConfig+0x386>
 8003f58:	e014      	b.n	8003f84 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f5a:	f7fc fc01 	bl	8000760 <HAL_GetTick>
 8003f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f60:	e00a      	b.n	8003f78 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f62:	f7fc fbfd 	bl	8000760 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d901      	bls.n	8003f78 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e083      	b.n	8004080 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f78:	4b43      	ldr	r3, [pc, #268]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1ee      	bne.n	8003f62 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f84:	7dfb      	ldrb	r3, [r7, #23]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d105      	bne.n	8003f96 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f8a:	4b3f      	ldr	r3, [pc, #252]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8e:	4a3e      	ldr	r2, [pc, #248]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003f90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f94:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d06f      	beq.n	800407e <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f9e:	4b3a      	ldr	r3, [pc, #232]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f003 030c 	and.w	r3, r3, #12
 8003fa6:	2b08      	cmp	r3, #8
 8003fa8:	d067      	beq.n	800407a <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d149      	bne.n	8004046 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fb2:	4b35      	ldr	r3, [pc, #212]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a34      	ldr	r2, [pc, #208]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003fb8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fbe:	f7fc fbcf 	bl	8000760 <HAL_GetTick>
 8003fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fc4:	e008      	b.n	8003fd8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fc6:	f7fc fbcb 	bl	8000760 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d901      	bls.n	8003fd8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e053      	b.n	8004080 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fd8:	4b2b      	ldr	r3, [pc, #172]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1f0      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	69da      	ldr	r2, [r3, #28]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	431a      	orrs	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff2:	019b      	lsls	r3, r3, #6
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ffa:	085b      	lsrs	r3, r3, #1
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	041b      	lsls	r3, r3, #16
 8004000:	431a      	orrs	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004006:	061b      	lsls	r3, r3, #24
 8004008:	4313      	orrs	r3, r2
 800400a:	4a1f      	ldr	r2, [pc, #124]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 800400c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004010:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004012:	4b1d      	ldr	r3, [pc, #116]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a1c      	ldr	r2, [pc, #112]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8004018:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800401c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800401e:	f7fc fb9f 	bl	8000760 <HAL_GetTick>
 8004022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004024:	e008      	b.n	8004038 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004026:	f7fc fb9b 	bl	8000760 <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	2b02      	cmp	r3, #2
 8004032:	d901      	bls.n	8004038 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e023      	b.n	8004080 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004038:	4b13      	ldr	r3, [pc, #76]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d0f0      	beq.n	8004026 <HAL_RCC_OscConfig+0x476>
 8004044:	e01b      	b.n	800407e <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004046:	4b10      	ldr	r3, [pc, #64]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a0f      	ldr	r2, [pc, #60]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 800404c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004050:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004052:	f7fc fb85 	bl	8000760 <HAL_GetTick>
 8004056:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004058:	e008      	b.n	800406c <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800405a:	f7fc fb81 	bl	8000760 <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	2b02      	cmp	r3, #2
 8004066:	d901      	bls.n	800406c <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e009      	b.n	8004080 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800406c:	4b06      	ldr	r3, [pc, #24]	; (8004088 <HAL_RCC_OscConfig+0x4d8>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1f0      	bne.n	800405a <HAL_RCC_OscConfig+0x4aa>
 8004078:	e001      	b.n	800407e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e000      	b.n	8004080 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3718      	adds	r7, #24
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	40023800 	.word	0x40023800
 800408c:	40007000 	.word	0x40007000

08004090 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800409a:	2300      	movs	r3, #0
 800409c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d101      	bne.n	80040a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e0ce      	b.n	8004246 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040a8:	4b69      	ldr	r3, [pc, #420]	; (8004250 <HAL_RCC_ClockConfig+0x1c0>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 030f 	and.w	r3, r3, #15
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d910      	bls.n	80040d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040b6:	4b66      	ldr	r3, [pc, #408]	; (8004250 <HAL_RCC_ClockConfig+0x1c0>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f023 020f 	bic.w	r2, r3, #15
 80040be:	4964      	ldr	r1, [pc, #400]	; (8004250 <HAL_RCC_ClockConfig+0x1c0>)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040c6:	4b62      	ldr	r3, [pc, #392]	; (8004250 <HAL_RCC_ClockConfig+0x1c0>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 030f 	and.w	r3, r3, #15
 80040ce:	683a      	ldr	r2, [r7, #0]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d001      	beq.n	80040d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e0b6      	b.n	8004246 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d020      	beq.n	8004126 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0304 	and.w	r3, r3, #4
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d005      	beq.n	80040fc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040f0:	4b58      	ldr	r3, [pc, #352]	; (8004254 <HAL_RCC_ClockConfig+0x1c4>)
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	4a57      	ldr	r2, [pc, #348]	; (8004254 <HAL_RCC_ClockConfig+0x1c4>)
 80040f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0308 	and.w	r3, r3, #8
 8004104:	2b00      	cmp	r3, #0
 8004106:	d005      	beq.n	8004114 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004108:	4b52      	ldr	r3, [pc, #328]	; (8004254 <HAL_RCC_ClockConfig+0x1c4>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	4a51      	ldr	r2, [pc, #324]	; (8004254 <HAL_RCC_ClockConfig+0x1c4>)
 800410e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004112:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004114:	4b4f      	ldr	r3, [pc, #316]	; (8004254 <HAL_RCC_ClockConfig+0x1c4>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	494c      	ldr	r1, [pc, #304]	; (8004254 <HAL_RCC_ClockConfig+0x1c4>)
 8004122:	4313      	orrs	r3, r2
 8004124:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b00      	cmp	r3, #0
 8004130:	d040      	beq.n	80041b4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d107      	bne.n	800414a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800413a:	4b46      	ldr	r3, [pc, #280]	; (8004254 <HAL_RCC_ClockConfig+0x1c4>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d115      	bne.n	8004172 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e07d      	b.n	8004246 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	2b02      	cmp	r3, #2
 8004150:	d107      	bne.n	8004162 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004152:	4b40      	ldr	r3, [pc, #256]	; (8004254 <HAL_RCC_ClockConfig+0x1c4>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d109      	bne.n	8004172 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e071      	b.n	8004246 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004162:	4b3c      	ldr	r3, [pc, #240]	; (8004254 <HAL_RCC_ClockConfig+0x1c4>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d101      	bne.n	8004172 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e069      	b.n	8004246 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004172:	4b38      	ldr	r3, [pc, #224]	; (8004254 <HAL_RCC_ClockConfig+0x1c4>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f023 0203 	bic.w	r2, r3, #3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	4935      	ldr	r1, [pc, #212]	; (8004254 <HAL_RCC_ClockConfig+0x1c4>)
 8004180:	4313      	orrs	r3, r2
 8004182:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004184:	f7fc faec 	bl	8000760 <HAL_GetTick>
 8004188:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800418a:	e00a      	b.n	80041a2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800418c:	f7fc fae8 	bl	8000760 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	f241 3288 	movw	r2, #5000	; 0x1388
 800419a:	4293      	cmp	r3, r2
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e051      	b.n	8004246 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041a2:	4b2c      	ldr	r3, [pc, #176]	; (8004254 <HAL_RCC_ClockConfig+0x1c4>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f003 020c 	and.w	r2, r3, #12
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d1eb      	bne.n	800418c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041b4:	4b26      	ldr	r3, [pc, #152]	; (8004250 <HAL_RCC_ClockConfig+0x1c0>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 030f 	and.w	r3, r3, #15
 80041bc:	683a      	ldr	r2, [r7, #0]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d210      	bcs.n	80041e4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041c2:	4b23      	ldr	r3, [pc, #140]	; (8004250 <HAL_RCC_ClockConfig+0x1c0>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f023 020f 	bic.w	r2, r3, #15
 80041ca:	4921      	ldr	r1, [pc, #132]	; (8004250 <HAL_RCC_ClockConfig+0x1c0>)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041d2:	4b1f      	ldr	r3, [pc, #124]	; (8004250 <HAL_RCC_ClockConfig+0x1c0>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 030f 	and.w	r3, r3, #15
 80041da:	683a      	ldr	r2, [r7, #0]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d001      	beq.n	80041e4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e030      	b.n	8004246 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0304 	and.w	r3, r3, #4
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d008      	beq.n	8004202 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041f0:	4b18      	ldr	r3, [pc, #96]	; (8004254 <HAL_RCC_ClockConfig+0x1c4>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	4915      	ldr	r1, [pc, #84]	; (8004254 <HAL_RCC_ClockConfig+0x1c4>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0308 	and.w	r3, r3, #8
 800420a:	2b00      	cmp	r3, #0
 800420c:	d009      	beq.n	8004222 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800420e:	4b11      	ldr	r3, [pc, #68]	; (8004254 <HAL_RCC_ClockConfig+0x1c4>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	00db      	lsls	r3, r3, #3
 800421c:	490d      	ldr	r1, [pc, #52]	; (8004254 <HAL_RCC_ClockConfig+0x1c4>)
 800421e:	4313      	orrs	r3, r2
 8004220:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004222:	f000 f81d 	bl	8004260 <HAL_RCC_GetSysClockFreq>
 8004226:	4601      	mov	r1, r0
 8004228:	4b0a      	ldr	r3, [pc, #40]	; (8004254 <HAL_RCC_ClockConfig+0x1c4>)
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	091b      	lsrs	r3, r3, #4
 800422e:	f003 030f 	and.w	r3, r3, #15
 8004232:	4a09      	ldr	r2, [pc, #36]	; (8004258 <HAL_RCC_ClockConfig+0x1c8>)
 8004234:	5cd3      	ldrb	r3, [r2, r3]
 8004236:	fa21 f303 	lsr.w	r3, r1, r3
 800423a:	4a08      	ldr	r2, [pc, #32]	; (800425c <HAL_RCC_ClockConfig+0x1cc>)
 800423c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800423e:	2000      	movs	r0, #0
 8004240:	f007 f9b4 	bl	800b5ac <HAL_InitTick>

  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3710      	adds	r7, #16
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	40023c00 	.word	0x40023c00
 8004254:	40023800 	.word	0x40023800
 8004258:	0800bb38 	.word	0x0800bb38
 800425c:	20000010 	.word	0x20000010

08004260 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004266:	2300      	movs	r3, #0
 8004268:	607b      	str	r3, [r7, #4]
 800426a:	2300      	movs	r3, #0
 800426c:	60fb      	str	r3, [r7, #12]
 800426e:	2300      	movs	r3, #0
 8004270:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004272:	2300      	movs	r3, #0
 8004274:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004276:	4b50      	ldr	r3, [pc, #320]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x158>)
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f003 030c 	and.w	r3, r3, #12
 800427e:	2b04      	cmp	r3, #4
 8004280:	d007      	beq.n	8004292 <HAL_RCC_GetSysClockFreq+0x32>
 8004282:	2b08      	cmp	r3, #8
 8004284:	d008      	beq.n	8004298 <HAL_RCC_GetSysClockFreq+0x38>
 8004286:	2b00      	cmp	r3, #0
 8004288:	f040 808d 	bne.w	80043a6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800428c:	4b4b      	ldr	r3, [pc, #300]	; (80043bc <HAL_RCC_GetSysClockFreq+0x15c>)
 800428e:	60bb      	str	r3, [r7, #8]
       break;
 8004290:	e08c      	b.n	80043ac <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004292:	4b4b      	ldr	r3, [pc, #300]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004294:	60bb      	str	r3, [r7, #8]
      break;
 8004296:	e089      	b.n	80043ac <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004298:	4b47      	ldr	r3, [pc, #284]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x158>)
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042a0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80042a2:	4b45      	ldr	r3, [pc, #276]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x158>)
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d023      	beq.n	80042f6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042ae:	4b42      	ldr	r3, [pc, #264]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x158>)
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	099b      	lsrs	r3, r3, #6
 80042b4:	f04f 0400 	mov.w	r4, #0
 80042b8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80042bc:	f04f 0200 	mov.w	r2, #0
 80042c0:	ea03 0501 	and.w	r5, r3, r1
 80042c4:	ea04 0602 	and.w	r6, r4, r2
 80042c8:	4a3d      	ldr	r2, [pc, #244]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x160>)
 80042ca:	fb02 f106 	mul.w	r1, r2, r6
 80042ce:	2200      	movs	r2, #0
 80042d0:	fb02 f205 	mul.w	r2, r2, r5
 80042d4:	440a      	add	r2, r1
 80042d6:	493a      	ldr	r1, [pc, #232]	; (80043c0 <HAL_RCC_GetSysClockFreq+0x160>)
 80042d8:	fba5 0101 	umull	r0, r1, r5, r1
 80042dc:	1853      	adds	r3, r2, r1
 80042de:	4619      	mov	r1, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f04f 0400 	mov.w	r4, #0
 80042e6:	461a      	mov	r2, r3
 80042e8:	4623      	mov	r3, r4
 80042ea:	f7fb ff8d 	bl	8000208 <__aeabi_uldivmod>
 80042ee:	4603      	mov	r3, r0
 80042f0:	460c      	mov	r4, r1
 80042f2:	60fb      	str	r3, [r7, #12]
 80042f4:	e049      	b.n	800438a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042f6:	4b30      	ldr	r3, [pc, #192]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x158>)
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	099b      	lsrs	r3, r3, #6
 80042fc:	f04f 0400 	mov.w	r4, #0
 8004300:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004304:	f04f 0200 	mov.w	r2, #0
 8004308:	ea03 0501 	and.w	r5, r3, r1
 800430c:	ea04 0602 	and.w	r6, r4, r2
 8004310:	4629      	mov	r1, r5
 8004312:	4632      	mov	r2, r6
 8004314:	f04f 0300 	mov.w	r3, #0
 8004318:	f04f 0400 	mov.w	r4, #0
 800431c:	0154      	lsls	r4, r2, #5
 800431e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004322:	014b      	lsls	r3, r1, #5
 8004324:	4619      	mov	r1, r3
 8004326:	4622      	mov	r2, r4
 8004328:	1b49      	subs	r1, r1, r5
 800432a:	eb62 0206 	sbc.w	r2, r2, r6
 800432e:	f04f 0300 	mov.w	r3, #0
 8004332:	f04f 0400 	mov.w	r4, #0
 8004336:	0194      	lsls	r4, r2, #6
 8004338:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800433c:	018b      	lsls	r3, r1, #6
 800433e:	1a5b      	subs	r3, r3, r1
 8004340:	eb64 0402 	sbc.w	r4, r4, r2
 8004344:	f04f 0100 	mov.w	r1, #0
 8004348:	f04f 0200 	mov.w	r2, #0
 800434c:	00e2      	lsls	r2, r4, #3
 800434e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004352:	00d9      	lsls	r1, r3, #3
 8004354:	460b      	mov	r3, r1
 8004356:	4614      	mov	r4, r2
 8004358:	195b      	adds	r3, r3, r5
 800435a:	eb44 0406 	adc.w	r4, r4, r6
 800435e:	f04f 0100 	mov.w	r1, #0
 8004362:	f04f 0200 	mov.w	r2, #0
 8004366:	02a2      	lsls	r2, r4, #10
 8004368:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800436c:	0299      	lsls	r1, r3, #10
 800436e:	460b      	mov	r3, r1
 8004370:	4614      	mov	r4, r2
 8004372:	4618      	mov	r0, r3
 8004374:	4621      	mov	r1, r4
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f04f 0400 	mov.w	r4, #0
 800437c:	461a      	mov	r2, r3
 800437e:	4623      	mov	r3, r4
 8004380:	f7fb ff42 	bl	8000208 <__aeabi_uldivmod>
 8004384:	4603      	mov	r3, r0
 8004386:	460c      	mov	r4, r1
 8004388:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 800438a:	4b0b      	ldr	r3, [pc, #44]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x158>)
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	0c1b      	lsrs	r3, r3, #16
 8004390:	f003 0303 	and.w	r3, r3, #3
 8004394:	3301      	adds	r3, #1
 8004396:	005b      	lsls	r3, r3, #1
 8004398:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a2:	60bb      	str	r3, [r7, #8]
      break;
 80043a4:	e002      	b.n	80043ac <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043a6:	4b05      	ldr	r3, [pc, #20]	; (80043bc <HAL_RCC_GetSysClockFreq+0x15c>)
 80043a8:	60bb      	str	r3, [r7, #8]
      break;
 80043aa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043ac:	68bb      	ldr	r3, [r7, #8]
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3714      	adds	r7, #20
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043b6:	bf00      	nop
 80043b8:	40023800 	.word	0x40023800
 80043bc:	00f42400 	.word	0x00f42400
 80043c0:	017d7840 	.word	0x017d7840

080043c4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043c4:	b480      	push	{r7}
 80043c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043c8:	4b03      	ldr	r3, [pc, #12]	; (80043d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80043ca:	681b      	ldr	r3, [r3, #0]
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	20000010 	.word	0x20000010

080043dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043e0:	f7ff fff0 	bl	80043c4 <HAL_RCC_GetHCLKFreq>
 80043e4:	4601      	mov	r1, r0
 80043e6:	4b05      	ldr	r3, [pc, #20]	; (80043fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	0a9b      	lsrs	r3, r3, #10
 80043ec:	f003 0307 	and.w	r3, r3, #7
 80043f0:	4a03      	ldr	r2, [pc, #12]	; (8004400 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043f2:	5cd3      	ldrb	r3, [r2, r3]
 80043f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	40023800 	.word	0x40023800
 8004400:	0800bb48 	.word	0x0800bb48

08004404 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004408:	f7ff ffdc 	bl	80043c4 <HAL_RCC_GetHCLKFreq>
 800440c:	4601      	mov	r1, r0
 800440e:	4b05      	ldr	r3, [pc, #20]	; (8004424 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	0b5b      	lsrs	r3, r3, #13
 8004414:	f003 0307 	and.w	r3, r3, #7
 8004418:	4a03      	ldr	r2, [pc, #12]	; (8004428 <HAL_RCC_GetPCLK2Freq+0x24>)
 800441a:	5cd3      	ldrb	r3, [r2, r3]
 800441c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004420:	4618      	mov	r0, r3
 8004422:	bd80      	pop	{r7, pc}
 8004424:	40023800 	.word	0x40023800
 8004428:	0800bb48 	.word	0x0800bb48

0800442c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	220f      	movs	r2, #15
 800443a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800443c:	4b12      	ldr	r3, [pc, #72]	; (8004488 <HAL_RCC_GetClockConfig+0x5c>)
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f003 0203 	and.w	r2, r3, #3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004448:	4b0f      	ldr	r3, [pc, #60]	; (8004488 <HAL_RCC_GetClockConfig+0x5c>)
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004454:	4b0c      	ldr	r3, [pc, #48]	; (8004488 <HAL_RCC_GetClockConfig+0x5c>)
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004460:	4b09      	ldr	r3, [pc, #36]	; (8004488 <HAL_RCC_GetClockConfig+0x5c>)
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	08db      	lsrs	r3, r3, #3
 8004466:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800446e:	4b07      	ldr	r3, [pc, #28]	; (800448c <HAL_RCC_GetClockConfig+0x60>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 020f 	and.w	r2, r3, #15
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	601a      	str	r2, [r3, #0]
}
 800447a:	bf00      	nop
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	40023800 	.word	0x40023800
 800448c:	40023c00 	.word	0x40023c00

08004490 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b088      	sub	sp, #32
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004498:	2300      	movs	r3, #0
 800449a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800449c:	2300      	movs	r3, #0
 800449e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80044a0:	2300      	movs	r3, #0
 80044a2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80044a4:	2300      	movs	r3, #0
 80044a6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80044a8:	2300      	movs	r3, #0
 80044aa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0301 	and.w	r3, r3, #1
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d012      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80044b8:	4b69      	ldr	r3, [pc, #420]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	4a68      	ldr	r2, [pc, #416]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044be:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80044c2:	6093      	str	r3, [r2, #8]
 80044c4:	4b66      	ldr	r3, [pc, #408]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044c6:	689a      	ldr	r2, [r3, #8]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044cc:	4964      	ldr	r1, [pc, #400]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80044da:	2301      	movs	r3, #1
 80044dc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d017      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044ea:	4b5d      	ldr	r3, [pc, #372]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f8:	4959      	ldr	r1, [pc, #356]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004504:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004508:	d101      	bne.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800450a:	2301      	movs	r3, #1
 800450c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004516:	2301      	movs	r3, #1
 8004518:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d017      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004526:	4b4e      	ldr	r3, [pc, #312]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004528:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800452c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004534:	494a      	ldr	r1, [pc, #296]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004536:	4313      	orrs	r3, r2
 8004538:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004540:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004544:	d101      	bne.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004546:	2301      	movs	r3, #1
 8004548:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454e:	2b00      	cmp	r3, #0
 8004550:	d101      	bne.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004552:	2301      	movs	r3, #1
 8004554:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d001      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004562:	2301      	movs	r3, #1
 8004564:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0320 	and.w	r3, r3, #32
 800456e:	2b00      	cmp	r3, #0
 8004570:	f000 808b 	beq.w	800468a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004574:	4b3a      	ldr	r3, [pc, #232]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004578:	4a39      	ldr	r2, [pc, #228]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800457a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800457e:	6413      	str	r3, [r2, #64]	; 0x40
 8004580:	4b37      	ldr	r3, [pc, #220]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004588:	60bb      	str	r3, [r7, #8]
 800458a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800458c:	4b35      	ldr	r3, [pc, #212]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a34      	ldr	r2, [pc, #208]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004596:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004598:	f7fc f8e2 	bl	8000760 <HAL_GetTick>
 800459c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800459e:	e008      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045a0:	f7fc f8de 	bl	8000760 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b64      	cmp	r3, #100	; 0x64
 80045ac:	d901      	bls.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e355      	b.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80045b2:	4b2c      	ldr	r3, [pc, #176]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d0f0      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045be:	4b28      	ldr	r3, [pc, #160]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045c6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d035      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d02e      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045dc:	4b20      	ldr	r3, [pc, #128]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045e4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045e6:	4b1e      	ldr	r3, [pc, #120]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ea:	4a1d      	ldr	r2, [pc, #116]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045f0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045f2:	4b1b      	ldr	r3, [pc, #108]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f6:	4a1a      	ldr	r2, [pc, #104]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80045fe:	4a18      	ldr	r2, [pc, #96]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004604:	4b16      	ldr	r3, [pc, #88]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004608:	f003 0301 	and.w	r3, r3, #1
 800460c:	2b01      	cmp	r3, #1
 800460e:	d114      	bne.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004610:	f7fc f8a6 	bl	8000760 <HAL_GetTick>
 8004614:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004616:	e00a      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004618:	f7fc f8a2 	bl	8000760 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	f241 3288 	movw	r2, #5000	; 0x1388
 8004626:	4293      	cmp	r3, r2
 8004628:	d901      	bls.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e317      	b.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800462e:	4b0c      	ldr	r3, [pc, #48]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d0ee      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004642:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004646:	d111      	bne.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004648:	4b05      	ldr	r3, [pc, #20]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004654:	4b04      	ldr	r3, [pc, #16]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004656:	400b      	ands	r3, r1
 8004658:	4901      	ldr	r1, [pc, #4]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800465a:	4313      	orrs	r3, r2
 800465c:	608b      	str	r3, [r1, #8]
 800465e:	e00b      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004660:	40023800 	.word	0x40023800
 8004664:	40007000 	.word	0x40007000
 8004668:	0ffffcff 	.word	0x0ffffcff
 800466c:	4bb0      	ldr	r3, [pc, #704]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	4aaf      	ldr	r2, [pc, #700]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004672:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004676:	6093      	str	r3, [r2, #8]
 8004678:	4bad      	ldr	r3, [pc, #692]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800467a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004680:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004684:	49aa      	ldr	r1, [pc, #680]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004686:	4313      	orrs	r3, r2
 8004688:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0310 	and.w	r3, r3, #16
 8004692:	2b00      	cmp	r3, #0
 8004694:	d010      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004696:	4ba6      	ldr	r3, [pc, #664]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004698:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800469c:	4aa4      	ldr	r2, [pc, #656]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800469e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80046a6:	4ba2      	ldr	r3, [pc, #648]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046a8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b0:	499f      	ldr	r1, [pc, #636]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00a      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046c4:	4b9a      	ldr	r3, [pc, #616]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046d2:	4997      	ldr	r1, [pc, #604]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00a      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046e6:	4b92      	ldr	r3, [pc, #584]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046f4:	498e      	ldr	r1, [pc, #568]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00a      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004708:	4b89      	ldr	r3, [pc, #548]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800470a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004716:	4986      	ldr	r1, [pc, #536]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004718:	4313      	orrs	r3, r2
 800471a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00a      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800472a:	4b81      	ldr	r3, [pc, #516]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800472c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004730:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004738:	497d      	ldr	r1, [pc, #500]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800473a:	4313      	orrs	r3, r2
 800473c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00a      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800474c:	4b78      	ldr	r3, [pc, #480]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800474e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004752:	f023 0203 	bic.w	r2, r3, #3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800475a:	4975      	ldr	r1, [pc, #468]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800475c:	4313      	orrs	r3, r2
 800475e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00a      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800476e:	4b70      	ldr	r3, [pc, #448]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004774:	f023 020c 	bic.w	r2, r3, #12
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800477c:	496c      	ldr	r1, [pc, #432]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800477e:	4313      	orrs	r3, r2
 8004780:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00a      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004790:	4b67      	ldr	r3, [pc, #412]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004796:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800479e:	4964      	ldr	r1, [pc, #400]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00a      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80047b2:	4b5f      	ldr	r3, [pc, #380]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80047b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047c0:	495b      	ldr	r1, [pc, #364]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00a      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80047d4:	4b56      	ldr	r3, [pc, #344]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80047d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e2:	4953      	ldr	r1, [pc, #332]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00a      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80047f6:	4b4e      	ldr	r3, [pc, #312]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80047f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047fc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004804:	494a      	ldr	r1, [pc, #296]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004806:	4313      	orrs	r3, r2
 8004808:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00a      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004818:	4b45      	ldr	r3, [pc, #276]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800481a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800481e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004826:	4942      	ldr	r1, [pc, #264]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004828:	4313      	orrs	r3, r2
 800482a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00a      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800483a:	4b3d      	ldr	r3, [pc, #244]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800483c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004840:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004848:	4939      	ldr	r1, [pc, #228]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800484a:	4313      	orrs	r3, r2
 800484c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00a      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800485c:	4b34      	ldr	r3, [pc, #208]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800485e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004862:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800486a:	4931      	ldr	r1, [pc, #196]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800486c:	4313      	orrs	r3, r2
 800486e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d011      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800487e:	4b2c      	ldr	r3, [pc, #176]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004884:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800488c:	4928      	ldr	r1, [pc, #160]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800488e:	4313      	orrs	r3, r2
 8004890:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004898:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800489c:	d101      	bne.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800489e:	2301      	movs	r3, #1
 80048a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0308 	and.w	r3, r3, #8
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d001      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80048ae:	2301      	movs	r3, #1
 80048b0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00a      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048be:	4b1c      	ldr	r3, [pc, #112]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80048c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048cc:	4918      	ldr	r1, [pc, #96]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00b      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80048e0:	4b13      	ldr	r3, [pc, #76]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80048e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048e6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048f0:	490f      	ldr	r1, [pc, #60]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d005      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004906:	f040 80d8 	bne.w	8004aba <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800490a:	4b09      	ldr	r3, [pc, #36]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a08      	ldr	r2, [pc, #32]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004910:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004914:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004916:	f7fb ff23 	bl	8000760 <HAL_GetTick>
 800491a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800491c:	e00a      	b.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800491e:	f7fb ff1f 	bl	8000760 <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	2b64      	cmp	r3, #100	; 0x64
 800492a:	d903      	bls.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e196      	b.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8004930:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004934:	4b6c      	ldr	r3, [pc, #432]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1ee      	bne.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	2b00      	cmp	r3, #0
 800494a:	d021      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x500>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004950:	2b00      	cmp	r3, #0
 8004952:	d11d      	bne.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004954:	4b64      	ldr	r3, [pc, #400]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004956:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800495a:	0c1b      	lsrs	r3, r3, #16
 800495c:	f003 0303 	and.w	r3, r3, #3
 8004960:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004962:	4b61      	ldr	r3, [pc, #388]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004964:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004968:	0e1b      	lsrs	r3, r3, #24
 800496a:	f003 030f 	and.w	r3, r3, #15
 800496e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	019a      	lsls	r2, r3, #6
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	041b      	lsls	r3, r3, #16
 800497a:	431a      	orrs	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	061b      	lsls	r3, r3, #24
 8004980:	431a      	orrs	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	071b      	lsls	r3, r3, #28
 8004988:	4957      	ldr	r1, [pc, #348]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800498a:	4313      	orrs	r3, r2
 800498c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d004      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x516>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049a4:	d00a      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d02e      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049ba:	d129      	bne.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80049bc:	4b4a      	ldr	r3, [pc, #296]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80049be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049c2:	0c1b      	lsrs	r3, r3, #16
 80049c4:	f003 0303 	and.w	r3, r3, #3
 80049c8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80049ca:	4b47      	ldr	r3, [pc, #284]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80049cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049d0:	0f1b      	lsrs	r3, r3, #28
 80049d2:	f003 0307 	and.w	r3, r3, #7
 80049d6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	019a      	lsls	r2, r3, #6
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	041b      	lsls	r3, r3, #16
 80049e2:	431a      	orrs	r2, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	061b      	lsls	r3, r3, #24
 80049ea:	431a      	orrs	r2, r3
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	071b      	lsls	r3, r3, #28
 80049f0:	493d      	ldr	r1, [pc, #244]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80049f8:	4b3b      	ldr	r3, [pc, #236]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80049fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049fe:	f023 021f 	bic.w	r2, r3, #31
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a06:	3b01      	subs	r3, #1
 8004a08:	4937      	ldr	r1, [pc, #220]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d01d      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a1c:	4b32      	ldr	r3, [pc, #200]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004a1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a22:	0e1b      	lsrs	r3, r3, #24
 8004a24:	f003 030f 	and.w	r3, r3, #15
 8004a28:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a2a:	4b2f      	ldr	r3, [pc, #188]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004a2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a30:	0f1b      	lsrs	r3, r3, #28
 8004a32:	f003 0307 	and.w	r3, r3, #7
 8004a36:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	019a      	lsls	r2, r3, #6
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	041b      	lsls	r3, r3, #16
 8004a44:	431a      	orrs	r2, r3
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	061b      	lsls	r3, r3, #24
 8004a4a:	431a      	orrs	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	071b      	lsls	r3, r3, #28
 8004a50:	4925      	ldr	r1, [pc, #148]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d011      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	019a      	lsls	r2, r3, #6
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	041b      	lsls	r3, r3, #16
 8004a70:	431a      	orrs	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	061b      	lsls	r3, r3, #24
 8004a78:	431a      	orrs	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	071b      	lsls	r3, r3, #28
 8004a80:	4919      	ldr	r1, [pc, #100]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a88:	4b17      	ldr	r3, [pc, #92]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a16      	ldr	r2, [pc, #88]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004a8e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a94:	f7fb fe64 	bl	8000760 <HAL_GetTick>
 8004a98:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a9a:	e008      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a9c:	f7fb fe60 	bl	8000760 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b64      	cmp	r3, #100	; 0x64
 8004aa8:	d901      	bls.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e0d7      	b.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004aae:	4b0e      	ldr	r3, [pc, #56]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d0f0      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	f040 80cd 	bne.w	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004ac2:	4b09      	ldr	r3, [pc, #36]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a08      	ldr	r2, [pc, #32]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004ac8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004acc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ace:	f7fb fe47 	bl	8000760 <HAL_GetTick>
 8004ad2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ad4:	e00a      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004ad6:	f7fb fe43 	bl	8000760 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	2b64      	cmp	r3, #100	; 0x64
 8004ae2:	d903      	bls.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e0ba      	b.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8004ae8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004aec:	4b5e      	ldr	r3, [pc, #376]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004af4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004af8:	d0ed      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d003      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d009      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d02e      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d12a      	bne.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b22:	4b51      	ldr	r3, [pc, #324]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b28:	0c1b      	lsrs	r3, r3, #16
 8004b2a:	f003 0303 	and.w	r3, r3, #3
 8004b2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b30:	4b4d      	ldr	r3, [pc, #308]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b36:	0f1b      	lsrs	r3, r3, #28
 8004b38:	f003 0307 	and.w	r3, r3, #7
 8004b3c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	019a      	lsls	r2, r3, #6
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	041b      	lsls	r3, r3, #16
 8004b48:	431a      	orrs	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	061b      	lsls	r3, r3, #24
 8004b50:	431a      	orrs	r2, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	071b      	lsls	r3, r3, #28
 8004b56:	4944      	ldr	r1, [pc, #272]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004b5e:	4b42      	ldr	r3, [pc, #264]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004b60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b64:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b6c:	3b01      	subs	r3, #1
 8004b6e:	021b      	lsls	r3, r3, #8
 8004b70:	493d      	ldr	r1, [pc, #244]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d022      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b8c:	d11d      	bne.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b8e:	4b36      	ldr	r3, [pc, #216]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b94:	0e1b      	lsrs	r3, r3, #24
 8004b96:	f003 030f 	and.w	r3, r3, #15
 8004b9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b9c:	4b32      	ldr	r3, [pc, #200]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba2:	0f1b      	lsrs	r3, r3, #28
 8004ba4:	f003 0307 	and.w	r3, r3, #7
 8004ba8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	695b      	ldr	r3, [r3, #20]
 8004bae:	019a      	lsls	r2, r3, #6
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a1b      	ldr	r3, [r3, #32]
 8004bb4:	041b      	lsls	r3, r3, #16
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	061b      	lsls	r3, r3, #24
 8004bbc:	431a      	orrs	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	071b      	lsls	r3, r3, #28
 8004bc2:	4929      	ldr	r1, [pc, #164]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0308 	and.w	r3, r3, #8
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d028      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004bd6:	4b24      	ldr	r3, [pc, #144]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bdc:	0e1b      	lsrs	r3, r3, #24
 8004bde:	f003 030f 	and.w	r3, r3, #15
 8004be2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004be4:	4b20      	ldr	r3, [pc, #128]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bea:	0c1b      	lsrs	r3, r3, #16
 8004bec:	f003 0303 	and.w	r3, r3, #3
 8004bf0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	695b      	ldr	r3, [r3, #20]
 8004bf6:	019a      	lsls	r2, r3, #6
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	041b      	lsls	r3, r3, #16
 8004bfc:	431a      	orrs	r2, r3
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	061b      	lsls	r3, r3, #24
 8004c02:	431a      	orrs	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	69db      	ldr	r3, [r3, #28]
 8004c08:	071b      	lsls	r3, r3, #28
 8004c0a:	4917      	ldr	r1, [pc, #92]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004c12:	4b15      	ldr	r3, [pc, #84]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004c14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c20:	4911      	ldr	r1, [pc, #68]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004c28:	4b0f      	ldr	r3, [pc, #60]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a0e      	ldr	r2, [pc, #56]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004c2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c34:	f7fb fd94 	bl	8000760 <HAL_GetTick>
 8004c38:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c3a:	e008      	b.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c3c:	f7fb fd90 	bl	8000760 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	2b64      	cmp	r3, #100	; 0x64
 8004c48:	d901      	bls.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e007      	b.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c4e:	4b06      	ldr	r3, [pc, #24]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c5a:	d1ef      	bne.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3720      	adds	r7, #32
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	40023800 	.word	0x40023800

08004c6c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b087      	sub	sp, #28
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8004c74:	2300      	movs	r3, #0
 8004c76:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8004c80:	2300      	movs	r3, #0
 8004c82:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c8a:	f040 8086 	bne.w	8004d9a <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 8004c8e:	4b8d      	ldr	r3, [pc, #564]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004c90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c94:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004c9c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ca4:	d03e      	beq.n	8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8004ca6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004caa:	d073      	beq.n	8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d000      	beq.n	8004cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8004cb0:	e074      	b.n	8004d9c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004cb2:	4b84      	ldr	r3, [pc, #528]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d108      	bne.n	8004cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004cbe:	4b81      	ldr	r3, [pc, #516]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cc6:	4a80      	ldr	r2, [pc, #512]	; (8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8004cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ccc:	613b      	str	r3, [r7, #16]
 8004cce:	e007      	b.n	8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004cd0:	4b7c      	ldr	r3, [pc, #496]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cd8:	4a7c      	ldr	r2, [pc, #496]	; (8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8004cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cde:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8004ce0:	4b78      	ldr	r3, [pc, #480]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce6:	0e1b      	lsrs	r3, r3, #24
 8004ce8:	f003 030f 	and.w	r3, r3, #15
 8004cec:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8004cee:	4b75      	ldr	r3, [pc, #468]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf4:	099b      	lsrs	r3, r3, #6
 8004cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	fb02 f203 	mul.w	r2, r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d06:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8004d08:	4b6e      	ldr	r3, [pc, #440]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004d0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d0e:	0a1b      	lsrs	r3, r3, #8
 8004d10:	f003 031f 	and.w	r3, r3, #31
 8004d14:	3301      	adds	r3, #1
 8004d16:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004d18:	697a      	ldr	r2, [r7, #20]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d20:	617b      	str	r3, [r7, #20]
        break;
 8004d22:	e03b      	b.n	8004d9c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004d24:	4b67      	ldr	r3, [pc, #412]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d108      	bne.n	8004d42 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004d30:	4b64      	ldr	r3, [pc, #400]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d38:	4a63      	ldr	r2, [pc, #396]	; (8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8004d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d3e:	613b      	str	r3, [r7, #16]
 8004d40:	e007      	b.n	8004d52 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004d42:	4b60      	ldr	r3, [pc, #384]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d4a:	4a60      	ldr	r2, [pc, #384]	; (8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8004d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d50:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8004d52:	4b5c      	ldr	r3, [pc, #368]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004d54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d58:	0e1b      	lsrs	r3, r3, #24
 8004d5a:	f003 030f 	and.w	r3, r3, #15
 8004d5e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8004d60:	4b58      	ldr	r3, [pc, #352]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004d62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d66:	099b      	lsrs	r3, r3, #6
 8004d68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	fb02 f203 	mul.w	r2, r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d78:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8004d7a:	4b52      	ldr	r3, [pc, #328]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004d7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d80:	f003 031f 	and.w	r3, r3, #31
 8004d84:	3301      	adds	r3, #1
 8004d86:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d90:	617b      	str	r3, [r7, #20]
        break;
 8004d92:	e003      	b.n	8004d9c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004d94:	4b4e      	ldr	r3, [pc, #312]	; (8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8004d96:	617b      	str	r3, [r7, #20]
        break;
 8004d98:	e000      	b.n	8004d9c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 8004d9a:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004da2:	f040 8086 	bne.w	8004eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 8004da6:	4b47      	ldr	r3, [pc, #284]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004da8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dac:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004db4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dbc:	d03e      	beq.n	8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8004dbe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004dc2:	d073      	beq.n	8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d000      	beq.n	8004dca <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8004dc8:	e074      	b.n	8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004dca:	4b3e      	ldr	r3, [pc, #248]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d108      	bne.n	8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004dd6:	4b3b      	ldr	r3, [pc, #236]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dde:	4a3a      	ldr	r2, [pc, #232]	; (8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8004de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de4:	613b      	str	r3, [r7, #16]
 8004de6:	e007      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004de8:	4b36      	ldr	r3, [pc, #216]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004df0:	4a36      	ldr	r2, [pc, #216]	; (8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8004df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df6:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8004df8:	4b32      	ldr	r3, [pc, #200]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dfe:	0e1b      	lsrs	r3, r3, #24
 8004e00:	f003 030f 	and.w	r3, r3, #15
 8004e04:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8004e06:	4b2f      	ldr	r3, [pc, #188]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e0c:	099b      	lsrs	r3, r3, #6
 8004e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e12:	693a      	ldr	r2, [r7, #16]
 8004e14:	fb02 f203 	mul.w	r2, r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e1e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8004e20:	4b28      	ldr	r3, [pc, #160]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004e22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e26:	0a1b      	lsrs	r3, r3, #8
 8004e28:	f003 031f 	and.w	r3, r3, #31
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004e30:	697a      	ldr	r2, [r7, #20]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e38:	617b      	str	r3, [r7, #20]
        break;
 8004e3a:	e03b      	b.n	8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004e3c:	4b21      	ldr	r3, [pc, #132]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d108      	bne.n	8004e5a <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e48:	4b1e      	ldr	r3, [pc, #120]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e50:	4a1d      	ldr	r2, [pc, #116]	; (8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8004e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e56:	613b      	str	r3, [r7, #16]
 8004e58:	e007      	b.n	8004e6a <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004e5a:	4b1a      	ldr	r3, [pc, #104]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e62:	4a1a      	ldr	r2, [pc, #104]	; (8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8004e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e68:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8004e6a:	4b16      	ldr	r3, [pc, #88]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004e6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e70:	0e1b      	lsrs	r3, r3, #24
 8004e72:	f003 030f 	and.w	r3, r3, #15
 8004e76:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8004e78:	4b12      	ldr	r3, [pc, #72]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004e7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e7e:	099b      	lsrs	r3, r3, #6
 8004e80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	fb02 f203 	mul.w	r2, r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e90:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8004e92:	4b0c      	ldr	r3, [pc, #48]	; (8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8004e94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e98:	f003 031f 	and.w	r3, r3, #31
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004ea0:	697a      	ldr	r2, [r7, #20]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea8:	617b      	str	r3, [r7, #20]
        break;
 8004eaa:	e003      	b.n	8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004eac:	4b08      	ldr	r3, [pc, #32]	; (8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8004eae:	617b      	str	r3, [r7, #20]
        break;
 8004eb0:	e000      	b.n	8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 8004eb2:	bf00      	nop

  return frequency;
 8004eb4:	697b      	ldr	r3, [r7, #20]
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	371c      	adds	r7, #28
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	40023800 	.word	0x40023800
 8004ec8:	00f42400 	.word	0x00f42400
 8004ecc:	017d7840 	.word	0x017d7840
 8004ed0:	00bb8000 	.word	0x00bb8000

08004ed4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e06b      	b.n	8004fbe <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	7f5b      	ldrb	r3, [r3, #29]
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d105      	bne.n	8004efc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f005 ffa6 	bl	800ae48 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2202      	movs	r2, #2
 8004f00:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	22ca      	movs	r2, #202	; 0xca
 8004f08:	625a      	str	r2, [r3, #36]	; 0x24
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2253      	movs	r2, #83	; 0x53
 8004f10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 fb00 	bl	8005518 <RTC_EnterInitMode>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d008      	beq.n	8004f30 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	22ff      	movs	r2, #255	; 0xff
 8004f24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2204      	movs	r2, #4
 8004f2a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e046      	b.n	8004fbe <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	6899      	ldr	r1, [r3, #8]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	4b23      	ldr	r3, [pc, #140]	; (8004fc8 <HAL_RTC_Init+0xf4>)
 8004f3c:	400b      	ands	r3, r1
 8004f3e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	6899      	ldr	r1, [r3, #8]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685a      	ldr	r2, [r3, #4]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	431a      	orrs	r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	695b      	ldr	r3, [r3, #20]
 8004f54:	431a      	orrs	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	68d2      	ldr	r2, [r2, #12]
 8004f66:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	6919      	ldr	r1, [r3, #16]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	041a      	lsls	r2, r3, #16
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	430a      	orrs	r2, r1
 8004f7a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68da      	ldr	r2, [r3, #12]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f8a:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f022 0208 	bic.w	r2, r2, #8
 8004f9a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	699a      	ldr	r2, [r3, #24]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	430a      	orrs	r2, r1
 8004fac:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	22ff      	movs	r2, #255	; 0xff
 8004fb4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
  }
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3708      	adds	r7, #8
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	ff8fffbf 	.word	0xff8fffbf

08004fcc <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004fcc:	b590      	push	{r4, r7, lr}
 8004fce:	b087      	sub	sp, #28
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	7f1b      	ldrb	r3, [r3, #28]
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d101      	bne.n	8004fe8 <HAL_RTC_SetTime+0x1c>
 8004fe4:	2302      	movs	r3, #2
 8004fe6:	e0a8      	b.n	800513a <HAL_RTC_SetTime+0x16e>
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2201      	movs	r2, #1
 8004fec:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2202      	movs	r2, #2
 8004ff2:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d126      	bne.n	8005048 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005004:	2b00      	cmp	r3, #0
 8005006:	d102      	bne.n	800500e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	2200      	movs	r2, #0
 800500c:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	4618      	mov	r0, r3
 8005014:	f000 faac 	bl	8005570 <RTC_ByteToBcd2>
 8005018:	4603      	mov	r3, r0
 800501a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	785b      	ldrb	r3, [r3, #1]
 8005020:	4618      	mov	r0, r3
 8005022:	f000 faa5 	bl	8005570 <RTC_ByteToBcd2>
 8005026:	4603      	mov	r3, r0
 8005028:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800502a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	789b      	ldrb	r3, [r3, #2]
 8005030:	4618      	mov	r0, r3
 8005032:	f000 fa9d 	bl	8005570 <RTC_ByteToBcd2>
 8005036:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8005038:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	7b1b      	ldrb	r3, [r3, #12]
 8005040:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8005042:	4313      	orrs	r3, r2
 8005044:	617b      	str	r3, [r7, #20]
 8005046:	e018      	b.n	800507a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005052:	2b00      	cmp	r3, #0
 8005054:	d102      	bne.n	800505c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	2200      	movs	r2, #0
 800505a:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	785b      	ldrb	r3, [r3, #1]
 8005066:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8005068:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800506a:	68ba      	ldr	r2, [r7, #8]
 800506c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 800506e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	7b1b      	ldrb	r3, [r3, #12]
 8005074:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8005076:	4313      	orrs	r3, r2
 8005078:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	22ca      	movs	r2, #202	; 0xca
 8005080:	625a      	str	r2, [r3, #36]	; 0x24
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2253      	movs	r2, #83	; 0x53
 8005088:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f000 fa44 	bl	8005518 <RTC_EnterInitMode>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00b      	beq.n	80050ae <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	22ff      	movs	r2, #255	; 0xff
 800509c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2204      	movs	r2, #4
 80050a2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2200      	movs	r2, #0
 80050a8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e045      	b.n	800513a <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	6979      	ldr	r1, [r7, #20]
 80050b4:	4b23      	ldr	r3, [pc, #140]	; (8005144 <HAL_RTC_SetTime+0x178>)
 80050b6:	400b      	ands	r3, r1
 80050b8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	689a      	ldr	r2, [r3, #8]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80050c8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	6899      	ldr	r1, [r3, #8]
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	691a      	ldr	r2, [r3, #16]
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	695b      	ldr	r3, [r3, #20]
 80050d8:	431a      	orrs	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	430a      	orrs	r2, r1
 80050e0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68da      	ldr	r2, [r3, #12]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050f0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	f003 0320 	and.w	r3, r3, #32
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d111      	bne.n	8005124 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f000 f9e1 	bl	80054c8 <HAL_RTC_WaitForSynchro>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00b      	beq.n	8005124 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	22ff      	movs	r2, #255	; 0xff
 8005112:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2204      	movs	r2, #4
 8005118:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2200      	movs	r2, #0
 800511e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e00a      	b.n	800513a <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	22ff      	movs	r2, #255	; 0xff
 800512a:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2201      	movs	r2, #1
 8005130:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2200      	movs	r2, #0
 8005136:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8005138:	2300      	movs	r3, #0
  }
}
 800513a:	4618      	mov	r0, r3
 800513c:	371c      	adds	r7, #28
 800513e:	46bd      	mov	sp, r7
 8005140:	bd90      	pop	{r4, r7, pc}
 8005142:	bf00      	nop
 8005144:	007f7f7f 	.word	0x007f7f7f

08005148 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005148:	b590      	push	{r4, r7, lr}
 800514a:	b087      	sub	sp, #28
 800514c:	af00      	add	r7, sp, #0
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8005154:	2300      	movs	r3, #0
 8005156:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	7f1b      	ldrb	r3, [r3, #28]
 800515c:	2b01      	cmp	r3, #1
 800515e:	d101      	bne.n	8005164 <HAL_RTC_SetDate+0x1c>
 8005160:	2302      	movs	r3, #2
 8005162:	e092      	b.n	800528a <HAL_RTC_SetDate+0x142>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2201      	movs	r2, #1
 8005168:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2202      	movs	r2, #2
 800516e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d10e      	bne.n	8005194 <HAL_RTC_SetDate+0x4c>
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	785b      	ldrb	r3, [r3, #1]
 800517a:	f003 0310 	and.w	r3, r3, #16
 800517e:	2b00      	cmp	r3, #0
 8005180:	d008      	beq.n	8005194 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	785b      	ldrb	r3, [r3, #1]
 8005186:	f023 0310 	bic.w	r3, r3, #16
 800518a:	b2db      	uxtb	r3, r3
 800518c:	330a      	adds	r3, #10
 800518e:	b2da      	uxtb	r2, r3
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d11c      	bne.n	80051d4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	78db      	ldrb	r3, [r3, #3]
 800519e:	4618      	mov	r0, r3
 80051a0:	f000 f9e6 	bl	8005570 <RTC_ByteToBcd2>
 80051a4:	4603      	mov	r3, r0
 80051a6:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	785b      	ldrb	r3, [r3, #1]
 80051ac:	4618      	mov	r0, r3
 80051ae:	f000 f9df 	bl	8005570 <RTC_ByteToBcd2>
 80051b2:	4603      	mov	r3, r0
 80051b4:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80051b6:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	789b      	ldrb	r3, [r3, #2]
 80051bc:	4618      	mov	r0, r3
 80051be:	f000 f9d7 	bl	8005570 <RTC_ByteToBcd2>
 80051c2:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80051c4:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80051ce:	4313      	orrs	r3, r2
 80051d0:	617b      	str	r3, [r7, #20]
 80051d2:	e00e      	b.n	80051f2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	78db      	ldrb	r3, [r3, #3]
 80051d8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	785b      	ldrb	r3, [r3, #1]
 80051de:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80051e0:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80051e2:	68ba      	ldr	r2, [r7, #8]
 80051e4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 80051e6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80051ee:	4313      	orrs	r3, r2
 80051f0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	22ca      	movs	r2, #202	; 0xca
 80051f8:	625a      	str	r2, [r3, #36]	; 0x24
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2253      	movs	r2, #83	; 0x53
 8005200:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005202:	68f8      	ldr	r0, [r7, #12]
 8005204:	f000 f988 	bl	8005518 <RTC_EnterInitMode>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00b      	beq.n	8005226 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	22ff      	movs	r2, #255	; 0xff
 8005214:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2204      	movs	r2, #4
 800521a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2200      	movs	r2, #0
 8005220:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e031      	b.n	800528a <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	6979      	ldr	r1, [r7, #20]
 800522c:	4b19      	ldr	r3, [pc, #100]	; (8005294 <HAL_RTC_SetDate+0x14c>)
 800522e:	400b      	ands	r3, r1
 8005230:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68da      	ldr	r2, [r3, #12]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005240:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f003 0320 	and.w	r3, r3, #32
 800524c:	2b00      	cmp	r3, #0
 800524e:	d111      	bne.n	8005274 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	f000 f939 	bl	80054c8 <HAL_RTC_WaitForSynchro>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d00b      	beq.n	8005274 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	22ff      	movs	r2, #255	; 0xff
 8005262:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2204      	movs	r2, #4
 8005268:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2200      	movs	r2, #0
 800526e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e00a      	b.n	800528a <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	22ff      	movs	r2, #255	; 0xff
 800527a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2201      	movs	r2, #1
 8005280:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005288:	2300      	movs	r3, #0
  }
}
 800528a:	4618      	mov	r0, r3
 800528c:	371c      	adds	r7, #28
 800528e:	46bd      	mov	sp, r7
 8005290:	bd90      	pop	{r4, r7, pc}
 8005292:	bf00      	nop
 8005294:	00ffff3f 	.word	0x00ffff3f

08005298 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005298:	b590      	push	{r4, r7, lr}
 800529a:	b089      	sub	sp, #36	; 0x24
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 80052a4:	2300      	movs	r3, #0
 80052a6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 80052a8:	2300      	movs	r3, #0
 80052aa:	61fb      	str	r3, [r7, #28]
 80052ac:	2300      	movs	r3, #0
 80052ae:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	7f1b      	ldrb	r3, [r3, #28]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d101      	bne.n	80052bc <HAL_RTC_SetAlarm+0x24>
 80052b8:	2302      	movs	r3, #2
 80052ba:	e101      	b.n	80054c0 <HAL_RTC_SetAlarm+0x228>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2201      	movs	r2, #1
 80052c0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2202      	movs	r2, #2
 80052c6:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d137      	bne.n	800533e <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d102      	bne.n	80052e2 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	2200      	movs	r2, #0
 80052e0:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f000 f942 	bl	8005570 <RTC_ByteToBcd2>
 80052ec:	4603      	mov	r3, r0
 80052ee:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	785b      	ldrb	r3, [r3, #1]
 80052f4:	4618      	mov	r0, r3
 80052f6:	f000 f93b 	bl	8005570 <RTC_ByteToBcd2>
 80052fa:	4603      	mov	r3, r0
 80052fc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80052fe:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	789b      	ldrb	r3, [r3, #2]
 8005304:	4618      	mov	r0, r3
 8005306:	f000 f933 	bl	8005570 <RTC_ByteToBcd2>
 800530a:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800530c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	7b1b      	ldrb	r3, [r3, #12]
 8005314:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005316:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005320:	4618      	mov	r0, r3
 8005322:	f000 f925 	bl	8005570 <RTC_ByteToBcd2>
 8005326:	4603      	mov	r3, r0
 8005328:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800532a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8005332:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8005338:	4313      	orrs	r3, r2
 800533a:	61fb      	str	r3, [r7, #28]
 800533c:	e023      	b.n	8005386 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005348:	2b00      	cmp	r3, #0
 800534a:	d102      	bne.n	8005352 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	2200      	movs	r2, #0
 8005350:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	785b      	ldrb	r3, [r3, #1]
 800535c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800535e:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005360:	68ba      	ldr	r2, [r7, #8]
 8005362:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8005364:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	7b1b      	ldrb	r3, [r3, #12]
 800536a:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800536c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005374:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8005376:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800537c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8005382:	4313      	orrs	r3, r2
 8005384:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	685a      	ldr	r2, [r3, #4]
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	69db      	ldr	r3, [r3, #28]
 800538e:	4313      	orrs	r3, r2
 8005390:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	22ca      	movs	r2, #202	; 0xca
 8005398:	625a      	str	r2, [r3, #36]	; 0x24
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2253      	movs	r2, #83	; 0x53
 80053a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053aa:	d13f      	bne.n	800542c <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	689a      	ldr	r2, [r3, #8]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80053ba:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	689a      	ldr	r2, [r3, #8]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80053ca:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80053cc:	f7fb f9c8 	bl	8000760 <HAL_GetTick>
 80053d0:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80053d2:	e013      	b.n	80053fc <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80053d4:	f7fb f9c4 	bl	8000760 <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053e2:	d90b      	bls.n	80053fc <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	22ff      	movs	r2, #255	; 0xff
 80053ea:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2203      	movs	r2, #3
 80053f0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e061      	b.n	80054c0 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	f003 0301 	and.w	r3, r3, #1
 8005406:	2b00      	cmp	r3, #0
 8005408:	d0e4      	beq.n	80053d4 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	69fa      	ldr	r2, [r7, #28]
 8005410:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	689a      	ldr	r2, [r3, #8]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005428:	609a      	str	r2, [r3, #8]
 800542a:	e03e      	b.n	80054aa <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	689a      	ldr	r2, [r3, #8]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800543a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	689a      	ldr	r2, [r3, #8]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800544a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800544c:	f7fb f988 	bl	8000760 <HAL_GetTick>
 8005450:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8005452:	e013      	b.n	800547c <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005454:	f7fb f984 	bl	8000760 <HAL_GetTick>
 8005458:	4602      	mov	r2, r0
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005462:	d90b      	bls.n	800547c <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	22ff      	movs	r2, #255	; 0xff
 800546a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2203      	movs	r2, #3
 8005470:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e021      	b.n	80054c0 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	f003 0302 	and.w	r3, r3, #2
 8005486:	2b00      	cmp	r3, #0
 8005488:	d0e4      	beq.n	8005454 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	69fa      	ldr	r2, [r7, #28]
 8005490:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	689a      	ldr	r2, [r3, #8]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054a8:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	22ff      	movs	r2, #255	; 0xff
 80054b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2201      	movs	r2, #1
 80054b6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3724      	adds	r7, #36	; 0x24
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd90      	pop	{r4, r7, pc}

080054c8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80054d0:	2300      	movs	r3, #0
 80054d2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68da      	ldr	r2, [r3, #12]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80054e2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80054e4:	f7fb f93c 	bl	8000760 <HAL_GetTick>
 80054e8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80054ea:	e009      	b.n	8005500 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80054ec:	f7fb f938 	bl	8000760 <HAL_GetTick>
 80054f0:	4602      	mov	r2, r0
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054fa:	d901      	bls.n	8005500 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e007      	b.n	8005510 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	f003 0320 	and.w	r3, r3, #32
 800550a:	2b00      	cmp	r3, #0
 800550c:	d0ee      	beq.n	80054ec <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	3710      	adds	r7, #16
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005520:	2300      	movs	r3, #0
 8005522:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800552e:	2b00      	cmp	r3, #0
 8005530:	d119      	bne.n	8005566 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f04f 32ff 	mov.w	r2, #4294967295
 800553a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800553c:	f7fb f910 	bl	8000760 <HAL_GetTick>
 8005540:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005542:	e009      	b.n	8005558 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005544:	f7fb f90c 	bl	8000760 <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005552:	d901      	bls.n	8005558 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e007      	b.n	8005568 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005562:	2b00      	cmp	r3, #0
 8005564:	d0ee      	beq.n	8005544 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	3710      	adds	r7, #16
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005570:	b480      	push	{r7}
 8005572:	b085      	sub	sp, #20
 8005574:	af00      	add	r7, sp, #0
 8005576:	4603      	mov	r3, r0
 8005578:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800557a:	2300      	movs	r3, #0
 800557c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800557e:	e005      	b.n	800558c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	3301      	adds	r3, #1
 8005584:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8005586:	79fb      	ldrb	r3, [r7, #7]
 8005588:	3b0a      	subs	r3, #10
 800558a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800558c:	79fb      	ldrb	r3, [r7, #7]
 800558e:	2b09      	cmp	r3, #9
 8005590:	d8f6      	bhi.n	8005580 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	b2db      	uxtb	r3, r3
 8005596:	011b      	lsls	r3, r3, #4
 8005598:	b2da      	uxtb	r2, r3
 800559a:	79fb      	ldrb	r3, [r7, #7]
 800559c:	4313      	orrs	r3, r2
 800559e:	b2db      	uxtb	r3, r3
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3714      	adds	r7, #20
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b087      	sub	sp, #28
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80055b8:	2300      	movs	r3, #0
 80055ba:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	7f1b      	ldrb	r3, [r3, #28]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d101      	bne.n	80055c8 <HAL_RTCEx_SetTimeStamp+0x1c>
 80055c4:	2302      	movs	r3, #2
 80055c6:	e03e      	b.n	8005646 <HAL_RTCEx_SetTimeStamp+0x9a>
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2201      	movs	r2, #1
 80055cc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2202      	movs	r2, #2
 80055d2:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	689a      	ldr	r2, [r3, #8]
 80055da:	4b1e      	ldr	r3, [pc, #120]	; (8005654 <HAL_RTCEx_SetTimeStamp+0xa8>)
 80055dc:	4013      	ands	r3, r2
 80055de:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 80055e0:	697a      	ldr	r2, [r7, #20]
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	22ca      	movs	r2, #202	; 0xca
 80055ee:	625a      	str	r2, [r3, #36]	; 0x24
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2253      	movs	r2, #83	; 0x53
 80055f6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f022 0206 	bic.w	r2, r2, #6
 8005606:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	430a      	orrs	r2, r1
 8005616:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	697a      	ldr	r2, [r7, #20]
 800561e:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	689a      	ldr	r2, [r3, #8]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800562e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	22ff      	movs	r2, #255	; 0xff
 8005636:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2201      	movs	r2, #1
 800563c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	371c      	adds	r7, #28
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	fffff7f7 	.word	0xfffff7f7

08005658 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b088      	sub	sp, #32
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8005660:	2300      	movs	r3, #0
 8005662:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8005664:	2300      	movs	r3, #0
 8005666:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8005668:	2300      	movs	r3, #0
 800566a:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d101      	bne.n	8005676 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e149      	b.n	800590a <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800567c:	b2db      	uxtb	r3, r3
 800567e:	2b00      	cmp	r3, #0
 8005680:	d106      	bne.n	8005690 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f005 ff24 	bl	800b4d8 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2202      	movs	r2, #2
 8005694:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 f94f 	bl	800593c <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d007      	beq.n	80056b6 <HAL_SAI_Init+0x5e>
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d302      	bcc.n	80056b0 <HAL_SAI_Init+0x58>
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d006      	beq.n	80056bc <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 80056ae:	e008      	b.n	80056c2 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 80056b0:	2300      	movs	r3, #0
 80056b2:	61fb      	str	r3, [r7, #28]
      break;
 80056b4:	e005      	b.n	80056c2 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80056b6:	2310      	movs	r3, #16
 80056b8:	61fb      	str	r3, [r7, #28]
      break;
 80056ba:	e002      	b.n	80056c2 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80056bc:	2320      	movs	r3, #32
 80056be:	61fb      	str	r3, [r7, #28]
      break;
 80056c0:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	2b03      	cmp	r3, #3
 80056c8:	d81d      	bhi.n	8005706 <HAL_SAI_Init+0xae>
 80056ca:	a201      	add	r2, pc, #4	; (adr r2, 80056d0 <HAL_SAI_Init+0x78>)
 80056cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d0:	080056e1 	.word	0x080056e1
 80056d4:	080056e7 	.word	0x080056e7
 80056d8:	080056ef 	.word	0x080056ef
 80056dc:	080056f7 	.word	0x080056f7
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 80056e0:	2300      	movs	r3, #0
 80056e2:	617b      	str	r3, [r7, #20]
      }
      break;
 80056e4:	e010      	b.n	8005708 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 80056e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056ea:	617b      	str	r3, [r7, #20]
      }
      break;
 80056ec:	e00c      	b.n	8005708 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 80056ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80056f2:	617b      	str	r3, [r7, #20]
      }
      break;
 80056f4:	e008      	b.n	8005708 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 80056f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80056fa:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	f043 0301 	orr.w	r3, r3, #1
 8005702:	61fb      	str	r3, [r7, #28]
      }
      break;
 8005704:	e000      	b.n	8005708 <HAL_SAI_Init+0xb0>
  default:
    break;
 8005706:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a81      	ldr	r2, [pc, #516]	; (8005914 <HAL_SAI_Init+0x2bc>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d004      	beq.n	800571c <HAL_SAI_Init+0xc4>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a80      	ldr	r2, [pc, #512]	; (8005918 <HAL_SAI_Init+0x2c0>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d103      	bne.n	8005724 <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 800571c:	4a7f      	ldr	r2, [pc, #508]	; (800591c <HAL_SAI_Init+0x2c4>)
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	6013      	str	r3, [r2, #0]
 8005722:	e002      	b.n	800572a <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8005724:	4a7e      	ldr	r2, [pc, #504]	; (8005920 <HAL_SAI_Init+0x2c8>)
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	69db      	ldr	r3, [r3, #28]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d043      	beq.n	80057ba <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 8005732:	2300      	movs	r3, #0
 8005734:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a76      	ldr	r2, [pc, #472]	; (8005914 <HAL_SAI_Init+0x2bc>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d004      	beq.n	800574a <HAL_SAI_Init+0xf2>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a74      	ldr	r2, [pc, #464]	; (8005918 <HAL_SAI_Init+0x2c0>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d104      	bne.n	8005754 <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800574a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800574e:	f7ff fa8d 	bl	8004c6c <HAL_RCCEx_GetPeriphCLKFreq>
 8005752:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a72      	ldr	r2, [pc, #456]	; (8005924 <HAL_SAI_Init+0x2cc>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d004      	beq.n	8005768 <HAL_SAI_Init+0x110>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a71      	ldr	r2, [pc, #452]	; (8005928 <HAL_SAI_Init+0x2d0>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d104      	bne.n	8005772 <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8005768:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800576c:	f7ff fa7e 	bl	8004c6c <HAL_RCCEx_GetPeriphCLKFreq>
 8005770:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	4613      	mov	r3, r2
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	4413      	add	r3, r2
 800577a:	005b      	lsls	r3, r3, #1
 800577c:	461a      	mov	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	69db      	ldr	r3, [r3, #28]
 8005782:	025b      	lsls	r3, r3, #9
 8005784:	fbb2 f3f3 	udiv	r3, r2, r3
 8005788:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	4a67      	ldr	r2, [pc, #412]	; (800592c <HAL_SAI_Init+0x2d4>)
 800578e:	fba2 2303 	umull	r2, r3, r2, r3
 8005792:	08da      	lsrs	r2, r3, #3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 8005798:	68f9      	ldr	r1, [r7, #12]
 800579a:	4b64      	ldr	r3, [pc, #400]	; (800592c <HAL_SAI_Init+0x2d4>)
 800579c:	fba3 2301 	umull	r2, r3, r3, r1
 80057a0:	08da      	lsrs	r2, r3, #3
 80057a2:	4613      	mov	r3, r2
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	4413      	add	r3, r2
 80057a8:	005b      	lsls	r3, r3, #1
 80057aa:	1aca      	subs	r2, r1, r3
 80057ac:	2a08      	cmp	r2, #8
 80057ae:	d904      	bls.n	80057ba <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a1b      	ldr	r3, [r3, #32]
 80057b4:	1c5a      	adds	r2, r3, #1
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	621a      	str	r2, [r3, #32]
    }
  }

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d003      	beq.n	80057ca <HAL_SAI_Init+0x172>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d109      	bne.n	80057de <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d101      	bne.n	80057d6 <HAL_SAI_Init+0x17e>
 80057d2:	2300      	movs	r3, #0
 80057d4:	e001      	b.n	80057da <HAL_SAI_Init+0x182>
 80057d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057da:	61bb      	str	r3, [r7, #24]
 80057dc:	e008      	b.n	80057f0 <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d102      	bne.n	80057ec <HAL_SAI_Init+0x194>
 80057e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057ea:	e000      	b.n	80057ee <HAL_SAI_Init+0x196>
 80057ec:	2300      	movs	r3, #0
 80057ee:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	6819      	ldr	r1, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	4b4d      	ldr	r3, [pc, #308]	; (8005930 <HAL_SAI_Init+0x2d8>)
 80057fc:	400b      	ands	r3, r1
 80057fe:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	6819      	ldr	r1, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	685a      	ldr	r2, [r3, #4]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580e:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005814:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581a:	431a      	orrs	r2, r3
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8005828:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005834:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a1b      	ldr	r3, [r3, #32]
 800583a:	051b      	lsls	r3, r3, #20
 800583c:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	430a      	orrs	r2, r1
 8005844:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	6859      	ldr	r1, [r3, #4]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	4b38      	ldr	r3, [pc, #224]	; (8005934 <HAL_SAI_Init+0x2dc>)
 8005852:	400b      	ands	r3, r1
 8005854:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	6859      	ldr	r1, [r3, #4]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	699a      	ldr	r2, [r3, #24]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005864:	431a      	orrs	r2, r3
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800586a:	431a      	orrs	r2, r3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	430a      	orrs	r2, r1
 8005872:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	6899      	ldr	r1, [r3, #8]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	4b2e      	ldr	r3, [pc, #184]	; (8005938 <HAL_SAI_Init+0x2e0>)
 8005880:	400b      	ands	r3, r1
 8005882:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	6899      	ldr	r1, [r3, #8]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588e:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8005894:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 800589a:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 80058a0:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058a6:	3b01      	subs	r3, #1
 80058a8:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 80058aa:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	430a      	orrs	r2, r1
 80058b2:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68d9      	ldr	r1, [r3, #12]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	f24f 0320 	movw	r3, #61472	; 0xf020
 80058c2:	400b      	ands	r3, r1
 80058c4:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68d9      	ldr	r1, [r3, #12]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058d4:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058da:	041b      	lsls	r3, r3, #16
 80058dc:	431a      	orrs	r2, r3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058e2:	3b01      	subs	r3, #1
 80058e4:	021b      	lsls	r3, r3, #8
 80058e6:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	430a      	orrs	r2, r1
 80058ee:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3720      	adds	r7, #32
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	40015804 	.word	0x40015804
 8005918:	40015824 	.word	0x40015824
 800591c:	40015800 	.word	0x40015800
 8005920:	40015c00 	.word	0x40015c00
 8005924:	40015c04 	.word	0x40015c04
 8005928:	40015c24 	.word	0x40015c24
 800592c:	cccccccd 	.word	0xcccccccd
 8005930:	ff05c010 	.word	0xff05c010
 8005934:	ffff1ff0 	.word	0xffff1ff0
 8005938:	fff88000 	.word	0xfff88000

0800593c <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800593c:	b490      	push	{r4, r7}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8005944:	4b16      	ldr	r3, [pc, #88]	; (80059a0 <SAI_Disable+0x64>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a16      	ldr	r2, [pc, #88]	; (80059a4 <SAI_Disable+0x68>)
 800594a:	fba2 2303 	umull	r2, r3, r2, r3
 800594e:	0b1b      	lsrs	r3, r3, #12
 8005950:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8005952:	2300      	movs	r3, #0
 8005954:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005964:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8005966:	4623      	mov	r3, r4
 8005968:	1e5c      	subs	r4, r3, #1
 800596a:	2b00      	cmp	r3, #0
 800596c:	d10a      	bne.n	8005984 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005974:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	73fb      	strb	r3, [r7, #15]
      break;
 8005982:	e006      	b.n	8005992 <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1e9      	bne.n	8005966 <SAI_Disable+0x2a>

  return status;
 8005992:	7bfb      	ldrb	r3, [r7, #15]
}
 8005994:	4618      	mov	r0, r3
 8005996:	3710      	adds	r7, #16
 8005998:	46bd      	mov	sp, r7
 800599a:	bc90      	pop	{r4, r7}
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	20000010 	.word	0x20000010
 80059a4:	95cbec1b 	.word	0x95cbec1b

080059a8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d101      	bne.n	80059bc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e025      	b.n	8005a08 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d106      	bne.n	80059d6 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f005 fd77 	bl	800b4c4 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2202      	movs	r2, #2
 80059da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	3304      	adds	r3, #4
 80059e6:	4619      	mov	r1, r3
 80059e8:	4610      	mov	r0, r2
 80059ea:	f001 fd35 	bl	8007458 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6818      	ldr	r0, [r3, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	461a      	mov	r2, r3
 80059f8:	6839      	ldr	r1, [r7, #0]
 80059fa:	f001 fd9f 	bl	800753c <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3708      	adds	r7, #8
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d101      	bne.n	8005a22 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e04c      	b.n	8005abc <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d106      	bne.n	8005a3c <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f005 fa20 	bl	800ae7c <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2202      	movs	r2, #2
 8005a40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f022 0203 	bic.w	r2, r2, #3
 8005a52:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	4b19      	ldr	r3, [pc, #100]	; (8005ac4 <HAL_SPDIFRX_Init+0xb4>)
 8005a60:	4013      	ands	r3, r2
 8005a62:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8005a6c:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8005a72:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8005a78:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8005a7e:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8005a84:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8005a8a:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8005a90:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 8005a96:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8005a9c:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3710      	adds	r7, #16
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	fff88407 	.word	0xfff88407

08005ac8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d101      	bne.n	8005ada <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e084      	b.n	8005be4 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d106      	bne.n	8005afa <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f005 fa03 	bl	800af00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2202      	movs	r2, #2
 8005afe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b10:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b1a:	d902      	bls.n	8005b22 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	60fb      	str	r3, [r7, #12]
 8005b20:	e002      	b.n	8005b28 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005b22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b26:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005b30:	d007      	beq.n	8005b42 <HAL_SPI_Init+0x7a>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b3a:	d002      	beq.n	8005b42 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d10b      	bne.n	8005b62 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b52:	d903      	bls.n	8005b5c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2202      	movs	r2, #2
 8005b58:	631a      	str	r2, [r3, #48]	; 0x30
 8005b5a:	e002      	b.n	8005b62 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	685a      	ldr	r2, [r3, #4]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	431a      	orrs	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	431a      	orrs	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	695b      	ldr	r3, [r3, #20]
 8005b76:	431a      	orrs	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	699b      	ldr	r3, [r3, #24]
 8005b7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b80:	431a      	orrs	r2, r3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	69db      	ldr	r3, [r3, #28]
 8005b86:	431a      	orrs	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a1b      	ldr	r3, [r3, #32]
 8005b8c:	ea42 0103 	orr.w	r1, r2, r3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	430a      	orrs	r2, r1
 8005b9a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	0c1b      	lsrs	r3, r3, #16
 8005ba2:	f003 0204 	and.w	r2, r3, #4
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005baa:	431a      	orrs	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bb0:	431a      	orrs	r2, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	ea42 0103 	orr.w	r1, r2, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	430a      	orrs	r2, r1
 8005bc2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	69da      	ldr	r2, [r3, #28]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bd2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3710      	adds	r7, #16
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d101      	bne.n	8005bfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e01d      	b.n	8005c3a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d106      	bne.n	8005c18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f005 f9d6 	bl	800afc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2202      	movs	r2, #2
 8005c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	3304      	adds	r3, #4
 8005c28:	4619      	mov	r1, r3
 8005c2a:	4610      	mov	r0, r2
 8005c2c:	f000 fb78 	bl	8006320 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3708      	adds	r7, #8
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
	...

08005c44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b085      	sub	sp, #20
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68da      	ldr	r2, [r3, #12]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f042 0201 	orr.w	r2, r2, #1
 8005c5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	689a      	ldr	r2, [r3, #8]
 8005c62:	4b0c      	ldr	r3, [pc, #48]	; (8005c94 <HAL_TIM_Base_Start_IT+0x50>)
 8005c64:	4013      	ands	r3, r2
 8005c66:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2b06      	cmp	r3, #6
 8005c6c:	d00b      	beq.n	8005c86 <HAL_TIM_Base_Start_IT+0x42>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c74:	d007      	beq.n	8005c86 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f042 0201 	orr.w	r2, r2, #1
 8005c84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3714      	adds	r7, #20
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr
 8005c94:	00010007 	.word	0x00010007

08005c98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d101      	bne.n	8005caa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e01d      	b.n	8005ce6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d106      	bne.n	8005cc4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f005 f9ee 	bl	800b0a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2202      	movs	r2, #2
 8005cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	3304      	adds	r3, #4
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	4610      	mov	r0, r2
 8005cd8:	f000 fb22 	bl	8006320 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3708      	adds	r7, #8
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}

08005cee <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b082      	sub	sp, #8
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	f003 0302 	and.w	r3, r3, #2
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d122      	bne.n	8005d4a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	f003 0302 	and.w	r3, r3, #2
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d11b      	bne.n	8005d4a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f06f 0202 	mvn.w	r2, #2
 8005d1a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	699b      	ldr	r3, [r3, #24]
 8005d28:	f003 0303 	and.w	r3, r3, #3
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d003      	beq.n	8005d38 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 fad7 	bl	80062e4 <HAL_TIM_IC_CaptureCallback>
 8005d36:	e005      	b.n	8005d44 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 fac9 	bl	80062d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 fada 	bl	80062f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	f003 0304 	and.w	r3, r3, #4
 8005d54:	2b04      	cmp	r3, #4
 8005d56:	d122      	bne.n	8005d9e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	f003 0304 	and.w	r3, r3, #4
 8005d62:	2b04      	cmp	r3, #4
 8005d64:	d11b      	bne.n	8005d9e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f06f 0204 	mvn.w	r2, #4
 8005d6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2202      	movs	r2, #2
 8005d74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	699b      	ldr	r3, [r3, #24]
 8005d7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d003      	beq.n	8005d8c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 faad 	bl	80062e4 <HAL_TIM_IC_CaptureCallback>
 8005d8a:	e005      	b.n	8005d98 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 fa9f 	bl	80062d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 fab0 	bl	80062f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	f003 0308 	and.w	r3, r3, #8
 8005da8:	2b08      	cmp	r3, #8
 8005daa:	d122      	bne.n	8005df2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	f003 0308 	and.w	r3, r3, #8
 8005db6:	2b08      	cmp	r3, #8
 8005db8:	d11b      	bne.n	8005df2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f06f 0208 	mvn.w	r2, #8
 8005dc2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2204      	movs	r2, #4
 8005dc8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	69db      	ldr	r3, [r3, #28]
 8005dd0:	f003 0303 	and.w	r3, r3, #3
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d003      	beq.n	8005de0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 fa83 	bl	80062e4 <HAL_TIM_IC_CaptureCallback>
 8005dde:	e005      	b.n	8005dec <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 fa75 	bl	80062d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 fa86 	bl	80062f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	f003 0310 	and.w	r3, r3, #16
 8005dfc:	2b10      	cmp	r3, #16
 8005dfe:	d122      	bne.n	8005e46 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	f003 0310 	and.w	r3, r3, #16
 8005e0a:	2b10      	cmp	r3, #16
 8005e0c:	d11b      	bne.n	8005e46 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f06f 0210 	mvn.w	r2, #16
 8005e16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2208      	movs	r2, #8
 8005e1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	69db      	ldr	r3, [r3, #28]
 8005e24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d003      	beq.n	8005e34 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 fa59 	bl	80062e4 <HAL_TIM_IC_CaptureCallback>
 8005e32:	e005      	b.n	8005e40 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 fa4b 	bl	80062d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 fa5c 	bl	80062f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	f003 0301 	and.w	r3, r3, #1
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d10e      	bne.n	8005e72 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	f003 0301 	and.w	r3, r3, #1
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d107      	bne.n	8005e72 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f06f 0201 	mvn.w	r2, #1
 8005e6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f004 fc7f 	bl	800a770 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	691b      	ldr	r3, [r3, #16]
 8005e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e7c:	2b80      	cmp	r3, #128	; 0x80
 8005e7e:	d10e      	bne.n	8005e9e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e8a:	2b80      	cmp	r3, #128	; 0x80
 8005e8c:	d107      	bne.n	8005e9e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 febd 	bl	8006c18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ea8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eac:	d10e      	bne.n	8005ecc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eb8:	2b80      	cmp	r3, #128	; 0x80
 8005eba:	d107      	bne.n	8005ecc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 feb0 	bl	8006c2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed6:	2b40      	cmp	r3, #64	; 0x40
 8005ed8:	d10e      	bne.n	8005ef8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee4:	2b40      	cmp	r3, #64	; 0x40
 8005ee6:	d107      	bne.n	8005ef8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 fa0a 	bl	800630c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	f003 0320 	and.w	r3, r3, #32
 8005f02:	2b20      	cmp	r3, #32
 8005f04:	d10e      	bne.n	8005f24 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	f003 0320 	and.w	r3, r3, #32
 8005f10:	2b20      	cmp	r3, #32
 8005f12:	d107      	bne.n	8005f24 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f06f 0220 	mvn.w	r2, #32
 8005f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 fe70 	bl	8006c04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f24:	bf00      	nop
 8005f26:	3708      	adds	r7, #8
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d101      	bne.n	8005f46 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005f42:	2302      	movs	r3, #2
 8005f44:	e105      	b.n	8006152 <HAL_TIM_PWM_ConfigChannel+0x226>
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2202      	movs	r2, #2
 8005f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2b14      	cmp	r3, #20
 8005f5a:	f200 80f0 	bhi.w	800613e <HAL_TIM_PWM_ConfigChannel+0x212>
 8005f5e:	a201      	add	r2, pc, #4	; (adr r2, 8005f64 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f64:	08005fb9 	.word	0x08005fb9
 8005f68:	0800613f 	.word	0x0800613f
 8005f6c:	0800613f 	.word	0x0800613f
 8005f70:	0800613f 	.word	0x0800613f
 8005f74:	08005ff9 	.word	0x08005ff9
 8005f78:	0800613f 	.word	0x0800613f
 8005f7c:	0800613f 	.word	0x0800613f
 8005f80:	0800613f 	.word	0x0800613f
 8005f84:	0800603b 	.word	0x0800603b
 8005f88:	0800613f 	.word	0x0800613f
 8005f8c:	0800613f 	.word	0x0800613f
 8005f90:	0800613f 	.word	0x0800613f
 8005f94:	0800607b 	.word	0x0800607b
 8005f98:	0800613f 	.word	0x0800613f
 8005f9c:	0800613f 	.word	0x0800613f
 8005fa0:	0800613f 	.word	0x0800613f
 8005fa4:	080060bd 	.word	0x080060bd
 8005fa8:	0800613f 	.word	0x0800613f
 8005fac:	0800613f 	.word	0x0800613f
 8005fb0:	0800613f 	.word	0x0800613f
 8005fb4:	080060fd 	.word	0x080060fd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68b9      	ldr	r1, [r7, #8]
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f000 fa4e 	bl	8006460 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	699a      	ldr	r2, [r3, #24]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f042 0208 	orr.w	r2, r2, #8
 8005fd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	699a      	ldr	r2, [r3, #24]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f022 0204 	bic.w	r2, r2, #4
 8005fe2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	6999      	ldr	r1, [r3, #24]
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	691a      	ldr	r2, [r3, #16]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	430a      	orrs	r2, r1
 8005ff4:	619a      	str	r2, [r3, #24]
      break;
 8005ff6:	e0a3      	b.n	8006140 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68b9      	ldr	r1, [r7, #8]
 8005ffe:	4618      	mov	r0, r3
 8006000:	f000 faa0 	bl	8006544 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	699a      	ldr	r2, [r3, #24]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006012:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	699a      	ldr	r2, [r3, #24]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006022:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6999      	ldr	r1, [r3, #24]
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	021a      	lsls	r2, r3, #8
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	430a      	orrs	r2, r1
 8006036:	619a      	str	r2, [r3, #24]
      break;
 8006038:	e082      	b.n	8006140 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68b9      	ldr	r1, [r7, #8]
 8006040:	4618      	mov	r0, r3
 8006042:	f000 faf7 	bl	8006634 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	69da      	ldr	r2, [r3, #28]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f042 0208 	orr.w	r2, r2, #8
 8006054:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	69da      	ldr	r2, [r3, #28]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f022 0204 	bic.w	r2, r2, #4
 8006064:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	69d9      	ldr	r1, [r3, #28]
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	691a      	ldr	r2, [r3, #16]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	430a      	orrs	r2, r1
 8006076:	61da      	str	r2, [r3, #28]
      break;
 8006078:	e062      	b.n	8006140 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68b9      	ldr	r1, [r7, #8]
 8006080:	4618      	mov	r0, r3
 8006082:	f000 fb4d 	bl	8006720 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	69da      	ldr	r2, [r3, #28]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006094:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	69da      	ldr	r2, [r3, #28]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	69d9      	ldr	r1, [r3, #28]
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	021a      	lsls	r2, r3, #8
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	430a      	orrs	r2, r1
 80060b8:	61da      	str	r2, [r3, #28]
      break;
 80060ba:	e041      	b.n	8006140 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68b9      	ldr	r1, [r7, #8]
 80060c2:	4618      	mov	r0, r3
 80060c4:	f000 fb84 	bl	80067d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f042 0208 	orr.w	r2, r2, #8
 80060d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f022 0204 	bic.w	r2, r2, #4
 80060e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	691a      	ldr	r2, [r3, #16]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	430a      	orrs	r2, r1
 80060f8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80060fa:	e021      	b.n	8006140 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68b9      	ldr	r1, [r7, #8]
 8006102:	4618      	mov	r0, r3
 8006104:	f000 fbb6 	bl	8006874 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006116:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006126:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	021a      	lsls	r2, r3, #8
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	430a      	orrs	r2, r1
 800613a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800613c:	e000      	b.n	8006140 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800613e:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2200      	movs	r2, #0
 800614c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	3710      	adds	r7, #16
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop

0800615c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800616c:	2b01      	cmp	r3, #1
 800616e:	d101      	bne.n	8006174 <HAL_TIM_ConfigClockSource+0x18>
 8006170:	2302      	movs	r3, #2
 8006172:	e0a6      	b.n	80062c2 <HAL_TIM_ConfigClockSource+0x166>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2202      	movs	r2, #2
 8006180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	4b4f      	ldr	r3, [pc, #316]	; (80062cc <HAL_TIM_ConfigClockSource+0x170>)
 8006190:	4013      	ands	r3, r2
 8006192:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800619a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2b40      	cmp	r3, #64	; 0x40
 80061aa:	d067      	beq.n	800627c <HAL_TIM_ConfigClockSource+0x120>
 80061ac:	2b40      	cmp	r3, #64	; 0x40
 80061ae:	d80b      	bhi.n	80061c8 <HAL_TIM_ConfigClockSource+0x6c>
 80061b0:	2b10      	cmp	r3, #16
 80061b2:	d073      	beq.n	800629c <HAL_TIM_ConfigClockSource+0x140>
 80061b4:	2b10      	cmp	r3, #16
 80061b6:	d802      	bhi.n	80061be <HAL_TIM_ConfigClockSource+0x62>
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d06f      	beq.n	800629c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80061bc:	e078      	b.n	80062b0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80061be:	2b20      	cmp	r3, #32
 80061c0:	d06c      	beq.n	800629c <HAL_TIM_ConfigClockSource+0x140>
 80061c2:	2b30      	cmp	r3, #48	; 0x30
 80061c4:	d06a      	beq.n	800629c <HAL_TIM_ConfigClockSource+0x140>
      break;
 80061c6:	e073      	b.n	80062b0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80061c8:	2b70      	cmp	r3, #112	; 0x70
 80061ca:	d00d      	beq.n	80061e8 <HAL_TIM_ConfigClockSource+0x8c>
 80061cc:	2b70      	cmp	r3, #112	; 0x70
 80061ce:	d804      	bhi.n	80061da <HAL_TIM_ConfigClockSource+0x7e>
 80061d0:	2b50      	cmp	r3, #80	; 0x50
 80061d2:	d033      	beq.n	800623c <HAL_TIM_ConfigClockSource+0xe0>
 80061d4:	2b60      	cmp	r3, #96	; 0x60
 80061d6:	d041      	beq.n	800625c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80061d8:	e06a      	b.n	80062b0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80061da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061de:	d066      	beq.n	80062ae <HAL_TIM_ConfigClockSource+0x152>
 80061e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061e4:	d017      	beq.n	8006216 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80061e6:	e063      	b.n	80062b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6818      	ldr	r0, [r3, #0]
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	6899      	ldr	r1, [r3, #8]
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	685a      	ldr	r2, [r3, #4]
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	f000 fc0a 	bl	8006a10 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800620a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	609a      	str	r2, [r3, #8]
      break;
 8006214:	e04c      	b.n	80062b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6818      	ldr	r0, [r3, #0]
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	6899      	ldr	r1, [r3, #8]
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	685a      	ldr	r2, [r3, #4]
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	f000 fbf3 	bl	8006a10 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	689a      	ldr	r2, [r3, #8]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006238:	609a      	str	r2, [r3, #8]
      break;
 800623a:	e039      	b.n	80062b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6818      	ldr	r0, [r3, #0]
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	6859      	ldr	r1, [r3, #4]
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	461a      	mov	r2, r3
 800624a:	f000 fb67 	bl	800691c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2150      	movs	r1, #80	; 0x50
 8006254:	4618      	mov	r0, r3
 8006256:	f000 fbc0 	bl	80069da <TIM_ITRx_SetConfig>
      break;
 800625a:	e029      	b.n	80062b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6818      	ldr	r0, [r3, #0]
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	6859      	ldr	r1, [r3, #4]
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	461a      	mov	r2, r3
 800626a:	f000 fb86 	bl	800697a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2160      	movs	r1, #96	; 0x60
 8006274:	4618      	mov	r0, r3
 8006276:	f000 fbb0 	bl	80069da <TIM_ITRx_SetConfig>
      break;
 800627a:	e019      	b.n	80062b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6818      	ldr	r0, [r3, #0]
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	6859      	ldr	r1, [r3, #4]
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	461a      	mov	r2, r3
 800628a:	f000 fb47 	bl	800691c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2140      	movs	r1, #64	; 0x40
 8006294:	4618      	mov	r0, r3
 8006296:	f000 fba0 	bl	80069da <TIM_ITRx_SetConfig>
      break;
 800629a:	e009      	b.n	80062b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4619      	mov	r1, r3
 80062a6:	4610      	mov	r0, r2
 80062a8:	f000 fb97 	bl	80069da <TIM_ITRx_SetConfig>
      break;
 80062ac:	e000      	b.n	80062b0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80062ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	fffeff88 	.word	0xfffeff88

080062d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062d8:	bf00      	nop
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062ec:	bf00      	nop
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006300:	bf00      	nop
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006314:	bf00      	nop
 8006316:	370c      	adds	r7, #12
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006320:	b480      	push	{r7}
 8006322:	b085      	sub	sp, #20
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a40      	ldr	r2, [pc, #256]	; (8006434 <TIM_Base_SetConfig+0x114>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d013      	beq.n	8006360 <TIM_Base_SetConfig+0x40>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800633e:	d00f      	beq.n	8006360 <TIM_Base_SetConfig+0x40>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a3d      	ldr	r2, [pc, #244]	; (8006438 <TIM_Base_SetConfig+0x118>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d00b      	beq.n	8006360 <TIM_Base_SetConfig+0x40>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a3c      	ldr	r2, [pc, #240]	; (800643c <TIM_Base_SetConfig+0x11c>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d007      	beq.n	8006360 <TIM_Base_SetConfig+0x40>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a3b      	ldr	r2, [pc, #236]	; (8006440 <TIM_Base_SetConfig+0x120>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d003      	beq.n	8006360 <TIM_Base_SetConfig+0x40>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4a3a      	ldr	r2, [pc, #232]	; (8006444 <TIM_Base_SetConfig+0x124>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d108      	bne.n	8006372 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006366:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	4313      	orrs	r3, r2
 8006370:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a2f      	ldr	r2, [pc, #188]	; (8006434 <TIM_Base_SetConfig+0x114>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d02b      	beq.n	80063d2 <TIM_Base_SetConfig+0xb2>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006380:	d027      	beq.n	80063d2 <TIM_Base_SetConfig+0xb2>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a2c      	ldr	r2, [pc, #176]	; (8006438 <TIM_Base_SetConfig+0x118>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d023      	beq.n	80063d2 <TIM_Base_SetConfig+0xb2>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a2b      	ldr	r2, [pc, #172]	; (800643c <TIM_Base_SetConfig+0x11c>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d01f      	beq.n	80063d2 <TIM_Base_SetConfig+0xb2>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a2a      	ldr	r2, [pc, #168]	; (8006440 <TIM_Base_SetConfig+0x120>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d01b      	beq.n	80063d2 <TIM_Base_SetConfig+0xb2>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a29      	ldr	r2, [pc, #164]	; (8006444 <TIM_Base_SetConfig+0x124>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d017      	beq.n	80063d2 <TIM_Base_SetConfig+0xb2>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a28      	ldr	r2, [pc, #160]	; (8006448 <TIM_Base_SetConfig+0x128>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d013      	beq.n	80063d2 <TIM_Base_SetConfig+0xb2>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a27      	ldr	r2, [pc, #156]	; (800644c <TIM_Base_SetConfig+0x12c>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d00f      	beq.n	80063d2 <TIM_Base_SetConfig+0xb2>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a26      	ldr	r2, [pc, #152]	; (8006450 <TIM_Base_SetConfig+0x130>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d00b      	beq.n	80063d2 <TIM_Base_SetConfig+0xb2>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a25      	ldr	r2, [pc, #148]	; (8006454 <TIM_Base_SetConfig+0x134>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d007      	beq.n	80063d2 <TIM_Base_SetConfig+0xb2>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a24      	ldr	r2, [pc, #144]	; (8006458 <TIM_Base_SetConfig+0x138>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d003      	beq.n	80063d2 <TIM_Base_SetConfig+0xb2>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a23      	ldr	r2, [pc, #140]	; (800645c <TIM_Base_SetConfig+0x13c>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d108      	bne.n	80063e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	68fa      	ldr	r2, [r7, #12]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	695b      	ldr	r3, [r3, #20]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	689a      	ldr	r2, [r3, #8]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a0a      	ldr	r2, [pc, #40]	; (8006434 <TIM_Base_SetConfig+0x114>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d003      	beq.n	8006418 <TIM_Base_SetConfig+0xf8>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a0c      	ldr	r2, [pc, #48]	; (8006444 <TIM_Base_SetConfig+0x124>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d103      	bne.n	8006420 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	691a      	ldr	r2, [r3, #16]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	615a      	str	r2, [r3, #20]
}
 8006426:	bf00      	nop
 8006428:	3714      	adds	r7, #20
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr
 8006432:	bf00      	nop
 8006434:	40010000 	.word	0x40010000
 8006438:	40000400 	.word	0x40000400
 800643c:	40000800 	.word	0x40000800
 8006440:	40000c00 	.word	0x40000c00
 8006444:	40010400 	.word	0x40010400
 8006448:	40014000 	.word	0x40014000
 800644c:	40014400 	.word	0x40014400
 8006450:	40014800 	.word	0x40014800
 8006454:	40001800 	.word	0x40001800
 8006458:	40001c00 	.word	0x40001c00
 800645c:	40002000 	.word	0x40002000

08006460 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006460:	b480      	push	{r7}
 8006462:	b087      	sub	sp, #28
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a1b      	ldr	r3, [r3, #32]
 800646e:	f023 0201 	bic.w	r2, r3, #1
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a1b      	ldr	r3, [r3, #32]
 800647a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	699b      	ldr	r3, [r3, #24]
 8006486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	4b2b      	ldr	r3, [pc, #172]	; (8006538 <TIM_OC1_SetConfig+0xd8>)
 800648c:	4013      	ands	r3, r2
 800648e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f023 0303 	bic.w	r3, r3, #3
 8006496:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	4313      	orrs	r3, r2
 80064a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	f023 0302 	bic.w	r3, r3, #2
 80064a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	697a      	ldr	r2, [r7, #20]
 80064b0:	4313      	orrs	r3, r2
 80064b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a21      	ldr	r2, [pc, #132]	; (800653c <TIM_OC1_SetConfig+0xdc>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d003      	beq.n	80064c4 <TIM_OC1_SetConfig+0x64>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a20      	ldr	r2, [pc, #128]	; (8006540 <TIM_OC1_SetConfig+0xe0>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d10c      	bne.n	80064de <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	f023 0308 	bic.w	r3, r3, #8
 80064ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	697a      	ldr	r2, [r7, #20]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	f023 0304 	bic.w	r3, r3, #4
 80064dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a16      	ldr	r2, [pc, #88]	; (800653c <TIM_OC1_SetConfig+0xdc>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d003      	beq.n	80064ee <TIM_OC1_SetConfig+0x8e>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a15      	ldr	r2, [pc, #84]	; (8006540 <TIM_OC1_SetConfig+0xe0>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d111      	bne.n	8006512 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	695b      	ldr	r3, [r3, #20]
 8006502:	693a      	ldr	r2, [r7, #16]
 8006504:	4313      	orrs	r3, r2
 8006506:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	699b      	ldr	r3, [r3, #24]
 800650c:	693a      	ldr	r2, [r7, #16]
 800650e:	4313      	orrs	r3, r2
 8006510:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	693a      	ldr	r2, [r7, #16]
 8006516:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	685a      	ldr	r2, [r3, #4]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	697a      	ldr	r2, [r7, #20]
 800652a:	621a      	str	r2, [r3, #32]
}
 800652c:	bf00      	nop
 800652e:	371c      	adds	r7, #28
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr
 8006538:	fffeff8f 	.word	0xfffeff8f
 800653c:	40010000 	.word	0x40010000
 8006540:	40010400 	.word	0x40010400

08006544 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006544:	b480      	push	{r7}
 8006546:	b087      	sub	sp, #28
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a1b      	ldr	r3, [r3, #32]
 8006552:	f023 0210 	bic.w	r2, r3, #16
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a1b      	ldr	r3, [r3, #32]
 800655e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	699b      	ldr	r3, [r3, #24]
 800656a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800656c:	68fa      	ldr	r2, [r7, #12]
 800656e:	4b2e      	ldr	r3, [pc, #184]	; (8006628 <TIM_OC2_SetConfig+0xe4>)
 8006570:	4013      	ands	r3, r2
 8006572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800657a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	021b      	lsls	r3, r3, #8
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	4313      	orrs	r3, r2
 8006586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	f023 0320 	bic.w	r3, r3, #32
 800658e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	011b      	lsls	r3, r3, #4
 8006596:	697a      	ldr	r2, [r7, #20]
 8006598:	4313      	orrs	r3, r2
 800659a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4a23      	ldr	r2, [pc, #140]	; (800662c <TIM_OC2_SetConfig+0xe8>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d003      	beq.n	80065ac <TIM_OC2_SetConfig+0x68>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a22      	ldr	r2, [pc, #136]	; (8006630 <TIM_OC2_SetConfig+0xec>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d10d      	bne.n	80065c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	011b      	lsls	r3, r3, #4
 80065ba:	697a      	ldr	r2, [r7, #20]
 80065bc:	4313      	orrs	r3, r2
 80065be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a18      	ldr	r2, [pc, #96]	; (800662c <TIM_OC2_SetConfig+0xe8>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d003      	beq.n	80065d8 <TIM_OC2_SetConfig+0x94>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a17      	ldr	r2, [pc, #92]	; (8006630 <TIM_OC2_SetConfig+0xec>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d113      	bne.n	8006600 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	695b      	ldr	r3, [r3, #20]
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	693a      	ldr	r2, [r7, #16]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	699b      	ldr	r3, [r3, #24]
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	693a      	ldr	r2, [r7, #16]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	693a      	ldr	r2, [r7, #16]
 8006604:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	685a      	ldr	r2, [r3, #4]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	697a      	ldr	r2, [r7, #20]
 8006618:	621a      	str	r2, [r3, #32]
}
 800661a:	bf00      	nop
 800661c:	371c      	adds	r7, #28
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	feff8fff 	.word	0xfeff8fff
 800662c:	40010000 	.word	0x40010000
 8006630:	40010400 	.word	0x40010400

08006634 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006634:	b480      	push	{r7}
 8006636:	b087      	sub	sp, #28
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a1b      	ldr	r3, [r3, #32]
 8006642:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	69db      	ldr	r3, [r3, #28]
 800665a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	4b2d      	ldr	r3, [pc, #180]	; (8006714 <TIM_OC3_SetConfig+0xe0>)
 8006660:	4013      	ands	r3, r2
 8006662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f023 0303 	bic.w	r3, r3, #3
 800666a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	4313      	orrs	r3, r2
 8006674:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800667c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	021b      	lsls	r3, r3, #8
 8006684:	697a      	ldr	r2, [r7, #20]
 8006686:	4313      	orrs	r3, r2
 8006688:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	4a22      	ldr	r2, [pc, #136]	; (8006718 <TIM_OC3_SetConfig+0xe4>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d003      	beq.n	800669a <TIM_OC3_SetConfig+0x66>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a21      	ldr	r2, [pc, #132]	; (800671c <TIM_OC3_SetConfig+0xe8>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d10d      	bne.n	80066b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	021b      	lsls	r3, r3, #8
 80066a8:	697a      	ldr	r2, [r7, #20]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4a17      	ldr	r2, [pc, #92]	; (8006718 <TIM_OC3_SetConfig+0xe4>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d003      	beq.n	80066c6 <TIM_OC3_SetConfig+0x92>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	4a16      	ldr	r2, [pc, #88]	; (800671c <TIM_OC3_SetConfig+0xe8>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d113      	bne.n	80066ee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	695b      	ldr	r3, [r3, #20]
 80066da:	011b      	lsls	r3, r3, #4
 80066dc:	693a      	ldr	r2, [r7, #16]
 80066de:	4313      	orrs	r3, r2
 80066e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	699b      	ldr	r3, [r3, #24]
 80066e6:	011b      	lsls	r3, r3, #4
 80066e8:	693a      	ldr	r2, [r7, #16]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	693a      	ldr	r2, [r7, #16]
 80066f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	685a      	ldr	r2, [r3, #4]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	697a      	ldr	r2, [r7, #20]
 8006706:	621a      	str	r2, [r3, #32]
}
 8006708:	bf00      	nop
 800670a:	371c      	adds	r7, #28
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr
 8006714:	fffeff8f 	.word	0xfffeff8f
 8006718:	40010000 	.word	0x40010000
 800671c:	40010400 	.word	0x40010400

08006720 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006720:	b480      	push	{r7}
 8006722:	b087      	sub	sp, #28
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a1b      	ldr	r3, [r3, #32]
 800672e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a1b      	ldr	r3, [r3, #32]
 800673a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	69db      	ldr	r3, [r3, #28]
 8006746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	4b1e      	ldr	r3, [pc, #120]	; (80067c4 <TIM_OC4_SetConfig+0xa4>)
 800674c:	4013      	ands	r3, r2
 800674e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006756:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	021b      	lsls	r3, r3, #8
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	4313      	orrs	r3, r2
 8006762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800676a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	031b      	lsls	r3, r3, #12
 8006772:	693a      	ldr	r2, [r7, #16]
 8006774:	4313      	orrs	r3, r2
 8006776:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a13      	ldr	r2, [pc, #76]	; (80067c8 <TIM_OC4_SetConfig+0xa8>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d003      	beq.n	8006788 <TIM_OC4_SetConfig+0x68>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a12      	ldr	r2, [pc, #72]	; (80067cc <TIM_OC4_SetConfig+0xac>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d109      	bne.n	800679c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800678e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	695b      	ldr	r3, [r3, #20]
 8006794:	019b      	lsls	r3, r3, #6
 8006796:	697a      	ldr	r2, [r7, #20]
 8006798:	4313      	orrs	r3, r2
 800679a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	697a      	ldr	r2, [r7, #20]
 80067a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	685a      	ldr	r2, [r3, #4]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	693a      	ldr	r2, [r7, #16]
 80067b4:	621a      	str	r2, [r3, #32]
}
 80067b6:	bf00      	nop
 80067b8:	371c      	adds	r7, #28
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr
 80067c2:	bf00      	nop
 80067c4:	feff8fff 	.word	0xfeff8fff
 80067c8:	40010000 	.word	0x40010000
 80067cc:	40010400 	.word	0x40010400

080067d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b087      	sub	sp, #28
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a1b      	ldr	r3, [r3, #32]
 80067de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6a1b      	ldr	r3, [r3, #32]
 80067ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	4b1b      	ldr	r3, [pc, #108]	; (8006868 <TIM_OC5_SetConfig+0x98>)
 80067fc:	4013      	ands	r3, r2
 80067fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	4313      	orrs	r3, r2
 8006808:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006810:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	041b      	lsls	r3, r3, #16
 8006818:	693a      	ldr	r2, [r7, #16]
 800681a:	4313      	orrs	r3, r2
 800681c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a12      	ldr	r2, [pc, #72]	; (800686c <TIM_OC5_SetConfig+0x9c>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d003      	beq.n	800682e <TIM_OC5_SetConfig+0x5e>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a11      	ldr	r2, [pc, #68]	; (8006870 <TIM_OC5_SetConfig+0xa0>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d109      	bne.n	8006842 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006834:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	695b      	ldr	r3, [r3, #20]
 800683a:	021b      	lsls	r3, r3, #8
 800683c:	697a      	ldr	r2, [r7, #20]
 800683e:	4313      	orrs	r3, r2
 8006840:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	697a      	ldr	r2, [r7, #20]
 8006846:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	68fa      	ldr	r2, [r7, #12]
 800684c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	685a      	ldr	r2, [r3, #4]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	693a      	ldr	r2, [r7, #16]
 800685a:	621a      	str	r2, [r3, #32]
}
 800685c:	bf00      	nop
 800685e:	371c      	adds	r7, #28
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr
 8006868:	fffeff8f 	.word	0xfffeff8f
 800686c:	40010000 	.word	0x40010000
 8006870:	40010400 	.word	0x40010400

08006874 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006874:	b480      	push	{r7}
 8006876:	b087      	sub	sp, #28
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6a1b      	ldr	r3, [r3, #32]
 8006882:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a1b      	ldr	r3, [r3, #32]
 800688e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800689a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	4b1c      	ldr	r3, [pc, #112]	; (8006910 <TIM_OC6_SetConfig+0x9c>)
 80068a0:	4013      	ands	r3, r2
 80068a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	021b      	lsls	r3, r3, #8
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80068b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	051b      	lsls	r3, r3, #20
 80068be:	693a      	ldr	r2, [r7, #16]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a13      	ldr	r2, [pc, #76]	; (8006914 <TIM_OC6_SetConfig+0xa0>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d003      	beq.n	80068d4 <TIM_OC6_SetConfig+0x60>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a12      	ldr	r2, [pc, #72]	; (8006918 <TIM_OC6_SetConfig+0xa4>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d109      	bne.n	80068e8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	695b      	ldr	r3, [r3, #20]
 80068e0:	029b      	lsls	r3, r3, #10
 80068e2:	697a      	ldr	r2, [r7, #20]
 80068e4:	4313      	orrs	r3, r2
 80068e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	697a      	ldr	r2, [r7, #20]
 80068ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	68fa      	ldr	r2, [r7, #12]
 80068f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	685a      	ldr	r2, [r3, #4]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	693a      	ldr	r2, [r7, #16]
 8006900:	621a      	str	r2, [r3, #32]
}
 8006902:	bf00      	nop
 8006904:	371c      	adds	r7, #28
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr
 800690e:	bf00      	nop
 8006910:	feff8fff 	.word	0xfeff8fff
 8006914:	40010000 	.word	0x40010000
 8006918:	40010400 	.word	0x40010400

0800691c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800691c:	b480      	push	{r7}
 800691e:	b087      	sub	sp, #28
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6a1b      	ldr	r3, [r3, #32]
 800692c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6a1b      	ldr	r3, [r3, #32]
 8006932:	f023 0201 	bic.w	r2, r3, #1
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	699b      	ldr	r3, [r3, #24]
 800693e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006946:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	011b      	lsls	r3, r3, #4
 800694c:	693a      	ldr	r2, [r7, #16]
 800694e:	4313      	orrs	r3, r2
 8006950:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	f023 030a 	bic.w	r3, r3, #10
 8006958:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	4313      	orrs	r3, r2
 8006960:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	693a      	ldr	r2, [r7, #16]
 8006966:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	697a      	ldr	r2, [r7, #20]
 800696c:	621a      	str	r2, [r3, #32]
}
 800696e:	bf00      	nop
 8006970:	371c      	adds	r7, #28
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr

0800697a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800697a:	b480      	push	{r7}
 800697c:	b087      	sub	sp, #28
 800697e:	af00      	add	r7, sp, #0
 8006980:	60f8      	str	r0, [r7, #12]
 8006982:	60b9      	str	r1, [r7, #8]
 8006984:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	6a1b      	ldr	r3, [r3, #32]
 800698a:	f023 0210 	bic.w	r2, r3, #16
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	699b      	ldr	r3, [r3, #24]
 8006996:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6a1b      	ldr	r3, [r3, #32]
 800699c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80069a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	031b      	lsls	r3, r3, #12
 80069aa:	697a      	ldr	r2, [r7, #20]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80069b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	011b      	lsls	r3, r3, #4
 80069bc:	693a      	ldr	r2, [r7, #16]
 80069be:	4313      	orrs	r3, r2
 80069c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	697a      	ldr	r2, [r7, #20]
 80069c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	693a      	ldr	r2, [r7, #16]
 80069cc:	621a      	str	r2, [r3, #32]
}
 80069ce:	bf00      	nop
 80069d0:	371c      	adds	r7, #28
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr

080069da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069da:	b480      	push	{r7}
 80069dc:	b085      	sub	sp, #20
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
 80069e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069f2:	683a      	ldr	r2, [r7, #0]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	f043 0307 	orr.w	r3, r3, #7
 80069fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	68fa      	ldr	r2, [r7, #12]
 8006a02:	609a      	str	r2, [r3, #8]
}
 8006a04:	bf00      	nop
 8006a06:	3714      	adds	r7, #20
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b087      	sub	sp, #28
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	60b9      	str	r1, [r7, #8]
 8006a1a:	607a      	str	r2, [r7, #4]
 8006a1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	021a      	lsls	r2, r3, #8
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	431a      	orrs	r2, r3
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	697a      	ldr	r2, [r7, #20]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	697a      	ldr	r2, [r7, #20]
 8006a42:	609a      	str	r2, [r3, #8]
}
 8006a44:	bf00      	nop
 8006a46:	371c      	adds	r7, #28
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b085      	sub	sp, #20
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d101      	bne.n	8006a68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a64:	2302      	movs	r3, #2
 8006a66:	e045      	b.n	8006af4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2202      	movs	r2, #2
 8006a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a1c      	ldr	r2, [pc, #112]	; (8006b00 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d004      	beq.n	8006a9c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a1b      	ldr	r2, [pc, #108]	; (8006b04 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d108      	bne.n	8006aae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006aa2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ab4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	68fa      	ldr	r2, [r7, #12]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ac6:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	68ba      	ldr	r2, [r7, #8]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	68fa      	ldr	r2, [r7, #12]
 8006ad8:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68ba      	ldr	r2, [r7, #8]
 8006ae0:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3714      	adds	r7, #20
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr
 8006b00:	40010000 	.word	0x40010000
 8006b04:	40010400 	.word	0x40010400

08006b08 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b085      	sub	sp, #20
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006b12:	2300      	movs	r3, #0
 8006b14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d101      	bne.n	8006b24 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006b20:	2302      	movs	r3, #2
 8006b22:	e065      	b.n	8006bf0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	4313      	orrs	r3, r2
 8006b46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	695b      	ldr	r3, [r3, #20]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	699b      	ldr	r3, [r3, #24]
 8006b98:	041b      	lsls	r3, r3, #16
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a16      	ldr	r2, [pc, #88]	; (8006bfc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d004      	beq.n	8006bb2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a14      	ldr	r2, [pc, #80]	; (8006c00 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d115      	bne.n	8006bde <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bbc:	051b      	lsls	r3, r3, #20
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	69db      	ldr	r3, [r3, #28]
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	6a1b      	ldr	r3, [r3, #32]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3714      	adds	r7, #20
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr
 8006bfc:	40010000 	.word	0x40010000
 8006c00:	40010400 	.word	0x40010400

08006c04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c0c:	bf00      	nop
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c20:	bf00      	nop
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006c34:	bf00      	nop
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b082      	sub	sp, #8
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d101      	bne.n	8006c52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e040      	b.n	8006cd4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d106      	bne.n	8006c68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f004 fb0a 	bl	800b27c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2224      	movs	r2, #36	; 0x24
 8006c6c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f022 0201 	bic.w	r2, r2, #1
 8006c7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 f82c 	bl	8006cdc <UART_SetConfig>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d101      	bne.n	8006c8e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e022      	b.n	8006cd4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d002      	beq.n	8006c9c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 fac4 	bl	8007224 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	685a      	ldr	r2, [r3, #4]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006caa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	689a      	ldr	r2, [r3, #8]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006cba:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f042 0201 	orr.w	r2, r2, #1
 8006cca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 fb4b 	bl	8007368 <UART_CheckIdleState>
 8006cd2:	4603      	mov	r3, r0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3708      	adds	r7, #8
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b088      	sub	sp, #32
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	689a      	ldr	r2, [r3, #8]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	691b      	ldr	r3, [r3, #16]
 8006cf4:	431a      	orrs	r2, r3
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	695b      	ldr	r3, [r3, #20]
 8006cfa:	431a      	orrs	r2, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	69db      	ldr	r3, [r3, #28]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	4bb1      	ldr	r3, [pc, #708]	; (8006fd0 <UART_SetConfig+0x2f4>)
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	6812      	ldr	r2, [r2, #0]
 8006d12:	6939      	ldr	r1, [r7, #16]
 8006d14:	430b      	orrs	r3, r1
 8006d16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	68da      	ldr	r2, [r3, #12]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	430a      	orrs	r2, r1
 8006d2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	699b      	ldr	r3, [r3, #24]
 8006d32:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6a1b      	ldr	r3, [r3, #32]
 8006d38:	693a      	ldr	r2, [r7, #16]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	693a      	ldr	r2, [r7, #16]
 8006d4e:	430a      	orrs	r2, r1
 8006d50:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a9f      	ldr	r2, [pc, #636]	; (8006fd4 <UART_SetConfig+0x2f8>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d121      	bne.n	8006da0 <UART_SetConfig+0xc4>
 8006d5c:	4b9e      	ldr	r3, [pc, #632]	; (8006fd8 <UART_SetConfig+0x2fc>)
 8006d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d62:	f003 0303 	and.w	r3, r3, #3
 8006d66:	2b03      	cmp	r3, #3
 8006d68:	d816      	bhi.n	8006d98 <UART_SetConfig+0xbc>
 8006d6a:	a201      	add	r2, pc, #4	; (adr r2, 8006d70 <UART_SetConfig+0x94>)
 8006d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d70:	08006d81 	.word	0x08006d81
 8006d74:	08006d8d 	.word	0x08006d8d
 8006d78:	08006d87 	.word	0x08006d87
 8006d7c:	08006d93 	.word	0x08006d93
 8006d80:	2301      	movs	r3, #1
 8006d82:	77fb      	strb	r3, [r7, #31]
 8006d84:	e151      	b.n	800702a <UART_SetConfig+0x34e>
 8006d86:	2302      	movs	r3, #2
 8006d88:	77fb      	strb	r3, [r7, #31]
 8006d8a:	e14e      	b.n	800702a <UART_SetConfig+0x34e>
 8006d8c:	2304      	movs	r3, #4
 8006d8e:	77fb      	strb	r3, [r7, #31]
 8006d90:	e14b      	b.n	800702a <UART_SetConfig+0x34e>
 8006d92:	2308      	movs	r3, #8
 8006d94:	77fb      	strb	r3, [r7, #31]
 8006d96:	e148      	b.n	800702a <UART_SetConfig+0x34e>
 8006d98:	2310      	movs	r3, #16
 8006d9a:	77fb      	strb	r3, [r7, #31]
 8006d9c:	bf00      	nop
 8006d9e:	e144      	b.n	800702a <UART_SetConfig+0x34e>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a8d      	ldr	r2, [pc, #564]	; (8006fdc <UART_SetConfig+0x300>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d134      	bne.n	8006e14 <UART_SetConfig+0x138>
 8006daa:	4b8b      	ldr	r3, [pc, #556]	; (8006fd8 <UART_SetConfig+0x2fc>)
 8006dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006db0:	f003 030c 	and.w	r3, r3, #12
 8006db4:	2b0c      	cmp	r3, #12
 8006db6:	d829      	bhi.n	8006e0c <UART_SetConfig+0x130>
 8006db8:	a201      	add	r2, pc, #4	; (adr r2, 8006dc0 <UART_SetConfig+0xe4>)
 8006dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dbe:	bf00      	nop
 8006dc0:	08006df5 	.word	0x08006df5
 8006dc4:	08006e0d 	.word	0x08006e0d
 8006dc8:	08006e0d 	.word	0x08006e0d
 8006dcc:	08006e0d 	.word	0x08006e0d
 8006dd0:	08006e01 	.word	0x08006e01
 8006dd4:	08006e0d 	.word	0x08006e0d
 8006dd8:	08006e0d 	.word	0x08006e0d
 8006ddc:	08006e0d 	.word	0x08006e0d
 8006de0:	08006dfb 	.word	0x08006dfb
 8006de4:	08006e0d 	.word	0x08006e0d
 8006de8:	08006e0d 	.word	0x08006e0d
 8006dec:	08006e0d 	.word	0x08006e0d
 8006df0:	08006e07 	.word	0x08006e07
 8006df4:	2300      	movs	r3, #0
 8006df6:	77fb      	strb	r3, [r7, #31]
 8006df8:	e117      	b.n	800702a <UART_SetConfig+0x34e>
 8006dfa:	2302      	movs	r3, #2
 8006dfc:	77fb      	strb	r3, [r7, #31]
 8006dfe:	e114      	b.n	800702a <UART_SetConfig+0x34e>
 8006e00:	2304      	movs	r3, #4
 8006e02:	77fb      	strb	r3, [r7, #31]
 8006e04:	e111      	b.n	800702a <UART_SetConfig+0x34e>
 8006e06:	2308      	movs	r3, #8
 8006e08:	77fb      	strb	r3, [r7, #31]
 8006e0a:	e10e      	b.n	800702a <UART_SetConfig+0x34e>
 8006e0c:	2310      	movs	r3, #16
 8006e0e:	77fb      	strb	r3, [r7, #31]
 8006e10:	bf00      	nop
 8006e12:	e10a      	b.n	800702a <UART_SetConfig+0x34e>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a71      	ldr	r2, [pc, #452]	; (8006fe0 <UART_SetConfig+0x304>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d120      	bne.n	8006e60 <UART_SetConfig+0x184>
 8006e1e:	4b6e      	ldr	r3, [pc, #440]	; (8006fd8 <UART_SetConfig+0x2fc>)
 8006e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e24:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006e28:	2b10      	cmp	r3, #16
 8006e2a:	d00f      	beq.n	8006e4c <UART_SetConfig+0x170>
 8006e2c:	2b10      	cmp	r3, #16
 8006e2e:	d802      	bhi.n	8006e36 <UART_SetConfig+0x15a>
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d005      	beq.n	8006e40 <UART_SetConfig+0x164>
 8006e34:	e010      	b.n	8006e58 <UART_SetConfig+0x17c>
 8006e36:	2b20      	cmp	r3, #32
 8006e38:	d005      	beq.n	8006e46 <UART_SetConfig+0x16a>
 8006e3a:	2b30      	cmp	r3, #48	; 0x30
 8006e3c:	d009      	beq.n	8006e52 <UART_SetConfig+0x176>
 8006e3e:	e00b      	b.n	8006e58 <UART_SetConfig+0x17c>
 8006e40:	2300      	movs	r3, #0
 8006e42:	77fb      	strb	r3, [r7, #31]
 8006e44:	e0f1      	b.n	800702a <UART_SetConfig+0x34e>
 8006e46:	2302      	movs	r3, #2
 8006e48:	77fb      	strb	r3, [r7, #31]
 8006e4a:	e0ee      	b.n	800702a <UART_SetConfig+0x34e>
 8006e4c:	2304      	movs	r3, #4
 8006e4e:	77fb      	strb	r3, [r7, #31]
 8006e50:	e0eb      	b.n	800702a <UART_SetConfig+0x34e>
 8006e52:	2308      	movs	r3, #8
 8006e54:	77fb      	strb	r3, [r7, #31]
 8006e56:	e0e8      	b.n	800702a <UART_SetConfig+0x34e>
 8006e58:	2310      	movs	r3, #16
 8006e5a:	77fb      	strb	r3, [r7, #31]
 8006e5c:	bf00      	nop
 8006e5e:	e0e4      	b.n	800702a <UART_SetConfig+0x34e>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a5f      	ldr	r2, [pc, #380]	; (8006fe4 <UART_SetConfig+0x308>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d120      	bne.n	8006eac <UART_SetConfig+0x1d0>
 8006e6a:	4b5b      	ldr	r3, [pc, #364]	; (8006fd8 <UART_SetConfig+0x2fc>)
 8006e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e70:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006e74:	2b40      	cmp	r3, #64	; 0x40
 8006e76:	d00f      	beq.n	8006e98 <UART_SetConfig+0x1bc>
 8006e78:	2b40      	cmp	r3, #64	; 0x40
 8006e7a:	d802      	bhi.n	8006e82 <UART_SetConfig+0x1a6>
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d005      	beq.n	8006e8c <UART_SetConfig+0x1b0>
 8006e80:	e010      	b.n	8006ea4 <UART_SetConfig+0x1c8>
 8006e82:	2b80      	cmp	r3, #128	; 0x80
 8006e84:	d005      	beq.n	8006e92 <UART_SetConfig+0x1b6>
 8006e86:	2bc0      	cmp	r3, #192	; 0xc0
 8006e88:	d009      	beq.n	8006e9e <UART_SetConfig+0x1c2>
 8006e8a:	e00b      	b.n	8006ea4 <UART_SetConfig+0x1c8>
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	77fb      	strb	r3, [r7, #31]
 8006e90:	e0cb      	b.n	800702a <UART_SetConfig+0x34e>
 8006e92:	2302      	movs	r3, #2
 8006e94:	77fb      	strb	r3, [r7, #31]
 8006e96:	e0c8      	b.n	800702a <UART_SetConfig+0x34e>
 8006e98:	2304      	movs	r3, #4
 8006e9a:	77fb      	strb	r3, [r7, #31]
 8006e9c:	e0c5      	b.n	800702a <UART_SetConfig+0x34e>
 8006e9e:	2308      	movs	r3, #8
 8006ea0:	77fb      	strb	r3, [r7, #31]
 8006ea2:	e0c2      	b.n	800702a <UART_SetConfig+0x34e>
 8006ea4:	2310      	movs	r3, #16
 8006ea6:	77fb      	strb	r3, [r7, #31]
 8006ea8:	bf00      	nop
 8006eaa:	e0be      	b.n	800702a <UART_SetConfig+0x34e>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a4d      	ldr	r2, [pc, #308]	; (8006fe8 <UART_SetConfig+0x30c>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d124      	bne.n	8006f00 <UART_SetConfig+0x224>
 8006eb6:	4b48      	ldr	r3, [pc, #288]	; (8006fd8 <UART_SetConfig+0x2fc>)
 8006eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ebc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ec0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ec4:	d012      	beq.n	8006eec <UART_SetConfig+0x210>
 8006ec6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006eca:	d802      	bhi.n	8006ed2 <UART_SetConfig+0x1f6>
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d007      	beq.n	8006ee0 <UART_SetConfig+0x204>
 8006ed0:	e012      	b.n	8006ef8 <UART_SetConfig+0x21c>
 8006ed2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ed6:	d006      	beq.n	8006ee6 <UART_SetConfig+0x20a>
 8006ed8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006edc:	d009      	beq.n	8006ef2 <UART_SetConfig+0x216>
 8006ede:	e00b      	b.n	8006ef8 <UART_SetConfig+0x21c>
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	77fb      	strb	r3, [r7, #31]
 8006ee4:	e0a1      	b.n	800702a <UART_SetConfig+0x34e>
 8006ee6:	2302      	movs	r3, #2
 8006ee8:	77fb      	strb	r3, [r7, #31]
 8006eea:	e09e      	b.n	800702a <UART_SetConfig+0x34e>
 8006eec:	2304      	movs	r3, #4
 8006eee:	77fb      	strb	r3, [r7, #31]
 8006ef0:	e09b      	b.n	800702a <UART_SetConfig+0x34e>
 8006ef2:	2308      	movs	r3, #8
 8006ef4:	77fb      	strb	r3, [r7, #31]
 8006ef6:	e098      	b.n	800702a <UART_SetConfig+0x34e>
 8006ef8:	2310      	movs	r3, #16
 8006efa:	77fb      	strb	r3, [r7, #31]
 8006efc:	bf00      	nop
 8006efe:	e094      	b.n	800702a <UART_SetConfig+0x34e>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a39      	ldr	r2, [pc, #228]	; (8006fec <UART_SetConfig+0x310>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d124      	bne.n	8006f54 <UART_SetConfig+0x278>
 8006f0a:	4b33      	ldr	r3, [pc, #204]	; (8006fd8 <UART_SetConfig+0x2fc>)
 8006f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f10:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006f14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f18:	d012      	beq.n	8006f40 <UART_SetConfig+0x264>
 8006f1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f1e:	d802      	bhi.n	8006f26 <UART_SetConfig+0x24a>
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d007      	beq.n	8006f34 <UART_SetConfig+0x258>
 8006f24:	e012      	b.n	8006f4c <UART_SetConfig+0x270>
 8006f26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f2a:	d006      	beq.n	8006f3a <UART_SetConfig+0x25e>
 8006f2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f30:	d009      	beq.n	8006f46 <UART_SetConfig+0x26a>
 8006f32:	e00b      	b.n	8006f4c <UART_SetConfig+0x270>
 8006f34:	2301      	movs	r3, #1
 8006f36:	77fb      	strb	r3, [r7, #31]
 8006f38:	e077      	b.n	800702a <UART_SetConfig+0x34e>
 8006f3a:	2302      	movs	r3, #2
 8006f3c:	77fb      	strb	r3, [r7, #31]
 8006f3e:	e074      	b.n	800702a <UART_SetConfig+0x34e>
 8006f40:	2304      	movs	r3, #4
 8006f42:	77fb      	strb	r3, [r7, #31]
 8006f44:	e071      	b.n	800702a <UART_SetConfig+0x34e>
 8006f46:	2308      	movs	r3, #8
 8006f48:	77fb      	strb	r3, [r7, #31]
 8006f4a:	e06e      	b.n	800702a <UART_SetConfig+0x34e>
 8006f4c:	2310      	movs	r3, #16
 8006f4e:	77fb      	strb	r3, [r7, #31]
 8006f50:	bf00      	nop
 8006f52:	e06a      	b.n	800702a <UART_SetConfig+0x34e>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a25      	ldr	r2, [pc, #148]	; (8006ff0 <UART_SetConfig+0x314>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d124      	bne.n	8006fa8 <UART_SetConfig+0x2cc>
 8006f5e:	4b1e      	ldr	r3, [pc, #120]	; (8006fd8 <UART_SetConfig+0x2fc>)
 8006f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f64:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f6c:	d012      	beq.n	8006f94 <UART_SetConfig+0x2b8>
 8006f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f72:	d802      	bhi.n	8006f7a <UART_SetConfig+0x29e>
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d007      	beq.n	8006f88 <UART_SetConfig+0x2ac>
 8006f78:	e012      	b.n	8006fa0 <UART_SetConfig+0x2c4>
 8006f7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f7e:	d006      	beq.n	8006f8e <UART_SetConfig+0x2b2>
 8006f80:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f84:	d009      	beq.n	8006f9a <UART_SetConfig+0x2be>
 8006f86:	e00b      	b.n	8006fa0 <UART_SetConfig+0x2c4>
 8006f88:	2300      	movs	r3, #0
 8006f8a:	77fb      	strb	r3, [r7, #31]
 8006f8c:	e04d      	b.n	800702a <UART_SetConfig+0x34e>
 8006f8e:	2302      	movs	r3, #2
 8006f90:	77fb      	strb	r3, [r7, #31]
 8006f92:	e04a      	b.n	800702a <UART_SetConfig+0x34e>
 8006f94:	2304      	movs	r3, #4
 8006f96:	77fb      	strb	r3, [r7, #31]
 8006f98:	e047      	b.n	800702a <UART_SetConfig+0x34e>
 8006f9a:	2308      	movs	r3, #8
 8006f9c:	77fb      	strb	r3, [r7, #31]
 8006f9e:	e044      	b.n	800702a <UART_SetConfig+0x34e>
 8006fa0:	2310      	movs	r3, #16
 8006fa2:	77fb      	strb	r3, [r7, #31]
 8006fa4:	bf00      	nop
 8006fa6:	e040      	b.n	800702a <UART_SetConfig+0x34e>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a11      	ldr	r2, [pc, #68]	; (8006ff4 <UART_SetConfig+0x318>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d139      	bne.n	8007026 <UART_SetConfig+0x34a>
 8006fb2:	4b09      	ldr	r3, [pc, #36]	; (8006fd8 <UART_SetConfig+0x2fc>)
 8006fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fb8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006fbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fc0:	d027      	beq.n	8007012 <UART_SetConfig+0x336>
 8006fc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fc6:	d817      	bhi.n	8006ff8 <UART_SetConfig+0x31c>
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d01c      	beq.n	8007006 <UART_SetConfig+0x32a>
 8006fcc:	e027      	b.n	800701e <UART_SetConfig+0x342>
 8006fce:	bf00      	nop
 8006fd0:	efff69f3 	.word	0xefff69f3
 8006fd4:	40011000 	.word	0x40011000
 8006fd8:	40023800 	.word	0x40023800
 8006fdc:	40004400 	.word	0x40004400
 8006fe0:	40004800 	.word	0x40004800
 8006fe4:	40004c00 	.word	0x40004c00
 8006fe8:	40005000 	.word	0x40005000
 8006fec:	40011400 	.word	0x40011400
 8006ff0:	40007800 	.word	0x40007800
 8006ff4:	40007c00 	.word	0x40007c00
 8006ff8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ffc:	d006      	beq.n	800700c <UART_SetConfig+0x330>
 8006ffe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007002:	d009      	beq.n	8007018 <UART_SetConfig+0x33c>
 8007004:	e00b      	b.n	800701e <UART_SetConfig+0x342>
 8007006:	2300      	movs	r3, #0
 8007008:	77fb      	strb	r3, [r7, #31]
 800700a:	e00e      	b.n	800702a <UART_SetConfig+0x34e>
 800700c:	2302      	movs	r3, #2
 800700e:	77fb      	strb	r3, [r7, #31]
 8007010:	e00b      	b.n	800702a <UART_SetConfig+0x34e>
 8007012:	2304      	movs	r3, #4
 8007014:	77fb      	strb	r3, [r7, #31]
 8007016:	e008      	b.n	800702a <UART_SetConfig+0x34e>
 8007018:	2308      	movs	r3, #8
 800701a:	77fb      	strb	r3, [r7, #31]
 800701c:	e005      	b.n	800702a <UART_SetConfig+0x34e>
 800701e:	2310      	movs	r3, #16
 8007020:	77fb      	strb	r3, [r7, #31]
 8007022:	bf00      	nop
 8007024:	e001      	b.n	800702a <UART_SetConfig+0x34e>
 8007026:	2310      	movs	r3, #16
 8007028:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	69db      	ldr	r3, [r3, #28]
 800702e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007032:	d17c      	bne.n	800712e <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8007034:	7ffb      	ldrb	r3, [r7, #31]
 8007036:	2b08      	cmp	r3, #8
 8007038:	d859      	bhi.n	80070ee <UART_SetConfig+0x412>
 800703a:	a201      	add	r2, pc, #4	; (adr r2, 8007040 <UART_SetConfig+0x364>)
 800703c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007040:	08007065 	.word	0x08007065
 8007044:	08007083 	.word	0x08007083
 8007048:	080070a1 	.word	0x080070a1
 800704c:	080070ef 	.word	0x080070ef
 8007050:	080070b9 	.word	0x080070b9
 8007054:	080070ef 	.word	0x080070ef
 8007058:	080070ef 	.word	0x080070ef
 800705c:	080070ef 	.word	0x080070ef
 8007060:	080070d7 	.word	0x080070d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007064:	f7fd f9ba 	bl	80043dc <HAL_RCC_GetPCLK1Freq>
 8007068:	4603      	mov	r3, r0
 800706a:	005a      	lsls	r2, r3, #1
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	085b      	lsrs	r3, r3, #1
 8007072:	441a      	add	r2, r3
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	fbb2 f3f3 	udiv	r3, r2, r3
 800707c:	b29b      	uxth	r3, r3
 800707e:	61bb      	str	r3, [r7, #24]
        break;
 8007080:	e038      	b.n	80070f4 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007082:	f7fd f9bf 	bl	8004404 <HAL_RCC_GetPCLK2Freq>
 8007086:	4603      	mov	r3, r0
 8007088:	005a      	lsls	r2, r3, #1
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	085b      	lsrs	r3, r3, #1
 8007090:	441a      	add	r2, r3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	fbb2 f3f3 	udiv	r3, r2, r3
 800709a:	b29b      	uxth	r3, r3
 800709c:	61bb      	str	r3, [r7, #24]
        break;
 800709e:	e029      	b.n	80070f4 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	085a      	lsrs	r2, r3, #1
 80070a6:	4b5d      	ldr	r3, [pc, #372]	; (800721c <UART_SetConfig+0x540>)
 80070a8:	4413      	add	r3, r2
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	6852      	ldr	r2, [r2, #4]
 80070ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	61bb      	str	r3, [r7, #24]
        break;
 80070b6:	e01d      	b.n	80070f4 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80070b8:	f7fd f8d2 	bl	8004260 <HAL_RCC_GetSysClockFreq>
 80070bc:	4603      	mov	r3, r0
 80070be:	005a      	lsls	r2, r3, #1
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	085b      	lsrs	r3, r3, #1
 80070c6:	441a      	add	r2, r3
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	61bb      	str	r3, [r7, #24]
        break;
 80070d4:	e00e      	b.n	80070f4 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	085b      	lsrs	r3, r3, #1
 80070dc:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	61bb      	str	r3, [r7, #24]
        break;
 80070ec:	e002      	b.n	80070f4 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	75fb      	strb	r3, [r7, #23]
        break;
 80070f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	2b0f      	cmp	r3, #15
 80070f8:	d916      	bls.n	8007128 <UART_SetConfig+0x44c>
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007100:	d212      	bcs.n	8007128 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007102:	69bb      	ldr	r3, [r7, #24]
 8007104:	b29b      	uxth	r3, r3
 8007106:	f023 030f 	bic.w	r3, r3, #15
 800710a:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800710c:	69bb      	ldr	r3, [r7, #24]
 800710e:	085b      	lsrs	r3, r3, #1
 8007110:	b29b      	uxth	r3, r3
 8007112:	f003 0307 	and.w	r3, r3, #7
 8007116:	b29a      	uxth	r2, r3
 8007118:	89fb      	ldrh	r3, [r7, #14]
 800711a:	4313      	orrs	r3, r2
 800711c:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	89fa      	ldrh	r2, [r7, #14]
 8007124:	60da      	str	r2, [r3, #12]
 8007126:	e06e      	b.n	8007206 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	75fb      	strb	r3, [r7, #23]
 800712c:	e06b      	b.n	8007206 <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 800712e:	7ffb      	ldrb	r3, [r7, #31]
 8007130:	2b08      	cmp	r3, #8
 8007132:	d857      	bhi.n	80071e4 <UART_SetConfig+0x508>
 8007134:	a201      	add	r2, pc, #4	; (adr r2, 800713c <UART_SetConfig+0x460>)
 8007136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800713a:	bf00      	nop
 800713c:	08007161 	.word	0x08007161
 8007140:	0800717d 	.word	0x0800717d
 8007144:	08007199 	.word	0x08007199
 8007148:	080071e5 	.word	0x080071e5
 800714c:	080071b1 	.word	0x080071b1
 8007150:	080071e5 	.word	0x080071e5
 8007154:	080071e5 	.word	0x080071e5
 8007158:	080071e5 	.word	0x080071e5
 800715c:	080071cd 	.word	0x080071cd
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007160:	f7fd f93c 	bl	80043dc <HAL_RCC_GetPCLK1Freq>
 8007164:	4602      	mov	r2, r0
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	085b      	lsrs	r3, r3, #1
 800716c:	441a      	add	r2, r3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	fbb2 f3f3 	udiv	r3, r2, r3
 8007176:	b29b      	uxth	r3, r3
 8007178:	61bb      	str	r3, [r7, #24]
        break;
 800717a:	e036      	b.n	80071ea <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800717c:	f7fd f942 	bl	8004404 <HAL_RCC_GetPCLK2Freq>
 8007180:	4602      	mov	r2, r0
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	085b      	lsrs	r3, r3, #1
 8007188:	441a      	add	r2, r3
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007192:	b29b      	uxth	r3, r3
 8007194:	61bb      	str	r3, [r7, #24]
        break;
 8007196:	e028      	b.n	80071ea <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	085a      	lsrs	r2, r3, #1
 800719e:	4b20      	ldr	r3, [pc, #128]	; (8007220 <UART_SetConfig+0x544>)
 80071a0:	4413      	add	r3, r2
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	6852      	ldr	r2, [r2, #4]
 80071a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	61bb      	str	r3, [r7, #24]
        break;
 80071ae:	e01c      	b.n	80071ea <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80071b0:	f7fd f856 	bl	8004260 <HAL_RCC_GetSysClockFreq>
 80071b4:	4602      	mov	r2, r0
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	085b      	lsrs	r3, r3, #1
 80071bc:	441a      	add	r2, r3
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	61bb      	str	r3, [r7, #24]
        break;
 80071ca:	e00e      	b.n	80071ea <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	085b      	lsrs	r3, r3, #1
 80071d2:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	fbb2 f3f3 	udiv	r3, r2, r3
 80071de:	b29b      	uxth	r3, r3
 80071e0:	61bb      	str	r3, [r7, #24]
        break;
 80071e2:	e002      	b.n	80071ea <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	75fb      	strb	r3, [r7, #23]
        break;
 80071e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	2b0f      	cmp	r3, #15
 80071ee:	d908      	bls.n	8007202 <UART_SetConfig+0x526>
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071f6:	d204      	bcs.n	8007202 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	69ba      	ldr	r2, [r7, #24]
 80071fe:	60da      	str	r2, [r3, #12]
 8007200:	e001      	b.n	8007206 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007212:	7dfb      	ldrb	r3, [r7, #23]
}
 8007214:	4618      	mov	r0, r3
 8007216:	3720      	adds	r7, #32
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	01e84800 	.word	0x01e84800
 8007220:	00f42400 	.word	0x00f42400

08007224 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007230:	f003 0301 	and.w	r3, r3, #1
 8007234:	2b00      	cmp	r3, #0
 8007236:	d00a      	beq.n	800724e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	430a      	orrs	r2, r1
 800724c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007252:	f003 0302 	and.w	r3, r3, #2
 8007256:	2b00      	cmp	r3, #0
 8007258:	d00a      	beq.n	8007270 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	430a      	orrs	r2, r1
 800726e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007274:	f003 0304 	and.w	r3, r3, #4
 8007278:	2b00      	cmp	r3, #0
 800727a:	d00a      	beq.n	8007292 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	430a      	orrs	r2, r1
 8007290:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007296:	f003 0308 	and.w	r3, r3, #8
 800729a:	2b00      	cmp	r3, #0
 800729c:	d00a      	beq.n	80072b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	430a      	orrs	r2, r1
 80072b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b8:	f003 0310 	and.w	r3, r3, #16
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00a      	beq.n	80072d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	430a      	orrs	r2, r1
 80072d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072da:	f003 0320 	and.w	r3, r3, #32
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d00a      	beq.n	80072f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	430a      	orrs	r2, r1
 80072f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007300:	2b00      	cmp	r3, #0
 8007302:	d01a      	beq.n	800733a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	430a      	orrs	r2, r1
 8007318:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007322:	d10a      	bne.n	800733a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	430a      	orrs	r2, r1
 8007338:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00a      	beq.n	800735c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	430a      	orrs	r2, r1
 800735a:	605a      	str	r2, [r3, #4]
  }
}
 800735c:	bf00      	nop
 800735e:	370c      	adds	r7, #12
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr

08007368 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b086      	sub	sp, #24
 800736c:	af02      	add	r7, sp, #8
 800736e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007376:	f7f9 f9f3 	bl	8000760 <HAL_GetTick>
 800737a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f003 0308 	and.w	r3, r3, #8
 8007386:	2b08      	cmp	r3, #8
 8007388:	d10e      	bne.n	80073a8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800738a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800738e:	9300      	str	r3, [sp, #0]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2200      	movs	r2, #0
 8007394:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 f814 	bl	80073c6 <UART_WaitOnFlagUntilTimeout>
 800739e:	4603      	mov	r3, r0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d001      	beq.n	80073a8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073a4:	2303      	movs	r3, #3
 80073a6:	e00a      	b.n	80073be <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2220      	movs	r2, #32
 80073ac:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2220      	movs	r2, #32
 80073b2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80073bc:	2300      	movs	r3, #0
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3710      	adds	r7, #16
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80073c6:	b580      	push	{r7, lr}
 80073c8:	b084      	sub	sp, #16
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	60f8      	str	r0, [r7, #12]
 80073ce:	60b9      	str	r1, [r7, #8]
 80073d0:	603b      	str	r3, [r7, #0]
 80073d2:	4613      	mov	r3, r2
 80073d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073d6:	e02a      	b.n	800742e <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073d8:	69bb      	ldr	r3, [r7, #24]
 80073da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073de:	d026      	beq.n	800742e <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073e0:	f7f9 f9be 	bl	8000760 <HAL_GetTick>
 80073e4:	4602      	mov	r2, r0
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	1ad3      	subs	r3, r2, r3
 80073ea:	69ba      	ldr	r2, [r7, #24]
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d302      	bcc.n	80073f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80073f0:	69bb      	ldr	r3, [r7, #24]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d11b      	bne.n	800742e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007404:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	689a      	ldr	r2, [r3, #8]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f022 0201 	bic.w	r2, r2, #1
 8007414:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2220      	movs	r2, #32
 800741a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2220      	movs	r2, #32
 8007420:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2200      	movs	r2, #0
 8007426:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800742a:	2303      	movs	r3, #3
 800742c:	e00f      	b.n	800744e <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	69da      	ldr	r2, [r3, #28]
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	4013      	ands	r3, r2
 8007438:	68ba      	ldr	r2, [r7, #8]
 800743a:	429a      	cmp	r2, r3
 800743c:	bf0c      	ite	eq
 800743e:	2301      	moveq	r3, #1
 8007440:	2300      	movne	r3, #0
 8007442:	b2db      	uxtb	r3, r3
 8007444:	461a      	mov	r2, r3
 8007446:	79fb      	ldrb	r3, [r7, #7]
 8007448:	429a      	cmp	r2, r3
 800744a:	d0c5      	beq.n	80073d8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800744c:	2300      	movs	r3, #0
}
 800744e:	4618      	mov	r0, r3
 8007450:	3710      	adds	r7, #16
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
	...

08007458 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007458:	b480      	push	{r7}
 800745a:	b085      	sub	sp, #20
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8007462:	2300      	movs	r3, #0
 8007464:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8007466:	2300      	movs	r3, #0
 8007468:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	2b01      	cmp	r3, #1
 8007470:	d027      	beq.n	80074c2 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007478:	68fa      	ldr	r2, [r7, #12]
 800747a:	4b2f      	ldr	r3, [pc, #188]	; (8007538 <FMC_SDRAM_Init+0xe0>)
 800747c:	4013      	ands	r3, r2
 800747e:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007488:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800748e:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8007494:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800749a:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 80074a0:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 80074a6:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 80074ac:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80074b2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80074b4:	68fa      	ldr	r2, [r7, #12]
 80074b6:	4313      	orrs	r3, r2
 80074b8:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	68fa      	ldr	r2, [r7, #12]
 80074be:	601a      	str	r2, [r3, #0]
 80074c0:	e032      	b.n	8007528 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80074ce:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80074d8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80074de:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80074e0:	68fa      	ldr	r2, [r7, #12]
 80074e2:	4313      	orrs	r3, r2
 80074e4:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80074ec:	68ba      	ldr	r2, [r7, #8]
 80074ee:	4b12      	ldr	r3, [pc, #72]	; (8007538 <FMC_SDRAM_Init+0xe0>)
 80074f0:	4013      	ands	r3, r2
 80074f2:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80074fc:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8007502:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8007508:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800750e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8007514:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007516:	68ba      	ldr	r2, [r7, #8]
 8007518:	4313      	orrs	r3, r2
 800751a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	68fa      	ldr	r2, [r7, #12]
 8007520:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	68ba      	ldr	r2, [r7, #8]
 8007526:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8007528:	2300      	movs	r3, #0
}
 800752a:	4618      	mov	r0, r3
 800752c:	3714      	adds	r7, #20
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr
 8007536:	bf00      	nop
 8007538:	ffff8000 	.word	0xffff8000

0800753c <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800753c:	b480      	push	{r7}
 800753e:	b087      	sub	sp, #28
 8007540:	af00      	add	r7, sp, #0
 8007542:	60f8      	str	r0, [r7, #12]
 8007544:	60b9      	str	r1, [r7, #8]
 8007546:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8007548:	2300      	movs	r3, #0
 800754a:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800754c:	2300      	movs	r3, #0
 800754e:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2b01      	cmp	r3, #1
 8007554:	d02e      	beq.n	80075b4 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007562:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	3b01      	subs	r3, #1
 8007570:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007572:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	3b01      	subs	r3, #1
 800757a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800757c:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	68db      	ldr	r3, [r3, #12]
 8007582:	3b01      	subs	r3, #1
 8007584:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8007586:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	691b      	ldr	r3, [r3, #16]
 800758c:	3b01      	subs	r3, #1
 800758e:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8007590:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	695b      	ldr	r3, [r3, #20]
 8007596:	3b01      	subs	r3, #1
 8007598:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800759a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	699b      	ldr	r3, [r3, #24]
 80075a0:	3b01      	subs	r3, #1
 80075a2:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80075a4:	4313      	orrs	r3, r2
 80075a6:	697a      	ldr	r2, [r7, #20]
 80075a8:	4313      	orrs	r3, r2
 80075aa:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	697a      	ldr	r2, [r7, #20]
 80075b0:	609a      	str	r2, [r3, #8]
 80075b2:	e039      	b.n	8007628 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80075ba:	697a      	ldr	r2, [r7, #20]
 80075bc:	4b1e      	ldr	r3, [pc, #120]	; (8007638 <FMC_SDRAM_Timing_Init+0xfc>)
 80075be:	4013      	ands	r3, r2
 80075c0:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	68db      	ldr	r3, [r3, #12]
 80075c6:	3b01      	subs	r3, #1
 80075c8:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	695b      	ldr	r3, [r3, #20]
 80075ce:	3b01      	subs	r3, #1
 80075d0:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80075d2:	4313      	orrs	r3, r2
 80075d4:	697a      	ldr	r2, [r7, #20]
 80075d6:	4313      	orrs	r3, r2
 80075d8:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	68db      	ldr	r3, [r3, #12]
 80075de:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80075e6:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	3b01      	subs	r3, #1
 80075f4:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80075f6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	3b01      	subs	r3, #1
 80075fe:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8007600:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	691b      	ldr	r3, [r3, #16]
 8007606:	3b01      	subs	r3, #1
 8007608:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800760a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	699b      	ldr	r3, [r3, #24]
 8007610:	3b01      	subs	r3, #1
 8007612:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8007614:	4313      	orrs	r3, r2
 8007616:	693a      	ldr	r2, [r7, #16]
 8007618:	4313      	orrs	r3, r2
 800761a:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	697a      	ldr	r2, [r7, #20]
 8007620:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	693a      	ldr	r2, [r7, #16]
 8007626:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8007628:	2300      	movs	r3, #0
}
 800762a:	4618      	mov	r0, r3
 800762c:	371c      	adds	r7, #28
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr
 8007636:	bf00      	nop
 8007638:	ff0f0fff 	.word	0xff0f0fff

0800763c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	f043 0201 	orr.w	r2, r3, #1
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007650:	2300      	movs	r3, #0
}
 8007652:	4618      	mov	r0, r3
 8007654:	370c      	adds	r7, #12
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr

0800765e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800765e:	b480      	push	{r7}
 8007660:	b083      	sub	sp, #12
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	f023 0201 	bic.w	r2, r3, #1
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007672:	2300      	movs	r3, #0
}
 8007674:	4618      	mov	r0, r3
 8007676:	370c      	adds	r7, #12
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007680:	b480      	push	{r7}
 8007682:	b085      	sub	sp, #20
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800768a:	2300      	movs	r3, #0
 800768c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	019b      	lsls	r3, r3, #6
 8007692:	f043 0220 	orr.w	r2, r3, #32
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	3301      	adds	r3, #1
 800769e:	60fb      	str	r3, [r7, #12]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	4a09      	ldr	r2, [pc, #36]	; (80076c8 <USB_FlushTxFifo+0x48>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d901      	bls.n	80076ac <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80076a8:	2303      	movs	r3, #3
 80076aa:	e006      	b.n	80076ba <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	691b      	ldr	r3, [r3, #16]
 80076b0:	f003 0320 	and.w	r3, r3, #32
 80076b4:	2b20      	cmp	r3, #32
 80076b6:	d0f0      	beq.n	800769a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80076b8:	2300      	movs	r3, #0
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3714      	adds	r7, #20
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr
 80076c6:	bf00      	nop
 80076c8:	00030d40 	.word	0x00030d40

080076cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b085      	sub	sp, #20
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80076d4:	2300      	movs	r3, #0
 80076d6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2210      	movs	r2, #16
 80076dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	3301      	adds	r3, #1
 80076e2:	60fb      	str	r3, [r7, #12]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	4a09      	ldr	r2, [pc, #36]	; (800770c <USB_FlushRxFifo+0x40>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d901      	bls.n	80076f0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80076ec:	2303      	movs	r3, #3
 80076ee:	e006      	b.n	80076fe <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	691b      	ldr	r3, [r3, #16]
 80076f4:	f003 0310 	and.w	r3, r3, #16
 80076f8:	2b10      	cmp	r3, #16
 80076fa:	d0f0      	beq.n	80076de <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3714      	adds	r7, #20
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr
 800770a:	bf00      	nop
 800770c:	00030d40 	.word	0x00030d40

08007710 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007710:	b480      	push	{r7}
 8007712:	b089      	sub	sp, #36	; 0x24
 8007714:	af00      	add	r7, sp, #0
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	60b9      	str	r1, [r7, #8]
 800771a:	4611      	mov	r1, r2
 800771c:	461a      	mov	r2, r3
 800771e:	460b      	mov	r3, r1
 8007720:	71fb      	strb	r3, [r7, #7]
 8007722:	4613      	mov	r3, r2
 8007724:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800772e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007732:	2b00      	cmp	r3, #0
 8007734:	d11a      	bne.n	800776c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007736:	88bb      	ldrh	r3, [r7, #4]
 8007738:	3303      	adds	r3, #3
 800773a:	089b      	lsrs	r3, r3, #2
 800773c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800773e:	2300      	movs	r3, #0
 8007740:	61bb      	str	r3, [r7, #24]
 8007742:	e00f      	b.n	8007764 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 8007744:	79fb      	ldrb	r3, [r7, #7]
 8007746:	031a      	lsls	r2, r3, #12
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	4413      	add	r3, r2
 800774c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007750:	461a      	mov	r2, r3
 8007752:	69fb      	ldr	r3, [r7, #28]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007758:	69fb      	ldr	r3, [r7, #28]
 800775a:	3304      	adds	r3, #4
 800775c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800775e:	69bb      	ldr	r3, [r7, #24]
 8007760:	3301      	adds	r3, #1
 8007762:	61bb      	str	r3, [r7, #24]
 8007764:	69ba      	ldr	r2, [r7, #24]
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	429a      	cmp	r2, r3
 800776a:	d3eb      	bcc.n	8007744 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800776c:	2300      	movs	r3, #0
}
 800776e:	4618      	mov	r0, r3
 8007770:	3724      	adds	r7, #36	; 0x24
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr

0800777a <USB_ReadPacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800777a:	b480      	push	{r7}
 800777c:	b089      	sub	sp, #36	; 0x24
 800777e:	af00      	add	r7, sp, #0
 8007780:	60f8      	str	r0, [r7, #12]
 8007782:	60b9      	str	r1, [r7, #8]
 8007784:	4613      	mov	r3, r2
 8007786:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007790:	88fb      	ldrh	r3, [r7, #6]
 8007792:	3303      	adds	r3, #3
 8007794:	089b      	lsrs	r3, r3, #2
 8007796:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007798:	2300      	movs	r3, #0
 800779a:	61bb      	str	r3, [r7, #24]
 800779c:	e00b      	b.n	80077b6 <USB_ReadPacket+0x3c>
  {
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	69fb      	ldr	r3, [r7, #28]
 80077a8:	601a      	str	r2, [r3, #0]
    pDest++;
 80077aa:	69fb      	ldr	r3, [r7, #28]
 80077ac:	3304      	adds	r3, #4
 80077ae:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80077b0:	69bb      	ldr	r3, [r7, #24]
 80077b2:	3301      	adds	r3, #1
 80077b4:	61bb      	str	r3, [r7, #24]
 80077b6:	69ba      	ldr	r2, [r7, #24]
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d3ef      	bcc.n	800779e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80077be:	69fb      	ldr	r3, [r7, #28]
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3724      	adds	r7, #36	; 0x24
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr

080077cc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b085      	sub	sp, #20
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	695b      	ldr	r3, [r3, #20]
 80077d8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	699b      	ldr	r3, [r3, #24]
 80077de:	68fa      	ldr	r2, [r7, #12]
 80077e0:	4013      	ands	r3, r2
 80077e2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80077e4:	68fb      	ldr	r3, [r7, #12]
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3714      	adds	r7, #20
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr

080077f2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80077f2:	b480      	push	{r7}
 80077f4:	b083      	sub	sp, #12
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	695b      	ldr	r3, [r3, #20]
 80077fe:	f003 0301 	and.w	r3, r3, #1
}
 8007802:	4618      	mov	r0, r3
 8007804:	370c      	adds	r7, #12
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr

0800780e <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800780e:	b480      	push	{r7}
 8007810:	b085      	sub	sp, #20
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
 8007816:	460b      	mov	r3, r1
 8007818:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	68fa      	ldr	r2, [r7, #12]
 8007828:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800782c:	f023 0303 	bic.w	r3, r3, #3
 8007830:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	78fb      	ldrb	r3, [r7, #3]
 800783c:	f003 0303 	and.w	r3, r3, #3
 8007840:	68f9      	ldr	r1, [r7, #12]
 8007842:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007846:	4313      	orrs	r3, r2
 8007848:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800784a:	78fb      	ldrb	r3, [r7, #3]
 800784c:	2b01      	cmp	r3, #1
 800784e:	d107      	bne.n	8007860 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007856:	461a      	mov	r2, r3
 8007858:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800785c:	6053      	str	r3, [r2, #4]
 800785e:	e009      	b.n	8007874 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007860:	78fb      	ldrb	r3, [r7, #3]
 8007862:	2b02      	cmp	r3, #2
 8007864:	d106      	bne.n	8007874 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800786c:	461a      	mov	r2, r3
 800786e:	f241 7370 	movw	r3, #6000	; 0x1770
 8007872:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007874:	2300      	movs	r3, #0
}
 8007876:	4618      	mov	r0, r3
 8007878:	3714      	adds	r7, #20
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr

08007882 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007882:	b580      	push	{r7, lr}
 8007884:	b084      	sub	sp, #16
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800788e:	2300      	movs	r3, #0
 8007890:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80078a2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	68fa      	ldr	r2, [r7, #12]
 80078a8:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80078ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078b0:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80078b2:	2064      	movs	r0, #100	; 0x64
 80078b4:	f7f8 ff60 	bl	8000778 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	68fa      	ldr	r2, [r7, #12]
 80078bc:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80078c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078c4:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80078c6:	200a      	movs	r0, #10
 80078c8:	f7f8 ff56 	bl	8000778 <HAL_Delay>

  return HAL_OK;
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3710      	adds	r7, #16
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}

080078d6 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80078d6:	b480      	push	{r7}
 80078d8:	b085      	sub	sp, #20
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
 80078de:	460b      	mov	r3, r1
 80078e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80078e6:	2300      	movs	r3, #0
 80078e8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80078fa:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007902:	2b00      	cmp	r3, #0
 8007904:	d109      	bne.n	800791a <USB_DriveVbus+0x44>
 8007906:	78fb      	ldrb	r3, [r7, #3]
 8007908:	2b01      	cmp	r3, #1
 800790a:	d106      	bne.n	800791a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	68fa      	ldr	r2, [r7, #12]
 8007910:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007914:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007918:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007920:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007924:	d109      	bne.n	800793a <USB_DriveVbus+0x64>
 8007926:	78fb      	ldrb	r3, [r7, #3]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d106      	bne.n	800793a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	68fa      	ldr	r2, [r7, #12]
 8007930:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007934:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007938:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800793a:	2300      	movs	r3, #0
}
 800793c:	4618      	mov	r0, r3
 800793e:	3714      	adds	r7, #20
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr

08007948 <USB_GetHostSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007948:	b480      	push	{r7}
 800794a:	b085      	sub	sp, #20
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007954:	2300      	movs	r3, #0
 8007956:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	0c5b      	lsrs	r3, r3, #17
 8007966:	f003 0303 	and.w	r3, r3, #3
}
 800796a:	4618      	mov	r0, r3
 800796c:	3714      	adds	r7, #20
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr
	...

08007978 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8007978:	b480      	push	{r7}
 800797a:	b087      	sub	sp, #28
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	4608      	mov	r0, r1
 8007982:	4611      	mov	r1, r2
 8007984:	461a      	mov	r2, r3
 8007986:	4603      	mov	r3, r0
 8007988:	70fb      	strb	r3, [r7, #3]
 800798a:	460b      	mov	r3, r1
 800798c:	70bb      	strb	r3, [r7, #2]
 800798e:	4613      	mov	r3, r2
 8007990:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007992:	2300      	movs	r3, #0
 8007994:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800799a:	78fb      	ldrb	r3, [r7, #3]
 800799c:	015a      	lsls	r2, r3, #5
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	4413      	add	r3, r2
 80079a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079a6:	461a      	mov	r2, r3
 80079a8:	f04f 33ff 	mov.w	r3, #4294967295
 80079ac:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80079ae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80079b2:	2b03      	cmp	r3, #3
 80079b4:	d87e      	bhi.n	8007ab4 <USB_HC_Init+0x13c>
 80079b6:	a201      	add	r2, pc, #4	; (adr r2, 80079bc <USB_HC_Init+0x44>)
 80079b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079bc:	080079cd 	.word	0x080079cd
 80079c0:	08007a77 	.word	0x08007a77
 80079c4:	080079cd 	.word	0x080079cd
 80079c8:	08007a39 	.word	0x08007a39
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80079cc:	78fb      	ldrb	r3, [r7, #3]
 80079ce:	015a      	lsls	r2, r3, #5
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	4413      	add	r3, r2
 80079d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079d8:	461a      	mov	r2, r3
 80079da:	f240 439d 	movw	r3, #1181	; 0x49d
 80079de:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80079e0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	da10      	bge.n	8007a0a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80079e8:	78fb      	ldrb	r3, [r7, #3]
 80079ea:	015a      	lsls	r2, r3, #5
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	4413      	add	r3, r2
 80079f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079f4:	68db      	ldr	r3, [r3, #12]
 80079f6:	78fa      	ldrb	r2, [r7, #3]
 80079f8:	0151      	lsls	r1, r2, #5
 80079fa:	68ba      	ldr	r2, [r7, #8]
 80079fc:	440a      	add	r2, r1
 80079fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a06:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8007a08:	e057      	b.n	8007aba <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d051      	beq.n	8007aba <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8007a16:	78fb      	ldrb	r3, [r7, #3]
 8007a18:	015a      	lsls	r2, r3, #5
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	4413      	add	r3, r2
 8007a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a22:	68db      	ldr	r3, [r3, #12]
 8007a24:	78fa      	ldrb	r2, [r7, #3]
 8007a26:	0151      	lsls	r1, r2, #5
 8007a28:	68ba      	ldr	r2, [r7, #8]
 8007a2a:	440a      	add	r2, r1
 8007a2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a30:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007a34:	60d3      	str	r3, [r2, #12]
      break;
 8007a36:	e040      	b.n	8007aba <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007a38:	78fb      	ldrb	r3, [r7, #3]
 8007a3a:	015a      	lsls	r2, r3, #5
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	4413      	add	r3, r2
 8007a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a44:	461a      	mov	r2, r3
 8007a46:	f240 639d 	movw	r3, #1693	; 0x69d
 8007a4a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007a4c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	da34      	bge.n	8007abe <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007a54:	78fb      	ldrb	r3, [r7, #3]
 8007a56:	015a      	lsls	r2, r3, #5
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a60:	68db      	ldr	r3, [r3, #12]
 8007a62:	78fa      	ldrb	r2, [r7, #3]
 8007a64:	0151      	lsls	r1, r2, #5
 8007a66:	68ba      	ldr	r2, [r7, #8]
 8007a68:	440a      	add	r2, r1
 8007a6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a72:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007a74:	e023      	b.n	8007abe <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007a76:	78fb      	ldrb	r3, [r7, #3]
 8007a78:	015a      	lsls	r2, r3, #5
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	4413      	add	r3, r2
 8007a7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a82:	461a      	mov	r2, r3
 8007a84:	f240 2325 	movw	r3, #549	; 0x225
 8007a88:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007a8a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	da17      	bge.n	8007ac2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007a92:	78fb      	ldrb	r3, [r7, #3]
 8007a94:	015a      	lsls	r2, r3, #5
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	4413      	add	r3, r2
 8007a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	78fa      	ldrb	r2, [r7, #3]
 8007aa2:	0151      	lsls	r1, r2, #5
 8007aa4:	68ba      	ldr	r2, [r7, #8]
 8007aa6:	440a      	add	r2, r1
 8007aa8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007aac:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007ab0:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007ab2:	e006      	b.n	8007ac2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	75fb      	strb	r3, [r7, #23]
      break;
 8007ab8:	e004      	b.n	8007ac4 <USB_HC_Init+0x14c>
      break;
 8007aba:	bf00      	nop
 8007abc:	e002      	b.n	8007ac4 <USB_HC_Init+0x14c>
      break;
 8007abe:	bf00      	nop
 8007ac0:	e000      	b.n	8007ac4 <USB_HC_Init+0x14c>
      break;
 8007ac2:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007aca:	699a      	ldr	r2, [r3, #24]
 8007acc:	78fb      	ldrb	r3, [r7, #3]
 8007ace:	f003 030f 	and.w	r3, r3, #15
 8007ad2:	2101      	movs	r1, #1
 8007ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8007ad8:	68b9      	ldr	r1, [r7, #8]
 8007ada:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	699b      	ldr	r3, [r3, #24]
 8007ae6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007aee:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	da03      	bge.n	8007afe <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007af6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007afa:	613b      	str	r3, [r7, #16]
 8007afc:	e001      	b.n	8007b02 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8007afe:	2300      	movs	r3, #0
 8007b00:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8007b02:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007b06:	2b02      	cmp	r3, #2
 8007b08:	d103      	bne.n	8007b12 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007b0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007b0e:	60fb      	str	r3, [r7, #12]
 8007b10:	e001      	b.n	8007b16 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007b12:	2300      	movs	r3, #0
 8007b14:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007b16:	787b      	ldrb	r3, [r7, #1]
 8007b18:	059b      	lsls	r3, r3, #22
 8007b1a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007b1e:	78bb      	ldrb	r3, [r7, #2]
 8007b20:	02db      	lsls	r3, r3, #11
 8007b22:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007b26:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007b28:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007b2c:	049b      	lsls	r3, r3, #18
 8007b2e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007b32:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007b34:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007b36:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007b3a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007b40:	78fb      	ldrb	r3, [r7, #3]
 8007b42:	0159      	lsls	r1, r3, #5
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	440b      	add	r3, r1
 8007b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b4c:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007b52:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8007b54:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007b58:	2b03      	cmp	r3, #3
 8007b5a:	d10f      	bne.n	8007b7c <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8007b5c:	78fb      	ldrb	r3, [r7, #3]
 8007b5e:	015a      	lsls	r2, r3, #5
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	4413      	add	r3, r2
 8007b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	78fa      	ldrb	r2, [r7, #3]
 8007b6c:	0151      	lsls	r1, r2, #5
 8007b6e:	68ba      	ldr	r2, [r7, #8]
 8007b70:	440a      	add	r2, r1
 8007b72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007b7a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007b7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	371c      	adds	r7, #28
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr
 8007b8a:	bf00      	nop

08007b8c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b08c      	sub	sp, #48	; 0x30
 8007b90:	af02      	add	r7, sp, #8
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	4613      	mov	r3, r2
 8007b98:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	785b      	ldrb	r3, [r3, #1]
 8007ba2:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007ba4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ba8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USB_OTG_SPEED_HIGH))
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d028      	beq.n	8007c08 <USB_HC_StartXfer+0x7c>
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	791b      	ldrb	r3, [r3, #4]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d124      	bne.n	8007c08 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8007bbe:	79fb      	ldrb	r3, [r7, #7]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d10b      	bne.n	8007bdc <USB_HC_StartXfer+0x50>
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	795b      	ldrb	r3, [r3, #5]
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d107      	bne.n	8007bdc <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	785b      	ldrb	r3, [r3, #1]
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	68f8      	ldr	r0, [r7, #12]
 8007bd4:	f000 fa2e 	bl	8008034 <USB_DoPing>
      return HAL_OK;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	e112      	b.n	8007e02 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8007bdc:	79fb      	ldrb	r3, [r7, #7]
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d112      	bne.n	8007c08 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8007be2:	69fb      	ldr	r3, [r7, #28]
 8007be4:	015a      	lsls	r2, r3, #5
 8007be6:	6a3b      	ldr	r3, [r7, #32]
 8007be8:	4413      	add	r3, r2
 8007bea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	69fa      	ldr	r2, [r7, #28]
 8007bf2:	0151      	lsls	r1, r2, #5
 8007bf4:	6a3a      	ldr	r2, [r7, #32]
 8007bf6:	440a      	add	r2, r1
 8007bf8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bfc:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8007c00:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	2200      	movs	r2, #0
 8007c06:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	691b      	ldr	r3, [r3, #16]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d018      	beq.n	8007c42 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	691b      	ldr	r3, [r3, #16]
 8007c14:	68ba      	ldr	r2, [r7, #8]
 8007c16:	8912      	ldrh	r2, [r2, #8]
 8007c18:	4413      	add	r3, r2
 8007c1a:	3b01      	subs	r3, #1
 8007c1c:	68ba      	ldr	r2, [r7, #8]
 8007c1e:	8912      	ldrh	r2, [r2, #8]
 8007c20:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c24:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007c26:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007c28:	8b7b      	ldrh	r3, [r7, #26]
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d90b      	bls.n	8007c46 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8007c2e:	8b7b      	ldrh	r3, [r7, #26]
 8007c30:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8007c32:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007c34:	68ba      	ldr	r2, [r7, #8]
 8007c36:	8912      	ldrh	r2, [r2, #8]
 8007c38:	fb02 f203 	mul.w	r2, r2, r3
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	611a      	str	r2, [r3, #16]
 8007c40:	e001      	b.n	8007c46 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8007c42:	2301      	movs	r3, #1
 8007c44:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	78db      	ldrb	r3, [r3, #3]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d006      	beq.n	8007c5c <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8007c4e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007c50:	68ba      	ldr	r2, [r7, #8]
 8007c52:	8912      	ldrh	r2, [r2, #8]
 8007c54:	fb02 f203 	mul.w	r2, r2, r3
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	691b      	ldr	r3, [r3, #16]
 8007c60:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007c64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007c66:	04d9      	lsls	r1, r3, #19
 8007c68:	4b68      	ldr	r3, [pc, #416]	; (8007e0c <USB_HC_StartXfer+0x280>)
 8007c6a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007c6c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	7a9b      	ldrb	r3, [r3, #10]
 8007c72:	075b      	lsls	r3, r3, #29
 8007c74:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007c78:	69f9      	ldr	r1, [r7, #28]
 8007c7a:	0148      	lsls	r0, r1, #5
 8007c7c:	6a39      	ldr	r1, [r7, #32]
 8007c7e:	4401      	add	r1, r0
 8007c80:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007c84:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007c86:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007c88:	79fb      	ldrb	r3, [r7, #7]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d009      	beq.n	8007ca2 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	68d9      	ldr	r1, [r3, #12]
 8007c92:	69fb      	ldr	r3, [r7, #28]
 8007c94:	015a      	lsls	r2, r3, #5
 8007c96:	6a3b      	ldr	r3, [r7, #32]
 8007c98:	4413      	add	r3, r2
 8007c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c9e:	460a      	mov	r2, r1
 8007ca0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007ca2:	6a3b      	ldr	r3, [r7, #32]
 8007ca4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	f003 0301 	and.w	r3, r3, #1
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	bf0c      	ite	eq
 8007cb2:	2301      	moveq	r3, #1
 8007cb4:	2300      	movne	r3, #0
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007cba:	69fb      	ldr	r3, [r7, #28]
 8007cbc:	015a      	lsls	r2, r3, #5
 8007cbe:	6a3b      	ldr	r3, [r7, #32]
 8007cc0:	4413      	add	r3, r2
 8007cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	69fa      	ldr	r2, [r7, #28]
 8007cca:	0151      	lsls	r1, r2, #5
 8007ccc:	6a3a      	ldr	r2, [r7, #32]
 8007cce:	440a      	add	r2, r1
 8007cd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007cd4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007cd8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007cda:	69fb      	ldr	r3, [r7, #28]
 8007cdc:	015a      	lsls	r2, r3, #5
 8007cde:	6a3b      	ldr	r3, [r7, #32]
 8007ce0:	4413      	add	r3, r2
 8007ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	7e7b      	ldrb	r3, [r7, #25]
 8007cea:	075b      	lsls	r3, r3, #29
 8007cec:	69f9      	ldr	r1, [r7, #28]
 8007cee:	0148      	lsls	r0, r1, #5
 8007cf0:	6a39      	ldr	r1, [r7, #32]
 8007cf2:	4401      	add	r1, r0
 8007cf4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007cfc:	69fb      	ldr	r3, [r7, #28]
 8007cfe:	015a      	lsls	r2, r3, #5
 8007d00:	6a3b      	ldr	r3, [r7, #32]
 8007d02:	4413      	add	r3, r2
 8007d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a41      	ldr	r2, [pc, #260]	; (8007e10 <USB_HC_StartXfer+0x284>)
 8007d0c:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007d0e:	4b40      	ldr	r3, [pc, #256]	; (8007e10 <USB_HC_StartXfer+0x284>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007d16:	4a3e      	ldr	r2, [pc, #248]	; (8007e10 <USB_HC_StartXfer+0x284>)
 8007d18:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	78db      	ldrb	r3, [r3, #3]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d006      	beq.n	8007d30 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007d22:	4b3b      	ldr	r3, [pc, #236]	; (8007e10 <USB_HC_StartXfer+0x284>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d2a:	4a39      	ldr	r2, [pc, #228]	; (8007e10 <USB_HC_StartXfer+0x284>)
 8007d2c:	6013      	str	r3, [r2, #0]
 8007d2e:	e005      	b.n	8007d3c <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007d30:	4b37      	ldr	r3, [pc, #220]	; (8007e10 <USB_HC_StartXfer+0x284>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007d38:	4a35      	ldr	r2, [pc, #212]	; (8007e10 <USB_HC_StartXfer+0x284>)
 8007d3a:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007d3c:	4b34      	ldr	r3, [pc, #208]	; (8007e10 <USB_HC_StartXfer+0x284>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007d44:	4a32      	ldr	r2, [pc, #200]	; (8007e10 <USB_HC_StartXfer+0x284>)
 8007d46:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007d48:	69fb      	ldr	r3, [r7, #28]
 8007d4a:	015a      	lsls	r2, r3, #5
 8007d4c:	6a3b      	ldr	r3, [r7, #32]
 8007d4e:	4413      	add	r3, r2
 8007d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d54:	461a      	mov	r2, r3
 8007d56:	4b2e      	ldr	r3, [pc, #184]	; (8007e10 <USB_HC_StartXfer+0x284>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8007d5c:	79fb      	ldrb	r3, [r7, #7]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d14e      	bne.n	8007e00 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	78db      	ldrb	r3, [r3, #3]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d14a      	bne.n	8007e00 <USB_HC_StartXfer+0x274>
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	691b      	ldr	r3, [r3, #16]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d046      	beq.n	8007e00 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	79db      	ldrb	r3, [r3, #7]
 8007d76:	2b03      	cmp	r3, #3
 8007d78:	d830      	bhi.n	8007ddc <USB_HC_StartXfer+0x250>
 8007d7a:	a201      	add	r2, pc, #4	; (adr r2, 8007d80 <USB_HC_StartXfer+0x1f4>)
 8007d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d80:	08007d91 	.word	0x08007d91
 8007d84:	08007db5 	.word	0x08007db5
 8007d88:	08007d91 	.word	0x08007d91
 8007d8c:	08007db5 	.word	0x08007db5
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	691b      	ldr	r3, [r3, #16]
 8007d94:	3303      	adds	r3, #3
 8007d96:	089b      	lsrs	r3, r3, #2
 8007d98:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007d9a:	8afa      	ldrh	r2, [r7, #22]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d91c      	bls.n	8007de0 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	699b      	ldr	r3, [r3, #24]
 8007daa:	f043 0220 	orr.w	r2, r3, #32
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	619a      	str	r2, [r3, #24]
          }
          break;
 8007db2:	e015      	b.n	8007de0 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	691b      	ldr	r3, [r3, #16]
 8007db8:	3303      	adds	r3, #3
 8007dba:	089b      	lsrs	r3, r3, #2
 8007dbc:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007dbe:	8afa      	ldrh	r2, [r7, #22]
 8007dc0:	6a3b      	ldr	r3, [r7, #32]
 8007dc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007dc6:	691b      	ldr	r3, [r3, #16]
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d90a      	bls.n	8007de4 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	699b      	ldr	r3, [r3, #24]
 8007dd2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	619a      	str	r2, [r3, #24]
          }
          break;
 8007dda:	e003      	b.n	8007de4 <USB_HC_StartXfer+0x258>

        default:
          break;
 8007ddc:	bf00      	nop
 8007dde:	e002      	b.n	8007de6 <USB_HC_StartXfer+0x25a>
          break;
 8007de0:	bf00      	nop
 8007de2:	e000      	b.n	8007de6 <USB_HC_StartXfer+0x25a>
          break;
 8007de4:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	68d9      	ldr	r1, [r3, #12]
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	785a      	ldrb	r2, [r3, #1]
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	691b      	ldr	r3, [r3, #16]
 8007df2:	b298      	uxth	r0, r3
 8007df4:	2300      	movs	r3, #0
 8007df6:	9300      	str	r3, [sp, #0]
 8007df8:	4603      	mov	r3, r0
 8007dfa:	68f8      	ldr	r0, [r7, #12]
 8007dfc:	f7ff fc88 	bl	8007710 <USB_WritePacket>
    }
  }

  return HAL_OK;
 8007e00:	2300      	movs	r3, #0
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3728      	adds	r7, #40	; 0x28
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	bf00      	nop
 8007e0c:	1ff80000 	.word	0x1ff80000
 8007e10:	20000030 	.word	0x20000030

08007e14 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b085      	sub	sp, #20
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e26:	695b      	ldr	r3, [r3, #20]
 8007e28:	b29b      	uxth	r3, r3
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3714      	adds	r7, #20
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr

08007e36 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007e36:	b480      	push	{r7}
 8007e38:	b087      	sub	sp, #28
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
 8007e3e:	460b      	mov	r3, r1
 8007e40:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8007e46:	78fb      	ldrb	r3, [r7, #3]
 8007e48:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	015a      	lsls	r2, r3, #5
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	4413      	add	r3, r2
 8007e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	0c9b      	lsrs	r3, r3, #18
 8007e5e:	f003 0303 	and.w	r3, r3, #3
 8007e62:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d002      	beq.n	8007e70 <USB_HC_Halt+0x3a>
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	2b02      	cmp	r3, #2
 8007e6e:	d16c      	bne.n	8007f4a <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	015a      	lsls	r2, r3, #5
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	4413      	add	r3, r2
 8007e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	68fa      	ldr	r2, [r7, #12]
 8007e80:	0151      	lsls	r1, r2, #5
 8007e82:	693a      	ldr	r2, [r7, #16]
 8007e84:	440a      	add	r2, r1
 8007e86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e8e:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e94:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d143      	bne.n	8007f24 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	015a      	lsls	r2, r3, #5
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	4413      	add	r3, r2
 8007ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	68fa      	ldr	r2, [r7, #12]
 8007eac:	0151      	lsls	r1, r2, #5
 8007eae:	693a      	ldr	r2, [r7, #16]
 8007eb0:	440a      	add	r2, r1
 8007eb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007eb6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007eba:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	015a      	lsls	r2, r3, #5
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	4413      	add	r3, r2
 8007ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	68fa      	ldr	r2, [r7, #12]
 8007ecc:	0151      	lsls	r1, r2, #5
 8007ece:	693a      	ldr	r2, [r7, #16]
 8007ed0:	440a      	add	r2, r1
 8007ed2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ed6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007eda:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	015a      	lsls	r2, r3, #5
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	4413      	add	r3, r2
 8007ee4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	68fa      	ldr	r2, [r7, #12]
 8007eec:	0151      	lsls	r1, r2, #5
 8007eee:	693a      	ldr	r2, [r7, #16]
 8007ef0:	440a      	add	r2, r1
 8007ef2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ef6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007efa:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	3301      	adds	r3, #1
 8007f00:	617b      	str	r3, [r7, #20]
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f08:	d81d      	bhi.n	8007f46 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	015a      	lsls	r2, r3, #5
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	4413      	add	r3, r2
 8007f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f20:	d0ec      	beq.n	8007efc <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007f22:	e080      	b.n	8008026 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	015a      	lsls	r2, r3, #5
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	4413      	add	r3, r2
 8007f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	68fa      	ldr	r2, [r7, #12]
 8007f34:	0151      	lsls	r1, r2, #5
 8007f36:	693a      	ldr	r2, [r7, #16]
 8007f38:	440a      	add	r2, r1
 8007f3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f42:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007f44:	e06f      	b.n	8008026 <USB_HC_Halt+0x1f0>
          break;
 8007f46:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007f48:	e06d      	b.n	8008026 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	015a      	lsls	r2, r3, #5
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	4413      	add	r3, r2
 8007f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	68fa      	ldr	r2, [r7, #12]
 8007f5a:	0151      	lsls	r1, r2, #5
 8007f5c:	693a      	ldr	r2, [r7, #16]
 8007f5e:	440a      	add	r2, r1
 8007f60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f68:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f70:	691b      	ldr	r3, [r3, #16]
 8007f72:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d143      	bne.n	8008002 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	015a      	lsls	r2, r3, #5
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	4413      	add	r3, r2
 8007f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	68fa      	ldr	r2, [r7, #12]
 8007f8a:	0151      	lsls	r1, r2, #5
 8007f8c:	693a      	ldr	r2, [r7, #16]
 8007f8e:	440a      	add	r2, r1
 8007f90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007f94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f98:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	015a      	lsls	r2, r3, #5
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	4413      	add	r3, r2
 8007fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	68fa      	ldr	r2, [r7, #12]
 8007faa:	0151      	lsls	r1, r2, #5
 8007fac:	693a      	ldr	r2, [r7, #16]
 8007fae:	440a      	add	r2, r1
 8007fb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007fb4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007fb8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	015a      	lsls	r2, r3, #5
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	4413      	add	r3, r2
 8007fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	68fa      	ldr	r2, [r7, #12]
 8007fca:	0151      	lsls	r1, r2, #5
 8007fcc:	693a      	ldr	r2, [r7, #16]
 8007fce:	440a      	add	r2, r1
 8007fd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007fd4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007fd8:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	3301      	adds	r3, #1
 8007fde:	617b      	str	r3, [r7, #20]
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007fe6:	d81d      	bhi.n	8008024 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	015a      	lsls	r2, r3, #5
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	4413      	add	r3, r2
 8007ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ffa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ffe:	d0ec      	beq.n	8007fda <USB_HC_Halt+0x1a4>
 8008000:	e011      	b.n	8008026 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	015a      	lsls	r2, r3, #5
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	4413      	add	r3, r2
 800800a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	68fa      	ldr	r2, [r7, #12]
 8008012:	0151      	lsls	r1, r2, #5
 8008014:	693a      	ldr	r2, [r7, #16]
 8008016:	440a      	add	r2, r1
 8008018:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800801c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008020:	6013      	str	r3, [r2, #0]
 8008022:	e000      	b.n	8008026 <USB_HC_Halt+0x1f0>
          break;
 8008024:	bf00      	nop
    }
  }

  return HAL_OK;
 8008026:	2300      	movs	r3, #0
}
 8008028:	4618      	mov	r0, r3
 800802a:	371c      	adds	r7, #28
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr

08008034 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008034:	b480      	push	{r7}
 8008036:	b087      	sub	sp, #28
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	460b      	mov	r3, r1
 800803e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008044:	78fb      	ldrb	r3, [r7, #3]
 8008046:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008048:	2301      	movs	r3, #1
 800804a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	04da      	lsls	r2, r3, #19
 8008050:	4b15      	ldr	r3, [pc, #84]	; (80080a8 <USB_DoPing+0x74>)
 8008052:	4013      	ands	r3, r2
 8008054:	693a      	ldr	r2, [r7, #16]
 8008056:	0151      	lsls	r1, r2, #5
 8008058:	697a      	ldr	r2, [r7, #20]
 800805a:	440a      	add	r2, r1
 800805c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008060:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008064:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	015a      	lsls	r2, r3, #5
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	4413      	add	r3, r2
 800806e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800807c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008084:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	015a      	lsls	r2, r3, #5
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	4413      	add	r3, r2
 800808e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008092:	461a      	mov	r2, r3
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008098:	2300      	movs	r3, #0
}
 800809a:	4618      	mov	r0, r3
 800809c:	371c      	adds	r7, #28
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr
 80080a6:	bf00      	nop
 80080a8:	1ff80000 	.word	0x1ff80000

080080ac <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b086      	sub	sp, #24
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80080b8:	2300      	movs	r3, #0
 80080ba:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f7ff face 	bl	800765e <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80080c2:	2110      	movs	r1, #16
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f7ff fadb 	bl	8007680 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f7ff fafe 	bl	80076cc <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80080d0:	2300      	movs	r3, #0
 80080d2:	613b      	str	r3, [r7, #16]
 80080d4:	e01f      	b.n	8008116 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	015a      	lsls	r2, r3, #5
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	4413      	add	r3, r2
 80080de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80080ec:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80080f4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80080fc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	015a      	lsls	r2, r3, #5
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	4413      	add	r3, r2
 8008106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800810a:	461a      	mov	r2, r3
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	3301      	adds	r3, #1
 8008114:	613b      	str	r3, [r7, #16]
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	2b0f      	cmp	r3, #15
 800811a:	d9dc      	bls.n	80080d6 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800811c:	2300      	movs	r3, #0
 800811e:	613b      	str	r3, [r7, #16]
 8008120:	e034      	b.n	800818c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	015a      	lsls	r2, r3, #5
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	4413      	add	r3, r2
 800812a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008138:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008140:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008148:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	015a      	lsls	r2, r3, #5
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	4413      	add	r3, r2
 8008152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008156:	461a      	mov	r2, r3
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	3301      	adds	r3, #1
 8008160:	617b      	str	r3, [r7, #20]
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008168:	d80c      	bhi.n	8008184 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	015a      	lsls	r2, r3, #5
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	4413      	add	r3, r2
 8008172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800817c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008180:	d0ec      	beq.n	800815c <USB_StopHost+0xb0>
 8008182:	e000      	b.n	8008186 <USB_StopHost+0xda>
        break;
 8008184:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	3301      	adds	r3, #1
 800818a:	613b      	str	r3, [r7, #16]
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	2b0f      	cmp	r3, #15
 8008190:	d9c7      	bls.n	8008122 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008198:	461a      	mov	r2, r3
 800819a:	f04f 33ff 	mov.w	r3, #4294967295
 800819e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f04f 32ff 	mov.w	r2, #4294967295
 80081a6:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f7ff fa47 	bl	800763c <USB_EnableGlobalInt>

  return HAL_OK;
 80081ae:	2300      	movs	r3, #0
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3718      	adds	r7, #24
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b085      	sub	sp, #20
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80081c0:	2300      	movs	r3, #0
 80081c2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80081c4:	e008      	b.n	80081d8 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	68fa      	ldr	r2, [r7, #12]
 80081ca:	32e0      	adds	r2, #224	; 0xe0
 80081cc:	2100      	movs	r1, #0
 80081ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	3301      	adds	r3, #1
 80081d6:	60fb      	str	r3, [r7, #12]
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2b0e      	cmp	r3, #14
 80081dc:	d9f3      	bls.n	80081c6 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 80081de:	2300      	movs	r3, #0
 80081e0:	60fb      	str	r3, [r7, #12]
 80081e2:	e009      	b.n	80081f8 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 80081e4:	687a      	ldr	r2, [r7, #4]
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	4413      	add	r3, r2
 80081ea:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80081ee:	2200      	movs	r2, #0
 80081f0:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	3301      	adds	r3, #1
 80081f6:	60fb      	str	r3, [r7, #12]
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081fe:	d3f1      	bcc.n	80081e4 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2200      	movs	r2, #0
 8008204:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2200      	movs	r2, #0
 800820a:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2201      	movs	r2, #1
 8008210:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2200      	movs	r2, #0
 8008216:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2201      	movs	r2, #1
 800821e:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2240      	movs	r2, #64	; 0x40
 8008224:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2200      	movs	r2, #0
 800822a:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2201      	movs	r2, #1
 8008238:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 800823c:	2300      	movs	r3, #0
}
 800823e:	4618      	mov	r0, r3
 8008240:	3714      	adds	r7, #20
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr
	...

0800824c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b088      	sub	sp, #32
 8008250:	af04      	add	r7, sp, #16
 8008252:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008254:	2302      	movs	r3, #2
 8008256:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008258:	2300      	movs	r3, #0
 800825a:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 fadd 	bl	800881c <USBH_IsPortEnabled>
 8008262:	4603      	mov	r3, r0
 8008264:	2b00      	cmp	r3, #0
 8008266:	d10c      	bne.n	8008282 <USBH_Process+0x36>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	b2db      	uxtb	r3, r3
 800826e:	2b00      	cmp	r3, #0
 8008270:	d007      	beq.n	8008282 <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	b2db      	uxtb	r3, r3
 8008278:	2b03      	cmp	r3, #3
 800827a:	d002      	beq.n	8008282 <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2203      	movs	r2, #3
 8008280:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	b2db      	uxtb	r3, r3
 8008288:	2b0b      	cmp	r3, #11
 800828a:	f200 814c 	bhi.w	8008526 <USBH_Process+0x2da>
 800828e:	a201      	add	r2, pc, #4	; (adr r2, 8008294 <USBH_Process+0x48>)
 8008290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008294:	080082c5 	.word	0x080082c5
 8008298:	080082e7 	.word	0x080082e7
 800829c:	080082fb 	.word	0x080082fb
 80082a0:	08008501 	.word	0x08008501
 80082a4:	08008527 	.word	0x08008527
 80082a8:	08008389 	.word	0x08008389
 80082ac:	080084b7 	.word	0x080084b7
 80082b0:	080083b9 	.word	0x080083b9
 80082b4:	080083d9 	.word	0x080083d9
 80082b8:	080083f9 	.word	0x080083f9
 80082bc:	08008427 	.word	0x08008427
 80082c0:	080084e9 	.word	0x080084e9
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	f000 812c 	beq.w	800852a <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2201      	movs	r2, #1
 80082d6:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 80082d8:	20c8      	movs	r0, #200	; 0xc8
 80082da:	f003 fb8c 	bl	800b9f6 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f003 fafb 	bl	800b8da <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80082e4:	e121      	b.n	800852a <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	f040 811e 	bne.w	800852e <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2202      	movs	r2, #2
 80082f6:	701a      	strb	r2, [r3, #0]
    }
    break;
 80082f8:	e119      	b.n	800852e <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 80082fa:	2064      	movs	r0, #100	; 0x64
 80082fc:	f003 fb7b 	bl	800b9f6 <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f003 fac5 	bl	800b890 <USBH_LL_GetSpeed>
 8008306:	4603      	mov	r3, r0
 8008308:	461a      	mov	r2, r3
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2205      	movs	r2, #5
 8008314:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8008316:	2100      	movs	r1, #0
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f000 ffe3 	bl	80092e4 <USBH_AllocPipe>
 800831e:	4603      	mov	r3, r0
 8008320:	461a      	mov	r2, r3
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8008326:	2180      	movs	r1, #128	; 0x80
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 ffdb 	bl	80092e4 <USBH_AllocPipe>
 800832e:	4603      	mov	r3, r0
 8008330:	461a      	mov	r2, r3
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	7919      	ldrb	r1, [r3, #4]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800834a:	b292      	uxth	r2, r2
 800834c:	9202      	str	r2, [sp, #8]
 800834e:	2200      	movs	r2, #0
 8008350:	9201      	str	r2, [sp, #4]
 8008352:	9300      	str	r3, [sp, #0]
 8008354:	4603      	mov	r3, r0
 8008356:	2280      	movs	r2, #128	; 0x80
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f000 ffa4 	bl	80092a6 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	7959      	ldrb	r1, [r3, #5]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8008372:	b292      	uxth	r2, r2
 8008374:	9202      	str	r2, [sp, #8]
 8008376:	2200      	movs	r2, #0
 8008378:	9201      	str	r2, [sp, #4]
 800837a:	9300      	str	r3, [sp, #0]
 800837c:	4603      	mov	r3, r0
 800837e:	2200      	movs	r2, #0
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f000 ff90 	bl	80092a6 <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8008386:	e0e3      	b.n	8008550 <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 f8e7 	bl	800855c <USBH_HandleEnum>
 800838e:	4603      	mov	r3, r0
 8008390:	2b00      	cmp	r3, #0
 8008392:	f040 80ce 	bne.w	8008532 <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2200      	movs	r2, #0
 800839a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d103      	bne.n	80083b0 <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2208      	movs	r2, #8
 80083ac:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 80083ae:	e0c0      	b.n	8008532 <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2207      	movs	r2, #7
 80083b4:	701a      	strb	r2, [r3, #0]
    break;
 80083b6:	e0bc      	b.n	8008532 <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80083be:	2b00      	cmp	r3, #0
 80083c0:	f000 80b9 	beq.w	8008536 <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80083ca:	2101      	movs	r1, #1
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2208      	movs	r2, #8
 80083d4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80083d6:	e0ae      	b.n	8008536 <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 80083de:	b29b      	uxth	r3, r3
 80083e0:	4619      	mov	r1, r3
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 fb4a 	bl	8008a7c <USBH_SetCfg>
 80083e8:	4603      	mov	r3, r0
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	f040 80a5 	bne.w	800853a <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2209      	movs	r2, #9
 80083f4:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80083f6:	e0a0      	b.n	800853a <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 80083fe:	f003 0320 	and.w	r3, r3, #32
 8008402:	2b00      	cmp	r3, #0
 8008404:	d00b      	beq.n	800841e <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8008406:	2101      	movs	r1, #1
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 fb5a 	bl	8008ac2 <USBH_SetFeature>
 800840e:	4603      	mov	r3, r0
 8008410:	2b00      	cmp	r3, #0
 8008412:	f040 8094 	bne.w	800853e <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	220a      	movs	r2, #10
 800841a:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800841c:	e08f      	b.n	800853e <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	220a      	movs	r2, #10
 8008422:	701a      	strb	r2, [r3, #0]
    break;
 8008424:	e08b      	b.n	800853e <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800842c:	2b00      	cmp	r3, #0
 800842e:	f000 8088 	beq.w	8008542 <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2200      	movs	r2, #0
 8008436:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800843a:	2300      	movs	r3, #0
 800843c:	73fb      	strb	r3, [r7, #15]
 800843e:	e017      	b.n	8008470 <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008440:	7bfb      	ldrb	r3, [r7, #15]
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	33dc      	adds	r3, #220	; 0xdc
 8008446:	009b      	lsls	r3, r3, #2
 8008448:	4413      	add	r3, r2
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	791a      	ldrb	r2, [r3, #4]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 8008454:	429a      	cmp	r2, r3
 8008456:	d108      	bne.n	800846a <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 8008458:	7bfb      	ldrb	r3, [r7, #15]
 800845a:	687a      	ldr	r2, [r7, #4]
 800845c:	33dc      	adds	r3, #220	; 0xdc
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	4413      	add	r3, r2
 8008462:	685a      	ldr	r2, [r3, #4]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800846a:	7bfb      	ldrb	r3, [r7, #15]
 800846c:	3301      	adds	r3, #1
 800846e:	73fb      	strb	r3, [r7, #15]
 8008470:	7bfb      	ldrb	r3, [r7, #15]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d0e4      	beq.n	8008440 <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800847c:	2b00      	cmp	r3, #0
 800847e:	d016      	beq.n	80084ae <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008486:	689b      	ldr	r3, [r3, #8]
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	4798      	blx	r3
 800848c:	4603      	mov	r3, r0
 800848e:	2b00      	cmp	r3, #0
 8008490:	d109      	bne.n	80084a6 <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2206      	movs	r2, #6
 8008496:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800849e:	2103      	movs	r1, #3
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80084a4:	e04d      	b.n	8008542 <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	220d      	movs	r2, #13
 80084aa:	701a      	strb	r2, [r3, #0]
    break;
 80084ac:	e049      	b.n	8008542 <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	220d      	movs	r2, #13
 80084b2:	701a      	strb	r2, [r3, #0]
    break;
 80084b4:	e045      	b.n	8008542 <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d00f      	beq.n	80084e0 <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80084c6:	691b      	ldr	r3, [r3, #16]
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	4798      	blx	r3
 80084cc:	4603      	mov	r3, r0
 80084ce:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 80084d0:	7bbb      	ldrb	r3, [r7, #14]
 80084d2:	b2db      	uxtb	r3, r3
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d136      	bne.n	8008546 <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	220b      	movs	r2, #11
 80084dc:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 80084de:	e032      	b.n	8008546 <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	220d      	movs	r2, #13
 80084e4:	701a      	strb	r2, [r3, #0]
    break;
 80084e6:	e02e      	b.n	8008546 <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d02b      	beq.n	800854a <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80084f8:	695b      	ldr	r3, [r3, #20]
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	4798      	blx	r3
    }
    break;
 80084fe:	e024      	b.n	800854a <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f7ff fe59 	bl	80081b8 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800850c:	2b00      	cmp	r3, #0
 800850e:	d01e      	beq.n	800854e <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8008516:	68db      	ldr	r3, [r3, #12]
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	4798      	blx	r3
      phost->pActiveClass = NULL;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2200      	movs	r2, #0
 8008520:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 8008524:	e013      	b.n	800854e <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 8008526:	bf00      	nop
 8008528:	e012      	b.n	8008550 <USBH_Process+0x304>
    break;
 800852a:	bf00      	nop
 800852c:	e010      	b.n	8008550 <USBH_Process+0x304>
    break;
 800852e:	bf00      	nop
 8008530:	e00e      	b.n	8008550 <USBH_Process+0x304>
    break;
 8008532:	bf00      	nop
 8008534:	e00c      	b.n	8008550 <USBH_Process+0x304>
    break;
 8008536:	bf00      	nop
 8008538:	e00a      	b.n	8008550 <USBH_Process+0x304>
    break;
 800853a:	bf00      	nop
 800853c:	e008      	b.n	8008550 <USBH_Process+0x304>
    break;
 800853e:	bf00      	nop
 8008540:	e006      	b.n	8008550 <USBH_Process+0x304>
    break;
 8008542:	bf00      	nop
 8008544:	e004      	b.n	8008550 <USBH_Process+0x304>
    break;
 8008546:	bf00      	nop
 8008548:	e002      	b.n	8008550 <USBH_Process+0x304>
    break;
 800854a:	bf00      	nop
 800854c:	e000      	b.n	8008550 <USBH_Process+0x304>
    break;
 800854e:	bf00      	nop
  }
 return USBH_OK;
 8008550:	2300      	movs	r3, #0
}
 8008552:	4618      	mov	r0, r3
 8008554:	3710      	adds	r7, #16
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
 800855a:	bf00      	nop

0800855c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b088      	sub	sp, #32
 8008560:	af04      	add	r7, sp, #16
 8008562:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008564:	2301      	movs	r3, #1
 8008566:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	785b      	ldrb	r3, [r3, #1]
 800856c:	2b07      	cmp	r3, #7
 800856e:	f200 80f8 	bhi.w	8008762 <USBH_HandleEnum+0x206>
 8008572:	a201      	add	r2, pc, #4	; (adr r2, 8008578 <USBH_HandleEnum+0x1c>)
 8008574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008578:	08008599 	.word	0x08008599
 800857c:	0800860b 	.word	0x0800860b
 8008580:	08008623 	.word	0x08008623
 8008584:	08008699 	.word	0x08008699
 8008588:	080086af 	.word	0x080086af
 800858c:	080086cb 	.word	0x080086cb
 8008590:	080086ff 	.word	0x080086ff
 8008594:	08008733 	.word	0x08008733
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8008598:	2108      	movs	r1, #8
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f000 f99e 	bl	80088dc <USBH_Get_DevDesc>
 80085a0:	4603      	mov	r3, r0
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	f040 80df 	bne.w	8008766 <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2201      	movs	r2, #1
 80085b6:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	7919      	ldrb	r1, [r3, #4]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80085c8:	687a      	ldr	r2, [r7, #4]
 80085ca:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80085cc:	b292      	uxth	r2, r2
 80085ce:	9202      	str	r2, [sp, #8]
 80085d0:	2200      	movs	r2, #0
 80085d2:	9201      	str	r2, [sp, #4]
 80085d4:	9300      	str	r3, [sp, #0]
 80085d6:	4603      	mov	r3, r0
 80085d8:	2280      	movs	r2, #128	; 0x80
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 fe63 	bl	80092a6 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	7959      	ldrb	r1, [r3, #5]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80085f0:	687a      	ldr	r2, [r7, #4]
 80085f2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80085f4:	b292      	uxth	r2, r2
 80085f6:	9202      	str	r2, [sp, #8]
 80085f8:	2200      	movs	r2, #0
 80085fa:	9201      	str	r2, [sp, #4]
 80085fc:	9300      	str	r3, [sp, #0]
 80085fe:	4603      	mov	r3, r0
 8008600:	2200      	movs	r2, #0
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 fe4f 	bl	80092a6 <USBH_OpenPipe>

    }
    break;
 8008608:	e0ad      	b.n	8008766 <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 800860a:	2112      	movs	r1, #18
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 f965 	bl	80088dc <USBH_Get_DevDesc>
 8008612:	4603      	mov	r3, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	f040 80a8 	bne.w	800876a <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2202      	movs	r2, #2
 800861e:	705a      	strb	r2, [r3, #1]

    }
    break;
 8008620:	e0a3      	b.n	800876a <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8008622:	2101      	movs	r1, #1
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 fa05 	bl	8008a34 <USBH_SetAddress>
 800862a:	4603      	mov	r3, r0
 800862c:	2b00      	cmp	r3, #0
 800862e:	f040 809e 	bne.w	800876e <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 8008632:	2002      	movs	r0, #2
 8008634:	f003 f9df 	bl	800b9f6 <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2201      	movs	r2, #1
 800863c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2203      	movs	r2, #3
 8008644:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	7919      	ldrb	r1, [r3, #4]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800865a:	b292      	uxth	r2, r2
 800865c:	9202      	str	r2, [sp, #8]
 800865e:	2200      	movs	r2, #0
 8008660:	9201      	str	r2, [sp, #4]
 8008662:	9300      	str	r3, [sp, #0]
 8008664:	4603      	mov	r3, r0
 8008666:	2280      	movs	r2, #128	; 0x80
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f000 fe1c 	bl	80092a6 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	7959      	ldrb	r1, [r3, #5]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800867e:	687a      	ldr	r2, [r7, #4]
 8008680:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8008682:	b292      	uxth	r2, r2
 8008684:	9202      	str	r2, [sp, #8]
 8008686:	2200      	movs	r2, #0
 8008688:	9201      	str	r2, [sp, #4]
 800868a:	9300      	str	r3, [sp, #0]
 800868c:	4603      	mov	r3, r0
 800868e:	2200      	movs	r2, #0
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 fe08 	bl	80092a6 <USBH_OpenPipe>
    }
    break;
 8008696:	e06a      	b.n	800876e <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 8008698:	2109      	movs	r1, #9
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 f946 	bl	800892c <USBH_Get_CfgDesc>
 80086a0:	4603      	mov	r3, r0
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d165      	bne.n	8008772 <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2204      	movs	r2, #4
 80086aa:	705a      	strb	r2, [r3, #1]
    }
    break;
 80086ac:	e061      	b.n	8008772 <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 80086b4:	4619      	mov	r1, r3
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 f938 	bl	800892c <USBH_Get_CfgDesc>
 80086bc:	4603      	mov	r3, r0
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d159      	bne.n	8008776 <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2205      	movs	r2, #5
 80086c6:	705a      	strb	r2, [r3, #1]
    }
    break;
 80086c8:	e055      	b.n	8008776 <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d010      	beq.n	80086f6 <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80086e0:	23ff      	movs	r3, #255	; 0xff
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 f946 	bl	8008974 <USBH_Get_StringDesc>
 80086e8:	4603      	mov	r3, r0
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d145      	bne.n	800877a <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2206      	movs	r2, #6
 80086f2:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80086f4:	e041      	b.n	800877a <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2206      	movs	r2, #6
 80086fa:	705a      	strb	r2, [r3, #1]
    break;
 80086fc:	e03d      	b.n	800877a <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8008704:	2b00      	cmp	r3, #0
 8008706:	d010      	beq.n	800872a <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8008714:	23ff      	movs	r3, #255	; 0xff
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 f92c 	bl	8008974 <USBH_Get_StringDesc>
 800871c:	4603      	mov	r3, r0
 800871e:	2b00      	cmp	r3, #0
 8008720:	d12d      	bne.n	800877e <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2207      	movs	r2, #7
 8008726:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8008728:	e029      	b.n	800877e <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2207      	movs	r2, #7
 800872e:	705a      	strb	r2, [r3, #1]
    break;
 8008730:	e025      	b.n	800877e <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8008738:	2b00      	cmp	r3, #0
 800873a:	d00f      	beq.n	800875c <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8008748:	23ff      	movs	r3, #255	; 0xff
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 f912 	bl	8008974 <USBH_Get_StringDesc>
 8008750:	4603      	mov	r3, r0
 8008752:	2b00      	cmp	r3, #0
 8008754:	d115      	bne.n	8008782 <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 8008756:	2300      	movs	r3, #0
 8008758:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800875a:	e012      	b.n	8008782 <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 800875c:	2300      	movs	r3, #0
 800875e:	73fb      	strb	r3, [r7, #15]
    break;
 8008760:	e00f      	b.n	8008782 <USBH_HandleEnum+0x226>

  default:
    break;
 8008762:	bf00      	nop
 8008764:	e00e      	b.n	8008784 <USBH_HandleEnum+0x228>
    break;
 8008766:	bf00      	nop
 8008768:	e00c      	b.n	8008784 <USBH_HandleEnum+0x228>
    break;
 800876a:	bf00      	nop
 800876c:	e00a      	b.n	8008784 <USBH_HandleEnum+0x228>
    break;
 800876e:	bf00      	nop
 8008770:	e008      	b.n	8008784 <USBH_HandleEnum+0x228>
    break;
 8008772:	bf00      	nop
 8008774:	e006      	b.n	8008784 <USBH_HandleEnum+0x228>
    break;
 8008776:	bf00      	nop
 8008778:	e004      	b.n	8008784 <USBH_HandleEnum+0x228>
    break;
 800877a:	bf00      	nop
 800877c:	e002      	b.n	8008784 <USBH_HandleEnum+0x228>
    break;
 800877e:	bf00      	nop
 8008780:	e000      	b.n	8008784 <USBH_HandleEnum+0x228>
    break;
 8008782:	bf00      	nop
  }
  return Status;
 8008784:	7bfb      	ldrb	r3, [r7, #15]
}
 8008786:	4618      	mov	r0, r3
 8008788:	3710      	adds	r7, #16
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
 800878e:	bf00      	nop

08008790 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b082      	sub	sp, #8
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800879e:	1c5a      	adds	r2, r3, #1
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 f804 	bl	80087b4 <USBH_HandleSof>
}
 80087ac:	bf00      	nop
 80087ae:	3708      	adds	r7, #8
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b082      	sub	sp, #8
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	781b      	ldrb	r3, [r3, #0]
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	2b0b      	cmp	r3, #11
 80087c4:	d10a      	bne.n	80087dc <USBH_HandleSof+0x28>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d005      	beq.n	80087dc <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80087d6:	699b      	ldr	r3, [r3, #24]
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	4798      	blx	r3
  }
}
 80087dc:	bf00      	nop
 80087de:	3708      	adds	r7, #8
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b083      	sub	sp, #12
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2201      	movs	r2, #1
 80087f0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 80087f4:	bf00      	nop
}
 80087f6:	370c      	adds	r7, #12
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 8008800:	b480      	push	{r7}
 8008802:	b083      	sub	sp, #12
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2200      	movs	r2, #0
 800880c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8008810:	bf00      	nop
}
 8008812:	370c      	adds	r7, #12
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr

0800881c <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 800881c:	b480      	push	{r7}
 800881e:	b083      	sub	sp, #12
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 800882a:	4618      	mov	r0, r3
 800882c:	370c      	adds	r7, #12
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr

08008836 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8008836:	b580      	push	{r7, lr}
 8008838:	b082      	sub	sp, #8
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	781b      	ldrb	r3, [r3, #0]
 8008842:	b2db      	uxtb	r3, r3
 8008844:	2b00      	cmp	r3, #0
 8008846:	d10f      	bne.n	8008868 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2201      	movs	r2, #1
 800884c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008856:	2b00      	cmp	r3, #0
 8008858:	d00e      	beq.n	8008878 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008860:	2104      	movs	r1, #4
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	4798      	blx	r3
 8008866:	e007      	b.n	8008878 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800886e:	2b01      	cmp	r3, #1
 8008870:	d102      	bne.n	8008878 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2202      	movs	r2, #2
 8008876:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008878:	2300      	movs	r3, #0
}
 800887a:	4618      	mov	r0, r3
 800887c:	3708      	adds	r7, #8
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}

08008882 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8008882:	b580      	push	{r7, lr}
 8008884:	b082      	sub	sp, #8
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f002 ffe5 	bl	800b85a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	791b      	ldrb	r3, [r3, #4]
 8008894:	4619      	mov	r1, r3
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 fd42 	bl	8009320 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	795b      	ldrb	r3, [r3, #5]
 80088a0:	4619      	mov	r1, r3
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 fd3c 	bl	8009320 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2200      	movs	r2, #0
 80088ac:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d005      	beq.n	80088c6 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80088c0:	2105      	movs	r1, #5
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f002 ffac 	bl	800b824 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2203      	movs	r2, #3
 80088d0:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80088d2:	2300      	movs	r3, #0
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3708      	adds	r7, #8
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b086      	sub	sp, #24
 80088e0:	af02      	add	r7, sp, #8
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	460b      	mov	r3, r1
 80088e6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 80088ee:	78fb      	ldrb	r3, [r7, #3]
 80088f0:	b29b      	uxth	r3, r3
 80088f2:	9300      	str	r3, [sp, #0]
 80088f4:	4613      	mov	r3, r2
 80088f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80088fa:	2100      	movs	r1, #0
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f000 f864 	bl	80089ca <USBH_GetDescriptor>
 8008902:	4603      	mov	r3, r0
 8008904:	73fb      	strb	r3, [r7, #15]
 8008906:	7bfb      	ldrb	r3, [r7, #15]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d10a      	bne.n	8008922 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f203 3022 	addw	r0, r3, #802	; 0x322
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008918:	78fa      	ldrb	r2, [r7, #3]
 800891a:	b292      	uxth	r2, r2
 800891c:	4619      	mov	r1, r3
 800891e:	f000 f8f4 	bl	8008b0a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 8008922:	7bfb      	ldrb	r3, [r7, #15]
}
 8008924:	4618      	mov	r0, r3
 8008926:	3710      	adds	r7, #16
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 800892c:	b580      	push	{r7, lr}
 800892e:	b086      	sub	sp, #24
 8008930:	af02      	add	r7, sp, #8
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	460b      	mov	r3, r1
 8008936:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	331c      	adds	r3, #28
 800893c:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 800893e:	887b      	ldrh	r3, [r7, #2]
 8008940:	9300      	str	r3, [sp, #0]
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008948:	2100      	movs	r1, #0
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 f83d 	bl	80089ca <USBH_GetDescriptor>
 8008950:	4603      	mov	r3, r0
 8008952:	72fb      	strb	r3, [r7, #11]
 8008954:	7afb      	ldrb	r3, [r7, #11]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d107      	bne.n	800896a <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8008960:	887a      	ldrh	r2, [r7, #2]
 8008962:	68f9      	ldr	r1, [r7, #12]
 8008964:	4618      	mov	r0, r3
 8008966:	f000 f940 	bl	8008bea <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 800896a:	7afb      	ldrb	r3, [r7, #11]
}
 800896c:	4618      	mov	r0, r3
 800896e:	3710      	adds	r7, #16
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b088      	sub	sp, #32
 8008978:	af02      	add	r7, sp, #8
 800897a:	60f8      	str	r0, [r7, #12]
 800897c:	607a      	str	r2, [r7, #4]
 800897e:	461a      	mov	r2, r3
 8008980:	460b      	mov	r3, r1
 8008982:	72fb      	strb	r3, [r7, #11]
 8008984:	4613      	mov	r3, r2
 8008986:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 8008988:	7afb      	ldrb	r3, [r7, #11]
 800898a:	b29b      	uxth	r3, r3
 800898c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008990:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8008998:	893b      	ldrh	r3, [r7, #8]
 800899a:	9300      	str	r3, [sp, #0]
 800899c:	460b      	mov	r3, r1
 800899e:	2100      	movs	r1, #0
 80089a0:	68f8      	ldr	r0, [r7, #12]
 80089a2:	f000 f812 	bl	80089ca <USBH_GetDescriptor>
 80089a6:	4603      	mov	r3, r0
 80089a8:	75fb      	strb	r3, [r7, #23]
 80089aa:	7dfb      	ldrb	r3, [r7, #23]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d107      	bne.n	80089c0 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80089b6:	893a      	ldrh	r2, [r7, #8]
 80089b8:	6879      	ldr	r1, [r7, #4]
 80089ba:	4618      	mov	r0, r3
 80089bc:	f000 fa13 	bl	8008de6 <USBH_ParseStringDesc>
  }
  return status;
 80089c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3718      	adds	r7, #24
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}

080089ca <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 80089ca:	b580      	push	{r7, lr}
 80089cc:	b084      	sub	sp, #16
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	60f8      	str	r0, [r7, #12]
 80089d2:	607b      	str	r3, [r7, #4]
 80089d4:	460b      	mov	r3, r1
 80089d6:	72fb      	strb	r3, [r7, #11]
 80089d8:	4613      	mov	r3, r2
 80089da:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	789b      	ldrb	r3, [r3, #2]
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	d11c      	bne.n	8008a1e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80089e4:	7afb      	ldrb	r3, [r7, #11]
 80089e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80089ea:	b2da      	uxtb	r2, r3
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2206      	movs	r2, #6
 80089f4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	893a      	ldrh	r2, [r7, #8]
 80089fa:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80089fc:	893b      	ldrh	r3, [r7, #8]
 80089fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008a02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a06:	d104      	bne.n	8008a12 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f240 4209 	movw	r2, #1033	; 0x409
 8008a0e:	829a      	strh	r2, [r3, #20]
 8008a10:	e002      	b.n	8008a18 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2200      	movs	r2, #0
 8008a16:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	8b3a      	ldrh	r2, [r7, #24]
 8008a1c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 8008a1e:	8b3b      	ldrh	r3, [r7, #24]
 8008a20:	461a      	mov	r2, r3
 8008a22:	6879      	ldr	r1, [r7, #4]
 8008a24:	68f8      	ldr	r0, [r7, #12]
 8008a26:	f000 fa2c 	bl	8008e82 <USBH_CtlReq>
 8008a2a:	4603      	mov	r3, r0
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3710      	adds	r7, #16
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b082      	sub	sp, #8
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	460b      	mov	r3, r1
 8008a3e:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	789b      	ldrb	r3, [r3, #2]
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	d10f      	bne.n	8008a68 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2205      	movs	r2, #5
 8008a52:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008a54:	78fb      	ldrb	r3, [r7, #3]
 8008a56:	b29a      	uxth	r2, r3
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2200      	movs	r2, #0
 8008a66:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8008a68:	2200      	movs	r2, #0
 8008a6a:	2100      	movs	r1, #0
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f000 fa08 	bl	8008e82 <USBH_CtlReq>
 8008a72:	4603      	mov	r3, r0
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3708      	adds	r7, #8
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b082      	sub	sp, #8
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	460b      	mov	r3, r1
 8008a86:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	789b      	ldrb	r3, [r3, #2]
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d10e      	bne.n	8008aae <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2200      	movs	r2, #0
 8008a94:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2209      	movs	r2, #9
 8008a9a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	887a      	ldrh	r2, [r7, #2]
 8008aa0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 8008aae:	2200      	movs	r2, #0
 8008ab0:	2100      	movs	r1, #0
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f000 f9e5 	bl	8008e82 <USBH_CtlReq>
 8008ab8:	4603      	mov	r3, r0
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3708      	adds	r7, #8
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}

08008ac2 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008ac2:	b580      	push	{r7, lr}
 8008ac4:	b082      	sub	sp, #8
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
 8008aca:	460b      	mov	r3, r1
 8008acc:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	789b      	ldrb	r3, [r3, #2]
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d10f      	bne.n	8008af6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2203      	movs	r2, #3
 8008ae0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008ae2:	78fb      	ldrb	r3, [r7, #3]
 8008ae4:	b29a      	uxth	r2, r3
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2200      	movs	r2, #0
 8008aee:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2200      	movs	r2, #0
 8008af4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008af6:	2200      	movs	r2, #0
 8008af8:	2100      	movs	r1, #0
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 f9c1 	bl	8008e82 <USBH_CtlReq>
 8008b00:	4603      	mov	r3, r0
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3708      	adds	r7, #8
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}

08008b0a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 8008b0a:	b480      	push	{r7}
 8008b0c:	b085      	sub	sp, #20
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	60f8      	str	r0, [r7, #12]
 8008b12:	60b9      	str	r1, [r7, #8]
 8008b14:	4613      	mov	r3, r2
 8008b16:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	781a      	ldrb	r2, [r3, #0]
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	785a      	ldrb	r2, [r3, #1]
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	3302      	adds	r3, #2
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	b29a      	uxth	r2, r3
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	3303      	adds	r3, #3
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	021b      	lsls	r3, r3, #8
 8008b3a:	b29b      	uxth	r3, r3
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	b29a      	uxth	r2, r3
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	791a      	ldrb	r2, [r3, #4]
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	795a      	ldrb	r2, [r3, #5]
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	799a      	ldrb	r2, [r3, #6]
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	79da      	ldrb	r2, [r3, #7]
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8008b64:	88fb      	ldrh	r3, [r7, #6]
 8008b66:	2b08      	cmp	r3, #8
 8008b68:	d939      	bls.n	8008bde <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	3308      	adds	r3, #8
 8008b6e:	781b      	ldrb	r3, [r3, #0]
 8008b70:	b29a      	uxth	r2, r3
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	3309      	adds	r3, #9
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	021b      	lsls	r3, r3, #8
 8008b7c:	b29b      	uxth	r3, r3
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	b29a      	uxth	r2, r3
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	330a      	adds	r3, #10
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	b29a      	uxth	r2, r3
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	330b      	adds	r3, #11
 8008b92:	781b      	ldrb	r3, [r3, #0]
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	021b      	lsls	r3, r3, #8
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	b29a      	uxth	r2, r3
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	330c      	adds	r3, #12
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	b29a      	uxth	r2, r3
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	330d      	adds	r3, #13
 8008bae:	781b      	ldrb	r3, [r3, #0]
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	021b      	lsls	r3, r3, #8
 8008bb4:	b29b      	uxth	r3, r3
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	b29a      	uxth	r2, r3
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	7b9a      	ldrb	r2, [r3, #14]
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	7bda      	ldrb	r2, [r3, #15]
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	7c1a      	ldrb	r2, [r3, #16]
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	7c5a      	ldrb	r2, [r3, #17]
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	745a      	strb	r2, [r3, #17]
  }
}
 8008bde:	bf00      	nop
 8008be0:	3714      	adds	r7, #20
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr

08008bea <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 8008bea:	b580      	push	{r7, lr}
 8008bec:	b08a      	sub	sp, #40	; 0x28
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	60f8      	str	r0, [r7, #12]
 8008bf2:	60b9      	str	r1, [r7, #8]
 8008bf4:	4613      	mov	r3, r2
 8008bf6:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8008c02:	2300      	movs	r3, #0
 8008c04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	781a      	ldrb	r2, [r3, #0]
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	785a      	ldrb	r2, [r3, #1]
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	3302      	adds	r3, #2
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	b29a      	uxth	r2, r3
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	3303      	adds	r3, #3
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	021b      	lsls	r3, r3, #8
 8008c2e:	b29b      	uxth	r3, r3
 8008c30:	4313      	orrs	r3, r2
 8008c32:	b29a      	uxth	r2, r3
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	791a      	ldrb	r2, [r3, #4]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	795a      	ldrb	r2, [r3, #5]
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	799a      	ldrb	r2, [r3, #6]
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	79da      	ldrb	r2, [r3, #7]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	7a1a      	ldrb	r2, [r3, #8]
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008c60:	88fb      	ldrh	r3, [r7, #6]
 8008c62:	2b09      	cmp	r3, #9
 8008c64:	d95f      	bls.n	8008d26 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8008c66:	2309      	movs	r3, #9
 8008c68:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008c6e:	e051      	b.n	8008d14 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008c70:	f107 0316 	add.w	r3, r7, #22
 8008c74:	4619      	mov	r1, r3
 8008c76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008c78:	f000 f8e8 	bl	8008e4c <USBH_GetNextDesc>
 8008c7c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8008c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c80:	785b      	ldrb	r3, [r3, #1]
 8008c82:	2b04      	cmp	r3, #4
 8008c84:	d146      	bne.n	8008d14 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8008c86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008c8a:	221a      	movs	r2, #26
 8008c8c:	fb02 f303 	mul.w	r3, r2, r3
 8008c90:	3308      	adds	r3, #8
 8008c92:	68fa      	ldr	r2, [r7, #12]
 8008c94:	4413      	add	r3, r2
 8008c96:	3302      	adds	r3, #2
 8008c98:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 8008c9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008c9c:	69f8      	ldr	r0, [r7, #28]
 8008c9e:	f000 f846 	bl	8008d2e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008cac:	e022      	b.n	8008cf4 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 8008cae:	f107 0316 	add.w	r3, r7, #22
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008cb6:	f000 f8c9 	bl	8008e4c <USBH_GetNextDesc>
 8008cba:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cbe:	785b      	ldrb	r3, [r3, #1]
 8008cc0:	2b05      	cmp	r3, #5
 8008cc2:	d117      	bne.n	8008cf4 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008cc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008cc8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008ccc:	3201      	adds	r2, #1
 8008cce:	00d2      	lsls	r2, r2, #3
 8008cd0:	211a      	movs	r1, #26
 8008cd2:	fb01 f303 	mul.w	r3, r1, r3
 8008cd6:	4413      	add	r3, r2
 8008cd8:	3308      	adds	r3, #8
 8008cda:	68fa      	ldr	r2, [r7, #12]
 8008cdc:	4413      	add	r3, r2
 8008cde:	3304      	adds	r3, #4
 8008ce0:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 8008ce2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008ce4:	69b8      	ldr	r0, [r7, #24]
 8008ce6:	f000 f851 	bl	8008d8c <USBH_ParseEPDesc>
            ep_ix++;
 8008cea:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008cee:	3301      	adds	r3, #1
 8008cf0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008cf4:	69fb      	ldr	r3, [r7, #28]
 8008cf6:	791b      	ldrb	r3, [r3, #4]
 8008cf8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d204      	bcs.n	8008d0a <USBH_ParseCfgDesc+0x120>
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	885a      	ldrh	r2, [r3, #2]
 8008d04:	8afb      	ldrh	r3, [r7, #22]
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d8d1      	bhi.n	8008cae <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008d0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008d0e:	3301      	adds	r3, #1
 8008d10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008d14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	d804      	bhi.n	8008d26 <USBH_ParseCfgDesc+0x13c>
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	885a      	ldrh	r2, [r3, #2]
 8008d20:	8afb      	ldrh	r3, [r7, #22]
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d8a4      	bhi.n	8008c70 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8008d26:	bf00      	nop
 8008d28:	3728      	adds	r7, #40	; 0x28
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 8008d2e:	b480      	push	{r7}
 8008d30:	b083      	sub	sp, #12
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
 8008d36:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	781a      	ldrb	r2, [r3, #0]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	785a      	ldrb	r2, [r3, #1]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	789a      	ldrb	r2, [r3, #2]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	78da      	ldrb	r2, [r3, #3]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	791a      	ldrb	r2, [r3, #4]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	795a      	ldrb	r2, [r3, #5]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	799a      	ldrb	r2, [r3, #6]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	79da      	ldrb	r2, [r3, #7]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	7a1a      	ldrb	r2, [r3, #8]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	721a      	strb	r2, [r3, #8]
}
 8008d80:	bf00      	nop
 8008d82:	370c      	adds	r7, #12
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr

08008d8c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b083      	sub	sp, #12
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	781a      	ldrb	r2, [r3, #0]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	785a      	ldrb	r2, [r3, #1]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	789a      	ldrb	r2, [r3, #2]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	78da      	ldrb	r2, [r3, #3]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	3304      	adds	r3, #4
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	b29a      	uxth	r2, r3
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	3305      	adds	r3, #5
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	021b      	lsls	r3, r3, #8
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	b29a      	uxth	r2, r3
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	799a      	ldrb	r2, [r3, #6]
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	719a      	strb	r2, [r3, #6]
}
 8008dda:	bf00      	nop
 8008ddc:	370c      	adds	r7, #12
 8008dde:	46bd      	mov	sp, r7
 8008de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de4:	4770      	bx	lr

08008de6 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 8008de6:	b480      	push	{r7}
 8008de8:	b087      	sub	sp, #28
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	60f8      	str	r0, [r7, #12]
 8008dee:	60b9      	str	r1, [r7, #8]
 8008df0:	4613      	mov	r3, r2
 8008df2:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	3301      	adds	r3, #1
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	2b03      	cmp	r3, #3
 8008dfc:	d120      	bne.n	8008e40 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	1e9a      	subs	r2, r3, #2
 8008e04:	88fb      	ldrh	r3, [r7, #6]
 8008e06:	4293      	cmp	r3, r2
 8008e08:	bf28      	it	cs
 8008e0a:	4613      	movcs	r3, r2
 8008e0c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	3302      	adds	r3, #2
 8008e12:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008e14:	2300      	movs	r3, #0
 8008e16:	82fb      	strh	r3, [r7, #22]
 8008e18:	e00b      	b.n	8008e32 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008e1a:	8afb      	ldrh	r3, [r7, #22]
 8008e1c:	68fa      	ldr	r2, [r7, #12]
 8008e1e:	4413      	add	r3, r2
 8008e20:	781a      	ldrb	r2, [r3, #0]
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	3301      	adds	r3, #1
 8008e2a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008e2c:	8afb      	ldrh	r3, [r7, #22]
 8008e2e:	3302      	adds	r3, #2
 8008e30:	82fb      	strh	r3, [r7, #22]
 8008e32:	8afa      	ldrh	r2, [r7, #22]
 8008e34:	8abb      	ldrh	r3, [r7, #20]
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d3ef      	bcc.n	8008e1a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	701a      	strb	r2, [r3, #0]
  }
}
 8008e40:	bf00      	nop
 8008e42:	371c      	adds	r7, #28
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr

08008e4c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b085      	sub	sp, #20
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	881a      	ldrh	r2, [r3, #0]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	781b      	ldrb	r3, [r3, #0]
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	4413      	add	r3, r2
 8008e62:	b29a      	uxth	r2, r3
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	781b      	ldrb	r3, [r3, #0]
 8008e6c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	4413      	add	r3, r2
 8008e72:	60fb      	str	r3, [r7, #12]

  return(pnext);
 8008e74:	68fb      	ldr	r3, [r7, #12]
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3714      	adds	r7, #20
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr

08008e82 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8008e82:	b580      	push	{r7, lr}
 8008e84:	b086      	sub	sp, #24
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	60f8      	str	r0, [r7, #12]
 8008e8a:	60b9      	str	r1, [r7, #8]
 8008e8c:	4613      	mov	r3, r2
 8008e8e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008e90:	2301      	movs	r3, #1
 8008e92:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	789b      	ldrb	r3, [r3, #2]
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d002      	beq.n	8008ea2 <USBH_CtlReq+0x20>
 8008e9c:	2b02      	cmp	r3, #2
 8008e9e:	d00f      	beq.n	8008ec0 <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 8008ea0:	e034      	b.n	8008f0c <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	68ba      	ldr	r2, [r7, #8]
 8008ea6:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	88fa      	ldrh	r2, [r7, #6]
 8008eac:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2202      	movs	r2, #2
 8008eb8:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	75fb      	strb	r3, [r7, #23]
    break;
 8008ebe:	e025      	b.n	8008f0c <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 8008ec0:	68f8      	ldr	r0, [r7, #12]
 8008ec2:	f000 f829 	bl	8008f18 <USBH_HandleControl>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8008eca:	7dfb      	ldrb	r3, [r7, #23]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d108      	bne.n	8008ee2 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8008edc:	2300      	movs	r3, #0
 8008ede:	75fb      	strb	r3, [r7, #23]
    break;
 8008ee0:	e013      	b.n	8008f0a <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 8008ee2:	7dfb      	ldrb	r3, [r7, #23]
 8008ee4:	2b03      	cmp	r3, #3
 8008ee6:	d108      	bne.n	8008efa <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	2201      	movs	r2, #1
 8008eec:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8008ef4:	2303      	movs	r3, #3
 8008ef6:	75fb      	strb	r3, [r7, #23]
    break;
 8008ef8:	e007      	b.n	8008f0a <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 8008efa:	7dfb      	ldrb	r3, [r7, #23]
 8008efc:	2b02      	cmp	r3, #2
 8008efe:	d104      	bne.n	8008f0a <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2201      	movs	r2, #1
 8008f04:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8008f06:	2302      	movs	r3, #2
 8008f08:	75fb      	strb	r3, [r7, #23]
    break;
 8008f0a:	bf00      	nop
  }
  return status;
 8008f0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	3718      	adds	r7, #24
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}
	...

08008f18 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b086      	sub	sp, #24
 8008f1c:	af02      	add	r7, sp, #8
 8008f1e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008f20:	2301      	movs	r3, #1
 8008f22:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008f24:	2300      	movs	r3, #0
 8008f26:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	7e1b      	ldrb	r3, [r3, #24]
 8008f2c:	3b01      	subs	r3, #1
 8008f2e:	2b0a      	cmp	r3, #10
 8008f30:	f200 814c 	bhi.w	80091cc <USBH_HandleControl+0x2b4>
 8008f34:	a201      	add	r2, pc, #4	; (adr r2, 8008f3c <USBH_HandleControl+0x24>)
 8008f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f3a:	bf00      	nop
 8008f3c:	08008f69 	.word	0x08008f69
 8008f40:	08008f83 	.word	0x08008f83
 8008f44:	08008fed 	.word	0x08008fed
 8008f48:	08009013 	.word	0x08009013
 8008f4c:	0800904b 	.word	0x0800904b
 8008f50:	08009077 	.word	0x08009077
 8008f54:	080090c9 	.word	0x080090c9
 8008f58:	080090eb 	.word	0x080090eb
 8008f5c:	08009127 	.word	0x08009127
 8008f60:	0800914f 	.word	0x0800914f
 8008f64:	0800918d 	.word	0x0800918d
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f103 0110 	add.w	r1, r3, #16
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	795b      	ldrb	r3, [r3, #5]
 8008f72:	461a      	mov	r2, r3
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f000 f939 	bl	80091ec <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2202      	movs	r2, #2
 8008f7e:	761a      	strb	r2, [r3, #24]
    break;
 8008f80:	e12f      	b.n	80091e2 <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	795b      	ldrb	r3, [r3, #5]
 8008f86:	4619      	mov	r1, r3
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f002 fd21 	bl	800b9d0 <USBH_LL_GetURBState>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8008f92:	7bbb      	ldrb	r3, [r7, #14]
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d11e      	bne.n	8008fd6 <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	7c1b      	ldrb	r3, [r3, #16]
 8008f9c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008fa0:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	8adb      	ldrh	r3, [r3, #22]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d00a      	beq.n	8008fc0 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 8008faa:	7b7b      	ldrb	r3, [r7, #13]
 8008fac:	2b80      	cmp	r3, #128	; 0x80
 8008fae:	d103      	bne.n	8008fb8 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2203      	movs	r2, #3
 8008fb4:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008fb6:	e10b      	b.n	80091d0 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2205      	movs	r2, #5
 8008fbc:	761a      	strb	r2, [r3, #24]
    break;
 8008fbe:	e107      	b.n	80091d0 <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 8008fc0:	7b7b      	ldrb	r3, [r7, #13]
 8008fc2:	2b80      	cmp	r3, #128	; 0x80
 8008fc4:	d103      	bne.n	8008fce <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2209      	movs	r2, #9
 8008fca:	761a      	strb	r2, [r3, #24]
    break;
 8008fcc:	e100      	b.n	80091d0 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2207      	movs	r2, #7
 8008fd2:	761a      	strb	r2, [r3, #24]
    break;
 8008fd4:	e0fc      	b.n	80091d0 <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008fd6:	7bbb      	ldrb	r3, [r7, #14]
 8008fd8:	2b04      	cmp	r3, #4
 8008fda:	d003      	beq.n	8008fe4 <USBH_HandleControl+0xcc>
 8008fdc:	7bbb      	ldrb	r3, [r7, #14]
 8008fde:	2b02      	cmp	r3, #2
 8008fe0:	f040 80f6 	bne.w	80091d0 <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	220b      	movs	r2, #11
 8008fe8:	761a      	strb	r2, [r3, #24]
    break;
 8008fea:	e0f1      	b.n	80091d0 <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8008ff2:	b29a      	uxth	r2, r3
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6899      	ldr	r1, [r3, #8]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	899a      	ldrh	r2, [r3, #12]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	791b      	ldrb	r3, [r3, #4]
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f000 f930 	bl	800926a <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2204      	movs	r2, #4
 800900e:	761a      	strb	r2, [r3, #24]
    break;
 8009010:	e0e7      	b.n	80091e2 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	791b      	ldrb	r3, [r3, #4]
 8009016:	4619      	mov	r1, r3
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f002 fcd9 	bl	800b9d0 <USBH_LL_GetURBState>
 800901e:	4603      	mov	r3, r0
 8009020:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8009022:	7bbb      	ldrb	r3, [r7, #14]
 8009024:	2b01      	cmp	r3, #1
 8009026:	d102      	bne.n	800902e <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2209      	movs	r2, #9
 800902c:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 800902e:	7bbb      	ldrb	r3, [r7, #14]
 8009030:	2b05      	cmp	r3, #5
 8009032:	d102      	bne.n	800903a <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8009034:	2303      	movs	r3, #3
 8009036:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8009038:	e0cc      	b.n	80091d4 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 800903a:	7bbb      	ldrb	r3, [r7, #14]
 800903c:	2b04      	cmp	r3, #4
 800903e:	f040 80c9 	bne.w	80091d4 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	220b      	movs	r2, #11
 8009046:	761a      	strb	r2, [r3, #24]
    break;
 8009048:	e0c4      	b.n	80091d4 <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6899      	ldr	r1, [r3, #8]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	899a      	ldrh	r2, [r3, #12]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	7958      	ldrb	r0, [r3, #5]
 8009056:	2301      	movs	r3, #1
 8009058:	9300      	str	r3, [sp, #0]
 800905a:	4603      	mov	r3, r0
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f000 f8df 	bl	8009220 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8009068:	b29a      	uxth	r2, r3
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2206      	movs	r2, #6
 8009072:	761a      	strb	r2, [r3, #24]
    break;
 8009074:	e0b5      	b.n	80091e2 <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	795b      	ldrb	r3, [r3, #5]
 800907a:	4619      	mov	r1, r3
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f002 fca7 	bl	800b9d0 <USBH_LL_GetURBState>
 8009082:	4603      	mov	r3, r0
 8009084:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8009086:	7bbb      	ldrb	r3, [r7, #14]
 8009088:	2b01      	cmp	r3, #1
 800908a:	d103      	bne.n	8009094 <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2207      	movs	r2, #7
 8009090:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8009092:	e0a1      	b.n	80091d8 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 8009094:	7bbb      	ldrb	r3, [r7, #14]
 8009096:	2b05      	cmp	r3, #5
 8009098:	d105      	bne.n	80090a6 <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	220c      	movs	r2, #12
 800909e:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 80090a0:	2303      	movs	r3, #3
 80090a2:	73fb      	strb	r3, [r7, #15]
    break;
 80090a4:	e098      	b.n	80091d8 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 80090a6:	7bbb      	ldrb	r3, [r7, #14]
 80090a8:	2b02      	cmp	r3, #2
 80090aa:	d103      	bne.n	80090b4 <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2205      	movs	r2, #5
 80090b0:	761a      	strb	r2, [r3, #24]
    break;
 80090b2:	e091      	b.n	80091d8 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 80090b4:	7bbb      	ldrb	r3, [r7, #14]
 80090b6:	2b04      	cmp	r3, #4
 80090b8:	f040 808e 	bne.w	80091d8 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	220b      	movs	r2, #11
 80090c0:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 80090c2:	2302      	movs	r3, #2
 80090c4:	73fb      	strb	r3, [r7, #15]
    break;
 80090c6:	e087      	b.n	80091d8 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	791b      	ldrb	r3, [r3, #4]
 80090cc:	2200      	movs	r2, #0
 80090ce:	2100      	movs	r1, #0
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f000 f8ca 	bl	800926a <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80090dc:	b29a      	uxth	r2, r3
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2208      	movs	r2, #8
 80090e6:	761a      	strb	r2, [r3, #24]

    break;
 80090e8:	e07b      	b.n	80091e2 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	791b      	ldrb	r3, [r3, #4]
 80090ee:	4619      	mov	r1, r3
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f002 fc6d 	bl	800b9d0 <USBH_LL_GetURBState>
 80090f6:	4603      	mov	r3, r0
 80090f8:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 80090fa:	7bbb      	ldrb	r3, [r7, #14]
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d105      	bne.n	800910c <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	220d      	movs	r2, #13
 8009104:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8009106:	2300      	movs	r3, #0
 8009108:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800910a:	e067      	b.n	80091dc <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 800910c:	7bbb      	ldrb	r3, [r7, #14]
 800910e:	2b04      	cmp	r3, #4
 8009110:	d103      	bne.n	800911a <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	220b      	movs	r2, #11
 8009116:	761a      	strb	r2, [r3, #24]
    break;
 8009118:	e060      	b.n	80091dc <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 800911a:	7bbb      	ldrb	r3, [r7, #14]
 800911c:	2b05      	cmp	r3, #5
 800911e:	d15d      	bne.n	80091dc <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 8009120:	2303      	movs	r3, #3
 8009122:	73fb      	strb	r3, [r7, #15]
    break;
 8009124:	e05a      	b.n	80091dc <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	795a      	ldrb	r2, [r3, #5]
 800912a:	2301      	movs	r3, #1
 800912c:	9300      	str	r3, [sp, #0]
 800912e:	4613      	mov	r3, r2
 8009130:	2200      	movs	r2, #0
 8009132:	2100      	movs	r1, #0
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 f873 	bl	8009220 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8009140:	b29a      	uxth	r2, r3
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	220a      	movs	r2, #10
 800914a:	761a      	strb	r2, [r3, #24]
    break;
 800914c:	e049      	b.n	80091e2 <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	795b      	ldrb	r3, [r3, #5]
 8009152:	4619      	mov	r1, r3
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f002 fc3b 	bl	800b9d0 <USBH_LL_GetURBState>
 800915a:	4603      	mov	r3, r0
 800915c:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 800915e:	7bbb      	ldrb	r3, [r7, #14]
 8009160:	2b01      	cmp	r3, #1
 8009162:	d105      	bne.n	8009170 <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 8009164:	2300      	movs	r3, #0
 8009166:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	220d      	movs	r2, #13
 800916c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 800916e:	e037      	b.n	80091e0 <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8009170:	7bbb      	ldrb	r3, [r7, #14]
 8009172:	2b02      	cmp	r3, #2
 8009174:	d103      	bne.n	800917e <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2209      	movs	r2, #9
 800917a:	761a      	strb	r2, [r3, #24]
    break;
 800917c:	e030      	b.n	80091e0 <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 800917e:	7bbb      	ldrb	r3, [r7, #14]
 8009180:	2b04      	cmp	r3, #4
 8009182:	d12d      	bne.n	80091e0 <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	220b      	movs	r2, #11
 8009188:	761a      	strb	r2, [r3, #24]
    break;
 800918a:	e029      	b.n	80091e0 <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	7e5b      	ldrb	r3, [r3, #25]
 8009190:	3301      	adds	r3, #1
 8009192:	b2da      	uxtb	r2, r3
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	765a      	strb	r2, [r3, #25]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	7e5b      	ldrb	r3, [r3, #25]
 800919c:	2b02      	cmp	r3, #2
 800919e:	d809      	bhi.n	80091b4 <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f002 fb5a 	bl	800b85a <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2201      	movs	r2, #1
 80091aa:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2201      	movs	r2, #1
 80091b0:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 80091b2:	e016      	b.n	80091e2 <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80091ba:	2106      	movs	r1, #6
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2200      	movs	r2, #0
 80091c4:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 80091c6:	2302      	movs	r3, #2
 80091c8:	73fb      	strb	r3, [r7, #15]
    break;
 80091ca:	e00a      	b.n	80091e2 <USBH_HandleControl+0x2ca>

  default:
    break;
 80091cc:	bf00      	nop
 80091ce:	e008      	b.n	80091e2 <USBH_HandleControl+0x2ca>
    break;
 80091d0:	bf00      	nop
 80091d2:	e006      	b.n	80091e2 <USBH_HandleControl+0x2ca>
    break;
 80091d4:	bf00      	nop
 80091d6:	e004      	b.n	80091e2 <USBH_HandleControl+0x2ca>
    break;
 80091d8:	bf00      	nop
 80091da:	e002      	b.n	80091e2 <USBH_HandleControl+0x2ca>
    break;
 80091dc:	bf00      	nop
 80091de:	e000      	b.n	80091e2 <USBH_HandleControl+0x2ca>
    break;
 80091e0:	bf00      	nop
  }
  return status;
 80091e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3710      	adds	r7, #16
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b088      	sub	sp, #32
 80091f0:	af04      	add	r7, sp, #16
 80091f2:	60f8      	str	r0, [r7, #12]
 80091f4:	60b9      	str	r1, [r7, #8]
 80091f6:	4613      	mov	r3, r2
 80091f8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80091fa:	79f9      	ldrb	r1, [r7, #7]
 80091fc:	2300      	movs	r3, #0
 80091fe:	9303      	str	r3, [sp, #12]
 8009200:	2308      	movs	r3, #8
 8009202:	9302      	str	r3, [sp, #8]
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	9301      	str	r3, [sp, #4]
 8009208:	2300      	movs	r3, #0
 800920a:	9300      	str	r3, [sp, #0]
 800920c:	2300      	movs	r3, #0
 800920e:	2200      	movs	r2, #0
 8009210:	68f8      	ldr	r0, [r7, #12]
 8009212:	f002 fbac 	bl	800b96e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009216:	2300      	movs	r3, #0
}
 8009218:	4618      	mov	r0, r3
 800921a:	3710      	adds	r7, #16
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b088      	sub	sp, #32
 8009224:	af04      	add	r7, sp, #16
 8009226:	60f8      	str	r0, [r7, #12]
 8009228:	60b9      	str	r1, [r7, #8]
 800922a:	4611      	mov	r1, r2
 800922c:	461a      	mov	r2, r3
 800922e:	460b      	mov	r3, r1
 8009230:	80fb      	strh	r3, [r7, #6]
 8009232:	4613      	mov	r3, r2
 8009234:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800923c:	2b00      	cmp	r3, #0
 800923e:	d001      	beq.n	8009244 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009240:	2300      	movs	r3, #0
 8009242:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8009244:	7979      	ldrb	r1, [r7, #5]
 8009246:	7e3b      	ldrb	r3, [r7, #24]
 8009248:	9303      	str	r3, [sp, #12]
 800924a:	88fb      	ldrh	r3, [r7, #6]
 800924c:	9302      	str	r3, [sp, #8]
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	9301      	str	r3, [sp, #4]
 8009252:	2301      	movs	r3, #1
 8009254:	9300      	str	r3, [sp, #0]
 8009256:	2300      	movs	r3, #0
 8009258:	2200      	movs	r2, #0
 800925a:	68f8      	ldr	r0, [r7, #12]
 800925c:	f002 fb87 	bl	800b96e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009260:	2300      	movs	r3, #0
}
 8009262:	4618      	mov	r0, r3
 8009264:	3710      	adds	r7, #16
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}

0800926a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800926a:	b580      	push	{r7, lr}
 800926c:	b088      	sub	sp, #32
 800926e:	af04      	add	r7, sp, #16
 8009270:	60f8      	str	r0, [r7, #12]
 8009272:	60b9      	str	r1, [r7, #8]
 8009274:	4611      	mov	r1, r2
 8009276:	461a      	mov	r2, r3
 8009278:	460b      	mov	r3, r1
 800927a:	80fb      	strh	r3, [r7, #6]
 800927c:	4613      	mov	r3, r2
 800927e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8009280:	7979      	ldrb	r1, [r7, #5]
 8009282:	2300      	movs	r3, #0
 8009284:	9303      	str	r3, [sp, #12]
 8009286:	88fb      	ldrh	r3, [r7, #6]
 8009288:	9302      	str	r3, [sp, #8]
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	9301      	str	r3, [sp, #4]
 800928e:	2301      	movs	r3, #1
 8009290:	9300      	str	r3, [sp, #0]
 8009292:	2300      	movs	r3, #0
 8009294:	2201      	movs	r2, #1
 8009296:	68f8      	ldr	r0, [r7, #12]
 8009298:	f002 fb69 	bl	800b96e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800929c:	2300      	movs	r3, #0

}
 800929e:	4618      	mov	r0, r3
 80092a0:	3710      	adds	r7, #16
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}

080092a6 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 80092a6:	b580      	push	{r7, lr}
 80092a8:	b086      	sub	sp, #24
 80092aa:	af04      	add	r7, sp, #16
 80092ac:	6078      	str	r0, [r7, #4]
 80092ae:	4608      	mov	r0, r1
 80092b0:	4611      	mov	r1, r2
 80092b2:	461a      	mov	r2, r3
 80092b4:	4603      	mov	r3, r0
 80092b6:	70fb      	strb	r3, [r7, #3]
 80092b8:	460b      	mov	r3, r1
 80092ba:	70bb      	strb	r3, [r7, #2]
 80092bc:	4613      	mov	r3, r2
 80092be:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 80092c0:	7878      	ldrb	r0, [r7, #1]
 80092c2:	78ba      	ldrb	r2, [r7, #2]
 80092c4:	78f9      	ldrb	r1, [r7, #3]
 80092c6:	8b3b      	ldrh	r3, [r7, #24]
 80092c8:	9302      	str	r3, [sp, #8]
 80092ca:	7d3b      	ldrb	r3, [r7, #20]
 80092cc:	9301      	str	r3, [sp, #4]
 80092ce:	7c3b      	ldrb	r3, [r7, #16]
 80092d0:	9300      	str	r3, [sp, #0]
 80092d2:	4603      	mov	r3, r0
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f002 fb1b 	bl	800b910 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 80092da:	2300      	movs	r3, #0

}
 80092dc:	4618      	mov	r0, r3
 80092de:	3708      	adds	r7, #8
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}

080092e4 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b084      	sub	sp, #16
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	460b      	mov	r3, r1
 80092ee:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f000 f831 	bl	8009358 <USBH_GetFreePipe>
 80092f6:	4603      	mov	r3, r0
 80092f8:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80092fa:	89fb      	ldrh	r3, [r7, #14]
 80092fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009300:	4293      	cmp	r3, r2
 8009302:	d007      	beq.n	8009314 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8009304:	78fb      	ldrb	r3, [r7, #3]
 8009306:	89fa      	ldrh	r2, [r7, #14]
 8009308:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	32e0      	adds	r2, #224	; 0xe0
 8009310:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 8009314:	89fb      	ldrh	r3, [r7, #14]
 8009316:	b2db      	uxtb	r3, r3
}
 8009318:	4618      	mov	r0, r3
 800931a:	3710      	adds	r7, #16
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009320:	b480      	push	{r7}
 8009322:	b083      	sub	sp, #12
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
 8009328:	460b      	mov	r3, r1
 800932a:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 800932c:	78fb      	ldrb	r3, [r7, #3]
 800932e:	2b0a      	cmp	r3, #10
 8009330:	d80b      	bhi.n	800934a <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 8009332:	78fa      	ldrb	r2, [r7, #3]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	32e0      	adds	r2, #224	; 0xe0
 8009338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800933c:	78fa      	ldrb	r2, [r7, #3]
 800933e:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	32e0      	adds	r2, #224	; 0xe0
 8009346:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 800934a:	2300      	movs	r3, #0
}
 800934c:	4618      	mov	r0, r3
 800934e:	370c      	adds	r7, #12
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr

08009358 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 8009358:	b480      	push	{r7}
 800935a:	b085      	sub	sp, #20
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009360:	2300      	movs	r3, #0
 8009362:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8009364:	2300      	movs	r3, #0
 8009366:	73fb      	strb	r3, [r7, #15]
 8009368:	e00e      	b.n	8009388 <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800936a:	7bfa      	ldrb	r2, [r7, #15]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	32e0      	adds	r2, #224	; 0xe0
 8009370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009374:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009378:	2b00      	cmp	r3, #0
 800937a:	d102      	bne.n	8009382 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 800937c:	7bfb      	ldrb	r3, [r7, #15]
 800937e:	b29b      	uxth	r3, r3
 8009380:	e007      	b.n	8009392 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8009382:	7bfb      	ldrb	r3, [r7, #15]
 8009384:	3301      	adds	r3, #1
 8009386:	73fb      	strb	r3, [r7, #15]
 8009388:	7bfb      	ldrb	r3, [r7, #15]
 800938a:	2b0a      	cmp	r3, #10
 800938c:	d9ed      	bls.n	800936a <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 800938e:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009392:	4618      	mov	r0, r3
 8009394:	3714      	adds	r7, #20
 8009396:	46bd      	mov	sp, r7
 8009398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939c:	4770      	bx	lr

0800939e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800939e:	b580      	push	{r7, lr}
 80093a0:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80093a2:	f7f7 f9bb 	bl	800071c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80093a6:	f000 f84b 	bl	8009440 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80093aa:	f001 f823 	bl	800a3f4 <MX_GPIO_Init>
  MX_ADC3_Init();
 80093ae:	f000 f907 	bl	80095c0 <MX_ADC3_Init>
  MX_CRC_Init();
 80093b2:	f000 f957 	bl	8009664 <MX_CRC_Init>
  MX_DCMI_Init();
 80093b6:	f000 f977 	bl	80096a8 <MX_DCMI_Init>
  MX_DMA2D_Init();
 80093ba:	f000 f9a9 	bl	8009710 <MX_DMA2D_Init>
  MX_FMC_Init();
 80093be:	f000 ffc9 	bl	800a354 <MX_FMC_Init>
  MX_I2C1_Init();
 80093c2:	f000 f9d7 	bl	8009774 <MX_I2C1_Init>
  MX_I2C3_Init();
 80093c6:	f000 fa15 	bl	80097f4 <MX_I2C3_Init>
  MX_LTDC_Init();
 80093ca:	f000 fa53 	bl	8009874 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80093ce:	f000 fad3 	bl	8009978 <MX_QUADSPI_Init>
  MX_RTC_Init();
 80093d2:	f000 fafd 	bl	80099d0 <MX_RTC_Init>
  MX_SAI2_Init();
 80093d6:	f000 fba3 	bl	8009b20 <MX_SAI2_Init>
  MX_SPDIFRX_Init();
 80093da:	f000 fc49 	bl	8009c70 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 80093de:	f000 fc77 	bl	8009cd0 <MX_SPI2_Init>
  MX_TIM1_Init();
 80093e2:	f000 fcb3 	bl	8009d4c <MX_TIM1_Init>
  MX_TIM2_Init();
 80093e6:	f000 fd5d 	bl	8009ea4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80093ea:	f000 fdd1 	bl	8009f90 <MX_TIM3_Init>
  MX_TIM5_Init();
 80093ee:	f000 fe45 	bl	800a07c <MX_TIM5_Init>
  MX_TIM8_Init();
 80093f2:	f000 feb9 	bl	800a168 <MX_TIM8_Init>
  MX_TIM12_Init();
 80093f6:	f000 ff09 	bl	800a20c <MX_TIM12_Init>
  MX_USART1_UART_Init();
 80093fa:	f000 ff4b 	bl	800a294 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80093fe:	f000 ff79 	bl	800a2f4 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  BSP_LED_Init(LED_GREEN);
 8009402:	2000      	movs	r0, #0
 8009404:	f7f7 f880 	bl	8000508 <BSP_LED_Init>

  BSP_PB_Init(0, 0);
 8009408:	2100      	movs	r1, #0
 800940a:	2000      	movs	r0, #0
 800940c:	f7f7 f8e0 	bl	80005d0 <BSP_PB_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
if(BSP_PB_GetState(0))
 8009410:	2000      	movs	r0, #0
 8009412:	f7f7 f969 	bl	80006e8 <BSP_PB_GetState>
 8009416:	4603      	mov	r3, r0
 8009418:	2b00      	cmp	r3, #0
 800941a:	d002      	beq.n	8009422 <main+0x84>
	    BSP_LED_On(LED_GREEN);
 800941c:	2000      	movs	r0, #0
 800941e:	f7f7 f8a7 	bl	8000570 <BSP_LED_On>
	  HAL_Delay(1000);
 8009422:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009426:	f7f7 f9a7 	bl	8000778 <HAL_Delay>
	  BSP_LED_Off(LED_GREEN);
 800942a:	2000      	movs	r0, #0
 800942c:	f7f7 f8b8 	bl	80005a0 <BSP_LED_Off>
	  HAL_Delay(1000);
 8009430:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009434:	f7f7 f9a0 	bl	8000778 <HAL_Delay>



    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8009438:	f002 f996 	bl	800b768 <MX_USB_HOST_Process>
if(BSP_PB_GetState(0))
 800943c:	e7e8      	b.n	8009410 <main+0x72>
	...

08009440 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b0b4      	sub	sp, #208	; 0xd0
 8009444:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009446:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800944a:	2230      	movs	r2, #48	; 0x30
 800944c:	2100      	movs	r1, #0
 800944e:	4618      	mov	r0, r3
 8009450:	f002 fb56 	bl	800bb00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009454:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8009458:	2200      	movs	r2, #0
 800945a:	601a      	str	r2, [r3, #0]
 800945c:	605a      	str	r2, [r3, #4]
 800945e:	609a      	str	r2, [r3, #8]
 8009460:	60da      	str	r2, [r3, #12]
 8009462:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009464:	f107 0308 	add.w	r3, r7, #8
 8009468:	2284      	movs	r2, #132	; 0x84
 800946a:	2100      	movs	r1, #0
 800946c:	4618      	mov	r0, r3
 800946e:	f002 fb47 	bl	800bb00 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8009472:	f7fa fa6d 	bl	8003950 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009476:	4b4f      	ldr	r3, [pc, #316]	; (80095b4 <SystemClock_Config+0x174>)
 8009478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800947a:	4a4e      	ldr	r2, [pc, #312]	; (80095b4 <SystemClock_Config+0x174>)
 800947c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009480:	6413      	str	r3, [r2, #64]	; 0x40
 8009482:	4b4c      	ldr	r3, [pc, #304]	; (80095b4 <SystemClock_Config+0x174>)
 8009484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800948a:	607b      	str	r3, [r7, #4]
 800948c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800948e:	4b4a      	ldr	r3, [pc, #296]	; (80095b8 <SystemClock_Config+0x178>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	4a49      	ldr	r2, [pc, #292]	; (80095b8 <SystemClock_Config+0x178>)
 8009494:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009498:	6013      	str	r3, [r2, #0]
 800949a:	4b47      	ldr	r3, [pc, #284]	; (80095b8 <SystemClock_Config+0x178>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80094a2:	603b      	str	r3, [r7, #0]
 80094a4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80094a6:	2309      	movs	r3, #9
 80094a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80094ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80094b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80094b4:	2301      	movs	r3, #1
 80094b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80094ba:	2302      	movs	r3, #2
 80094bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80094c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80094c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 80094c8:	2319      	movs	r3, #25
 80094ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 80094ce:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80094d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80094d6:	2302      	movs	r3, #2
 80094d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80094dc:	2309      	movs	r3, #9
 80094de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80094e2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80094e6:	4618      	mov	r0, r3
 80094e8:	f7fa fb62 	bl	8003bb0 <HAL_RCC_OscConfig>
 80094ec:	4603      	mov	r3, r0
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d001      	beq.n	80094f6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80094f2:	f001 f94f 	bl	800a794 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80094f6:	f7fa fa3b 	bl	8003970 <HAL_PWREx_EnableOverDrive>
 80094fa:	4603      	mov	r3, r0
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d001      	beq.n	8009504 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8009500:	f001 f948 	bl	800a794 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009504:	230f      	movs	r3, #15
 8009506:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800950a:	2302      	movs	r3, #2
 800950c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009510:	2300      	movs	r3, #0
 8009512:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009516:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800951a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800951e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009522:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8009526:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800952a:	2106      	movs	r1, #6
 800952c:	4618      	mov	r0, r3
 800952e:	f7fa fdaf 	bl	8004090 <HAL_RCC_ClockConfig>
 8009532:	4603      	mov	r3, r0
 8009534:	2b00      	cmp	r3, #0
 8009536:	d001      	beq.n	800953c <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8009538:	f001 f92c 	bl	800a794 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 800953c:	4b1f      	ldr	r3, [pc, #124]	; (80095bc <SystemClock_Config+0x17c>)
 800953e:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8009540:	2364      	movs	r3, #100	; 0x64
 8009542:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8009544:	2302      	movs	r3, #2
 8009546:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8009548:	2302      	movs	r3, #2
 800954a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800954c:	2302      	movs	r3, #2
 800954e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8009550:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8009554:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8009556:	2305      	movs	r3, #5
 8009558:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800955a:	2302      	movs	r3, #2
 800955c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800955e:	2303      	movs	r3, #3
 8009560:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8009562:	2301      	movs	r3, #1
 8009564:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8009566:	2301      	movs	r3, #1
 8009568:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800956a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800956e:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8009570:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009574:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8009576:	2300      	movs	r3, #0
 8009578:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800957a:	2300      	movs	r3, #0
 800957c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800957e:	2300      	movs	r3, #0
 8009580:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8009582:	2300      	movs	r3, #0
 8009584:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8009586:	2300      	movs	r3, #0
 8009588:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800958a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800958e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8009592:	2300      	movs	r3, #0
 8009594:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009598:	f107 0308 	add.w	r3, r7, #8
 800959c:	4618      	mov	r0, r3
 800959e:	f7fa ff77 	bl	8004490 <HAL_RCCEx_PeriphCLKConfig>
 80095a2:	4603      	mov	r3, r0
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d001      	beq.n	80095ac <SystemClock_Config+0x16c>
  {
    Error_Handler();
 80095a8:	f001 f8f4 	bl	800a794 <Error_Handler>
  }
}
 80095ac:	bf00      	nop
 80095ae:	37d0      	adds	r7, #208	; 0xd0
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}
 80095b4:	40023800 	.word	0x40023800
 80095b8:	40007000 	.word	0x40007000
 80095bc:	01b14868 	.word	0x01b14868

080095c0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b084      	sub	sp, #16
 80095c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80095c6:	463b      	mov	r3, r7
 80095c8:	2200      	movs	r2, #0
 80095ca:	601a      	str	r2, [r3, #0]
 80095cc:	605a      	str	r2, [r3, #4]
 80095ce:	609a      	str	r2, [r3, #8]
 80095d0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 80095d2:	4b21      	ldr	r3, [pc, #132]	; (8009658 <MX_ADC3_Init+0x98>)
 80095d4:	4a21      	ldr	r2, [pc, #132]	; (800965c <MX_ADC3_Init+0x9c>)
 80095d6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80095d8:	4b1f      	ldr	r3, [pc, #124]	; (8009658 <MX_ADC3_Init+0x98>)
 80095da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80095de:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80095e0:	4b1d      	ldr	r3, [pc, #116]	; (8009658 <MX_ADC3_Init+0x98>)
 80095e2:	2200      	movs	r2, #0
 80095e4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80095e6:	4b1c      	ldr	r3, [pc, #112]	; (8009658 <MX_ADC3_Init+0x98>)
 80095e8:	2200      	movs	r2, #0
 80095ea:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80095ec:	4b1a      	ldr	r3, [pc, #104]	; (8009658 <MX_ADC3_Init+0x98>)
 80095ee:	2200      	movs	r2, #0
 80095f0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80095f2:	4b19      	ldr	r3, [pc, #100]	; (8009658 <MX_ADC3_Init+0x98>)
 80095f4:	2200      	movs	r2, #0
 80095f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80095fa:	4b17      	ldr	r3, [pc, #92]	; (8009658 <MX_ADC3_Init+0x98>)
 80095fc:	2200      	movs	r2, #0
 80095fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8009600:	4b15      	ldr	r3, [pc, #84]	; (8009658 <MX_ADC3_Init+0x98>)
 8009602:	4a17      	ldr	r2, [pc, #92]	; (8009660 <MX_ADC3_Init+0xa0>)
 8009604:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009606:	4b14      	ldr	r3, [pc, #80]	; (8009658 <MX_ADC3_Init+0x98>)
 8009608:	2200      	movs	r2, #0
 800960a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800960c:	4b12      	ldr	r3, [pc, #72]	; (8009658 <MX_ADC3_Init+0x98>)
 800960e:	2201      	movs	r2, #1
 8009610:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8009612:	4b11      	ldr	r3, [pc, #68]	; (8009658 <MX_ADC3_Init+0x98>)
 8009614:	2200      	movs	r2, #0
 8009616:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800961a:	4b0f      	ldr	r3, [pc, #60]	; (8009658 <MX_ADC3_Init+0x98>)
 800961c:	2201      	movs	r2, #1
 800961e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8009620:	480d      	ldr	r0, [pc, #52]	; (8009658 <MX_ADC3_Init+0x98>)
 8009622:	f7f7 f8cb 	bl	80007bc <HAL_ADC_Init>
 8009626:	4603      	mov	r3, r0
 8009628:	2b00      	cmp	r3, #0
 800962a:	d001      	beq.n	8009630 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800962c:	f001 f8b2 	bl	800a794 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8009630:	2304      	movs	r3, #4
 8009632:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8009634:	2301      	movs	r3, #1
 8009636:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8009638:	2300      	movs	r3, #0
 800963a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800963c:	463b      	mov	r3, r7
 800963e:	4619      	mov	r1, r3
 8009640:	4805      	ldr	r0, [pc, #20]	; (8009658 <MX_ADC3_Init+0x98>)
 8009642:	f7f7 f8ff 	bl	8000844 <HAL_ADC_ConfigChannel>
 8009646:	4603      	mov	r3, r0
 8009648:	2b00      	cmp	r3, #0
 800964a:	d001      	beq.n	8009650 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800964c:	f001 f8a2 	bl	800a794 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8009650:	bf00      	nop
 8009652:	3710      	adds	r7, #16
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}
 8009658:	200004a0 	.word	0x200004a0
 800965c:	40012200 	.word	0x40012200
 8009660:	0f000001 	.word	0x0f000001

08009664 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8009668:	4b0d      	ldr	r3, [pc, #52]	; (80096a0 <MX_CRC_Init+0x3c>)
 800966a:	4a0e      	ldr	r2, [pc, #56]	; (80096a4 <MX_CRC_Init+0x40>)
 800966c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800966e:	4b0c      	ldr	r3, [pc, #48]	; (80096a0 <MX_CRC_Init+0x3c>)
 8009670:	2200      	movs	r2, #0
 8009672:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8009674:	4b0a      	ldr	r3, [pc, #40]	; (80096a0 <MX_CRC_Init+0x3c>)
 8009676:	2200      	movs	r2, #0
 8009678:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800967a:	4b09      	ldr	r3, [pc, #36]	; (80096a0 <MX_CRC_Init+0x3c>)
 800967c:	2200      	movs	r2, #0
 800967e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8009680:	4b07      	ldr	r3, [pc, #28]	; (80096a0 <MX_CRC_Init+0x3c>)
 8009682:	2200      	movs	r2, #0
 8009684:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8009686:	4b06      	ldr	r3, [pc, #24]	; (80096a0 <MX_CRC_Init+0x3c>)
 8009688:	2201      	movs	r2, #1
 800968a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800968c:	4804      	ldr	r0, [pc, #16]	; (80096a0 <MX_CRC_Init+0x3c>)
 800968e:	f7f7 fbe9 	bl	8000e64 <HAL_CRC_Init>
 8009692:	4603      	mov	r3, r0
 8009694:	2b00      	cmp	r3, #0
 8009696:	d001      	beq.n	800969c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8009698:	f001 f87c 	bl	800a794 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800969c:	bf00      	nop
 800969e:	bd80      	pop	{r7, pc}
 80096a0:	200002d0 	.word	0x200002d0
 80096a4:	40023000 	.word	0x40023000

080096a8 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80096ac:	4b16      	ldr	r3, [pc, #88]	; (8009708 <MX_DCMI_Init+0x60>)
 80096ae:	4a17      	ldr	r2, [pc, #92]	; (800970c <MX_DCMI_Init+0x64>)
 80096b0:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80096b2:	4b15      	ldr	r3, [pc, #84]	; (8009708 <MX_DCMI_Init+0x60>)
 80096b4:	2200      	movs	r2, #0
 80096b6:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80096b8:	4b13      	ldr	r3, [pc, #76]	; (8009708 <MX_DCMI_Init+0x60>)
 80096ba:	2200      	movs	r2, #0
 80096bc:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80096be:	4b12      	ldr	r3, [pc, #72]	; (8009708 <MX_DCMI_Init+0x60>)
 80096c0:	2200      	movs	r2, #0
 80096c2:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80096c4:	4b10      	ldr	r3, [pc, #64]	; (8009708 <MX_DCMI_Init+0x60>)
 80096c6:	2200      	movs	r2, #0
 80096c8:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80096ca:	4b0f      	ldr	r3, [pc, #60]	; (8009708 <MX_DCMI_Init+0x60>)
 80096cc:	2200      	movs	r2, #0
 80096ce:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80096d0:	4b0d      	ldr	r3, [pc, #52]	; (8009708 <MX_DCMI_Init+0x60>)
 80096d2:	2200      	movs	r2, #0
 80096d4:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80096d6:	4b0c      	ldr	r3, [pc, #48]	; (8009708 <MX_DCMI_Init+0x60>)
 80096d8:	2200      	movs	r2, #0
 80096da:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80096dc:	4b0a      	ldr	r3, [pc, #40]	; (8009708 <MX_DCMI_Init+0x60>)
 80096de:	2200      	movs	r2, #0
 80096e0:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80096e2:	4b09      	ldr	r3, [pc, #36]	; (8009708 <MX_DCMI_Init+0x60>)
 80096e4:	2200      	movs	r2, #0
 80096e6:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80096e8:	4b07      	ldr	r3, [pc, #28]	; (8009708 <MX_DCMI_Init+0x60>)
 80096ea:	2200      	movs	r2, #0
 80096ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80096ee:	4b06      	ldr	r3, [pc, #24]	; (8009708 <MX_DCMI_Init+0x60>)
 80096f0:	2200      	movs	r2, #0
 80096f2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80096f4:	4804      	ldr	r0, [pc, #16]	; (8009708 <MX_DCMI_Init+0x60>)
 80096f6:	f7f7 fc9f 	bl	8001038 <HAL_DCMI_Init>
 80096fa:	4603      	mov	r3, r0
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d001      	beq.n	8009704 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8009700:	f001 f848 	bl	800a794 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8009704:	bf00      	nop
 8009706:	bd80      	pop	{r7, pc}
 8009708:	200004e8 	.word	0x200004e8
 800970c:	50050000 	.word	0x50050000

08009710 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8009714:	4b15      	ldr	r3, [pc, #84]	; (800976c <MX_DMA2D_Init+0x5c>)
 8009716:	4a16      	ldr	r2, [pc, #88]	; (8009770 <MX_DMA2D_Init+0x60>)
 8009718:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800971a:	4b14      	ldr	r3, [pc, #80]	; (800976c <MX_DMA2D_Init+0x5c>)
 800971c:	2200      	movs	r2, #0
 800971e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8009720:	4b12      	ldr	r3, [pc, #72]	; (800976c <MX_DMA2D_Init+0x5c>)
 8009722:	2200      	movs	r2, #0
 8009724:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8009726:	4b11      	ldr	r3, [pc, #68]	; (800976c <MX_DMA2D_Init+0x5c>)
 8009728:	2200      	movs	r2, #0
 800972a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800972c:	4b0f      	ldr	r3, [pc, #60]	; (800976c <MX_DMA2D_Init+0x5c>)
 800972e:	2200      	movs	r2, #0
 8009730:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8009732:	4b0e      	ldr	r3, [pc, #56]	; (800976c <MX_DMA2D_Init+0x5c>)
 8009734:	2200      	movs	r2, #0
 8009736:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8009738:	4b0c      	ldr	r3, [pc, #48]	; (800976c <MX_DMA2D_Init+0x5c>)
 800973a:	2200      	movs	r2, #0
 800973c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800973e:	4b0b      	ldr	r3, [pc, #44]	; (800976c <MX_DMA2D_Init+0x5c>)
 8009740:	2200      	movs	r2, #0
 8009742:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8009744:	4809      	ldr	r0, [pc, #36]	; (800976c <MX_DMA2D_Init+0x5c>)
 8009746:	f7f7 fce9 	bl	800111c <HAL_DMA2D_Init>
 800974a:	4603      	mov	r3, r0
 800974c:	2b00      	cmp	r3, #0
 800974e:	d001      	beq.n	8009754 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8009750:	f001 f820 	bl	800a794 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8009754:	2101      	movs	r1, #1
 8009756:	4805      	ldr	r0, [pc, #20]	; (800976c <MX_DMA2D_Init+0x5c>)
 8009758:	f7f7 fe3a 	bl	80013d0 <HAL_DMA2D_ConfigLayer>
 800975c:	4603      	mov	r3, r0
 800975e:	2b00      	cmp	r3, #0
 8009760:	d001      	beq.n	8009766 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8009762:	f001 f817 	bl	800a794 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8009766:	bf00      	nop
 8009768:	bd80      	pop	{r7, pc}
 800976a:	bf00      	nop
 800976c:	20000698 	.word	0x20000698
 8009770:	4002b000 	.word	0x4002b000

08009774 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8009778:	4b1b      	ldr	r3, [pc, #108]	; (80097e8 <MX_I2C1_Init+0x74>)
 800977a:	4a1c      	ldr	r2, [pc, #112]	; (80097ec <MX_I2C1_Init+0x78>)
 800977c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 800977e:	4b1a      	ldr	r3, [pc, #104]	; (80097e8 <MX_I2C1_Init+0x74>)
 8009780:	4a1b      	ldr	r2, [pc, #108]	; (80097f0 <MX_I2C1_Init+0x7c>)
 8009782:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8009784:	4b18      	ldr	r3, [pc, #96]	; (80097e8 <MX_I2C1_Init+0x74>)
 8009786:	2200      	movs	r2, #0
 8009788:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800978a:	4b17      	ldr	r3, [pc, #92]	; (80097e8 <MX_I2C1_Init+0x74>)
 800978c:	2201      	movs	r2, #1
 800978e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009790:	4b15      	ldr	r3, [pc, #84]	; (80097e8 <MX_I2C1_Init+0x74>)
 8009792:	2200      	movs	r2, #0
 8009794:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8009796:	4b14      	ldr	r3, [pc, #80]	; (80097e8 <MX_I2C1_Init+0x74>)
 8009798:	2200      	movs	r2, #0
 800979a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800979c:	4b12      	ldr	r3, [pc, #72]	; (80097e8 <MX_I2C1_Init+0x74>)
 800979e:	2200      	movs	r2, #0
 80097a0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80097a2:	4b11      	ldr	r3, [pc, #68]	; (80097e8 <MX_I2C1_Init+0x74>)
 80097a4:	2200      	movs	r2, #0
 80097a6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80097a8:	4b0f      	ldr	r3, [pc, #60]	; (80097e8 <MX_I2C1_Init+0x74>)
 80097aa:	2200      	movs	r2, #0
 80097ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80097ae:	480e      	ldr	r0, [pc, #56]	; (80097e8 <MX_I2C1_Init+0x74>)
 80097b0:	f7f9 fc3c 	bl	800302c <HAL_I2C_Init>
 80097b4:	4603      	mov	r3, r0
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d001      	beq.n	80097be <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80097ba:	f000 ffeb 	bl	800a794 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80097be:	2100      	movs	r1, #0
 80097c0:	4809      	ldr	r0, [pc, #36]	; (80097e8 <MX_I2C1_Init+0x74>)
 80097c2:	f7f9 fcc3 	bl	800314c <HAL_I2CEx_ConfigAnalogFilter>
 80097c6:	4603      	mov	r3, r0
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d001      	beq.n	80097d0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80097cc:	f000 ffe2 	bl	800a794 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80097d0:	2100      	movs	r1, #0
 80097d2:	4805      	ldr	r0, [pc, #20]	; (80097e8 <MX_I2C1_Init+0x74>)
 80097d4:	f7f9 fd05 	bl	80031e2 <HAL_I2CEx_ConfigDigitalFilter>
 80097d8:	4603      	mov	r3, r0
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d001      	beq.n	80097e2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80097de:	f000 ffd9 	bl	800a794 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80097e2:	bf00      	nop
 80097e4:	bd80      	pop	{r7, pc}
 80097e6:	bf00      	nop
 80097e8:	20000284 	.word	0x20000284
 80097ec:	40005400 	.word	0x40005400
 80097f0:	00c0eaff 	.word	0x00c0eaff

080097f4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80097f8:	4b1b      	ldr	r3, [pc, #108]	; (8009868 <MX_I2C3_Init+0x74>)
 80097fa:	4a1c      	ldr	r2, [pc, #112]	; (800986c <MX_I2C3_Init+0x78>)
 80097fc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80097fe:	4b1a      	ldr	r3, [pc, #104]	; (8009868 <MX_I2C3_Init+0x74>)
 8009800:	4a1b      	ldr	r2, [pc, #108]	; (8009870 <MX_I2C3_Init+0x7c>)
 8009802:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8009804:	4b18      	ldr	r3, [pc, #96]	; (8009868 <MX_I2C3_Init+0x74>)
 8009806:	2200      	movs	r2, #0
 8009808:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800980a:	4b17      	ldr	r3, [pc, #92]	; (8009868 <MX_I2C3_Init+0x74>)
 800980c:	2201      	movs	r2, #1
 800980e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009810:	4b15      	ldr	r3, [pc, #84]	; (8009868 <MX_I2C3_Init+0x74>)
 8009812:	2200      	movs	r2, #0
 8009814:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8009816:	4b14      	ldr	r3, [pc, #80]	; (8009868 <MX_I2C3_Init+0x74>)
 8009818:	2200      	movs	r2, #0
 800981a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800981c:	4b12      	ldr	r3, [pc, #72]	; (8009868 <MX_I2C3_Init+0x74>)
 800981e:	2200      	movs	r2, #0
 8009820:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009822:	4b11      	ldr	r3, [pc, #68]	; (8009868 <MX_I2C3_Init+0x74>)
 8009824:	2200      	movs	r2, #0
 8009826:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009828:	4b0f      	ldr	r3, [pc, #60]	; (8009868 <MX_I2C3_Init+0x74>)
 800982a:	2200      	movs	r2, #0
 800982c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800982e:	480e      	ldr	r0, [pc, #56]	; (8009868 <MX_I2C3_Init+0x74>)
 8009830:	f7f9 fbfc 	bl	800302c <HAL_I2C_Init>
 8009834:	4603      	mov	r3, r0
 8009836:	2b00      	cmp	r3, #0
 8009838:	d001      	beq.n	800983e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800983a:	f000 ffab 	bl	800a794 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800983e:	2100      	movs	r1, #0
 8009840:	4809      	ldr	r0, [pc, #36]	; (8009868 <MX_I2C3_Init+0x74>)
 8009842:	f7f9 fc83 	bl	800314c <HAL_I2CEx_ConfigAnalogFilter>
 8009846:	4603      	mov	r3, r0
 8009848:	2b00      	cmp	r3, #0
 800984a:	d001      	beq.n	8009850 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800984c:	f000 ffa2 	bl	800a794 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8009850:	2100      	movs	r1, #0
 8009852:	4805      	ldr	r0, [pc, #20]	; (8009868 <MX_I2C3_Init+0x74>)
 8009854:	f7f9 fcc5 	bl	80031e2 <HAL_I2CEx_ConfigDigitalFilter>
 8009858:	4603      	mov	r3, r0
 800985a:	2b00      	cmp	r3, #0
 800985c:	d001      	beq.n	8009862 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800985e:	f000 ff99 	bl	800a794 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8009862:	bf00      	nop
 8009864:	bd80      	pop	{r7, pc}
 8009866:	bf00      	nop
 8009868:	200000c4 	.word	0x200000c4
 800986c:	40005c00 	.word	0x40005c00
 8009870:	00c0eaff 	.word	0x00c0eaff

08009874 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b08e      	sub	sp, #56	; 0x38
 8009878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800987a:	1d3b      	adds	r3, r7, #4
 800987c:	2234      	movs	r2, #52	; 0x34
 800987e:	2100      	movs	r1, #0
 8009880:	4618      	mov	r0, r3
 8009882:	f002 f93d 	bl	800bb00 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8009886:	4b3a      	ldr	r3, [pc, #232]	; (8009970 <MX_LTDC_Init+0xfc>)
 8009888:	4a3a      	ldr	r2, [pc, #232]	; (8009974 <MX_LTDC_Init+0x100>)
 800988a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800988c:	4b38      	ldr	r3, [pc, #224]	; (8009970 <MX_LTDC_Init+0xfc>)
 800988e:	2200      	movs	r2, #0
 8009890:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8009892:	4b37      	ldr	r3, [pc, #220]	; (8009970 <MX_LTDC_Init+0xfc>)
 8009894:	2200      	movs	r2, #0
 8009896:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8009898:	4b35      	ldr	r3, [pc, #212]	; (8009970 <MX_LTDC_Init+0xfc>)
 800989a:	2200      	movs	r2, #0
 800989c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800989e:	4b34      	ldr	r3, [pc, #208]	; (8009970 <MX_LTDC_Init+0xfc>)
 80098a0:	2200      	movs	r2, #0
 80098a2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80098a4:	4b32      	ldr	r3, [pc, #200]	; (8009970 <MX_LTDC_Init+0xfc>)
 80098a6:	2228      	movs	r2, #40	; 0x28
 80098a8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80098aa:	4b31      	ldr	r3, [pc, #196]	; (8009970 <MX_LTDC_Init+0xfc>)
 80098ac:	2209      	movs	r2, #9
 80098ae:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80098b0:	4b2f      	ldr	r3, [pc, #188]	; (8009970 <MX_LTDC_Init+0xfc>)
 80098b2:	2235      	movs	r2, #53	; 0x35
 80098b4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80098b6:	4b2e      	ldr	r3, [pc, #184]	; (8009970 <MX_LTDC_Init+0xfc>)
 80098b8:	220b      	movs	r2, #11
 80098ba:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80098bc:	4b2c      	ldr	r3, [pc, #176]	; (8009970 <MX_LTDC_Init+0xfc>)
 80098be:	f240 2215 	movw	r2, #533	; 0x215
 80098c2:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80098c4:	4b2a      	ldr	r3, [pc, #168]	; (8009970 <MX_LTDC_Init+0xfc>)
 80098c6:	f240 121b 	movw	r2, #283	; 0x11b
 80098ca:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 80098cc:	4b28      	ldr	r3, [pc, #160]	; (8009970 <MX_LTDC_Init+0xfc>)
 80098ce:	f240 2235 	movw	r2, #565	; 0x235
 80098d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 80098d4:	4b26      	ldr	r3, [pc, #152]	; (8009970 <MX_LTDC_Init+0xfc>)
 80098d6:	f240 121d 	movw	r2, #285	; 0x11d
 80098da:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80098dc:	4b24      	ldr	r3, [pc, #144]	; (8009970 <MX_LTDC_Init+0xfc>)
 80098de:	2200      	movs	r2, #0
 80098e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80098e4:	4b22      	ldr	r3, [pc, #136]	; (8009970 <MX_LTDC_Init+0xfc>)
 80098e6:	2200      	movs	r2, #0
 80098e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80098ec:	4b20      	ldr	r3, [pc, #128]	; (8009970 <MX_LTDC_Init+0xfc>)
 80098ee:	2200      	movs	r2, #0
 80098f0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80098f4:	481e      	ldr	r0, [pc, #120]	; (8009970 <MX_LTDC_Init+0xfc>)
 80098f6:	f7f9 fcc1 	bl	800327c <HAL_LTDC_Init>
 80098fa:	4603      	mov	r3, r0
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d001      	beq.n	8009904 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8009900:	f000 ff48 	bl	800a794 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8009904:	2300      	movs	r3, #0
 8009906:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8009908:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800990c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800990e:	2300      	movs	r3, #0
 8009910:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8009912:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009916:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8009918:	2302      	movs	r3, #2
 800991a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800991c:	23ff      	movs	r3, #255	; 0xff
 800991e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8009920:	2300      	movs	r3, #0
 8009922:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8009924:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8009928:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800992a:	2307      	movs	r3, #7
 800992c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800992e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8009932:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8009934:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8009938:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800993a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800993e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8009940:	2300      	movs	r3, #0
 8009942:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8009946:	2300      	movs	r3, #0
 8009948:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800994c:	2300      	movs	r3, #0
 800994e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8009952:	1d3b      	adds	r3, r7, #4
 8009954:	2200      	movs	r2, #0
 8009956:	4619      	mov	r1, r3
 8009958:	4805      	ldr	r0, [pc, #20]	; (8009970 <MX_LTDC_Init+0xfc>)
 800995a:	f7f9 fe21 	bl	80035a0 <HAL_LTDC_ConfigLayer>
 800995e:	4603      	mov	r3, r0
 8009960:	2b00      	cmp	r3, #0
 8009962:	d001      	beq.n	8009968 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8009964:	f000 ff16 	bl	800a794 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8009968:	bf00      	nop
 800996a:	3738      	adds	r7, #56	; 0x38
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}
 8009970:	200003f8 	.word	0x200003f8
 8009974:	40016800 	.word	0x40016800

08009978 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800997c:	4b12      	ldr	r3, [pc, #72]	; (80099c8 <MX_QUADSPI_Init+0x50>)
 800997e:	4a13      	ldr	r2, [pc, #76]	; (80099cc <MX_QUADSPI_Init+0x54>)
 8009980:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8009982:	4b11      	ldr	r3, [pc, #68]	; (80099c8 <MX_QUADSPI_Init+0x50>)
 8009984:	22ff      	movs	r2, #255	; 0xff
 8009986:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8009988:	4b0f      	ldr	r3, [pc, #60]	; (80099c8 <MX_QUADSPI_Init+0x50>)
 800998a:	2201      	movs	r2, #1
 800998c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800998e:	4b0e      	ldr	r3, [pc, #56]	; (80099c8 <MX_QUADSPI_Init+0x50>)
 8009990:	2200      	movs	r2, #0
 8009992:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8009994:	4b0c      	ldr	r3, [pc, #48]	; (80099c8 <MX_QUADSPI_Init+0x50>)
 8009996:	2201      	movs	r2, #1
 8009998:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800999a:	4b0b      	ldr	r3, [pc, #44]	; (80099c8 <MX_QUADSPI_Init+0x50>)
 800999c:	2200      	movs	r2, #0
 800999e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80099a0:	4b09      	ldr	r3, [pc, #36]	; (80099c8 <MX_QUADSPI_Init+0x50>)
 80099a2:	2200      	movs	r2, #0
 80099a4:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80099a6:	4b08      	ldr	r3, [pc, #32]	; (80099c8 <MX_QUADSPI_Init+0x50>)
 80099a8:	2200      	movs	r2, #0
 80099aa:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80099ac:	4b06      	ldr	r3, [pc, #24]	; (80099c8 <MX_QUADSPI_Init+0x50>)
 80099ae:	2200      	movs	r2, #0
 80099b0:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80099b2:	4805      	ldr	r0, [pc, #20]	; (80099c8 <MX_QUADSPI_Init+0x50>)
 80099b4:	f7fa f82c 	bl	8003a10 <HAL_QSPI_Init>
 80099b8:	4603      	mov	r3, r0
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d001      	beq.n	80099c2 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80099be:	f000 fee9 	bl	800a794 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80099c2:	bf00      	nop
 80099c4:	bd80      	pop	{r7, pc}
 80099c6:	bf00      	nop
 80099c8:	200007d4 	.word	0x200007d4
 80099cc:	a0001000 	.word	0xa0001000

080099d0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b092      	sub	sp, #72	; 0x48
 80099d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80099d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80099da:	2200      	movs	r2, #0
 80099dc:	601a      	str	r2, [r3, #0]
 80099de:	605a      	str	r2, [r3, #4]
 80099e0:	609a      	str	r2, [r3, #8]
 80099e2:	60da      	str	r2, [r3, #12]
 80099e4:	611a      	str	r2, [r3, #16]
 80099e6:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 80099e8:	2300      	movs	r3, #0
 80099ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 80099ec:	463b      	mov	r3, r7
 80099ee:	222c      	movs	r2, #44	; 0x2c
 80099f0:	2100      	movs	r1, #0
 80099f2:	4618      	mov	r0, r3
 80099f4:	f002 f884 	bl	800bb00 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80099f8:	4b47      	ldr	r3, [pc, #284]	; (8009b18 <MX_RTC_Init+0x148>)
 80099fa:	4a48      	ldr	r2, [pc, #288]	; (8009b1c <MX_RTC_Init+0x14c>)
 80099fc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80099fe:	4b46      	ldr	r3, [pc, #280]	; (8009b18 <MX_RTC_Init+0x148>)
 8009a00:	2200      	movs	r2, #0
 8009a02:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8009a04:	4b44      	ldr	r3, [pc, #272]	; (8009b18 <MX_RTC_Init+0x148>)
 8009a06:	227f      	movs	r2, #127	; 0x7f
 8009a08:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8009a0a:	4b43      	ldr	r3, [pc, #268]	; (8009b18 <MX_RTC_Init+0x148>)
 8009a0c:	22ff      	movs	r2, #255	; 0xff
 8009a0e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8009a10:	4b41      	ldr	r3, [pc, #260]	; (8009b18 <MX_RTC_Init+0x148>)
 8009a12:	2200      	movs	r2, #0
 8009a14:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8009a16:	4b40      	ldr	r3, [pc, #256]	; (8009b18 <MX_RTC_Init+0x148>)
 8009a18:	2200      	movs	r2, #0
 8009a1a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8009a1c:	4b3e      	ldr	r3, [pc, #248]	; (8009b18 <MX_RTC_Init+0x148>)
 8009a1e:	2200      	movs	r2, #0
 8009a20:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8009a22:	483d      	ldr	r0, [pc, #244]	; (8009b18 <MX_RTC_Init+0x148>)
 8009a24:	f7fb fa56 	bl	8004ed4 <HAL_RTC_Init>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d001      	beq.n	8009a32 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8009a2e:	f000 feb1 	bl	800a794 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 8009a32:	2300      	movs	r3, #0
 8009a34:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8009a38:	2300      	movs	r3, #0
 8009a3a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8009a44:	2300      	movs	r3, #0
 8009a46:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8009a4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009a50:	2201      	movs	r2, #1
 8009a52:	4619      	mov	r1, r3
 8009a54:	4830      	ldr	r0, [pc, #192]	; (8009b18 <MX_RTC_Init+0x148>)
 8009a56:	f7fb fab9 	bl	8004fcc <HAL_RTC_SetTime>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d001      	beq.n	8009a64 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8009a60:	f000 fe98 	bl	800a794 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8009a64:	2301      	movs	r3, #1
 8009a66:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8009a70:	2301      	movs	r3, #1
 8009a72:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8009a76:	2300      	movs	r3, #0
 8009a78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8009a7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009a80:	2201      	movs	r2, #1
 8009a82:	4619      	mov	r1, r3
 8009a84:	4824      	ldr	r0, [pc, #144]	; (8009b18 <MX_RTC_Init+0x148>)
 8009a86:	f7fb fb5f 	bl	8005148 <HAL_RTC_SetDate>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d001      	beq.n	8009a94 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8009a90:	f000 fe80 	bl	800a794 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8009a94:	2300      	movs	r3, #0
 8009a96:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8009aac:	2300      	movs	r3, #0
 8009aae:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8009ab8:	2301      	movs	r3, #1
 8009aba:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8009abe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ac2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8009ac4:	463b      	mov	r3, r7
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	4619      	mov	r1, r3
 8009aca:	4813      	ldr	r0, [pc, #76]	; (8009b18 <MX_RTC_Init+0x148>)
 8009acc:	f7fb fbe4 	bl	8005298 <HAL_RTC_SetAlarm>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d001      	beq.n	8009ada <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8009ad6:	f000 fe5d 	bl	800a794 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
 8009ada:	2301      	movs	r3, #1
 8009adc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 8009ae0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8009ae6:	463b      	mov	r3, r7
 8009ae8:	2201      	movs	r2, #1
 8009aea:	4619      	mov	r1, r3
 8009aec:	480a      	ldr	r0, [pc, #40]	; (8009b18 <MX_RTC_Init+0x148>)
 8009aee:	f7fb fbd3 	bl	8005298 <HAL_RTC_SetAlarm>
 8009af2:	4603      	mov	r3, r0
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d001      	beq.n	8009afc <MX_RTC_Init+0x12c>
  {
    Error_Handler();
 8009af8:	f000 fe4c 	bl	800a794 <Error_Handler>
  }
  /** Enable the TimeStamp 
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8009afc:	2202      	movs	r2, #2
 8009afe:	2100      	movs	r1, #0
 8009b00:	4805      	ldr	r0, [pc, #20]	; (8009b18 <MX_RTC_Init+0x148>)
 8009b02:	f7fb fd53 	bl	80055ac <HAL_RTCEx_SetTimeStamp>
 8009b06:	4603      	mov	r3, r0
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d001      	beq.n	8009b10 <MX_RTC_Init+0x140>
  {
    Error_Handler();
 8009b0c:	f000 fe42 	bl	800a794 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8009b10:	bf00      	nop
 8009b12:	3748      	adds	r7, #72	; 0x48
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}
 8009b18:	200005b8 	.word	0x200005b8
 8009b1c:	40002800 	.word	0x40002800

08009b20 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8009b24:	4b4d      	ldr	r3, [pc, #308]	; (8009c5c <MX_SAI2_Init+0x13c>)
 8009b26:	4a4e      	ldr	r2, [pc, #312]	; (8009c60 <MX_SAI2_Init+0x140>)
 8009b28:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8009b2a:	4b4c      	ldr	r3, [pc, #304]	; (8009c5c <MX_SAI2_Init+0x13c>)
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8009b30:	4b4a      	ldr	r3, [pc, #296]	; (8009c5c <MX_SAI2_Init+0x13c>)
 8009b32:	2200      	movs	r2, #0
 8009b34:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8009b36:	4b49      	ldr	r3, [pc, #292]	; (8009c5c <MX_SAI2_Init+0x13c>)
 8009b38:	2240      	movs	r2, #64	; 0x40
 8009b3a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8009b3c:	4b47      	ldr	r3, [pc, #284]	; (8009c5c <MX_SAI2_Init+0x13c>)
 8009b3e:	2200      	movs	r2, #0
 8009b40:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8009b42:	4b46      	ldr	r3, [pc, #280]	; (8009c5c <MX_SAI2_Init+0x13c>)
 8009b44:	2200      	movs	r2, #0
 8009b46:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8009b48:	4b44      	ldr	r3, [pc, #272]	; (8009c5c <MX_SAI2_Init+0x13c>)
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8009b4e:	4b43      	ldr	r3, [pc, #268]	; (8009c5c <MX_SAI2_Init+0x13c>)
 8009b50:	2200      	movs	r2, #0
 8009b52:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8009b54:	4b41      	ldr	r3, [pc, #260]	; (8009c5c <MX_SAI2_Init+0x13c>)
 8009b56:	2200      	movs	r2, #0
 8009b58:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8009b5a:	4b40      	ldr	r3, [pc, #256]	; (8009c5c <MX_SAI2_Init+0x13c>)
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8009b60:	4b3e      	ldr	r3, [pc, #248]	; (8009c5c <MX_SAI2_Init+0x13c>)
 8009b62:	4a40      	ldr	r2, [pc, #256]	; (8009c64 <MX_SAI2_Init+0x144>)
 8009b64:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8009b66:	4b3d      	ldr	r3, [pc, #244]	; (8009c5c <MX_SAI2_Init+0x13c>)
 8009b68:	2200      	movs	r2, #0
 8009b6a:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8009b6c:	4b3b      	ldr	r3, [pc, #236]	; (8009c5c <MX_SAI2_Init+0x13c>)
 8009b6e:	2200      	movs	r2, #0
 8009b70:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8009b72:	4b3a      	ldr	r3, [pc, #232]	; (8009c5c <MX_SAI2_Init+0x13c>)
 8009b74:	2200      	movs	r2, #0
 8009b76:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8009b78:	4b38      	ldr	r3, [pc, #224]	; (8009c5c <MX_SAI2_Init+0x13c>)
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8009b7e:	4b37      	ldr	r3, [pc, #220]	; (8009c5c <MX_SAI2_Init+0x13c>)
 8009b80:	2208      	movs	r2, #8
 8009b82:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8009b84:	4b35      	ldr	r3, [pc, #212]	; (8009c5c <MX_SAI2_Init+0x13c>)
 8009b86:	2201      	movs	r2, #1
 8009b88:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8009b8a:	4b34      	ldr	r3, [pc, #208]	; (8009c5c <MX_SAI2_Init+0x13c>)
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8009b90:	4b32      	ldr	r3, [pc, #200]	; (8009c5c <MX_SAI2_Init+0x13c>)
 8009b92:	2200      	movs	r2, #0
 8009b94:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8009b96:	4b31      	ldr	r3, [pc, #196]	; (8009c5c <MX_SAI2_Init+0x13c>)
 8009b98:	2200      	movs	r2, #0
 8009b9a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8009b9c:	4b2f      	ldr	r3, [pc, #188]	; (8009c5c <MX_SAI2_Init+0x13c>)
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8009ba2:	4b2e      	ldr	r3, [pc, #184]	; (8009c5c <MX_SAI2_Init+0x13c>)
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8009ba8:	4b2c      	ldr	r3, [pc, #176]	; (8009c5c <MX_SAI2_Init+0x13c>)
 8009baa:	2201      	movs	r2, #1
 8009bac:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8009bae:	4b2b      	ldr	r3, [pc, #172]	; (8009c5c <MX_SAI2_Init+0x13c>)
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8009bb4:	4829      	ldr	r0, [pc, #164]	; (8009c5c <MX_SAI2_Init+0x13c>)
 8009bb6:	f7fb fd4f 	bl	8005658 <HAL_SAI_Init>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d001      	beq.n	8009bc4 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8009bc0:	f000 fde8 	bl	800a794 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8009bc4:	4b28      	ldr	r3, [pc, #160]	; (8009c68 <MX_SAI2_Init+0x148>)
 8009bc6:	4a29      	ldr	r2, [pc, #164]	; (8009c6c <MX_SAI2_Init+0x14c>)
 8009bc8:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8009bca:	4b27      	ldr	r3, [pc, #156]	; (8009c68 <MX_SAI2_Init+0x148>)
 8009bcc:	2200      	movs	r2, #0
 8009bce:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8009bd0:	4b25      	ldr	r3, [pc, #148]	; (8009c68 <MX_SAI2_Init+0x148>)
 8009bd2:	2203      	movs	r2, #3
 8009bd4:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8009bd6:	4b24      	ldr	r3, [pc, #144]	; (8009c68 <MX_SAI2_Init+0x148>)
 8009bd8:	2240      	movs	r2, #64	; 0x40
 8009bda:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8009bdc:	4b22      	ldr	r3, [pc, #136]	; (8009c68 <MX_SAI2_Init+0x148>)
 8009bde:	2200      	movs	r2, #0
 8009be0:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8009be2:	4b21      	ldr	r3, [pc, #132]	; (8009c68 <MX_SAI2_Init+0x148>)
 8009be4:	2200      	movs	r2, #0
 8009be6:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8009be8:	4b1f      	ldr	r3, [pc, #124]	; (8009c68 <MX_SAI2_Init+0x148>)
 8009bea:	2201      	movs	r2, #1
 8009bec:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8009bee:	4b1e      	ldr	r3, [pc, #120]	; (8009c68 <MX_SAI2_Init+0x148>)
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8009bf4:	4b1c      	ldr	r3, [pc, #112]	; (8009c68 <MX_SAI2_Init+0x148>)
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8009bfa:	4b1b      	ldr	r3, [pc, #108]	; (8009c68 <MX_SAI2_Init+0x148>)
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8009c00:	4b19      	ldr	r3, [pc, #100]	; (8009c68 <MX_SAI2_Init+0x148>)
 8009c02:	2200      	movs	r2, #0
 8009c04:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8009c06:	4b18      	ldr	r3, [pc, #96]	; (8009c68 <MX_SAI2_Init+0x148>)
 8009c08:	2200      	movs	r2, #0
 8009c0a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8009c0c:	4b16      	ldr	r3, [pc, #88]	; (8009c68 <MX_SAI2_Init+0x148>)
 8009c0e:	2200      	movs	r2, #0
 8009c10:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 24;
 8009c12:	4b15      	ldr	r3, [pc, #84]	; (8009c68 <MX_SAI2_Init+0x148>)
 8009c14:	2218      	movs	r2, #24
 8009c16:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8009c18:	4b13      	ldr	r3, [pc, #76]	; (8009c68 <MX_SAI2_Init+0x148>)
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8009c1e:	4b12      	ldr	r3, [pc, #72]	; (8009c68 <MX_SAI2_Init+0x148>)
 8009c20:	2200      	movs	r2, #0
 8009c22:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8009c24:	4b10      	ldr	r3, [pc, #64]	; (8009c68 <MX_SAI2_Init+0x148>)
 8009c26:	2200      	movs	r2, #0
 8009c28:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8009c2a:	4b0f      	ldr	r3, [pc, #60]	; (8009c68 <MX_SAI2_Init+0x148>)
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8009c30:	4b0d      	ldr	r3, [pc, #52]	; (8009c68 <MX_SAI2_Init+0x148>)
 8009c32:	2200      	movs	r2, #0
 8009c34:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8009c36:	4b0c      	ldr	r3, [pc, #48]	; (8009c68 <MX_SAI2_Init+0x148>)
 8009c38:	2200      	movs	r2, #0
 8009c3a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8009c3c:	4b0a      	ldr	r3, [pc, #40]	; (8009c68 <MX_SAI2_Init+0x148>)
 8009c3e:	2201      	movs	r2, #1
 8009c40:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8009c42:	4b09      	ldr	r3, [pc, #36]	; (8009c68 <MX_SAI2_Init+0x148>)
 8009c44:	2200      	movs	r2, #0
 8009c46:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8009c48:	4807      	ldr	r0, [pc, #28]	; (8009c68 <MX_SAI2_Init+0x148>)
 8009c4a:	f7fb fd05 	bl	8005658 <HAL_SAI_Init>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d001      	beq.n	8009c58 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8009c54:	f000 fd9e 	bl	800a794 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8009c58:	bf00      	nop
 8009c5a:	bd80      	pop	{r7, pc}
 8009c5c:	20000200 	.word	0x20000200
 8009c60:	40015c04 	.word	0x40015c04
 8009c64:	0002ee00 	.word	0x0002ee00
 8009c68:	20000040 	.word	0x20000040
 8009c6c:	40015c24 	.word	0x40015c24

08009c70 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8009c74:	4b15      	ldr	r3, [pc, #84]	; (8009ccc <MX_SPDIFRX_Init+0x5c>)
 8009c76:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8009c7a:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8009c7c:	4b13      	ldr	r3, [pc, #76]	; (8009ccc <MX_SPDIFRX_Init+0x5c>)
 8009c7e:	2200      	movs	r2, #0
 8009c80:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8009c82:	4b12      	ldr	r3, [pc, #72]	; (8009ccc <MX_SPDIFRX_Init+0x5c>)
 8009c84:	2200      	movs	r2, #0
 8009c86:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8009c88:	4b10      	ldr	r3, [pc, #64]	; (8009ccc <MX_SPDIFRX_Init+0x5c>)
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8009c8e:	4b0f      	ldr	r3, [pc, #60]	; (8009ccc <MX_SPDIFRX_Init+0x5c>)
 8009c90:	2200      	movs	r2, #0
 8009c92:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8009c94:	4b0d      	ldr	r3, [pc, #52]	; (8009ccc <MX_SPDIFRX_Init+0x5c>)
 8009c96:	2200      	movs	r2, #0
 8009c98:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8009c9a:	4b0c      	ldr	r3, [pc, #48]	; (8009ccc <MX_SPDIFRX_Init+0x5c>)
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8009ca0:	4b0a      	ldr	r3, [pc, #40]	; (8009ccc <MX_SPDIFRX_Init+0x5c>)
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8009ca6:	4b09      	ldr	r3, [pc, #36]	; (8009ccc <MX_SPDIFRX_Init+0x5c>)
 8009ca8:	2200      	movs	r2, #0
 8009caa:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8009cac:	4b07      	ldr	r3, [pc, #28]	; (8009ccc <MX_SPDIFRX_Init+0x5c>)
 8009cae:	2200      	movs	r2, #0
 8009cb0:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8009cb2:	4b06      	ldr	r3, [pc, #24]	; (8009ccc <MX_SPDIFRX_Init+0x5c>)
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8009cb8:	4804      	ldr	r0, [pc, #16]	; (8009ccc <MX_SPDIFRX_Init+0x5c>)
 8009cba:	f7fb fea9 	bl	8005a10 <HAL_SPDIFRX_Init>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d001      	beq.n	8009cc8 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8009cc4:	f000 fd66 	bl	800a794 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8009cc8:	bf00      	nop
 8009cca:	bd80      	pop	{r7, pc}
 8009ccc:	200001b4 	.word	0x200001b4

08009cd0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8009cd4:	4b1b      	ldr	r3, [pc, #108]	; (8009d44 <MX_SPI2_Init+0x74>)
 8009cd6:	4a1c      	ldr	r2, [pc, #112]	; (8009d48 <MX_SPI2_Init+0x78>)
 8009cd8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8009cda:	4b1a      	ldr	r3, [pc, #104]	; (8009d44 <MX_SPI2_Init+0x74>)
 8009cdc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009ce0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8009ce2:	4b18      	ldr	r3, [pc, #96]	; (8009d44 <MX_SPI2_Init+0x74>)
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8009ce8:	4b16      	ldr	r3, [pc, #88]	; (8009d44 <MX_SPI2_Init+0x74>)
 8009cea:	f44f 7240 	mov.w	r2, #768	; 0x300
 8009cee:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009cf0:	4b14      	ldr	r3, [pc, #80]	; (8009d44 <MX_SPI2_Init+0x74>)
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009cf6:	4b13      	ldr	r3, [pc, #76]	; (8009d44 <MX_SPI2_Init+0x74>)
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8009cfc:	4b11      	ldr	r3, [pc, #68]	; (8009d44 <MX_SPI2_Init+0x74>)
 8009cfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d02:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009d04:	4b0f      	ldr	r3, [pc, #60]	; (8009d44 <MX_SPI2_Init+0x74>)
 8009d06:	2200      	movs	r2, #0
 8009d08:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009d0a:	4b0e      	ldr	r3, [pc, #56]	; (8009d44 <MX_SPI2_Init+0x74>)
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8009d10:	4b0c      	ldr	r3, [pc, #48]	; (8009d44 <MX_SPI2_Init+0x74>)
 8009d12:	2200      	movs	r2, #0
 8009d14:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009d16:	4b0b      	ldr	r3, [pc, #44]	; (8009d44 <MX_SPI2_Init+0x74>)
 8009d18:	2200      	movs	r2, #0
 8009d1a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8009d1c:	4b09      	ldr	r3, [pc, #36]	; (8009d44 <MX_SPI2_Init+0x74>)
 8009d1e:	2207      	movs	r2, #7
 8009d20:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8009d22:	4b08      	ldr	r3, [pc, #32]	; (8009d44 <MX_SPI2_Init+0x74>)
 8009d24:	2200      	movs	r2, #0
 8009d26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8009d28:	4b06      	ldr	r3, [pc, #24]	; (8009d44 <MX_SPI2_Init+0x74>)
 8009d2a:	2208      	movs	r2, #8
 8009d2c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8009d2e:	4805      	ldr	r0, [pc, #20]	; (8009d44 <MX_SPI2_Init+0x74>)
 8009d30:	f7fb feca 	bl	8005ac8 <HAL_SPI_Init>
 8009d34:	4603      	mov	r3, r0
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d001      	beq.n	8009d3e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8009d3a:	f000 fd2b 	bl	800a794 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8009d3e:	bf00      	nop
 8009d40:	bd80      	pop	{r7, pc}
 8009d42:	bf00      	nop
 8009d44:	20000110 	.word	0x20000110
 8009d48:	40003800 	.word	0x40003800

08009d4c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b09a      	sub	sp, #104	; 0x68
 8009d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009d52:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009d56:	2200      	movs	r2, #0
 8009d58:	601a      	str	r2, [r3, #0]
 8009d5a:	605a      	str	r2, [r3, #4]
 8009d5c:	609a      	str	r2, [r3, #8]
 8009d5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009d60:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009d64:	2200      	movs	r2, #0
 8009d66:	601a      	str	r2, [r3, #0]
 8009d68:	605a      	str	r2, [r3, #4]
 8009d6a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009d6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009d70:	2200      	movs	r2, #0
 8009d72:	601a      	str	r2, [r3, #0]
 8009d74:	605a      	str	r2, [r3, #4]
 8009d76:	609a      	str	r2, [r3, #8]
 8009d78:	60da      	str	r2, [r3, #12]
 8009d7a:	611a      	str	r2, [r3, #16]
 8009d7c:	615a      	str	r2, [r3, #20]
 8009d7e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8009d80:	1d3b      	adds	r3, r7, #4
 8009d82:	222c      	movs	r2, #44	; 0x2c
 8009d84:	2100      	movs	r1, #0
 8009d86:	4618      	mov	r0, r3
 8009d88:	f001 feba 	bl	800bb00 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8009d8c:	4b43      	ldr	r3, [pc, #268]	; (8009e9c <MX_TIM1_Init+0x150>)
 8009d8e:	4a44      	ldr	r2, [pc, #272]	; (8009ea0 <MX_TIM1_Init+0x154>)
 8009d90:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8009d92:	4b42      	ldr	r3, [pc, #264]	; (8009e9c <MX_TIM1_Init+0x150>)
 8009d94:	2200      	movs	r2, #0
 8009d96:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009d98:	4b40      	ldr	r3, [pc, #256]	; (8009e9c <MX_TIM1_Init+0x150>)
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8009d9e:	4b3f      	ldr	r3, [pc, #252]	; (8009e9c <MX_TIM1_Init+0x150>)
 8009da0:	2200      	movs	r2, #0
 8009da2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009da4:	4b3d      	ldr	r3, [pc, #244]	; (8009e9c <MX_TIM1_Init+0x150>)
 8009da6:	2200      	movs	r2, #0
 8009da8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8009daa:	4b3c      	ldr	r3, [pc, #240]	; (8009e9c <MX_TIM1_Init+0x150>)
 8009dac:	2200      	movs	r2, #0
 8009dae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009db0:	4b3a      	ldr	r3, [pc, #232]	; (8009e9c <MX_TIM1_Init+0x150>)
 8009db2:	2200      	movs	r2, #0
 8009db4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8009db6:	4839      	ldr	r0, [pc, #228]	; (8009e9c <MX_TIM1_Init+0x150>)
 8009db8:	f7fb ff18 	bl	8005bec <HAL_TIM_Base_Init>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d001      	beq.n	8009dc6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8009dc2:	f000 fce7 	bl	800a794 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009dc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009dca:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8009dcc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	4832      	ldr	r0, [pc, #200]	; (8009e9c <MX_TIM1_Init+0x150>)
 8009dd4:	f7fc f9c2 	bl	800615c <HAL_TIM_ConfigClockSource>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d001      	beq.n	8009de2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8009dde:	f000 fcd9 	bl	800a794 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8009de2:	482e      	ldr	r0, [pc, #184]	; (8009e9c <MX_TIM1_Init+0x150>)
 8009de4:	f7fb ff58 	bl	8005c98 <HAL_TIM_PWM_Init>
 8009de8:	4603      	mov	r3, r0
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d001      	beq.n	8009df2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8009dee:	f000 fcd1 	bl	800a794 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009df2:	2300      	movs	r3, #0
 8009df4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8009df6:	2300      	movs	r3, #0
 8009df8:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8009dfe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009e02:	4619      	mov	r1, r3
 8009e04:	4825      	ldr	r0, [pc, #148]	; (8009e9c <MX_TIM1_Init+0x150>)
 8009e06:	f7fc fe23 	bl	8006a50 <HAL_TIMEx_MasterConfigSynchronization>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d001      	beq.n	8009e14 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8009e10:	f000 fcc0 	bl	800a794 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009e14:	2360      	movs	r3, #96	; 0x60
 8009e16:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009e20:	2300      	movs	r3, #0
 8009e22:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009e24:	2300      	movs	r3, #0
 8009e26:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009e30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009e34:	2200      	movs	r2, #0
 8009e36:	4619      	mov	r1, r3
 8009e38:	4818      	ldr	r0, [pc, #96]	; (8009e9c <MX_TIM1_Init+0x150>)
 8009e3a:	f7fc f877 	bl	8005f2c <HAL_TIM_PWM_ConfigChannel>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d001      	beq.n	8009e48 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8009e44:	f000 fca6 	bl	800a794 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8009e50:	2300      	movs	r3, #0
 8009e52:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8009e54:	2300      	movs	r3, #0
 8009e56:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009e5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009e60:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8009e62:	2300      	movs	r3, #0
 8009e64:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8009e66:	2300      	movs	r3, #0
 8009e68:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8009e6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009e6e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8009e70:	2300      	movs	r3, #0
 8009e72:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009e74:	2300      	movs	r3, #0
 8009e76:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8009e78:	1d3b      	adds	r3, r7, #4
 8009e7a:	4619      	mov	r1, r3
 8009e7c:	4807      	ldr	r0, [pc, #28]	; (8009e9c <MX_TIM1_Init+0x150>)
 8009e7e:	f7fc fe43 	bl	8006b08 <HAL_TIMEx_ConfigBreakDeadTime>
 8009e82:	4603      	mov	r3, r0
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d001      	beq.n	8009e8c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8009e88:	f000 fc84 	bl	800a794 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8009e8c:	4803      	ldr	r0, [pc, #12]	; (8009e9c <MX_TIM1_Init+0x150>)
 8009e8e:	f001 f927 	bl	800b0e0 <HAL_TIM_MspPostInit>

}
 8009e92:	bf00      	nop
 8009e94:	3768      	adds	r7, #104	; 0x68
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
 8009e9a:	bf00      	nop
 8009e9c:	200005d8 	.word	0x200005d8
 8009ea0:	40010000 	.word	0x40010000

08009ea4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b08e      	sub	sp, #56	; 0x38
 8009ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009eaa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009eae:	2200      	movs	r2, #0
 8009eb0:	601a      	str	r2, [r3, #0]
 8009eb2:	605a      	str	r2, [r3, #4]
 8009eb4:	609a      	str	r2, [r3, #8]
 8009eb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009eb8:	f107 031c 	add.w	r3, r7, #28
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	601a      	str	r2, [r3, #0]
 8009ec0:	605a      	str	r2, [r3, #4]
 8009ec2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009ec4:	463b      	mov	r3, r7
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	601a      	str	r2, [r3, #0]
 8009eca:	605a      	str	r2, [r3, #4]
 8009ecc:	609a      	str	r2, [r3, #8]
 8009ece:	60da      	str	r2, [r3, #12]
 8009ed0:	611a      	str	r2, [r3, #16]
 8009ed2:	615a      	str	r2, [r3, #20]
 8009ed4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8009ed6:	4b2d      	ldr	r3, [pc, #180]	; (8009f8c <MX_TIM2_Init+0xe8>)
 8009ed8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009edc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8009ede:	4b2b      	ldr	r3, [pc, #172]	; (8009f8c <MX_TIM2_Init+0xe8>)
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009ee4:	4b29      	ldr	r3, [pc, #164]	; (8009f8c <MX_TIM2_Init+0xe8>)
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8009eea:	4b28      	ldr	r3, [pc, #160]	; (8009f8c <MX_TIM2_Init+0xe8>)
 8009eec:	2200      	movs	r2, #0
 8009eee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009ef0:	4b26      	ldr	r3, [pc, #152]	; (8009f8c <MX_TIM2_Init+0xe8>)
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009ef6:	4b25      	ldr	r3, [pc, #148]	; (8009f8c <MX_TIM2_Init+0xe8>)
 8009ef8:	2200      	movs	r2, #0
 8009efa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8009efc:	4823      	ldr	r0, [pc, #140]	; (8009f8c <MX_TIM2_Init+0xe8>)
 8009efe:	f7fb fe75 	bl	8005bec <HAL_TIM_Base_Init>
 8009f02:	4603      	mov	r3, r0
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d001      	beq.n	8009f0c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8009f08:	f000 fc44 	bl	800a794 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009f0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f10:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8009f12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009f16:	4619      	mov	r1, r3
 8009f18:	481c      	ldr	r0, [pc, #112]	; (8009f8c <MX_TIM2_Init+0xe8>)
 8009f1a:	f7fc f91f 	bl	800615c <HAL_TIM_ConfigClockSource>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d001      	beq.n	8009f28 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8009f24:	f000 fc36 	bl	800a794 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8009f28:	4818      	ldr	r0, [pc, #96]	; (8009f8c <MX_TIM2_Init+0xe8>)
 8009f2a:	f7fb feb5 	bl	8005c98 <HAL_TIM_PWM_Init>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d001      	beq.n	8009f38 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8009f34:	f000 fc2e 	bl	800a794 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009f40:	f107 031c 	add.w	r3, r7, #28
 8009f44:	4619      	mov	r1, r3
 8009f46:	4811      	ldr	r0, [pc, #68]	; (8009f8c <MX_TIM2_Init+0xe8>)
 8009f48:	f7fc fd82 	bl	8006a50 <HAL_TIMEx_MasterConfigSynchronization>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d001      	beq.n	8009f56 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8009f52:	f000 fc1f 	bl	800a794 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009f56:	2360      	movs	r3, #96	; 0x60
 8009f58:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009f62:	2300      	movs	r3, #0
 8009f64:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009f66:	463b      	mov	r3, r7
 8009f68:	2200      	movs	r2, #0
 8009f6a:	4619      	mov	r1, r3
 8009f6c:	4807      	ldr	r0, [pc, #28]	; (8009f8c <MX_TIM2_Init+0xe8>)
 8009f6e:	f7fb ffdd 	bl	8005f2c <HAL_TIM_PWM_ConfigChannel>
 8009f72:	4603      	mov	r3, r0
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d001      	beq.n	8009f7c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8009f78:	f000 fc0c 	bl	800a794 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8009f7c:	4803      	ldr	r0, [pc, #12]	; (8009f8c <MX_TIM2_Init+0xe8>)
 8009f7e:	f001 f8af 	bl	800b0e0 <HAL_TIM_MspPostInit>

}
 8009f82:	bf00      	nop
 8009f84:	3738      	adds	r7, #56	; 0x38
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}
 8009f8a:	bf00      	nop
 8009f8c:	200006d8 	.word	0x200006d8

08009f90 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b08e      	sub	sp, #56	; 0x38
 8009f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009f96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	601a      	str	r2, [r3, #0]
 8009f9e:	605a      	str	r2, [r3, #4]
 8009fa0:	609a      	str	r2, [r3, #8]
 8009fa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009fa4:	f107 031c 	add.w	r3, r7, #28
 8009fa8:	2200      	movs	r2, #0
 8009faa:	601a      	str	r2, [r3, #0]
 8009fac:	605a      	str	r2, [r3, #4]
 8009fae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009fb0:	463b      	mov	r3, r7
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	601a      	str	r2, [r3, #0]
 8009fb6:	605a      	str	r2, [r3, #4]
 8009fb8:	609a      	str	r2, [r3, #8]
 8009fba:	60da      	str	r2, [r3, #12]
 8009fbc:	611a      	str	r2, [r3, #16]
 8009fbe:	615a      	str	r2, [r3, #20]
 8009fc0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8009fc2:	4b2c      	ldr	r3, [pc, #176]	; (800a074 <MX_TIM3_Init+0xe4>)
 8009fc4:	4a2c      	ldr	r2, [pc, #176]	; (800a078 <MX_TIM3_Init+0xe8>)
 8009fc6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8009fc8:	4b2a      	ldr	r3, [pc, #168]	; (800a074 <MX_TIM3_Init+0xe4>)
 8009fca:	2200      	movs	r2, #0
 8009fcc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009fce:	4b29      	ldr	r3, [pc, #164]	; (800a074 <MX_TIM3_Init+0xe4>)
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8009fd4:	4b27      	ldr	r3, [pc, #156]	; (800a074 <MX_TIM3_Init+0xe4>)
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009fda:	4b26      	ldr	r3, [pc, #152]	; (800a074 <MX_TIM3_Init+0xe4>)
 8009fdc:	2200      	movs	r2, #0
 8009fde:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009fe0:	4b24      	ldr	r3, [pc, #144]	; (800a074 <MX_TIM3_Init+0xe4>)
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8009fe6:	4823      	ldr	r0, [pc, #140]	; (800a074 <MX_TIM3_Init+0xe4>)
 8009fe8:	f7fb fe00 	bl	8005bec <HAL_TIM_Base_Init>
 8009fec:	4603      	mov	r3, r0
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d001      	beq.n	8009ff6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8009ff2:	f000 fbcf 	bl	800a794 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009ff6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ffa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8009ffc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a000:	4619      	mov	r1, r3
 800a002:	481c      	ldr	r0, [pc, #112]	; (800a074 <MX_TIM3_Init+0xe4>)
 800a004:	f7fc f8aa 	bl	800615c <HAL_TIM_ConfigClockSource>
 800a008:	4603      	mov	r3, r0
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d001      	beq.n	800a012 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800a00e:	f000 fbc1 	bl	800a794 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800a012:	4818      	ldr	r0, [pc, #96]	; (800a074 <MX_TIM3_Init+0xe4>)
 800a014:	f7fb fe40 	bl	8005c98 <HAL_TIM_PWM_Init>
 800a018:	4603      	mov	r3, r0
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d001      	beq.n	800a022 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800a01e:	f000 fbb9 	bl	800a794 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a022:	2300      	movs	r3, #0
 800a024:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a026:	2300      	movs	r3, #0
 800a028:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800a02a:	f107 031c 	add.w	r3, r7, #28
 800a02e:	4619      	mov	r1, r3
 800a030:	4810      	ldr	r0, [pc, #64]	; (800a074 <MX_TIM3_Init+0xe4>)
 800a032:	f7fc fd0d 	bl	8006a50 <HAL_TIMEx_MasterConfigSynchronization>
 800a036:	4603      	mov	r3, r0
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d001      	beq.n	800a040 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800a03c:	f000 fbaa 	bl	800a794 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a040:	2360      	movs	r3, #96	; 0x60
 800a042:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800a044:	2300      	movs	r3, #0
 800a046:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a048:	2300      	movs	r3, #0
 800a04a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a04c:	2300      	movs	r3, #0
 800a04e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a050:	463b      	mov	r3, r7
 800a052:	2200      	movs	r2, #0
 800a054:	4619      	mov	r1, r3
 800a056:	4807      	ldr	r0, [pc, #28]	; (800a074 <MX_TIM3_Init+0xe4>)
 800a058:	f7fb ff68 	bl	8005f2c <HAL_TIM_PWM_ConfigChannel>
 800a05c:	4603      	mov	r3, r0
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d001      	beq.n	800a066 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800a062:	f000 fb97 	bl	800a794 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800a066:	4803      	ldr	r0, [pc, #12]	; (800a074 <MX_TIM3_Init+0xe4>)
 800a068:	f001 f83a 	bl	800b0e0 <HAL_TIM_MspPostInit>

}
 800a06c:	bf00      	nop
 800a06e:	3738      	adds	r7, #56	; 0x38
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}
 800a074:	200003b8 	.word	0x200003b8
 800a078:	40000400 	.word	0x40000400

0800a07c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b08e      	sub	sp, #56	; 0x38
 800a080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a082:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a086:	2200      	movs	r2, #0
 800a088:	601a      	str	r2, [r3, #0]
 800a08a:	605a      	str	r2, [r3, #4]
 800a08c:	609a      	str	r2, [r3, #8]
 800a08e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a090:	f107 031c 	add.w	r3, r7, #28
 800a094:	2200      	movs	r2, #0
 800a096:	601a      	str	r2, [r3, #0]
 800a098:	605a      	str	r2, [r3, #4]
 800a09a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a09c:	463b      	mov	r3, r7
 800a09e:	2200      	movs	r2, #0
 800a0a0:	601a      	str	r2, [r3, #0]
 800a0a2:	605a      	str	r2, [r3, #4]
 800a0a4:	609a      	str	r2, [r3, #8]
 800a0a6:	60da      	str	r2, [r3, #12]
 800a0a8:	611a      	str	r2, [r3, #16]
 800a0aa:	615a      	str	r2, [r3, #20]
 800a0ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800a0ae:	4b2c      	ldr	r3, [pc, #176]	; (800a160 <MX_TIM5_Init+0xe4>)
 800a0b0:	4a2c      	ldr	r2, [pc, #176]	; (800a164 <MX_TIM5_Init+0xe8>)
 800a0b2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800a0b4:	4b2a      	ldr	r3, [pc, #168]	; (800a160 <MX_TIM5_Init+0xe4>)
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a0ba:	4b29      	ldr	r3, [pc, #164]	; (800a160 <MX_TIM5_Init+0xe4>)
 800a0bc:	2200      	movs	r2, #0
 800a0be:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 800a0c0:	4b27      	ldr	r3, [pc, #156]	; (800a160 <MX_TIM5_Init+0xe4>)
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a0c6:	4b26      	ldr	r3, [pc, #152]	; (800a160 <MX_TIM5_Init+0xe4>)
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a0cc:	4b24      	ldr	r3, [pc, #144]	; (800a160 <MX_TIM5_Init+0xe4>)
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800a0d2:	4823      	ldr	r0, [pc, #140]	; (800a160 <MX_TIM5_Init+0xe4>)
 800a0d4:	f7fb fd8a 	bl	8005bec <HAL_TIM_Base_Init>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d001      	beq.n	800a0e2 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800a0de:	f000 fb59 	bl	800a794 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a0e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a0e6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800a0e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	481c      	ldr	r0, [pc, #112]	; (800a160 <MX_TIM5_Init+0xe4>)
 800a0f0:	f7fc f834 	bl	800615c <HAL_TIM_ConfigClockSource>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d001      	beq.n	800a0fe <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800a0fa:	f000 fb4b 	bl	800a794 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800a0fe:	4818      	ldr	r0, [pc, #96]	; (800a160 <MX_TIM5_Init+0xe4>)
 800a100:	f7fb fdca 	bl	8005c98 <HAL_TIM_PWM_Init>
 800a104:	4603      	mov	r3, r0
 800a106:	2b00      	cmp	r3, #0
 800a108:	d001      	beq.n	800a10e <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800a10a:	f000 fb43 	bl	800a794 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a10e:	2300      	movs	r3, #0
 800a110:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a112:	2300      	movs	r3, #0
 800a114:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800a116:	f107 031c 	add.w	r3, r7, #28
 800a11a:	4619      	mov	r1, r3
 800a11c:	4810      	ldr	r0, [pc, #64]	; (800a160 <MX_TIM5_Init+0xe4>)
 800a11e:	f7fc fc97 	bl	8006a50 <HAL_TIMEx_MasterConfigSynchronization>
 800a122:	4603      	mov	r3, r0
 800a124:	2b00      	cmp	r3, #0
 800a126:	d001      	beq.n	800a12c <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800a128:	f000 fb34 	bl	800a794 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a12c:	2360      	movs	r3, #96	; 0x60
 800a12e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800a130:	2300      	movs	r3, #0
 800a132:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a134:	2300      	movs	r3, #0
 800a136:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a138:	2300      	movs	r3, #0
 800a13a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800a13c:	463b      	mov	r3, r7
 800a13e:	220c      	movs	r2, #12
 800a140:	4619      	mov	r1, r3
 800a142:	4807      	ldr	r0, [pc, #28]	; (800a160 <MX_TIM5_Init+0xe4>)
 800a144:	f7fb fef2 	bl	8005f2c <HAL_TIM_PWM_ConfigChannel>
 800a148:	4603      	mov	r3, r0
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d001      	beq.n	800a152 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800a14e:	f000 fb21 	bl	800a794 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800a152:	4803      	ldr	r0, [pc, #12]	; (800a160 <MX_TIM5_Init+0xe4>)
 800a154:	f000 ffc4 	bl	800b0e0 <HAL_TIM_MspPostInit>

}
 800a158:	bf00      	nop
 800a15a:	3738      	adds	r7, #56	; 0x38
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}
 800a160:	20000378 	.word	0x20000378
 800a164:	40000c00 	.word	0x40000c00

0800a168 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b088      	sub	sp, #32
 800a16c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a16e:	f107 0310 	add.w	r3, r7, #16
 800a172:	2200      	movs	r2, #0
 800a174:	601a      	str	r2, [r3, #0]
 800a176:	605a      	str	r2, [r3, #4]
 800a178:	609a      	str	r2, [r3, #8]
 800a17a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a17c:	1d3b      	adds	r3, r7, #4
 800a17e:	2200      	movs	r2, #0
 800a180:	601a      	str	r2, [r3, #0]
 800a182:	605a      	str	r2, [r3, #4]
 800a184:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800a186:	4b1f      	ldr	r3, [pc, #124]	; (800a204 <MX_TIM8_Init+0x9c>)
 800a188:	4a1f      	ldr	r2, [pc, #124]	; (800a208 <MX_TIM8_Init+0xa0>)
 800a18a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800a18c:	4b1d      	ldr	r3, [pc, #116]	; (800a204 <MX_TIM8_Init+0x9c>)
 800a18e:	2200      	movs	r2, #0
 800a190:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a192:	4b1c      	ldr	r3, [pc, #112]	; (800a204 <MX_TIM8_Init+0x9c>)
 800a194:	2200      	movs	r2, #0
 800a196:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 800a198:	4b1a      	ldr	r3, [pc, #104]	; (800a204 <MX_TIM8_Init+0x9c>)
 800a19a:	2200      	movs	r2, #0
 800a19c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a19e:	4b19      	ldr	r3, [pc, #100]	; (800a204 <MX_TIM8_Init+0x9c>)
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800a1a4:	4b17      	ldr	r3, [pc, #92]	; (800a204 <MX_TIM8_Init+0x9c>)
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a1aa:	4b16      	ldr	r3, [pc, #88]	; (800a204 <MX_TIM8_Init+0x9c>)
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800a1b0:	4814      	ldr	r0, [pc, #80]	; (800a204 <MX_TIM8_Init+0x9c>)
 800a1b2:	f7fb fd1b 	bl	8005bec <HAL_TIM_Base_Init>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d001      	beq.n	800a1c0 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 800a1bc:	f000 faea 	bl	800a794 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a1c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a1c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800a1c6:	f107 0310 	add.w	r3, r7, #16
 800a1ca:	4619      	mov	r1, r3
 800a1cc:	480d      	ldr	r0, [pc, #52]	; (800a204 <MX_TIM8_Init+0x9c>)
 800a1ce:	f7fb ffc5 	bl	800615c <HAL_TIM_ConfigClockSource>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d001      	beq.n	800a1dc <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 800a1d8:	f000 fadc 	bl	800a794 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800a1e8:	1d3b      	adds	r3, r7, #4
 800a1ea:	4619      	mov	r1, r3
 800a1ec:	4805      	ldr	r0, [pc, #20]	; (800a204 <MX_TIM8_Init+0x9c>)
 800a1ee:	f7fc fc2f 	bl	8006a50 <HAL_TIMEx_MasterConfigSynchronization>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d001      	beq.n	800a1fc <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 800a1f8:	f000 facc 	bl	800a794 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800a1fc:	bf00      	nop
 800a1fe:	3720      	adds	r7, #32
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}
 800a204:	20000174 	.word	0x20000174
 800a208:	40010400 	.word	0x40010400

0800a20c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b088      	sub	sp, #32
 800a210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800a212:	1d3b      	adds	r3, r7, #4
 800a214:	2200      	movs	r2, #0
 800a216:	601a      	str	r2, [r3, #0]
 800a218:	605a      	str	r2, [r3, #4]
 800a21a:	609a      	str	r2, [r3, #8]
 800a21c:	60da      	str	r2, [r3, #12]
 800a21e:	611a      	str	r2, [r3, #16]
 800a220:	615a      	str	r2, [r3, #20]
 800a222:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800a224:	4b19      	ldr	r3, [pc, #100]	; (800a28c <MX_TIM12_Init+0x80>)
 800a226:	4a1a      	ldr	r2, [pc, #104]	; (800a290 <MX_TIM12_Init+0x84>)
 800a228:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800a22a:	4b18      	ldr	r3, [pc, #96]	; (800a28c <MX_TIM12_Init+0x80>)
 800a22c:	2200      	movs	r2, #0
 800a22e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a230:	4b16      	ldr	r3, [pc, #88]	; (800a28c <MX_TIM12_Init+0x80>)
 800a232:	2200      	movs	r2, #0
 800a234:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 800a236:	4b15      	ldr	r3, [pc, #84]	; (800a28c <MX_TIM12_Init+0x80>)
 800a238:	2200      	movs	r2, #0
 800a23a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a23c:	4b13      	ldr	r3, [pc, #76]	; (800a28c <MX_TIM12_Init+0x80>)
 800a23e:	2200      	movs	r2, #0
 800a240:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a242:	4b12      	ldr	r3, [pc, #72]	; (800a28c <MX_TIM12_Init+0x80>)
 800a244:	2200      	movs	r2, #0
 800a246:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800a248:	4810      	ldr	r0, [pc, #64]	; (800a28c <MX_TIM12_Init+0x80>)
 800a24a:	f7fb fd25 	bl	8005c98 <HAL_TIM_PWM_Init>
 800a24e:	4603      	mov	r3, r0
 800a250:	2b00      	cmp	r3, #0
 800a252:	d001      	beq.n	800a258 <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 800a254:	f000 fa9e 	bl	800a794 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a258:	2360      	movs	r3, #96	; 0x60
 800a25a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800a25c:	2300      	movs	r3, #0
 800a25e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a260:	2300      	movs	r3, #0
 800a262:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a264:	2300      	movs	r3, #0
 800a266:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a268:	1d3b      	adds	r3, r7, #4
 800a26a:	2200      	movs	r2, #0
 800a26c:	4619      	mov	r1, r3
 800a26e:	4807      	ldr	r0, [pc, #28]	; (800a28c <MX_TIM12_Init+0x80>)
 800a270:	f7fb fe5c 	bl	8005f2c <HAL_TIM_PWM_ConfigChannel>
 800a274:	4603      	mov	r3, r0
 800a276:	2b00      	cmp	r3, #0
 800a278:	d001      	beq.n	800a27e <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 800a27a:	f000 fa8b 	bl	800a794 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800a27e:	4803      	ldr	r0, [pc, #12]	; (800a28c <MX_TIM12_Init+0x80>)
 800a280:	f000 ff2e 	bl	800b0e0 <HAL_TIM_MspPostInit>

}
 800a284:	bf00      	nop
 800a286:	3720      	adds	r7, #32
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}
 800a28c:	20000718 	.word	0x20000718
 800a290:	40001800 	.word	0x40001800

0800a294 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800a298:	4b14      	ldr	r3, [pc, #80]	; (800a2ec <MX_USART1_UART_Init+0x58>)
 800a29a:	4a15      	ldr	r2, [pc, #84]	; (800a2f0 <MX_USART1_UART_Init+0x5c>)
 800a29c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800a29e:	4b13      	ldr	r3, [pc, #76]	; (800a2ec <MX_USART1_UART_Init+0x58>)
 800a2a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a2a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a2a6:	4b11      	ldr	r3, [pc, #68]	; (800a2ec <MX_USART1_UART_Init+0x58>)
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a2ac:	4b0f      	ldr	r3, [pc, #60]	; (800a2ec <MX_USART1_UART_Init+0x58>)
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a2b2:	4b0e      	ldr	r3, [pc, #56]	; (800a2ec <MX_USART1_UART_Init+0x58>)
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a2b8:	4b0c      	ldr	r3, [pc, #48]	; (800a2ec <MX_USART1_UART_Init+0x58>)
 800a2ba:	220c      	movs	r2, #12
 800a2bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a2be:	4b0b      	ldr	r3, [pc, #44]	; (800a2ec <MX_USART1_UART_Init+0x58>)
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a2c4:	4b09      	ldr	r3, [pc, #36]	; (800a2ec <MX_USART1_UART_Init+0x58>)
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a2ca:	4b08      	ldr	r3, [pc, #32]	; (800a2ec <MX_USART1_UART_Init+0x58>)
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a2d0:	4b06      	ldr	r3, [pc, #24]	; (800a2ec <MX_USART1_UART_Init+0x58>)
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a2d6:	4805      	ldr	r0, [pc, #20]	; (800a2ec <MX_USART1_UART_Init+0x58>)
 800a2d8:	f7fc fcb2 	bl	8006c40 <HAL_UART_Init>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d001      	beq.n	800a2e6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800a2e2:	f000 fa57 	bl	800a794 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800a2e6:	bf00      	nop
 800a2e8:	bd80      	pop	{r7, pc}
 800a2ea:	bf00      	nop
 800a2ec:	20000538 	.word	0x20000538
 800a2f0:	40011000 	.word	0x40011000

0800a2f4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800a2f8:	4b14      	ldr	r3, [pc, #80]	; (800a34c <MX_USART6_UART_Init+0x58>)
 800a2fa:	4a15      	ldr	r2, [pc, #84]	; (800a350 <MX_USART6_UART_Init+0x5c>)
 800a2fc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800a2fe:	4b13      	ldr	r3, [pc, #76]	; (800a34c <MX_USART6_UART_Init+0x58>)
 800a300:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a304:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800a306:	4b11      	ldr	r3, [pc, #68]	; (800a34c <MX_USART6_UART_Init+0x58>)
 800a308:	2200      	movs	r2, #0
 800a30a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800a30c:	4b0f      	ldr	r3, [pc, #60]	; (800a34c <MX_USART6_UART_Init+0x58>)
 800a30e:	2200      	movs	r2, #0
 800a310:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800a312:	4b0e      	ldr	r3, [pc, #56]	; (800a34c <MX_USART6_UART_Init+0x58>)
 800a314:	2200      	movs	r2, #0
 800a316:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800a318:	4b0c      	ldr	r3, [pc, #48]	; (800a34c <MX_USART6_UART_Init+0x58>)
 800a31a:	220c      	movs	r2, #12
 800a31c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a31e:	4b0b      	ldr	r3, [pc, #44]	; (800a34c <MX_USART6_UART_Init+0x58>)
 800a320:	2200      	movs	r2, #0
 800a322:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800a324:	4b09      	ldr	r3, [pc, #36]	; (800a34c <MX_USART6_UART_Init+0x58>)
 800a326:	2200      	movs	r2, #0
 800a328:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a32a:	4b08      	ldr	r3, [pc, #32]	; (800a34c <MX_USART6_UART_Init+0x58>)
 800a32c:	2200      	movs	r2, #0
 800a32e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a330:	4b06      	ldr	r3, [pc, #24]	; (800a34c <MX_USART6_UART_Init+0x58>)
 800a332:	2200      	movs	r2, #0
 800a334:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800a336:	4805      	ldr	r0, [pc, #20]	; (800a34c <MX_USART6_UART_Init+0x58>)
 800a338:	f7fc fc82 	bl	8006c40 <HAL_UART_Init>
 800a33c:	4603      	mov	r3, r0
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d001      	beq.n	800a346 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800a342:	f000 fa27 	bl	800a794 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800a346:	bf00      	nop
 800a348:	bd80      	pop	{r7, pc}
 800a34a:	bf00      	nop
 800a34c:	20000618 	.word	0x20000618
 800a350:	40011400 	.word	0x40011400

0800a354 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b088      	sub	sp, #32
 800a358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800a35a:	1d3b      	adds	r3, r7, #4
 800a35c:	2200      	movs	r2, #0
 800a35e:	601a      	str	r2, [r3, #0]
 800a360:	605a      	str	r2, [r3, #4]
 800a362:	609a      	str	r2, [r3, #8]
 800a364:	60da      	str	r2, [r3, #12]
 800a366:	611a      	str	r2, [r3, #16]
 800a368:	615a      	str	r2, [r3, #20]
 800a36a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800a36c:	4b1f      	ldr	r3, [pc, #124]	; (800a3ec <MX_FMC_Init+0x98>)
 800a36e:	4a20      	ldr	r2, [pc, #128]	; (800a3f0 <MX_FMC_Init+0x9c>)
 800a370:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800a372:	4b1e      	ldr	r3, [pc, #120]	; (800a3ec <MX_FMC_Init+0x98>)
 800a374:	2200      	movs	r2, #0
 800a376:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800a378:	4b1c      	ldr	r3, [pc, #112]	; (800a3ec <MX_FMC_Init+0x98>)
 800a37a:	2200      	movs	r2, #0
 800a37c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800a37e:	4b1b      	ldr	r3, [pc, #108]	; (800a3ec <MX_FMC_Init+0x98>)
 800a380:	2204      	movs	r2, #4
 800a382:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800a384:	4b19      	ldr	r3, [pc, #100]	; (800a3ec <MX_FMC_Init+0x98>)
 800a386:	2210      	movs	r2, #16
 800a388:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800a38a:	4b18      	ldr	r3, [pc, #96]	; (800a3ec <MX_FMC_Init+0x98>)
 800a38c:	2240      	movs	r2, #64	; 0x40
 800a38e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800a390:	4b16      	ldr	r3, [pc, #88]	; (800a3ec <MX_FMC_Init+0x98>)
 800a392:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800a396:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800a398:	4b14      	ldr	r3, [pc, #80]	; (800a3ec <MX_FMC_Init+0x98>)
 800a39a:	2200      	movs	r2, #0
 800a39c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800a39e:	4b13      	ldr	r3, [pc, #76]	; (800a3ec <MX_FMC_Init+0x98>)
 800a3a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a3a4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800a3a6:	4b11      	ldr	r3, [pc, #68]	; (800a3ec <MX_FMC_Init+0x98>)
 800a3a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a3ac:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800a3ae:	4b0f      	ldr	r3, [pc, #60]	; (800a3ec <MX_FMC_Init+0x98>)
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800a3b4:	2302      	movs	r3, #2
 800a3b6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800a3b8:	2307      	movs	r3, #7
 800a3ba:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 800a3bc:	2304      	movs	r3, #4
 800a3be:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800a3c0:	2307      	movs	r3, #7
 800a3c2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800a3c4:	2303      	movs	r3, #3
 800a3c6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800a3c8:	2302      	movs	r3, #2
 800a3ca:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800a3cc:	2302      	movs	r3, #2
 800a3ce:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800a3d0:	1d3b      	adds	r3, r7, #4
 800a3d2:	4619      	mov	r1, r3
 800a3d4:	4805      	ldr	r0, [pc, #20]	; (800a3ec <MX_FMC_Init+0x98>)
 800a3d6:	f7fb fae7 	bl	80059a8 <HAL_SDRAM_Init>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d001      	beq.n	800a3e4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800a3e0:	f000 f9d8 	bl	800a794 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800a3e4:	bf00      	nop
 800a3e6:	3720      	adds	r7, #32
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}
 800a3ec:	20000758 	.word	0x20000758
 800a3f0:	a0000140 	.word	0xa0000140

0800a3f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b090      	sub	sp, #64	; 0x40
 800a3f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a3fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a3fe:	2200      	movs	r2, #0
 800a400:	601a      	str	r2, [r3, #0]
 800a402:	605a      	str	r2, [r3, #4]
 800a404:	609a      	str	r2, [r3, #8]
 800a406:	60da      	str	r2, [r3, #12]
 800a408:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a40a:	4baf      	ldr	r3, [pc, #700]	; (800a6c8 <MX_GPIO_Init+0x2d4>)
 800a40c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a40e:	4aae      	ldr	r2, [pc, #696]	; (800a6c8 <MX_GPIO_Init+0x2d4>)
 800a410:	f043 0310 	orr.w	r3, r3, #16
 800a414:	6313      	str	r3, [r2, #48]	; 0x30
 800a416:	4bac      	ldr	r3, [pc, #688]	; (800a6c8 <MX_GPIO_Init+0x2d4>)
 800a418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a41a:	f003 0310 	and.w	r3, r3, #16
 800a41e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a420:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800a422:	4ba9      	ldr	r3, [pc, #676]	; (800a6c8 <MX_GPIO_Init+0x2d4>)
 800a424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a426:	4aa8      	ldr	r2, [pc, #672]	; (800a6c8 <MX_GPIO_Init+0x2d4>)
 800a428:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a42c:	6313      	str	r3, [r2, #48]	; 0x30
 800a42e:	4ba6      	ldr	r3, [pc, #664]	; (800a6c8 <MX_GPIO_Init+0x2d4>)
 800a430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a436:	627b      	str	r3, [r7, #36]	; 0x24
 800a438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a43a:	4ba3      	ldr	r3, [pc, #652]	; (800a6c8 <MX_GPIO_Init+0x2d4>)
 800a43c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a43e:	4aa2      	ldr	r2, [pc, #648]	; (800a6c8 <MX_GPIO_Init+0x2d4>)
 800a440:	f043 0302 	orr.w	r3, r3, #2
 800a444:	6313      	str	r3, [r2, #48]	; 0x30
 800a446:	4ba0      	ldr	r3, [pc, #640]	; (800a6c8 <MX_GPIO_Init+0x2d4>)
 800a448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a44a:	f003 0302 	and.w	r3, r3, #2
 800a44e:	623b      	str	r3, [r7, #32]
 800a450:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a452:	4b9d      	ldr	r3, [pc, #628]	; (800a6c8 <MX_GPIO_Init+0x2d4>)
 800a454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a456:	4a9c      	ldr	r2, [pc, #624]	; (800a6c8 <MX_GPIO_Init+0x2d4>)
 800a458:	f043 0308 	orr.w	r3, r3, #8
 800a45c:	6313      	str	r3, [r2, #48]	; 0x30
 800a45e:	4b9a      	ldr	r3, [pc, #616]	; (800a6c8 <MX_GPIO_Init+0x2d4>)
 800a460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a462:	f003 0308 	and.w	r3, r3, #8
 800a466:	61fb      	str	r3, [r7, #28]
 800a468:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a46a:	4b97      	ldr	r3, [pc, #604]	; (800a6c8 <MX_GPIO_Init+0x2d4>)
 800a46c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a46e:	4a96      	ldr	r2, [pc, #600]	; (800a6c8 <MX_GPIO_Init+0x2d4>)
 800a470:	f043 0304 	orr.w	r3, r3, #4
 800a474:	6313      	str	r3, [r2, #48]	; 0x30
 800a476:	4b94      	ldr	r3, [pc, #592]	; (800a6c8 <MX_GPIO_Init+0x2d4>)
 800a478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a47a:	f003 0304 	and.w	r3, r3, #4
 800a47e:	61bb      	str	r3, [r7, #24]
 800a480:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a482:	4b91      	ldr	r3, [pc, #580]	; (800a6c8 <MX_GPIO_Init+0x2d4>)
 800a484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a486:	4a90      	ldr	r2, [pc, #576]	; (800a6c8 <MX_GPIO_Init+0x2d4>)
 800a488:	f043 0301 	orr.w	r3, r3, #1
 800a48c:	6313      	str	r3, [r2, #48]	; 0x30
 800a48e:	4b8e      	ldr	r3, [pc, #568]	; (800a6c8 <MX_GPIO_Init+0x2d4>)
 800a490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a492:	f003 0301 	and.w	r3, r3, #1
 800a496:	617b      	str	r3, [r7, #20]
 800a498:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800a49a:	4b8b      	ldr	r3, [pc, #556]	; (800a6c8 <MX_GPIO_Init+0x2d4>)
 800a49c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a49e:	4a8a      	ldr	r2, [pc, #552]	; (800a6c8 <MX_GPIO_Init+0x2d4>)
 800a4a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a4a4:	6313      	str	r3, [r2, #48]	; 0x30
 800a4a6:	4b88      	ldr	r3, [pc, #544]	; (800a6c8 <MX_GPIO_Init+0x2d4>)
 800a4a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a4ae:	613b      	str	r3, [r7, #16]
 800a4b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800a4b2:	4b85      	ldr	r3, [pc, #532]	; (800a6c8 <MX_GPIO_Init+0x2d4>)
 800a4b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4b6:	4a84      	ldr	r2, [pc, #528]	; (800a6c8 <MX_GPIO_Init+0x2d4>)
 800a4b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a4bc:	6313      	str	r3, [r2, #48]	; 0x30
 800a4be:	4b82      	ldr	r3, [pc, #520]	; (800a6c8 <MX_GPIO_Init+0x2d4>)
 800a4c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4c6:	60fb      	str	r3, [r7, #12]
 800a4c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800a4ca:	4b7f      	ldr	r3, [pc, #508]	; (800a6c8 <MX_GPIO_Init+0x2d4>)
 800a4cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4ce:	4a7e      	ldr	r2, [pc, #504]	; (800a6c8 <MX_GPIO_Init+0x2d4>)
 800a4d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a4d4:	6313      	str	r3, [r2, #48]	; 0x30
 800a4d6:	4b7c      	ldr	r3, [pc, #496]	; (800a6c8 <MX_GPIO_Init+0x2d4>)
 800a4d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a4de:	60bb      	str	r3, [r7, #8]
 800a4e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800a4e2:	4b79      	ldr	r3, [pc, #484]	; (800a6c8 <MX_GPIO_Init+0x2d4>)
 800a4e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4e6:	4a78      	ldr	r2, [pc, #480]	; (800a6c8 <MX_GPIO_Init+0x2d4>)
 800a4e8:	f043 0320 	orr.w	r3, r3, #32
 800a4ec:	6313      	str	r3, [r2, #48]	; 0x30
 800a4ee:	4b76      	ldr	r3, [pc, #472]	; (800a6c8 <MX_GPIO_Init+0x2d4>)
 800a4f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4f2:	f003 0320 	and.w	r3, r3, #32
 800a4f6:	607b      	str	r3, [r7, #4]
 800a4f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a4fa:	4b73      	ldr	r3, [pc, #460]	; (800a6c8 <MX_GPIO_Init+0x2d4>)
 800a4fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4fe:	4a72      	ldr	r2, [pc, #456]	; (800a6c8 <MX_GPIO_Init+0x2d4>)
 800a500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a504:	6313      	str	r3, [r2, #48]	; 0x30
 800a506:	4b70      	ldr	r3, [pc, #448]	; (800a6c8 <MX_GPIO_Init+0x2d4>)
 800a508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a50a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a50e:	603b      	str	r3, [r7, #0]
 800a510:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800a512:	2201      	movs	r2, #1
 800a514:	2120      	movs	r1, #32
 800a516:	486d      	ldr	r0, [pc, #436]	; (800a6cc <MX_GPIO_Init+0x2d8>)
 800a518:	f7f7 f9ae 	bl	8001878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 800a51c:	2200      	movs	r2, #0
 800a51e:	210c      	movs	r1, #12
 800a520:	486b      	ldr	r0, [pc, #428]	; (800a6d0 <MX_GPIO_Init+0x2dc>)
 800a522:	f7f7 f9a9 	bl	8001878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800a526:	2201      	movs	r2, #1
 800a528:	2108      	movs	r1, #8
 800a52a:	486a      	ldr	r0, [pc, #424]	; (800a6d4 <MX_GPIO_Init+0x2e0>)
 800a52c:	f7f7 f9a4 	bl	8001878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800a530:	2201      	movs	r2, #1
 800a532:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a536:	4866      	ldr	r0, [pc, #408]	; (800a6d0 <MX_GPIO_Init+0x2dc>)
 800a538:	f7f7 f99e 	bl	8001878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800a53c:	2200      	movs	r2, #0
 800a53e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a542:	4865      	ldr	r0, [pc, #404]	; (800a6d8 <MX_GPIO_Init+0x2e4>)
 800a544:	f7f7 f998 	bl	8001878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800a548:	2200      	movs	r2, #0
 800a54a:	21c8      	movs	r1, #200	; 0xc8
 800a54c:	4863      	ldr	r0, [pc, #396]	; (800a6dc <MX_GPIO_Init+0x2e8>)
 800a54e:	f7f7 f993 	bl	8001878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800a552:	2308      	movs	r3, #8
 800a554:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a556:	2300      	movs	r3, #0
 800a558:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a55a:	2300      	movs	r3, #0
 800a55c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800a55e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a562:	4619      	mov	r1, r3
 800a564:	485e      	ldr	r0, [pc, #376]	; (800a6e0 <MX_GPIO_Init+0x2ec>)
 800a566:	f7f6 ffc5 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 800a56a:	f643 4323 	movw	r3, #15395	; 0x3c23
 800a56e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a570:	2302      	movs	r3, #2
 800a572:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a574:	2300      	movs	r3, #0
 800a576:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a578:	2303      	movs	r3, #3
 800a57a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800a57c:	230a      	movs	r3, #10
 800a57e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a580:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a584:	4619      	mov	r1, r3
 800a586:	4857      	ldr	r0, [pc, #348]	; (800a6e4 <MX_GPIO_Init+0x2f0>)
 800a588:	f7f6 ffb4 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800a58c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a590:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a592:	2300      	movs	r3, #0
 800a594:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a596:	2300      	movs	r3, #0
 800a598:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800a59a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a59e:	4619      	mov	r1, r3
 800a5a0:	4851      	ldr	r0, [pc, #324]	; (800a6e8 <MX_GPIO_Init+0x2f4>)
 800a5a2:	f7f6 ffa7 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 800a5a6:	2340      	movs	r3, #64	; 0x40
 800a5a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800a5aa:	4b50      	ldr	r3, [pc, #320]	; (800a6ec <MX_GPIO_Init+0x2f8>)
 800a5ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800a5b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a5b6:	4619      	mov	r1, r3
 800a5b8:	4844      	ldr	r0, [pc, #272]	; (800a6cc <MX_GPIO_Init+0x2d8>)
 800a5ba:	f7f6 ff9b 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800a5be:	2320      	movs	r3, #32
 800a5c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800a5ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a5d2:	4619      	mov	r1, r3
 800a5d4:	483d      	ldr	r0, [pc, #244]	; (800a6cc <MX_GPIO_Init+0x2d8>)
 800a5d6:	f7f6 ff8d 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 800a5da:	f241 030c 	movw	r3, #4108	; 0x100c
 800a5de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800a5ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	4837      	ldr	r0, [pc, #220]	; (800a6d0 <MX_GPIO_Init+0x2dc>)
 800a5f4:	f7f6 ff7e 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800a5f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a5fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a5fe:	2300      	movs	r3, #0
 800a600:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a602:	2300      	movs	r3, #0
 800a604:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800a606:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a60a:	4619      	mov	r1, r3
 800a60c:	4838      	ldr	r0, [pc, #224]	; (800a6f0 <MX_GPIO_Init+0x2fc>)
 800a60e:	f7f6 ff71 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800a612:	2308      	movs	r3, #8
 800a614:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a616:	2301      	movs	r3, #1
 800a618:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a61a:	2300      	movs	r3, #0
 800a61c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a61e:	2300      	movs	r3, #0
 800a620:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800a622:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a626:	4619      	mov	r1, r3
 800a628:	482a      	ldr	r0, [pc, #168]	; (800a6d4 <MX_GPIO_Init+0x2e0>)
 800a62a:	f7f6 ff63 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800a62e:	2310      	movs	r3, #16
 800a630:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a632:	2300      	movs	r3, #0
 800a634:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a636:	2300      	movs	r3, #0
 800a638:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800a63a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a63e:	4619      	mov	r1, r3
 800a640:	4822      	ldr	r0, [pc, #136]	; (800a6cc <MX_GPIO_Init+0x2d8>)
 800a642:	f7f6 ff57 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800a646:	f248 0304 	movw	r3, #32772	; 0x8004
 800a64a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a64c:	2300      	movs	r3, #0
 800a64e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a650:	2300      	movs	r3, #0
 800a652:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800a654:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a658:	4619      	mov	r1, r3
 800a65a:	481f      	ldr	r0, [pc, #124]	; (800a6d8 <MX_GPIO_Init+0x2e4>)
 800a65c:	f7f6 ff4a 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800a660:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a664:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a666:	2301      	movs	r3, #1
 800a668:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a66a:	2300      	movs	r3, #0
 800a66c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a66e:	2300      	movs	r3, #0
 800a670:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800a672:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a676:	4619      	mov	r1, r3
 800a678:	4817      	ldr	r0, [pc, #92]	; (800a6d8 <MX_GPIO_Init+0x2e4>)
 800a67a:	f7f6 ff3b 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800a67e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a682:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800a684:	4b19      	ldr	r3, [pc, #100]	; (800a6ec <MX_GPIO_Init+0x2f8>)
 800a686:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a688:	2300      	movs	r3, #0
 800a68a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800a68c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a690:	4619      	mov	r1, r3
 800a692:	480f      	ldr	r0, [pc, #60]	; (800a6d0 <MX_GPIO_Init+0x2dc>)
 800a694:	f7f6 ff2e 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800a698:	2310      	movs	r3, #16
 800a69a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a69c:	2302      	movs	r3, #2
 800a69e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a6a4:	2303      	movs	r3, #3
 800a6a6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800a6a8:	230a      	movs	r3, #10
 800a6aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800a6ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a6b0:	4619      	mov	r1, r3
 800a6b2:	4809      	ldr	r0, [pc, #36]	; (800a6d8 <MX_GPIO_Init+0x2e4>)
 800a6b4:	f7f6 ff1e 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800a6b8:	23c8      	movs	r3, #200	; 0xc8
 800a6ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a6bc:	2301      	movs	r3, #1
 800a6be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	637b      	str	r3, [r7, #52]	; 0x34
 800a6c4:	e016      	b.n	800a6f4 <MX_GPIO_Init+0x300>
 800a6c6:	bf00      	nop
 800a6c8:	40023800 	.word	0x40023800
 800a6cc:	40020c00 	.word	0x40020c00
 800a6d0:	40022000 	.word	0x40022000
 800a6d4:	40022800 	.word	0x40022800
 800a6d8:	40021c00 	.word	0x40021c00
 800a6dc:	40021800 	.word	0x40021800
 800a6e0:	40021000 	.word	0x40021000
 800a6e4:	40020400 	.word	0x40020400
 800a6e8:	40022400 	.word	0x40022400
 800a6ec:	10120000 	.word	0x10120000
 800a6f0:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a6f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a6fc:	4619      	mov	r1, r3
 800a6fe:	4819      	ldr	r0, [pc, #100]	; (800a764 <MX_GPIO_Init+0x370>)
 800a700:	f7f6 fef8 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800a704:	2305      	movs	r3, #5
 800a706:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a708:	2302      	movs	r3, #2
 800a70a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a70c:	2300      	movs	r3, #0
 800a70e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a710:	2303      	movs	r3, #3
 800a712:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800a714:	230a      	movs	r3, #10
 800a716:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a718:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a71c:	4619      	mov	r1, r3
 800a71e:	4812      	ldr	r0, [pc, #72]	; (800a768 <MX_GPIO_Init+0x374>)
 800a720:	f7f6 fee8 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800a724:	2304      	movs	r3, #4
 800a726:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a728:	2300      	movs	r3, #0
 800a72a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a72c:	2300      	movs	r3, #0
 800a72e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800a730:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a734:	4619      	mov	r1, r3
 800a736:	480b      	ldr	r0, [pc, #44]	; (800a764 <MX_GPIO_Init+0x370>)
 800a738:	f7f6 fedc 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800a73c:	2328      	movs	r3, #40	; 0x28
 800a73e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a740:	2302      	movs	r3, #2
 800a742:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a744:	2300      	movs	r3, #0
 800a746:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a748:	2303      	movs	r3, #3
 800a74a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800a74c:	230a      	movs	r3, #10
 800a74e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a750:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a754:	4619      	mov	r1, r3
 800a756:	4805      	ldr	r0, [pc, #20]	; (800a76c <MX_GPIO_Init+0x378>)
 800a758:	f7f6 fecc 	bl	80014f4 <HAL_GPIO_Init>

}
 800a75c:	bf00      	nop
 800a75e:	3740      	adds	r7, #64	; 0x40
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}
 800a764:	40021800 	.word	0x40021800
 800a768:	40020800 	.word	0x40020800
 800a76c:	40020000 	.word	0x40020000

0800a770 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b082      	sub	sp, #8
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	4a04      	ldr	r2, [pc, #16]	; (800a790 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800a77e:	4293      	cmp	r3, r2
 800a780:	d101      	bne.n	800a786 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800a782:	f7f5 ffd9 	bl	8000738 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800a786:	bf00      	nop
 800a788:	3708      	adds	r7, #8
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}
 800a78e:	bf00      	nop
 800a790:	40001000 	.word	0x40001000

0800a794 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a794:	b480      	push	{r7}
 800a796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800a798:	bf00      	nop
 800a79a:	46bd      	mov	sp, r7
 800a79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a0:	4770      	bx	lr
	...

0800a7a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b083      	sub	sp, #12
 800a7a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800a7aa:	4b0f      	ldr	r3, [pc, #60]	; (800a7e8 <HAL_MspInit+0x44>)
 800a7ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ae:	4a0e      	ldr	r2, [pc, #56]	; (800a7e8 <HAL_MspInit+0x44>)
 800a7b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7b4:	6413      	str	r3, [r2, #64]	; 0x40
 800a7b6:	4b0c      	ldr	r3, [pc, #48]	; (800a7e8 <HAL_MspInit+0x44>)
 800a7b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a7be:	607b      	str	r3, [r7, #4]
 800a7c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a7c2:	4b09      	ldr	r3, [pc, #36]	; (800a7e8 <HAL_MspInit+0x44>)
 800a7c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7c6:	4a08      	ldr	r2, [pc, #32]	; (800a7e8 <HAL_MspInit+0x44>)
 800a7c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a7cc:	6453      	str	r3, [r2, #68]	; 0x44
 800a7ce:	4b06      	ldr	r3, [pc, #24]	; (800a7e8 <HAL_MspInit+0x44>)
 800a7d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a7d6:	603b      	str	r3, [r7, #0]
 800a7d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a7da:	bf00      	nop
 800a7dc:	370c      	adds	r7, #12
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e4:	4770      	bx	lr
 800a7e6:	bf00      	nop
 800a7e8:	40023800 	.word	0x40023800

0800a7ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b08a      	sub	sp, #40	; 0x28
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a7f4:	f107 0314 	add.w	r3, r7, #20
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	601a      	str	r2, [r3, #0]
 800a7fc:	605a      	str	r2, [r3, #4]
 800a7fe:	609a      	str	r2, [r3, #8]
 800a800:	60da      	str	r2, [r3, #12]
 800a802:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	4a21      	ldr	r2, [pc, #132]	; (800a890 <HAL_ADC_MspInit+0xa4>)
 800a80a:	4293      	cmp	r3, r2
 800a80c:	d13c      	bne.n	800a888 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800a80e:	4b21      	ldr	r3, [pc, #132]	; (800a894 <HAL_ADC_MspInit+0xa8>)
 800a810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a812:	4a20      	ldr	r2, [pc, #128]	; (800a894 <HAL_ADC_MspInit+0xa8>)
 800a814:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a818:	6453      	str	r3, [r2, #68]	; 0x44
 800a81a:	4b1e      	ldr	r3, [pc, #120]	; (800a894 <HAL_ADC_MspInit+0xa8>)
 800a81c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a81e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a822:	613b      	str	r3, [r7, #16]
 800a824:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800a826:	4b1b      	ldr	r3, [pc, #108]	; (800a894 <HAL_ADC_MspInit+0xa8>)
 800a828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a82a:	4a1a      	ldr	r2, [pc, #104]	; (800a894 <HAL_ADC_MspInit+0xa8>)
 800a82c:	f043 0320 	orr.w	r3, r3, #32
 800a830:	6313      	str	r3, [r2, #48]	; 0x30
 800a832:	4b18      	ldr	r3, [pc, #96]	; (800a894 <HAL_ADC_MspInit+0xa8>)
 800a834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a836:	f003 0320 	and.w	r3, r3, #32
 800a83a:	60fb      	str	r3, [r7, #12]
 800a83c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a83e:	4b15      	ldr	r3, [pc, #84]	; (800a894 <HAL_ADC_MspInit+0xa8>)
 800a840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a842:	4a14      	ldr	r2, [pc, #80]	; (800a894 <HAL_ADC_MspInit+0xa8>)
 800a844:	f043 0301 	orr.w	r3, r3, #1
 800a848:	6313      	str	r3, [r2, #48]	; 0x30
 800a84a:	4b12      	ldr	r3, [pc, #72]	; (800a894 <HAL_ADC_MspInit+0xa8>)
 800a84c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a84e:	f003 0301 	and.w	r3, r3, #1
 800a852:	60bb      	str	r3, [r7, #8]
 800a854:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 800a856:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800a85a:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a85c:	2303      	movs	r3, #3
 800a85e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a860:	2300      	movs	r3, #0
 800a862:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800a864:	f107 0314 	add.w	r3, r7, #20
 800a868:	4619      	mov	r1, r3
 800a86a:	480b      	ldr	r0, [pc, #44]	; (800a898 <HAL_ADC_MspInit+0xac>)
 800a86c:	f7f6 fe42 	bl	80014f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 800a870:	2301      	movs	r3, #1
 800a872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a874:	2303      	movs	r3, #3
 800a876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a878:	2300      	movs	r3, #0
 800a87a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 800a87c:	f107 0314 	add.w	r3, r7, #20
 800a880:	4619      	mov	r1, r3
 800a882:	4806      	ldr	r0, [pc, #24]	; (800a89c <HAL_ADC_MspInit+0xb0>)
 800a884:	f7f6 fe36 	bl	80014f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800a888:	bf00      	nop
 800a88a:	3728      	adds	r7, #40	; 0x28
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}
 800a890:	40012200 	.word	0x40012200
 800a894:	40023800 	.word	0x40023800
 800a898:	40021400 	.word	0x40021400
 800a89c:	40020000 	.word	0x40020000

0800a8a0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b085      	sub	sp, #20
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	4a0a      	ldr	r2, [pc, #40]	; (800a8d8 <HAL_CRC_MspInit+0x38>)
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d10b      	bne.n	800a8ca <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800a8b2:	4b0a      	ldr	r3, [pc, #40]	; (800a8dc <HAL_CRC_MspInit+0x3c>)
 800a8b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8b6:	4a09      	ldr	r2, [pc, #36]	; (800a8dc <HAL_CRC_MspInit+0x3c>)
 800a8b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a8bc:	6313      	str	r3, [r2, #48]	; 0x30
 800a8be:	4b07      	ldr	r3, [pc, #28]	; (800a8dc <HAL_CRC_MspInit+0x3c>)
 800a8c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a8c6:	60fb      	str	r3, [r7, #12]
 800a8c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800a8ca:	bf00      	nop
 800a8cc:	3714      	adds	r7, #20
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d4:	4770      	bx	lr
 800a8d6:	bf00      	nop
 800a8d8:	40023000 	.word	0x40023000
 800a8dc:	40023800 	.word	0x40023800

0800a8e0 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b08e      	sub	sp, #56	; 0x38
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a8e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	601a      	str	r2, [r3, #0]
 800a8f0:	605a      	str	r2, [r3, #4]
 800a8f2:	609a      	str	r2, [r3, #8]
 800a8f4:	60da      	str	r2, [r3, #12]
 800a8f6:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	4a50      	ldr	r2, [pc, #320]	; (800aa40 <HAL_DCMI_MspInit+0x160>)
 800a8fe:	4293      	cmp	r3, r2
 800a900:	f040 809a 	bne.w	800aa38 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 800a904:	4b4f      	ldr	r3, [pc, #316]	; (800aa44 <HAL_DCMI_MspInit+0x164>)
 800a906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a908:	4a4e      	ldr	r2, [pc, #312]	; (800aa44 <HAL_DCMI_MspInit+0x164>)
 800a90a:	f043 0301 	orr.w	r3, r3, #1
 800a90e:	6353      	str	r3, [r2, #52]	; 0x34
 800a910:	4b4c      	ldr	r3, [pc, #304]	; (800aa44 <HAL_DCMI_MspInit+0x164>)
 800a912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a914:	f003 0301 	and.w	r3, r3, #1
 800a918:	623b      	str	r3, [r7, #32]
 800a91a:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800a91c:	4b49      	ldr	r3, [pc, #292]	; (800aa44 <HAL_DCMI_MspInit+0x164>)
 800a91e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a920:	4a48      	ldr	r2, [pc, #288]	; (800aa44 <HAL_DCMI_MspInit+0x164>)
 800a922:	f043 0310 	orr.w	r3, r3, #16
 800a926:	6313      	str	r3, [r2, #48]	; 0x30
 800a928:	4b46      	ldr	r3, [pc, #280]	; (800aa44 <HAL_DCMI_MspInit+0x164>)
 800a92a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a92c:	f003 0310 	and.w	r3, r3, #16
 800a930:	61fb      	str	r3, [r7, #28]
 800a932:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a934:	4b43      	ldr	r3, [pc, #268]	; (800aa44 <HAL_DCMI_MspInit+0x164>)
 800a936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a938:	4a42      	ldr	r2, [pc, #264]	; (800aa44 <HAL_DCMI_MspInit+0x164>)
 800a93a:	f043 0308 	orr.w	r3, r3, #8
 800a93e:	6313      	str	r3, [r2, #48]	; 0x30
 800a940:	4b40      	ldr	r3, [pc, #256]	; (800aa44 <HAL_DCMI_MspInit+0x164>)
 800a942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a944:	f003 0308 	and.w	r3, r3, #8
 800a948:	61bb      	str	r3, [r7, #24]
 800a94a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800a94c:	4b3d      	ldr	r3, [pc, #244]	; (800aa44 <HAL_DCMI_MspInit+0x164>)
 800a94e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a950:	4a3c      	ldr	r2, [pc, #240]	; (800aa44 <HAL_DCMI_MspInit+0x164>)
 800a952:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a956:	6313      	str	r3, [r2, #48]	; 0x30
 800a958:	4b3a      	ldr	r3, [pc, #232]	; (800aa44 <HAL_DCMI_MspInit+0x164>)
 800a95a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a95c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a960:	617b      	str	r3, [r7, #20]
 800a962:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800a964:	4b37      	ldr	r3, [pc, #220]	; (800aa44 <HAL_DCMI_MspInit+0x164>)
 800a966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a968:	4a36      	ldr	r2, [pc, #216]	; (800aa44 <HAL_DCMI_MspInit+0x164>)
 800a96a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a96e:	6313      	str	r3, [r2, #48]	; 0x30
 800a970:	4b34      	ldr	r3, [pc, #208]	; (800aa44 <HAL_DCMI_MspInit+0x164>)
 800a972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a978:	613b      	str	r3, [r7, #16]
 800a97a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a97c:	4b31      	ldr	r3, [pc, #196]	; (800aa44 <HAL_DCMI_MspInit+0x164>)
 800a97e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a980:	4a30      	ldr	r2, [pc, #192]	; (800aa44 <HAL_DCMI_MspInit+0x164>)
 800a982:	f043 0301 	orr.w	r3, r3, #1
 800a986:	6313      	str	r3, [r2, #48]	; 0x30
 800a988:	4b2e      	ldr	r3, [pc, #184]	; (800aa44 <HAL_DCMI_MspInit+0x164>)
 800a98a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a98c:	f003 0301 	and.w	r3, r3, #1
 800a990:	60fb      	str	r3, [r7, #12]
 800a992:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800a994:	2360      	movs	r3, #96	; 0x60
 800a996:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a998:	2302      	movs	r3, #2
 800a99a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a99c:	2300      	movs	r3, #0
 800a99e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800a9a4:	230d      	movs	r3, #13
 800a9a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a9a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a9ac:	4619      	mov	r1, r3
 800a9ae:	4826      	ldr	r0, [pc, #152]	; (800aa48 <HAL_DCMI_MspInit+0x168>)
 800a9b0:	f7f6 fda0 	bl	80014f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800a9b4:	2308      	movs	r3, #8
 800a9b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a9b8:	2302      	movs	r3, #2
 800a9ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800a9c4:	230d      	movs	r3, #13
 800a9c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 800a9c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a9cc:	4619      	mov	r1, r3
 800a9ce:	481f      	ldr	r0, [pc, #124]	; (800aa4c <HAL_DCMI_MspInit+0x16c>)
 800a9d0:	f7f6 fd90 	bl	80014f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 800a9d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a9d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a9da:	2302      	movs	r3, #2
 800a9dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800a9e6:	230d      	movs	r3, #13
 800a9e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800a9ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a9ee:	4619      	mov	r1, r3
 800a9f0:	4817      	ldr	r0, [pc, #92]	; (800aa50 <HAL_DCMI_MspInit+0x170>)
 800a9f2:	f7f6 fd7f 	bl	80014f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 800a9f6:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 800a9fa:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a9fc:	2302      	movs	r3, #2
 800a9fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa00:	2300      	movs	r3, #0
 800aa02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aa04:	2300      	movs	r3, #0
 800aa06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800aa08:	230d      	movs	r3, #13
 800aa0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800aa0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa10:	4619      	mov	r1, r3
 800aa12:	4810      	ldr	r0, [pc, #64]	; (800aa54 <HAL_DCMI_MspInit+0x174>)
 800aa14:	f7f6 fd6e 	bl	80014f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 800aa18:	2350      	movs	r3, #80	; 0x50
 800aa1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa1c:	2302      	movs	r3, #2
 800aa1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa20:	2300      	movs	r3, #0
 800aa22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aa24:	2300      	movs	r3, #0
 800aa26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800aa28:	230d      	movs	r3, #13
 800aa2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aa2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa30:	4619      	mov	r1, r3
 800aa32:	4809      	ldr	r0, [pc, #36]	; (800aa58 <HAL_DCMI_MspInit+0x178>)
 800aa34:	f7f6 fd5e 	bl	80014f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 800aa38:	bf00      	nop
 800aa3a:	3738      	adds	r7, #56	; 0x38
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}
 800aa40:	50050000 	.word	0x50050000
 800aa44:	40023800 	.word	0x40023800
 800aa48:	40021000 	.word	0x40021000
 800aa4c:	40020c00 	.word	0x40020c00
 800aa50:	40021800 	.word	0x40021800
 800aa54:	40021c00 	.word	0x40021c00
 800aa58:	40020000 	.word	0x40020000

0800aa5c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b084      	sub	sp, #16
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	4a0d      	ldr	r2, [pc, #52]	; (800aaa0 <HAL_DMA2D_MspInit+0x44>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d113      	bne.n	800aa96 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800aa6e:	4b0d      	ldr	r3, [pc, #52]	; (800aaa4 <HAL_DMA2D_MspInit+0x48>)
 800aa70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa72:	4a0c      	ldr	r2, [pc, #48]	; (800aaa4 <HAL_DMA2D_MspInit+0x48>)
 800aa74:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800aa78:	6313      	str	r3, [r2, #48]	; 0x30
 800aa7a:	4b0a      	ldr	r3, [pc, #40]	; (800aaa4 <HAL_DMA2D_MspInit+0x48>)
 800aa7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aa82:	60fb      	str	r3, [r7, #12]
 800aa84:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 800aa86:	2200      	movs	r2, #0
 800aa88:	2100      	movs	r1, #0
 800aa8a:	205a      	movs	r0, #90	; 0x5a
 800aa8c:	f7f6 f9c0 	bl	8000e10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800aa90:	205a      	movs	r0, #90	; 0x5a
 800aa92:	f7f6 f9d9 	bl	8000e48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800aa96:	bf00      	nop
 800aa98:	3710      	adds	r7, #16
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}
 800aa9e:	bf00      	nop
 800aaa0:	4002b000 	.word	0x4002b000
 800aaa4:	40023800 	.word	0x40023800

0800aaa8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b08c      	sub	sp, #48	; 0x30
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aab0:	f107 031c 	add.w	r3, r7, #28
 800aab4:	2200      	movs	r2, #0
 800aab6:	601a      	str	r2, [r3, #0]
 800aab8:	605a      	str	r2, [r3, #4]
 800aaba:	609a      	str	r2, [r3, #8]
 800aabc:	60da      	str	r2, [r3, #12]
 800aabe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	4a2f      	ldr	r2, [pc, #188]	; (800ab84 <HAL_I2C_MspInit+0xdc>)
 800aac6:	4293      	cmp	r3, r2
 800aac8:	d129      	bne.n	800ab1e <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800aaca:	4b2f      	ldr	r3, [pc, #188]	; (800ab88 <HAL_I2C_MspInit+0xe0>)
 800aacc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aace:	4a2e      	ldr	r2, [pc, #184]	; (800ab88 <HAL_I2C_MspInit+0xe0>)
 800aad0:	f043 0302 	orr.w	r3, r3, #2
 800aad4:	6313      	str	r3, [r2, #48]	; 0x30
 800aad6:	4b2c      	ldr	r3, [pc, #176]	; (800ab88 <HAL_I2C_MspInit+0xe0>)
 800aad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aada:	f003 0302 	and.w	r3, r3, #2
 800aade:	61bb      	str	r3, [r7, #24]
 800aae0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800aae2:	f44f 7340 	mov.w	r3, #768	; 0x300
 800aae6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800aae8:	2312      	movs	r3, #18
 800aaea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800aaec:	2301      	movs	r3, #1
 800aaee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800aaf4:	2304      	movs	r3, #4
 800aaf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800aaf8:	f107 031c 	add.w	r3, r7, #28
 800aafc:	4619      	mov	r1, r3
 800aafe:	4823      	ldr	r0, [pc, #140]	; (800ab8c <HAL_I2C_MspInit+0xe4>)
 800ab00:	f7f6 fcf8 	bl	80014f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800ab04:	4b20      	ldr	r3, [pc, #128]	; (800ab88 <HAL_I2C_MspInit+0xe0>)
 800ab06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab08:	4a1f      	ldr	r2, [pc, #124]	; (800ab88 <HAL_I2C_MspInit+0xe0>)
 800ab0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ab0e:	6413      	str	r3, [r2, #64]	; 0x40
 800ab10:	4b1d      	ldr	r3, [pc, #116]	; (800ab88 <HAL_I2C_MspInit+0xe0>)
 800ab12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ab18:	617b      	str	r3, [r7, #20]
 800ab1a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800ab1c:	e02d      	b.n	800ab7a <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	4a1b      	ldr	r2, [pc, #108]	; (800ab90 <HAL_I2C_MspInit+0xe8>)
 800ab24:	4293      	cmp	r3, r2
 800ab26:	d128      	bne.n	800ab7a <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800ab28:	4b17      	ldr	r3, [pc, #92]	; (800ab88 <HAL_I2C_MspInit+0xe0>)
 800ab2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab2c:	4a16      	ldr	r2, [pc, #88]	; (800ab88 <HAL_I2C_MspInit+0xe0>)
 800ab2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab32:	6313      	str	r3, [r2, #48]	; 0x30
 800ab34:	4b14      	ldr	r3, [pc, #80]	; (800ab88 <HAL_I2C_MspInit+0xe0>)
 800ab36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab3c:	613b      	str	r3, [r7, #16]
 800ab3e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800ab40:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800ab44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800ab46:	2312      	movs	r3, #18
 800ab48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ab4e:	2303      	movs	r3, #3
 800ab50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800ab52:	2304      	movs	r3, #4
 800ab54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800ab56:	f107 031c 	add.w	r3, r7, #28
 800ab5a:	4619      	mov	r1, r3
 800ab5c:	480d      	ldr	r0, [pc, #52]	; (800ab94 <HAL_I2C_MspInit+0xec>)
 800ab5e:	f7f6 fcc9 	bl	80014f4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800ab62:	4b09      	ldr	r3, [pc, #36]	; (800ab88 <HAL_I2C_MspInit+0xe0>)
 800ab64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab66:	4a08      	ldr	r2, [pc, #32]	; (800ab88 <HAL_I2C_MspInit+0xe0>)
 800ab68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ab6c:	6413      	str	r3, [r2, #64]	; 0x40
 800ab6e:	4b06      	ldr	r3, [pc, #24]	; (800ab88 <HAL_I2C_MspInit+0xe0>)
 800ab70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ab76:	60fb      	str	r3, [r7, #12]
 800ab78:	68fb      	ldr	r3, [r7, #12]
}
 800ab7a:	bf00      	nop
 800ab7c:	3730      	adds	r7, #48	; 0x30
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}
 800ab82:	bf00      	nop
 800ab84:	40005400 	.word	0x40005400
 800ab88:	40023800 	.word	0x40023800
 800ab8c:	40020400 	.word	0x40020400
 800ab90:	40005c00 	.word	0x40005c00
 800ab94:	40021c00 	.word	0x40021c00

0800ab98 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b08e      	sub	sp, #56	; 0x38
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aba0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aba4:	2200      	movs	r2, #0
 800aba6:	601a      	str	r2, [r3, #0]
 800aba8:	605a      	str	r2, [r3, #4]
 800abaa:	609a      	str	r2, [r3, #8]
 800abac:	60da      	str	r2, [r3, #12]
 800abae:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	4a55      	ldr	r2, [pc, #340]	; (800ad0c <HAL_LTDC_MspInit+0x174>)
 800abb6:	4293      	cmp	r3, r2
 800abb8:	f040 80a3 	bne.w	800ad02 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800abbc:	4b54      	ldr	r3, [pc, #336]	; (800ad10 <HAL_LTDC_MspInit+0x178>)
 800abbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abc0:	4a53      	ldr	r2, [pc, #332]	; (800ad10 <HAL_LTDC_MspInit+0x178>)
 800abc2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800abc6:	6453      	str	r3, [r2, #68]	; 0x44
 800abc8:	4b51      	ldr	r3, [pc, #324]	; (800ad10 <HAL_LTDC_MspInit+0x178>)
 800abca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abcc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800abd0:	623b      	str	r3, [r7, #32]
 800abd2:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800abd4:	4b4e      	ldr	r3, [pc, #312]	; (800ad10 <HAL_LTDC_MspInit+0x178>)
 800abd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abd8:	4a4d      	ldr	r2, [pc, #308]	; (800ad10 <HAL_LTDC_MspInit+0x178>)
 800abda:	f043 0310 	orr.w	r3, r3, #16
 800abde:	6313      	str	r3, [r2, #48]	; 0x30
 800abe0:	4b4b      	ldr	r3, [pc, #300]	; (800ad10 <HAL_LTDC_MspInit+0x178>)
 800abe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abe4:	f003 0310 	and.w	r3, r3, #16
 800abe8:	61fb      	str	r3, [r7, #28]
 800abea:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800abec:	4b48      	ldr	r3, [pc, #288]	; (800ad10 <HAL_LTDC_MspInit+0x178>)
 800abee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abf0:	4a47      	ldr	r2, [pc, #284]	; (800ad10 <HAL_LTDC_MspInit+0x178>)
 800abf2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800abf6:	6313      	str	r3, [r2, #48]	; 0x30
 800abf8:	4b45      	ldr	r3, [pc, #276]	; (800ad10 <HAL_LTDC_MspInit+0x178>)
 800abfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ac00:	61bb      	str	r3, [r7, #24]
 800ac02:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800ac04:	4b42      	ldr	r3, [pc, #264]	; (800ad10 <HAL_LTDC_MspInit+0x178>)
 800ac06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac08:	4a41      	ldr	r2, [pc, #260]	; (800ad10 <HAL_LTDC_MspInit+0x178>)
 800ac0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ac0e:	6313      	str	r3, [r2, #48]	; 0x30
 800ac10:	4b3f      	ldr	r3, [pc, #252]	; (800ad10 <HAL_LTDC_MspInit+0x178>)
 800ac12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ac18:	617b      	str	r3, [r7, #20]
 800ac1a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800ac1c:	4b3c      	ldr	r3, [pc, #240]	; (800ad10 <HAL_LTDC_MspInit+0x178>)
 800ac1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac20:	4a3b      	ldr	r2, [pc, #236]	; (800ad10 <HAL_LTDC_MspInit+0x178>)
 800ac22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac26:	6313      	str	r3, [r2, #48]	; 0x30
 800ac28:	4b39      	ldr	r3, [pc, #228]	; (800ad10 <HAL_LTDC_MspInit+0x178>)
 800ac2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac30:	613b      	str	r3, [r7, #16]
 800ac32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800ac34:	4b36      	ldr	r3, [pc, #216]	; (800ad10 <HAL_LTDC_MspInit+0x178>)
 800ac36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac38:	4a35      	ldr	r2, [pc, #212]	; (800ad10 <HAL_LTDC_MspInit+0x178>)
 800ac3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac3e:	6313      	str	r3, [r2, #48]	; 0x30
 800ac40:	4b33      	ldr	r3, [pc, #204]	; (800ad10 <HAL_LTDC_MspInit+0x178>)
 800ac42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac48:	60fb      	str	r3, [r7, #12]
 800ac4a:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 800ac4c:	2310      	movs	r3, #16
 800ac4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac50:	2302      	movs	r3, #2
 800ac52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac54:	2300      	movs	r3, #0
 800ac56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ac58:	2300      	movs	r3, #0
 800ac5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800ac5c:	230e      	movs	r3, #14
 800ac5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800ac60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac64:	4619      	mov	r1, r3
 800ac66:	482b      	ldr	r0, [pc, #172]	; (800ad14 <HAL_LTDC_MspInit+0x17c>)
 800ac68:	f7f6 fc44 	bl	80014f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 800ac6c:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800ac70:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac72:	2302      	movs	r3, #2
 800ac74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac76:	2300      	movs	r3, #0
 800ac78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800ac7e:	230e      	movs	r3, #14
 800ac80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800ac82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac86:	4619      	mov	r1, r3
 800ac88:	4823      	ldr	r0, [pc, #140]	; (800ad18 <HAL_LTDC_MspInit+0x180>)
 800ac8a:	f7f6 fc33 	bl	80014f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 800ac8e:	23f7      	movs	r3, #247	; 0xf7
 800ac90:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac92:	2302      	movs	r3, #2
 800ac94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac96:	2300      	movs	r3, #0
 800ac98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800ac9e:	230e      	movs	r3, #14
 800aca0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800aca2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aca6:	4619      	mov	r1, r3
 800aca8:	481c      	ldr	r0, [pc, #112]	; (800ad1c <HAL_LTDC_MspInit+0x184>)
 800acaa:	f7f6 fc23 	bl	80014f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800acae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800acb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800acb4:	2302      	movs	r3, #2
 800acb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acb8:	2300      	movs	r3, #0
 800acba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800acbc:	2300      	movs	r3, #0
 800acbe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800acc0:	2309      	movs	r3, #9
 800acc2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800acc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800acc8:	4619      	mov	r1, r3
 800acca:	4815      	ldr	r0, [pc, #84]	; (800ad20 <HAL_LTDC_MspInit+0x188>)
 800accc:	f7f6 fc12 	bl	80014f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800acd0:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 800acd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800acd6:	2302      	movs	r3, #2
 800acd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acda:	2300      	movs	r3, #0
 800acdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800acde:	2300      	movs	r3, #0
 800ace0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800ace2:	230e      	movs	r3, #14
 800ace4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800ace6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800acea:	4619      	mov	r1, r3
 800acec:	480d      	ldr	r0, [pc, #52]	; (800ad24 <HAL_LTDC_MspInit+0x18c>)
 800acee:	f7f6 fc01 	bl	80014f4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 800acf2:	2200      	movs	r2, #0
 800acf4:	2100      	movs	r1, #0
 800acf6:	2058      	movs	r0, #88	; 0x58
 800acf8:	f7f6 f88a 	bl	8000e10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800acfc:	2058      	movs	r0, #88	; 0x58
 800acfe:	f7f6 f8a3 	bl	8000e48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800ad02:	bf00      	nop
 800ad04:	3738      	adds	r7, #56	; 0x38
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}
 800ad0a:	bf00      	nop
 800ad0c:	40016800 	.word	0x40016800
 800ad10:	40023800 	.word	0x40023800
 800ad14:	40021000 	.word	0x40021000
 800ad18:	40022400 	.word	0x40022400
 800ad1c:	40022800 	.word	0x40022800
 800ad20:	40021800 	.word	0x40021800
 800ad24:	40022000 	.word	0x40022000

0800ad28 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b08c      	sub	sp, #48	; 0x30
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad30:	f107 031c 	add.w	r3, r7, #28
 800ad34:	2200      	movs	r2, #0
 800ad36:	601a      	str	r2, [r3, #0]
 800ad38:	605a      	str	r2, [r3, #4]
 800ad3a:	609a      	str	r2, [r3, #8]
 800ad3c:	60da      	str	r2, [r3, #12]
 800ad3e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	4a3b      	ldr	r2, [pc, #236]	; (800ae34 <HAL_QSPI_MspInit+0x10c>)
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d170      	bne.n	800ae2c <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800ad4a:	4b3b      	ldr	r3, [pc, #236]	; (800ae38 <HAL_QSPI_MspInit+0x110>)
 800ad4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad4e:	4a3a      	ldr	r2, [pc, #232]	; (800ae38 <HAL_QSPI_MspInit+0x110>)
 800ad50:	f043 0302 	orr.w	r3, r3, #2
 800ad54:	6393      	str	r3, [r2, #56]	; 0x38
 800ad56:	4b38      	ldr	r3, [pc, #224]	; (800ae38 <HAL_QSPI_MspInit+0x110>)
 800ad58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad5a:	f003 0302 	and.w	r3, r3, #2
 800ad5e:	61bb      	str	r3, [r7, #24]
 800ad60:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800ad62:	4b35      	ldr	r3, [pc, #212]	; (800ae38 <HAL_QSPI_MspInit+0x110>)
 800ad64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad66:	4a34      	ldr	r2, [pc, #208]	; (800ae38 <HAL_QSPI_MspInit+0x110>)
 800ad68:	f043 0310 	orr.w	r3, r3, #16
 800ad6c:	6313      	str	r3, [r2, #48]	; 0x30
 800ad6e:	4b32      	ldr	r3, [pc, #200]	; (800ae38 <HAL_QSPI_MspInit+0x110>)
 800ad70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad72:	f003 0310 	and.w	r3, r3, #16
 800ad76:	617b      	str	r3, [r7, #20]
 800ad78:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ad7a:	4b2f      	ldr	r3, [pc, #188]	; (800ae38 <HAL_QSPI_MspInit+0x110>)
 800ad7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad7e:	4a2e      	ldr	r2, [pc, #184]	; (800ae38 <HAL_QSPI_MspInit+0x110>)
 800ad80:	f043 0302 	orr.w	r3, r3, #2
 800ad84:	6313      	str	r3, [r2, #48]	; 0x30
 800ad86:	4b2c      	ldr	r3, [pc, #176]	; (800ae38 <HAL_QSPI_MspInit+0x110>)
 800ad88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad8a:	f003 0302 	and.w	r3, r3, #2
 800ad8e:	613b      	str	r3, [r7, #16]
 800ad90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800ad92:	4b29      	ldr	r3, [pc, #164]	; (800ae38 <HAL_QSPI_MspInit+0x110>)
 800ad94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad96:	4a28      	ldr	r2, [pc, #160]	; (800ae38 <HAL_QSPI_MspInit+0x110>)
 800ad98:	f043 0308 	orr.w	r3, r3, #8
 800ad9c:	6313      	str	r3, [r2, #48]	; 0x30
 800ad9e:	4b26      	ldr	r3, [pc, #152]	; (800ae38 <HAL_QSPI_MspInit+0x110>)
 800ada0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ada2:	f003 0308 	and.w	r3, r3, #8
 800ada6:	60fb      	str	r3, [r7, #12]
 800ada8:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800adaa:	2304      	movs	r3, #4
 800adac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800adae:	2302      	movs	r3, #2
 800adb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800adb2:	2300      	movs	r3, #0
 800adb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800adb6:	2303      	movs	r3, #3
 800adb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800adba:	2309      	movs	r3, #9
 800adbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800adbe:	f107 031c 	add.w	r3, r7, #28
 800adc2:	4619      	mov	r1, r3
 800adc4:	481d      	ldr	r0, [pc, #116]	; (800ae3c <HAL_QSPI_MspInit+0x114>)
 800adc6:	f7f6 fb95 	bl	80014f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800adca:	2340      	movs	r3, #64	; 0x40
 800adcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800adce:	2302      	movs	r3, #2
 800add0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800add2:	2300      	movs	r3, #0
 800add4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800add6:	2303      	movs	r3, #3
 800add8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800adda:	230a      	movs	r3, #10
 800addc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800adde:	f107 031c 	add.w	r3, r7, #28
 800ade2:	4619      	mov	r1, r3
 800ade4:	4816      	ldr	r0, [pc, #88]	; (800ae40 <HAL_QSPI_MspInit+0x118>)
 800ade6:	f7f6 fb85 	bl	80014f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800adea:	2304      	movs	r3, #4
 800adec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800adee:	2302      	movs	r3, #2
 800adf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800adf2:	2300      	movs	r3, #0
 800adf4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800adf6:	2303      	movs	r3, #3
 800adf8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800adfa:	2309      	movs	r3, #9
 800adfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800adfe:	f107 031c 	add.w	r3, r7, #28
 800ae02:	4619      	mov	r1, r3
 800ae04:	480e      	ldr	r0, [pc, #56]	; (800ae40 <HAL_QSPI_MspInit+0x118>)
 800ae06:	f7f6 fb75 	bl	80014f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800ae0a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800ae0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae10:	2302      	movs	r3, #2
 800ae12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae14:	2300      	movs	r3, #0
 800ae16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ae18:	2303      	movs	r3, #3
 800ae1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800ae1c:	2309      	movs	r3, #9
 800ae1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ae20:	f107 031c 	add.w	r3, r7, #28
 800ae24:	4619      	mov	r1, r3
 800ae26:	4807      	ldr	r0, [pc, #28]	; (800ae44 <HAL_QSPI_MspInit+0x11c>)
 800ae28:	f7f6 fb64 	bl	80014f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800ae2c:	bf00      	nop
 800ae2e:	3730      	adds	r7, #48	; 0x30
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}
 800ae34:	a0001000 	.word	0xa0001000
 800ae38:	40023800 	.word	0x40023800
 800ae3c:	40021000 	.word	0x40021000
 800ae40:	40020400 	.word	0x40020400
 800ae44:	40020c00 	.word	0x40020c00

0800ae48 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b083      	sub	sp, #12
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	4a07      	ldr	r2, [pc, #28]	; (800ae74 <HAL_RTC_MspInit+0x2c>)
 800ae56:	4293      	cmp	r3, r2
 800ae58:	d105      	bne.n	800ae66 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800ae5a:	4b07      	ldr	r3, [pc, #28]	; (800ae78 <HAL_RTC_MspInit+0x30>)
 800ae5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae5e:	4a06      	ldr	r2, [pc, #24]	; (800ae78 <HAL_RTC_MspInit+0x30>)
 800ae60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae64:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800ae66:	bf00      	nop
 800ae68:	370c      	adds	r7, #12
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae70:	4770      	bx	lr
 800ae72:	bf00      	nop
 800ae74:	40002800 	.word	0x40002800
 800ae78:	40023800 	.word	0x40023800

0800ae7c <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b08a      	sub	sp, #40	; 0x28
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ae84:	f107 0314 	add.w	r3, r7, #20
 800ae88:	2200      	movs	r2, #0
 800ae8a:	601a      	str	r2, [r3, #0]
 800ae8c:	605a      	str	r2, [r3, #4]
 800ae8e:	609a      	str	r2, [r3, #8]
 800ae90:	60da      	str	r2, [r3, #12]
 800ae92:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 800ae9c:	d127      	bne.n	800aeee <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 800ae9e:	4b16      	ldr	r3, [pc, #88]	; (800aef8 <HAL_SPDIFRX_MspInit+0x7c>)
 800aea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aea2:	4a15      	ldr	r2, [pc, #84]	; (800aef8 <HAL_SPDIFRX_MspInit+0x7c>)
 800aea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aea8:	6413      	str	r3, [r2, #64]	; 0x40
 800aeaa:	4b13      	ldr	r3, [pc, #76]	; (800aef8 <HAL_SPDIFRX_MspInit+0x7c>)
 800aeac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aeb2:	613b      	str	r3, [r7, #16]
 800aeb4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800aeb6:	4b10      	ldr	r3, [pc, #64]	; (800aef8 <HAL_SPDIFRX_MspInit+0x7c>)
 800aeb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeba:	4a0f      	ldr	r2, [pc, #60]	; (800aef8 <HAL_SPDIFRX_MspInit+0x7c>)
 800aebc:	f043 0308 	orr.w	r3, r3, #8
 800aec0:	6313      	str	r3, [r2, #48]	; 0x30
 800aec2:	4b0d      	ldr	r3, [pc, #52]	; (800aef8 <HAL_SPDIFRX_MspInit+0x7c>)
 800aec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aec6:	f003 0308 	and.w	r3, r3, #8
 800aeca:	60fb      	str	r3, [r7, #12]
 800aecc:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration    
    PD7     ------> SPDIFRX_IN0 
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800aece:	2380      	movs	r3, #128	; 0x80
 800aed0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aed2:	2302      	movs	r3, #2
 800aed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aed6:	2300      	movs	r3, #0
 800aed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aeda:	2300      	movs	r3, #0
 800aedc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800aede:	2308      	movs	r3, #8
 800aee0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800aee2:	f107 0314 	add.w	r3, r7, #20
 800aee6:	4619      	mov	r1, r3
 800aee8:	4804      	ldr	r0, [pc, #16]	; (800aefc <HAL_SPDIFRX_MspInit+0x80>)
 800aeea:	f7f6 fb03 	bl	80014f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 800aeee:	bf00      	nop
 800aef0:	3728      	adds	r7, #40	; 0x28
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}
 800aef6:	bf00      	nop
 800aef8:	40023800 	.word	0x40023800
 800aefc:	40020c00 	.word	0x40020c00

0800af00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b08a      	sub	sp, #40	; 0x28
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800af08:	f107 0314 	add.w	r3, r7, #20
 800af0c:	2200      	movs	r2, #0
 800af0e:	601a      	str	r2, [r3, #0]
 800af10:	605a      	str	r2, [r3, #4]
 800af12:	609a      	str	r2, [r3, #8]
 800af14:	60da      	str	r2, [r3, #12]
 800af16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	4a25      	ldr	r2, [pc, #148]	; (800afb4 <HAL_SPI_MspInit+0xb4>)
 800af1e:	4293      	cmp	r3, r2
 800af20:	d144      	bne.n	800afac <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800af22:	4b25      	ldr	r3, [pc, #148]	; (800afb8 <HAL_SPI_MspInit+0xb8>)
 800af24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af26:	4a24      	ldr	r2, [pc, #144]	; (800afb8 <HAL_SPI_MspInit+0xb8>)
 800af28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800af2c:	6413      	str	r3, [r2, #64]	; 0x40
 800af2e:	4b22      	ldr	r3, [pc, #136]	; (800afb8 <HAL_SPI_MspInit+0xb8>)
 800af30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af36:	613b      	str	r3, [r7, #16]
 800af38:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800af3a:	4b1f      	ldr	r3, [pc, #124]	; (800afb8 <HAL_SPI_MspInit+0xb8>)
 800af3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af3e:	4a1e      	ldr	r2, [pc, #120]	; (800afb8 <HAL_SPI_MspInit+0xb8>)
 800af40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af44:	6313      	str	r3, [r2, #48]	; 0x30
 800af46:	4b1c      	ldr	r3, [pc, #112]	; (800afb8 <HAL_SPI_MspInit+0xb8>)
 800af48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af4e:	60fb      	str	r3, [r7, #12]
 800af50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800af52:	4b19      	ldr	r3, [pc, #100]	; (800afb8 <HAL_SPI_MspInit+0xb8>)
 800af54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af56:	4a18      	ldr	r2, [pc, #96]	; (800afb8 <HAL_SPI_MspInit+0xb8>)
 800af58:	f043 0302 	orr.w	r3, r3, #2
 800af5c:	6313      	str	r3, [r2, #48]	; 0x30
 800af5e:	4b16      	ldr	r3, [pc, #88]	; (800afb8 <HAL_SPI_MspInit+0xb8>)
 800af60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af62:	f003 0302 	and.w	r3, r3, #2
 800af66:	60bb      	str	r3, [r7, #8]
 800af68:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800af6a:	2302      	movs	r3, #2
 800af6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af6e:	2302      	movs	r3, #2
 800af70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af72:	2300      	movs	r3, #0
 800af74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800af76:	2300      	movs	r3, #0
 800af78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800af7a:	2305      	movs	r3, #5
 800af7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800af7e:	f107 0314 	add.w	r3, r7, #20
 800af82:	4619      	mov	r1, r3
 800af84:	480d      	ldr	r0, [pc, #52]	; (800afbc <HAL_SPI_MspInit+0xbc>)
 800af86:	f7f6 fab5 	bl	80014f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800af8a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800af8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af90:	2302      	movs	r3, #2
 800af92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af94:	2300      	movs	r3, #0
 800af96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800af98:	2300      	movs	r3, #0
 800af9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800af9c:	2305      	movs	r3, #5
 800af9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800afa0:	f107 0314 	add.w	r3, r7, #20
 800afa4:	4619      	mov	r1, r3
 800afa6:	4806      	ldr	r0, [pc, #24]	; (800afc0 <HAL_SPI_MspInit+0xc0>)
 800afa8:	f7f6 faa4 	bl	80014f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800afac:	bf00      	nop
 800afae:	3728      	adds	r7, #40	; 0x28
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}
 800afb4:	40003800 	.word	0x40003800
 800afb8:	40023800 	.word	0x40023800
 800afbc:	40022000 	.word	0x40022000
 800afc0:	40020400 	.word	0x40020400

0800afc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800afc4:	b480      	push	{r7}
 800afc6:	b089      	sub	sp, #36	; 0x24
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	4a2e      	ldr	r2, [pc, #184]	; (800b08c <HAL_TIM_Base_MspInit+0xc8>)
 800afd2:	4293      	cmp	r3, r2
 800afd4:	d10c      	bne.n	800aff0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800afd6:	4b2e      	ldr	r3, [pc, #184]	; (800b090 <HAL_TIM_Base_MspInit+0xcc>)
 800afd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afda:	4a2d      	ldr	r2, [pc, #180]	; (800b090 <HAL_TIM_Base_MspInit+0xcc>)
 800afdc:	f043 0301 	orr.w	r3, r3, #1
 800afe0:	6453      	str	r3, [r2, #68]	; 0x44
 800afe2:	4b2b      	ldr	r3, [pc, #172]	; (800b090 <HAL_TIM_Base_MspInit+0xcc>)
 800afe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afe6:	f003 0301 	and.w	r3, r3, #1
 800afea:	61fb      	str	r3, [r7, #28]
 800afec:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800afee:	e046      	b.n	800b07e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aff8:	d10c      	bne.n	800b014 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800affa:	4b25      	ldr	r3, [pc, #148]	; (800b090 <HAL_TIM_Base_MspInit+0xcc>)
 800affc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800affe:	4a24      	ldr	r2, [pc, #144]	; (800b090 <HAL_TIM_Base_MspInit+0xcc>)
 800b000:	f043 0301 	orr.w	r3, r3, #1
 800b004:	6413      	str	r3, [r2, #64]	; 0x40
 800b006:	4b22      	ldr	r3, [pc, #136]	; (800b090 <HAL_TIM_Base_MspInit+0xcc>)
 800b008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b00a:	f003 0301 	and.w	r3, r3, #1
 800b00e:	61bb      	str	r3, [r7, #24]
 800b010:	69bb      	ldr	r3, [r7, #24]
}
 800b012:	e034      	b.n	800b07e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	4a1e      	ldr	r2, [pc, #120]	; (800b094 <HAL_TIM_Base_MspInit+0xd0>)
 800b01a:	4293      	cmp	r3, r2
 800b01c:	d10c      	bne.n	800b038 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800b01e:	4b1c      	ldr	r3, [pc, #112]	; (800b090 <HAL_TIM_Base_MspInit+0xcc>)
 800b020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b022:	4a1b      	ldr	r2, [pc, #108]	; (800b090 <HAL_TIM_Base_MspInit+0xcc>)
 800b024:	f043 0302 	orr.w	r3, r3, #2
 800b028:	6413      	str	r3, [r2, #64]	; 0x40
 800b02a:	4b19      	ldr	r3, [pc, #100]	; (800b090 <HAL_TIM_Base_MspInit+0xcc>)
 800b02c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b02e:	f003 0302 	and.w	r3, r3, #2
 800b032:	617b      	str	r3, [r7, #20]
 800b034:	697b      	ldr	r3, [r7, #20]
}
 800b036:	e022      	b.n	800b07e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	4a16      	ldr	r2, [pc, #88]	; (800b098 <HAL_TIM_Base_MspInit+0xd4>)
 800b03e:	4293      	cmp	r3, r2
 800b040:	d10c      	bne.n	800b05c <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800b042:	4b13      	ldr	r3, [pc, #76]	; (800b090 <HAL_TIM_Base_MspInit+0xcc>)
 800b044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b046:	4a12      	ldr	r2, [pc, #72]	; (800b090 <HAL_TIM_Base_MspInit+0xcc>)
 800b048:	f043 0308 	orr.w	r3, r3, #8
 800b04c:	6413      	str	r3, [r2, #64]	; 0x40
 800b04e:	4b10      	ldr	r3, [pc, #64]	; (800b090 <HAL_TIM_Base_MspInit+0xcc>)
 800b050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b052:	f003 0308 	and.w	r3, r3, #8
 800b056:	613b      	str	r3, [r7, #16]
 800b058:	693b      	ldr	r3, [r7, #16]
}
 800b05a:	e010      	b.n	800b07e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	4a0e      	ldr	r2, [pc, #56]	; (800b09c <HAL_TIM_Base_MspInit+0xd8>)
 800b062:	4293      	cmp	r3, r2
 800b064:	d10b      	bne.n	800b07e <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800b066:	4b0a      	ldr	r3, [pc, #40]	; (800b090 <HAL_TIM_Base_MspInit+0xcc>)
 800b068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b06a:	4a09      	ldr	r2, [pc, #36]	; (800b090 <HAL_TIM_Base_MspInit+0xcc>)
 800b06c:	f043 0302 	orr.w	r3, r3, #2
 800b070:	6453      	str	r3, [r2, #68]	; 0x44
 800b072:	4b07      	ldr	r3, [pc, #28]	; (800b090 <HAL_TIM_Base_MspInit+0xcc>)
 800b074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b076:	f003 0302 	and.w	r3, r3, #2
 800b07a:	60fb      	str	r3, [r7, #12]
 800b07c:	68fb      	ldr	r3, [r7, #12]
}
 800b07e:	bf00      	nop
 800b080:	3724      	adds	r7, #36	; 0x24
 800b082:	46bd      	mov	sp, r7
 800b084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b088:	4770      	bx	lr
 800b08a:	bf00      	nop
 800b08c:	40010000 	.word	0x40010000
 800b090:	40023800 	.word	0x40023800
 800b094:	40000400 	.word	0x40000400
 800b098:	40000c00 	.word	0x40000c00
 800b09c:	40010400 	.word	0x40010400

0800b0a0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	b085      	sub	sp, #20
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	4a0a      	ldr	r2, [pc, #40]	; (800b0d8 <HAL_TIM_PWM_MspInit+0x38>)
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	d10b      	bne.n	800b0ca <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800b0b2:	4b0a      	ldr	r3, [pc, #40]	; (800b0dc <HAL_TIM_PWM_MspInit+0x3c>)
 800b0b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0b6:	4a09      	ldr	r2, [pc, #36]	; (800b0dc <HAL_TIM_PWM_MspInit+0x3c>)
 800b0b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0bc:	6413      	str	r3, [r2, #64]	; 0x40
 800b0be:	4b07      	ldr	r3, [pc, #28]	; (800b0dc <HAL_TIM_PWM_MspInit+0x3c>)
 800b0c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0c6:	60fb      	str	r3, [r7, #12]
 800b0c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800b0ca:	bf00      	nop
 800b0cc:	3714      	adds	r7, #20
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d4:	4770      	bx	lr
 800b0d6:	bf00      	nop
 800b0d8:	40001800 	.word	0x40001800
 800b0dc:	40023800 	.word	0x40023800

0800b0e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b08c      	sub	sp, #48	; 0x30
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b0e8:	f107 031c 	add.w	r3, r7, #28
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	601a      	str	r2, [r3, #0]
 800b0f0:	605a      	str	r2, [r3, #4]
 800b0f2:	609a      	str	r2, [r3, #8]
 800b0f4:	60da      	str	r2, [r3, #12]
 800b0f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	4a56      	ldr	r2, [pc, #344]	; (800b258 <HAL_TIM_MspPostInit+0x178>)
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d11d      	bne.n	800b13e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b102:	4b56      	ldr	r3, [pc, #344]	; (800b25c <HAL_TIM_MspPostInit+0x17c>)
 800b104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b106:	4a55      	ldr	r2, [pc, #340]	; (800b25c <HAL_TIM_MspPostInit+0x17c>)
 800b108:	f043 0301 	orr.w	r3, r3, #1
 800b10c:	6313      	str	r3, [r2, #48]	; 0x30
 800b10e:	4b53      	ldr	r3, [pc, #332]	; (800b25c <HAL_TIM_MspPostInit+0x17c>)
 800b110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b112:	f003 0301 	and.w	r3, r3, #1
 800b116:	61bb      	str	r3, [r7, #24]
 800b118:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800b11a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b11e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b120:	2302      	movs	r3, #2
 800b122:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b124:	2300      	movs	r3, #0
 800b126:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b128:	2300      	movs	r3, #0
 800b12a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800b12c:	2301      	movs	r3, #1
 800b12e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 800b130:	f107 031c 	add.w	r3, r7, #28
 800b134:	4619      	mov	r1, r3
 800b136:	484a      	ldr	r0, [pc, #296]	; (800b260 <HAL_TIM_MspPostInit+0x180>)
 800b138:	f7f6 f9dc 	bl	80014f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800b13c:	e087      	b.n	800b24e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b146:	d11d      	bne.n	800b184 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b148:	4b44      	ldr	r3, [pc, #272]	; (800b25c <HAL_TIM_MspPostInit+0x17c>)
 800b14a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b14c:	4a43      	ldr	r2, [pc, #268]	; (800b25c <HAL_TIM_MspPostInit+0x17c>)
 800b14e:	f043 0301 	orr.w	r3, r3, #1
 800b152:	6313      	str	r3, [r2, #48]	; 0x30
 800b154:	4b41      	ldr	r3, [pc, #260]	; (800b25c <HAL_TIM_MspPostInit+0x17c>)
 800b156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b158:	f003 0301 	and.w	r3, r3, #1
 800b15c:	617b      	str	r3, [r7, #20]
 800b15e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800b160:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b166:	2302      	movs	r3, #2
 800b168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b16a:	2300      	movs	r3, #0
 800b16c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b16e:	2300      	movs	r3, #0
 800b170:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800b172:	2301      	movs	r3, #1
 800b174:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800b176:	f107 031c 	add.w	r3, r7, #28
 800b17a:	4619      	mov	r1, r3
 800b17c:	4838      	ldr	r0, [pc, #224]	; (800b260 <HAL_TIM_MspPostInit+0x180>)
 800b17e:	f7f6 f9b9 	bl	80014f4 <HAL_GPIO_Init>
}
 800b182:	e064      	b.n	800b24e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	4a36      	ldr	r2, [pc, #216]	; (800b264 <HAL_TIM_MspPostInit+0x184>)
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d11c      	bne.n	800b1c8 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b18e:	4b33      	ldr	r3, [pc, #204]	; (800b25c <HAL_TIM_MspPostInit+0x17c>)
 800b190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b192:	4a32      	ldr	r2, [pc, #200]	; (800b25c <HAL_TIM_MspPostInit+0x17c>)
 800b194:	f043 0302 	orr.w	r3, r3, #2
 800b198:	6313      	str	r3, [r2, #48]	; 0x30
 800b19a:	4b30      	ldr	r3, [pc, #192]	; (800b25c <HAL_TIM_MspPostInit+0x17c>)
 800b19c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b19e:	f003 0302 	and.w	r3, r3, #2
 800b1a2:	613b      	str	r3, [r7, #16]
 800b1a4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800b1a6:	2310      	movs	r3, #16
 800b1a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b1aa:	2302      	movs	r3, #2
 800b1ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800b1b6:	2302      	movs	r3, #2
 800b1b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800b1ba:	f107 031c 	add.w	r3, r7, #28
 800b1be:	4619      	mov	r1, r3
 800b1c0:	4829      	ldr	r0, [pc, #164]	; (800b268 <HAL_TIM_MspPostInit+0x188>)
 800b1c2:	f7f6 f997 	bl	80014f4 <HAL_GPIO_Init>
}
 800b1c6:	e042      	b.n	800b24e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	4a27      	ldr	r2, [pc, #156]	; (800b26c <HAL_TIM_MspPostInit+0x18c>)
 800b1ce:	4293      	cmp	r3, r2
 800b1d0:	d11c      	bne.n	800b20c <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800b1d2:	4b22      	ldr	r3, [pc, #136]	; (800b25c <HAL_TIM_MspPostInit+0x17c>)
 800b1d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1d6:	4a21      	ldr	r2, [pc, #132]	; (800b25c <HAL_TIM_MspPostInit+0x17c>)
 800b1d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b1dc:	6313      	str	r3, [r2, #48]	; 0x30
 800b1de:	4b1f      	ldr	r3, [pc, #124]	; (800b25c <HAL_TIM_MspPostInit+0x17c>)
 800b1e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1e6:	60fb      	str	r3, [r7, #12]
 800b1e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b1ee:	2302      	movs	r3, #2
 800b1f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800b1fa:	2302      	movs	r3, #2
 800b1fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800b1fe:	f107 031c 	add.w	r3, r7, #28
 800b202:	4619      	mov	r1, r3
 800b204:	481a      	ldr	r0, [pc, #104]	; (800b270 <HAL_TIM_MspPostInit+0x190>)
 800b206:	f7f6 f975 	bl	80014f4 <HAL_GPIO_Init>
}
 800b20a:	e020      	b.n	800b24e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	4a18      	ldr	r2, [pc, #96]	; (800b274 <HAL_TIM_MspPostInit+0x194>)
 800b212:	4293      	cmp	r3, r2
 800b214:	d11b      	bne.n	800b24e <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800b216:	4b11      	ldr	r3, [pc, #68]	; (800b25c <HAL_TIM_MspPostInit+0x17c>)
 800b218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b21a:	4a10      	ldr	r2, [pc, #64]	; (800b25c <HAL_TIM_MspPostInit+0x17c>)
 800b21c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b220:	6313      	str	r3, [r2, #48]	; 0x30
 800b222:	4b0e      	ldr	r3, [pc, #56]	; (800b25c <HAL_TIM_MspPostInit+0x17c>)
 800b224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b22a:	60bb      	str	r3, [r7, #8]
 800b22c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800b22e:	2340      	movs	r3, #64	; 0x40
 800b230:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b232:	2302      	movs	r3, #2
 800b234:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b236:	2300      	movs	r3, #0
 800b238:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b23a:	2300      	movs	r3, #0
 800b23c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800b23e:	2309      	movs	r3, #9
 800b240:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800b242:	f107 031c 	add.w	r3, r7, #28
 800b246:	4619      	mov	r1, r3
 800b248:	480b      	ldr	r0, [pc, #44]	; (800b278 <HAL_TIM_MspPostInit+0x198>)
 800b24a:	f7f6 f953 	bl	80014f4 <HAL_GPIO_Init>
}
 800b24e:	bf00      	nop
 800b250:	3730      	adds	r7, #48	; 0x30
 800b252:	46bd      	mov	sp, r7
 800b254:	bd80      	pop	{r7, pc}
 800b256:	bf00      	nop
 800b258:	40010000 	.word	0x40010000
 800b25c:	40023800 	.word	0x40023800
 800b260:	40020000 	.word	0x40020000
 800b264:	40000400 	.word	0x40000400
 800b268:	40020400 	.word	0x40020400
 800b26c:	40000c00 	.word	0x40000c00
 800b270:	40022000 	.word	0x40022000
 800b274:	40001800 	.word	0x40001800
 800b278:	40021c00 	.word	0x40021c00

0800b27c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b08c      	sub	sp, #48	; 0x30
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b284:	f107 031c 	add.w	r3, r7, #28
 800b288:	2200      	movs	r2, #0
 800b28a:	601a      	str	r2, [r3, #0]
 800b28c:	605a      	str	r2, [r3, #4]
 800b28e:	609a      	str	r2, [r3, #8]
 800b290:	60da      	str	r2, [r3, #12]
 800b292:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	4a3c      	ldr	r2, [pc, #240]	; (800b38c <HAL_UART_MspInit+0x110>)
 800b29a:	4293      	cmp	r3, r2
 800b29c:	d145      	bne.n	800b32a <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800b29e:	4b3c      	ldr	r3, [pc, #240]	; (800b390 <HAL_UART_MspInit+0x114>)
 800b2a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2a2:	4a3b      	ldr	r2, [pc, #236]	; (800b390 <HAL_UART_MspInit+0x114>)
 800b2a4:	f043 0310 	orr.w	r3, r3, #16
 800b2a8:	6453      	str	r3, [r2, #68]	; 0x44
 800b2aa:	4b39      	ldr	r3, [pc, #228]	; (800b390 <HAL_UART_MspInit+0x114>)
 800b2ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2ae:	f003 0310 	and.w	r3, r3, #16
 800b2b2:	61bb      	str	r3, [r7, #24]
 800b2b4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b2b6:	4b36      	ldr	r3, [pc, #216]	; (800b390 <HAL_UART_MspInit+0x114>)
 800b2b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2ba:	4a35      	ldr	r2, [pc, #212]	; (800b390 <HAL_UART_MspInit+0x114>)
 800b2bc:	f043 0302 	orr.w	r3, r3, #2
 800b2c0:	6313      	str	r3, [r2, #48]	; 0x30
 800b2c2:	4b33      	ldr	r3, [pc, #204]	; (800b390 <HAL_UART_MspInit+0x114>)
 800b2c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2c6:	f003 0302 	and.w	r3, r3, #2
 800b2ca:	617b      	str	r3, [r7, #20]
 800b2cc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b2ce:	4b30      	ldr	r3, [pc, #192]	; (800b390 <HAL_UART_MspInit+0x114>)
 800b2d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2d2:	4a2f      	ldr	r2, [pc, #188]	; (800b390 <HAL_UART_MspInit+0x114>)
 800b2d4:	f043 0301 	orr.w	r3, r3, #1
 800b2d8:	6313      	str	r3, [r2, #48]	; 0x30
 800b2da:	4b2d      	ldr	r3, [pc, #180]	; (800b390 <HAL_UART_MspInit+0x114>)
 800b2dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2de:	f003 0301 	and.w	r3, r3, #1
 800b2e2:	613b      	str	r3, [r7, #16]
 800b2e4:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800b2e6:	2380      	movs	r3, #128	; 0x80
 800b2e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b2ea:	2302      	movs	r3, #2
 800b2ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b2f6:	2307      	movs	r3, #7
 800b2f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800b2fa:	f107 031c 	add.w	r3, r7, #28
 800b2fe:	4619      	mov	r1, r3
 800b300:	4824      	ldr	r0, [pc, #144]	; (800b394 <HAL_UART_MspInit+0x118>)
 800b302:	f7f6 f8f7 	bl	80014f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800b306:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b30a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b30c:	2302      	movs	r3, #2
 800b30e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b310:	2300      	movs	r3, #0
 800b312:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b314:	2300      	movs	r3, #0
 800b316:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b318:	2307      	movs	r3, #7
 800b31a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800b31c:	f107 031c 	add.w	r3, r7, #28
 800b320:	4619      	mov	r1, r3
 800b322:	481d      	ldr	r0, [pc, #116]	; (800b398 <HAL_UART_MspInit+0x11c>)
 800b324:	f7f6 f8e6 	bl	80014f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800b328:	e02c      	b.n	800b384 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	4a1b      	ldr	r2, [pc, #108]	; (800b39c <HAL_UART_MspInit+0x120>)
 800b330:	4293      	cmp	r3, r2
 800b332:	d127      	bne.n	800b384 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 800b334:	4b16      	ldr	r3, [pc, #88]	; (800b390 <HAL_UART_MspInit+0x114>)
 800b336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b338:	4a15      	ldr	r2, [pc, #84]	; (800b390 <HAL_UART_MspInit+0x114>)
 800b33a:	f043 0320 	orr.w	r3, r3, #32
 800b33e:	6453      	str	r3, [r2, #68]	; 0x44
 800b340:	4b13      	ldr	r3, [pc, #76]	; (800b390 <HAL_UART_MspInit+0x114>)
 800b342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b344:	f003 0320 	and.w	r3, r3, #32
 800b348:	60fb      	str	r3, [r7, #12]
 800b34a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b34c:	4b10      	ldr	r3, [pc, #64]	; (800b390 <HAL_UART_MspInit+0x114>)
 800b34e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b350:	4a0f      	ldr	r2, [pc, #60]	; (800b390 <HAL_UART_MspInit+0x114>)
 800b352:	f043 0304 	orr.w	r3, r3, #4
 800b356:	6313      	str	r3, [r2, #48]	; 0x30
 800b358:	4b0d      	ldr	r3, [pc, #52]	; (800b390 <HAL_UART_MspInit+0x114>)
 800b35a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b35c:	f003 0304 	and.w	r3, r3, #4
 800b360:	60bb      	str	r3, [r7, #8]
 800b362:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800b364:	23c0      	movs	r3, #192	; 0xc0
 800b366:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b368:	2302      	movs	r3, #2
 800b36a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b36c:	2300      	movs	r3, #0
 800b36e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b370:	2303      	movs	r3, #3
 800b372:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800b374:	2308      	movs	r3, #8
 800b376:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b378:	f107 031c 	add.w	r3, r7, #28
 800b37c:	4619      	mov	r1, r3
 800b37e:	4808      	ldr	r0, [pc, #32]	; (800b3a0 <HAL_UART_MspInit+0x124>)
 800b380:	f7f6 f8b8 	bl	80014f4 <HAL_GPIO_Init>
}
 800b384:	bf00      	nop
 800b386:	3730      	adds	r7, #48	; 0x30
 800b388:	46bd      	mov	sp, r7
 800b38a:	bd80      	pop	{r7, pc}
 800b38c:	40011000 	.word	0x40011000
 800b390:	40023800 	.word	0x40023800
 800b394:	40020400 	.word	0x40020400
 800b398:	40020000 	.word	0x40020000
 800b39c:	40011400 	.word	0x40011400
 800b3a0:	40020800 	.word	0x40020800

0800b3a4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b086      	sub	sp, #24
 800b3a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800b3aa:	1d3b      	adds	r3, r7, #4
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	601a      	str	r2, [r3, #0]
 800b3b0:	605a      	str	r2, [r3, #4]
 800b3b2:	609a      	str	r2, [r3, #8]
 800b3b4:	60da      	str	r2, [r3, #12]
 800b3b6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800b3b8:	4b3a      	ldr	r3, [pc, #232]	; (800b4a4 <HAL_FMC_MspInit+0x100>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d16d      	bne.n	800b49c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 800b3c0:	4b38      	ldr	r3, [pc, #224]	; (800b4a4 <HAL_FMC_MspInit+0x100>)
 800b3c2:	2201      	movs	r2, #1
 800b3c4:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800b3c6:	4b38      	ldr	r3, [pc, #224]	; (800b4a8 <HAL_FMC_MspInit+0x104>)
 800b3c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3ca:	4a37      	ldr	r2, [pc, #220]	; (800b4a8 <HAL_FMC_MspInit+0x104>)
 800b3cc:	f043 0301 	orr.w	r3, r3, #1
 800b3d0:	6393      	str	r3, [r2, #56]	; 0x38
 800b3d2:	4b35      	ldr	r3, [pc, #212]	; (800b4a8 <HAL_FMC_MspInit+0x104>)
 800b3d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3d6:	f003 0301 	and.w	r3, r3, #1
 800b3da:	603b      	str	r3, [r7, #0]
 800b3dc:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 800b3de:	f64f 7383 	movw	r3, #65411	; 0xff83
 800b3e2:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b3e4:	2302      	movs	r3, #2
 800b3e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b3ec:	2303      	movs	r3, #3
 800b3ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b3f0:	230c      	movs	r3, #12
 800b3f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b3f4:	1d3b      	adds	r3, r7, #4
 800b3f6:	4619      	mov	r1, r3
 800b3f8:	482c      	ldr	r0, [pc, #176]	; (800b4ac <HAL_FMC_MspInit+0x108>)
 800b3fa:	f7f6 f87b 	bl	80014f4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 800b3fe:	f248 1333 	movw	r3, #33075	; 0x8133
 800b402:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b404:	2302      	movs	r3, #2
 800b406:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b408:	2300      	movs	r3, #0
 800b40a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b40c:	2303      	movs	r3, #3
 800b40e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b410:	230c      	movs	r3, #12
 800b412:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b414:	1d3b      	adds	r3, r7, #4
 800b416:	4619      	mov	r1, r3
 800b418:	4825      	ldr	r0, [pc, #148]	; (800b4b0 <HAL_FMC_MspInit+0x10c>)
 800b41a:	f7f6 f86b 	bl	80014f4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 800b41e:	f24c 7303 	movw	r3, #50947	; 0xc703
 800b422:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b424:	2302      	movs	r3, #2
 800b426:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b428:	2300      	movs	r3, #0
 800b42a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b42c:	2303      	movs	r3, #3
 800b42e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b430:	230c      	movs	r3, #12
 800b432:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b434:	1d3b      	adds	r3, r7, #4
 800b436:	4619      	mov	r1, r3
 800b438:	481e      	ldr	r0, [pc, #120]	; (800b4b4 <HAL_FMC_MspInit+0x110>)
 800b43a:	f7f6 f85b 	bl	80014f4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 800b43e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800b442:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b444:	2302      	movs	r3, #2
 800b446:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b448:	2300      	movs	r3, #0
 800b44a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b44c:	2303      	movs	r3, #3
 800b44e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b450:	230c      	movs	r3, #12
 800b452:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800b454:	1d3b      	adds	r3, r7, #4
 800b456:	4619      	mov	r1, r3
 800b458:	4817      	ldr	r0, [pc, #92]	; (800b4b8 <HAL_FMC_MspInit+0x114>)
 800b45a:	f7f6 f84b 	bl	80014f4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800b45e:	2328      	movs	r3, #40	; 0x28
 800b460:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b462:	2302      	movs	r3, #2
 800b464:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b466:	2300      	movs	r3, #0
 800b468:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b46a:	2303      	movs	r3, #3
 800b46c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b46e:	230c      	movs	r3, #12
 800b470:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800b472:	1d3b      	adds	r3, r7, #4
 800b474:	4619      	mov	r1, r3
 800b476:	4811      	ldr	r0, [pc, #68]	; (800b4bc <HAL_FMC_MspInit+0x118>)
 800b478:	f7f6 f83c 	bl	80014f4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800b47c:	2308      	movs	r3, #8
 800b47e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b480:	2302      	movs	r3, #2
 800b482:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b484:	2300      	movs	r3, #0
 800b486:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b488:	2303      	movs	r3, #3
 800b48a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b48c:	230c      	movs	r3, #12
 800b48e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800b490:	1d3b      	adds	r3, r7, #4
 800b492:	4619      	mov	r1, r3
 800b494:	480a      	ldr	r0, [pc, #40]	; (800b4c0 <HAL_FMC_MspInit+0x11c>)
 800b496:	f7f6 f82d 	bl	80014f4 <HAL_GPIO_Init>
 800b49a:	e000      	b.n	800b49e <HAL_FMC_MspInit+0xfa>
    return;
 800b49c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800b49e:	3718      	adds	r7, #24
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}
 800b4a4:	20000034 	.word	0x20000034
 800b4a8:	40023800 	.word	0x40023800
 800b4ac:	40021000 	.word	0x40021000
 800b4b0:	40021800 	.word	0x40021800
 800b4b4:	40020c00 	.word	0x40020c00
 800b4b8:	40021400 	.word	0x40021400
 800b4bc:	40021c00 	.word	0x40021c00
 800b4c0:	40020800 	.word	0x40020800

0800b4c4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b082      	sub	sp, #8
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800b4cc:	f7ff ff6a 	bl	800b3a4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800b4d0:	bf00      	nop
 800b4d2:	3708      	adds	r7, #8
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd80      	pop	{r7, pc}

0800b4d8 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b08a      	sub	sp, #40	; 0x28
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	4a2b      	ldr	r2, [pc, #172]	; (800b594 <HAL_SAI_MspInit+0xbc>)
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	d124      	bne.n	800b534 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 800b4ea:	4b2b      	ldr	r3, [pc, #172]	; (800b598 <HAL_SAI_MspInit+0xc0>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d10b      	bne.n	800b50a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800b4f2:	4b2a      	ldr	r3, [pc, #168]	; (800b59c <HAL_SAI_MspInit+0xc4>)
 800b4f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4f6:	4a29      	ldr	r2, [pc, #164]	; (800b59c <HAL_SAI_MspInit+0xc4>)
 800b4f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b4fc:	6453      	str	r3, [r2, #68]	; 0x44
 800b4fe:	4b27      	ldr	r3, [pc, #156]	; (800b59c <HAL_SAI_MspInit+0xc4>)
 800b500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b502:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b506:	613b      	str	r3, [r7, #16]
 800b508:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 800b50a:	4b23      	ldr	r3, [pc, #140]	; (800b598 <HAL_SAI_MspInit+0xc0>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	3301      	adds	r3, #1
 800b510:	4a21      	ldr	r2, [pc, #132]	; (800b598 <HAL_SAI_MspInit+0xc0>)
 800b512:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800b514:	23f0      	movs	r3, #240	; 0xf0
 800b516:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b518:	2302      	movs	r3, #2
 800b51a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b51c:	2300      	movs	r3, #0
 800b51e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b520:	2300      	movs	r3, #0
 800b522:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800b524:	230a      	movs	r3, #10
 800b526:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800b528:	f107 0314 	add.w	r3, r7, #20
 800b52c:	4619      	mov	r1, r3
 800b52e:	481c      	ldr	r0, [pc, #112]	; (800b5a0 <HAL_SAI_MspInit+0xc8>)
 800b530:	f7f5 ffe0 	bl	80014f4 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	4a1a      	ldr	r2, [pc, #104]	; (800b5a4 <HAL_SAI_MspInit+0xcc>)
 800b53a:	4293      	cmp	r3, r2
 800b53c:	d125      	bne.n	800b58a <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 800b53e:	4b16      	ldr	r3, [pc, #88]	; (800b598 <HAL_SAI_MspInit+0xc0>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d10b      	bne.n	800b55e <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800b546:	4b15      	ldr	r3, [pc, #84]	; (800b59c <HAL_SAI_MspInit+0xc4>)
 800b548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b54a:	4a14      	ldr	r2, [pc, #80]	; (800b59c <HAL_SAI_MspInit+0xc4>)
 800b54c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b550:	6453      	str	r3, [r2, #68]	; 0x44
 800b552:	4b12      	ldr	r3, [pc, #72]	; (800b59c <HAL_SAI_MspInit+0xc4>)
 800b554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b556:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b55a:	60fb      	str	r3, [r7, #12]
 800b55c:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 800b55e:	4b0e      	ldr	r3, [pc, #56]	; (800b598 <HAL_SAI_MspInit+0xc0>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	3301      	adds	r3, #1
 800b564:	4a0c      	ldr	r2, [pc, #48]	; (800b598 <HAL_SAI_MspInit+0xc0>)
 800b566:	6013      	str	r3, [r2, #0]
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800b568:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b56c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b56e:	2302      	movs	r3, #2
 800b570:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b572:	2300      	movs	r3, #0
 800b574:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b576:	2300      	movs	r3, #0
 800b578:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800b57a:	230a      	movs	r3, #10
 800b57c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800b57e:	f107 0314 	add.w	r3, r7, #20
 800b582:	4619      	mov	r1, r3
 800b584:	4808      	ldr	r0, [pc, #32]	; (800b5a8 <HAL_SAI_MspInit+0xd0>)
 800b586:	f7f5 ffb5 	bl	80014f4 <HAL_GPIO_Init>

    }
}
 800b58a:	bf00      	nop
 800b58c:	3728      	adds	r7, #40	; 0x28
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}
 800b592:	bf00      	nop
 800b594:	40015c04 	.word	0x40015c04
 800b598:	20000038 	.word	0x20000038
 800b59c:	40023800 	.word	0x40023800
 800b5a0:	40022000 	.word	0x40022000
 800b5a4:	40015c24 	.word	0x40015c24
 800b5a8:	40021800 	.word	0x40021800

0800b5ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b08c      	sub	sp, #48	; 0x30
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800b5bc:	2200      	movs	r2, #0
 800b5be:	6879      	ldr	r1, [r7, #4]
 800b5c0:	2036      	movs	r0, #54	; 0x36
 800b5c2:	f7f5 fc25 	bl	8000e10 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800b5c6:	2036      	movs	r0, #54	; 0x36
 800b5c8:	f7f5 fc3e 	bl	8000e48 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800b5cc:	4b1f      	ldr	r3, [pc, #124]	; (800b64c <HAL_InitTick+0xa0>)
 800b5ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5d0:	4a1e      	ldr	r2, [pc, #120]	; (800b64c <HAL_InitTick+0xa0>)
 800b5d2:	f043 0310 	orr.w	r3, r3, #16
 800b5d6:	6413      	str	r3, [r2, #64]	; 0x40
 800b5d8:	4b1c      	ldr	r3, [pc, #112]	; (800b64c <HAL_InitTick+0xa0>)
 800b5da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5dc:	f003 0310 	and.w	r3, r3, #16
 800b5e0:	60fb      	str	r3, [r7, #12]
 800b5e2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800b5e4:	f107 0210 	add.w	r2, r7, #16
 800b5e8:	f107 0314 	add.w	r3, r7, #20
 800b5ec:	4611      	mov	r1, r2
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f7f8 ff1c 	bl	800442c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800b5f4:	f7f8 fef2 	bl	80043dc <HAL_RCC_GetPCLK1Freq>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	005b      	lsls	r3, r3, #1
 800b5fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800b5fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b600:	4a13      	ldr	r2, [pc, #76]	; (800b650 <HAL_InitTick+0xa4>)
 800b602:	fba2 2303 	umull	r2, r3, r2, r3
 800b606:	0c9b      	lsrs	r3, r3, #18
 800b608:	3b01      	subs	r3, #1
 800b60a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800b60c:	4b11      	ldr	r3, [pc, #68]	; (800b654 <HAL_InitTick+0xa8>)
 800b60e:	4a12      	ldr	r2, [pc, #72]	; (800b658 <HAL_InitTick+0xac>)
 800b610:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800b612:	4b10      	ldr	r3, [pc, #64]	; (800b654 <HAL_InitTick+0xa8>)
 800b614:	f240 32e7 	movw	r2, #999	; 0x3e7
 800b618:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800b61a:	4a0e      	ldr	r2, [pc, #56]	; (800b654 <HAL_InitTick+0xa8>)
 800b61c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b61e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800b620:	4b0c      	ldr	r3, [pc, #48]	; (800b654 <HAL_InitTick+0xa8>)
 800b622:	2200      	movs	r2, #0
 800b624:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b626:	4b0b      	ldr	r3, [pc, #44]	; (800b654 <HAL_InitTick+0xa8>)
 800b628:	2200      	movs	r2, #0
 800b62a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800b62c:	4809      	ldr	r0, [pc, #36]	; (800b654 <HAL_InitTick+0xa8>)
 800b62e:	f7fa fadd 	bl	8005bec <HAL_TIM_Base_Init>
 800b632:	4603      	mov	r3, r0
 800b634:	2b00      	cmp	r3, #0
 800b636:	d104      	bne.n	800b642 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800b638:	4806      	ldr	r0, [pc, #24]	; (800b654 <HAL_InitTick+0xa8>)
 800b63a:	f7fa fb03 	bl	8005c44 <HAL_TIM_Base_Start_IT>
 800b63e:	4603      	mov	r3, r0
 800b640:	e000      	b.n	800b644 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800b642:	2301      	movs	r3, #1
}
 800b644:	4618      	mov	r0, r3
 800b646:	3730      	adds	r7, #48	; 0x30
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}
 800b64c:	40023800 	.word	0x40023800
 800b650:	431bde83 	.word	0x431bde83
 800b654:	20000820 	.word	0x20000820
 800b658:	40001000 	.word	0x40001000

0800b65c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b65c:	b480      	push	{r7}
 800b65e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800b660:	bf00      	nop
 800b662:	46bd      	mov	sp, r7
 800b664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b668:	4770      	bx	lr

0800b66a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b66a:	b480      	push	{r7}
 800b66c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b66e:	e7fe      	b.n	800b66e <HardFault_Handler+0x4>

0800b670 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b670:	b480      	push	{r7}
 800b672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b674:	e7fe      	b.n	800b674 <MemManage_Handler+0x4>

0800b676 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b676:	b480      	push	{r7}
 800b678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b67a:	e7fe      	b.n	800b67a <BusFault_Handler+0x4>

0800b67c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b67c:	b480      	push	{r7}
 800b67e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b680:	e7fe      	b.n	800b680 <UsageFault_Handler+0x4>

0800b682 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b682:	b480      	push	{r7}
 800b684:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b686:	bf00      	nop
 800b688:	46bd      	mov	sp, r7
 800b68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68e:	4770      	bx	lr

0800b690 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b690:	b480      	push	{r7}
 800b692:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b694:	bf00      	nop
 800b696:	46bd      	mov	sp, r7
 800b698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69c:	4770      	bx	lr

0800b69e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b69e:	b480      	push	{r7}
 800b6a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b6a2:	bf00      	nop
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6aa:	4770      	bx	lr

0800b6ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800b6b0:	4802      	ldr	r0, [pc, #8]	; (800b6bc <TIM6_DAC_IRQHandler+0x10>)
 800b6b2:	f7fa fb1c 	bl	8005cee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800b6b6:	bf00      	nop
 800b6b8:	bd80      	pop	{r7, pc}
 800b6ba:	bf00      	nop
 800b6bc:	20000820 	.word	0x20000820

0800b6c0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800b6c4:	4802      	ldr	r0, [pc, #8]	; (800b6d0 <OTG_FS_IRQHandler+0x10>)
 800b6c6:	f7f6 faf1 	bl	8001cac <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800b6ca:	bf00      	nop
 800b6cc:	bd80      	pop	{r7, pc}
 800b6ce:	bf00      	nop
 800b6d0:	20000c2c 	.word	0x20000c2c

0800b6d4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800b6d8:	4802      	ldr	r0, [pc, #8]	; (800b6e4 <LTDC_IRQHandler+0x10>)
 800b6da:	f7f7 fe9f 	bl	800341c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800b6de:	bf00      	nop
 800b6e0:	bd80      	pop	{r7, pc}
 800b6e2:	bf00      	nop
 800b6e4:	200003f8 	.word	0x200003f8

0800b6e8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800b6ec:	4802      	ldr	r0, [pc, #8]	; (800b6f8 <DMA2D_IRQHandler+0x10>)
 800b6ee:	f7f5 fd5f 	bl	80011b0 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800b6f2:	bf00      	nop
 800b6f4:	bd80      	pop	{r7, pc}
 800b6f6:	bf00      	nop
 800b6f8:	20000698 	.word	0x20000698

0800b6fc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b700:	4b15      	ldr	r3, [pc, #84]	; (800b758 <SystemInit+0x5c>)
 800b702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b706:	4a14      	ldr	r2, [pc, #80]	; (800b758 <SystemInit+0x5c>)
 800b708:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b70c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800b710:	4b12      	ldr	r3, [pc, #72]	; (800b75c <SystemInit+0x60>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	4a11      	ldr	r2, [pc, #68]	; (800b75c <SystemInit+0x60>)
 800b716:	f043 0301 	orr.w	r3, r3, #1
 800b71a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800b71c:	4b0f      	ldr	r3, [pc, #60]	; (800b75c <SystemInit+0x60>)
 800b71e:	2200      	movs	r2, #0
 800b720:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800b722:	4b0e      	ldr	r3, [pc, #56]	; (800b75c <SystemInit+0x60>)
 800b724:	681a      	ldr	r2, [r3, #0]
 800b726:	490d      	ldr	r1, [pc, #52]	; (800b75c <SystemInit+0x60>)
 800b728:	4b0d      	ldr	r3, [pc, #52]	; (800b760 <SystemInit+0x64>)
 800b72a:	4013      	ands	r3, r2
 800b72c:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800b72e:	4b0b      	ldr	r3, [pc, #44]	; (800b75c <SystemInit+0x60>)
 800b730:	4a0c      	ldr	r2, [pc, #48]	; (800b764 <SystemInit+0x68>)
 800b732:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800b734:	4b09      	ldr	r3, [pc, #36]	; (800b75c <SystemInit+0x60>)
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	4a08      	ldr	r2, [pc, #32]	; (800b75c <SystemInit+0x60>)
 800b73a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b73e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800b740:	4b06      	ldr	r3, [pc, #24]	; (800b75c <SystemInit+0x60>)
 800b742:	2200      	movs	r2, #0
 800b744:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b746:	4b04      	ldr	r3, [pc, #16]	; (800b758 <SystemInit+0x5c>)
 800b748:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b74c:	609a      	str	r2, [r3, #8]
#endif
}
 800b74e:	bf00      	nop
 800b750:	46bd      	mov	sp, r7
 800b752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b756:	4770      	bx	lr
 800b758:	e000ed00 	.word	0xe000ed00
 800b75c:	40023800 	.word	0x40023800
 800b760:	fef6ffff 	.word	0xfef6ffff
 800b764:	24003010 	.word	0x24003010

0800b768 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b76c:	4802      	ldr	r0, [pc, #8]	; (800b778 <MX_USB_HOST_Process+0x10>)
 800b76e:	f7fc fd6d 	bl	800824c <USBH_Process>
}
 800b772:	bf00      	nop
 800b774:	bd80      	pop	{r7, pc}
 800b776:	bf00      	nop
 800b778:	20000860 	.word	0x20000860

0800b77c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b082      	sub	sp, #8
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b78a:	4618      	mov	r0, r3
 800b78c:	f7fd f800 	bl	8008790 <USBH_LL_IncTimer>
}
 800b790:	bf00      	nop
 800b792:	3708      	adds	r7, #8
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}

0800b798 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b082      	sub	sp, #8
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f7fd f845 	bl	8008836 <USBH_LL_Connect>
}
 800b7ac:	bf00      	nop
 800b7ae:	3708      	adds	r7, #8
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}

0800b7b4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b082      	sub	sp, #8
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f7fd f85d 	bl	8008882 <USBH_LL_Disconnect>
}
 800b7c8:	bf00      	nop
 800b7ca:	3708      	adds	r7, #8
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}

0800b7d0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	b083      	sub	sp, #12
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
 800b7d8:	460b      	mov	r3, r1
 800b7da:	70fb      	strb	r3, [r7, #3]
 800b7dc:	4613      	mov	r3, r2
 800b7de:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b7e0:	bf00      	nop
 800b7e2:	370c      	adds	r7, #12
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ea:	4770      	bx	lr

0800b7ec <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b082      	sub	sp, #8
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f7fc fff2 	bl	80087e4 <USBH_LL_PortEnabled>
} 
 800b800:	bf00      	nop
 800b802:	3708      	adds	r7, #8
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}

0800b808 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b082      	sub	sp, #8
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b816:	4618      	mov	r0, r3
 800b818:	f7fc fff2 	bl	8008800 <USBH_LL_PortDisabled>
} 
 800b81c:	bf00      	nop
 800b81e:	3708      	adds	r7, #8
 800b820:	46bd      	mov	sp, r7
 800b822:	bd80      	pop	{r7, pc}

0800b824 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b084      	sub	sp, #16
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b82c:	2300      	movs	r3, #0
 800b82e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b830:	2300      	movs	r3, #0
 800b832:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b83a:	4618      	mov	r0, r3
 800b83c:	f7f6 fb3c 	bl	8001eb8 <HAL_HCD_Start>
 800b840:	4603      	mov	r3, r0
 800b842:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b844:	7bfb      	ldrb	r3, [r7, #15]
 800b846:	4618      	mov	r0, r3
 800b848:	f000 f8e0 	bl	800ba0c <USBH_Get_USB_Status>
 800b84c:	4603      	mov	r3, r0
 800b84e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b850:	7bbb      	ldrb	r3, [r7, #14]
}
 800b852:	4618      	mov	r0, r3
 800b854:	3710      	adds	r7, #16
 800b856:	46bd      	mov	sp, r7
 800b858:	bd80      	pop	{r7, pc}

0800b85a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b85a:	b580      	push	{r7, lr}
 800b85c:	b084      	sub	sp, #16
 800b85e:	af00      	add	r7, sp, #0
 800b860:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b862:	2300      	movs	r3, #0
 800b864:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b866:	2300      	movs	r3, #0
 800b868:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b870:	4618      	mov	r0, r3
 800b872:	f7f6 fb44 	bl	8001efe <HAL_HCD_Stop>
 800b876:	4603      	mov	r3, r0
 800b878:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b87a:	7bfb      	ldrb	r3, [r7, #15]
 800b87c:	4618      	mov	r0, r3
 800b87e:	f000 f8c5 	bl	800ba0c <USBH_Get_USB_Status>
 800b882:	4603      	mov	r3, r0
 800b884:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800b886:	7bbb      	ldrb	r3, [r7, #14]
}
 800b888:	4618      	mov	r0, r3
 800b88a:	3710      	adds	r7, #16
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bd80      	pop	{r7, pc}

0800b890 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b084      	sub	sp, #16
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b898:	2301      	movs	r3, #1
 800b89a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f7f6 fb6b 	bl	8001f7e <HAL_HCD_GetCurrentSpeed>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	2b01      	cmp	r3, #1
 800b8ac:	d007      	beq.n	800b8be <USBH_LL_GetSpeed+0x2e>
 800b8ae:	2b01      	cmp	r3, #1
 800b8b0:	d302      	bcc.n	800b8b8 <USBH_LL_GetSpeed+0x28>
 800b8b2:	2b02      	cmp	r3, #2
 800b8b4:	d006      	beq.n	800b8c4 <USBH_LL_GetSpeed+0x34>
 800b8b6:	e008      	b.n	800b8ca <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	73fb      	strb	r3, [r7, #15]
    break;
 800b8bc:	e008      	b.n	800b8d0 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b8be:	2301      	movs	r3, #1
 800b8c0:	73fb      	strb	r3, [r7, #15]
    break;
 800b8c2:	e005      	b.n	800b8d0 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b8c4:	2302      	movs	r3, #2
 800b8c6:	73fb      	strb	r3, [r7, #15]
    break;
 800b8c8:	e002      	b.n	800b8d0 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	73fb      	strb	r3, [r7, #15]
    break;
 800b8ce:	bf00      	nop
  }
  return  speed;
 800b8d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3710      	adds	r7, #16
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}

0800b8da <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b8da:	b580      	push	{r7, lr}
 800b8dc:	b084      	sub	sp, #16
 800b8de:	af00      	add	r7, sp, #0
 800b8e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	f7f6 fb21 	bl	8001f38 <HAL_HCD_ResetPort>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 800b8fa:	7bfb      	ldrb	r3, [r7, #15]
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f000 f885 	bl	800ba0c <USBH_Get_USB_Status>
 800b902:	4603      	mov	r3, r0
 800b904:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b906:	7bbb      	ldrb	r3, [r7, #14]
}
 800b908:	4618      	mov	r0, r3
 800b90a:	3710      	adds	r7, #16
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bd80      	pop	{r7, pc}

0800b910 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b910:	b590      	push	{r4, r7, lr}
 800b912:	b089      	sub	sp, #36	; 0x24
 800b914:	af04      	add	r7, sp, #16
 800b916:	6078      	str	r0, [r7, #4]
 800b918:	4608      	mov	r0, r1
 800b91a:	4611      	mov	r1, r2
 800b91c:	461a      	mov	r2, r3
 800b91e:	4603      	mov	r3, r0
 800b920:	70fb      	strb	r3, [r7, #3]
 800b922:	460b      	mov	r3, r1
 800b924:	70bb      	strb	r3, [r7, #2]
 800b926:	4613      	mov	r3, r2
 800b928:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b92a:	2300      	movs	r3, #0
 800b92c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b92e:	2300      	movs	r3, #0
 800b930:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800b938:	787c      	ldrb	r4, [r7, #1]
 800b93a:	78ba      	ldrb	r2, [r7, #2]
 800b93c:	78f9      	ldrb	r1, [r7, #3]
 800b93e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b940:	9302      	str	r3, [sp, #8]
 800b942:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b946:	9301      	str	r3, [sp, #4]
 800b948:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b94c:	9300      	str	r3, [sp, #0]
 800b94e:	4623      	mov	r3, r4
 800b950:	f7f5 ffab 	bl	80018aa <HAL_HCD_HC_Init>
 800b954:	4603      	mov	r3, r0
 800b956:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b958:	7bfb      	ldrb	r3, [r7, #15]
 800b95a:	4618      	mov	r0, r3
 800b95c:	f000 f856 	bl	800ba0c <USBH_Get_USB_Status>
 800b960:	4603      	mov	r3, r0
 800b962:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b964:	7bbb      	ldrb	r3, [r7, #14]
}
 800b966:	4618      	mov	r0, r3
 800b968:	3714      	adds	r7, #20
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd90      	pop	{r4, r7, pc}

0800b96e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b96e:	b590      	push	{r4, r7, lr}
 800b970:	b089      	sub	sp, #36	; 0x24
 800b972:	af04      	add	r7, sp, #16
 800b974:	6078      	str	r0, [r7, #4]
 800b976:	4608      	mov	r0, r1
 800b978:	4611      	mov	r1, r2
 800b97a:	461a      	mov	r2, r3
 800b97c:	4603      	mov	r3, r0
 800b97e:	70fb      	strb	r3, [r7, #3]
 800b980:	460b      	mov	r3, r1
 800b982:	70bb      	strb	r3, [r7, #2]
 800b984:	4613      	mov	r3, r2
 800b986:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b988:	2300      	movs	r3, #0
 800b98a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b98c:	2300      	movs	r3, #0
 800b98e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800b996:	787c      	ldrb	r4, [r7, #1]
 800b998:	78ba      	ldrb	r2, [r7, #2]
 800b99a:	78f9      	ldrb	r1, [r7, #3]
 800b99c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b9a0:	9303      	str	r3, [sp, #12]
 800b9a2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b9a4:	9302      	str	r3, [sp, #8]
 800b9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a8:	9301      	str	r3, [sp, #4]
 800b9aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b9ae:	9300      	str	r3, [sp, #0]
 800b9b0:	4623      	mov	r3, r4
 800b9b2:	f7f6 f813 	bl	80019dc <HAL_HCD_HC_SubmitRequest>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b9ba:	7bfb      	ldrb	r3, [r7, #15]
 800b9bc:	4618      	mov	r0, r3
 800b9be:	f000 f825 	bl	800ba0c <USBH_Get_USB_Status>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b9c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3714      	adds	r7, #20
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd90      	pop	{r4, r7, pc}

0800b9d0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b082      	sub	sp, #8
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
 800b9d8:	460b      	mov	r3, r1
 800b9da:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b9e2:	78fa      	ldrb	r2, [r7, #3]
 800b9e4:	4611      	mov	r1, r2
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f7f6 fab4 	bl	8001f54 <HAL_HCD_HC_GetURBState>
 800b9ec:	4603      	mov	r3, r0
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	3708      	adds	r7, #8
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}

0800b9f6 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b9f6:	b580      	push	{r7, lr}
 800b9f8:	b082      	sub	sp, #8
 800b9fa:	af00      	add	r7, sp, #0
 800b9fc:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f7f4 feba 	bl	8000778 <HAL_Delay>
}
 800ba04:	bf00      	nop
 800ba06:	3708      	adds	r7, #8
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}

0800ba0c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b085      	sub	sp, #20
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	4603      	mov	r3, r0
 800ba14:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ba16:	2300      	movs	r3, #0
 800ba18:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ba1a:	79fb      	ldrb	r3, [r7, #7]
 800ba1c:	2b03      	cmp	r3, #3
 800ba1e:	d817      	bhi.n	800ba50 <USBH_Get_USB_Status+0x44>
 800ba20:	a201      	add	r2, pc, #4	; (adr r2, 800ba28 <USBH_Get_USB_Status+0x1c>)
 800ba22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba26:	bf00      	nop
 800ba28:	0800ba39 	.word	0x0800ba39
 800ba2c:	0800ba3f 	.word	0x0800ba3f
 800ba30:	0800ba45 	.word	0x0800ba45
 800ba34:	0800ba4b 	.word	0x0800ba4b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ba38:	2300      	movs	r3, #0
 800ba3a:	73fb      	strb	r3, [r7, #15]
    break;
 800ba3c:	e00b      	b.n	800ba56 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ba3e:	2302      	movs	r3, #2
 800ba40:	73fb      	strb	r3, [r7, #15]
    break;
 800ba42:	e008      	b.n	800ba56 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ba44:	2301      	movs	r3, #1
 800ba46:	73fb      	strb	r3, [r7, #15]
    break;
 800ba48:	e005      	b.n	800ba56 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ba4a:	2302      	movs	r3, #2
 800ba4c:	73fb      	strb	r3, [r7, #15]
    break;
 800ba4e:	e002      	b.n	800ba56 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ba50:	2302      	movs	r3, #2
 800ba52:	73fb      	strb	r3, [r7, #15]
    break;
 800ba54:	bf00      	nop
  }
  return usb_status;
 800ba56:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba58:	4618      	mov	r0, r3
 800ba5a:	3714      	adds	r7, #20
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba62:	4770      	bx	lr

0800ba64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800ba64:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ba9c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800ba68:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800ba6a:	e003      	b.n	800ba74 <LoopCopyDataInit>

0800ba6c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800ba6c:	4b0c      	ldr	r3, [pc, #48]	; (800baa0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800ba6e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800ba70:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800ba72:	3104      	adds	r1, #4

0800ba74 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800ba74:	480b      	ldr	r0, [pc, #44]	; (800baa4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800ba76:	4b0c      	ldr	r3, [pc, #48]	; (800baa8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800ba78:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800ba7a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800ba7c:	d3f6      	bcc.n	800ba6c <CopyDataInit>
  ldr  r2, =_sbss
 800ba7e:	4a0b      	ldr	r2, [pc, #44]	; (800baac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800ba80:	e002      	b.n	800ba88 <LoopFillZerobss>

0800ba82 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800ba82:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800ba84:	f842 3b04 	str.w	r3, [r2], #4

0800ba88 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800ba88:	4b09      	ldr	r3, [pc, #36]	; (800bab0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800ba8a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800ba8c:	d3f9      	bcc.n	800ba82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800ba8e:	f7ff fe35 	bl	800b6fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800ba92:	f000 f811 	bl	800bab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ba96:	f7fd fc82 	bl	800939e <main>
  bx  lr    
 800ba9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800ba9c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800baa0:	0800bb60 	.word	0x0800bb60
  ldr  r0, =_sdata
 800baa4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800baa8:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 800baac:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 800bab0:	20000ef0 	.word	0x20000ef0

0800bab4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800bab4:	e7fe      	b.n	800bab4 <ADC_IRQHandler>
	...

0800bab8 <__libc_init_array>:
 800bab8:	b570      	push	{r4, r5, r6, lr}
 800baba:	4e0d      	ldr	r6, [pc, #52]	; (800baf0 <__libc_init_array+0x38>)
 800babc:	4c0d      	ldr	r4, [pc, #52]	; (800baf4 <__libc_init_array+0x3c>)
 800babe:	1ba4      	subs	r4, r4, r6
 800bac0:	10a4      	asrs	r4, r4, #2
 800bac2:	2500      	movs	r5, #0
 800bac4:	42a5      	cmp	r5, r4
 800bac6:	d109      	bne.n	800badc <__libc_init_array+0x24>
 800bac8:	4e0b      	ldr	r6, [pc, #44]	; (800baf8 <__libc_init_array+0x40>)
 800baca:	4c0c      	ldr	r4, [pc, #48]	; (800bafc <__libc_init_array+0x44>)
 800bacc:	f000 f820 	bl	800bb10 <_init>
 800bad0:	1ba4      	subs	r4, r4, r6
 800bad2:	10a4      	asrs	r4, r4, #2
 800bad4:	2500      	movs	r5, #0
 800bad6:	42a5      	cmp	r5, r4
 800bad8:	d105      	bne.n	800bae6 <__libc_init_array+0x2e>
 800bada:	bd70      	pop	{r4, r5, r6, pc}
 800badc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bae0:	4798      	blx	r3
 800bae2:	3501      	adds	r5, #1
 800bae4:	e7ee      	b.n	800bac4 <__libc_init_array+0xc>
 800bae6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800baea:	4798      	blx	r3
 800baec:	3501      	adds	r5, #1
 800baee:	e7f2      	b.n	800bad6 <__libc_init_array+0x1e>
 800baf0:	0800bb58 	.word	0x0800bb58
 800baf4:	0800bb58 	.word	0x0800bb58
 800baf8:	0800bb58 	.word	0x0800bb58
 800bafc:	0800bb5c 	.word	0x0800bb5c

0800bb00 <memset>:
 800bb00:	4402      	add	r2, r0
 800bb02:	4603      	mov	r3, r0
 800bb04:	4293      	cmp	r3, r2
 800bb06:	d100      	bne.n	800bb0a <memset+0xa>
 800bb08:	4770      	bx	lr
 800bb0a:	f803 1b01 	strb.w	r1, [r3], #1
 800bb0e:	e7f9      	b.n	800bb04 <memset+0x4>

0800bb10 <_init>:
 800bb10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb12:	bf00      	nop
 800bb14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb16:	bc08      	pop	{r3}
 800bb18:	469e      	mov	lr, r3
 800bb1a:	4770      	bx	lr

0800bb1c <_fini>:
 800bb1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb1e:	bf00      	nop
 800bb20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb22:	bc08      	pop	{r3}
 800bb24:	469e      	mov	lr, r3
 800bb26:	4770      	bx	lr
