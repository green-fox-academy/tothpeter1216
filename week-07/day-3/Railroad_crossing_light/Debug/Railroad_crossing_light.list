
Railroad_crossing_light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b84  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001d4c  08001d4c  00011d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d64  08001d64  00020008  2**0
                  CONTENTS
  4 .ARM          00000008  08001d64  08001d64  00011d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001d6c  08001d6c  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d6c  08001d6c  00011d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001d70  08001d70  00011d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08001d74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000008  08001d7c  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  08001d7c  00020068  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008ce1  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000141a  00000000  00000000  00028d19  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000958  00000000  00000000  0002a138  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008a0  00000000  00000000  0002aa90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002385f  00000000  00000000  0002b330  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007a38  00000000  00000000  0004eb8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e02d5  00000000  00000000  000565c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013689c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002674  00000000  00000000  00136918  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000008 	.word	0x20000008
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08001d34 	.word	0x08001d34

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000000c 	.word	0x2000000c
 8000204:	08001d34 	.word	0x08001d34

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b972 	b.w	8000504 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	4688      	mov	r8, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14b      	bne.n	80002de <__udivmoddi4+0xa6>
 8000246:	428a      	cmp	r2, r1
 8000248:	4615      	mov	r5, r2
 800024a:	d967      	bls.n	800031c <__udivmoddi4+0xe4>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0720 	rsb	r7, r2, #32
 8000256:	fa01 f302 	lsl.w	r3, r1, r2
 800025a:	fa20 f707 	lsr.w	r7, r0, r7
 800025e:	4095      	lsls	r5, r2
 8000260:	ea47 0803 	orr.w	r8, r7, r3
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000270:	fa1f fc85 	uxth.w	ip, r5
 8000274:	fb0e 8817 	mls	r8, lr, r7, r8
 8000278:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027c:	fb07 f10c 	mul.w	r1, r7, ip
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18eb      	adds	r3, r5, r3
 8000286:	f107 30ff 	add.w	r0, r7, #4294967295
 800028a:	f080 811b 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8118 	bls.w	80004c4 <__udivmoddi4+0x28c>
 8000294:	3f02      	subs	r7, #2
 8000296:	442b      	add	r3, r5
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ac:	45a4      	cmp	ip, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	192c      	adds	r4, r5, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x290>
 80002ba:	45a4      	cmp	ip, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x290>
 80002c0:	3802      	subs	r0, #2
 80002c2:	442c      	add	r4, r5
 80002c4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c8:	eba4 040c 	sub.w	r4, r4, ip
 80002cc:	2700      	movs	r7, #0
 80002ce:	b11e      	cbz	r6, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c6 4300 	strd	r4, r3, [r6]
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xbe>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80eb 	beq.w	80004be <__udivmoddi4+0x286>
 80002e8:	2700      	movs	r7, #0
 80002ea:	e9c6 0100 	strd	r0, r1, [r6]
 80002ee:	4638      	mov	r0, r7
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f783 	clz	r7, r3
 80002fa:	2f00      	cmp	r7, #0
 80002fc:	d147      	bne.n	800038e <__udivmoddi4+0x156>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd0>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80fa 	bhi.w	80004fc <__udivmoddi4+0x2c4>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4698      	mov	r8, r3
 8000312:	2e00      	cmp	r6, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000316:	e9c6 4800 	strd	r4, r8, [r6]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa0>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xe8>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 808f 	bne.w	8000448 <__udivmoddi4+0x210>
 800032a:	1b49      	subs	r1, r1, r5
 800032c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000330:	fa1f f885 	uxth.w	r8, r5
 8000334:	2701      	movs	r7, #1
 8000336:	fbb1 fcfe 	udiv	ip, r1, lr
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000340:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000344:	fb08 f10c 	mul.w	r1, r8, ip
 8000348:	4299      	cmp	r1, r3
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x124>
 800034c:	18eb      	adds	r3, r5, r3
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4299      	cmp	r1, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 800035a:	4684      	mov	ip, r0
 800035c:	1a59      	subs	r1, r3, r1
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1410 	mls	r4, lr, r0, r1
 8000368:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x14c>
 8000374:	192c      	adds	r4, r5, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x14a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80b6 	bhi.w	80004ee <__udivmoddi4+0x2b6>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e79f      	b.n	80002ce <__udivmoddi4+0x96>
 800038e:	f1c7 0c20 	rsb	ip, r7, #32
 8000392:	40bb      	lsls	r3, r7
 8000394:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000398:	ea4e 0e03 	orr.w	lr, lr, r3
 800039c:	fa01 f407 	lsl.w	r4, r1, r7
 80003a0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003ac:	4325      	orrs	r5, r4
 80003ae:	fbb3 f9f8 	udiv	r9, r3, r8
 80003b2:	0c2c      	lsrs	r4, r5, #16
 80003b4:	fb08 3319 	mls	r3, r8, r9, r3
 80003b8:	fa1f fa8e 	uxth.w	sl, lr
 80003bc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c0:	fb09 f40a 	mul.w	r4, r9, sl
 80003c4:	429c      	cmp	r4, r3
 80003c6:	fa02 f207 	lsl.w	r2, r2, r7
 80003ca:	fa00 f107 	lsl.w	r1, r0, r7
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1e 0303 	adds.w	r3, lr, r3
 80003d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d8:	f080 8087 	bcs.w	80004ea <__udivmoddi4+0x2b2>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f240 8084 	bls.w	80004ea <__udivmoddi4+0x2b2>
 80003e2:	f1a9 0902 	sub.w	r9, r9, #2
 80003e6:	4473      	add	r3, lr
 80003e8:	1b1b      	subs	r3, r3, r4
 80003ea:	b2ad      	uxth	r5, r5
 80003ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f0:	fb08 3310 	mls	r3, r8, r0, r3
 80003f4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003fc:	45a2      	cmp	sl, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1e 0404 	adds.w	r4, lr, r4
 8000404:	f100 33ff 	add.w	r3, r0, #4294967295
 8000408:	d26b      	bcs.n	80004e2 <__udivmoddi4+0x2aa>
 800040a:	45a2      	cmp	sl, r4
 800040c:	d969      	bls.n	80004e2 <__udivmoddi4+0x2aa>
 800040e:	3802      	subs	r0, #2
 8000410:	4474      	add	r4, lr
 8000412:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000416:	fba0 8902 	umull	r8, r9, r0, r2
 800041a:	eba4 040a 	sub.w	r4, r4, sl
 800041e:	454c      	cmp	r4, r9
 8000420:	46c2      	mov	sl, r8
 8000422:	464b      	mov	r3, r9
 8000424:	d354      	bcc.n	80004d0 <__udivmoddi4+0x298>
 8000426:	d051      	beq.n	80004cc <__udivmoddi4+0x294>
 8000428:	2e00      	cmp	r6, #0
 800042a:	d069      	beq.n	8000500 <__udivmoddi4+0x2c8>
 800042c:	ebb1 050a 	subs.w	r5, r1, sl
 8000430:	eb64 0403 	sbc.w	r4, r4, r3
 8000434:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000438:	40fd      	lsrs	r5, r7
 800043a:	40fc      	lsrs	r4, r7
 800043c:	ea4c 0505 	orr.w	r5, ip, r5
 8000440:	e9c6 5400 	strd	r5, r4, [r6]
 8000444:	2700      	movs	r7, #0
 8000446:	e747      	b.n	80002d8 <__udivmoddi4+0xa0>
 8000448:	f1c2 0320 	rsb	r3, r2, #32
 800044c:	fa20 f703 	lsr.w	r7, r0, r3
 8000450:	4095      	lsls	r5, r2
 8000452:	fa01 f002 	lsl.w	r0, r1, r2
 8000456:	fa21 f303 	lsr.w	r3, r1, r3
 800045a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045e:	4338      	orrs	r0, r7
 8000460:	0c01      	lsrs	r1, r0, #16
 8000462:	fbb3 f7fe 	udiv	r7, r3, lr
 8000466:	fa1f f885 	uxth.w	r8, r5
 800046a:	fb0e 3317 	mls	r3, lr, r7, r3
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb07 f308 	mul.w	r3, r7, r8
 8000476:	428b      	cmp	r3, r1
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x256>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f107 3cff 	add.w	ip, r7, #4294967295
 8000484:	d22f      	bcs.n	80004e6 <__udivmoddi4+0x2ae>
 8000486:	428b      	cmp	r3, r1
 8000488:	d92d      	bls.n	80004e6 <__udivmoddi4+0x2ae>
 800048a:	3f02      	subs	r7, #2
 800048c:	4429      	add	r1, r5
 800048e:	1acb      	subs	r3, r1, r3
 8000490:	b281      	uxth	r1, r0
 8000492:	fbb3 f0fe 	udiv	r0, r3, lr
 8000496:	fb0e 3310 	mls	r3, lr, r0, r3
 800049a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049e:	fb00 f308 	mul.w	r3, r0, r8
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x27e>
 80004a6:	1869      	adds	r1, r5, r1
 80004a8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ac:	d217      	bcs.n	80004de <__udivmoddi4+0x2a6>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d915      	bls.n	80004de <__udivmoddi4+0x2a6>
 80004b2:	3802      	subs	r0, #2
 80004b4:	4429      	add	r1, r5
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004bc:	e73b      	b.n	8000336 <__udivmoddi4+0xfe>
 80004be:	4637      	mov	r7, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e709      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c4:	4607      	mov	r7, r0
 80004c6:	e6e7      	b.n	8000298 <__udivmoddi4+0x60>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004cc:	4541      	cmp	r1, r8
 80004ce:	d2ab      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d4:	eb69 020e 	sbc.w	r2, r9, lr
 80004d8:	3801      	subs	r0, #1
 80004da:	4613      	mov	r3, r2
 80004dc:	e7a4      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004de:	4660      	mov	r0, ip
 80004e0:	e7e9      	b.n	80004b6 <__udivmoddi4+0x27e>
 80004e2:	4618      	mov	r0, r3
 80004e4:	e795      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e6:	4667      	mov	r7, ip
 80004e8:	e7d1      	b.n	800048e <__udivmoddi4+0x256>
 80004ea:	4681      	mov	r9, r0
 80004ec:	e77c      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004ee:	3802      	subs	r0, #2
 80004f0:	442c      	add	r4, r5
 80004f2:	e747      	b.n	8000384 <__udivmoddi4+0x14c>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	442b      	add	r3, r5
 80004fa:	e72f      	b.n	800035c <__udivmoddi4+0x124>
 80004fc:	4638      	mov	r0, r7
 80004fe:	e708      	b.n	8000312 <__udivmoddi4+0xda>
 8000500:	4637      	mov	r7, r6
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0xa0>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800050c:	2003      	movs	r0, #3
 800050e:	f000 f8f8 	bl	8000702 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000512:	2000      	movs	r0, #0
 8000514:	f001 faf0 	bl	8001af8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000518:	f001 faca 	bl	8001ab0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800051c:	2300      	movs	r3, #0
}
 800051e:	4618      	mov	r0, r3
 8000520:	bd80      	pop	{r7, pc}
	...

08000524 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000528:	4b06      	ldr	r3, [pc, #24]	; (8000544 <HAL_IncTick+0x20>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	461a      	mov	r2, r3
 800052e:	4b06      	ldr	r3, [pc, #24]	; (8000548 <HAL_IncTick+0x24>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4413      	add	r3, r2
 8000534:	4a04      	ldr	r2, [pc, #16]	; (8000548 <HAL_IncTick+0x24>)
 8000536:	6013      	str	r3, [r2, #0]
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20000000 	.word	0x20000000
 8000548:	20000024 	.word	0x20000024

0800054c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  return uwTick;
 8000550:	4b03      	ldr	r3, [pc, #12]	; (8000560 <HAL_GetTick+0x14>)
 8000552:	681b      	ldr	r3, [r3, #0]
}
 8000554:	4618      	mov	r0, r3
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	20000024 	.word	0x20000024

08000564 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800056c:	f7ff ffee 	bl	800054c <HAL_GetTick>
 8000570:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800057c:	d005      	beq.n	800058a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800057e:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <HAL_Delay+0x40>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	461a      	mov	r2, r3
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	4413      	add	r3, r2
 8000588:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800058a:	bf00      	nop
 800058c:	f7ff ffde 	bl	800054c <HAL_GetTick>
 8000590:	4602      	mov	r2, r0
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	1ad3      	subs	r3, r2, r3
 8000596:	68fa      	ldr	r2, [r7, #12]
 8000598:	429a      	cmp	r2, r3
 800059a:	d8f7      	bhi.n	800058c <HAL_Delay+0x28>
  {
  }
}
 800059c:	bf00      	nop
 800059e:	3710      	adds	r7, #16
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000000 	.word	0x20000000

080005a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b085      	sub	sp, #20
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	f003 0307 	and.w	r3, r3, #7
 80005b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005b8:	4b0b      	ldr	r3, [pc, #44]	; (80005e8 <__NVIC_SetPriorityGrouping+0x40>)
 80005ba:	68db      	ldr	r3, [r3, #12]
 80005bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005be:	68ba      	ldr	r2, [r7, #8]
 80005c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005c4:	4013      	ands	r3, r2
 80005c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80005d0:	4b06      	ldr	r3, [pc, #24]	; (80005ec <__NVIC_SetPriorityGrouping+0x44>)
 80005d2:	4313      	orrs	r3, r2
 80005d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005d6:	4a04      	ldr	r2, [pc, #16]	; (80005e8 <__NVIC_SetPriorityGrouping+0x40>)
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	60d3      	str	r3, [r2, #12]
}
 80005dc:	bf00      	nop
 80005de:	3714      	adds	r7, #20
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr
 80005e8:	e000ed00 	.word	0xe000ed00
 80005ec:	05fa0000 	.word	0x05fa0000

080005f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005f4:	4b04      	ldr	r3, [pc, #16]	; (8000608 <__NVIC_GetPriorityGrouping+0x18>)
 80005f6:	68db      	ldr	r3, [r3, #12]
 80005f8:	0a1b      	lsrs	r3, r3, #8
 80005fa:	f003 0307 	and.w	r3, r3, #7
}
 80005fe:	4618      	mov	r0, r3
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr
 8000608:	e000ed00 	.word	0xe000ed00

0800060c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061a:	2b00      	cmp	r3, #0
 800061c:	db0b      	blt.n	8000636 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	f003 021f 	and.w	r2, r3, #31
 8000624:	4907      	ldr	r1, [pc, #28]	; (8000644 <__NVIC_EnableIRQ+0x38>)
 8000626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062a:	095b      	lsrs	r3, r3, #5
 800062c:	2001      	movs	r0, #1
 800062e:	fa00 f202 	lsl.w	r2, r0, r2
 8000632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000636:	bf00      	nop
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	e000e100 	.word	0xe000e100

08000648 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	6039      	str	r1, [r7, #0]
 8000652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000658:	2b00      	cmp	r3, #0
 800065a:	db0a      	blt.n	8000672 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	b2da      	uxtb	r2, r3
 8000660:	490c      	ldr	r1, [pc, #48]	; (8000694 <__NVIC_SetPriority+0x4c>)
 8000662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000666:	0112      	lsls	r2, r2, #4
 8000668:	b2d2      	uxtb	r2, r2
 800066a:	440b      	add	r3, r1
 800066c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000670:	e00a      	b.n	8000688 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	b2da      	uxtb	r2, r3
 8000676:	4908      	ldr	r1, [pc, #32]	; (8000698 <__NVIC_SetPriority+0x50>)
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	f003 030f 	and.w	r3, r3, #15
 800067e:	3b04      	subs	r3, #4
 8000680:	0112      	lsls	r2, r2, #4
 8000682:	b2d2      	uxtb	r2, r2
 8000684:	440b      	add	r3, r1
 8000686:	761a      	strb	r2, [r3, #24]
}
 8000688:	bf00      	nop
 800068a:	370c      	adds	r7, #12
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr
 8000694:	e000e100 	.word	0xe000e100
 8000698:	e000ed00 	.word	0xe000ed00

0800069c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800069c:	b480      	push	{r7}
 800069e:	b089      	sub	sp, #36	; 0x24
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	60f8      	str	r0, [r7, #12]
 80006a4:	60b9      	str	r1, [r7, #8]
 80006a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	f003 0307 	and.w	r3, r3, #7
 80006ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006b0:	69fb      	ldr	r3, [r7, #28]
 80006b2:	f1c3 0307 	rsb	r3, r3, #7
 80006b6:	2b04      	cmp	r3, #4
 80006b8:	bf28      	it	cs
 80006ba:	2304      	movcs	r3, #4
 80006bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006be:	69fb      	ldr	r3, [r7, #28]
 80006c0:	3304      	adds	r3, #4
 80006c2:	2b06      	cmp	r3, #6
 80006c4:	d902      	bls.n	80006cc <NVIC_EncodePriority+0x30>
 80006c6:	69fb      	ldr	r3, [r7, #28]
 80006c8:	3b03      	subs	r3, #3
 80006ca:	e000      	b.n	80006ce <NVIC_EncodePriority+0x32>
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d0:	f04f 32ff 	mov.w	r2, #4294967295
 80006d4:	69bb      	ldr	r3, [r7, #24]
 80006d6:	fa02 f303 	lsl.w	r3, r2, r3
 80006da:	43da      	mvns	r2, r3
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	401a      	ands	r2, r3
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006e4:	f04f 31ff 	mov.w	r1, #4294967295
 80006e8:	697b      	ldr	r3, [r7, #20]
 80006ea:	fa01 f303 	lsl.w	r3, r1, r3
 80006ee:	43d9      	mvns	r1, r3
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f4:	4313      	orrs	r3, r2
         );
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3724      	adds	r7, #36	; 0x24
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr

08000702 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000702:	b580      	push	{r7, lr}
 8000704:	b082      	sub	sp, #8
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800070a:	6878      	ldr	r0, [r7, #4]
 800070c:	f7ff ff4c 	bl	80005a8 <__NVIC_SetPriorityGrouping>
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000718:	b580      	push	{r7, lr}
 800071a:	b086      	sub	sp, #24
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	60b9      	str	r1, [r7, #8]
 8000722:	607a      	str	r2, [r7, #4]
 8000724:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000726:	2300      	movs	r3, #0
 8000728:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800072a:	f7ff ff61 	bl	80005f0 <__NVIC_GetPriorityGrouping>
 800072e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	68b9      	ldr	r1, [r7, #8]
 8000734:	6978      	ldr	r0, [r7, #20]
 8000736:	f7ff ffb1 	bl	800069c <NVIC_EncodePriority>
 800073a:	4602      	mov	r2, r0
 800073c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000740:	4611      	mov	r1, r2
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff ff80 	bl	8000648 <__NVIC_SetPriority>
}
 8000748:	bf00      	nop
 800074a:	3718      	adds	r7, #24
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800075a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff ff54 	bl	800060c <__NVIC_EnableIRQ>
}
 8000764:	bf00      	nop
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800076c:	b480      	push	{r7}
 800076e:	b089      	sub	sp, #36	; 0x24
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000776:	2300      	movs	r3, #0
 8000778:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800077e:	2300      	movs	r3, #0
 8000780:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000782:	2300      	movs	r3, #0
 8000784:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000786:	2300      	movs	r3, #0
 8000788:	61fb      	str	r3, [r7, #28]
 800078a:	e175      	b.n	8000a78 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800078c:	2201      	movs	r2, #1
 800078e:	69fb      	ldr	r3, [r7, #28]
 8000790:	fa02 f303 	lsl.w	r3, r2, r3
 8000794:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	697a      	ldr	r2, [r7, #20]
 800079c:	4013      	ands	r3, r2
 800079e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80007a0:	693a      	ldr	r2, [r7, #16]
 80007a2:	697b      	ldr	r3, [r7, #20]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	f040 8164 	bne.w	8000a72 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	685b      	ldr	r3, [r3, #4]
 80007ae:	2b02      	cmp	r3, #2
 80007b0:	d003      	beq.n	80007ba <HAL_GPIO_Init+0x4e>
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	2b12      	cmp	r3, #18
 80007b8:	d123      	bne.n	8000802 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	08da      	lsrs	r2, r3, #3
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	3208      	adds	r2, #8
 80007c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80007c8:	69fb      	ldr	r3, [r7, #28]
 80007ca:	f003 0307 	and.w	r3, r3, #7
 80007ce:	009b      	lsls	r3, r3, #2
 80007d0:	220f      	movs	r2, #15
 80007d2:	fa02 f303 	lsl.w	r3, r2, r3
 80007d6:	43db      	mvns	r3, r3
 80007d8:	69ba      	ldr	r2, [r7, #24]
 80007da:	4013      	ands	r3, r2
 80007dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	691a      	ldr	r2, [r3, #16]
 80007e2:	69fb      	ldr	r3, [r7, #28]
 80007e4:	f003 0307 	and.w	r3, r3, #7
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	fa02 f303 	lsl.w	r3, r2, r3
 80007ee:	69ba      	ldr	r2, [r7, #24]
 80007f0:	4313      	orrs	r3, r2
 80007f2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80007f4:	69fb      	ldr	r3, [r7, #28]
 80007f6:	08da      	lsrs	r2, r3, #3
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	3208      	adds	r2, #8
 80007fc:	69b9      	ldr	r1, [r7, #24]
 80007fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000808:	69fb      	ldr	r3, [r7, #28]
 800080a:	005b      	lsls	r3, r3, #1
 800080c:	2203      	movs	r2, #3
 800080e:	fa02 f303 	lsl.w	r3, r2, r3
 8000812:	43db      	mvns	r3, r3
 8000814:	69ba      	ldr	r2, [r7, #24]
 8000816:	4013      	ands	r3, r2
 8000818:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	f003 0203 	and.w	r2, r3, #3
 8000822:	69fb      	ldr	r3, [r7, #28]
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	fa02 f303 	lsl.w	r3, r2, r3
 800082a:	69ba      	ldr	r2, [r7, #24]
 800082c:	4313      	orrs	r3, r2
 800082e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	69ba      	ldr	r2, [r7, #24]
 8000834:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	2b01      	cmp	r3, #1
 800083c:	d00b      	beq.n	8000856 <HAL_GPIO_Init+0xea>
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	2b02      	cmp	r3, #2
 8000844:	d007      	beq.n	8000856 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800084a:	2b11      	cmp	r3, #17
 800084c:	d003      	beq.n	8000856 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	2b12      	cmp	r3, #18
 8000854:	d130      	bne.n	80008b8 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	689b      	ldr	r3, [r3, #8]
 800085a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800085c:	69fb      	ldr	r3, [r7, #28]
 800085e:	005b      	lsls	r3, r3, #1
 8000860:	2203      	movs	r2, #3
 8000862:	fa02 f303 	lsl.w	r3, r2, r3
 8000866:	43db      	mvns	r3, r3
 8000868:	69ba      	ldr	r2, [r7, #24]
 800086a:	4013      	ands	r3, r2
 800086c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	68da      	ldr	r2, [r3, #12]
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	005b      	lsls	r3, r3, #1
 8000876:	fa02 f303 	lsl.w	r3, r2, r3
 800087a:	69ba      	ldr	r2, [r7, #24]
 800087c:	4313      	orrs	r3, r2
 800087e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	69ba      	ldr	r2, [r7, #24]
 8000884:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800088c:	2201      	movs	r2, #1
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	fa02 f303 	lsl.w	r3, r2, r3
 8000894:	43db      	mvns	r3, r3
 8000896:	69ba      	ldr	r2, [r7, #24]
 8000898:	4013      	ands	r3, r2
 800089a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	091b      	lsrs	r3, r3, #4
 80008a2:	f003 0201 	and.w	r2, r3, #1
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ac:	69ba      	ldr	r2, [r7, #24]
 80008ae:	4313      	orrs	r3, r2
 80008b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	69ba      	ldr	r2, [r7, #24]
 80008b6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	2203      	movs	r2, #3
 80008c4:	fa02 f303 	lsl.w	r3, r2, r3
 80008c8:	43db      	mvns	r3, r3
 80008ca:	69ba      	ldr	r2, [r7, #24]
 80008cc:	4013      	ands	r3, r2
 80008ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	689a      	ldr	r2, [r3, #8]
 80008d4:	69fb      	ldr	r3, [r7, #28]
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	fa02 f303 	lsl.w	r3, r2, r3
 80008dc:	69ba      	ldr	r2, [r7, #24]
 80008de:	4313      	orrs	r3, r2
 80008e0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	69ba      	ldr	r2, [r7, #24]
 80008e6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	f000 80be 	beq.w	8000a72 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f6:	4b65      	ldr	r3, [pc, #404]	; (8000a8c <HAL_GPIO_Init+0x320>)
 80008f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fa:	4a64      	ldr	r2, [pc, #400]	; (8000a8c <HAL_GPIO_Init+0x320>)
 80008fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000900:	6453      	str	r3, [r2, #68]	; 0x44
 8000902:	4b62      	ldr	r3, [pc, #392]	; (8000a8c <HAL_GPIO_Init+0x320>)
 8000904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800090e:	4a60      	ldr	r2, [pc, #384]	; (8000a90 <HAL_GPIO_Init+0x324>)
 8000910:	69fb      	ldr	r3, [r7, #28]
 8000912:	089b      	lsrs	r3, r3, #2
 8000914:	3302      	adds	r3, #2
 8000916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800091a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800091c:	69fb      	ldr	r3, [r7, #28]
 800091e:	f003 0303 	and.w	r3, r3, #3
 8000922:	009b      	lsls	r3, r3, #2
 8000924:	220f      	movs	r2, #15
 8000926:	fa02 f303 	lsl.w	r3, r2, r3
 800092a:	43db      	mvns	r3, r3
 800092c:	69ba      	ldr	r2, [r7, #24]
 800092e:	4013      	ands	r3, r2
 8000930:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4a57      	ldr	r2, [pc, #348]	; (8000a94 <HAL_GPIO_Init+0x328>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d037      	beq.n	80009aa <HAL_GPIO_Init+0x23e>
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4a56      	ldr	r2, [pc, #344]	; (8000a98 <HAL_GPIO_Init+0x32c>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d031      	beq.n	80009a6 <HAL_GPIO_Init+0x23a>
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4a55      	ldr	r2, [pc, #340]	; (8000a9c <HAL_GPIO_Init+0x330>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d02b      	beq.n	80009a2 <HAL_GPIO_Init+0x236>
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4a54      	ldr	r2, [pc, #336]	; (8000aa0 <HAL_GPIO_Init+0x334>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d025      	beq.n	800099e <HAL_GPIO_Init+0x232>
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4a53      	ldr	r2, [pc, #332]	; (8000aa4 <HAL_GPIO_Init+0x338>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d01f      	beq.n	800099a <HAL_GPIO_Init+0x22e>
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4a52      	ldr	r2, [pc, #328]	; (8000aa8 <HAL_GPIO_Init+0x33c>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d019      	beq.n	8000996 <HAL_GPIO_Init+0x22a>
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4a51      	ldr	r2, [pc, #324]	; (8000aac <HAL_GPIO_Init+0x340>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d013      	beq.n	8000992 <HAL_GPIO_Init+0x226>
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4a50      	ldr	r2, [pc, #320]	; (8000ab0 <HAL_GPIO_Init+0x344>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d00d      	beq.n	800098e <HAL_GPIO_Init+0x222>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4a4f      	ldr	r2, [pc, #316]	; (8000ab4 <HAL_GPIO_Init+0x348>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d007      	beq.n	800098a <HAL_GPIO_Init+0x21e>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4a4e      	ldr	r2, [pc, #312]	; (8000ab8 <HAL_GPIO_Init+0x34c>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d101      	bne.n	8000986 <HAL_GPIO_Init+0x21a>
 8000982:	2309      	movs	r3, #9
 8000984:	e012      	b.n	80009ac <HAL_GPIO_Init+0x240>
 8000986:	230a      	movs	r3, #10
 8000988:	e010      	b.n	80009ac <HAL_GPIO_Init+0x240>
 800098a:	2308      	movs	r3, #8
 800098c:	e00e      	b.n	80009ac <HAL_GPIO_Init+0x240>
 800098e:	2307      	movs	r3, #7
 8000990:	e00c      	b.n	80009ac <HAL_GPIO_Init+0x240>
 8000992:	2306      	movs	r3, #6
 8000994:	e00a      	b.n	80009ac <HAL_GPIO_Init+0x240>
 8000996:	2305      	movs	r3, #5
 8000998:	e008      	b.n	80009ac <HAL_GPIO_Init+0x240>
 800099a:	2304      	movs	r3, #4
 800099c:	e006      	b.n	80009ac <HAL_GPIO_Init+0x240>
 800099e:	2303      	movs	r3, #3
 80009a0:	e004      	b.n	80009ac <HAL_GPIO_Init+0x240>
 80009a2:	2302      	movs	r3, #2
 80009a4:	e002      	b.n	80009ac <HAL_GPIO_Init+0x240>
 80009a6:	2301      	movs	r3, #1
 80009a8:	e000      	b.n	80009ac <HAL_GPIO_Init+0x240>
 80009aa:	2300      	movs	r3, #0
 80009ac:	69fa      	ldr	r2, [r7, #28]
 80009ae:	f002 0203 	and.w	r2, r2, #3
 80009b2:	0092      	lsls	r2, r2, #2
 80009b4:	4093      	lsls	r3, r2
 80009b6:	69ba      	ldr	r2, [r7, #24]
 80009b8:	4313      	orrs	r3, r2
 80009ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80009bc:	4934      	ldr	r1, [pc, #208]	; (8000a90 <HAL_GPIO_Init+0x324>)
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	089b      	lsrs	r3, r3, #2
 80009c2:	3302      	adds	r3, #2
 80009c4:	69ba      	ldr	r2, [r7, #24]
 80009c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009ca:	4b3c      	ldr	r3, [pc, #240]	; (8000abc <HAL_GPIO_Init+0x350>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009d0:	693b      	ldr	r3, [r7, #16]
 80009d2:	43db      	mvns	r3, r3
 80009d4:	69ba      	ldr	r2, [r7, #24]
 80009d6:	4013      	ands	r3, r2
 80009d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d003      	beq.n	80009ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80009e6:	69ba      	ldr	r2, [r7, #24]
 80009e8:	693b      	ldr	r3, [r7, #16]
 80009ea:	4313      	orrs	r3, r2
 80009ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80009ee:	4a33      	ldr	r2, [pc, #204]	; (8000abc <HAL_GPIO_Init+0x350>)
 80009f0:	69bb      	ldr	r3, [r7, #24]
 80009f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80009f4:	4b31      	ldr	r3, [pc, #196]	; (8000abc <HAL_GPIO_Init+0x350>)
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80009fa:	693b      	ldr	r3, [r7, #16]
 80009fc:	43db      	mvns	r3, r3
 80009fe:	69ba      	ldr	r2, [r7, #24]
 8000a00:	4013      	ands	r3, r2
 8000a02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d003      	beq.n	8000a18 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000a10:	69ba      	ldr	r2, [r7, #24]
 8000a12:	693b      	ldr	r3, [r7, #16]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a18:	4a28      	ldr	r2, [pc, #160]	; (8000abc <HAL_GPIO_Init+0x350>)
 8000a1a:	69bb      	ldr	r3, [r7, #24]
 8000a1c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a1e:	4b27      	ldr	r3, [pc, #156]	; (8000abc <HAL_GPIO_Init+0x350>)
 8000a20:	689b      	ldr	r3, [r3, #8]
 8000a22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a24:	693b      	ldr	r3, [r7, #16]
 8000a26:	43db      	mvns	r3, r3
 8000a28:	69ba      	ldr	r2, [r7, #24]
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d003      	beq.n	8000a42 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000a3a:	69ba      	ldr	r2, [r7, #24]
 8000a3c:	693b      	ldr	r3, [r7, #16]
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a42:	4a1e      	ldr	r2, [pc, #120]	; (8000abc <HAL_GPIO_Init+0x350>)
 8000a44:	69bb      	ldr	r3, [r7, #24]
 8000a46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a48:	4b1c      	ldr	r3, [pc, #112]	; (8000abc <HAL_GPIO_Init+0x350>)
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a4e:	693b      	ldr	r3, [r7, #16]
 8000a50:	43db      	mvns	r3, r3
 8000a52:	69ba      	ldr	r2, [r7, #24]
 8000a54:	4013      	ands	r3, r2
 8000a56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d003      	beq.n	8000a6c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000a64:	69ba      	ldr	r2, [r7, #24]
 8000a66:	693b      	ldr	r3, [r7, #16]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000a6c:	4a13      	ldr	r2, [pc, #76]	; (8000abc <HAL_GPIO_Init+0x350>)
 8000a6e:	69bb      	ldr	r3, [r7, #24]
 8000a70:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	3301      	adds	r3, #1
 8000a76:	61fb      	str	r3, [r7, #28]
 8000a78:	69fb      	ldr	r3, [r7, #28]
 8000a7a:	2b0f      	cmp	r3, #15
 8000a7c:	f67f ae86 	bls.w	800078c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000a80:	bf00      	nop
 8000a82:	3724      	adds	r7, #36	; 0x24
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40013800 	.word	0x40013800
 8000a94:	40020000 	.word	0x40020000
 8000a98:	40020400 	.word	0x40020400
 8000a9c:	40020800 	.word	0x40020800
 8000aa0:	40020c00 	.word	0x40020c00
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	40021400 	.word	0x40021400
 8000aac:	40021800 	.word	0x40021800
 8000ab0:	40021c00 	.word	0x40021c00
 8000ab4:	40022000 	.word	0x40022000
 8000ab8:	40022400 	.word	0x40022400
 8000abc:	40013c00 	.word	0x40013c00

08000ac0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	460b      	mov	r3, r1
 8000aca:	807b      	strh	r3, [r7, #2]
 8000acc:	4613      	mov	r3, r2
 8000ace:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ad0:	787b      	ldrb	r3, [r7, #1]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d003      	beq.n	8000ade <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ad6:	887a      	ldrh	r2, [r7, #2]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8000adc:	e003      	b.n	8000ae6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000ade:	887b      	ldrh	r3, [r7, #2]
 8000ae0:	041a      	lsls	r2, r3, #16
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	619a      	str	r2, [r3, #24]
}
 8000ae6:	bf00      	nop
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000af2:	b480      	push	{r7}
 8000af4:	b083      	sub	sp, #12
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
 8000afa:	460b      	mov	r3, r1
 8000afc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	695a      	ldr	r2, [r3, #20]
 8000b02:	887b      	ldrh	r3, [r7, #2]
 8000b04:	401a      	ands	r2, r3
 8000b06:	887b      	ldrh	r3, [r7, #2]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d104      	bne.n	8000b16 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000b0c:	887b      	ldrh	r3, [r7, #2]
 8000b0e:	041a      	lsls	r2, r3, #16
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000b14:	e002      	b.n	8000b1c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000b16:	887a      	ldrh	r2, [r7, #2]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	619a      	str	r2, [r3, #24]
}
 8000b1c:	bf00      	nop
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8000b30:	2300      	movs	r3, #0
 8000b32:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d101      	bne.n	8000b3e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e25c      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	f000 8087 	beq.w	8000c5a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b4c:	4b96      	ldr	r3, [pc, #600]	; (8000da8 <HAL_RCC_OscConfig+0x280>)
 8000b4e:	689b      	ldr	r3, [r3, #8]
 8000b50:	f003 030c 	and.w	r3, r3, #12
 8000b54:	2b04      	cmp	r3, #4
 8000b56:	d00c      	beq.n	8000b72 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b58:	4b93      	ldr	r3, [pc, #588]	; (8000da8 <HAL_RCC_OscConfig+0x280>)
 8000b5a:	689b      	ldr	r3, [r3, #8]
 8000b5c:	f003 030c 	and.w	r3, r3, #12
 8000b60:	2b08      	cmp	r3, #8
 8000b62:	d112      	bne.n	8000b8a <HAL_RCC_OscConfig+0x62>
 8000b64:	4b90      	ldr	r3, [pc, #576]	; (8000da8 <HAL_RCC_OscConfig+0x280>)
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000b70:	d10b      	bne.n	8000b8a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b72:	4b8d      	ldr	r3, [pc, #564]	; (8000da8 <HAL_RCC_OscConfig+0x280>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d06c      	beq.n	8000c58 <HAL_RCC_OscConfig+0x130>
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d168      	bne.n	8000c58 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
 8000b88:	e236      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b92:	d106      	bne.n	8000ba2 <HAL_RCC_OscConfig+0x7a>
 8000b94:	4b84      	ldr	r3, [pc, #528]	; (8000da8 <HAL_RCC_OscConfig+0x280>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a83      	ldr	r2, [pc, #524]	; (8000da8 <HAL_RCC_OscConfig+0x280>)
 8000b9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b9e:	6013      	str	r3, [r2, #0]
 8000ba0:	e02e      	b.n	8000c00 <HAL_RCC_OscConfig+0xd8>
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d10c      	bne.n	8000bc4 <HAL_RCC_OscConfig+0x9c>
 8000baa:	4b7f      	ldr	r3, [pc, #508]	; (8000da8 <HAL_RCC_OscConfig+0x280>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a7e      	ldr	r2, [pc, #504]	; (8000da8 <HAL_RCC_OscConfig+0x280>)
 8000bb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bb4:	6013      	str	r3, [r2, #0]
 8000bb6:	4b7c      	ldr	r3, [pc, #496]	; (8000da8 <HAL_RCC_OscConfig+0x280>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a7b      	ldr	r2, [pc, #492]	; (8000da8 <HAL_RCC_OscConfig+0x280>)
 8000bbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bc0:	6013      	str	r3, [r2, #0]
 8000bc2:	e01d      	b.n	8000c00 <HAL_RCC_OscConfig+0xd8>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000bcc:	d10c      	bne.n	8000be8 <HAL_RCC_OscConfig+0xc0>
 8000bce:	4b76      	ldr	r3, [pc, #472]	; (8000da8 <HAL_RCC_OscConfig+0x280>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a75      	ldr	r2, [pc, #468]	; (8000da8 <HAL_RCC_OscConfig+0x280>)
 8000bd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bd8:	6013      	str	r3, [r2, #0]
 8000bda:	4b73      	ldr	r3, [pc, #460]	; (8000da8 <HAL_RCC_OscConfig+0x280>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a72      	ldr	r2, [pc, #456]	; (8000da8 <HAL_RCC_OscConfig+0x280>)
 8000be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000be4:	6013      	str	r3, [r2, #0]
 8000be6:	e00b      	b.n	8000c00 <HAL_RCC_OscConfig+0xd8>
 8000be8:	4b6f      	ldr	r3, [pc, #444]	; (8000da8 <HAL_RCC_OscConfig+0x280>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a6e      	ldr	r2, [pc, #440]	; (8000da8 <HAL_RCC_OscConfig+0x280>)
 8000bee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bf2:	6013      	str	r3, [r2, #0]
 8000bf4:	4b6c      	ldr	r3, [pc, #432]	; (8000da8 <HAL_RCC_OscConfig+0x280>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a6b      	ldr	r2, [pc, #428]	; (8000da8 <HAL_RCC_OscConfig+0x280>)
 8000bfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d013      	beq.n	8000c30 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c08:	f7ff fca0 	bl	800054c <HAL_GetTick>
 8000c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c0e:	e008      	b.n	8000c22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c10:	f7ff fc9c 	bl	800054c <HAL_GetTick>
 8000c14:	4602      	mov	r2, r0
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	2b64      	cmp	r3, #100	; 0x64
 8000c1c:	d901      	bls.n	8000c22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	e1ea      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c22:	4b61      	ldr	r3, [pc, #388]	; (8000da8 <HAL_RCC_OscConfig+0x280>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d0f0      	beq.n	8000c10 <HAL_RCC_OscConfig+0xe8>
 8000c2e:	e014      	b.n	8000c5a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c30:	f7ff fc8c 	bl	800054c <HAL_GetTick>
 8000c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c36:	e008      	b.n	8000c4a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c38:	f7ff fc88 	bl	800054c <HAL_GetTick>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	2b64      	cmp	r3, #100	; 0x64
 8000c44:	d901      	bls.n	8000c4a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000c46:	2303      	movs	r3, #3
 8000c48:	e1d6      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c4a:	4b57      	ldr	r3, [pc, #348]	; (8000da8 <HAL_RCC_OscConfig+0x280>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d1f0      	bne.n	8000c38 <HAL_RCC_OscConfig+0x110>
 8000c56:	e000      	b.n	8000c5a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d069      	beq.n	8000d3a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c66:	4b50      	ldr	r3, [pc, #320]	; (8000da8 <HAL_RCC_OscConfig+0x280>)
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	f003 030c 	and.w	r3, r3, #12
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d00b      	beq.n	8000c8a <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c72:	4b4d      	ldr	r3, [pc, #308]	; (8000da8 <HAL_RCC_OscConfig+0x280>)
 8000c74:	689b      	ldr	r3, [r3, #8]
 8000c76:	f003 030c 	and.w	r3, r3, #12
 8000c7a:	2b08      	cmp	r3, #8
 8000c7c:	d11c      	bne.n	8000cb8 <HAL_RCC_OscConfig+0x190>
 8000c7e:	4b4a      	ldr	r3, [pc, #296]	; (8000da8 <HAL_RCC_OscConfig+0x280>)
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d116      	bne.n	8000cb8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c8a:	4b47      	ldr	r3, [pc, #284]	; (8000da8 <HAL_RCC_OscConfig+0x280>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f003 0302 	and.w	r3, r3, #2
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d005      	beq.n	8000ca2 <HAL_RCC_OscConfig+0x17a>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	68db      	ldr	r3, [r3, #12]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d001      	beq.n	8000ca2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e1aa      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ca2:	4b41      	ldr	r3, [pc, #260]	; (8000da8 <HAL_RCC_OscConfig+0x280>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	691b      	ldr	r3, [r3, #16]
 8000cae:	00db      	lsls	r3, r3, #3
 8000cb0:	493d      	ldr	r1, [pc, #244]	; (8000da8 <HAL_RCC_OscConfig+0x280>)
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cb6:	e040      	b.n	8000d3a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d023      	beq.n	8000d08 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cc0:	4b39      	ldr	r3, [pc, #228]	; (8000da8 <HAL_RCC_OscConfig+0x280>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a38      	ldr	r2, [pc, #224]	; (8000da8 <HAL_RCC_OscConfig+0x280>)
 8000cc6:	f043 0301 	orr.w	r3, r3, #1
 8000cca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ccc:	f7ff fc3e 	bl	800054c <HAL_GetTick>
 8000cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cd2:	e008      	b.n	8000ce6 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cd4:	f7ff fc3a 	bl	800054c <HAL_GetTick>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	2b02      	cmp	r3, #2
 8000ce0:	d901      	bls.n	8000ce6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	e188      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ce6:	4b30      	ldr	r3, [pc, #192]	; (8000da8 <HAL_RCC_OscConfig+0x280>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d0f0      	beq.n	8000cd4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cf2:	4b2d      	ldr	r3, [pc, #180]	; (8000da8 <HAL_RCC_OscConfig+0x280>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	691b      	ldr	r3, [r3, #16]
 8000cfe:	00db      	lsls	r3, r3, #3
 8000d00:	4929      	ldr	r1, [pc, #164]	; (8000da8 <HAL_RCC_OscConfig+0x280>)
 8000d02:	4313      	orrs	r3, r2
 8000d04:	600b      	str	r3, [r1, #0]
 8000d06:	e018      	b.n	8000d3a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d08:	4b27      	ldr	r3, [pc, #156]	; (8000da8 <HAL_RCC_OscConfig+0x280>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a26      	ldr	r2, [pc, #152]	; (8000da8 <HAL_RCC_OscConfig+0x280>)
 8000d0e:	f023 0301 	bic.w	r3, r3, #1
 8000d12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d14:	f7ff fc1a 	bl	800054c <HAL_GetTick>
 8000d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d1a:	e008      	b.n	8000d2e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d1c:	f7ff fc16 	bl	800054c <HAL_GetTick>
 8000d20:	4602      	mov	r2, r0
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	2b02      	cmp	r3, #2
 8000d28:	d901      	bls.n	8000d2e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	e164      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d2e:	4b1e      	ldr	r3, [pc, #120]	; (8000da8 <HAL_RCC_OscConfig+0x280>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f003 0302 	and.w	r3, r3, #2
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d1f0      	bne.n	8000d1c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f003 0308 	and.w	r3, r3, #8
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d038      	beq.n	8000db8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	695b      	ldr	r3, [r3, #20]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d019      	beq.n	8000d82 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d4e:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <HAL_RCC_OscConfig+0x280>)
 8000d50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d52:	4a15      	ldr	r2, [pc, #84]	; (8000da8 <HAL_RCC_OscConfig+0x280>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d5a:	f7ff fbf7 	bl	800054c <HAL_GetTick>
 8000d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d60:	e008      	b.n	8000d74 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d62:	f7ff fbf3 	bl	800054c <HAL_GetTick>
 8000d66:	4602      	mov	r2, r0
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	1ad3      	subs	r3, r2, r3
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	d901      	bls.n	8000d74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000d70:	2303      	movs	r3, #3
 8000d72:	e141      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d74:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <HAL_RCC_OscConfig+0x280>)
 8000d76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d78:	f003 0302 	and.w	r3, r3, #2
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d0f0      	beq.n	8000d62 <HAL_RCC_OscConfig+0x23a>
 8000d80:	e01a      	b.n	8000db8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d82:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <HAL_RCC_OscConfig+0x280>)
 8000d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d86:	4a08      	ldr	r2, [pc, #32]	; (8000da8 <HAL_RCC_OscConfig+0x280>)
 8000d88:	f023 0301 	bic.w	r3, r3, #1
 8000d8c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d8e:	f7ff fbdd 	bl	800054c <HAL_GetTick>
 8000d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d94:	e00a      	b.n	8000dac <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d96:	f7ff fbd9 	bl	800054c <HAL_GetTick>
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	1ad3      	subs	r3, r2, r3
 8000da0:	2b02      	cmp	r3, #2
 8000da2:	d903      	bls.n	8000dac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8000da4:	2303      	movs	r3, #3
 8000da6:	e127      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4d0>
 8000da8:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dac:	4b94      	ldr	r3, [pc, #592]	; (8001000 <HAL_RCC_OscConfig+0x4d8>)
 8000dae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000db0:	f003 0302 	and.w	r3, r3, #2
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d1ee      	bne.n	8000d96 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f003 0304 	and.w	r3, r3, #4
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	f000 80a4 	beq.w	8000f0e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dc6:	4b8e      	ldr	r3, [pc, #568]	; (8001000 <HAL_RCC_OscConfig+0x4d8>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d10d      	bne.n	8000dee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dd2:	4b8b      	ldr	r3, [pc, #556]	; (8001000 <HAL_RCC_OscConfig+0x4d8>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	4a8a      	ldr	r2, [pc, #552]	; (8001000 <HAL_RCC_OscConfig+0x4d8>)
 8000dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dde:	4b88      	ldr	r3, [pc, #544]	; (8001000 <HAL_RCC_OscConfig+0x4d8>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000dea:	2301      	movs	r3, #1
 8000dec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000dee:	4b85      	ldr	r3, [pc, #532]	; (8001004 <HAL_RCC_OscConfig+0x4dc>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d118      	bne.n	8000e2c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8000dfa:	4b82      	ldr	r3, [pc, #520]	; (8001004 <HAL_RCC_OscConfig+0x4dc>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a81      	ldr	r2, [pc, #516]	; (8001004 <HAL_RCC_OscConfig+0x4dc>)
 8000e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e06:	f7ff fba1 	bl	800054c <HAL_GetTick>
 8000e0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e0c:	e008      	b.n	8000e20 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000e0e:	f7ff fb9d 	bl	800054c <HAL_GetTick>
 8000e12:	4602      	mov	r2, r0
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	2b64      	cmp	r3, #100	; 0x64
 8000e1a:	d901      	bls.n	8000e20 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	e0eb      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e20:	4b78      	ldr	r3, [pc, #480]	; (8001004 <HAL_RCC_OscConfig+0x4dc>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d0f0      	beq.n	8000e0e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d106      	bne.n	8000e42 <HAL_RCC_OscConfig+0x31a>
 8000e34:	4b72      	ldr	r3, [pc, #456]	; (8001000 <HAL_RCC_OscConfig+0x4d8>)
 8000e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e38:	4a71      	ldr	r2, [pc, #452]	; (8001000 <HAL_RCC_OscConfig+0x4d8>)
 8000e3a:	f043 0301 	orr.w	r3, r3, #1
 8000e3e:	6713      	str	r3, [r2, #112]	; 0x70
 8000e40:	e02d      	b.n	8000e9e <HAL_RCC_OscConfig+0x376>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d10c      	bne.n	8000e64 <HAL_RCC_OscConfig+0x33c>
 8000e4a:	4b6d      	ldr	r3, [pc, #436]	; (8001000 <HAL_RCC_OscConfig+0x4d8>)
 8000e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e4e:	4a6c      	ldr	r2, [pc, #432]	; (8001000 <HAL_RCC_OscConfig+0x4d8>)
 8000e50:	f023 0301 	bic.w	r3, r3, #1
 8000e54:	6713      	str	r3, [r2, #112]	; 0x70
 8000e56:	4b6a      	ldr	r3, [pc, #424]	; (8001000 <HAL_RCC_OscConfig+0x4d8>)
 8000e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e5a:	4a69      	ldr	r2, [pc, #420]	; (8001000 <HAL_RCC_OscConfig+0x4d8>)
 8000e5c:	f023 0304 	bic.w	r3, r3, #4
 8000e60:	6713      	str	r3, [r2, #112]	; 0x70
 8000e62:	e01c      	b.n	8000e9e <HAL_RCC_OscConfig+0x376>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	2b05      	cmp	r3, #5
 8000e6a:	d10c      	bne.n	8000e86 <HAL_RCC_OscConfig+0x35e>
 8000e6c:	4b64      	ldr	r3, [pc, #400]	; (8001000 <HAL_RCC_OscConfig+0x4d8>)
 8000e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e70:	4a63      	ldr	r2, [pc, #396]	; (8001000 <HAL_RCC_OscConfig+0x4d8>)
 8000e72:	f043 0304 	orr.w	r3, r3, #4
 8000e76:	6713      	str	r3, [r2, #112]	; 0x70
 8000e78:	4b61      	ldr	r3, [pc, #388]	; (8001000 <HAL_RCC_OscConfig+0x4d8>)
 8000e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e7c:	4a60      	ldr	r2, [pc, #384]	; (8001000 <HAL_RCC_OscConfig+0x4d8>)
 8000e7e:	f043 0301 	orr.w	r3, r3, #1
 8000e82:	6713      	str	r3, [r2, #112]	; 0x70
 8000e84:	e00b      	b.n	8000e9e <HAL_RCC_OscConfig+0x376>
 8000e86:	4b5e      	ldr	r3, [pc, #376]	; (8001000 <HAL_RCC_OscConfig+0x4d8>)
 8000e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e8a:	4a5d      	ldr	r2, [pc, #372]	; (8001000 <HAL_RCC_OscConfig+0x4d8>)
 8000e8c:	f023 0301 	bic.w	r3, r3, #1
 8000e90:	6713      	str	r3, [r2, #112]	; 0x70
 8000e92:	4b5b      	ldr	r3, [pc, #364]	; (8001000 <HAL_RCC_OscConfig+0x4d8>)
 8000e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e96:	4a5a      	ldr	r2, [pc, #360]	; (8001000 <HAL_RCC_OscConfig+0x4d8>)
 8000e98:	f023 0304 	bic.w	r3, r3, #4
 8000e9c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d015      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ea6:	f7ff fb51 	bl	800054c <HAL_GetTick>
 8000eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000eac:	e00a      	b.n	8000ec4 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000eae:	f7ff fb4d 	bl	800054c <HAL_GetTick>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	1ad3      	subs	r3, r2, r3
 8000eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d901      	bls.n	8000ec4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	e099      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ec4:	4b4e      	ldr	r3, [pc, #312]	; (8001000 <HAL_RCC_OscConfig+0x4d8>)
 8000ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ec8:	f003 0302 	and.w	r3, r3, #2
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d0ee      	beq.n	8000eae <HAL_RCC_OscConfig+0x386>
 8000ed0:	e014      	b.n	8000efc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ed2:	f7ff fb3b 	bl	800054c <HAL_GetTick>
 8000ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ed8:	e00a      	b.n	8000ef0 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000eda:	f7ff fb37 	bl	800054c <HAL_GetTick>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d901      	bls.n	8000ef0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8000eec:	2303      	movs	r3, #3
 8000eee:	e083      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ef0:	4b43      	ldr	r3, [pc, #268]	; (8001000 <HAL_RCC_OscConfig+0x4d8>)
 8000ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ef4:	f003 0302 	and.w	r3, r3, #2
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d1ee      	bne.n	8000eda <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000efc:	7dfb      	ldrb	r3, [r7, #23]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d105      	bne.n	8000f0e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f02:	4b3f      	ldr	r3, [pc, #252]	; (8001000 <HAL_RCC_OscConfig+0x4d8>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	4a3e      	ldr	r2, [pc, #248]	; (8001000 <HAL_RCC_OscConfig+0x4d8>)
 8000f08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f0c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	699b      	ldr	r3, [r3, #24]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d06f      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f16:	4b3a      	ldr	r3, [pc, #232]	; (8001000 <HAL_RCC_OscConfig+0x4d8>)
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	f003 030c 	and.w	r3, r3, #12
 8000f1e:	2b08      	cmp	r3, #8
 8000f20:	d067      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	699b      	ldr	r3, [r3, #24]
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d149      	bne.n	8000fbe <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f2a:	4b35      	ldr	r3, [pc, #212]	; (8001000 <HAL_RCC_OscConfig+0x4d8>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a34      	ldr	r2, [pc, #208]	; (8001000 <HAL_RCC_OscConfig+0x4d8>)
 8000f30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f36:	f7ff fb09 	bl	800054c <HAL_GetTick>
 8000f3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f3c:	e008      	b.n	8000f50 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f3e:	f7ff fb05 	bl	800054c <HAL_GetTick>
 8000f42:	4602      	mov	r2, r0
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d901      	bls.n	8000f50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	e053      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f50:	4b2b      	ldr	r3, [pc, #172]	; (8001000 <HAL_RCC_OscConfig+0x4d8>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d1f0      	bne.n	8000f3e <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	69da      	ldr	r2, [r3, #28]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6a1b      	ldr	r3, [r3, #32]
 8000f64:	431a      	orrs	r2, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f6a:	019b      	lsls	r3, r3, #6
 8000f6c:	431a      	orrs	r2, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f72:	085b      	lsrs	r3, r3, #1
 8000f74:	3b01      	subs	r3, #1
 8000f76:	041b      	lsls	r3, r3, #16
 8000f78:	431a      	orrs	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f7e:	061b      	lsls	r3, r3, #24
 8000f80:	4313      	orrs	r3, r2
 8000f82:	4a1f      	ldr	r2, [pc, #124]	; (8001000 <HAL_RCC_OscConfig+0x4d8>)
 8000f84:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000f88:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f8a:	4b1d      	ldr	r3, [pc, #116]	; (8001000 <HAL_RCC_OscConfig+0x4d8>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a1c      	ldr	r2, [pc, #112]	; (8001000 <HAL_RCC_OscConfig+0x4d8>)
 8000f90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f96:	f7ff fad9 	bl	800054c <HAL_GetTick>
 8000f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f9c:	e008      	b.n	8000fb0 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f9e:	f7ff fad5 	bl	800054c <HAL_GetTick>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d901      	bls.n	8000fb0 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8000fac:	2303      	movs	r3, #3
 8000fae:	e023      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fb0:	4b13      	ldr	r3, [pc, #76]	; (8001000 <HAL_RCC_OscConfig+0x4d8>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d0f0      	beq.n	8000f9e <HAL_RCC_OscConfig+0x476>
 8000fbc:	e01b      	b.n	8000ff6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fbe:	4b10      	ldr	r3, [pc, #64]	; (8001000 <HAL_RCC_OscConfig+0x4d8>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a0f      	ldr	r2, [pc, #60]	; (8001000 <HAL_RCC_OscConfig+0x4d8>)
 8000fc4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000fc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fca:	f7ff fabf 	bl	800054c <HAL_GetTick>
 8000fce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fd0:	e008      	b.n	8000fe4 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fd2:	f7ff fabb 	bl	800054c <HAL_GetTick>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d901      	bls.n	8000fe4 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	e009      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_RCC_OscConfig+0x4d8>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d1f0      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x4aa>
 8000ff0:	e001      	b.n	8000ff6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e000      	b.n	8000ff8 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8000ff6:	2300      	movs	r3, #0
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3718      	adds	r7, #24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40023800 	.word	0x40023800
 8001004:	40007000 	.word	0x40007000

08001008 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d101      	bne.n	8001020 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800101c:	2301      	movs	r3, #1
 800101e:	e0ce      	b.n	80011be <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001020:	4b69      	ldr	r3, [pc, #420]	; (80011c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f003 030f 	and.w	r3, r3, #15
 8001028:	683a      	ldr	r2, [r7, #0]
 800102a:	429a      	cmp	r2, r3
 800102c:	d910      	bls.n	8001050 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800102e:	4b66      	ldr	r3, [pc, #408]	; (80011c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f023 020f 	bic.w	r2, r3, #15
 8001036:	4964      	ldr	r1, [pc, #400]	; (80011c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	4313      	orrs	r3, r2
 800103c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800103e:	4b62      	ldr	r3, [pc, #392]	; (80011c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 030f 	and.w	r3, r3, #15
 8001046:	683a      	ldr	r2, [r7, #0]
 8001048:	429a      	cmp	r2, r3
 800104a:	d001      	beq.n	8001050 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	e0b6      	b.n	80011be <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 0302 	and.w	r3, r3, #2
 8001058:	2b00      	cmp	r3, #0
 800105a:	d020      	beq.n	800109e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 0304 	and.w	r3, r3, #4
 8001064:	2b00      	cmp	r3, #0
 8001066:	d005      	beq.n	8001074 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001068:	4b58      	ldr	r3, [pc, #352]	; (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	4a57      	ldr	r2, [pc, #348]	; (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 800106e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001072:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 0308 	and.w	r3, r3, #8
 800107c:	2b00      	cmp	r3, #0
 800107e:	d005      	beq.n	800108c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001080:	4b52      	ldr	r3, [pc, #328]	; (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	4a51      	ldr	r2, [pc, #324]	; (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 8001086:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800108a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800108c:	4b4f      	ldr	r3, [pc, #316]	; (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	494c      	ldr	r1, [pc, #304]	; (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 800109a:	4313      	orrs	r3, r2
 800109c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d040      	beq.n	800112c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d107      	bne.n	80010c2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010b2:	4b46      	ldr	r3, [pc, #280]	; (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d115      	bne.n	80010ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e07d      	b.n	80011be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d107      	bne.n	80010da <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010ca:	4b40      	ldr	r3, [pc, #256]	; (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d109      	bne.n	80010ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e071      	b.n	80011be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010da:	4b3c      	ldr	r3, [pc, #240]	; (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d101      	bne.n	80010ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e069      	b.n	80011be <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010ea:	4b38      	ldr	r3, [pc, #224]	; (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	f023 0203 	bic.w	r2, r3, #3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	4935      	ldr	r1, [pc, #212]	; (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 80010f8:	4313      	orrs	r3, r2
 80010fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80010fc:	f7ff fa26 	bl	800054c <HAL_GetTick>
 8001100:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001102:	e00a      	b.n	800111a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001104:	f7ff fa22 	bl	800054c <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001112:	4293      	cmp	r3, r2
 8001114:	d901      	bls.n	800111a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001116:	2303      	movs	r3, #3
 8001118:	e051      	b.n	80011be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800111a:	4b2c      	ldr	r3, [pc, #176]	; (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	f003 020c 	and.w	r2, r3, #12
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	429a      	cmp	r2, r3
 800112a:	d1eb      	bne.n	8001104 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800112c:	4b26      	ldr	r3, [pc, #152]	; (80011c8 <HAL_RCC_ClockConfig+0x1c0>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 030f 	and.w	r3, r3, #15
 8001134:	683a      	ldr	r2, [r7, #0]
 8001136:	429a      	cmp	r2, r3
 8001138:	d210      	bcs.n	800115c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800113a:	4b23      	ldr	r3, [pc, #140]	; (80011c8 <HAL_RCC_ClockConfig+0x1c0>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f023 020f 	bic.w	r2, r3, #15
 8001142:	4921      	ldr	r1, [pc, #132]	; (80011c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	4313      	orrs	r3, r2
 8001148:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800114a:	4b1f      	ldr	r3, [pc, #124]	; (80011c8 <HAL_RCC_ClockConfig+0x1c0>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 030f 	and.w	r3, r3, #15
 8001152:	683a      	ldr	r2, [r7, #0]
 8001154:	429a      	cmp	r2, r3
 8001156:	d001      	beq.n	800115c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	e030      	b.n	80011be <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f003 0304 	and.w	r3, r3, #4
 8001164:	2b00      	cmp	r3, #0
 8001166:	d008      	beq.n	800117a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001168:	4b18      	ldr	r3, [pc, #96]	; (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	4915      	ldr	r1, [pc, #84]	; (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 8001176:	4313      	orrs	r3, r2
 8001178:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0308 	and.w	r3, r3, #8
 8001182:	2b00      	cmp	r3, #0
 8001184:	d009      	beq.n	800119a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001186:	4b11      	ldr	r3, [pc, #68]	; (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	691b      	ldr	r3, [r3, #16]
 8001192:	00db      	lsls	r3, r3, #3
 8001194:	490d      	ldr	r1, [pc, #52]	; (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 8001196:	4313      	orrs	r3, r2
 8001198:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800119a:	f000 f81d 	bl	80011d8 <HAL_RCC_GetSysClockFreq>
 800119e:	4601      	mov	r1, r0
 80011a0:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	091b      	lsrs	r3, r3, #4
 80011a6:	f003 030f 	and.w	r3, r3, #15
 80011aa:	4a09      	ldr	r2, [pc, #36]	; (80011d0 <HAL_RCC_ClockConfig+0x1c8>)
 80011ac:	5cd3      	ldrb	r3, [r2, r3]
 80011ae:	fa21 f303 	lsr.w	r3, r1, r3
 80011b2:	4a08      	ldr	r2, [pc, #32]	; (80011d4 <HAL_RCC_ClockConfig+0x1cc>)
 80011b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80011b6:	2000      	movs	r0, #0
 80011b8:	f000 fc9e 	bl	8001af8 <HAL_InitTick>

  return HAL_OK;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40023c00 	.word	0x40023c00
 80011cc:	40023800 	.word	0x40023800
 80011d0:	08001d4c 	.word	0x08001d4c
 80011d4:	20000004 	.word	0x20000004

080011d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	607b      	str	r3, [r7, #4]
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	2300      	movs	r3, #0
 80011e8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011ee:	4b50      	ldr	r3, [pc, #320]	; (8001330 <HAL_RCC_GetSysClockFreq+0x158>)
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	f003 030c 	and.w	r3, r3, #12
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	d007      	beq.n	800120a <HAL_RCC_GetSysClockFreq+0x32>
 80011fa:	2b08      	cmp	r3, #8
 80011fc:	d008      	beq.n	8001210 <HAL_RCC_GetSysClockFreq+0x38>
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f040 808d 	bne.w	800131e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001204:	4b4b      	ldr	r3, [pc, #300]	; (8001334 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001206:	60bb      	str	r3, [r7, #8]
       break;
 8001208:	e08c      	b.n	8001324 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800120a:	4b4b      	ldr	r3, [pc, #300]	; (8001338 <HAL_RCC_GetSysClockFreq+0x160>)
 800120c:	60bb      	str	r3, [r7, #8]
      break;
 800120e:	e089      	b.n	8001324 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001210:	4b47      	ldr	r3, [pc, #284]	; (8001330 <HAL_RCC_GetSysClockFreq+0x158>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001218:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800121a:	4b45      	ldr	r3, [pc, #276]	; (8001330 <HAL_RCC_GetSysClockFreq+0x158>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d023      	beq.n	800126e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001226:	4b42      	ldr	r3, [pc, #264]	; (8001330 <HAL_RCC_GetSysClockFreq+0x158>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	099b      	lsrs	r3, r3, #6
 800122c:	f04f 0400 	mov.w	r4, #0
 8001230:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001234:	f04f 0200 	mov.w	r2, #0
 8001238:	ea03 0501 	and.w	r5, r3, r1
 800123c:	ea04 0602 	and.w	r6, r4, r2
 8001240:	4a3d      	ldr	r2, [pc, #244]	; (8001338 <HAL_RCC_GetSysClockFreq+0x160>)
 8001242:	fb02 f106 	mul.w	r1, r2, r6
 8001246:	2200      	movs	r2, #0
 8001248:	fb02 f205 	mul.w	r2, r2, r5
 800124c:	440a      	add	r2, r1
 800124e:	493a      	ldr	r1, [pc, #232]	; (8001338 <HAL_RCC_GetSysClockFreq+0x160>)
 8001250:	fba5 0101 	umull	r0, r1, r5, r1
 8001254:	1853      	adds	r3, r2, r1
 8001256:	4619      	mov	r1, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f04f 0400 	mov.w	r4, #0
 800125e:	461a      	mov	r2, r3
 8001260:	4623      	mov	r3, r4
 8001262:	f7fe ffd1 	bl	8000208 <__aeabi_uldivmod>
 8001266:	4603      	mov	r3, r0
 8001268:	460c      	mov	r4, r1
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	e049      	b.n	8001302 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800126e:	4b30      	ldr	r3, [pc, #192]	; (8001330 <HAL_RCC_GetSysClockFreq+0x158>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	099b      	lsrs	r3, r3, #6
 8001274:	f04f 0400 	mov.w	r4, #0
 8001278:	f240 11ff 	movw	r1, #511	; 0x1ff
 800127c:	f04f 0200 	mov.w	r2, #0
 8001280:	ea03 0501 	and.w	r5, r3, r1
 8001284:	ea04 0602 	and.w	r6, r4, r2
 8001288:	4629      	mov	r1, r5
 800128a:	4632      	mov	r2, r6
 800128c:	f04f 0300 	mov.w	r3, #0
 8001290:	f04f 0400 	mov.w	r4, #0
 8001294:	0154      	lsls	r4, r2, #5
 8001296:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800129a:	014b      	lsls	r3, r1, #5
 800129c:	4619      	mov	r1, r3
 800129e:	4622      	mov	r2, r4
 80012a0:	1b49      	subs	r1, r1, r5
 80012a2:	eb62 0206 	sbc.w	r2, r2, r6
 80012a6:	f04f 0300 	mov.w	r3, #0
 80012aa:	f04f 0400 	mov.w	r4, #0
 80012ae:	0194      	lsls	r4, r2, #6
 80012b0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80012b4:	018b      	lsls	r3, r1, #6
 80012b6:	1a5b      	subs	r3, r3, r1
 80012b8:	eb64 0402 	sbc.w	r4, r4, r2
 80012bc:	f04f 0100 	mov.w	r1, #0
 80012c0:	f04f 0200 	mov.w	r2, #0
 80012c4:	00e2      	lsls	r2, r4, #3
 80012c6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80012ca:	00d9      	lsls	r1, r3, #3
 80012cc:	460b      	mov	r3, r1
 80012ce:	4614      	mov	r4, r2
 80012d0:	195b      	adds	r3, r3, r5
 80012d2:	eb44 0406 	adc.w	r4, r4, r6
 80012d6:	f04f 0100 	mov.w	r1, #0
 80012da:	f04f 0200 	mov.w	r2, #0
 80012de:	02a2      	lsls	r2, r4, #10
 80012e0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80012e4:	0299      	lsls	r1, r3, #10
 80012e6:	460b      	mov	r3, r1
 80012e8:	4614      	mov	r4, r2
 80012ea:	4618      	mov	r0, r3
 80012ec:	4621      	mov	r1, r4
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f04f 0400 	mov.w	r4, #0
 80012f4:	461a      	mov	r2, r3
 80012f6:	4623      	mov	r3, r4
 80012f8:	f7fe ff86 	bl	8000208 <__aeabi_uldivmod>
 80012fc:	4603      	mov	r3, r0
 80012fe:	460c      	mov	r4, r1
 8001300:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8001302:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <HAL_RCC_GetSysClockFreq+0x158>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	0c1b      	lsrs	r3, r3, #16
 8001308:	f003 0303 	and.w	r3, r3, #3
 800130c:	3301      	adds	r3, #1
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001312:	68fa      	ldr	r2, [r7, #12]
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	fbb2 f3f3 	udiv	r3, r2, r3
 800131a:	60bb      	str	r3, [r7, #8]
      break;
 800131c:	e002      	b.n	8001324 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800131e:	4b05      	ldr	r3, [pc, #20]	; (8001334 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001320:	60bb      	str	r3, [r7, #8]
      break;
 8001322:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001324:	68bb      	ldr	r3, [r7, #8]
}
 8001326:	4618      	mov	r0, r3
 8001328:	3714      	adds	r7, #20
 800132a:	46bd      	mov	sp, r7
 800132c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800132e:	bf00      	nop
 8001330:	40023800 	.word	0x40023800
 8001334:	00f42400 	.word	0x00f42400
 8001338:	017d7840 	.word	0x017d7840

0800133c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001340:	4b03      	ldr	r3, [pc, #12]	; (8001350 <HAL_RCC_GetHCLKFreq+0x14>)
 8001342:	681b      	ldr	r3, [r3, #0]
}
 8001344:	4618      	mov	r0, r3
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	20000004 	.word	0x20000004

08001354 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001358:	f7ff fff0 	bl	800133c <HAL_RCC_GetHCLKFreq>
 800135c:	4601      	mov	r1, r0
 800135e:	4b05      	ldr	r3, [pc, #20]	; (8001374 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	0a9b      	lsrs	r3, r3, #10
 8001364:	f003 0307 	and.w	r3, r3, #7
 8001368:	4a03      	ldr	r2, [pc, #12]	; (8001378 <HAL_RCC_GetPCLK1Freq+0x24>)
 800136a:	5cd3      	ldrb	r3, [r2, r3]
 800136c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001370:	4618      	mov	r0, r3
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40023800 	.word	0x40023800
 8001378:	08001d5c 	.word	0x08001d5c

0800137c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	220f      	movs	r2, #15
 800138a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800138c:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <HAL_RCC_GetClockConfig+0x5c>)
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	f003 0203 	and.w	r2, r3, #3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001398:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <HAL_RCC_GetClockConfig+0x5c>)
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80013a4:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <HAL_RCC_GetClockConfig+0x5c>)
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80013b0:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <HAL_RCC_GetClockConfig+0x5c>)
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	08db      	lsrs	r3, r3, #3
 80013b6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80013be:	4b07      	ldr	r3, [pc, #28]	; (80013dc <HAL_RCC_GetClockConfig+0x60>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 020f 	and.w	r2, r3, #15
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	601a      	str	r2, [r3, #0]
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40023c00 	.word	0x40023c00

080013e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d101      	bne.n	80013f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e01d      	b.n	800142e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d106      	bne.n	800140c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f000 f815 	bl	8001436 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2202      	movs	r2, #2
 8001410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3304      	adds	r3, #4
 800141c:	4619      	mov	r1, r3
 800141e:	4610      	mov	r0, r2
 8001420:	f000 f986 	bl	8001730 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2201      	movs	r2, #1
 8001428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001436:	b480      	push	{r7}
 8001438:	b083      	sub	sp, #12
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
	...

0800144c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	68da      	ldr	r2, [r3, #12]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f042 0201 	orr.w	r2, r2, #1
 8001462:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	689a      	ldr	r2, [r3, #8]
 800146a:	4b0c      	ldr	r3, [pc, #48]	; (800149c <HAL_TIM_Base_Start_IT+0x50>)
 800146c:	4013      	ands	r3, r2
 800146e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2b06      	cmp	r3, #6
 8001474:	d00b      	beq.n	800148e <HAL_TIM_Base_Start_IT+0x42>
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800147c:	d007      	beq.n	800148e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f042 0201 	orr.w	r2, r2, #1
 800148c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800148e:	2300      	movs	r3, #0
}
 8001490:	4618      	mov	r0, r3
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	00010007 	.word	0x00010007

080014a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	691b      	ldr	r3, [r3, #16]
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d122      	bne.n	80014fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	f003 0302 	and.w	r3, r3, #2
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d11b      	bne.n	80014fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f06f 0202 	mvn.w	r2, #2
 80014cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2201      	movs	r2, #1
 80014d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	f003 0303 	and.w	r3, r3, #3
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d003      	beq.n	80014ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f000 f905 	bl	80016f2 <HAL_TIM_IC_CaptureCallback>
 80014e8:	e005      	b.n	80014f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f000 f8f7 	bl	80016de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f000 f908 	bl	8001706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	691b      	ldr	r3, [r3, #16]
 8001502:	f003 0304 	and.w	r3, r3, #4
 8001506:	2b04      	cmp	r3, #4
 8001508:	d122      	bne.n	8001550 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	f003 0304 	and.w	r3, r3, #4
 8001514:	2b04      	cmp	r3, #4
 8001516:	d11b      	bne.n	8001550 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f06f 0204 	mvn.w	r2, #4
 8001520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2202      	movs	r2, #2
 8001526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001532:	2b00      	cmp	r3, #0
 8001534:	d003      	beq.n	800153e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f000 f8db 	bl	80016f2 <HAL_TIM_IC_CaptureCallback>
 800153c:	e005      	b.n	800154a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f000 f8cd 	bl	80016de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f000 f8de 	bl	8001706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2200      	movs	r2, #0
 800154e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	f003 0308 	and.w	r3, r3, #8
 800155a:	2b08      	cmp	r3, #8
 800155c:	d122      	bne.n	80015a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	f003 0308 	and.w	r3, r3, #8
 8001568:	2b08      	cmp	r3, #8
 800156a:	d11b      	bne.n	80015a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f06f 0208 	mvn.w	r2, #8
 8001574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2204      	movs	r2, #4
 800157a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	f003 0303 	and.w	r3, r3, #3
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f000 f8b1 	bl	80016f2 <HAL_TIM_IC_CaptureCallback>
 8001590:	e005      	b.n	800159e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f000 f8a3 	bl	80016de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f000 f8b4 	bl	8001706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	f003 0310 	and.w	r3, r3, #16
 80015ae:	2b10      	cmp	r3, #16
 80015b0:	d122      	bne.n	80015f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	f003 0310 	and.w	r3, r3, #16
 80015bc:	2b10      	cmp	r3, #16
 80015be:	d11b      	bne.n	80015f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f06f 0210 	mvn.w	r2, #16
 80015c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2208      	movs	r2, #8
 80015ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	69db      	ldr	r3, [r3, #28]
 80015d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d003      	beq.n	80015e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f000 f887 	bl	80016f2 <HAL_TIM_IC_CaptureCallback>
 80015e4:	e005      	b.n	80015f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 f879 	bl	80016de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f000 f88a 	bl	8001706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	2b01      	cmp	r3, #1
 8001604:	d10e      	bne.n	8001624 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	2b01      	cmp	r3, #1
 8001612:	d107      	bne.n	8001624 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f06f 0201 	mvn.w	r2, #1
 800161c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f000 fa2c 	bl	8001a7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800162e:	2b80      	cmp	r3, #128	; 0x80
 8001630:	d10e      	bne.n	8001650 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800163c:	2b80      	cmp	r3, #128	; 0x80
 800163e:	d107      	bne.n	8001650 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f000 f91a 	bl	8001884 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	691b      	ldr	r3, [r3, #16]
 8001656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800165a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800165e:	d10e      	bne.n	800167e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800166a:	2b80      	cmp	r3, #128	; 0x80
 800166c:	d107      	bne.n	800167e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001676:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f000 f90d 	bl	8001898 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	691b      	ldr	r3, [r3, #16]
 8001684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001688:	2b40      	cmp	r3, #64	; 0x40
 800168a:	d10e      	bne.n	80016aa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	68db      	ldr	r3, [r3, #12]
 8001692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001696:	2b40      	cmp	r3, #64	; 0x40
 8001698:	d107      	bne.n	80016aa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80016a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f000 f838 	bl	800171a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	f003 0320 	and.w	r3, r3, #32
 80016b4:	2b20      	cmp	r3, #32
 80016b6:	d10e      	bne.n	80016d6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	f003 0320 	and.w	r3, r3, #32
 80016c2:	2b20      	cmp	r3, #32
 80016c4:	d107      	bne.n	80016d6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f06f 0220 	mvn.w	r2, #32
 80016ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f000 f8cd 	bl	8001870 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016de:	b480      	push	{r7}
 80016e0:	b083      	sub	sp, #12
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80016e6:	bf00      	nop
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80016f2:	b480      	push	{r7}
 80016f4:	b083      	sub	sp, #12
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001706:	b480      	push	{r7}
 8001708:	b083      	sub	sp, #12
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800171a:	b480      	push	{r7}
 800171c:	b083      	sub	sp, #12
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
	...

08001730 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4a40      	ldr	r2, [pc, #256]	; (8001844 <TIM_Base_SetConfig+0x114>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d013      	beq.n	8001770 <TIM_Base_SetConfig+0x40>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800174e:	d00f      	beq.n	8001770 <TIM_Base_SetConfig+0x40>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4a3d      	ldr	r2, [pc, #244]	; (8001848 <TIM_Base_SetConfig+0x118>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d00b      	beq.n	8001770 <TIM_Base_SetConfig+0x40>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4a3c      	ldr	r2, [pc, #240]	; (800184c <TIM_Base_SetConfig+0x11c>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d007      	beq.n	8001770 <TIM_Base_SetConfig+0x40>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4a3b      	ldr	r2, [pc, #236]	; (8001850 <TIM_Base_SetConfig+0x120>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d003      	beq.n	8001770 <TIM_Base_SetConfig+0x40>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4a3a      	ldr	r2, [pc, #232]	; (8001854 <TIM_Base_SetConfig+0x124>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d108      	bne.n	8001782 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001776:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	68fa      	ldr	r2, [r7, #12]
 800177e:	4313      	orrs	r3, r2
 8001780:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a2f      	ldr	r2, [pc, #188]	; (8001844 <TIM_Base_SetConfig+0x114>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d02b      	beq.n	80017e2 <TIM_Base_SetConfig+0xb2>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001790:	d027      	beq.n	80017e2 <TIM_Base_SetConfig+0xb2>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a2c      	ldr	r2, [pc, #176]	; (8001848 <TIM_Base_SetConfig+0x118>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d023      	beq.n	80017e2 <TIM_Base_SetConfig+0xb2>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a2b      	ldr	r2, [pc, #172]	; (800184c <TIM_Base_SetConfig+0x11c>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d01f      	beq.n	80017e2 <TIM_Base_SetConfig+0xb2>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a2a      	ldr	r2, [pc, #168]	; (8001850 <TIM_Base_SetConfig+0x120>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d01b      	beq.n	80017e2 <TIM_Base_SetConfig+0xb2>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a29      	ldr	r2, [pc, #164]	; (8001854 <TIM_Base_SetConfig+0x124>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d017      	beq.n	80017e2 <TIM_Base_SetConfig+0xb2>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a28      	ldr	r2, [pc, #160]	; (8001858 <TIM_Base_SetConfig+0x128>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d013      	beq.n	80017e2 <TIM_Base_SetConfig+0xb2>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a27      	ldr	r2, [pc, #156]	; (800185c <TIM_Base_SetConfig+0x12c>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d00f      	beq.n	80017e2 <TIM_Base_SetConfig+0xb2>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a26      	ldr	r2, [pc, #152]	; (8001860 <TIM_Base_SetConfig+0x130>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d00b      	beq.n	80017e2 <TIM_Base_SetConfig+0xb2>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a25      	ldr	r2, [pc, #148]	; (8001864 <TIM_Base_SetConfig+0x134>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d007      	beq.n	80017e2 <TIM_Base_SetConfig+0xb2>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a24      	ldr	r2, [pc, #144]	; (8001868 <TIM_Base_SetConfig+0x138>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d003      	beq.n	80017e2 <TIM_Base_SetConfig+0xb2>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a23      	ldr	r2, [pc, #140]	; (800186c <TIM_Base_SetConfig+0x13c>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d108      	bne.n	80017f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	68fa      	ldr	r2, [r7, #12]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	695b      	ldr	r3, [r3, #20]
 80017fe:	4313      	orrs	r3, r2
 8001800:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68fa      	ldr	r2, [r7, #12]
 8001806:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4a0a      	ldr	r2, [pc, #40]	; (8001844 <TIM_Base_SetConfig+0x114>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d003      	beq.n	8001828 <TIM_Base_SetConfig+0xf8>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4a0c      	ldr	r2, [pc, #48]	; (8001854 <TIM_Base_SetConfig+0x124>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d103      	bne.n	8001830 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	691a      	ldr	r2, [r3, #16]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2201      	movs	r2, #1
 8001834:	615a      	str	r2, [r3, #20]
}
 8001836:	bf00      	nop
 8001838:	3714      	adds	r7, #20
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	40010000 	.word	0x40010000
 8001848:	40000400 	.word	0x40000400
 800184c:	40000800 	.word	0x40000800
 8001850:	40000c00 	.word	0x40000c00
 8001854:	40010400 	.word	0x40010400
 8001858:	40014000 	.word	0x40014000
 800185c:	40014400 	.word	0x40014400
 8001860:	40014800 	.word	0x40014800
 8001864:	40001800 	.word	0x40001800
 8001868:	40001c00 	.word	0x40001c00
 800186c:	40002000 	.word	0x40002000

08001870 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018b0:	f7fe fe2a 	bl	8000508 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018b4:	f000 f822 	bl	80018fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018b8:	f000 f888 	bl	80019cc <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_10);
 80018bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018c0:	480d      	ldr	r0, [pc, #52]	; (80018f8 <main+0x4c>)
 80018c2:	f7ff f916 	bl	8000af2 <HAL_GPIO_TogglePin>
	  		 HAL_Delay(1000);
 80018c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018ca:	f7fe fe4b 	bl	8000564 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_10);
 80018ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018d2:	4809      	ldr	r0, [pc, #36]	; (80018f8 <main+0x4c>)
 80018d4:	f7ff f90d 	bl	8000af2 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_9);
 80018d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018dc:	4806      	ldr	r0, [pc, #24]	; (80018f8 <main+0x4c>)
 80018de:	f7ff f908 	bl	8000af2 <HAL_GPIO_TogglePin>
	         HAL_Delay(1000);
 80018e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018e6:	f7fe fe3d 	bl	8000564 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_9);
 80018ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018ee:	4802      	ldr	r0, [pc, #8]	; (80018f8 <main+0x4c>)
 80018f0:	f7ff f8ff 	bl	8000af2 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_10);
 80018f4:	e7e2      	b.n	80018bc <main+0x10>
 80018f6:	bf00      	nop
 80018f8:	40021400 	.word	0x40021400

080018fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b094      	sub	sp, #80	; 0x50
 8001900:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001902:	f107 0320 	add.w	r3, r7, #32
 8001906:	2230      	movs	r2, #48	; 0x30
 8001908:	2100      	movs	r1, #0
 800190a:	4618      	mov	r0, r3
 800190c:	f000 fa0a 	bl	8001d24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001910:	f107 030c 	add.w	r3, r7, #12
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001920:	4b28      	ldr	r3, [pc, #160]	; (80019c4 <SystemClock_Config+0xc8>)
 8001922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001924:	4a27      	ldr	r2, [pc, #156]	; (80019c4 <SystemClock_Config+0xc8>)
 8001926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800192a:	6413      	str	r3, [r2, #64]	; 0x40
 800192c:	4b25      	ldr	r3, [pc, #148]	; (80019c4 <SystemClock_Config+0xc8>)
 800192e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001934:	60bb      	str	r3, [r7, #8]
 8001936:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001938:	4b23      	ldr	r3, [pc, #140]	; (80019c8 <SystemClock_Config+0xcc>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001940:	4a21      	ldr	r2, [pc, #132]	; (80019c8 <SystemClock_Config+0xcc>)
 8001942:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001946:	6013      	str	r3, [r2, #0]
 8001948:	4b1f      	ldr	r3, [pc, #124]	; (80019c8 <SystemClock_Config+0xcc>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001950:	607b      	str	r3, [r7, #4]
 8001952:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001954:	2302      	movs	r3, #2
 8001956:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001958:	2301      	movs	r3, #1
 800195a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800195c:	2310      	movs	r3, #16
 800195e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001960:	2302      	movs	r3, #2
 8001962:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001964:	2300      	movs	r3, #0
 8001966:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 10;
 8001968:	230a      	movs	r3, #10
 800196a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 210;
 800196c:	23d2      	movs	r3, #210	; 0xd2
 800196e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001970:	2302      	movs	r3, #2
 8001972:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001974:	2302      	movs	r3, #2
 8001976:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001978:	f107 0320 	add.w	r3, r7, #32
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff f8d3 	bl	8000b28 <HAL_RCC_OscConfig>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001988:	f000 f88a 	bl	8001aa0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800198c:	230f      	movs	r3, #15
 800198e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001990:	2302      	movs	r3, #2
 8001992:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001998:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800199c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800199e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80019a4:	f107 030c 	add.w	r3, r7, #12
 80019a8:	2105      	movs	r1, #5
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff fb2c 	bl	8001008 <HAL_RCC_ClockConfig>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80019b6:	f000 f873 	bl	8001aa0 <Error_Handler>
  }
}
 80019ba:	bf00      	nop
 80019bc:	3750      	adds	r7, #80	; 0x50
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40023800 	.word	0x40023800
 80019c8:	40007000 	.word	0x40007000

080019cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b08a      	sub	sp, #40	; 0x28
 80019d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d2:	f107 0314 	add.w	r3, r7, #20
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]
 80019dc:	609a      	str	r2, [r3, #8]
 80019de:	60da      	str	r2, [r3, #12]
 80019e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e2:	4b24      	ldr	r3, [pc, #144]	; (8001a74 <MX_GPIO_Init+0xa8>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	4a23      	ldr	r2, [pc, #140]	; (8001a74 <MX_GPIO_Init+0xa8>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	6313      	str	r3, [r2, #48]	; 0x30
 80019ee:	4b21      	ldr	r3, [pc, #132]	; (8001a74 <MX_GPIO_Init+0xa8>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	613b      	str	r3, [r7, #16]
 80019f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019fa:	4b1e      	ldr	r3, [pc, #120]	; (8001a74 <MX_GPIO_Init+0xa8>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	4a1d      	ldr	r2, [pc, #116]	; (8001a74 <MX_GPIO_Init+0xa8>)
 8001a00:	f043 0304 	orr.w	r3, r3, #4
 8001a04:	6313      	str	r3, [r2, #48]	; 0x30
 8001a06:	4b1b      	ldr	r3, [pc, #108]	; (8001a74 <MX_GPIO_Init+0xa8>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	f003 0304 	and.w	r3, r3, #4
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a12:	4b18      	ldr	r3, [pc, #96]	; (8001a74 <MX_GPIO_Init+0xa8>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	4a17      	ldr	r2, [pc, #92]	; (8001a74 <MX_GPIO_Init+0xa8>)
 8001a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1e:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <MX_GPIO_Init+0xa8>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a26:	60bb      	str	r3, [r7, #8]
 8001a28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a2a:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <MX_GPIO_Init+0xa8>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	4a11      	ldr	r2, [pc, #68]	; (8001a74 <MX_GPIO_Init+0xa8>)
 8001a30:	f043 0320 	orr.w	r3, r3, #32
 8001a34:	6313      	str	r3, [r2, #48]	; 0x30
 8001a36:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <MX_GPIO_Init+0xa8>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	f003 0320 	and.w	r3, r3, #32
 8001a3e:	607b      	str	r3, [r7, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10|GPIO_PIN_9, GPIO_PIN_RESET);
 8001a42:	2200      	movs	r2, #0
 8001a44:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001a48:	480b      	ldr	r0, [pc, #44]	; (8001a78 <MX_GPIO_Init+0xac>)
 8001a4a:	f7ff f839 	bl	8000ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF10 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8001a4e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a54:	2301      	movs	r3, #1
 8001a56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a60:	f107 0314 	add.w	r3, r7, #20
 8001a64:	4619      	mov	r1, r3
 8001a66:	4804      	ldr	r0, [pc, #16]	; (8001a78 <MX_GPIO_Init+0xac>)
 8001a68:	f7fe fe80 	bl	800076c <HAL_GPIO_Init>

}
 8001a6c:	bf00      	nop
 8001a6e:	3728      	adds	r7, #40	; 0x28
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40023800 	.word	0x40023800
 8001a78:	40021400 	.word	0x40021400

08001a7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a04      	ldr	r2, [pc, #16]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d101      	bne.n	8001a92 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a8e:	f7fe fd49 	bl	8000524 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40002000 	.word	0x40002000

08001aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
	...

08001ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ab6:	4b0f      	ldr	r3, [pc, #60]	; (8001af4 <HAL_MspInit+0x44>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	4a0e      	ldr	r2, [pc, #56]	; (8001af4 <HAL_MspInit+0x44>)
 8001abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ac2:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <HAL_MspInit+0x44>)
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aca:	607b      	str	r3, [r7, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ace:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <HAL_MspInit+0x44>)
 8001ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad2:	4a08      	ldr	r2, [pc, #32]	; (8001af4 <HAL_MspInit+0x44>)
 8001ad4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8001ada:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <HAL_MspInit+0x44>)
 8001adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ae2:	603b      	str	r3, [r7, #0]
 8001ae4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	40023800 	.word	0x40023800

08001af8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08c      	sub	sp, #48	; 0x30
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001b04:	2300      	movs	r3, #0
 8001b06:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0); 
 8001b08:	2200      	movs	r2, #0
 8001b0a:	6879      	ldr	r1, [r7, #4]
 8001b0c:	202d      	movs	r0, #45	; 0x2d
 8001b0e:	f7fe fe03 	bl	8000718 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn); 
 8001b12:	202d      	movs	r0, #45	; 0x2d
 8001b14:	f7fe fe1c 	bl	8000750 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8001b18:	4b1f      	ldr	r3, [pc, #124]	; (8001b98 <HAL_InitTick+0xa0>)
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1c:	4a1e      	ldr	r2, [pc, #120]	; (8001b98 <HAL_InitTick+0xa0>)
 8001b1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b22:	6413      	str	r3, [r2, #64]	; 0x40
 8001b24:	4b1c      	ldr	r3, [pc, #112]	; (8001b98 <HAL_InitTick+0xa0>)
 8001b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b30:	f107 0210 	add.w	r2, r7, #16
 8001b34:	f107 0314 	add.w	r3, r7, #20
 8001b38:	4611      	mov	r1, r2
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff fc1e 	bl	800137c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001b40:	f7ff fc08 	bl	8001354 <HAL_RCC_GetPCLK1Freq>
 8001b44:	4603      	mov	r3, r0
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b4c:	4a13      	ldr	r2, [pc, #76]	; (8001b9c <HAL_InitTick+0xa4>)
 8001b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b52:	0c9b      	lsrs	r3, r3, #18
 8001b54:	3b01      	subs	r3, #1
 8001b56:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8001b58:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <HAL_InitTick+0xa8>)
 8001b5a:	4a12      	ldr	r2, [pc, #72]	; (8001ba4 <HAL_InitTick+0xac>)
 8001b5c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000 / 1000) - 1;
 8001b5e:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <HAL_InitTick+0xa8>)
 8001b60:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b64:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8001b66:	4a0e      	ldr	r2, [pc, #56]	; (8001ba0 <HAL_InitTick+0xa8>)
 8001b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b6a:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <HAL_InitTick+0xa8>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b72:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <HAL_InitTick+0xa8>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8001b78:	4809      	ldr	r0, [pc, #36]	; (8001ba0 <HAL_InitTick+0xa8>)
 8001b7a:	f7ff fc31 	bl	80013e0 <HAL_TIM_Base_Init>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d104      	bne.n	8001b8e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8001b84:	4806      	ldr	r0, [pc, #24]	; (8001ba0 <HAL_InitTick+0xa8>)
 8001b86:	f7ff fc61 	bl	800144c <HAL_TIM_Base_Start_IT>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	e000      	b.n	8001b90 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3730      	adds	r7, #48	; 0x30
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	431bde83 	.word	0x431bde83
 8001ba0:	20000028 	.word	0x20000028
 8001ba4:	40002000 	.word	0x40002000

08001ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bba:	e7fe      	b.n	8001bba <HardFault_Handler+0x4>

08001bbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bc0:	e7fe      	b.n	8001bc0 <MemManage_Handler+0x4>

08001bc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bc6:	e7fe      	b.n	8001bc6 <BusFault_Handler+0x4>

08001bc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bcc:	e7fe      	b.n	8001bcc <UsageFault_Handler+0x4>

08001bce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
	...

08001c08 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001c0c:	4802      	ldr	r0, [pc, #8]	; (8001c18 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001c0e:	f7ff fc47 	bl	80014a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20000028 	.word	0x20000028

08001c1c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c20:	4b15      	ldr	r3, [pc, #84]	; (8001c78 <SystemInit+0x5c>)
 8001c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c26:	4a14      	ldr	r2, [pc, #80]	; (8001c78 <SystemInit+0x5c>)
 8001c28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001c30:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <SystemInit+0x60>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a11      	ldr	r2, [pc, #68]	; (8001c7c <SystemInit+0x60>)
 8001c36:	f043 0301 	orr.w	r3, r3, #1
 8001c3a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001c3c:	4b0f      	ldr	r3, [pc, #60]	; (8001c7c <SystemInit+0x60>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001c42:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <SystemInit+0x60>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	490d      	ldr	r1, [pc, #52]	; (8001c7c <SystemInit+0x60>)
 8001c48:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <SystemInit+0x64>)
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001c4e:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <SystemInit+0x60>)
 8001c50:	4a0c      	ldr	r2, [pc, #48]	; (8001c84 <SystemInit+0x68>)
 8001c52:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001c54:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <SystemInit+0x60>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a08      	ldr	r2, [pc, #32]	; (8001c7c <SystemInit+0x60>)
 8001c5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c5e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001c60:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <SystemInit+0x60>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c66:	4b04      	ldr	r3, [pc, #16]	; (8001c78 <SystemInit+0x5c>)
 8001c68:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c6c:	609a      	str	r2, [r3, #8]
#endif
}
 8001c6e:	bf00      	nop
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	e000ed00 	.word	0xe000ed00
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	fef6ffff 	.word	0xfef6ffff
 8001c84:	24003010 	.word	0x24003010

08001c88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cc0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001c8c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c8e:	e003      	b.n	8001c98 <LoopCopyDataInit>

08001c90 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c90:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001c92:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001c94:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001c96:	3104      	adds	r1, #4

08001c98 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001c98:	480b      	ldr	r0, [pc, #44]	; (8001cc8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001c9a:	4b0c      	ldr	r3, [pc, #48]	; (8001ccc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001c9c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c9e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ca0:	d3f6      	bcc.n	8001c90 <CopyDataInit>
  ldr  r2, =_sbss
 8001ca2:	4a0b      	ldr	r2, [pc, #44]	; (8001cd0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ca4:	e002      	b.n	8001cac <LoopFillZerobss>

08001ca6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001ca6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ca8:	f842 3b04 	str.w	r3, [r2], #4

08001cac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001cac:	4b09      	ldr	r3, [pc, #36]	; (8001cd4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001cae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001cb0:	d3f9      	bcc.n	8001ca6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cb2:	f7ff ffb3 	bl	8001c1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cb6:	f000 f811 	bl	8001cdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cba:	f7ff fdf7 	bl	80018ac <main>
  bx  lr    
 8001cbe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cc0:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001cc4:	08001d74 	.word	0x08001d74
  ldr  r0, =_sdata
 8001cc8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ccc:	20000008 	.word	0x20000008
  ldr  r2, =_sbss
 8001cd0:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 8001cd4:	20000068 	.word	0x20000068

08001cd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cd8:	e7fe      	b.n	8001cd8 <ADC_IRQHandler>
	...

08001cdc <__libc_init_array>:
 8001cdc:	b570      	push	{r4, r5, r6, lr}
 8001cde:	4e0d      	ldr	r6, [pc, #52]	; (8001d14 <__libc_init_array+0x38>)
 8001ce0:	4c0d      	ldr	r4, [pc, #52]	; (8001d18 <__libc_init_array+0x3c>)
 8001ce2:	1ba4      	subs	r4, r4, r6
 8001ce4:	10a4      	asrs	r4, r4, #2
 8001ce6:	2500      	movs	r5, #0
 8001ce8:	42a5      	cmp	r5, r4
 8001cea:	d109      	bne.n	8001d00 <__libc_init_array+0x24>
 8001cec:	4e0b      	ldr	r6, [pc, #44]	; (8001d1c <__libc_init_array+0x40>)
 8001cee:	4c0c      	ldr	r4, [pc, #48]	; (8001d20 <__libc_init_array+0x44>)
 8001cf0:	f000 f820 	bl	8001d34 <_init>
 8001cf4:	1ba4      	subs	r4, r4, r6
 8001cf6:	10a4      	asrs	r4, r4, #2
 8001cf8:	2500      	movs	r5, #0
 8001cfa:	42a5      	cmp	r5, r4
 8001cfc:	d105      	bne.n	8001d0a <__libc_init_array+0x2e>
 8001cfe:	bd70      	pop	{r4, r5, r6, pc}
 8001d00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d04:	4798      	blx	r3
 8001d06:	3501      	adds	r5, #1
 8001d08:	e7ee      	b.n	8001ce8 <__libc_init_array+0xc>
 8001d0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d0e:	4798      	blx	r3
 8001d10:	3501      	adds	r5, #1
 8001d12:	e7f2      	b.n	8001cfa <__libc_init_array+0x1e>
 8001d14:	08001d6c 	.word	0x08001d6c
 8001d18:	08001d6c 	.word	0x08001d6c
 8001d1c:	08001d6c 	.word	0x08001d6c
 8001d20:	08001d70 	.word	0x08001d70

08001d24 <memset>:
 8001d24:	4402      	add	r2, r0
 8001d26:	4603      	mov	r3, r0
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d100      	bne.n	8001d2e <memset+0xa>
 8001d2c:	4770      	bx	lr
 8001d2e:	f803 1b01 	strb.w	r1, [r3], #1
 8001d32:	e7f9      	b.n	8001d28 <memset+0x4>

08001d34 <_init>:
 8001d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d36:	bf00      	nop
 8001d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d3a:	bc08      	pop	{r3}
 8001d3c:	469e      	mov	lr, r3
 8001d3e:	4770      	bx	lr

08001d40 <_fini>:
 8001d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d42:	bf00      	nop
 8001d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d46:	bc08      	pop	{r3}
 8001d48:	469e      	mov	lr, r3
 8001d4a:	4770      	bx	lr
